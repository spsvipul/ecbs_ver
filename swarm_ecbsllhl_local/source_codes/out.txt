
ecbs_simple_swarm:     file format elf64-x86-64


Disassembly of section .init:

00000000004093c8 <_init>:
  4093c8:	48 83 ec 08          	sub    $0x8,%rsp
  4093cc:	48 8b 05 0d 1c 22 00 	mov    0x221c0d(%rip),%rax        # 62afe0 <__gmon_start__>
  4093d3:	48 85 c0             	test   %rax,%rax
  4093d6:	74 02                	je     4093da <_init+0x12>
  4093d8:	ff d0                	callq  *%rax
  4093da:	48 83 c4 08          	add    $0x8,%rsp
  4093de:	c3                   	retq   

Disassembly of section .plt:

00000000004093e0 <.plt>:
  4093e0:	ff 35 22 1c 22 00    	pushq  0x221c22(%rip)        # 62b008 <_GLOBAL_OFFSET_TABLE_+0x8>
  4093e6:	ff 25 24 1c 22 00    	jmpq   *0x221c24(%rip)        # 62b010 <_GLOBAL_OFFSET_TABLE_+0x10>
  4093ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004093f0 <__printf_chk@plt>:
  4093f0:	ff 25 22 1c 22 00    	jmpq   *0x221c22(%rip)        # 62b018 <__printf_chk@GLIBC_2.3.4>
  4093f6:	68 00 00 00 00       	pushq  $0x0
  4093fb:	e9 e0 ff ff ff       	jmpq   4093e0 <.plt>

0000000000409400 <_Znam@plt>:
  409400:	ff 25 1a 1c 22 00    	jmpq   *0x221c1a(%rip)        # 62b020 <_Znam@GLIBCXX_3.4>
  409406:	68 01 00 00 00       	pushq  $0x1
  40940b:	e9 d0 ff ff ff       	jmpq   4093e0 <.plt>

0000000000409410 <_ZNSo3putEc@plt>:
  409410:	ff 25 12 1c 22 00    	jmpq   *0x221c12(%rip)        # 62b028 <_ZNSo3putEc@GLIBCXX_3.4>
  409416:	68 02 00 00 00       	pushq  $0x2
  40941b:	e9 c0 ff ff ff       	jmpq   4093e0 <.plt>

0000000000409420 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@plt>:
  409420:	ff 25 0a 1c 22 00    	jmpq   *0x221c0a(%rip)        # 62b030 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@GLIBCXX_3.4.21>
  409426:	68 03 00 00 00       	pushq  $0x3
  40942b:	e9 b0 ff ff ff       	jmpq   4093e0 <.plt>

0000000000409430 <_ZNSt6chrono3_V212system_clock3nowEv@plt>:
  409430:	ff 25 02 1c 22 00    	jmpq   *0x221c02(%rip)        # 62b038 <_ZNSt6chrono3_V212system_clock3nowEv@GLIBCXX_3.4.19>
  409436:	68 04 00 00 00       	pushq  $0x4
  40943b:	e9 a0 ff ff ff       	jmpq   4093e0 <.plt>

0000000000409440 <_ZN4YAML6detail9node_data3endEv@plt>:
  409440:	ff 25 fa 1b 22 00    	jmpq   *0x221bfa(%rip)        # 62b040 <_ZN4YAML6detail9node_data3endEv>
  409446:	68 05 00 00 00       	pushq  $0x5
  40944b:	e9 90 ff ff ff       	jmpq   4093e0 <.plt>

0000000000409450 <syscall@plt>:
  409450:	ff 25 f2 1b 22 00    	jmpq   *0x221bf2(%rip)        # 62b048 <syscall@GLIBC_2.2.5>
  409456:	68 06 00 00 00       	pushq  $0x6
  40945b:	e9 80 ff ff ff       	jmpq   4093e0 <.plt>

0000000000409460 <_ZN5boost15program_options16validation_error12get_templateB5cxx11ENS1_6kind_tE@plt>:
  409460:	ff 25 ea 1b 22 00    	jmpq   *0x221bea(%rip)        # 62b050 <_ZN5boost15program_options16validation_error12get_templateB5cxx11ENS1_6kind_tE>
  409466:	68 07 00 00 00       	pushq  $0x7
  40946b:	e9 70 ff ff ff       	jmpq   4093e0 <.plt>

0000000000409470 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>:
  409470:	ff 25 e2 1b 22 00    	jmpq   *0x221be2(%rip)        # 62b058 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@GLIBCXX_3.4>
  409476:	68 08 00 00 00       	pushq  $0x8
  40947b:	e9 60 ff ff ff       	jmpq   4093e0 <.plt>

0000000000409480 <_ZN5boost15program_optionslsERSoRKNS0_19options_descriptionE@plt>:
  409480:	ff 25 da 1b 22 00    	jmpq   *0x221bda(%rip)        # 62b060 <_ZN5boost15program_optionslsERSoRKNS0_19options_descriptionE>
  409486:	68 09 00 00 00       	pushq  $0x9
  40948b:	e9 50 ff ff ff       	jmpq   4093e0 <.plt>

0000000000409490 <_ZN5boost15program_options6detail7cmdline3runEv@plt>:
  409490:	ff 25 d2 1b 22 00    	jmpq   *0x221bd2(%rip)        # 62b068 <_ZN5boost15program_options6detail7cmdline3runEv>
  409496:	68 0a 00 00 00       	pushq  $0xa
  40949b:	e9 40 ff ff ff       	jmpq   4093e0 <.plt>

00000000004094a0 <swapcontext@plt>:
  4094a0:	ff 25 ca 1b 22 00    	jmpq   *0x221bca(%rip)        # 62b070 <swapcontext@GLIBC_2.2.5>
  4094a6:	68 0b 00 00 00       	pushq  $0xb
  4094ab:	e9 30 ff ff ff       	jmpq   4093e0 <.plt>

00000000004094b0 <_ZSt9terminatev@plt>:
  4094b0:	ff 25 c2 1b 22 00    	jmpq   *0x221bc2(%rip)        # 62b078 <_ZSt9terminatev@GLIBCXX_3.4>
  4094b6:	68 0c 00 00 00       	pushq  $0xc
  4094bb:	e9 20 ff ff ff       	jmpq   4093e0 <.plt>

00000000004094c0 <_ZNSt8ios_baseC2Ev@plt>:
  4094c0:	ff 25 ba 1b 22 00    	jmpq   *0x221bba(%rip)        # 62b080 <_ZNSt8ios_baseC2Ev@GLIBCXX_3.4>
  4094c6:	68 0d 00 00 00       	pushq  $0xd
  4094cb:	e9 10 ff ff ff       	jmpq   4093e0 <.plt>

00000000004094d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>:
  4094d0:	ff 25 b2 1b 22 00    	jmpq   *0x221bb2(%rip)        # 62b088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@GLIBCXX_3.4.21>
  4094d6:	68 0e 00 00 00       	pushq  $0xe
  4094db:	e9 00 ff ff ff       	jmpq   4093e0 <.plt>

00000000004094e0 <_ZN4YAML6detail9node_data8set_nullEv@plt>:
  4094e0:	ff 25 aa 1b 22 00    	jmpq   *0x221baa(%rip)        # 62b090 <_ZN4YAML6detail9node_data8set_nullEv>
  4094e6:	68 0f 00 00 00       	pushq  $0xf
  4094eb:	e9 f0 fe ff ff       	jmpq   4093e0 <.plt>

00000000004094f0 <_ZNSt8ios_baseD2Ev@plt>:
  4094f0:	ff 25 a2 1b 22 00    	jmpq   *0x221ba2(%rip)        # 62b098 <_ZNSt8ios_baseD2Ev@GLIBCXX_3.4>
  4094f6:	68 10 00 00 00       	pushq  $0x10
  4094fb:	e9 e0 fe ff ff       	jmpq   4093e0 <.plt>

0000000000409500 <makecontext@plt>:
  409500:	ff 25 9a 1b 22 00    	jmpq   *0x221b9a(%rip)        # 62b0a0 <makecontext@GLIBC_2.2.5>
  409506:	68 11 00 00 00       	pushq  $0x11
  40950b:	e9 d0 fe ff ff       	jmpq   4093e0 <.plt>

0000000000409510 <_ZSt17__throw_bad_allocv@plt>:
  409510:	ff 25 92 1b 22 00    	jmpq   *0x221b92(%rip)        # 62b0a8 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
  409516:	68 12 00 00 00       	pushq  $0x12
  40951b:	e9 c0 fe ff ff       	jmpq   4093e0 <.plt>

0000000000409520 <_ZN4YAML6detail6memory11create_nodeEv@plt>:
  409520:	ff 25 8a 1b 22 00    	jmpq   *0x221b8a(%rip)        # 62b0b0 <_ZN4YAML6detail6memory11create_nodeEv>
  409526:	68 13 00 00 00       	pushq  $0x13
  40952b:	e9 b0 fe ff ff       	jmpq   4093e0 <.plt>

0000000000409530 <__cxa_begin_catch@plt>:
  409530:	ff 25 82 1b 22 00    	jmpq   *0x221b82(%rip)        # 62b0b8 <__cxa_begin_catch@CXXABI_1.3>
  409536:	68 14 00 00 00       	pushq  $0x14
  40953b:	e9 a0 fe ff ff       	jmpq   4093e0 <.plt>

0000000000409540 <_ZN5boost15program_options13variables_mapC1Ev@plt>:
  409540:	ff 25 7a 1b 22 00    	jmpq   *0x221b7a(%rip)        # 62b0c0 <_ZN5boost15program_options13variables_mapC1Ev>
  409546:	68 15 00 00 00       	pushq  $0x15
  40954b:	e9 90 fe ff ff       	jmpq   4093e0 <.plt>

0000000000409550 <strlen@plt>:
  409550:	ff 25 72 1b 22 00    	jmpq   *0x221b72(%rip)        # 62b0c8 <strlen@GLIBC_2.2.5>
  409556:	68 16 00 00 00       	pushq  $0x16
  40955b:	e9 80 fe ff ff       	jmpq   4093e0 <.plt>

0000000000409560 <memcmp@plt>:
  409560:	ff 25 6a 1b 22 00    	jmpq   *0x221b6a(%rip)        # 62b0d0 <memcmp@GLIBC_2.2.5>
  409566:	68 17 00 00 00       	pushq  $0x17
  40956b:	e9 70 fe ff ff       	jmpq   4093e0 <.plt>

0000000000409570 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@plt>:
  409570:	ff 25 62 1b 22 00    	jmpq   *0x221b62(%rip)        # 62b0d8 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
  409576:	68 18 00 00 00       	pushq  $0x18
  40957b:	e9 60 fe ff ff       	jmpq   4093e0 <.plt>

0000000000409580 <__cxa_allocate_exception@plt>:
  409580:	ff 25 5a 1b 22 00    	jmpq   *0x221b5a(%rip)        # 62b0e0 <__cxa_allocate_exception@CXXABI_1.3>
  409586:	68 19 00 00 00       	pushq  $0x19
  40958b:	e9 50 fe ff ff       	jmpq   4093e0 <.plt>

0000000000409590 <pthread_join@plt>:
  409590:	ff 25 52 1b 22 00    	jmpq   *0x221b52(%rip)        # 62b0e8 <pthread_join@GLIBC_2.2.5>
  409596:	68 1a 00 00 00       	pushq  $0x1a
  40959b:	e9 40 fe ff ff       	jmpq   4093e0 <.plt>

00000000004095a0 <_ZSt20__throw_length_errorPKc@plt>:
  4095a0:	ff 25 4a 1b 22 00    	jmpq   *0x221b4a(%rip)        # 62b0f0 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
  4095a6:	68 1b 00 00 00       	pushq  $0x1b
  4095ab:	e9 30 fe ff ff       	jmpq   4093e0 <.plt>

00000000004095b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@plt>:
  4095b0:	ff 25 42 1b 22 00    	jmpq   *0x221b42(%rip)        # 62b0f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@GLIBCXX_3.4.21>
  4095b6:	68 1c 00 00 00       	pushq  $0x1c
  4095bb:	e9 20 fe ff ff       	jmpq   4093e0 <.plt>

00000000004095c0 <memset@plt>:
  4095c0:	ff 25 3a 1b 22 00    	jmpq   *0x221b3a(%rip)        # 62b100 <memset@GLIBC_2.2.5>
  4095c6:	68 1d 00 00 00       	pushq  $0x1d
  4095cb:	e9 10 fe ff ff       	jmpq   4093e0 <.plt>

00000000004095d0 <abort@plt>:
  4095d0:	ff 25 32 1b 22 00    	jmpq   *0x221b32(%rip)        # 62b108 <abort@GLIBC_2.2.5>
  4095d6:	68 1e 00 00 00       	pushq  $0x1e
  4095db:	e9 00 fe ff ff       	jmpq   4093e0 <.plt>

00000000004095e0 <_ZN5boost15program_options6notifyERNS0_13variables_mapE@plt>:
  4095e0:	ff 25 2a 1b 22 00    	jmpq   *0x221b2a(%rip)        # 62b110 <_ZN5boost15program_options6notifyERNS0_13variables_mapE>
  4095e6:	68 1f 00 00 00       	pushq  $0x1f
  4095eb:	e9 f0 fd ff ff       	jmpq   4093e0 <.plt>

00000000004095f0 <pthread_create@plt>:
  4095f0:	ff 25 22 1b 22 00    	jmpq   *0x221b22(%rip)        # 62b118 <pthread_create@GLIBC_2.2.5>
  4095f6:	68 20 00 00 00       	pushq  $0x20
  4095fb:	e9 e0 fd ff ff       	jmpq   4093e0 <.plt>

0000000000409600 <_ZN4YAML6detail9node_data12mark_definedEv@plt>:
  409600:	ff 25 1a 1b 22 00    	jmpq   *0x221b1a(%rip)        # 62b120 <_ZN4YAML6detail9node_data12mark_definedEv>
  409606:	68 21 00 00 00       	pushq  $0x21
  40960b:	e9 d0 fd ff ff       	jmpq   4093e0 <.plt>

0000000000409610 <_ZN5boost15program_options20invalid_option_valueC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409610:	ff 25 12 1b 22 00    	jmpq   *0x221b12(%rip)        # 62b128 <_ZN5boost15program_options20invalid_option_valueC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  409616:	68 22 00 00 00       	pushq  $0x22
  40961b:	e9 c0 fd ff ff       	jmpq   4093e0 <.plt>

0000000000409620 <__sprintf_chk@plt>:
  409620:	ff 25 0a 1b 22 00    	jmpq   *0x221b0a(%rip)        # 62b130 <__sprintf_chk@GLIBC_2.3.4>
  409626:	68 23 00 00 00       	pushq  $0x23
  40962b:	e9 b0 fd ff ff       	jmpq   4093e0 <.plt>

0000000000409630 <__snprintf_chk@plt>:
  409630:	ff 25 02 1b 22 00    	jmpq   *0x221b02(%rip)        # 62b138 <__snprintf_chk@GLIBC_2.3.4>
  409636:	68 24 00 00 00       	pushq  $0x24
  40963b:	e9 a0 fd ff ff       	jmpq   4093e0 <.plt>

0000000000409640 <_ZNSirsERi@plt>:
  409640:	ff 25 fa 1a 22 00    	jmpq   *0x221afa(%rip)        # 62b140 <_ZNSirsERi@GLIBCXX_3.4>
  409646:	68 25 00 00 00       	pushq  $0x25
  40964b:	e9 90 fd ff ff       	jmpq   4093e0 <.plt>

0000000000409650 <__cxa_guard_release@plt>:
  409650:	ff 25 f2 1a 22 00    	jmpq   *0x221af2(%rip)        # 62b148 <__cxa_guard_release@CXXABI_1.3>
  409656:	68 26 00 00 00       	pushq  $0x26
  40965b:	e9 80 fd ff ff       	jmpq   4093e0 <.plt>

0000000000409660 <_ZN5boost15program_options6detail7cmdlineC2ERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EE@plt>:
  409660:	ff 25 ea 1a 22 00    	jmpq   *0x221aea(%rip)        # 62b150 <_ZN5boost15program_options6detail7cmdlineC2ERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EE>
  409666:	68 27 00 00 00       	pushq  $0x27
  40966b:	e9 70 fd ff ff       	jmpq   4093e0 <.plt>

0000000000409670 <__assert_fail@plt>:
  409670:	ff 25 e2 1a 22 00    	jmpq   *0x221ae2(%rip)        # 62b158 <__assert_fail@GLIBC_2.2.5>
  409676:	68 28 00 00 00       	pushq  $0x28
  40967b:	e9 60 fd ff ff       	jmpq   4093e0 <.plt>

0000000000409680 <getcontext@plt>:
  409680:	ff 25 da 1a 22 00    	jmpq   *0x221ada(%rip)        # 62b160 <getcontext@GLIBC_2.2.5>
  409686:	68 29 00 00 00       	pushq  $0x29
  40968b:	e9 50 fd ff ff       	jmpq   4093e0 <.plt>

0000000000409690 <_ZNSo9_M_insertImEERSoT_@plt>:
  409690:	ff 25 d2 1a 22 00    	jmpq   *0x221ad2(%rip)        # 62b168 <_ZNSo9_M_insertImEERSoT_@GLIBCXX_3.4.9>
  409696:	68 2a 00 00 00       	pushq  $0x2a
  40969b:	e9 40 fd ff ff       	jmpq   4093e0 <.plt>

00000000004096a0 <_ZNSo5flushEv@plt>:
  4096a0:	ff 25 ca 1a 22 00    	jmpq   *0x221aca(%rip)        # 62b170 <_ZNSo5flushEv@GLIBCXX_3.4>
  4096a6:	68 2b 00 00 00       	pushq  $0x2b
  4096ab:	e9 30 fd ff ff       	jmpq   4093e0 <.plt>

00000000004096b0 <_ZN4YAML6detail9node_data10set_scalarERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  4096b0:	ff 25 c2 1a 22 00    	jmpq   *0x221ac2(%rip)        # 62b178 <_ZN4YAML6detail9node_data10set_scalarERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  4096b6:	68 2c 00 00 00       	pushq  $0x2c
  4096bb:	e9 20 fd ff ff       	jmpq   4093e0 <.plt>

00000000004096c0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>:
  4096c0:	ff 25 ba 1a 22 00    	jmpq   *0x221aba(%rip)        # 62b180 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
  4096c6:	68 2d 00 00 00       	pushq  $0x2d
  4096cb:	e9 10 fd ff ff       	jmpq   4093e0 <.plt>

00000000004096d0 <_ZSt19__throw_logic_errorPKc@plt>:
  4096d0:	ff 25 b2 1a 22 00    	jmpq   *0x221ab2(%rip)        # 62b188 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
  4096d6:	68 2e 00 00 00       	pushq  $0x2e
  4096db:	e9 00 fd ff ff       	jmpq   4093e0 <.plt>

00000000004096e0 <__cxa_free_exception@plt>:
  4096e0:	ff 25 aa 1a 22 00    	jmpq   *0x221aaa(%rip)        # 62b190 <__cxa_free_exception@CXXABI_1.3>
  4096e6:	68 2f 00 00 00       	pushq  $0x2f
  4096eb:	e9 f0 fc ff ff       	jmpq   4093e0 <.plt>

00000000004096f0 <pthread_attr_getstack@plt>:
  4096f0:	ff 25 a2 1a 22 00    	jmpq   *0x221aa2(%rip)        # 62b198 <pthread_attr_getstack@GLIBC_2.2.5>
  4096f6:	68 30 00 00 00       	pushq  $0x30
  4096fb:	e9 e0 fc ff ff       	jmpq   4093e0 <.plt>

0000000000409700 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>:
  409700:	ff 25 9a 1a 22 00    	jmpq   *0x221a9a(%rip)        # 62b1a0 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
  409706:	68 31 00 00 00       	pushq  $0x31
  40970b:	e9 d0 fc ff ff       	jmpq   4093e0 <.plt>

0000000000409710 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@plt>:
  409710:	ff 25 92 1a 22 00    	jmpq   *0x221a92(%rip)        # 62b1a8 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@GLIBCXX_3.4.21>
  409716:	68 32 00 00 00       	pushq  $0x32
  40971b:	e9 c0 fc ff ff       	jmpq   4093e0 <.plt>

0000000000409720 <_ZN5boost15program_options22error_with_option_nameC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_i@plt>:
  409720:	ff 25 8a 1a 22 00    	jmpq   *0x221a8a(%rip)        # 62b1b0 <_ZN5boost15program_options22error_with_option_nameC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_i>
  409726:	68 33 00 00 00       	pushq  $0x33
  40972b:	e9 b0 fc ff ff       	jmpq   4093e0 <.plt>

0000000000409730 <memcpy@plt>:
  409730:	ff 25 82 1a 22 00    	jmpq   *0x221a82(%rip)        # 62b1b8 <memcpy@GLIBC_2.14>
  409736:	68 34 00 00 00       	pushq  $0x34
  40973b:	e9 a0 fc ff ff       	jmpq   4093e0 <.plt>

0000000000409740 <_ZSt2wsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_@plt>:
  409740:	ff 25 7a 1a 22 00    	jmpq   *0x221a7a(%rip)        # 62b1c0 <_ZSt2wsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_@GLIBCXX_3.4>
  409746:	68 35 00 00 00       	pushq  $0x35
  40974b:	e9 90 fc ff ff       	jmpq   4093e0 <.plt>

0000000000409750 <_ZN5boost15program_options6detail7cmdline23set_options_descriptionERKNS0_19options_descriptionE@plt>:
  409750:	ff 25 72 1a 22 00    	jmpq   *0x221a72(%rip)        # 62b1c8 <_ZN5boost15program_options6detail7cmdline23set_options_descriptionERKNS0_19options_descriptionE>
  409756:	68 36 00 00 00       	pushq  $0x36
  40975b:	e9 80 fc ff ff       	jmpq   4093e0 <.plt>

0000000000409760 <__cxa_atexit@plt>:
  409760:	ff 25 6a 1a 22 00    	jmpq   *0x221a6a(%rip)        # 62b1d0 <__cxa_atexit@GLIBC_2.2.5>
  409766:	68 37 00 00 00       	pushq  $0x37
  40976b:	e9 70 fc ff ff       	jmpq   4093e0 <.plt>

0000000000409770 <pthread_self@plt>:
  409770:	ff 25 62 1a 22 00    	jmpq   *0x221a62(%rip)        # 62b1d8 <pthread_self@GLIBC_2.2.5>
  409776:	68 38 00 00 00       	pushq  $0x38
  40977b:	e9 60 fc ff ff       	jmpq   4093e0 <.plt>

0000000000409780 <pow@plt>:
  409780:	ff 25 5a 1a 22 00    	jmpq   *0x221a5a(%rip)        # 62b1e0 <pow@GLIBC_2.2.5>
  409786:	68 39 00 00 00       	pushq  $0x39
  40978b:	e9 50 fc ff ff       	jmpq   4093e0 <.plt>

0000000000409790 <_ZN5boost15program_options11to_internalERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409790:	ff 25 52 1a 22 00    	jmpq   *0x221a52(%rip)        # 62b1e8 <_ZN5boost15program_options11to_internalERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  409796:	68 3a 00 00 00       	pushq  $0x3a
  40979b:	e9 40 fc ff ff       	jmpq   4093e0 <.plt>

00000000004097a0 <_ZdlPv@plt>:
  4097a0:	ff 25 4a 1a 22 00    	jmpq   *0x221a4a(%rip)        # 62b1f0 <_ZdlPv@GLIBCXX_3.4>
  4097a6:	68 3b 00 00 00       	pushq  $0x3b
  4097ab:	e9 30 fc ff ff       	jmpq   4093e0 <.plt>

00000000004097b0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
  4097b0:	ff 25 42 1a 22 00    	jmpq   *0x221a42(%rip)        # 62b1f8 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
  4097b6:	68 3c 00 00 00       	pushq  $0x3c
  4097bb:	e9 20 fc ff ff       	jmpq   4093e0 <.plt>

00000000004097c0 <_Znwm@plt>:
  4097c0:	ff 25 3a 1a 22 00    	jmpq   *0x221a3a(%rip)        # 62b200 <_Znwm@GLIBCXX_3.4>
  4097c6:	68 3d 00 00 00       	pushq  $0x3d
  4097cb:	e9 10 fc ff ff       	jmpq   4093e0 <.plt>

00000000004097d0 <_ZdlPvm@plt>:
  4097d0:	ff 25 32 1a 22 00    	jmpq   *0x221a32(%rip)        # 62b208 <_ZdlPvm@CXXABI_1.3.9>
  4097d6:	68 3e 00 00 00       	pushq  $0x3e
  4097db:	e9 00 fc ff ff       	jmpq   4093e0 <.plt>

00000000004097e0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>:
  4097e0:	ff 25 2a 1a 22 00    	jmpq   *0x221a2a(%rip)        # 62b210 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
  4097e6:	68 3f 00 00 00       	pushq  $0x3f
  4097eb:	e9 f0 fb ff ff       	jmpq   4093e0 <.plt>

00000000004097f0 <_ZN4YAML6detail9node_data15insert_map_pairERNS0_4nodeES3_@plt>:
  4097f0:	ff 25 22 1a 22 00    	jmpq   *0x221a22(%rip)        # 62b218 <_ZN4YAML6detail9node_data15insert_map_pairERNS0_4nodeES3_>
  4097f6:	68 40 00 00 00       	pushq  $0x40
  4097fb:	e9 e0 fb ff ff       	jmpq   4093e0 <.plt>

0000000000409800 <_ZNSt13runtime_errorD2Ev@plt>:
  409800:	ff 25 1a 1a 22 00    	jmpq   *0x221a1a(%rip)        # 62b220 <_ZNSt13runtime_errorD2Ev@GLIBCXX_3.4>
  409806:	68 41 00 00 00       	pushq  $0x41
  40980b:	e9 d0 fb ff ff       	jmpq   4093e0 <.plt>

0000000000409810 <__stack_chk_fail@plt>:
  409810:	ff 25 12 1a 22 00    	jmpq   *0x221a12(%rip)        # 62b228 <__stack_chk_fail@GLIBC_2.4>
  409816:	68 42 00 00 00       	pushq  $0x42
  40981b:	e9 c0 fb ff ff       	jmpq   4093e0 <.plt>

0000000000409820 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>:
  409820:	ff 25 0a 1a 22 00    	jmpq   *0x221a0a(%rip)        # 62b230 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@GLIBCXX_3.4.9>
  409826:	68 43 00 00 00       	pushq  $0x43
  40982b:	e9 b0 fb ff ff       	jmpq   4093e0 <.plt>

0000000000409830 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>:
  409830:	ff 25 02 1a 22 00    	jmpq   *0x221a02(%rip)        # 62b238 <_ZNKSt5ctypeIcE13_M_widen_initEv@GLIBCXX_3.4.11>
  409836:	68 44 00 00 00       	pushq  $0x44
  40983b:	e9 a0 fb ff ff       	jmpq   4093e0 <.plt>

0000000000409840 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@plt>:
  409840:	ff 25 fa 19 22 00    	jmpq   *0x2219fa(%rip)        # 62b240 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@GLIBCXX_3.4>
  409846:	68 45 00 00 00       	pushq  $0x45
  40984b:	e9 90 fb ff ff       	jmpq   4093e0 <.plt>

0000000000409850 <_ZN5boost15program_options19options_description11add_optionsEv@plt>:
  409850:	ff 25 f2 19 22 00    	jmpq   *0x2219f2(%rip)        # 62b248 <_ZN5boost15program_options19options_description11add_optionsEv>
  409856:	68 46 00 00 00       	pushq  $0x46
  40985b:	e9 80 fb ff ff       	jmpq   4093e0 <.plt>

0000000000409860 <fflush@plt>:
  409860:	ff 25 ea 19 22 00    	jmpq   *0x2219ea(%rip)        # 62b250 <fflush@GLIBC_2.2.5>
  409866:	68 47 00 00 00       	pushq  $0x47
  40986b:	e9 70 fb ff ff       	jmpq   4093e0 <.plt>

0000000000409870 <_ZN4YAML6detail9node_data5beginEv@plt>:
  409870:	ff 25 e2 19 22 00    	jmpq   *0x2219e2(%rip)        # 62b258 <_ZN4YAML6detail9node_data5beginEv>
  409876:	68 48 00 00 00       	pushq  $0x48
  40987b:	e9 60 fb ff ff       	jmpq   4093e0 <.plt>

0000000000409880 <_ZNSi3getEv@plt>:
  409880:	ff 25 da 19 22 00    	jmpq   *0x2219da(%rip)        # 62b260 <_ZNSi3getEv@GLIBCXX_3.4>
  409886:	68 49 00 00 00       	pushq  $0x49
  40988b:	e9 50 fb ff ff       	jmpq   4093e0 <.plt>

0000000000409890 <pthread_attr_init@plt>:
  409890:	ff 25 d2 19 22 00    	jmpq   *0x2219d2(%rip)        # 62b268 <pthread_attr_init@GLIBC_2.2.5>
  409896:	68 4a 00 00 00       	pushq  $0x4a
  40989b:	e9 40 fb ff ff       	jmpq   4093e0 <.plt>

00000000004098a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@plt>:
  4098a0:	ff 25 ca 19 22 00    	jmpq   *0x2219ca(%rip)        # 62b270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@GLIBCXX_3.4.21>
  4098a6:	68 4b 00 00 00       	pushq  $0x4b
  4098ab:	e9 30 fb ff ff       	jmpq   4093e0 <.plt>

00000000004098b0 <_ZN5boost15program_options6detail7cmdline27get_canonical_option_prefixEv@plt>:
  4098b0:	ff 25 c2 19 22 00    	jmpq   *0x2219c2(%rip)        # 62b278 <_ZN5boost15program_options6detail7cmdline27get_canonical_option_prefixEv>
  4098b6:	68 4c 00 00 00       	pushq  $0x4c
  4098bb:	e9 20 fb ff ff       	jmpq   4093e0 <.plt>

00000000004098c0 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  4098c0:	ff 25 ba 19 22 00    	jmpq   *0x2219ba(%rip)        # 62b280 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
  4098c6:	68 4d 00 00 00       	pushq  $0x4d
  4098cb:	e9 10 fb ff ff       	jmpq   4093e0 <.plt>

00000000004098d0 <_ZSt16__throw_bad_castv@plt>:
  4098d0:	ff 25 b2 19 22 00    	jmpq   *0x2219b2(%rip)        # 62b288 <_ZSt16__throw_bad_castv@GLIBCXX_3.4>
  4098d6:	68 4e 00 00 00       	pushq  $0x4e
  4098db:	e9 00 fb ff ff       	jmpq   4093e0 <.plt>

00000000004098e0 <_ZdaPv@plt>:
  4098e0:	ff 25 aa 19 22 00    	jmpq   *0x2219aa(%rip)        # 62b290 <_ZdaPv@GLIBCXX_3.4>
  4098e6:	68 4f 00 00 00       	pushq  $0x4f
  4098eb:	e9 f0 fa ff ff       	jmpq   4093e0 <.plt>

00000000004098f0 <_ZNSt13runtime_errorC2ERKS_@plt>:
  4098f0:	ff 25 a2 19 22 00    	jmpq   *0x2219a2(%rip)        # 62b298 <_ZNSt13runtime_errorC2ERKS_@GLIBCXX_3.4.21>
  4098f6:	68 50 00 00 00       	pushq  $0x50
  4098fb:	e9 e0 fa ff ff       	jmpq   4093e0 <.plt>

0000000000409900 <pthread_getattr_np@plt>:
  409900:	ff 25 9a 19 22 00    	jmpq   *0x22199a(%rip)        # 62b2a0 <pthread_getattr_np@GLIBC_2.2.5>
  409906:	68 51 00 00 00       	pushq  $0x51
  40990b:	e9 d0 fa ff ff       	jmpq   4093e0 <.plt>

0000000000409910 <_ZN5boost15program_options8validateERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEPS9_i@plt>:
  409910:	ff 25 92 19 22 00    	jmpq   *0x221992(%rip)        # 62b2a8 <_ZN5boost15program_options8validateERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEPS9_i>
  409916:	68 52 00 00 00       	pushq  $0x52
  40991b:	e9 c0 fa ff ff       	jmpq   4093e0 <.plt>

0000000000409920 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm@plt>:
  409920:	ff 25 8a 19 22 00    	jmpq   *0x22198a(%rip)        # 62b2b0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm@GLIBCXX_3.4.18>
  409926:	68 53 00 00 00       	pushq  $0x53
  40992b:	e9 b0 fa ff ff       	jmpq   4093e0 <.plt>

0000000000409930 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>:
  409930:	ff 25 82 19 22 00    	jmpq   *0x221982(%rip)        # 62b2b8 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@GLIBCXX_3.4>
  409936:	68 54 00 00 00       	pushq  $0x54
  40993b:	e9 a0 fa ff ff       	jmpq   4093e0 <.plt>

0000000000409940 <_ZN5boost15program_options19options_descriptionC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjj@plt>:
  409940:	ff 25 7a 19 22 00    	jmpq   *0x22197a(%rip)        # 62b2c0 <_ZN5boost15program_options19options_descriptionC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjj>
  409946:	68 55 00 00 00       	pushq  $0x55
  40994b:	e9 90 fa ff ff       	jmpq   4093e0 <.plt>

0000000000409950 <strcmp@plt>:
  409950:	ff 25 72 19 22 00    	jmpq   *0x221972(%rip)        # 62b2c8 <strcmp@GLIBC_2.2.5>
  409956:	68 56 00 00 00       	pushq  $0x56
  40995b:	e9 80 fa ff ff       	jmpq   4093e0 <.plt>

0000000000409960 <_ZNSt6localeD1Ev@plt>:
  409960:	ff 25 6a 19 22 00    	jmpq   *0x22196a(%rip)        # 62b2d0 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
  409966:	68 57 00 00 00       	pushq  $0x57
  40996b:	e9 70 fa ff ff       	jmpq   4093e0 <.plt>

0000000000409970 <__cxa_rethrow@plt>:
  409970:	ff 25 62 19 22 00    	jmpq   *0x221962(%rip)        # 62b2d8 <__cxa_rethrow@CXXABI_1.3>
  409976:	68 58 00 00 00       	pushq  $0x58
  40997b:	e9 60 fa ff ff       	jmpq   4093e0 <.plt>

0000000000409980 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@plt>:
  409980:	ff 25 5a 19 22 00    	jmpq   *0x22195a(%rip)        # 62b2e0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@GLIBCXX_3.4>
  409986:	68 59 00 00 00       	pushq  $0x59
  40998b:	e9 50 fa ff ff       	jmpq   4093e0 <.plt>

0000000000409990 <_ZNSt8ios_base4InitC1Ev@plt>:
  409990:	ff 25 52 19 22 00    	jmpq   *0x221952(%rip)        # 62b2e8 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
  409996:	68 5a 00 00 00       	pushq  $0x5a
  40999b:	e9 40 fa ff ff       	jmpq   4093e0 <.plt>

00000000004099a0 <_ZN4YAML6detail13memory_holder5mergeERS1_@plt>:
  4099a0:	ff 25 4a 19 22 00    	jmpq   *0x22194a(%rip)        # 62b2f0 <_ZN4YAML6detail13memory_holder5mergeERS1_>
  4099a6:	68 5b 00 00 00       	pushq  $0x5b
  4099ab:	e9 30 fa ff ff       	jmpq   4093e0 <.plt>

00000000004099b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>:
  4099b0:	ff 25 42 19 22 00    	jmpq   *0x221942(%rip)        # 62b2f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@GLIBCXX_3.4.21>
  4099b6:	68 5c 00 00 00       	pushq  $0x5c
  4099bb:	e9 20 fa ff ff       	jmpq   4093e0 <.plt>

00000000004099c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>:
  4099c0:	ff 25 3a 19 22 00    	jmpq   *0x22193a(%rip)        # 62b300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@GLIBCXX_3.4.21>
  4099c6:	68 5d 00 00 00       	pushq  $0x5d
  4099cb:	e9 10 fa ff ff       	jmpq   4093e0 <.plt>

00000000004099d0 <_ZNSt8bad_castD2Ev@plt>:
  4099d0:	ff 25 32 19 22 00    	jmpq   *0x221932(%rip)        # 62b308 <_ZNSt8bad_castD2Ev@GLIBCXX_3.4>
  4099d6:	68 5e 00 00 00       	pushq  $0x5e
  4099db:	e9 00 fa ff ff       	jmpq   4093e0 <.plt>

00000000004099e0 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode@plt>:
  4099e0:	ff 25 2a 19 22 00    	jmpq   *0x22192a(%rip)        # 62b310 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode@GLIBCXX_3.4.21>
  4099e6:	68 5f 00 00 00       	pushq  $0x5f
  4099eb:	e9 f0 f9 ff ff       	jmpq   4093e0 <.plt>

00000000004099f0 <_ZN4YAML6detail9node_data14convert_to_mapEN5boost10shared_ptrINS0_13memory_holderEEE@plt>:
  4099f0:	ff 25 22 19 22 00    	jmpq   *0x221922(%rip)        # 62b318 <_ZN4YAML6detail9node_data14convert_to_mapEN5boost10shared_ptrINS0_13memory_holderEEE>
  4099f6:	68 60 00 00 00       	pushq  $0x60
  4099fb:	e9 e0 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409a00 <_ZNSo9_M_insertIdEERSoT_@plt>:
  409a00:	ff 25 1a 19 22 00    	jmpq   *0x22191a(%rip)        # 62b320 <_ZNSo9_M_insertIdEERSoT_@GLIBCXX_3.4.9>
  409a06:	68 61 00 00 00       	pushq  $0x61
  409a0b:	e9 d0 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409a10 <memmove@plt>:
  409a10:	ff 25 12 19 22 00    	jmpq   *0x221912(%rip)        # 62b328 <memmove@GLIBC_2.2.5>
  409a16:	68 62 00 00 00       	pushq  $0x62
  409a1b:	e9 c0 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409a20 <__cxa_end_catch@plt>:
  409a20:	ff 25 0a 19 22 00    	jmpq   *0x22190a(%rip)        # 62b330 <__cxa_end_catch@CXXABI_1.3>
  409a26:	68 63 00 00 00       	pushq  $0x63
  409a2b:	e9 b0 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409a30 <_ZN5boost15program_options10validators22check_first_occurrenceERKNS_3anyE@plt>:
  409a30:	ff 25 02 19 22 00    	jmpq   *0x221902(%rip)        # 62b338 <_ZN5boost15program_options10validators22check_first_occurrenceERKNS_3anyE>
  409a36:	68 64 00 00 00       	pushq  $0x64
  409a3b:	e9 a0 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409a40 <pthread_attr_destroy@plt>:
  409a40:	ff 25 fa 18 22 00    	jmpq   *0x2218fa(%rip)        # 62b340 <pthread_attr_destroy@GLIBC_2.2.5>
  409a46:	68 65 00 00 00       	pushq  $0x65
  409a4b:	e9 90 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409a50 <_ZN4YAML8LoadFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409a50:	ff 25 f2 18 22 00    	jmpq   *0x2218f2(%rip)        # 62b348 <_ZN4YAML8LoadFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  409a56:	68 66 00 00 00       	pushq  $0x66
  409a5b:	e9 80 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409a60 <_ZNSt11logic_errorC2ERKS_@plt>:
  409a60:	ff 25 ea 18 22 00    	jmpq   *0x2218ea(%rip)        # 62b350 <_ZNSt11logic_errorC2ERKS_@GLIBCXX_3.4.21>
  409a66:	68 67 00 00 00       	pushq  $0x67
  409a6b:	e9 70 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409a70 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>:
  409a70:	ff 25 e2 18 22 00    	jmpq   *0x2218e2(%rip)        # 62b358 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@GLIBCXX_3.4>
  409a76:	68 68 00 00 00       	pushq  $0x68
  409a7b:	e9 60 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409a80 <__cxa_throw@plt>:
  409a80:	ff 25 da 18 22 00    	jmpq   *0x2218da(%rip)        # 62b360 <__cxa_throw@CXXABI_1.3>
  409a86:	68 69 00 00 00       	pushq  $0x69
  409a8b:	e9 50 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409a90 <_ZNSolsEi@plt>:
  409a90:	ff 25 d2 18 22 00    	jmpq   *0x2218d2(%rip)        # 62b368 <_ZNSolsEi@GLIBCXX_3.4>
  409a96:	68 6a 00 00 00       	pushq  $0x6a
  409a9b:	e9 40 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409aa0 <_ZN5boost15program_options6detail7cmdline21set_additional_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE@plt>:
  409aa0:	ff 25 ca 18 22 00    	jmpq   *0x2218ca(%rip)        # 62b370 <_ZN5boost15program_options6detail7cmdline21set_additional_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE>
  409aa6:	68 6b 00 00 00       	pushq  $0x6b
  409aab:	e9 30 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409ab0 <_ZN5boost15program_options5storeERKNS0_20basic_parsed_optionsIcEERNS0_13variables_mapEb@plt>:
  409ab0:	ff 25 c2 18 22 00    	jmpq   *0x2218c2(%rip)        # 62b378 <_ZN5boost15program_options5storeERKNS0_20basic_parsed_optionsIcEERNS0_13variables_mapEb>
  409ab6:	68 6c 00 00 00       	pushq  $0x6c
  409abb:	e9 20 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409ac0 <_Unwind_Resume@plt>:
  409ac0:	ff 25 ba 18 22 00    	jmpq   *0x2218ba(%rip)        # 62b380 <_Unwind_Resume@GCC_3.0>
  409ac6:	68 6d 00 00 00       	pushq  $0x6d
  409acb:	e9 10 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409ad0 <_ZNSt11logic_errorD2Ev@plt>:
  409ad0:	ff 25 b2 18 22 00    	jmpq   *0x2218b2(%rip)        # 62b388 <_ZNSt11logic_errorD2Ev@GLIBCXX_3.4>
  409ad6:	68 6e 00 00 00       	pushq  $0x6e
  409adb:	e9 00 f9 ff ff       	jmpq   4093e0 <.plt>

0000000000409ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>:
  409ae0:	ff 25 aa 18 22 00    	jmpq   *0x2218aa(%rip)        # 62b390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@GLIBCXX_3.4.21>
  409ae6:	68 6f 00 00 00       	pushq  $0x6f
  409aeb:	e9 f0 f8 ff ff       	jmpq   4093e0 <.plt>

0000000000409af0 <__cxa_guard_acquire@plt>:
  409af0:	ff 25 a2 18 22 00    	jmpq   *0x2218a2(%rip)        # 62b398 <__cxa_guard_acquire@CXXABI_1.3>
  409af6:	68 70 00 00 00       	pushq  $0x70
  409afb:	e9 e0 f8 ff ff       	jmpq   4093e0 <.plt>

0000000000409b00 <_ZN5boost15program_options29options_description_easy_initclEPKcS3_@plt>:
  409b00:	ff 25 9a 18 22 00    	jmpq   *0x22189a(%rip)        # 62b3a0 <_ZN5boost15program_options29options_description_easy_initclEPKcS3_>
  409b06:	68 71 00 00 00       	pushq  $0x71
  409b0b:	e9 d0 f8 ff ff       	jmpq   4093e0 <.plt>

0000000000409b10 <_ZN5boost15program_options29options_description_easy_initclEPKcPKNS0_14value_semanticES3_@plt>:
  409b10:	ff 25 92 18 22 00    	jmpq   *0x221892(%rip)        # 62b3a8 <_ZN5boost15program_options29options_description_easy_initclEPKcPKNS0_14value_semanticES3_>
  409b16:	68 72 00 00 00       	pushq  $0x72
  409b1b:	e9 c0 f8 ff ff       	jmpq   4093e0 <.plt>

0000000000409b20 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>:
  409b20:	ff 25 8a 18 22 00    	jmpq   *0x22188a(%rip)        # 62b3b0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@GLIBCXX_3.4.21>
  409b26:	68 73 00 00 00       	pushq  $0x73
  409b2b:	e9 b0 f8 ff ff       	jmpq   4093e0 <.plt>

0000000000409b30 <_ZN5boost15program_options6detail7cmdline5styleEi@plt>:
  409b30:	ff 25 82 18 22 00    	jmpq   *0x221882(%rip)        # 62b3b8 <_ZN5boost15program_options6detail7cmdline5styleEi>
  409b36:	68 74 00 00 00       	pushq  $0x74
  409b3b:	e9 a0 f8 ff ff       	jmpq   4093e0 <.plt>

0000000000409b40 <pthread_attr_setstack@plt>:
  409b40:	ff 25 7a 18 22 00    	jmpq   *0x22187a(%rip)        # 62b3c0 <pthread_attr_setstack@GLIBC_2.2.5>
  409b46:	68 75 00 00 00       	pushq  $0x75
  409b4b:	e9 90 f8 ff ff       	jmpq   4093e0 <.plt>

0000000000409b50 <_ZNSi10_M_extractIfEERSiRT_@plt>:
  409b50:	ff 25 72 18 22 00    	jmpq   *0x221872(%rip)        # 62b3c8 <_ZNSi10_M_extractIfEERSiRT_@GLIBCXX_3.4.9>
  409b56:	68 76 00 00 00       	pushq  $0x76
  409b5b:	e9 80 f8 ff ff       	jmpq   4093e0 <.plt>

0000000000409b60 <_ZNSt6localeC1Ev@plt>:
  409b60:	ff 25 6a 18 22 00    	jmpq   *0x22186a(%rip)        # 62b3d0 <_ZNSt6localeC1Ev@GLIBCXX_3.4>
  409b66:	68 77 00 00 00       	pushq  $0x77
  409b6b:	e9 70 f8 ff ff       	jmpq   4093e0 <.plt>

Disassembly of section .text:

0000000000409b70 <_ZL8getStatemPK10PlanResultm.part.13>:
#include "neighbor.hpp"

using libMultiRobotPlanning::Neighbor;
#include "planresult_fixed_size.hpp"

static inline State getState(const size_t agentIdx,
  409b70:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409b70 <_ZL8getStatemPK10PlanResultm.part.13>
  409b77:	49 bb 90 14 22 00 00 	movabs $0x221490,%r11
  409b7e:	00 00 00 
		const PlanResult* solution, const size_t t) {
	//const size_t t) const {
	assert(agentIdx < ROBOT_NUMS); // [TEST-removed]
  409b81:	48 ba 20 89 df ff ff 	movabs $0xffffffffffdf8920,%rdx
  409b88:	ff ff ff 
  409b8b:	48 be c3 7d df ff ff 	movabs $0xffffffffffdf7dc3,%rsi
  409b92:	ff ff ff 
  409b95:	48 bf d3 7d df ff ff 	movabs $0xffffffffffdf7dd3,%rdi
  409b9c:	ff ff ff 
  409b9f:	49 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%r8
  409ba6:	ff ff ff 
  409ba9:	4c 01 d8             	add    %r11,%rax
static inline State getState(const size_t agentIdx,
  409bac:	41 57                	push   %r15
	assert(agentIdx < ROBOT_NUMS); // [TEST-removed]
  409bae:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409bb2:	48 01 c6             	add    %rax,%rsi
  409bb5:	ba 11 00 00 00       	mov    $0x11,%edx
  409bba:	48 01 c7             	add    %rax,%rdi
  409bbd:	49 89 c7             	mov    %rax,%r15
  409bc0:	49 01 c0             	add    %rax,%r8
  409bc3:	41 ff d0             	callq  *%r8

0000000000409bc6 <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEptEv.isra.53.part.54>:
    {
        BOOST_ASSERT( px != 0 );
        return *px;
    }
    
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409bc6:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409bc6 <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEptEv.isra.53.part.54>
  409bcd:	49 bb 3a 14 22 00 00 	movabs $0x22143a,%r11
  409bd4:	00 00 00 
    {
        BOOST_ASSERT( px != 0 );
  409bd7:	48 ba 00 86 df ff ff 	movabs $0xffffffffffdf8600,%rdx
  409bde:	ff ff ff 
  409be1:	48 be 40 7a df ff ff 	movabs $0xffffffffffdf7a40,%rsi
  409be8:	ff ff ff 
  409beb:	48 bf e9 7d df ff ff 	movabs $0xffffffffffdf7de9,%rdi
  409bf2:	ff ff ff 
  409bf5:	49 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%r8
  409bfc:	ff ff ff 
  409bff:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c02:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409c04:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409c08:	48 01 c6             	add    %rax,%rsi
  409c0b:	ba de 02 00 00       	mov    $0x2de,%edx
  409c10:	48 01 c7             	add    %rax,%rdi
  409c13:	49 89 c7             	mov    %rax,%r15
  409c16:	49 01 c0             	add    %rax,%r8
  409c19:	41 ff d0             	callq  *%r8

0000000000409c1c <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEdeEv.isra.55.part.56>:
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c1c:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409c1c <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEdeEv.isra.55.part.56>
  409c23:	49 bb e4 13 22 00 00 	movabs $0x2213e4,%r11
  409c2a:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409c2d:	48 ba 80 82 df ff ff 	movabs $0xffffffffffdf8280,%rdx
  409c34:	ff ff ff 
  409c37:	48 be 40 7a df ff ff 	movabs $0xffffffffffdf7a40,%rsi
  409c3e:	ff ff ff 
  409c41:	48 bf e9 7d df ff ff 	movabs $0xffffffffffdf7de9,%rdi
  409c48:	ff ff ff 
  409c4b:	49 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%r8
  409c52:	ff ff ff 
  409c55:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c58:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409c5a:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409c5e:	48 01 c6             	add    %rax,%rsi
  409c61:	ba d8 02 00 00       	mov    $0x2d8,%edx
  409c66:	48 01 c7             	add    %rax,%rdi
  409c69:	49 89 c7             	mov    %rax,%r15
  409c6c:	49 01 c0             	add    %rax,%r8
  409c6f:	41 ff d0             	callq  *%r8

0000000000409c72 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEptEv.isra.57.part.58>:
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c72:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409c72 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEptEv.isra.57.part.58>
  409c79:	49 bb 8e 13 22 00 00 	movabs $0x22138e,%r11
  409c80:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409c83:	48 ba 20 85 df ff ff 	movabs $0xffffffffffdf8520,%rdx
  409c8a:	ff ff ff 
  409c8d:	48 be 40 7a df ff ff 	movabs $0xffffffffffdf7a40,%rsi
  409c94:	ff ff ff 
  409c97:	48 bf e9 7d df ff ff 	movabs $0xffffffffffdf7de9,%rdi
  409c9e:	ff ff ff 
  409ca1:	49 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%r8
  409ca8:	ff ff ff 
  409cab:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409cae:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409cb0:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409cb4:	48 01 c6             	add    %rax,%rsi
  409cb7:	ba de 02 00 00       	mov    $0x2de,%edx
  409cbc:	48 01 c7             	add    %rax,%rdi
  409cbf:	49 89 c7             	mov    %rax,%r15
  409cc2:	49 01 c0             	add    %rax,%r8
  409cc5:	41 ff d0             	callq  *%r8

0000000000409cc8 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEdeEv.isra.59.part.60>:
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409cc8:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409cc8 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEdeEv.isra.59.part.60>
  409ccf:	49 bb 38 13 22 00 00 	movabs $0x221338,%r11
  409cd6:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409cd9:	48 ba 60 83 df ff ff 	movabs $0xffffffffffdf8360,%rdx
  409ce0:	ff ff ff 
  409ce3:	48 be 40 7a df ff ff 	movabs $0xffffffffffdf7a40,%rsi
  409cea:	ff ff ff 
  409ced:	48 bf e9 7d df ff ff 	movabs $0xffffffffffdf7de9,%rdi
  409cf4:	ff ff ff 
  409cf7:	49 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%r8
  409cfe:	ff ff ff 
  409d01:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409d04:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409d06:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409d0a:	48 01 c6             	add    %rax,%rsi
  409d0d:	ba d8 02 00 00       	mov    $0x2d8,%edx
  409d12:	48 01 c7             	add    %rax,%rdi
  409d15:	49 89 c7             	mov    %rax,%r15
  409d18:	49 01 c0             	add    %rax,%r8
  409d1b:	41 ff d0             	callq  *%r8

0000000000409d1e <_ZNK5boost10shared_ptrIN4YAML6detail13memory_holderEEptEv.isra.61.part.62>:
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409d1e:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409d1e <_ZNK5boost10shared_ptrIN4YAML6detail13memory_holderEEptEv.isra.61.part.62>
  409d25:	49 bb e2 12 22 00 00 	movabs $0x2212e2,%r11
  409d2c:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409d2f:	48 ba c0 87 df ff ff 	movabs $0xffffffffffdf87c0,%rdx
  409d36:	ff ff ff 
  409d39:	48 be 40 7a df ff ff 	movabs $0xffffffffffdf7a40,%rsi
  409d40:	ff ff ff 
  409d43:	48 bf e9 7d df ff ff 	movabs $0xffffffffffdf7de9,%rdi
  409d4a:	ff ff ff 
  409d4d:	49 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%r8
  409d54:	ff ff ff 
  409d57:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409d5a:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409d5c:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409d60:	48 01 c6             	add    %rax,%rsi
  409d63:	ba de 02 00 00       	mov    $0x2de,%edx
  409d68:	48 01 c7             	add    %rax,%rdi
  409d6b:	49 89 c7             	mov    %rax,%r15
  409d6e:	49 01 c0             	add    %rax,%r8
  409d71:	41 ff d0             	callq  *%r8
  409d74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  409d7b:	00 00 00 
  409d7e:	66 90                	xchg   %ax,%ax

0000000000409d80 <main>:

#include "macro.hpp"
#include "ecbs_without_boost.hpp"


int main(int argc, char* argv[]) {
  409d80:	41 57                	push   %r15
  409d82:	41 56                	push   %r14
  409d84:	49 bb 80 12 22 00 00 	movabs $0x221280,%r11
  409d8b:	00 00 00 
  409d8e:	41 55                	push   %r13
  409d90:	41 54                	push   %r12
  namespace po = boost::program_options;
  // Declare the supported options.
  po::options_description desc("Allowed options");
  409d92:	48 b8 80 ff ff ff ff 	movabs $0xffffffffffffff80,%rax
  409d99:	ff ff ff 
int main(int argc, char* argv[]) {
  409d9c:	55                   	push   %rbp
  409d9d:	53                   	push   %rbx
  409d9e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 409d80 <main>
  409da5:	4c 01 db             	add    %r11,%rbx
  409da8:	48 81 ec b8 06 00 00 	sub    $0x6b8,%rsp
  po::options_description desc("Allowed options");
  409daf:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
int main(int argc, char* argv[]) {
  409db3:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  po::options_description desc("Allowed options");
  409db8:	49 89 df             	mov    %rbx,%r15
int main(int argc, char* argv[]) {
  409dbb:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  po::options_description desc("Allowed options");
  409dbf:	8b 28                	mov    (%rax),%ebp
  409dc1:	48 8d 84 24 b0 04 00 	lea    0x4b0(%rsp),%rax
  409dc8:	00 
  409dc9:	49 89 c6             	mov    %rax,%r14
  409dcc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  409dd1:	48 b8 b8 7e df ff ff 	movabs $0xffffffffffdf7eb8,%rax
  409dd8:	ff ff ff 
  409ddb:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  409ddf:	48 b8 20 2d de ff ff 	movabs $0xffffffffffde2d20,%rax
  409de6:	ff ff ff 
  409de9:	4c 89 f7             	mov    %r14,%rdi
  409dec:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  409df1:	48 01 d8             	add    %rbx,%rax
  409df4:	ff d0                	callq  *%rax
  409df6:	48 8d 84 24 30 04 00 	lea    0x430(%rsp),%rax
  409dfd:	00 
  409dfe:	89 e9                	mov    %ebp,%ecx
  409e00:	89 ea                	mov    %ebp,%edx
  409e02:	d1 e9                	shr    %ecx
  409e04:	4c 89 f6             	mov    %r14,%rsi
  409e07:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  409e0c:	48 89 c7             	mov    %rax,%rdi
  409e0f:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  409e16:	ff ff ff 
  409e19:	48 01 d8             	add    %rbx,%rax
  409e1c:	ff d0                	callq  *%rax
  409e1e:	48 8b bc 24 b0 04 00 	mov    0x4b0(%rsp),%rdi
  409e25:	00 
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
	if (!_M_is_local())
  409e26:	4c 89 f0             	mov    %r14,%rax
  409e29:	48 83 c0 10          	add    $0x10,%rax
  409e2d:	48 39 c7             	cmp    %rax,%rdi
  409e30:	74 0f                	je     409e41 <main+0xc1>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
  409e32:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  409e39:	ff ff ff 
  409e3c:	48 01 d8             	add    %rbx,%rax
  409e3f:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  409e41:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
  409e48:	00 
      { _M_string_length = __length; }
  409e49:	48 c7 84 24 08 01 00 	movq   $0x0,0x108(%rsp)
  409e50:	00 00 00 00 00 
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
  409e55:	c6 84 24 10 01 00 00 	movb   $0x0,0x110(%rsp)
  409e5c:	00 
  409e5d:	48 c7 84 24 28 01 00 	movq   $0x0,0x128(%rsp)
  409e64:	00 00 00 00 00 
  409e69:	c6 84 24 30 01 00 00 	movb   $0x0,0x130(%rsp)
  409e70:	00 

    template<class T>
    typed_value<T>*
    value(T* v)
    {
        typed_value<T>* r = new typed_value<T>(v);
  409e71:	bf b0 00 00 00       	mov    $0xb0,%edi
	: allocator_type(__a), _M_p(__dat) { }
  409e76:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  409e7b:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  409e82:	00 
  409e83:	49 89 df             	mov    %rbx,%r15
  409e86:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  409e8d:	00 
  409e8e:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  409e95:	00 
  409e96:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  409e9b:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
  409ea2:	00 
  409ea3:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  409eaa:	00 
  409eab:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  409eb2:	ff ff ff 
  409eb5:	49 89 c6             	mov    %rax,%r14
  409eb8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  409ebd:	48 01 d8             	add    %rbx,%rax
  409ec0:	ff d0                	callq  *%rax
  409ec2:	48 89 c5             	mov    %rax,%rbp
        /** Ctor. The 'store_to' parameter tells where to store
            the value when it's known. The parameter can be NULL. */
        typed_value(T* store_to) 
        : m_store_to(store_to), m_composing(false),
          m_implicit(false), m_multitoken(false),
          m_zero_tokens(false), m_required(false)
  409ec5:	48 b8 90 fb ff ff ff 	movabs $0xfffffffffffffb90,%rax
  409ecc:	ff ff ff 
        {
        }

        template<typename ValueType>
        any(const ValueType & value)
          : content(new holder<
  409ecf:	bf 10 00 00 00       	mov    $0x10,%edi
  409ed4:	48 01 d8             	add    %rbx,%rax
      { _M_string_length = __length; }
  409ed7:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
  409ede:	00 
  409edf:	c6 45 28 00          	movb   $0x0,0x28(%rbp)
  409ee3:	48 89 45 00          	mov    %rax,0x0(%rbp)
  409ee7:	48 83 c0 70          	add    $0x70,%rax
          : content(0)
  409eeb:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
  409ef2:	00 
  409ef3:	48 89 45 08          	mov    %rax,0x8(%rbp)
  409ef7:	48 8d 84 24 b4 00 00 	lea    0xb4(%rsp),%rax
  409efe:	00 
  409eff:	48 c7 45 48 00 00 00 	movq   $0x0,0x48(%rbp)
  409f06:	00 
  409f07:	c6 45 50 00          	movb   $0x0,0x50(%rbp)
  409f0b:	48 c7 45 60 00 00 00 	movq   $0x0,0x60(%rbp)
  409f12:	00 
  409f13:	48 89 45 10          	mov    %rax,0x10(%rbp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  409f17:	48 8d 45 28          	lea    0x28(%rbp),%rax
      { _M_string_length = __length; }
  409f1b:	48 c7 45 70 00 00 00 	movq   $0x0,0x70(%rbp)
  409f22:	00 
  409f23:	c6 45 78 00          	movb   $0x0,0x78(%rbp)
  409f27:	c6 85 88 00 00 00 00 	movb   $0x0,0x88(%rbp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  409f2e:	48 89 45 18          	mov    %rax,0x18(%rbp)
  409f32:	48 8d 45 50          	lea    0x50(%rbp),%rax
  409f36:	c6 85 89 00 00 00 00 	movb   $0x0,0x89(%rbp)
  409f3d:	c6 85 8a 00 00 00 00 	movb   $0x0,0x8a(%rbp)
  409f44:	c6 85 8b 00 00 00 00 	movb   $0x0,0x8b(%rbp)
  409f4b:	48 89 45 40          	mov    %rax,0x40(%rbp)
  409f4f:	48 8d 45 78          	lea    0x78(%rbp),%rax
  409f53:	c6 85 8c 00 00 00 00 	movb   $0x0,0x8c(%rbp)
 * functionN objects).
 */
class function_base
{
public:
  function_base() : vtable(0) { }
  409f5a:	48 c7 85 90 00 00 00 	movq   $0x0,0x90(%rbp)
  409f61:	00 00 00 00 
  409f65:	48 89 45 68          	mov    %rax,0x68(%rbp)
          : content(new holder<
  409f69:	4c 89 f0             	mov    %r14,%rax
  409f6c:	48 01 d8             	add    %rbx,%rax
  409f6f:	ff d0                	callq  *%rax
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
  409f71:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
        class holder : public placeholder
        {
        public: // structors

            holder(const ValueType & value)
              : held(value)
  409f75:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  409f7c:	ff ff ff 
  409f7f:	49 bd 38 93 df ff ff 	movabs $0xffffffffffdf9338,%r13
  409f86:	ff ff ff 
  409f89:	48 01 da             	add    %rbx,%rdx
  409f8c:	f3 41 0f 10 44 1d 00 	movss  0x0(%r13,%rbx,1),%xmm0
  409f93:	48 89 10             	mov    %rdx,(%rax)
  409f96:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  409f9b:	48 89 45 38          	mov    %rax,0x38(%rbp)
            delete content;
  409f9f:	48 85 ff             	test   %rdi,%rdi
  409fa2:	74 06                	je     409faa <main+0x22a>
  409fa4:	48 8b 07             	mov    (%rdi),%rax
  409fa7:	ff 50 08             	callq  *0x8(%rax)
	: allocator_type(__a), _M_p(__dat) { }
  409faa:	48 8d 84 24 b0 02 00 	lea    0x2b0(%rsp),%rax
  409fb1:	00 
       *  - this is not an error
      */
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
  409fb2:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  409fb7:	49 89 df             	mov    %rbx,%r15
      { _M_string_length = __length; }
  409fba:	48 c7 84 24 b8 02 00 	movq   $0x0,0x2b8(%rsp)
  409fc1:	00 00 00 00 00 
  409fc6:	c6 84 24 c0 02 00 00 	movb   $0x0,0x2c0(%rsp)
  409fcd:	00 
       *  derived classes' initialization lists, which pass a pointer to
       *  their own stream buffer.
      */
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }
  409fce:	49 bc a8 ff ff ff ff 	movabs $0xffffffffffffffa8,%r12
  409fd5:	ff ff ff 
	: allocator_type(__a), _M_p(__dat) { }
  409fd8:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  409fdd:	48 8d 84 24 c0 02 00 	lea    0x2c0(%rsp),%rax
  409fe4:	00 
  409fe5:	48 c7 84 24 b8 04 00 	movq   $0x0,0x4b8(%rsp)
  409fec:	00 00 00 00 00 
  409ff1:	49 8d 7e 38          	lea    0x38(%r14),%rdi
  409ff5:	48 c7 84 24 c0 04 00 	movq   $0x0,0x4c0(%rsp)
  409ffc:	00 00 00 00 00 
  40a001:	48 c7 84 24 c8 04 00 	movq   $0x0,0x4c8(%rsp)
  40a008:	00 00 00 00 00 
  40a00d:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  40a014:	00 
  40a015:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  40a01c:	ff ff ff 
  40a01f:	48 c7 84 24 d0 04 00 	movq   $0x0,0x4d0(%rsp)
  40a026:	00 00 00 00 00 
  40a02b:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40a02f:	48 c7 84 24 d8 04 00 	movq   $0x0,0x4d8(%rsp)
  40a036:	00 00 00 00 00 
  40a03b:	48 c7 84 24 e0 04 00 	movq   $0x0,0x4e0(%rsp)
  40a042:	00 00 00 00 00 
  40a047:	48 83 c0 10          	add    $0x10,%rax
  40a04b:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40a052:	00 
  40a053:	48 b8 60 eb dd ff ff 	movabs $0xffffffffffddeb60,%rax
  40a05a:	ff ff ff 
  40a05d:	48 01 d8             	add    %rbx,%rax
  40a060:	ff d0                	callq  *%rax
  40a062:	4c 89 f0             	mov    %r14,%rax
       *  The default constructor does nothing and is not normally
       *  accessible to users.
      */
      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
  40a065:	4c 89 74 24 10       	mov    %r14,0x10(%rsp)
  40a06a:	4d 8d 76 70          	lea    0x70(%r14),%r14
  40a06e:	48 83 c0 58          	add    $0x58,%rax
       *  The default constructor initializes the parent class using its
       *  own default ctor.
      */
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
  40a072:	c7 84 24 f0 04 00 00 	movl   $0x18,0x4f0(%rsp)
  40a079:	18 00 00 00 
      { _M_string_length = __length; }
  40a07d:	48 c7 84 24 00 05 00 	movq   $0x0,0x500(%rsp)
  40a084:	00 00 00 00 00 
	: allocator_type(__a), _M_p(__dat) { }
  40a089:	48 89 84 24 f8 04 00 	mov    %rax,0x4f8(%rsp)
  40a090:	00 
    namespace detail // basic_unlockedbuf
    {
        // acts as a stream buffer which wraps around a pair of pointers
        // and gives acces to internals
        template <class BufferType, class CharT>
        class basic_unlockedbuf : public basic_pointerbuf<CharT, BufferType> {
  40a091:	48 b8 d0 fc ff ff ff 	movabs $0xfffffffffffffcd0,%rax
  40a098:	ff ff ff 
  40a09b:	4c 89 f7             	mov    %r14,%rdi
  40a09e:	48 01 d8             	add    %rbx,%rax
  40a0a1:	c6 84 24 08 05 00 00 	movb   $0x0,0x508(%rsp)
  40a0a8:	00 
       *         @a __gend == @c egptr()
      */
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
	_M_in_beg = __gbeg;
  40a0a9:	48 c7 84 24 b8 04 00 	movq   $0x0,0x4b8(%rsp)
  40a0b0:	00 00 00 00 00 
  40a0b5:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40a0bc:	00 
  40a0bd:	48 b8 c0 e4 dd ff ff 	movabs $0xffffffffffdde4c0,%rax
  40a0c4:	ff ff ff 
	_M_in_cur = __gnext;
  40a0c7:	48 c7 84 24 c0 04 00 	movq   $0x0,0x4c0(%rsp)
  40a0ce:	00 00 00 00 00 
  40a0d3:	48 01 d8             	add    %rbx,%rax
	_M_in_end = __gend;
  40a0d6:	48 c7 84 24 c8 04 00 	movq   $0x0,0x4c8(%rsp)
  40a0dd:	00 00 00 00 00 
  40a0e2:	ff d0                	callq  *%rax
  40a0e4:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40a0e8:	48 c7 84 24 f8 05 00 	movq   $0x0,0x5f8(%rsp)
  40a0ef:	00 00 00 00 00 
  40a0f4:	4c 89 f7             	mov    %r14,%rdi
  40a0f7:	c6 84 24 00 06 00 00 	movb   $0x0,0x600(%rsp)
  40a0fe:	00 
  40a0ff:	c6 84 24 01 06 00 00 	movb   $0x0,0x601(%rsp)
  40a106:	00 
  40a107:	48 c7 84 24 08 06 00 	movq   $0x0,0x608(%rsp)
  40a10e:	00 00 00 00 00 
  40a113:	48 c7 84 24 10 06 00 	movq   $0x0,0x610(%rsp)
  40a11a:	00 00 00 00 00 
  40a11f:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40a123:	48 83 c0 40          	add    $0x40,%rax
  40a127:	48 c7 84 24 18 06 00 	movq   $0x0,0x618(%rsp)
  40a12e:	00 00 00 00 00 
  40a133:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40a13a:	00 
  40a13b:	48 b8 30 e9 dd ff ff 	movabs $0xffffffffffdde930,%rax
  40a142:	ff ff ff 
  40a145:	48 c7 84 24 20 06 00 	movq   $0x0,0x620(%rsp)
  40a14c:	00 00 00 00 00 
  40a151:	48 89 94 24 18 05 00 	mov    %rdx,0x518(%rsp)
  40a158:	00 
  40a159:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  40a15e:	48 01 d8             	add    %rbx,%rax
  40a161:	ff d0                	callq  *%rax
        public:
            lexical_istream_limited_src() BOOST_NOEXCEPT
              : out_buffer()
              , out_stream(&out_buffer)
              , start(buffer)
              , finish(buffer + CharacterBufferSize)
  40a163:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
#ifdef __va_arg_pack
__fortify_function int
__NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
{
  return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
				  __bos (__s), __fmt, __va_arg_pack ());
  40a168:	49 b9 20 e6 dd ff ff 	movabs $0xffffffffffdde620,%r9
  40a16f:	ff ff ff 
  40a172:	41 b8 09 00 00 00    	mov    $0x9,%r8d
  40a178:	49 01 d9             	add    %rbx,%r9
  40a17b:	ba 15 00 00 00       	mov    $0x15,%edx
  40a180:	be 01 00 00 00       	mov    $0x1,%esi
  40a185:	49 89 df             	mov    %rbx,%r15
  40a188:	4c 8d b0 78 01 00 00 	lea    0x178(%rax),%r14
  40a18f:	48 05 8d 01 00 00    	add    $0x18d,%rax
  40a195:	48 89 84 24 48 06 00 	mov    %rax,0x648(%rsp)
  40a19c:	00 
  40a19d:	48 b8 28 93 df ff ff 	movabs $0xffffffffffdf9328,%rax
  40a1a4:	ff ff ff 
  40a1a7:	f2 0f 10 04 03       	movsd  (%rbx,%rax,1),%xmm0
  40a1ac:	48 b8 c8 7e df ff ff 	movabs $0xffffffffffdf7ec8,%rax
  40a1b3:	ff ff ff 
  40a1b6:	4c 89 b4 24 40 06 00 	mov    %r14,0x640(%rsp)
  40a1bd:	00 
  40a1be:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40a1c2:	4c 89 f7             	mov    %r14,%rdi
  40a1c5:	b8 01 00 00 00       	mov    $0x1,%eax
  40a1ca:	41 ff d1             	callq  *%r9
                    sprintf_s(begin, CharacterBufferSize,
#else
                    sprintf(begin, 
#endif
                    "%.*g", static_cast<int>(boost::detail::lcast_get_precision<float>()), val_as_double);
                return finish > start;
  40a1cd:	48 8b 8c 24 40 06 00 	mov    0x640(%rsp),%rcx
  40a1d4:	00 
                    sprintf(begin, 
  40a1d5:	4c 63 c0             	movslq %eax,%r8
                finish = start +
  40a1d8:	4d 01 f0             	add    %r14,%r8
  40a1db:	4c 89 84 24 48 06 00 	mov    %r8,0x648(%rsp)
  40a1e2:	00 

            static inline bool try_convert(const Source& arg, Target& result) {
                i_interpreter_type i_interpreter;

                // Disabling ADL, by directly specifying operators.
                if (!(i_interpreter.operator <<(arg)))
  40a1e3:	49 39 c8             	cmp    %rcx,%r8
  40a1e6:	0f 86 2b 10 00 00    	jbe    40b217 <main+0x1497>
      replace(size_type __pos, size_type __n1, const _CharT* __s,
	      size_type __n2)
      {
	__glibcxx_requires_string_len(__s, __n2);
	return _M_replace(_M_check(__pos, "basic_string::replace"),
			  _M_limit(__pos, __n1), __s, __n2);
  40a1ec:	48 b8 b0 e9 dd ff ff 	movabs $0xffffffffffdde9b0,%rax
  40a1f3:	ff ff ff 
  40a1f6:	49 29 c8             	sub    %rcx,%r8
  40a1f9:	48 8b 94 24 b8 02 00 	mov    0x2b8(%rsp),%rdx
  40a200:	00 
  40a201:	31 f6                	xor    %esi,%esi
  40a203:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  40a208:	48 01 d8             	add    %rbx,%rax
  40a20b:	ff d0                	callq  *%rax
       *  @brief  Base destructor.
       *
       *  This does very little apart from providing a virtual base dtor.
      */
      virtual
      ~basic_ostream() { }
  40a20d:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
      ~basic_ios() { }
  40a211:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40a216:	49 89 df             	mov    %rbx,%r15
  40a219:	48 83 c0 18          	add    $0x18,%rax
  40a21d:	49 8d 7e 70          	lea    0x70(%r14),%rdi
  40a221:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  40a228:	00 
  40a229:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40a230:	ff ff ff 
  40a233:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40a237:	48 83 c0 10          	add    $0x10,%rax
  40a23b:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40a242:	00 
  40a243:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  40a24a:	ff ff ff 
  40a24d:	48 01 d8             	add    %rbx,%rax
  40a250:	ff d0                	callq  *%rax
//
// class basic_pointerbuf:
// acts as a stream buffer which wraps around a pair of pointers:
//
template <class charT, class BufferT >
class basic_pointerbuf : public BufferT {
  40a252:	48 b8 50 fc ff ff ff 	movabs $0xfffffffffffffc50,%rax
  40a259:	ff ff ff 
  40a25c:	4c 89 f7             	mov    %r14,%rdi
  40a25f:	48 01 d8             	add    %rbx,%rax
  40a262:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40a269:	00 
  40a26a:	48 b8 30 b9 de ff ff 	movabs $0xffffffffffdeb930,%rax
  40a271:	ff ff ff 
  40a274:	48 01 d8             	add    %rbx,%rax
  40a277:	ff d0                	callq  *%rax
            provide operator<< for ostream.
        */
        typed_value* default_value(const T& v)
        {
            m_default_value = boost::any(v);
            m_default_value_as_text = boost::lexical_cast<std::string>(v);
  40a279:	4c 8b 74 24 68       	mov    0x68(%rsp),%r14
  40a27e:	48 b8 a0 e8 dd ff ff 	movabs $0xffffffffffdde8a0,%rax
  40a285:	ff ff ff 
  40a288:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
  40a28c:	48 01 d8             	add    %rbx,%rax
  40a28f:	4c 89 f6             	mov    %r14,%rsi
  40a292:	ff d0                	callq  *%rax
  40a294:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40a29b:	00 
	if (!_M_is_local())
  40a29c:	4c 89 f0             	mov    %r14,%rax
  40a29f:	48 83 c0 10          	add    $0x10,%rax
  40a2a3:	48 39 c7             	cmp    %rax,%rdi
  40a2a6:	74 12                	je     40a2ba <main+0x53a>
  40a2a8:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40a2af:	ff ff ff 
  40a2b2:	49 89 df             	mov    %rbx,%r15
  40a2b5:	48 01 d8             	add    %rbx,%rax
  40a2b8:	ff d0                	callq  *%rax
  std::string outputFile;
  float w;
  desc.add_options()("help", "produce help message")(
      "input,i", po::value<std::string>(&inputFile)->required(),
      "input file (YAML)")("output,o",
                           po::value<std::string>(&outputFile)->required(),
  40a2ba:	49 bc 90 bf de ff ff 	movabs $0xffffffffffdebf90,%r12
  40a2c1:	ff ff ff 
  40a2c4:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  40a2c9:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a2cd:	ff d0                	callq  *%rax
        }
            
        /** Specifies that the value must occur. */
        typed_value* required()
        {
            m_required = true;
  40a2cf:	48 89 04 24          	mov    %rax,(%rsp)
  40a2d3:	c6 80 8c 00 00 00 01 	movb   $0x1,0x8c(%rax)
      "input,i", po::value<std::string>(&inputFile)->required(),
  40a2da:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a2de:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  40a2e3:	ff d0                	callq  *%rax
  40a2e5:	49 89 c4             	mov    %rax,%r12
  40a2e8:	c6 80 8c 00 00 00 01 	movb   $0x1,0x8c(%rax)
  desc.add_options()("help", "produce help message")(
  40a2ef:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40a2f6:	ff ff ff 
  40a2f9:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40a2fe:	49 89 df             	mov    %rbx,%r15
  40a301:	48 01 d8             	add    %rbx,%rax
  40a304:	ff d0                	callq  *%rax
  40a306:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40a30d:	00 
  40a30e:	48 b8 cd 7e df ff ff 	movabs $0xffffffffffdf7ecd,%rax
  40a315:	ff ff ff 
  40a318:	49 be e2 7e df ff ff 	movabs $0xffffffffffdf7ee2,%r14
  40a31f:	ff ff ff 
  40a322:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40a326:	48 b8 00 eb dd ff ff 	movabs $0xffffffffffddeb00,%rax
  40a32d:	ff ff ff 
  40a330:	49 8d 34 1e          	lea    (%r14,%rbx,1),%rsi
  40a334:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40a339:	48 01 d8             	add    %rbx,%rax
  40a33c:	ff d0                	callq  *%rax
      "input file (YAML)")("output,o",
  40a33e:	48 ba e7 7e df ff ff 	movabs $0xffffffffffdf7ee7,%rdx
  40a345:	ff ff ff 
  40a348:	48 be f9 7e df ff ff 	movabs $0xffffffffffdf7ef9,%rsi
  40a34f:	ff ff ff 
  40a352:	48 89 c7             	mov    %rax,%rdi
  40a355:	48 8d 0c 13          	lea    (%rbx,%rdx,1),%rcx
  40a359:	4c 89 e2             	mov    %r12,%rdx
  40a35c:	49 bc 10 eb dd ff ff 	movabs $0xffffffffffddeb10,%r12
  40a363:	ff ff ff 
  40a366:	48 01 de             	add    %rbx,%rsi
  40a369:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a36d:	ff d0                	callq  *%rax
                           "output file (YAML)")(
  40a36f:	48 ba 01 7f df ff ff 	movabs $0xffffffffffdf7f01,%rdx
  40a376:	ff ff ff 
  40a379:	48 be 14 7f df ff ff 	movabs $0xffffffffffdf7f14,%rsi
  40a380:	ff ff ff 
  40a383:	48 89 c7             	mov    %rax,%rdi
  40a386:	48 8d 0c 13          	lea    (%rbx,%rdx,1),%rcx
  40a38a:	48 01 de             	add    %rbx,%rsi
  40a38d:	48 8b 14 24          	mov    (%rsp),%rdx
  40a391:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a395:	ff d0                	callq  *%rax
      "suboptimality,w", po::value<float>(&w)->default_value(1.0),
      "suboptimality bound");
  40a397:	48 ba 1d 7f df ff ff 	movabs $0xffffffffffdf7f1d,%rdx
  40a39e:	ff ff ff 
  40a3a1:	48 be 31 7f df ff ff 	movabs $0xffffffffffdf7f31,%rsi
  40a3a8:	ff ff ff 
  40a3ab:	48 89 c7             	mov    %rax,%rdi
  40a3ae:	48 8d 0c 13          	lea    (%rbx,%rdx,1),%rcx
  40a3b2:	48 01 de             	add    %rbx,%rsi
  40a3b5:	48 89 ea             	mov    %rbp,%rdx
  40a3b8:	49 01 dc             	add    %rbx,%r12
  40a3bb:	41 ff d4             	callq  *%r12

  try {
    po::variables_map vm;
  40a3be:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  40a3c5:	ff ff ff 
  40a3c8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40a3cd:	48 01 d8             	add    %rbx,%rax
  40a3d0:	ff d0                	callq  *%rax
                       int style,
                       function1<std::pair<std::string, std::string>, 
                                 const std::string&> ext)
    {
        return basic_command_line_parser<charT>(argc, argv).options(desc).
            style(style).extra_parser(ext).run();
  40a3d2:	48 8d 84 24 b0 03 00 	lea    0x3b0(%rsp),%rax
  40a3d9:	00 
  40a3da:	48 c7 84 24 10 03 00 	movq   $0x0,0x310(%rsp)
  40a3e1:	00 00 00 00 00 
  40a3e6:	48 c7 84 24 e0 02 00 	movq   $0x0,0x2e0(%rsp)
  40a3ed:	00 00 00 00 00 
  40a3f2:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  40a3f7:	8b 74 24 18          	mov    0x18(%rsp),%esi
  40a3fb:	48 89 c5             	mov    %rax,%rbp
  40a3fe:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  40a403:	48 89 c7             	mov    %rax,%rdi
  40a406:	48 b8 90 35 df ff ff 	movabs $0xffffffffffdf3590,%rax
  40a40d:	ff ff ff 
  40a410:	48 01 d8             	add    %rbx,%rax
  40a413:	ff d0                	callq  *%rax
       detail::cmdline::set_options_description(desc);
  40a415:	4c 8b 64 24 60       	mov    0x60(%rsp),%r12
  40a41a:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  40a421:	ff ff ff 
  40a424:	48 89 ef             	mov    %rbp,%rdi
  40a427:	48 01 d8             	add    %rbx,%rax
  40a42a:	4c 89 e6             	mov    %r12,%rsi
  40a42d:	ff d0                	callq  *%rax
        detail::cmdline::style(xstyle);
  40a42f:	48 b8 30 eb dd ff ff 	movabs $0xffffffffffddeb30,%rax
  40a436:	ff ff ff 
        m_desc = &desc;
  40a439:	4c 89 a4 24 20 04 00 	mov    %r12,0x420(%rsp)
  40a440:	00 
        detail::cmdline::style(xstyle);
  40a441:	31 f6                	xor    %esi,%esi
  40a443:	48 89 ef             	mov    %rbp,%rdi
  40a446:	48 01 d8             	add    %rbx,%rax
  40a449:	ff d0                	callq  *%rax
            style(style).extra_parser(ext).run();
  40a44b:	48 8d 84 24 e0 02 00 	lea    0x2e0(%rsp),%rax
  40a452:	00 
  40a453:	48 89 ef             	mov    %rbp,%rdi
  40a456:	49 89 c4             	mov    %rax,%r12
  40a459:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  40a45e:	48 89 c6             	mov    %rax,%rsi
  40a461:	48 b8 a0 ea de ff ff 	movabs $0xffffffffffdeeaa0,%rax
  40a468:	ff ff ff 
  40a46b:	48 01 d8             	add    %rbx,%rax
  40a46e:	ff d0                	callq  *%rax
  40a470:	48 8d b4 24 50 03 00 	lea    0x350(%rsp),%rsi
  40a477:	00 
  40a478:	48 89 f7             	mov    %rsi,%rdi
  40a47b:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  40a480:	48 89 c6             	mov    %rax,%rsi
  40a483:	48 b8 00 29 df ff ff 	movabs $0xffffffffffdf2900,%rax
  40a48a:	ff ff ff 
  40a48d:	48 01 d8             	add    %rbx,%rax
  40a490:	ff d0                	callq  *%rax

        There are two typedefs \-- command_line_parser and wcommand_line_parser,
        for charT == char and charT == wchar_t cases.
    */
    template<class charT>
    class basic_command_line_parser : private detail::cmdline {
  40a492:	48 b8 60 c0 de ff ff 	movabs $0xffffffffffdec060,%rax
  40a499:	ff ff ff 
  40a49c:	48 89 ef             	mov    %rbp,%rdi
  40a49f:	48 01 d8             	add    %rbx,%rax
  40a4a2:	ff d0                	callq  *%rax
    }

    // Clear out a target, if there is one
    void clear()
    {
      if (vtable) {
  40a4a4:	48 8b 84 24 e0 02 00 	mov    0x2e0(%rsp),%rax
  40a4ab:	00 
  40a4ac:	48 85 c0             	test   %rax,%rax
  40a4af:	74 1f                	je     40a4d0 <main+0x750>
        if (!this->has_trivial_copy_and_destroy())
  40a4b1:	a8 01                	test   $0x1,%al
  40a4b3:	75 1b                	jne    40a4d0 <main+0x750>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40a4b5:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  40a4b9:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  40a4bc:	48 85 c0             	test   %rax,%rax
  40a4bf:	74 0f                	je     40a4d0 <main+0x750>
            base.manager(functor, functor, destroy_functor_tag);
  40a4c1:	49 8d 7c 24 08       	lea    0x8(%r12),%rdi
  40a4c6:	ba 02 00 00 00       	mov    $0x2,%edx
  40a4cb:	48 89 fe             	mov    %rdi,%rsi
  40a4ce:	ff d0                	callq  *%rax
    po::store(po::parse_command_line(argc, argv, desc), vm);
  40a4d0:	48 b8 b0 ea dd ff ff 	movabs $0xffffffffffddeab0,%rax
  40a4d7:	ff ff ff 
  40a4da:	31 d2                	xor    %edx,%edx
  40a4dc:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  40a4e1:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40a4e6:	49 89 df             	mov    %rbx,%r15
  40a4e9:	48 01 d8             	add    %rbx,%rax
  40a4ec:	ff d0                	callq  *%rax
    class basic_parsed_options {
  40a4ee:	48 b8 f0 c0 de ff ff 	movabs $0xffffffffffdec0f0,%rax
  40a4f5:	ff ff ff 
  40a4f8:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40a4fd:	48 01 d8             	add    %rbx,%rax
  40a500:	ff d0                	callq  *%rax
      if (vtable) {
  40a502:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  40a509:	00 
  40a50a:	48 85 c0             	test   %rax,%rax
  40a50d:	74 08                	je     40a517 <main+0x797>
        if (!this->has_trivial_copy_and_destroy())
  40a50f:	a8 01                	test   $0x1,%al
  40a511:	0f 84 9e 0c 00 00    	je     40b1b5 <main+0x1435>
    po::notify(vm);
  40a517:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40a51c:	48 b8 e0 e5 dd ff ff 	movabs $0xffffffffffdde5e0,%rax
  40a523:	ff ff ff 
  40a526:	49 89 df             	mov    %rbx,%r15
  40a529:	48 01 d8             	add    %rbx,%rax
  40a52c:	48 89 ef             	mov    %rbp,%rdi
  40a52f:	ff d0                	callq  *%rax

    if (vm.count("help") != 0u) {
  40a531:	48 8d 84 24 80 02 00 	lea    0x280(%rsp),%rax
  40a538:	00 
  40a539:	49 8d 34 1e          	lea    (%r14,%rbx,1),%rsi
  40a53d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  40a542:	48 89 c7             	mov    %rax,%rdi
  40a545:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40a54a:	48 01 d8             	add    %rbx,%rax
  40a54d:	ff d0                	callq  *%rax
  40a54f:	48 8b 94 24 d0 04 00 	mov    0x4d0(%rsp),%rdx
  40a556:	00 
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
		   const _Key& __k) const
    {
      while (__x != 0)
  40a557:	48 85 d2             	test   %rdx,%rdx
  40a55a:	0f 84 d8 20 00 00    	je     40c638 <main+0x28b8>
  40a560:	48 b8 20 e4 dd ff ff 	movabs $0xffffffffffdde420,%rax
  40a567:	ff ff ff 
  40a56a:	49 89 d6             	mov    %rdx,%r14
  40a56d:	48 8d 6d 18          	lea    0x18(%rbp),%rbp
  40a571:	48 89 04 24          	mov    %rax,(%rsp)
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
  40a575:	4c 8d 24 18          	lea    (%rax,%rbx,1),%r12
  40a579:	eb 11                	jmp    40a58c <main+0x80c>
  40a57b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  40a580:	4c 89 f5             	mov    %r14,%rbp
	  __y = __x, __x = _S_left(__x);
  40a583:	4d 8b 76 10          	mov    0x10(%r14),%r14
      while (__x != 0)
  40a587:	4d 85 f6             	test   %r14,%r14
  40a58a:	74 1c                	je     40a5a8 <main+0x828>
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
  40a58c:	49 8d 7e 20          	lea    0x20(%r14),%rdi
  40a590:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  40a595:	49 89 df             	mov    %rbx,%r15
  40a598:	41 ff d4             	callq  *%r12
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  40a59b:	85 c0                	test   %eax,%eax
  40a59d:	79 e1                	jns    40a580 <main+0x800>
  40a59f:	4d 8b 76 18          	mov    0x18(%r14),%r14
      while (__x != 0)
  40a5a3:	4d 85 f6             	test   %r14,%r14
  40a5a6:	75 e4                	jne    40a58c <main+0x80c>
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k, 
					_S_key(__j._M_node))) ? end() : __j;
  40a5a8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40a5ad:	48 83 c0 18          	add    $0x18,%rax
  40a5b1:	48 39 c5             	cmp    %rax,%rbp
  40a5b4:	0f 84 2b 20 00 00    	je     40c5e5 <main+0x2865>
  40a5ba:	4c 8b 34 24          	mov    (%rsp),%r14
  40a5be:	48 8d 75 20          	lea    0x20(%rbp),%rsi
  40a5c2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  40a5c7:	49 89 df             	mov    %rbx,%r15
  40a5ca:	49 01 de             	add    %rbx,%r14
  40a5cd:	41 ff d6             	callq  *%r14
	      || _M_impl._M_key_compare(__k, 
  40a5d0:	85 c0                	test   %eax,%eax
  40a5d2:	0f 88 0d 20 00 00    	js     40c5e5 <main+0x2865>
	if (!_M_is_local())
  40a5d8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40a5dd:	48 8b bc 24 80 02 00 	mov    0x280(%rsp),%rdi
  40a5e4:	00 
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
  40a5e5:	bd 01 00 00 00       	mov    $0x1,%ebp
  40a5ea:	48 83 c0 10          	add    $0x10,%rax
  40a5ee:	48 39 c7             	cmp    %rax,%rdi
  40a5f1:	0f 84 4e 0a 00 00    	je     40b045 <main+0x12c5>
  40a5f7:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40a5fe:	ff ff ff 
  40a601:	49 89 df             	mov    %rbx,%r15
  40a604:	48 01 d8             	add    %rbx,%rax
  40a607:	ff d0                	callq  *%rax
  40a609:	48 85 ed             	test   %rbp,%rbp
  40a60c:	0f 85 33 0a 00 00    	jne    40b045 <main+0x12c5>
    po::variables_map vm;
  40a612:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40a617:	48 b8 90 4e df ff ff 	movabs $0xffffffffffdf4e90,%rax
  40a61e:	ff ff ff 
    std::cerr << e.what() << std::endl << std::endl;
    std::cerr << desc << std::endl;
    return 1;
  }

  YAML::Node config = YAML::LoadFile(inputFile);
  40a621:	49 89 df             	mov    %rbx,%r15
    po::variables_map vm;
  40a624:	48 01 d8             	add    %rbx,%rax
  40a627:	48 89 ef             	mov    %rbp,%rdi
  40a62a:	ff d0                	callq  *%rax
  YAML::Node config = YAML::LoadFile(inputFile);
  40a62c:	48 8d 84 24 40 01 00 	lea    0x140(%rsp),%rax
  40a633:	00 
  40a634:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  40a639:	49 89 c6             	mov    %rax,%r14
  40a63c:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40a643:	00 
  40a644:	48 89 c7             	mov    %rax,%rdi
  40a647:	48 b8 50 ea dd ff ff 	movabs $0xffffffffffddea50,%rax
  40a64e:	ff ff ff 
  40a651:	48 01 d8             	add    %rbx,%rax
  40a654:	ff d0                	callq  *%rax
	  __hashtable_alloc(__node_alloc_type(__a))
      { }

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
  40a656:	48 8d 84 24 10 03 00 	lea    0x310(%rsp),%rax
  40a65d:	00 
  /// Default value for rehash policy.  Bucket size is (usually) the
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    _Prime_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40a65e:	f3 41 0f 10 44 1d 00 	movss  0x0(%r13,%rbx,1),%xmm0

   std::unordered_set<Location> obstacles;
  std::vector<Location> goals;
  std::vector<State> startStates;

  const auto& dim = config["map"]["dimensions"];
  40a665:	49 bc 41 7f df ff ff 	movabs $0xffffffffffdf7f41,%r12
  40a66c:	ff ff ff 
  40a66f:	49 bd 80 18 df ff ff 	movabs $0xffffffffffdf1880,%r13
  40a676:	ff ff ff 
  40a679:	48 c7 84 24 18 03 00 	movq   $0x1,0x318(%rsp)
  40a680:	00 01 00 00 00 
  40a685:	48 89 04 24          	mov    %rax,(%rsp)
  40a689:	48 8d 84 24 40 03 00 	lea    0x340(%rsp),%rax
  40a690:	00 
    _Hash_node_base() noexcept : _M_nxt() { }
  40a691:	48 c7 84 24 20 03 00 	movq   $0x0,0x320(%rsp)
  40a698:	00 00 00 00 00 
  40a69d:	48 c7 84 24 28 03 00 	movq   $0x0,0x328(%rsp)
  40a6a4:	00 00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40a6a9:	f3 0f 11 84 24 30 03 	movss  %xmm0,0x330(%rsp)
  40a6b0:	00 00 
  40a6b2:	48 c7 84 24 38 03 00 	movq   $0x0,0x338(%rsp)
  40a6b9:	00 00 00 00 00 
  40a6be:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  40a6c5:	00 
  40a6c6:	48 c7 84 24 40 03 00 	movq   $0x0,0x340(%rsp)
  40a6cd:	00 00 00 00 00 
  40a6d2:	49 8d 14 1c          	lea    (%r12,%rbx,1),%rdx
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  40a6d6:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  40a6dd:	00 00 00 00 00 
  40a6e2:	4c 89 f6             	mov    %r14,%rsi
  40a6e5:	49 89 ef             	mov    %rbp,%r15
  40a6e8:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  40a6ef:	00 00 00 00 00 
  40a6f4:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  40a6fb:	00 00 00 00 00 
  40a700:	48 89 ef             	mov    %rbp,%rdi
  40a703:	48 c7 84 24 e0 00 00 	movq   $0x0,0xe0(%rsp)
  40a70a:	00 00 00 00 00 
  40a70f:	48 c7 84 24 e8 00 00 	movq   $0x0,0xe8(%rsp)
  40a716:	00 00 00 00 00 
  40a71b:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  40a720:	48 c7 84 24 f0 00 00 	movq   $0x0,0xf0(%rsp)
  40a727:	00 00 00 00 00 
  40a72c:	ff d0                	callq  *%rax
  40a72e:	48 b8 45 7f df ff ff 	movabs $0xffffffffffdf7f45,%rax
  40a735:	ff ff ff 
  40a738:	48 8d ac 24 60 01 00 	lea    0x160(%rsp),%rbp
  40a73f:	00 
  40a740:	4c 89 fe             	mov    %r15,%rsi
  40a743:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40a747:	48 b8 60 16 df ff ff 	movabs $0xffffffffffdf1660,%rax
  40a74e:	ff ff ff 
  40a751:	48 89 ef             	mov    %rbp,%rdi
  40a754:	48 01 d8             	add    %rbx,%rax
  40a757:	ff d0                	callq  *%rax
        r.release();
    }

    ~shared_count() // nothrow
    {
        if( pi_ != 0 ) pi_->release();
  40a759:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a760:	00 
  40a761:	48 85 ff             	test   %rdi,%rdi
  40a764:	74 10                	je     40a776 <main+0x9f6>
  40a766:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40a76d:	ff ff ff 
  40a770:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40a774:	ff d0                	callq  *%rax
  int dimx = dim[0].as<int>();
  40a776:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
  40a77b:	48 b8 60 02 df ff ff 	movabs $0xffffffffffdf0260,%rax
  40a782:	ff ff ff 
  40a785:	48 b9 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rcx
  40a78c:	ff ff ff 
  40a78f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40a794:	c7 84 24 b0 03 00 00 	movl   $0x0,0x3b0(%rsp)
  40a79b:	00 00 00 00 
  40a79f:	48 89 ee             	mov    %rbp,%rsi
  40a7a2:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  40a7a7:	48 01 d8             	add    %rbx,%rax
  40a7aa:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  40a7af:	4c 89 ff             	mov    %r15,%rdi
  40a7b2:	ff d0                	callq  *%rax
  40a7b4:	48 b8 50 c2 de ff ff 	movabs $0xffffffffffdec250,%rax
  40a7bb:	ff ff ff 
  40a7be:	4c 89 ff             	mov    %r15,%rdi
  40a7c1:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40a7c6:	48 01 d8             	add    %rbx,%rax
  40a7c9:	ff d0                	callq  *%rax
  40a7cb:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a7d2:	00 
  40a7d3:	89 84 24 a8 00 00 00 	mov    %eax,0xa8(%rsp)
  40a7da:	48 85 ff             	test   %rdi,%rdi
  40a7dd:	74 10                	je     40a7ef <main+0xa6f>
  40a7df:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40a7e6:	ff ff ff 
  40a7e9:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40a7ed:	ff d0                	callq  *%rax
  int dimy = dim[1].as<int>();
  40a7ef:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
  40a7f4:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40a7f9:	48 b9 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rcx
  40a800:	ff ff ff 
  40a803:	c7 84 24 b0 03 00 00 	movl   $0x1,0x3b0(%rsp)
  40a80a:	01 00 00 00 
  40a80e:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  40a813:	48 89 ee             	mov    %rbp,%rsi
  40a816:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  40a81b:	4c 89 ff             	mov    %r15,%rdi
  40a81e:	48 01 d8             	add    %rbx,%rax
  40a821:	ff d0                	callq  *%rax
  40a823:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  40a828:	4c 89 ff             	mov    %r15,%rdi
  40a82b:	48 01 d8             	add    %rbx,%rax
  40a82e:	ff d0                	callq  *%rax
  40a830:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a837:	00 
  40a838:	89 84 24 ac 00 00 00 	mov    %eax,0xac(%rsp)
  40a83f:	48 85 ff             	test   %rdi,%rdi
  40a842:	74 10                	je     40a854 <main+0xad4>
  40a844:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40a84b:	ff ff ff 
  40a84e:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40a852:	ff d0                	callq  *%rax

  for (const auto& node : config["map"]["obstacles"]) {
  40a854:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
  40a859:	48 b9 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rcx
  40a860:	ff ff ff 
  40a863:	49 8d 14 1c          	lea    (%r12,%rbx,1),%rdx
  40a867:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  40a86e:	00 
  40a86f:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  40a874:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  40a879:	4c 89 ff             	mov    %r15,%rdi
  40a87c:	ff d0                	callq  *%rax
  40a87e:	48 b8 50 7f df ff ff 	movabs $0xffffffffffdf7f50,%rax
  40a885:	ff ff ff 
  40a888:	48 8d ac 24 80 01 00 	lea    0x180(%rsp),%rbp
  40a88f:	00 
  40a890:	4c 89 fe             	mov    %r15,%rsi
  40a893:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40a897:	48 b8 a0 1a df ff ff 	movabs $0xffffffffffdf1aa0,%rax
  40a89e:	ff ff ff 
  40a8a1:	48 89 ef             	mov    %rbp,%rdi
  40a8a4:	48 01 d8             	add    %rbx,%rax
  40a8a7:	ff d0                	callq  *%rax
  40a8a9:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a8b0:	00 
  40a8b1:	48 85 ff             	test   %rdi,%rdi
  40a8b4:	74 10                	je     40a8c6 <main+0xb46>
  40a8b6:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40a8bd:	ff ff ff 
  40a8c0:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40a8c4:	ff d0                	callq  *%rax
  40a8c6:	48 b8 c0 b0 de ff ff 	movabs $0xffffffffffdeb0c0,%rax
  40a8cd:	ff ff ff 
  40a8d0:	48 89 ee             	mov    %rbp,%rsi
  40a8d3:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  40a8d8:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40a8df:	00 
  40a8e0:	48 01 d8             	add    %rbx,%rax
  40a8e3:	ff d0                	callq  *%rax
  40a8e5:	48 b8 30 b2 de ff ff 	movabs $0xffffffffffdeb230,%rax
  40a8ec:	ff ff ff 
  40a8ef:	48 89 ee             	mov    %rbp,%rsi
  40a8f2:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  40a8f7:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  40a8fe:	00 
  40a8ff:	48 01 d8             	add    %rbx,%rax
  40a902:	ff d0                	callq  *%rax
    obstacles.insert(Location(node[0].as<int>(), node[1].as<int>()));
  40a904:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  40a90b:	00 
  40a90c:	8b ac 24 80 02 00 00 	mov    0x280(%rsp),%ebp
  40a913:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
	_M_node = _Rb_tree_increment(_M_node);
  40a918:	48 b8 c0 e6 dd ff ff 	movabs $0xffffffffffdde6c0,%rax
  40a91f:	ff ff ff 
  40a922:	48 01 d8             	add    %rbx,%rax
  template <typename>
  friend class node_iterator_base;

  template <typename W>
  bool equal(const node_iterator_base<W>& rhs) const {
    if (m_type != rhs.m_type)
  40a925:	39 ac 24 b0 02 00 00 	cmp    %ebp,0x2b0(%rsp)
  40a92c:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40a931:	0f 84 2c 03 00 00    	je     40ac63 <main+0xee3>
  40a937:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40a93e:	00 00 
# endif

      template <class Facade>
      static typename Facade::reference dereference(Facade const& f)
      {
          return f.dereference();
  40a940:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  40a945:	48 b8 80 f4 de ff ff 	movabs $0xffffffffffdef480,%rax
  40a94c:	ff ff ff 
  40a94f:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  40a954:	48 01 d8             	add    %rbx,%rax
  40a957:	4c 89 ff             	mov    %r15,%rdi
  40a95a:	ff d0                	callq  *%rax
  40a95c:	48 8b 6c 24 40       	mov    0x40(%rsp),%rbp
  40a961:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40a966:	4c 89 fe             	mov    %r15,%rsi
  40a969:	c7 84 24 e0 02 00 00 	movl   $0x1,0x2e0(%rsp)
  40a970:	01 00 00 00 
  40a974:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  40a979:	48 89 e8             	mov    %rbp,%rax
  40a97c:	4c 89 f7             	mov    %r14,%rdi
  40a97f:	48 01 d8             	add    %rbx,%rax
  40a982:	ff d0                	callq  *%rax
  40a984:	4c 8b 6c 24 48       	mov    0x48(%rsp),%r13
  40a989:	4c 89 f7             	mov    %r14,%rdi
  40a98c:	4c 89 e8             	mov    %r13,%rax
  40a98f:	48 01 d8             	add    %rbx,%rax
  40a992:	ff d0                	callq  *%rax
  40a994:	4c 89 fe             	mov    %r15,%rsi
  40a997:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
  40a99c:	41 89 c6             	mov    %eax,%r14d
  40a99f:	48 89 e8             	mov    %rbp,%rax
  40a9a2:	c7 84 24 60 02 00 00 	movl   $0x0,0x260(%rsp)
  40a9a9:	00 00 00 00 
  40a9ad:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  40a9b2:	48 01 d8             	add    %rbx,%rax
  40a9b5:	4c 89 ff             	mov    %r15,%rdi
  40a9b8:	ff d0                	callq  *%rax
  40a9ba:	4c 89 e8             	mov    %r13,%rax
  40a9bd:	4c 89 ff             	mov    %r15,%rdi
  40a9c0:	48 01 d8             	add    %rbx,%rax
  40a9c3:	ff d0                	callq  *%rax
  40a9c5:	4c 63 e0             	movslq %eax,%r12
#pragma once

template<typename T>
void hash_combine(size_t & seed, T const& v) {
	std::hash<T> primitive_type_hash;
	seed ^= primitive_type_hash(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
  40a9c8:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx

  /// Explicit specialization for short.
  _Cxx_hashtable_define_trivial_hash(short)

  /// Explicit specialization for int.
  _Cxx_hashtable_define_trivial_hash(int)
  40a9cd:	49 63 c6             	movslq %r14d,%rax
  40a9d0:	49 8d 14 0c          	lea    (%r12,%rcx,1),%rdx
  40a9d4:	4d 89 e5             	mov    %r12,%r13
  40a9d7:	48 01 c8             	add    %rcx,%rax
  40a9da:	48 8b bc 24 18 03 00 	mov    0x318(%rsp),%rdi
  40a9e1:	00 
  40a9e2:	49 89 d4             	mov    %rdx,%r12
  40a9e5:	49 c1 e4 06          	shl    $0x6,%r12
  40a9e9:	4c 01 e0             	add    %r12,%rax
  40a9ec:	49 89 d4             	mov    %rdx,%r12
  40a9ef:	49 c1 ec 02          	shr    $0x2,%r12
  40a9f3:	49 01 c4             	add    %rax,%r12
  40a9f6:	49 31 d4             	xor    %rdx,%r12
    { return __num % __den; }
  40a9f9:	31 d2                	xor    %edx,%edx
  40a9fb:	4c 89 e0             	mov    %r12,%rax
  40a9fe:	48 f7 f7             	div    %rdi
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_find_before_node(size_type __n, const key_type& __k,
			__hash_code __code) const
    -> __node_base*
    {
      __node_base* __prev_p = _M_buckets[__n];
  40aa01:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40aa08:	00 
  40aa09:	49 89 d0             	mov    %rdx,%r8
  40aa0c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40aa11:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  40aa18:	00 
  40aa19:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
      if (!__prev_p)
  40aa1d:	48 85 c0             	test   %rax,%rax
  40aa20:	74 29                	je     40aa4b <main+0xccb>
	return nullptr;

      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  40aa22:	48 8b 08             	mov    (%rax),%rcx
  40aa25:	48 8b 71 10          	mov    0x10(%rcx),%rsi
  struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>
  {
    static bool
    _S_equals(const _Equal& __eq, const _ExtractKey& __extract,
	      const _Key& __k, _HashCodeType __c, _Hash_node<_Value, true>* __n)
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  40aa29:	49 39 f4             	cmp    %rsi,%r12
  40aa2c:	0f 84 ee 06 00 00    	je     40b120 <main+0x13a0>
	   __p = __p->_M_next())
	{
	  if (this->_M_equals(__k, __code, __p))
	    return __prev_p;

	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  40aa32:	48 8b 09             	mov    (%rcx),%rcx
  40aa35:	48 85 c9             	test   %rcx,%rcx
  40aa38:	74 11                	je     40aa4b <main+0xccb>
  40aa3a:	48 8b 71 10          	mov    0x10(%rcx),%rsi
    { return __num % __den; }
  40aa3e:	31 d2                	xor    %edx,%edx
  40aa40:	48 89 f0             	mov    %rsi,%rax
  40aa43:	48 f7 f7             	div    %rdi
  40aa46:	49 39 d0             	cmp    %rdx,%r8
  40aa49:	74 de                	je     40aa29 <main+0xca9>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40aa4b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40aa50:	bf 18 00 00 00       	mov    $0x18,%edi
  40aa55:	49 89 df             	mov    %rbx,%r15
  40aa58:	48 01 d8             	add    %rbx,%rax
  40aa5b:	ff d0                	callq  *%rax
  40aa5d:	48 89 c5             	mov    %rax,%rbp
    _Hash_node_base() noexcept : _M_nxt() { }
  40aa60:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  40aa67:	44 89 68 08          	mov    %r13d,0x8(%rax)
  40aa6b:	44 89 70 0c          	mov    %r14d,0xc(%rax)
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_insert_unique_node(size_type __bkt, __hash_code __code,
			  __node_type* __node)
    -> iterator
    {
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  40aa6f:	48 8b 84 24 38 03 00 	mov    0x338(%rsp),%rax
  40aa76:	00 
      std::pair<bool, std::size_t> __do_rehash
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  40aa77:	b9 01 00 00 00       	mov    $0x1,%ecx
  40aa7c:	48 8b 94 24 28 03 00 	mov    0x328(%rsp),%rdx
  40aa83:	00 
  40aa84:	48 8b b4 24 18 03 00 	mov    0x318(%rsp),%rsi
  40aa8b:	00 
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  40aa8c:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  40aa93:	00 
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  40aa94:	48 8b 04 24          	mov    (%rsp),%rax
  40aa98:	48 8d 78 20          	lea    0x20(%rax),%rdi
  40aa9c:	48 b8 20 e9 dd ff ff 	movabs $0xffffffffffdde920,%rax
  40aaa3:	ff ff ff 
  40aaa6:	48 01 d8             	add    %rbx,%rax
  40aaa9:	ff d0                	callq  *%rax

      __try
	{
	  if (__do_rehash.first)
  40aaab:	84 c0                	test   %al,%al
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  40aaad:	48 89 d6             	mov    %rdx,%rsi
	  if (__do_rehash.first)
  40aab0:	74 35                	je     40aae7 <main+0xd67>
	    {
	      _M_rehash(__do_rehash.second, __saved_state);
  40aab2:	48 b8 90 31 df ff ff 	movabs $0xffffffffffdf3190,%rax
  40aab9:	ff ff ff 
  40aabc:	48 8d 94 24 b8 00 00 	lea    0xb8(%rsp),%rdx
  40aac3:	00 
  40aac4:	48 8b 3c 24          	mov    (%rsp),%rdi
  40aac8:	48 01 d8             	add    %rbx,%rax
  40aacb:	ff d0                	callq  *%rax
    { return __num % __den; }
  40aacd:	4c 89 e0             	mov    %r12,%rax
  40aad0:	31 d2                	xor    %edx,%edx
  40aad2:	48 f7 b4 24 18 03 00 	divq   0x318(%rsp)
  40aad9:	00 
  40aada:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40aae1:	00 
  40aae2:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
      if (_M_buckets[__bkt])
  40aae7:	48 8b b4 24 10 03 00 	mov    0x310(%rsp),%rsi
  40aaee:	00 
  40aaef:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
      { __n->_M_hash_code = __c; }
  40aaf4:	4c 89 65 10          	mov    %r12,0x10(%rbp)
  40aaf8:	48 01 f1             	add    %rsi,%rcx
  40aafb:	48 8b 01             	mov    (%rcx),%rax
  40aafe:	48 85 c0             	test   %rax,%rax
  40ab01:	0f 84 d5 06 00 00    	je     40b1dc <main+0x145c>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  40ab07:	48 8b 00             	mov    (%rax),%rax
  40ab0a:	48 89 45 00          	mov    %rax,0x0(%rbp)
	  _M_buckets[__bkt]->_M_nxt = __node;
  40ab0e:	48 8b 01             	mov    (%rcx),%rax
  40ab11:	48 89 28             	mov    %rbp,(%rax)

	  this->_M_store_code(__node, __code);

	  // Always insert at the beginning of the bucket.
	  _M_insert_bucket_begin(__bkt, __node);
	  ++_M_element_count;
  40ab14:	48 83 84 24 28 03 00 	addq   $0x1,0x328(%rsp)
  40ab1b:	00 01 
  40ab1d:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40ab24:	00 
  40ab25:	48 85 ff             	test   %rdi,%rdi
  40ab28:	74 10                	je     40ab3a <main+0xdba>
  40ab2a:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40ab31:	ff ff ff 
  40ab34:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ab38:	ff d0                	callq  *%rax
  40ab3a:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40ab41:	00 
  40ab42:	48 85 ff             	test   %rdi,%rdi
  40ab45:	74 10                	je     40ab57 <main+0xdd7>
  40ab47:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40ab4e:	ff ff ff 
  40ab51:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ab55:	ff d0                	callq  *%rax
  40ab57:	48 8b bc 24 a0 03 00 	mov    0x3a0(%rsp),%rdi
  40ab5e:	00 
  40ab5f:	48 85 ff             	test   %rdi,%rdi
  40ab62:	74 10                	je     40ab74 <main+0xdf4>
  40ab64:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40ab6b:	ff ff ff 
  40ab6e:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ab72:	ff d0                	callq  *%rax
  40ab74:	48 8b bc 24 80 03 00 	mov    0x380(%rsp),%rdi
  40ab7b:	00 
  40ab7c:	48 85 ff             	test   %rdi,%rdi
  40ab7f:	74 10                	je     40ab91 <main+0xe11>
  40ab81:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40ab88:	ff ff ff 
  40ab8b:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ab8f:	ff d0                	callq  *%rax
  40ab91:	48 8b bc 24 60 03 00 	mov    0x360(%rsp),%rdi
  40ab98:	00 
  40ab99:	48 85 ff             	test   %rdi,%rdi
  40ab9c:	74 10                	je     40abae <main+0xe2e>
  40ab9e:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40aba5:	ff ff ff 
  40aba8:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40abac:	ff d0                	callq  *%rax
  40abae:	8b ac 24 80 02 00 00 	mov    0x280(%rsp),%ebp
  40abb5:	4c 8b ac 24 88 02 00 	mov    0x288(%rsp),%r13
  40abbc:	00 
  40abbd:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40abc4:	00 
    }
    return true;
  }

  void increment() {
    switch (m_type) {
  40abc5:	83 fd 01             	cmp    $0x1,%ebp
  40abc8:	0f 84 a2 05 00 00    	je     40b170 <main+0x13f0>
  40abce:	83 fd 02             	cmp    $0x2,%ebp
  40abd1:	75 73                	jne    40ac46 <main+0xec6>
  40abd3:	4c 8b a4 24 98 02 00 	mov    0x298(%rsp),%r12
  40abda:	00 
  40abdb:	49 89 df             	mov    %rbx,%r15
  40abde:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40abe3:	ff d0                	callq  *%rax
    }
    return value_type();
  }

  MapIter increment_until_defined(MapIter it) {
    while (it != m_mapEnd && !is_defined(it))
  40abe5:	4c 39 e0             	cmp    %r12,%rax
  40abe8:	74 59                	je     40ac43 <main+0xec3>
  40abea:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40abee:	48 8b 12             	mov    (%rdx),%rdx
  40abf1:	48 85 d2             	test   %rdx,%rdx
  40abf4:	0f 84 0c 1e 00 00    	je     40ca06 <main+0x2c86>
  40abfa:	48 8b 12             	mov    (%rdx),%rdx
  40abfd:	48 85 d2             	test   %rdx,%rdx
  40ac00:	0f 84 f1 1d 00 00    	je     40c9f7 <main+0x2c77>
  40ac06:	48 89 c7             	mov    %rax,%rdi
  40ac09:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
  40ac0e:	eb 1f                	jmp    40ac2f <main+0xeaf>
  40ac10:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40ac14:	48 8b 12             	mov    (%rdx),%rdx
  40ac17:	48 85 d2             	test   %rdx,%rdx
  40ac1a:	0f 84 e6 1d 00 00    	je     40ca06 <main+0x2c86>
  40ac20:	48 8b 12             	mov    (%rdx),%rdx
  40ac23:	48 89 c7             	mov    %rax,%rdi
  40ac26:	48 85 d2             	test   %rdx,%rdx
  40ac29:	0f 84 c8 1d 00 00    	je     40c9f7 <main+0x2c77>
      ++it;
    return it;
  }

  bool is_defined(MapIter it) const {
    return it->first->is_defined() && it->second->is_defined();
  40ac2f:	80 3a 00             	cmpb   $0x0,(%rdx)
  40ac32:	0f 85 08 05 00 00    	jne    40b140 <main+0x13c0>
  40ac38:	49 89 df             	mov    %rbx,%r15
  40ac3b:	41 ff d6             	callq  *%r14
    while (it != m_mapEnd && !is_defined(it))
  40ac3e:	4c 39 e0             	cmp    %r12,%rax
  40ac41:	75 cd                	jne    40ac10 <main+0xe90>
        m_mapIt = increment_until_defined(m_mapIt);
  40ac43:	4c 89 e7             	mov    %r12,%rdi
    if (m_type != rhs.m_type)
  40ac46:	39 ac 24 b0 02 00 00 	cmp    %ebp,0x2b0(%rsp)
        m_pMemory(rhs.m_pMemory) {}

 private:
  friend class boost::iterator_core_access;

  void increment() { this->base_reference() = boost::next(this->base()); }
  40ac4d:	4c 89 ac 24 88 02 00 	mov    %r13,0x288(%rsp)
  40ac54:	00 
  40ac55:	48 89 bc 24 90 02 00 	mov    %rdi,0x290(%rsp)
  40ac5c:	00 
  40ac5d:	0f 85 dd fc ff ff    	jne    40a940 <main+0xbc0>
    switch (m_type) {
  40ac63:	83 fd 01             	cmp    $0x1,%ebp
  40ac66:	0f 84 0d 05 00 00    	je     40b179 <main+0x13f9>
  40ac6c:	83 fd 02             	cmp    $0x2,%ebp
  40ac6f:	0f 84 2b 05 00 00    	je     40b1a0 <main+0x1420>
  40ac75:	48 8b bc 24 d8 02 00 	mov    0x2d8(%rsp),%rdi
  40ac7c:	00 
  40ac7d:	48 85 ff             	test   %rdi,%rdi
  40ac80:	74 10                	je     40ac92 <main+0xf12>
  40ac82:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40ac89:	ff ff ff 
  40ac8c:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ac90:	ff d0                	callq  *%rax
  40ac92:	48 8b bc 24 a8 02 00 	mov    0x2a8(%rsp),%rdi
  40ac99:	00 
  40ac9a:	48 85 ff             	test   %rdi,%rdi
  40ac9d:	74 10                	je     40acaf <main+0xf2f>
  40ac9f:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40aca6:	ff ff ff 
  40aca9:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40acad:	ff d0                	callq  *%rax
  40acaf:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  40acb6:	00 
  40acb7:	48 85 ff             	test   %rdi,%rdi
  40acba:	74 10                	je     40accc <main+0xf4c>
  40acbc:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40acc3:	ff ff ff 
  40acc6:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40acca:	ff d0                	callq  *%rax
  }

  for (const auto& node : config["agents"]) {
  40accc:	48 b8 5a 7f df ff ff 	movabs $0xffffffffffdf7f5a,%rax
  40acd3:	ff ff ff 
  40acd6:	48 8d ac 24 a0 01 00 	lea    0x1a0(%rsp),%rbp
  40acdd:	00 
  40acde:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  40ace5:	00 
  40ace6:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40acea:	48 b8 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rax
  40acf1:	ff ff ff 
  40acf4:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40acf9:	48 b8 c0 1c df ff ff 	movabs $0xffffffffffdf1cc0,%rax
  40ad00:	ff ff ff 
  40ad03:	48 89 ef             	mov    %rbp,%rdi
  40ad06:	48 01 d8             	add    %rbx,%rax
  40ad09:	ff d0                	callq  *%rax
  40ad0b:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40ad12:	00 
  40ad13:	48 89 ee             	mov    %rbp,%rsi
  40ad16:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  40ad1b:	48 01 d8             	add    %rbx,%rax
  40ad1e:	ff d0                	callq  *%rax
  40ad20:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  40ad27:	00 
  40ad28:	48 89 ee             	mov    %rbp,%rsi
  40ad2b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40ad30:	48 01 d8             	add    %rbx,%rax
  40ad33:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  40ad35:	48 8d 84 24 00 02 00 	lea    0x200(%rsp),%rax
  40ad3c:	00 
  40ad3d:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40ad44:	00 
  40ad45:	48 8d 84 24 20 02 00 	lea    0x220(%rsp),%rax
  40ad4c:	00 
  40ad4d:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  40ad54:	00 
  40ad55:	48 8d 84 24 30 02 00 	lea    0x230(%rsp),%rax
  40ad5c:	00 
  40ad5d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    if (m_type != rhs.m_type)
  40ad62:	8b 84 24 e0 02 00 00 	mov    0x2e0(%rsp),%eax
  40ad69:	3b 84 24 b0 04 00 00 	cmp    0x4b0(%rsp),%eax
  40ad70:	0f 84 9d 05 00 00    	je     40b313 <main+0x1593>
  40ad76:	48 b8 80 f4 de ff ff 	movabs $0xffffffffffdef480,%rax
  40ad7d:	ff ff ff 
  40ad80:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40ad85:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40ad8a:	48 01 d8             	add    %rbx,%rax
  40ad8d:	ff d0                	callq  *%rax
}

// indexing
template <typename Key>
inline const Node Node::operator[](const Key& key) const {
  if (!m_isValid)
  40ad8f:	0f b6 84 24 b0 03 00 	movzbl 0x3b0(%rsp),%eax
  40ad96:	00 
  40ad97:	84 c0                	test   %al,%al
  40ad99:	88 44 24 58          	mov    %al,0x58(%rsp)
  40ad9d:	0f 84 06 24 00 00    	je     40d1a9 <main+0x3429>
    throw InvalidNode();
  EnsureNodeExists();
  40ada3:	48 b8 90 fe de ff ff 	movabs $0xffffffffffdefe90,%rax
  40adaa:	ff ff ff 
  40adad:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40adb2:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  40adb9:	00 
  40adba:	48 01 d8             	add    %rbx,%rax
  40adbd:	ff d0                	callq  *%rax
#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
        id_ = 0;
#endif
    }

    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40adbf:	4c 8b a4 24 c0 03 00 	mov    0x3c0(%rsp),%r12
  40adc6:	00 
#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
        , id_(shared_count_id)
#endif
    {
        if( pi_ != 0 ) pi_->add_ref_copy();
  40adc7:	4d 85 e4             	test   %r12,%r12
  40adca:	74 07                	je     40add3 <main+0x1053>
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  40adcc:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
  40add3:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  40adda:	00 
  40addb:	48 89 f8             	mov    %rdi,%rax
  40adde:	48 83 c0 10          	add    $0x10,%rax
  40ade2:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  40ade9:	00 
          _M_construct(__beg, __end, _Tag());
  40adea:	48 b8 66 7f df ff ff 	movabs $0xffffffffffdf7f66,%rax
  40adf1:	ff ff ff 
  40adf4:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40adf8:	48 b8 61 7f df ff ff 	movabs $0xffffffffffdf7f61,%rax
  40adff:	ff ff ff 
  40ae02:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40ae06:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  40ae0d:	ff ff ff 
  40ae10:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40ae17:	00 
  40ae18:	48 01 d8             	add    %rbx,%rax
  40ae1b:	ff d0                	callq  *%rax
  40ae1d:	4d 85 e4             	test   %r12,%r12
  detail::node* value = static_cast<const detail::node&>(*m_pNode)
  40ae20:	48 8b 94 24 c8 03 00 	mov    0x3c8(%rsp),%rdx
  40ae27:	00 
  40ae28:	0f 84 ca 04 00 00    	je     40b2f8 <main+0x1578>
  40ae2e:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40ae33:	f0 83 00 01          	lock addl $0x1,(%rax)
  40ae37:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40ae3a:	48 85 d2             	test   %rdx,%rdx
  40ae3d:	0f 84 c1 04 00 00    	je     40b304 <main+0x1584>
  40ae43:	f0 83 00 01          	lock addl $0x1,(%rax)
  40ae47:	48 8b 02             	mov    (%rdx),%rax
  40ae4a:	48 85 c0             	test   %rax,%rax
  40ae4d:	0f 84 85 24 00 00    	je     40d2d8 <main+0x3558>

// indexing
template <typename Key>
inline node* node_data::get(const Key& key,
                            shared_memory_holder pMemory) const {
  switch (m_type) {
  40ae53:	8b 50 04             	mov    0x4(%rax),%edx
  40ae56:	83 fa 02             	cmp    $0x2,%edx
  40ae59:	0f 84 28 10 00 00    	je     40be87 <main+0x2107>
  40ae5f:	0f 82 79 04 00 00    	jb     40b2de <main+0x155e>
  40ae65:	83 fa 03             	cmp    $0x3,%edx
  40ae68:	0f 85 22 0e 00 00    	jne    40bc90 <main+0x1f10>
  40ae6e:	4d 85 e4             	test   %r12,%r12
  40ae71:	0f 84 be 14 00 00    	je     40c335 <main+0x25b5>
  40ae77:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  40ae7e:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40ae85:	ff ff ff 
  40ae88:	31 ed                	xor    %ebp,%ebp
  40ae8a:	4c 89 e7             	mov    %r12,%rdi
  40ae8d:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ae91:	ff d0                	callq  *%rax
  40ae93:	4c 89 e7             	mov    %r12,%rdi
  40ae96:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  40ae9a:	41 ff d5             	callq  *%r13
  40ae9d:	4c 89 e7             	mov    %r12,%rdi
  40aea0:	41 ff d5             	callq  *%r13
	if (!_M_is_local())
  40aea3:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40aeaa:	00 
  40aeab:	48 8b bc 24 00 02 00 	mov    0x200(%rsp),%rdi
  40aeb2:	00 
  40aeb3:	48 83 c0 10          	add    $0x10,%rax
  40aeb7:	48 39 c7             	cmp    %rax,%rdi
  40aeba:	74 12                	je     40aece <main+0x114e>
      { ::operator delete(__p); }
  40aebc:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40aec3:	ff ff ff 
  40aec6:	49 89 df             	mov    %rbx,%r15
  40aec9:	48 01 d8             	add    %rbx,%rax
  40aecc:	ff d0                	callq  *%rax
  40aece:	4d 85 e4             	test   %r12,%r12
  40aed1:	74 13                	je     40aee6 <main+0x1166>
  40aed3:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40aeda:	ff ff ff 
  40aedd:	4c 89 e7             	mov    %r12,%rdi
  40aee0:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40aee4:	ff d0                	callq  *%rax
                            .get(detail::to_value(key), m_pMemory);
  if (!value) {
  40aee6:	48 85 ed             	test   %rbp,%rbp
  40aee9:	0f 84 8b 17 00 00    	je     40c67a <main+0x28fa>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40aeef:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40aef6:	00 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40aef7:	48 8b 94 24 b8 03 00 	mov    0x3b8(%rsp),%rdx
  40aefe:	00 
        if( pi_ != 0 ) pi_->add_ref_copy();
  40aeff:	48 85 ff             	test   %rdi,%rdi
  40af02:	0f 84 e4 13 00 00    	je     40c2ec <main+0x256c>
  40af08:	48 8d 47 08          	lea    0x8(%rdi),%rax
  40af0c:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  40af10:	c6 84 24 c0 01 00 00 	movb   $0x1,0x1c0(%rsp)
  40af17:	01 
  40af18:	48 89 94 24 c8 01 00 	mov    %rdx,0x1c8(%rsp)
  40af1f:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40af20:	48 89 bc 24 d0 01 00 	mov    %rdi,0x1d0(%rsp)
  40af27:	00 
  40af28:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  40af2c:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40af33:	ff ff ff 
  40af36:	48 89 ac 24 d8 01 00 	mov    %rbp,0x1d8(%rsp)
  40af3d:	00 
  40af3e:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40af42:	ff d0                	callq  *%rax
  if (!m_isValid)
  40af44:	0f b6 84 24 b0 03 00 	movzbl 0x3b0(%rsp),%eax
  40af4b:	00 
  40af4c:	84 c0                	test   %al,%al
  40af4e:	88 84 24 a0 00 00 00 	mov    %al,0xa0(%rsp)
  40af55:	0f 84 a8 22 00 00    	je     40d203 <main+0x3483>
  EnsureNodeExists();
  40af5b:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  40af62:	00 
  40af63:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40af68:	48 01 d8             	add    %rbx,%rax
  40af6b:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40af6d:	4c 8b a4 24 c0 03 00 	mov    0x3c0(%rsp),%r12
  40af74:	00 
        if( pi_ != 0 ) pi_->add_ref_copy();
  40af75:	4d 85 e4             	test   %r12,%r12
  40af78:	74 07                	je     40af81 <main+0x1201>
  40af7a:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
	: allocator_type(__a), _M_p(__dat) { }
  40af81:	48 8d 84 24 40 02 00 	lea    0x240(%rsp),%rax
  40af88:	00 
  40af89:	48 89 c7             	mov    %rax,%rdi
  40af8c:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40af91:	48 8d 84 24 50 02 00 	lea    0x250(%rsp),%rax
  40af98:	00 
  40af99:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  40afa0:	00 
          _M_construct(__beg, __end, _Tag());
  40afa1:	48 b8 6b 7f df ff ff 	movabs $0xffffffffffdf7f6b,%rax
  40afa8:	ff ff ff 
  40afab:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40afaf:	48 b8 67 7f df ff ff 	movabs $0xffffffffffdf7f67,%rax
  40afb6:	ff ff ff 
  40afb9:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40afbd:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40afc4:	00 
  40afc5:	48 01 d8             	add    %rbx,%rax
  40afc8:	ff d0                	callq  *%rax
  40afca:	4d 85 e4             	test   %r12,%r12
  detail::node* value = static_cast<const detail::node&>(*m_pNode)
  40afcd:	48 8b 94 24 c8 03 00 	mov    0x3c8(%rsp),%rdx
  40afd4:	00 
  40afd5:	0f 84 00 13 00 00    	je     40c2db <main+0x255b>
  40afdb:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40afe0:	f0 83 00 01          	lock addl $0x1,(%rax)
  40afe4:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40afe7:	48 85 d2             	test   %rdx,%rdx
  40afea:	0f 84 14 03 00 00    	je     40b304 <main+0x1584>
  40aff0:	f0 83 00 01          	lock addl $0x1,(%rax)
  40aff4:	48 8b 02             	mov    (%rdx),%rax
  40aff7:	48 85 c0             	test   %rax,%rax
  40affa:	0f 84 d8 22 00 00    	je     40d2d8 <main+0x3558>
  40b000:	8b 50 04             	mov    0x4(%rax),%edx
  40b003:	83 fa 02             	cmp    $0x2,%edx
  40b006:	0f 84 64 13 00 00    	je     40c370 <main+0x25f0>
  40b00c:	0f 82 cf 0e 00 00    	jb     40bee1 <main+0x2161>
  40b012:	83 fa 03             	cmp    $0x3,%edx
  40b015:	0f 85 b8 13 00 00    	jne    40c3d3 <main+0x2653>
  40b01b:	4d 85 e4             	test   %r12,%r12
  40b01e:	0f 84 18 13 00 00    	je     40c33c <main+0x25bc>
  40b024:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  40b02b:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40b032:	ff ff ff 
  40b035:	31 ed                	xor    %ebp,%ebp
  40b037:	4c 89 e7             	mov    %r12,%rdi
  40b03a:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40b03e:	ff d0                	callq  *%rax
  40b040:	e9 ad 0e 00 00       	jmpq   40bef2 <main+0x2172>
      std::cout << desc << "\n";
  40b045:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  40b04c:	ff ff ff 
  40b04f:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  40b054:	49 89 df             	mov    %rbx,%r15
  40b057:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  40b05b:	48 b8 80 e4 dd ff ff 	movabs $0xffffffffffdde480,%rax
  40b062:	ff ff ff 
  40b065:	48 01 d8             	add    %rbx,%rax
  40b068:	ff d0                	callq  *%rax
  40b06a:	48 ba c1 7d df ff ff 	movabs $0xffffffffffdf7dc1,%rdx
  40b071:	ff ff ff 
  40b074:	48 89 c7             	mov    %rax,%rdi
  40b077:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40b07e:	ff ff ff 
  40b081:	48 8d 34 13          	lea    (%rbx,%rdx,1),%rsi
  40b085:	48 01 d8             	add    %rbx,%rax
  40b088:	ff d0                	callq  *%rax
      return 0;
  40b08a:	48 b8 90 4e df ff ff 	movabs $0xffffffffffdf4e90,%rax
  40b091:	ff ff ff 
  40b094:	31 ed                	xor    %ebp,%ebp
  40b096:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b09b:	48 01 d8             	add    %rbx,%rax
  40b09e:	ff d0                	callq  *%rax
	if (!_M_is_local())
  40b0a0:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  40b0a5:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  40b0ac:	00 
  40b0ad:	48 83 c0 10          	add    $0x10,%rax
  40b0b1:	48 39 c7             	cmp    %rax,%rdi
  40b0b4:	74 12                	je     40b0c8 <main+0x1348>
  40b0b6:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40b0bd:	ff ff ff 
  40b0c0:	49 89 df             	mov    %rbx,%r15
  40b0c3:	48 01 d8             	add    %rbx,%rax
  40b0c6:	ff d0                	callq  *%rax
  40b0c8:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  40b0cd:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  40b0d4:	00 
  40b0d5:	48 83 c0 10          	add    $0x10,%rax
  40b0d9:	48 39 c7             	cmp    %rax,%rdi
  40b0dc:	74 12                	je     40b0f0 <main+0x1370>
  40b0de:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40b0e5:	ff ff ff 
  40b0e8:	49 89 df             	mov    %rbx,%r15
  40b0eb:	48 01 d8             	add    %rbx,%rax
  40b0ee:	ff d0                	callq  *%rax
  po::options_description desc("Allowed options");
  40b0f0:	48 b8 70 b6 de ff ff 	movabs $0xffffffffffdeb670,%rax
  40b0f7:	ff ff ff 
  40b0fa:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40b0ff:	48 01 d8             	add    %rbx,%rax
  40b102:	ff d0                	callq  *%rax
  } else {
    std::cout << "Planning NOT successful!" << std::endl;
  }

  return 0;
}
  40b104:	48 81 c4 b8 06 00 00 	add    $0x6b8,%rsp
  40b10b:	89 e8                	mov    %ebp,%eax
  40b10d:	5b                   	pop    %rbx
  40b10e:	5d                   	pop    %rbp
  40b10f:	41 5c                	pop    %r12
  40b111:	41 5d                	pop    %r13
  40b113:	41 5e                	pop    %r14
  40b115:	41 5f                	pop    %r15
  40b117:	c3                   	retq   
  40b118:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40b11f:	00 
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
	return bool(std::get<__i>(__t) == std::get<__i>(__u))
	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
  40b120:	44 3b 69 08          	cmp    0x8(%rcx),%r13d
  40b124:	0f 85 08 f9 ff ff    	jne    40aa32 <main+0xcb2>
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  40b12a:	44 3b 71 0c          	cmp    0xc(%rcx),%r14d
  40b12e:	0f 85 fe f8 ff ff    	jne    40aa32 <main+0xcb2>
  40b134:	e9 e4 f9 ff ff       	jmpq   40ab1d <main+0xd9d>
  40b139:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40b140:	48 8b 47 28          	mov    0x28(%rdi),%rax
  40b144:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  40b147:	48 85 c0             	test   %rax,%rax
  40b14a:	0f 84 b6 18 00 00    	je     40ca06 <main+0x2c86>
  40b150:	48 8b 00             	mov    (%rax),%rax
  40b153:	48 85 c0             	test   %rax,%rax
  40b156:	0f 84 9b 18 00 00    	je     40c9f7 <main+0x2c77>
    return it->first->is_defined() && it->second->is_defined();
  40b15c:	80 38 00             	cmpb   $0x0,(%rax)
  40b15f:	0f 84 d3 fa ff ff    	je     40ac38 <main+0xeb8>
  40b165:	49 89 fc             	mov    %rdi,%r12
  40b168:	e9 d6 fa ff ff       	jmpq   40ac43 <main+0xec3>
  40b16d:	0f 1f 00             	nopl   (%rax)
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
  40b170:	49 83 c5 08          	add    $0x8,%r13
  40b174:	e9 cd fa ff ff       	jmpq   40ac46 <main+0xec6>
  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
  40b179:	48 8b 84 24 b8 02 00 	mov    0x2b8(%rsp),%rax
  40b180:	00 
  40b181:	48 39 84 24 88 02 00 	cmp    %rax,0x288(%rsp)
  40b188:	00 
  40b189:	0f 94 c0             	sete   %al
  for (const auto& node : config["map"]["obstacles"]) {
  40b18c:	84 c0                	test   %al,%al
  40b18e:	0f 84 ac f7 ff ff    	je     40a940 <main+0xbc0>
  40b194:	e9 dc fa ff ff       	jmpq   40ac75 <main+0xef5>
  40b199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { return _M_node == __x._M_node; }
  40b1a0:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
  40b1a7:	00 
  40b1a8:	48 39 84 24 90 02 00 	cmp    %rax,0x290(%rsp)
  40b1af:	00 
  40b1b0:	0f 94 c0             	sete   %al
  40b1b3:	eb d7                	jmp    40b18c <main+0x140c>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40b1b5:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  40b1b9:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  40b1bc:	48 85 c0             	test   %rax,%rax
  40b1bf:	0f 84 52 f3 ff ff    	je     40a517 <main+0x797>
            base.manager(functor, functor, destroy_functor_tag);
  40b1c5:	48 8d bc 24 18 03 00 	lea    0x318(%rsp),%rdi
  40b1cc:	00 
  40b1cd:	ba 02 00 00 00       	mov    $0x2,%edx
  40b1d2:	48 89 fe             	mov    %rdi,%rsi
  40b1d5:	ff d0                	callq  *%rax
  40b1d7:	e9 3b f3 ff ff       	jmpq   40a517 <main+0x797>
	  __node->_M_nxt = _M_before_begin._M_nxt;
  40b1dc:	48 8b 84 24 20 03 00 	mov    0x320(%rsp),%rax
  40b1e3:	00 
	  _M_before_begin._M_nxt = __node;
  40b1e4:	48 89 ac 24 20 03 00 	mov    %rbp,0x320(%rsp)
  40b1eb:	00 
	  if (__node->_M_nxt)
  40b1ec:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  40b1ef:	48 89 45 00          	mov    %rax,0x0(%rbp)
	  if (__node->_M_nxt)
  40b1f3:	74 12                	je     40b207 <main+0x1487>
    { return __num % __den; }
  40b1f5:	48 8b 40 10          	mov    0x10(%rax),%rax
  40b1f9:	31 d2                	xor    %edx,%edx
  40b1fb:	48 f7 b4 24 18 03 00 	divq   0x318(%rsp)
  40b202:	00 
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  40b203:	48 89 2c d6          	mov    %rbp,(%rsi,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  40b207:	48 8b 04 24          	mov    (%rsp),%rax
  40b20b:	48 83 c0 10          	add    $0x10,%rax
  40b20f:	48 89 01             	mov    %rax,(%rcx)
  40b212:	e9 fd f8 ff ff       	jmpq   40ab14 <main+0xd94>
  40b217:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40b21b:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40b220:	49 89 df             	mov    %rbx,%r15
            boost::throw_exception(bad_lexical_cast());
        }
#else
        template <class S, class T>
        inline void throw_bad_cast() {
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  40b223:	48 8d ac 24 40 02 00 	lea    0x240(%rsp),%rbp
  40b22a:	00 
  40b22b:	48 83 c0 18          	add    $0x18,%rax
  40b22f:	49 8d 7e 70          	lea    0x70(%r14),%rdi
  40b233:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  40b23a:	00 
  40b23b:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40b242:	ff ff ff 
  40b245:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40b249:	48 83 c0 10          	add    $0x10,%rax
  40b24d:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40b254:	00 
  40b255:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  40b25c:	ff ff ff 
  40b25f:	48 01 d8             	add    %rbx,%rax
  40b262:	ff d0                	callq  *%rax
  40b264:	48 b8 50 fc ff ff ff 	movabs $0xfffffffffffffc50,%rax
  40b26b:	ff ff ff 
  40b26e:	4c 89 f7             	mov    %r14,%rdi
  40b271:	48 01 d8             	add    %rbx,%rax
  40b274:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40b27b:	00 
  40b27c:	48 b8 30 b9 de ff ff 	movabs $0xffffffffffdeb930,%rax
  40b283:	ff ff ff 
  40b286:	48 01 d8             	add    %rbx,%rax
  40b289:	ff d0                	callq  *%rax
            : source(&source_type_arg), target(&target_type_arg)
  40b28b:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  40b292:	ff ff ff 
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  40b295:	48 89 ef             	mov    %rbp,%rdi
            : source(&source_type_arg), target(&target_type_arg)
  40b298:	4c 8d 24 03          	lea    (%rbx,%rax,1),%r12
  40b29c:	48 b8 b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rax
  40b2a3:	ff ff ff 
  40b2a6:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40b2aa:	4c 89 a4 24 40 02 00 	mov    %r12,0x240(%rsp)
  40b2b1:	00 
  40b2b2:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  40b2b9:	00 
  40b2ba:	48 b8 60 f8 ff ff ff 	movabs $0xfffffffffffff860,%rax
  40b2c1:	ff ff ff 
  40b2c4:	48 01 d8             	add    %rbx,%rax
  40b2c7:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  40b2ce:	00 
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  40b2cf:	48 b8 c0 0b df ff ff 	movabs $0xffffffffffdf0bc0,%rax
  40b2d6:	ff ff ff 
  40b2d9:	48 01 d8             	add    %rbx,%rax
  40b2dc:	ff d0                	callq  *%rax
    case NodeType::Map:
      break;
    case NodeType::Undefined:
    case NodeType::Null:
      return NULL;
  40b2de:	31 ed                	xor    %ebp,%ebp
  40b2e0:	4d 85 e4             	test   %r12,%r12
  40b2e3:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40b2ea:	ff ff ff 
  40b2ed:	0f 85 a0 fb ff ff    	jne    40ae93 <main+0x1113>
  40b2f3:	e9 ab fb ff ff       	jmpq   40aea3 <main+0x1123>
  40b2f8:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40b2fb:	48 85 d2             	test   %rdx,%rdx
  40b2fe:	0f 85 43 fb ff ff    	jne    40ae47 <main+0x10c7>
  40b304:	48 b8 c8 ec dd ff ff 	movabs $0xffffffffffddecc8,%rax
  40b30b:	ff ff ff 
  40b30e:	48 01 d8             	add    %rbx,%rax
  40b311:	ff d0                	callq  *%rax
    switch (m_type) {
  40b313:	83 f8 01             	cmp    $0x1,%eax
  40b316:	0f 84 f9 0f 00 00    	je     40c315 <main+0x2595>
  40b31c:	83 f8 02             	cmp    $0x2,%eax
  40b31f:	0f 84 3d 13 00 00    	je     40c662 <main+0x28e2>
  40b325:	48 8b bc 24 d8 04 00 	mov    0x4d8(%rsp),%rdi
  40b32c:	00 
  40b32d:	48 85 ff             	test   %rdi,%rdi
  40b330:	74 0f                	je     40b341 <main+0x15c1>
  40b332:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40b339:	ff ff ff 
  40b33c:	48 01 d8             	add    %rbx,%rax
  40b33f:	ff d0                	callq  *%rax
  40b341:	48 8b bc 24 08 03 00 	mov    0x308(%rsp),%rdi
  40b348:	00 
  40b349:	48 85 ff             	test   %rdi,%rdi
  40b34c:	74 0f                	je     40b35d <main+0x15dd>
  40b34e:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40b355:	ff ff ff 
  40b358:	48 01 d8             	add    %rbx,%rax
  40b35b:	ff d0                	callq  *%rax
  40b35d:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  40b364:	00 
  40b365:	48 85 ff             	test   %rdi,%rdi
  40b368:	74 0f                	je     40b379 <main+0x15f9>
  40b36a:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40b371:	ff ff ff 
  40b374:	48 01 d8             	add    %rbx,%rax
  40b377:	ff d0                	callq  *%rax

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  40b379:	48 8b ac 24 c8 00 00 	mov    0xc8(%rsp),%rbp
  40b380:	00 
  40b381:	48 2b ac 24 c0 00 00 	sub    0xc0(%rsp),%rbp
  40b388:	00 
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  40b389:	48 c7 84 24 e0 02 00 	movq   $0x0,0x2e0(%rsp)
  40b390:	00 00 00 00 00 
  40b395:	48 c7 84 24 e8 02 00 	movq   $0x0,0x2e8(%rsp)
  40b39c:	00 00 00 00 00 
  40b3a1:	48 c7 84 24 f0 02 00 	movq   $0x0,0x2f0(%rsp)
  40b3a8:	00 00 00 00 00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  40b3ad:	48 89 e8             	mov    %rbp,%rax
  40b3b0:	48 c1 f8 03          	sar    $0x3,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  40b3b4:	48 85 c0             	test   %rax,%rax
  40b3b7:	0f 84 48 1a 00 00    	je     40ce05 <main+0x3085>
	if (__n > this->max_size())
  40b3bd:	48 ba ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rdx
  40b3c4:	ff ff 1f 
  40b3c7:	48 39 d0             	cmp    %rdx,%rax
  40b3ca:	0f 87 14 1a 00 00    	ja     40cde4 <main+0x3064>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40b3d0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40b3d5:	48 be 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rsi
  40b3dc:	ff ff ff 
  40b3df:	48 89 ef             	mov    %rbp,%rdi
  40b3e2:	49 89 df             	mov    %rbx,%r15
  40b3e5:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  40b3ea:	48 01 d8             	add    %rbx,%rax
  40b3ed:	ff d0                	callq  *%rax
  40b3ef:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  40b3f6:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  40b3f7:	48 01 c5             	add    %rax,%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
  40b3fa:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  40b401:	00 
	this->_M_impl._M_finish = this->_M_impl._M_start;
  40b402:	48 89 84 24 e8 02 00 	mov    %rax,0x2e8(%rsp)
  40b409:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  40b40a:	48 89 ac 24 f0 02 00 	mov    %rbp,0x2f0(%rsp)
  40b411:	00 
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  40b412:	48 89 c1             	mov    %rax,%rcx
  40b415:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  40b41c:	00 
  40b41d:	48 89 fe             	mov    %rdi,%rsi
  40b420:	eb 13                	jmp    40b435 <main+0x16b5>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  40b422:	48 85 c9             	test   %rcx,%rcx
  40b425:	74 06                	je     40b42d <main+0x16ad>
  40b427:	4c 8b 06             	mov    (%rsi),%r8
  40b42a:	4c 89 01             	mov    %r8,(%rcx)
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
  40b42d:	48 83 c1 08          	add    $0x8,%rcx
  40b431:	48 83 c6 08          	add    $0x8,%rsi
  40b435:	48 39 f2             	cmp    %rsi,%rdx
  40b438:	75 e8                	jne    40b422 <main+0x16a2>
      { this->_M_impl._M_finish =
  40b43a:	48 29 fa             	sub    %rdi,%rdx
      _M_rehash_policy(__ht._M_rehash_policy)
  40b43d:	48 c7 84 24 b0 04 00 	movq   $0x0,0x4b0(%rsp)
  40b444:	00 00 00 00 00 
    _Hash_node_base() noexcept : _M_nxt() { }
  40b449:	48 c7 84 24 c0 04 00 	movq   $0x0,0x4c0(%rsp)
  40b450:	00 00 00 00 00 
  40b455:	48 01 d0             	add    %rdx,%rax
  40b458:	48 8b 94 24 38 03 00 	mov    0x338(%rsp),%rdx
  40b45f:	00 
  40b460:	48 c7 84 24 e0 04 00 	movq   $0x0,0x4e0(%rsp)
  40b467:	00 00 00 00 00 
  40b46c:	48 89 84 24 e8 02 00 	mov    %rax,0x2e8(%rsp)
  40b473:	00 
  40b474:	48 8b 84 24 18 03 00 	mov    0x318(%rsp),%rax
  40b47b:	00 
      _M_assign(__ht,
  40b47c:	48 8b 34 24          	mov    (%rsp),%rsi
      _M_rehash_policy(__ht._M_rehash_policy)
  40b480:	48 89 94 24 d8 04 00 	mov    %rdx,0x4d8(%rsp)
  40b487:	00 
      _M_assign(__ht,
  40b488:	48 8d 94 24 00 02 00 	lea    0x200(%rsp),%rdx
  40b48f:	00 
      _M_rehash_policy(__ht._M_rehash_policy)
  40b490:	48 89 84 24 b8 04 00 	mov    %rax,0x4b8(%rsp)
  40b497:	00 
  40b498:	48 8b 84 24 28 03 00 	mov    0x328(%rsp),%rax
  40b49f:	00 
  40b4a0:	48 89 84 24 c8 04 00 	mov    %rax,0x4c8(%rsp)
  40b4a7:	00 
  40b4a8:	48 8b 84 24 30 03 00 	mov    0x330(%rsp),%rax
  40b4af:	00 
  40b4b0:	48 89 84 24 d0 04 00 	mov    %rax,0x4d0(%rsp)
  40b4b7:	00 
      _M_assign(__ht,
  40b4b8:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40b4bd:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  40b4c4:	00 
  40b4c5:	48 89 c7             	mov    %rax,%rdi
  40b4c8:	48 b8 60 ee de ff ff 	movabs $0xffffffffffdeee60,%rax
  40b4cf:	ff ff ff 
  40b4d2:	48 01 d8             	add    %rbx,%rax
  40b4d5:	ff d0                	callq  *%rax
        m_lowLevelExpanded(0) {}


  void init(size_t dimx, size_t dimy, std::unordered_set<Location> obstacles,
              std::vector<Location> goals) {
		m_dimx = dimx;
  40b4d7:	8b 84 24 a8 00 00 00 	mov    0xa8(%rsp),%eax
  40b4de:	48 bd c0 d1 9b 3b 00 	movabs $0x3b9bd1c0,%rbp
  40b4e5:	00 00 00 
      if (_M_bucket_count != __ht._M_bucket_count)
  40b4e8:	48 8b bc 24 b8 04 00 	mov    0x4b8(%rsp),%rdi
  40b4ef:	00 
      std::size_t __former_bucket_count = _M_bucket_count;
  40b4f0:	4c 8b 6c 1d 28       	mov    0x28(%rbp,%rbx,1),%r13
  40b4f5:	4c 8b 74 1d 48       	mov    0x48(%rbp,%rbx,1),%r14
  40b4fa:	89 44 1d 18          	mov    %eax,0x18(%rbp,%rbx,1)
		m_dimy = dimy;
  40b4fe:	8b 84 24 ac 00 00 00 	mov    0xac(%rsp),%eax
      if (_M_bucket_count != __ht._M_bucket_count)
  40b505:	49 39 fd             	cmp    %rdi,%r13
  40b508:	89 44 1d 1c          	mov    %eax,0x1c(%rbp,%rbx,1)
  40b50c:	0f 84 92 18 00 00    	je     40cda4 <main+0x3024>
	if (__builtin_expect(__n == 1, false))
  40b512:	48 83 ff 01          	cmp    $0x1,%rdi
	  __former_buckets = _M_buckets;
  40b516:	4c 8b 64 1d 20       	mov    0x20(%rbp,%rbx,1),%r12
	if (__builtin_expect(__n == 1, false))
  40b51b:	0f 84 68 18 00 00    	je     40cd89 <main+0x3009>
	return __hashtable_alloc::_M_allocate_buckets(__n);
  40b521:	48 b8 80 2d de ff ff 	movabs $0xffffffffffde2d80,%rax
  40b528:	ff ff ff 
  40b52b:	48 01 d8             	add    %rbx,%rax
  40b52e:	ff d0                	callq  *%rax
  40b530:	48 8b bc 24 b8 04 00 	mov    0x4b8(%rsp),%rdi
  40b537:	00 
	  _M_buckets = _M_allocate_buckets(__ht._M_bucket_count);
  40b538:	48 89 44 1d 20       	mov    %rax,0x20(%rbp,%rbx,1)
	  _M_bucket_count = __ht._M_bucket_count;
  40b53d:	48 89 7c 1d 28       	mov    %rdi,0x28(%rbp,%rbx,1)
	  _M_element_count = __ht._M_element_count;
  40b542:	48 8b 84 24 c8 04 00 	mov    0x4c8(%rsp),%rax
  40b549:	00 
	  _M_rehash_policy = __ht._M_rehash_policy;
  40b54a:	48 8b 94 24 d8 04 00 	mov    0x4d8(%rsp),%rdx
  40b551:	00 
	  _M_assign(__ht,
  40b552:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
	  _M_element_count = __ht._M_element_count;
  40b557:	48 89 44 1d 38       	mov    %rax,0x38(%rbp,%rbx,1)
	  _M_rehash_policy = __ht._M_rehash_policy;
  40b55c:	48 8b 84 24 d0 04 00 	mov    0x4d0(%rsp),%rax
  40b563:	00 
  40b564:	48 89 54 1d 48       	mov    %rdx,0x48(%rbp,%rbx,1)
	  _M_assign(__ht,
  40b569:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
	  _M_rehash_policy = __ht._M_rehash_policy;
  40b56e:	48 89 44 1d 40       	mov    %rax,0x40(%rbp,%rbx,1)
  40b573:	48 8b 44 1d 30       	mov    0x30(%rbp,%rbx,1),%rax
	  _M_before_begin._M_nxt = nullptr;
  40b578:	48 c7 44 1d 30 00 00 	movq   $0x0,0x30(%rbp,%rbx,1)
  40b57f:	00 00 
	: _M_nodes(__nodes), _M_h(__h) { }
  40b581:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  40b588:	00 
  40b589:	48 b8 e0 d1 9b 3b 00 	movabs $0x3b9bd1e0,%rax
  40b590:	00 00 00 
  40b593:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
	  _M_assign(__ht,
  40b597:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40b59c:	48 89 bc 24 b8 02 00 	mov    %rdi,0x2b8(%rsp)
  40b5a3:	00 
  40b5a4:	48 89 84 24 80 02 00 	mov    %rax,0x280(%rsp)
  40b5ab:	00 
  40b5ac:	48 b8 20 db de ff ff 	movabs $0xffffffffffdedb20,%rax
  40b5b3:	ff ff ff 
  40b5b6:	48 01 d8             	add    %rbx,%rax
  40b5b9:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  40b5bb:	48 b8 10 d2 9b 3b 00 	movabs $0x3b9bd210,%rax
  40b5c2:	00 00 00 
  40b5c5:	48 01 d8             	add    %rbx,%rax
  40b5c8:	49 39 c4             	cmp    %rax,%r12
  40b5cb:	74 1a                	je     40b5e7 <main+0x1867>
  40b5cd:	4d 85 e4             	test   %r12,%r12
  40b5d0:	74 15                	je     40b5e7 <main+0x1867>
      { ::operator delete(__p); }
  40b5d2:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40b5d9:	ff ff ff 
  40b5dc:	4c 89 e7             	mov    %r12,%rdi
  40b5df:	49 89 df             	mov    %rbx,%r15
  40b5e2:	48 01 d8             	add    %rbx,%rax
  40b5e5:	ff d0                	callq  *%rax
      { _M_h._M_deallocate_nodes(_M_nodes); }
  40b5e7:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40b5ee:	00 
  40b5ef:	eb 18                	jmp    40b609 <main+0x1889>
  40b5f1:	4c 8b 27             	mov    (%rdi),%r12
  40b5f4:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40b5fb:	ff ff ff 
  40b5fe:	49 89 df             	mov    %rbx,%r15
  40b601:	48 01 d8             	add    %rbx,%rax
  40b604:	ff d0                	callq  *%rax
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
    {
      while (__n)
	{
	  __node_type* __tmp = __n;
	  __n = __n->_M_next();
  40b606:	4c 89 e7             	mov    %r12,%rdi
      while (__n)
  40b609:	48 85 ff             	test   %rdi,%rdi
  40b60c:	75 e3                	jne    40b5f1 <main+0x1871>
		m_obstacles = obstacles;
		m_goals = goals;
  40b60e:	48 b8 b0 bc de ff ff 	movabs $0xffffffffffdebcb0,%rax
  40b615:	ff ff ff 
  40b618:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40b61d:	48 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%rdi
  40b622:	48 01 d8             	add    %rbx,%rax
  40b625:	ff d0                	callq  *%rax
   */
  template<class _Value,
	   class _Hash = hash<_Value>,
	   class _Pred = std::equal_to<_Value>,
	   class _Alloc = std::allocator<_Value> >
    class unordered_set
  40b627:	48 b8 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rax
  40b62e:	ff ff ff 
  40b631:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b636:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40b63b:	48 01 d8             	add    %rbx,%rax
  40b63e:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40b640:	48 8b bc 24 e0 02 00 	mov    0x2e0(%rsp),%rdi
  40b647:	00 
	if (__p)
  40b648:	48 85 ff             	test   %rdi,%rdi
  40b64b:	74 12                	je     40b65f <main+0x18df>
  40b64d:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40b654:	ff ff ff 
  40b657:	49 89 df             	mov    %rbx,%r15
  40b65a:	48 01 d8             	add    %rbx,%rax
  40b65d:	ff d0                	callq  *%rax
	g_w = w;
  40b65f:	f3 0f 10 84 24 b4 00 	movss  0xb4(%rsp),%xmm0
  40b666:	00 00 
  40b668:	48 b8 80 d1 9b 3b 00 	movabs $0x3b9bd180,%rax
  40b66f:	00 00 00 

class Timer {
 public:
  Timer()
      : start_(std::chrono::high_resolution_clock::now()),
        end_(std::chrono::high_resolution_clock::now()) {}
  40b672:	49 bd 30 e4 dd ff ff 	movabs $0xffffffffffdde430,%r13
  40b679:	ff ff ff 
  40b67c:	49 89 df             	mov    %rbx,%r15
  40b67f:	f3 0f 11 04 03       	movss  %xmm0,(%rbx,%rax,1)
  40b684:	49 8d 6c 1d 00       	lea    0x0(%r13,%rbx,1),%rbp
  40b689:	45 31 e4             	xor    %r12d,%r12d
  40b68c:	ff d5                	callq  *%rbp
  40b68e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40b693:	ff d5                	callq  *%rbp
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40b695:	48 bd c0 50 9c 3b 00 	movabs $0x3b9c50c0,%rbp
  40b69c:	00 00 00 
	                             __x);
	    ++this->_M_impl._M_finish;
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
  40b69f:	48 b8 30 f0 de ff ff 	movabs $0xffffffffffdef030,%rax
  40b6a6:	ff ff ff 
  40b6a9:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  40b6b0:	00 
  40b6b1:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  40b6b8:	00 
  40b6b9:	4c 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%r15
  40b6be:	4c 8d 34 03          	lea    (%rbx,%rax,1),%r14
  40b6c2:	eb 35                	jmp    40b6f9 <main+0x1979>
      { return *(this->_M_impl._M_start + __n); }
  40b6c4:	49 6b f4 0c          	imul   $0xc,%r12,%rsi
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40b6c8:	48 8b 44 1d 08       	mov    0x8(%rbp,%rbx,1),%rax
      { return *(this->_M_impl._M_start + __n); }
  40b6cd:	48 01 d6             	add    %rdx,%rsi
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40b6d0:	48 3b 44 1d 10       	cmp    0x10(%rbp,%rbx,1),%rax
  40b6d5:	0f 84 b3 12 00 00    	je     40c98e <main+0x2c0e>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  40b6db:	48 85 c0             	test   %rax,%rax
  40b6de:	74 0c                	je     40b6ec <main+0x196c>
  40b6e0:	48 8b 3e             	mov    (%rsi),%rdi
  40b6e3:	48 89 38             	mov    %rdi,(%rax)
  40b6e6:	8b 76 08             	mov    0x8(%rsi),%esi
  40b6e9:	89 70 08             	mov    %esi,0x8(%rax)
	    ++this->_M_impl._M_finish;
  40b6ec:	48 83 c0 0c          	add    $0xc,%rax
  40b6f0:	48 89 44 1d 08       	mov    %rax,0x8(%rbp,%rbx,1)
  40b6f5:	49 83 c4 01          	add    $0x1,%r12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  40b6f9:	48 89 c8             	mov    %rcx,%rax
  40b6fc:	48 be ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rsi
  40b703:	aa aa aa 
  40b706:	48 29 d0             	sub    %rdx,%rax
  40b709:	48 c1 f8 02          	sar    $0x2,%rax
  40b70d:	48 0f af c6          	imul   %rsi,%rax
	for (int i = 0; i < startStates.size(); ++i)
  40b711:	4c 39 e0             	cmp    %r12,%rax
  40b714:	77 ae                	ja     40b6c4 <main+0x1944>
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  40b716:	48 b8 6c 7f df ff ff 	movabs $0xffffffffffdf7f6c,%rax
  40b71d:	ff ff ff 
	g_isNoConflict = false;
  40b720:	48 bd 40 d2 9b 3b 00 	movabs $0x3b9bd240,%rbp
  40b727:	00 00 00 
  40b72a:	48 ba f0 e3 dd ff ff 	movabs $0xffffffffffdde3f0,%rdx
  40b731:	ff ff ff 
  40b734:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b738:	c6 44 1d 00 00       	movb   $0x0,0x0(%rbp,%rbx,1)
  40b73d:	bf 01 00 00 00       	mov    $0x1,%edi
  40b742:	49 89 df             	mov    %rbx,%r15
  40b745:	31 c0                	xor    %eax,%eax
  40b747:	48 01 da             	add    %rbx,%rdx
  40b74a:	ff d2                	callq  *%rdx
	search(0);
  40b74c:	48 b8 20 7b de ff ff 	movabs $0xffffffffffde7b20,%rax
  40b753:	ff ff ff 
  40b756:	31 ff                	xor    %edi,%edi
  40b758:	48 01 d8             	add    %rbx,%rax
  40b75b:	ff d0                	callq  *%rax
    // Run a spiller that doesn't delete any tasks
    // 1) to avoid unused function warnings
    // 2) to pre-populate the global offset table with
    //    functions so it isn't aborted.
    //    (e.g. new[], delete[], swarm::info if used)
    swarm::spiller(0, 0);
  40b75d:	48 b8 20 91 de ff ff 	movabs $0xffffffffffde9120,%rax
  40b764:	ff ff ff 
  40b767:	31 f6                	xor    %esi,%esi
  40b769:	31 ff                	xor    %edi,%edi
  40b76b:	4c 8d 24 03          	lea    (%rbx,%rax,1),%r12
  40b76f:	41 ff d4             	callq  *%r12
    COMPILER_BARRIER();
}

static inline void sim_magic_op_3(uint64_t op, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  40b772:	48 b8 30 28 de ff ff 	movabs $0xffffffffffde2830,%rax
  40b779:	ff ff ff 
  40b77c:	b9 03 08 00 00       	mov    $0x803,%ecx
  40b781:	4c 89 e7             	mov    %r12,%rdi
  40b784:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40b788:	48 b8 f0 32 de ff ff 	movabs $0xffffffffffde32f0,%rax
  40b78f:	ff ff ff 
  40b792:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b796:	48 87 c9             	xchg   %rcx,%rcx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  40b799:	48 b8 e0 31 de ff ff 	movabs $0xffffffffffde31e0,%rax
  40b7a0:	ff ff ff 
  40b7a3:	b9 04 08 00 00       	mov    $0x804,%ecx
  40b7a8:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b7ac:	48 b8 b0 8f de ff ff 	movabs $0xffffffffffde8fb0,%rax
  40b7b3:	ff ff ff 
  40b7b6:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  40b7ba:	48 87 c9             	xchg   %rcx,%rcx

namespace swarm {

static inline void run() {
    setup_task_handlers();
    launch_threads(pls_worker);
  40b7bd:	48 b8 10 2e de ff ff 	movabs $0xffffffffffde2e10,%rax
  40b7c4:	ff ff ff 
  40b7c7:	48 01 d8             	add    %rbx,%rax
  40b7ca:	ff d0                	callq  *%rax
	bool success = g_isNoConflict;
  40b7cc:	0f b6 6c 1d 00       	movzbl 0x0(%rbp,%rbx,1),%ebp

  void reset() { start_ = std::chrono::high_resolution_clock::now(); }

  void stop() { end_ = std::chrono::high_resolution_clock::now(); }
  40b7d1:	49 01 dd             	add    %rbx,%r13
  40b7d4:	41 ff d5             	callq  *%r13
  40b7d7:	49 89 c6             	mov    %rax,%r14
  if (success) {
  40b7da:	40 84 ed             	test   %bpl,%bpl
  40b7dd:	0f 84 45 15 00 00    	je     40cd28 <main+0x2fa8>
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
  40b7e3:	48 b8 73 7f df ff ff 	movabs $0xffffffffffdf7f73,%rax
  40b7ea:	ff ff ff 
  40b7ed:	48 bd 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rbp
  40b7f4:	ff ff ff 
  40b7f7:	ba 15 00 00 00       	mov    $0x15,%edx
  40b7fc:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b800:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  40b807:	ff ff ff 
  40b80a:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  40b80e:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b813:	ff d0                	callq  *%rax
	return __pf(*this);
  40b815:	48 b8 10 31 de ff ff 	movabs $0xffffffffffde3110,%rax
  40b81c:	ff ff ff 
  40b81f:	48 01 d8             	add    %rbx,%rax
  40b822:	ff d0                	callq  *%rax
  40b824:	48 ba 90 d8 9b 3b 00 	movabs $0x3b9bd890,%rdx
  40b82b:	00 00 00 
  40b82e:	31 c0                	xor    %eax,%eax
  40b830:	45 31 e4             	xor    %r12d,%r12d
  40b833:	45 31 ed             	xor    %r13d,%r13d
			cost += g_solution[i].cost;
  40b836:	48 01 da             	add    %rbx,%rdx
  40b839:	8b 0c 10             	mov    (%rax,%rdx,1),%ecx
  40b83c:	41 01 cd             	add    %ecx,%r13d
  40b83f:	41 39 cc             	cmp    %ecx,%r12d
  40b842:	44 0f 4c e1          	cmovl  %ecx,%r12d
  40b846:	48 05 50 06 00 00    	add    $0x650,%rax
    for (int i = 0; i < ROBOT_NUMS; ++i) {
  40b84c:	48 3d 40 7e 00 00    	cmp    $0x7e40,%rax
  40b852:	75 e5                	jne    40b839 <main+0x1ab9>
    std::ofstream out(outputFile);
  40b854:	48 b8 20 eb dd ff ff 	movabs $0xffffffffffddeb20,%rax
  40b85b:	ff ff ff 
  40b85e:	ba 30 00 00 00       	mov    $0x30,%edx
  40b863:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  40b868:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b86d:	49 89 df             	mov    %rbx,%r15
  40b870:	48 01 d8             	add    %rbx,%rax
  40b873:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b875:	48 b8 89 7f df ff ff 	movabs $0xffffffffffdf7f89,%rax
  40b87c:	ff ff ff 
  40b87f:	ba 0b 00 00 00       	mov    $0xb,%edx
  40b884:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b889:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b88d:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b892:	ff d0                	callq  *%rax
	return __pf(*this);
  40b894:	48 b8 70 e5 dd ff ff 	movabs $0xffffffffffdde570,%rax
  40b89b:	ff ff ff 
  40b89e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b8a3:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  40b8a8:	48 01 d8             	add    %rbx,%rax
  40b8ab:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b8ad:	48 b8 95 7f df ff ff 	movabs $0xffffffffffdf7f95,%rax
  40b8b4:	ff ff ff 
  40b8b7:	ba 08 00 00 00       	mov    $0x8,%edx
  40b8bc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b8c1:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b8c5:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b8ca:	ff d0                	callq  *%rax
    out << "  cost: " << cost << std::endl;
  40b8cc:	44 89 ee             	mov    %r13d,%esi
  40b8cf:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  40b8d4:	48 ba 90 ea dd ff ff 	movabs $0xffffffffffddea90,%rdx
  40b8db:	ff ff ff 
  40b8de:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  40b8e3:	48 8d 04 1a          	lea    (%rdx,%rbx,1),%rax
  40b8e7:	4c 89 ef             	mov    %r13,%rdi
  40b8ea:	ff d0                	callq  *%rax
	return __pf(*this);
  40b8ec:	48 89 c7             	mov    %rax,%rdi
  40b8ef:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40b8f4:	48 01 d8             	add    %rbx,%rax
  40b8f7:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b8f9:	48 b8 9e 7f df ff ff 	movabs $0xffffffffffdf7f9e,%rax
  40b900:	ff ff ff 
  40b903:	ba 0c 00 00 00       	mov    $0xc,%edx
  40b908:	4c 89 ef             	mov    %r13,%rdi
  40b90b:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b90f:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b914:	ff d0                	callq  *%rax
    out << "  makespan: " << makespan << std::endl;
  40b916:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  40b91b:	44 89 e6             	mov    %r12d,%esi
  40b91e:	4c 89 ef             	mov    %r13,%rdi
  40b921:	48 8d 04 1a          	lea    (%rdx,%rbx,1),%rax
  40b925:	ff d0                	callq  *%rax
	return __pf(*this);
  40b927:	4c 8b 64 24 68       	mov    0x68(%rsp),%r12
  40b92c:	48 89 c7             	mov    %rax,%rdi
  40b92f:	4c 89 e0             	mov    %r12,%rax
  40b932:	48 01 d8             	add    %rbx,%rax
  40b935:	ff d0                	callq  *%rax
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
  40b937:	4c 2b 74 24 08       	sub    0x8(%rsp),%r14
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
  40b93c:	66 0f ef c0          	pxor   %xmm0,%xmm0
  40b940:	48 b8 30 93 df ff ff 	movabs $0xffffffffffdf9330,%rax
  40b947:	ff ff ff 
	__ostream_insert(__out, __s,
  40b94a:	ba 0b 00 00 00       	mov    $0xb,%edx
  40b94f:	4c 89 ef             	mov    %r13,%rdi
  40b952:	f2 49 0f 2a c6       	cvtsi2sd %r14,%xmm0
  40b957:	f2 0f 5e 04 18       	divsd  (%rax,%rbx,1),%xmm0
  40b95c:	48 b8 ab 7f df ff ff 	movabs $0xffffffffffdf7fab,%rax
  40b963:	ff ff ff 
  40b966:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b96a:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b96f:	f2 0f 11 44 24 08    	movsd  %xmm0,0x8(%rsp)
  40b975:	ff d0                	callq  *%rax
      { return _M_insert(__f); }
  40b977:	48 b8 00 ea dd ff ff 	movabs $0xffffffffffddea00,%rax
  40b97e:	ff ff ff 
  40b981:	f2 0f 10 44 24 08    	movsd  0x8(%rsp),%xmm0
  40b987:	4c 89 ef             	mov    %r13,%rdi
  40b98a:	48 01 d8             	add    %rbx,%rax
  40b98d:	ff d0                	callq  *%rax
	return __pf(*this);
  40b98f:	48 89 c7             	mov    %rax,%rdi
  40b992:	4c 89 e0             	mov    %r12,%rax
  40b995:	48 01 d8             	add    %rbx,%rax
  40b998:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b99a:	48 b8 b7 7f df ff ff 	movabs $0xffffffffffdf7fb7,%rax
  40b9a1:	ff ff ff 
  40b9a4:	ba 09 00 00 00       	mov    $0x9,%edx
  40b9a9:	4c 89 ef             	mov    %r13,%rdi
  40b9ac:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b9b0:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b9b5:	ff d0                	callq  *%rax
	return __pf(*this);
  40b9b7:	4c 89 e0             	mov    %r12,%rax
  40b9ba:	4c 89 ef             	mov    %r13,%rdi
  40b9bd:	48 01 d8             	add    %rbx,%rax
  40b9c0:	ff d0                	callq  *%rax
  40b9c2:	48 b8 84 d2 9b 3b 00 	movabs $0x3b9bd284,%rax
  40b9c9:	00 00 00 
  40b9cc:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  40b9d3:	00 00 
  40b9d5:	48 01 d8             	add    %rbx,%rax
  40b9d8:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  40b9dd:	48 b8 c1 7f df ff ff 	movabs $0xffffffffffdf7fc1,%rax
  40b9e4:	ff ff ff 
  40b9e7:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40b9ee:	00 
	__ostream_insert(__out, __s,
  40b9ef:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b9f4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
  40b9f9:	48 b8 10 e4 dd ff ff 	movabs $0xffffffffffdde410,%rax
  40ba00:	ff ff ff 
  40ba03:	48 01 d8             	add    %rbx,%rax
  40ba06:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
	__ostream_insert(__out, __s,
  40ba0b:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40ba12:	00 
  40ba13:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40ba18:	ba 07 00 00 00       	mov    $0x7,%edx
  40ba1d:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  40ba22:	49 89 df             	mov    %rbx,%r15
  40ba25:	48 8d 34 18          	lea    (%rax,%rbx,1),%rsi
  40ba29:	48 89 ef             	mov    %rbp,%rdi
  40ba2c:	4c 89 f0             	mov    %r14,%rax
  40ba2f:	ff d0                	callq  *%rax
      { return _M_insert(__n); }
  40ba31:	48 b8 90 e6 dd ff ff 	movabs $0xffffffffffdde690,%rax
  40ba38:	ff ff ff 
  40ba3b:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  40ba40:	48 89 ef             	mov    %rbp,%rdi
  40ba43:	48 01 d8             	add    %rbx,%rax
  40ba46:	ff d0                	callq  *%rax
  40ba48:	48 89 c5             	mov    %rax,%rbp
	__ostream_insert(__out, __s,
  40ba4b:	48 b8 bf 7f df ff ff 	movabs $0xffffffffffdf7fbf,%rax
  40ba52:	ff ff ff 
  40ba55:	ba 01 00 00 00       	mov    $0x1,%edx
  40ba5a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40ba5e:	48 89 ef             	mov    %rbp,%rdi
  40ba61:	4c 89 f0             	mov    %r14,%rax
  40ba64:	ff d0                	callq  *%rax
	return __pf(*this);
  40ba66:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40ba6b:	48 89 ef             	mov    %rbp,%rdi
  40ba6e:	48 01 d8             	add    %rbx,%rax
  40ba71:	ff d0                	callq  *%rax
      for (int b = 0; b < g_solution[a].states_size; ++b) {
  40ba73:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  40ba78:	48 83 b8 fc 03 00 00 	cmpq   $0x0,0x3fc(%rax)
  40ba7f:	00 
  40ba80:	0f 84 96 11 00 00    	je     40cc1c <main+0x2e9c>
  40ba86:	48 b8 c9 7f df ff ff 	movabs $0xffffffffffdf7fc9,%rax
  40ba8d:	ff ff ff 
  40ba90:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
  40ba95:	48 c7 44 24 28 01 00 	movq   $0x1,0x28(%rsp)
  40ba9c:	00 00 
  40ba9e:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40baa3:	48 b8 60 7f de ff ff 	movabs $0xffffffffffde7f60,%rax
  40baaa:	ff ff ff 
  40baad:	48 01 d8             	add    %rbx,%rax
  40bab0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40bab5:	e9 39 01 00 00       	jmpq   40bbf3 <main+0x1e73>
  40baba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40bac0:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    { return flush(__os.put(__os.widen('\n'))); }
  40bac4:	4c 89 e7             	mov    %r12,%rdi
  40bac7:	49 89 df             	mov    %rbx,%r15
  40baca:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  40bacf:	ff d0                	callq  *%rax
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
  40bad1:	48 bd a0 e6 dd ff ff 	movabs $0xffffffffffdde6a0,%rbp
  40bad8:	ff ff ff 
  40badb:	48 89 c7             	mov    %rax,%rdi
  40bade:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40bae3:	ff d0                	callq  *%rax
  40bae5:	49 89 c4             	mov    %rax,%r12
	__ostream_insert(__out, __s,
  40bae8:	48 b8 d3 7f df ff ff 	movabs $0xffffffffffdf7fd3,%rax
  40baef:	ff ff ff 
  40baf2:	ba 09 00 00 00       	mov    $0x9,%edx
  40baf7:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40bafb:	4c 89 e7             	mov    %r12,%rdi
  40bafe:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40bb03:	ff d0                	callq  *%rax
            << "      y: " << g_solution[a].states[b].state.y << std::endl
  40bb05:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40bb0a:	44 89 ee             	mov    %r13d,%esi
  40bb0d:	4c 89 e7             	mov    %r12,%rdi
  40bb10:	48 01 d8             	add    %rbx,%rax
  40bb13:	ff d0                	callq  *%rax
  40bb15:	49 89 c5             	mov    %rax,%r13
    { return flush(__os.put(__os.widen('\n'))); }
  40bb18:	48 8b 00             	mov    (%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40bb1b:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40bb1f:	4d 8b a4 05 f0 00 00 	mov    0xf0(%r13,%rax,1),%r12
  40bb26:	00 
      if (!__f)
  40bb27:	4d 85 e4             	test   %r12,%r12
  40bb2a:	0f 84 ca 11 00 00    	je     40ccfa <main+0x2f7a>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
  40bb30:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
  40bb36:	0f 84 a6 10 00 00    	je     40cbe2 <main+0x2e62>
  40bb3c:	41 0f be 74 24 43    	movsbl 0x43(%r12),%esi
  40bb42:	4c 89 ef             	mov    %r13,%rdi
  40bb45:	49 89 df             	mov    %rbx,%r15
  40bb48:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  40bb4d:	ff d0                	callq  *%rax
    { return __os.flush(); }
  40bb4f:	48 89 c7             	mov    %rax,%rdi
  40bb52:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40bb57:	ff d0                	callq  *%rax
  40bb59:	49 89 c4             	mov    %rax,%r12
	__ostream_insert(__out, __s,
  40bb5c:	48 b8 dd 7f df ff ff 	movabs $0xffffffffffdf7fdd,%rax
  40bb63:	ff ff ff 
  40bb66:	ba 09 00 00 00       	mov    $0x9,%edx
  40bb6b:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40bb6f:	4c 89 e7             	mov    %r12,%rdi
  40bb72:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40bb77:	ff d0                	callq  *%rax
            << "      t: " << g_solution[a].states[b].cost << std::endl;
  40bb79:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40bb7e:	8b 74 24 30          	mov    0x30(%rsp),%esi
  40bb82:	4c 89 e7             	mov    %r12,%rdi
  40bb85:	48 01 d8             	add    %rbx,%rax
  40bb88:	ff d0                	callq  *%rax
  40bb8a:	49 89 c5             	mov    %rax,%r13
    { return flush(__os.put(__os.widen('\n'))); }
  40bb8d:	48 8b 00             	mov    (%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40bb90:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40bb94:	4d 8b a4 05 f0 00 00 	mov    0xf0(%r13,%rax,1),%r12
  40bb9b:	00 
      if (!__f)
  40bb9c:	4d 85 e4             	test   %r12,%r12
  40bb9f:	0f 84 46 11 00 00    	je     40cceb <main+0x2f6b>
  40bba5:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
  40bbab:	0f 84 f7 0f 00 00    	je     40cba8 <main+0x2e28>
  40bbb1:	41 0f be 74 24 43    	movsbl 0x43(%r12),%esi
  40bbb7:	4c 89 ef             	mov    %r13,%rdi
  40bbba:	49 89 df             	mov    %rbx,%r15
  40bbbd:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  40bbc2:	ff d0                	callq  *%rax
    { return __os.flush(); }
  40bbc4:	48 89 c7             	mov    %rax,%rdi
  40bbc7:	48 01 dd             	add    %rbx,%rbp
  40bbca:	ff d5                	callq  *%rbp
  40bbcc:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
      for (int b = 0; b < g_solution[a].states_size; ++b) {
  40bbd1:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  40bbd6:	49 83 c6 10          	add    $0x10,%r14
  40bbda:	48 89 f0             	mov    %rsi,%rax
  40bbdd:	48 83 c0 01          	add    $0x1,%rax
  40bbe1:	48 39 b2 fc 03 00 00 	cmp    %rsi,0x3fc(%rdx)
  40bbe8:	0f 86 2e 10 00 00    	jbe    40cc1c <main+0x2e9c>
  40bbee:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
            << "      t: " << g_solution[a].states[b].cost << std::endl;
  40bbf3:	41 8b 46 08          	mov    0x8(%r14),%eax
	__ostream_insert(__out, __s,
  40bbf7:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  40bbfc:	ba 09 00 00 00       	mov    $0x9,%edx
            << "      y: " << g_solution[a].states[b].state.y << std::endl
  40bc01:	45 8b 6e 04          	mov    0x4(%r14),%r13d
        out << "    - x: " << g_solution[a].states[b].state.x << std::endl
  40bc05:	41 8b 2e             	mov    (%r14),%ebp
  40bc08:	49 89 df             	mov    %rbx,%r15
            << "      t: " << g_solution[a].states[b].cost << std::endl;
  40bc0b:	89 44 24 30          	mov    %eax,0x30(%rsp)
  40bc0f:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  40bc14:	4c 89 e7             	mov    %r12,%rdi
  40bc17:	48 8d 34 18          	lea    (%rax,%rbx,1),%rsi
  40bc1b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40bc20:	ff d0                	callq  *%rax
        out << "    - x: " << g_solution[a].states[b].state.x << std::endl
  40bc22:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40bc27:	89 ee                	mov    %ebp,%esi
  40bc29:	4c 89 e7             	mov    %r12,%rdi
  40bc2c:	48 01 d8             	add    %rbx,%rax
  40bc2f:	ff d0                	callq  *%rax
  40bc31:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
  40bc34:	48 8b 00             	mov    (%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40bc37:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40bc3b:	49 8b ac 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%rbp
  40bc42:	00 
      if (!__f)
  40bc43:	48 85 ed             	test   %rbp,%rbp
  40bc46:	0f 84 90 10 00 00    	je     40ccdc <main+0x2f5c>
  40bc4c:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
  40bc50:	0f 85 6a fe ff ff    	jne    40bac0 <main+0x1d40>
	  return _M_widen[static_cast<unsigned char>(__c)];
	this->_M_widen_init();
  40bc56:	48 b8 30 e8 dd ff ff 	movabs $0xffffffffffdde830,%rax
  40bc5d:	ff ff ff 
  40bc60:	48 89 ef             	mov    %rbp,%rdi
  40bc63:	49 89 df             	mov    %rbx,%r15
  40bc66:	48 01 d8             	add    %rbx,%rax
  40bc69:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40bc6b:	48 8b 45 00          	mov    0x0(%rbp),%rax
  40bc6f:	be 0a 00 00 00       	mov    $0xa,%esi
  40bc74:	48 8b 40 30          	mov    0x30(%rax),%rax
  40bc78:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  40bc7d:	0f 84 41 fe ff ff    	je     40bac4 <main+0x1d44>
  40bc83:	48 89 ef             	mov    %rbp,%rdi
  40bc86:	ff d0                	callq  *%rax
  40bc88:	0f be f0             	movsbl %al,%esi
  40bc8b:	e9 34 fe ff ff       	jmpq   40bac4 <main+0x1d44>
  40bc90:	4c 8b a8 88 00 00 00 	mov    0x88(%rax),%r13
      { return const_iterator(&this->_M_impl._M_header); }
  40bc97:	48 83 c0 78          	add    $0x78,%rax
  40bc9b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
      return NULL;
    case NodeType::Scalar:
      throw BadSubscript();
  }

  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40bca0:	49 39 c5             	cmp    %rax,%r13
  40bca3:	0f 84 35 f6 ff ff    	je     40b2de <main+0x155e>
  40bca9:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40bcb0:	ff ff ff 
  40bcb3:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  40bcb7:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40bcbc:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40bcc1:	e9 99 00 00 00       	jmpq   40bd5f <main+0x1fdf>
template <>
struct convert<std::string> {
  static Node encode(const std::string& rhs) { return Node(rhs); }

  static bool decode(const Node& node, std::string& rhs) {
    if (!node.IsScalar())
  40bcc6:	83 78 04 02          	cmpl   $0x2,0x4(%rax)
  40bcca:	0f 84 3d 01 00 00    	je     40be0d <main+0x208d>
      return false;
  40bcd0:	31 ed                	xor    %ebp,%ebp
  40bcd2:	4d 85 e4             	test   %r12,%r12
  40bcd5:	0f 84 f5 00 00 00    	je     40bdd0 <main+0x2050>
  40bcdb:	4c 89 e7             	mov    %r12,%rdi
  40bcde:	41 ff d6             	callq  *%r14
  40bce1:	4c 89 e7             	mov    %r12,%rdi
  40bce4:	41 ff d6             	callq  *%r14
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  40bce7:	40 84 ed             	test   %bpl,%bpl
  40bcea:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40bcf1:	00 
  40bcf2:	74 18                	je     40bd0c <main+0x1f8c>
  40bcf4:	48 8b 94 24 28 02 00 	mov    0x228(%rsp),%rdx
  40bcfb:	00 
  return false;
  40bcfc:	31 ed                	xor    %ebp,%ebp
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40bcfe:	48 3b 94 24 08 02 00 	cmp    0x208(%rsp),%rdx
  40bd05:	00 
  40bd06:	0f 84 35 01 00 00    	je     40be41 <main+0x20c1>
	if (!_M_is_local())
  40bd0c:	48 3b 4c 24 28       	cmp    0x28(%rsp),%rcx
  40bd11:	74 15                	je     40bd28 <main+0x1fa8>
      { ::operator delete(__p); }
  40bd13:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40bd1a:	ff ff ff 
  40bd1d:	48 89 cf             	mov    %rcx,%rdi
  40bd20:	49 89 df             	mov    %rbx,%r15
  40bd23:	48 01 d8             	add    %rbx,%rax
  40bd26:	ff d0                	callq  *%rax
  40bd28:	4d 85 e4             	test   %r12,%r12
  40bd2b:	74 06                	je     40bd33 <main+0x1fb3>
  40bd2d:	4c 89 e7             	mov    %r12,%rdi
  40bd30:	41 ff d6             	callq  *%r14
    if (it->first->equals(key, pMemory)) {
  40bd33:	40 84 ed             	test   %bpl,%bpl
  40bd36:	0f 85 f3 08 00 00    	jne    40c62f <main+0x28af>
	_M_node = _Rb_tree_increment(_M_node);
  40bd3c:	48 b8 40 e8 dd ff ff 	movabs $0xffffffffffdde840,%rax
  40bd43:	ff ff ff 
  40bd46:	4c 89 ef             	mov    %r13,%rdi
  40bd49:	49 89 df             	mov    %rbx,%r15
  40bd4c:	48 01 d8             	add    %rbx,%rax
  40bd4f:	ff d0                	callq  *%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40bd51:	48 3b 44 24 30       	cmp    0x30(%rsp),%rax
  40bd56:	49 89 c5             	mov    %rax,%r13
  40bd59:	0f 84 7f f5 ff ff    	je     40b2de <main+0x155e>
        if( pi_ != 0 ) pi_->add_ref_copy();
  40bd5f:	4d 85 e4             	test   %r12,%r12
  40bd62:	74 79                	je     40bddd <main+0x205d>
  40bd64:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  40bd69:	f0 83 06 01          	lock addl $0x1,(%rsi)
    if (it->first->equals(key, pMemory)) {
  40bd6d:	49 8b 45 20          	mov    0x20(%r13),%rax
	: allocator_type(__a), _M_p(__dat) { }
  40bd71:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
      { _M_string_length = __length; }
  40bd76:	48 c7 84 24 28 02 00 	movq   $0x0,0x228(%rsp)
  40bd7d:	00 00 00 00 00 
  40bd82:	c6 84 24 30 02 00 00 	movb   $0x0,0x230(%rsp)
  40bd89:	00 
	: allocator_type(__a), _M_p(__dat) { }
  40bd8a:	48 89 94 24 20 02 00 	mov    %rdx,0x220(%rsp)
  40bd91:	00 
  40bd92:	f0 83 06 01          	lock addl $0x1,(%rsi)
  40bd96:	f0 83 06 01          	lock addl $0x1,(%rsi)
  return m_pNode ? m_pNode->type() : NodeType::Null;
  40bd9a:	48 85 c0             	test   %rax,%rax
  40bd9d:	0f 84 02 15 00 00    	je     40d2a5 <main+0x3525>
  40bda3:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  40bda6:	48 85 c0             	test   %rax,%rax
  40bda9:	0f 84 57 0c 00 00    	je     40ca06 <main+0x2c86>
  40bdaf:	48 8b 00             	mov    (%rax),%rax
  40bdb2:	48 85 c0             	test   %rax,%rax
  40bdb5:	0f 84 3c 0c 00 00    	je     40c9f7 <main+0x2c77>
  40bdbb:	0f b6 28             	movzbl (%rax),%ebp
  void set_scalar(const std::string& scalar);
  void set_style(EmitterStyle::value style);

  bool is_defined() const { return m_isDefined; }
  NodeType::value type() const {
    return m_isDefined ? m_type : NodeType::Undefined;
  40bdbe:	40 84 ed             	test   %bpl,%bpl
  40bdc1:	0f 85 ff fe ff ff    	jne    40bcc6 <main+0x1f46>
        if( pi_ != 0 ) pi_->release();
  40bdc7:	4d 85 e4             	test   %r12,%r12
  40bdca:	0f 85 0b ff ff ff    	jne    40bcdb <main+0x1f5b>
  40bdd0:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40bdd7:	00 
  40bdd8:	e9 2f ff ff ff       	jmpq   40bd0c <main+0x1f8c>
  40bddd:	49 8b 45 20          	mov    0x20(%r13),%rax
  40bde1:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
      { _M_string_length = __length; }
  40bde6:	48 c7 84 24 28 02 00 	movq   $0x0,0x228(%rsp)
  40bded:	00 00 00 00 00 
  40bdf2:	c6 84 24 30 02 00 00 	movb   $0x0,0x230(%rsp)
  40bdf9:	00 
  40bdfa:	48 85 c0             	test   %rax,%rax
	: allocator_type(__a), _M_p(__dat) { }
  40bdfd:	48 89 b4 24 20 02 00 	mov    %rsi,0x220(%rsp)
  40be04:	00 
  40be05:	0f 84 31 ff ff ff    	je     40bd3c <main+0x1fbc>
  40be0b:	eb 96                	jmp    40bda3 <main+0x2023>
  }
  const std::string& scalar() const { return m_scalar; }
  40be0d:	48 8d 70 30          	lea    0x30(%rax),%rsi
	this->_M_assign(__str);
  40be11:	48 b8 b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%rax
  40be18:	ff ff ff 
  40be1b:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  40be22:	00 
  40be23:	49 89 df             	mov    %rbx,%r15
  40be26:	48 01 d8             	add    %rbx,%rax
  40be29:	ff d0                	callq  *%rax
  40be2b:	4d 85 e4             	test   %r12,%r12
  40be2e:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40be35:	00 
  40be36:	0f 85 9f fe ff ff    	jne    40bcdb <main+0x1f5b>
  40be3c:	e9 b3 fe ff ff       	jmpq   40bcf4 <main+0x1f74>
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
  40be41:	48 85 d2             	test   %rdx,%rdx
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40be44:	0f b6 6c 24 58       	movzbl 0x58(%rsp),%ebp
  40be49:	0f 84 bd fe ff ff    	je     40bd0c <main+0x1f8c>
	  return 0;
	return __builtin_memcmp(__s1, __s2, __n);
  40be4f:	48 b8 60 e5 dd ff ff 	movabs $0xffffffffffdde560,%rax
  40be56:	ff ff ff 
  40be59:	48 89 cf             	mov    %rcx,%rdi
  40be5c:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  40be63:	00 
  40be64:	48 01 d8             	add    %rbx,%rax
  40be67:	48 8b b4 24 00 02 00 	mov    0x200(%rsp),%rsi
  40be6e:	00 
  40be6f:	49 89 df             	mov    %rbx,%r15
  40be72:	ff d0                	callq  *%rax
  40be74:	85 c0                	test   %eax,%eax
  40be76:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  40be7d:	00 
  40be7e:	40 0f 94 c5          	sete   %bpl
  40be82:	e9 85 fe ff ff       	jmpq   40bd0c <main+0x1f8c>
      throw BadSubscript();
  40be87:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  40be8e:	ff ff ff 
  40be91:	bf 40 00 00 00       	mov    $0x40,%edi
  40be96:	49 89 df             	mov    %rbx,%r15
  40be99:	48 01 d8             	add    %rbx,%rax
  40be9c:	ff d0                	callq  *%rax
  40be9e:	48 89 c5             	mov    %rax,%rbp
  40bea1:	48 89 c7             	mov    %rax,%rdi
  40bea4:	48 b8 a0 af de ff ff 	movabs $0xffffffffffdeafa0,%rax
  40beab:	ff ff ff 
  40beae:	48 01 d8             	add    %rbx,%rax
  40beb1:	ff d0                	callq  *%rax
  40beb3:	48 b8 f0 94 de ff ff 	movabs $0xffffffffffde94f0,%rax
  40beba:	ff ff ff 
  40bebd:	48 89 ef             	mov    %rbp,%rdi
  40bec0:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40bec4:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  40becb:	ff ff ff 
  40bece:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40bed2:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  40bed9:	ff ff ff 
  40bedc:	48 01 d8             	add    %rbx,%rax
  40bedf:	ff d0                	callq  *%rax
      return NULL;
  40bee1:	31 ed                	xor    %ebp,%ebp
  40bee3:	4d 85 e4             	test   %r12,%r12
  40bee6:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40beed:	ff ff ff 
  40bef0:	74 10                	je     40bf02 <main+0x2182>
  40bef2:	4c 89 e7             	mov    %r12,%rdi
  40bef5:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  40bef9:	41 ff d5             	callq  *%r13
  40befc:	4c 89 e7             	mov    %r12,%rdi
  40beff:	41 ff d5             	callq  *%r13
	if (!_M_is_local())
  40bf02:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40bf07:	48 8b bc 24 40 02 00 	mov    0x240(%rsp),%rdi
  40bf0e:	00 
  40bf0f:	48 83 c0 10          	add    $0x10,%rax
  40bf13:	48 39 c7             	cmp    %rax,%rdi
  40bf16:	74 12                	je     40bf2a <main+0x21aa>
  40bf18:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40bf1f:	ff ff ff 
  40bf22:	49 89 df             	mov    %rbx,%r15
  40bf25:	48 01 d8             	add    %rbx,%rax
  40bf28:	ff d0                	callq  *%rax
  40bf2a:	4d 85 e4             	test   %r12,%r12
  40bf2d:	74 13                	je     40bf42 <main+0x21c2>
  40bf2f:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40bf36:	ff ff ff 
  40bf39:	4c 89 e7             	mov    %r12,%rdi
  40bf3c:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40bf40:	ff d0                	callq  *%rax
  if (!value) {
  40bf42:	48 85 ed             	test   %rbp,%rbp
  40bf45:	0f 84 60 07 00 00    	je     40c6ab <main+0x292b>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40bf4b:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40bf52:	00 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40bf53:	48 8b 94 24 b8 03 00 	mov    0x3b8(%rsp),%rdx
  40bf5a:	00 
        if( pi_ != 0 ) pi_->add_ref_copy();
  40bf5b:	48 85 ff             	test   %rdi,%rdi
  40bf5e:	0f 84 a2 06 00 00    	je     40c606 <main+0x2886>
  40bf64:	48 8d 47 08          	lea    0x8(%rdi),%rax
  40bf68:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  40bf6c:	c6 84 24 e0 01 00 00 	movb   $0x1,0x1e0(%rsp)
  40bf73:	01 
  40bf74:	48 89 94 24 e8 01 00 	mov    %rdx,0x1e8(%rsp)
  40bf7b:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40bf7c:	48 89 bc 24 f0 01 00 	mov    %rdi,0x1f0(%rsp)
  40bf83:	00 
  40bf84:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  40bf88:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40bf8f:	ff ff ff 
  40bf92:	48 89 ac 24 f8 01 00 	mov    %rbp,0x1f8(%rsp)
  40bf99:	00 
  40bf9a:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40bf9e:	ff d0                	callq  *%rax
    startStates.emplace_back(State(0, start[0].as<int>(), start[1].as<int>()));
  40bfa0:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
  40bfa5:	4c 8b 74 24 68       	mov    0x68(%rsp),%r14
  40bfaa:	48 8d ac 24 c0 01 00 	lea    0x1c0(%rsp),%rbp
  40bfb1:	00 
  40bfb2:	c7 84 24 40 02 00 00 	movl   $0x1,0x240(%rsp)
  40bfb9:	01 00 00 00 
  40bfbd:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  40bfc2:	48 89 ee             	mov    %rbp,%rsi
  40bfc5:	4c 89 f8             	mov    %r15,%rax
  40bfc8:	4c 89 f7             	mov    %r14,%rdi
  40bfcb:	48 01 d8             	add    %rbx,%rax
  40bfce:	ff d0                	callq  *%rax
  40bfd0:	4c 89 f7             	mov    %r14,%rdi
  40bfd3:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  40bfd8:	4c 89 f0             	mov    %r14,%rax
  40bfdb:	48 01 d8             	add    %rbx,%rax
  40bfde:	ff d0                	callq  *%rax
  40bfe0:	48 89 ee             	mov    %rbp,%rsi
  40bfe3:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  40bfe8:	41 89 c4             	mov    %eax,%r12d
  40bfeb:	4c 89 f8             	mov    %r15,%rax
  40bfee:	c7 84 24 20 02 00 00 	movl   $0x0,0x220(%rsp)
  40bff5:	00 00 00 00 
  40bff9:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  40c000:	00 
  40c001:	48 01 d8             	add    %rbx,%rax
  40c004:	48 89 ef             	mov    %rbp,%rdi
  40c007:	ff d0                	callq  *%rax
  40c009:	4c 89 f0             	mov    %r14,%rax
  40c00c:	48 89 ef             	mov    %rbp,%rdi
  40c00f:	48 01 d8             	add    %rbx,%rax
  40c012:	ff d0                	callq  *%rax

#include "hash.hpp"

struct State {
	State(){}
  State(int time, int x, int y) : time(time), x(x), y(y) {}
  40c014:	89 84 24 64 02 00 00 	mov    %eax,0x264(%rsp)
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40c01b:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  40c022:	00 
  40c023:	48 3b 84 24 f0 00 00 	cmp    0xf0(%rsp),%rax
  40c02a:	00 
  40c02b:	c7 84 24 60 02 00 00 	movl   $0x0,0x260(%rsp)
  40c032:	00 00 00 00 
  40c036:	44 89 a4 24 68 02 00 	mov    %r12d,0x268(%rsp)
  40c03d:	00 
  40c03e:	0f 84 65 09 00 00    	je     40c9a9 <main+0x2c29>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  40c044:	48 85 c0             	test   %rax,%rax
  40c047:	74 15                	je     40c05e <main+0x22de>
  40c049:	48 8b 94 24 60 02 00 	mov    0x260(%rsp),%rdx
  40c050:	00 
  40c051:	48 89 10             	mov    %rdx,(%rax)
  40c054:	8b 94 24 68 02 00 00 	mov    0x268(%rsp),%edx
  40c05b:	89 50 08             	mov    %edx,0x8(%rax)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  40c05e:	48 83 c0 0c          	add    $0xc,%rax
  40c062:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  40c069:	00 
  40c06a:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40c071:	00 
  40c072:	48 85 ff             	test   %rdi,%rdi
  40c075:	74 10                	je     40c087 <main+0x2307>
  40c077:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40c07e:	ff ff ff 
  40c081:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c085:	ff d0                	callq  *%rax
  40c087:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40c08e:	00 
  40c08f:	48 85 ff             	test   %rdi,%rdi
  40c092:	74 10                	je     40c0a4 <main+0x2324>
  40c094:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40c09b:	ff ff ff 
  40c09e:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c0a2:	ff d0                	callq  *%rax
    goals.emplace_back(Location(goal[0].as<int>(), goal[1].as<int>()));
  40c0a4:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
  40c0a9:	4c 8b 74 24 68       	mov    0x68(%rsp),%r14
  40c0ae:	48 8d ac 24 e0 01 00 	lea    0x1e0(%rsp),%rbp
  40c0b5:	00 
  40c0b6:	c7 84 24 40 02 00 00 	movl   $0x1,0x240(%rsp)
  40c0bd:	01 00 00 00 
  40c0c1:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  40c0c6:	48 89 ee             	mov    %rbp,%rsi
  40c0c9:	4c 89 f8             	mov    %r15,%rax
  40c0cc:	4c 89 f7             	mov    %r14,%rdi
  40c0cf:	48 01 d8             	add    %rbx,%rax
  40c0d2:	ff d0                	callq  *%rax
  40c0d4:	4c 89 f7             	mov    %r14,%rdi
  40c0d7:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  40c0dc:	4c 89 f0             	mov    %r14,%rax
  40c0df:	48 01 d8             	add    %rbx,%rax
  40c0e2:	ff d0                	callq  *%rax
  40c0e4:	48 89 ee             	mov    %rbp,%rsi
  40c0e7:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  40c0ec:	41 89 c4             	mov    %eax,%r12d
  40c0ef:	4c 89 f8             	mov    %r15,%rax
  40c0f2:	c7 84 24 20 02 00 00 	movl   $0x0,0x220(%rsp)
  40c0f9:	00 00 00 00 
  40c0fd:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  40c104:	00 
  40c105:	48 01 d8             	add    %rbx,%rax
  40c108:	48 89 ef             	mov    %rbp,%rdi
  40c10b:	ff d0                	callq  *%rax
  40c10d:	4c 89 f0             	mov    %r14,%rax
  40c110:	48 89 ef             	mov    %rbp,%rdi
  40c113:	48 01 d8             	add    %rbx,%rax
  40c116:	ff d0                	callq  *%rax
#pragma once

#include "hash.hpp"

struct Location {
  Location(int x, int y) : x(x), y(y) {}
  40c118:	89 84 24 60 02 00 00 	mov    %eax,0x260(%rsp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40c11f:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  40c126:	00 
  40c127:	48 3b 84 24 d0 00 00 	cmp    0xd0(%rsp),%rax
  40c12e:	00 
  40c12f:	44 89 a4 24 64 02 00 	mov    %r12d,0x264(%rsp)
  40c136:	00 
  40c137:	0f 84 93 08 00 00    	je     40c9d0 <main+0x2c50>
  40c13d:	48 85 c0             	test   %rax,%rax
  40c140:	74 0b                	je     40c14d <main+0x23cd>
  40c142:	48 8b 94 24 60 02 00 	mov    0x260(%rsp),%rdx
  40c149:	00 
  40c14a:	48 89 10             	mov    %rdx,(%rax)
	    ++this->_M_impl._M_finish;
  40c14d:	48 83 c0 08          	add    $0x8,%rax
  40c151:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  40c158:	00 
  40c159:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40c160:	00 
  40c161:	48 85 ff             	test   %rdi,%rdi
  40c164:	74 10                	je     40c176 <main+0x23f6>
  40c166:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40c16d:	ff ff ff 
  40c170:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c174:	ff d0                	callq  *%rax
  40c176:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40c17d:	00 
  40c17e:	48 85 ff             	test   %rdi,%rdi
  40c181:	74 10                	je     40c193 <main+0x2413>
  40c183:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40c18a:	ff ff ff 
  40c18d:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c191:	ff d0                	callq  *%rax
  40c193:	48 8b bc 24 f0 01 00 	mov    0x1f0(%rsp),%rdi
  40c19a:	00 
  40c19b:	48 85 ff             	test   %rdi,%rdi
  40c19e:	74 10                	je     40c1b0 <main+0x2430>
  40c1a0:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40c1a7:	ff ff ff 
  40c1aa:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c1ae:	ff d0                	callq  *%rax
  40c1b0:	48 8b bc 24 d0 01 00 	mov    0x1d0(%rsp),%rdi
  40c1b7:	00 
  40c1b8:	48 85 ff             	test   %rdi,%rdi
  40c1bb:	74 10                	je     40c1cd <main+0x244d>
  40c1bd:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40c1c4:	ff ff ff 
  40c1c7:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c1cb:	ff d0                	callq  *%rax
  40c1cd:	48 8b bc 24 00 04 00 	mov    0x400(%rsp),%rdi
  40c1d4:	00 
  40c1d5:	48 85 ff             	test   %rdi,%rdi
  40c1d8:	74 10                	je     40c1ea <main+0x246a>
  40c1da:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40c1e1:	ff ff ff 
  40c1e4:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c1e8:	ff d0                	callq  *%rax
  40c1ea:	48 8b bc 24 e0 03 00 	mov    0x3e0(%rsp),%rdi
  40c1f1:	00 
  40c1f2:	48 85 ff             	test   %rdi,%rdi
  40c1f5:	74 10                	je     40c207 <main+0x2487>
  40c1f7:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40c1fe:	ff ff ff 
  40c201:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c205:	ff d0                	callq  *%rax
  40c207:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40c20e:	00 
  40c20f:	48 85 ff             	test   %rdi,%rdi
  40c212:	74 10                	je     40c224 <main+0x24a4>
  40c214:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40c21b:	ff ff ff 
  40c21e:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c222:	ff d0                	callq  *%rax
    switch (m_type) {
  40c224:	8b 84 24 e0 02 00 00 	mov    0x2e0(%rsp),%eax
  40c22b:	4c 8b ac 24 e8 02 00 	mov    0x2e8(%rsp),%r13
  40c232:	00 
  40c233:	48 8b bc 24 f0 02 00 	mov    0x2f0(%rsp),%rdi
  40c23a:	00 
  40c23b:	83 f8 01             	cmp    $0x1,%eax
  40c23e:	0f 84 86 01 00 00    	je     40c3ca <main+0x264a>
  40c244:	83 f8 02             	cmp    $0x2,%eax
  40c247:	75 7d                	jne    40c2c6 <main+0x2546>
  40c249:	48 8b ac 24 f8 02 00 	mov    0x2f8(%rsp),%rbp
  40c250:	00 
	_M_node = _Rb_tree_increment(_M_node);
  40c251:	49 bc c0 e6 dd ff ff 	movabs $0xffffffffffdde6c0,%r12
  40c258:	ff ff ff 
  40c25b:	49 89 df             	mov    %rbx,%r15
  40c25e:	49 01 dc             	add    %rbx,%r12
  40c261:	41 ff d4             	callq  *%r12
    while (it != m_mapEnd && !is_defined(it))
  40c264:	48 39 c5             	cmp    %rax,%rbp
  40c267:	74 5a                	je     40c2c3 <main+0x2543>
  40c269:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40c26d:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40c270:	48 85 d2             	test   %rdx,%rdx
  40c273:	0f 84 8d 07 00 00    	je     40ca06 <main+0x2c86>
  40c279:	48 8b 12             	mov    (%rdx),%rdx
  40c27c:	48 85 d2             	test   %rdx,%rdx
  40c27f:	0f 84 72 07 00 00    	je     40c9f7 <main+0x2c77>
  40c285:	48 89 c7             	mov    %rax,%rdi
  40c288:	eb 25                	jmp    40c2af <main+0x252f>
  40c28a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40c290:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40c294:	48 8b 12             	mov    (%rdx),%rdx
  40c297:	48 85 d2             	test   %rdx,%rdx
  40c29a:	0f 84 66 07 00 00    	je     40ca06 <main+0x2c86>
  40c2a0:	48 8b 12             	mov    (%rdx),%rdx
  40c2a3:	48 89 c7             	mov    %rax,%rdi
  40c2a6:	48 85 d2             	test   %rdx,%rdx
  40c2a9:	0f 84 48 07 00 00    	je     40c9f7 <main+0x2c77>
    return it->first->is_defined() && it->second->is_defined();
  40c2af:	80 3a 00             	cmpb   $0x0,(%rdx)
  40c2b2:	0f 85 8b 00 00 00    	jne    40c343 <main+0x25c3>
  40c2b8:	49 89 df             	mov    %rbx,%r15
  40c2bb:	41 ff d4             	callq  *%r12
    while (it != m_mapEnd && !is_defined(it))
  40c2be:	48 39 c5             	cmp    %rax,%rbp
  40c2c1:	75 cd                	jne    40c290 <main+0x2510>
        m_mapIt = increment_until_defined(m_mapIt);
  40c2c3:	48 89 ef             	mov    %rbp,%rdi
  40c2c6:	4c 89 ac 24 e8 02 00 	mov    %r13,0x2e8(%rsp)
  40c2cd:	00 
  40c2ce:	48 89 bc 24 f0 02 00 	mov    %rdi,0x2f0(%rsp)
  40c2d5:	00 
  40c2d6:	e9 87 ea ff ff       	jmpq   40ad62 <main+0xfe2>
  40c2db:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40c2de:	48 85 d2             	test   %rdx,%rdx
  40c2e1:	0f 85 0d ed ff ff    	jne    40aff4 <main+0x1274>
  40c2e7:	e9 18 f0 ff ff       	jmpq   40b304 <main+0x1584>
  40c2ec:	c6 84 24 c0 01 00 00 	movb   $0x1,0x1c0(%rsp)
  40c2f3:	01 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40c2f4:	48 89 94 24 c8 01 00 	mov    %rdx,0x1c8(%rsp)
  40c2fb:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40c2fc:	48 c7 84 24 d0 01 00 	movq   $0x0,0x1d0(%rsp)
  40c303:	00 00 00 00 00 
  40c308:	48 89 ac 24 d8 01 00 	mov    %rbp,0x1d8(%rsp)
  40c30f:	00 
  40c310:	e9 2f ec ff ff       	jmpq   40af44 <main+0x11c4>
  40c315:	48 8b 84 24 b8 04 00 	mov    0x4b8(%rsp),%rax
  40c31c:	00 
  40c31d:	48 39 84 24 e8 02 00 	cmp    %rax,0x2e8(%rsp)
  40c324:	00 
  40c325:	0f 94 c0             	sete   %al
  for (const auto& node : config["agents"]) {
  40c328:	84 c0                	test   %al,%al
  40c32a:	0f 84 46 ea ff ff    	je     40ad76 <main+0xff6>
  40c330:	e9 f0 ef ff ff       	jmpq   40b325 <main+0x15a5>
        if( pi_ != 0 ) pi_->add_ref_copy();
  40c335:	31 ed                	xor    %ebp,%ebp
  40c337:	e9 67 eb ff ff       	jmpq   40aea3 <main+0x1123>
  40c33c:	31 ed                	xor    %ebp,%ebp
  40c33e:	e9 bf fb ff ff       	jmpq   40bf02 <main+0x2182>
  40c343:	48 8b 47 28          	mov    0x28(%rdi),%rax
  40c347:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  40c34a:	48 85 c0             	test   %rax,%rax
  40c34d:	0f 84 b3 06 00 00    	je     40ca06 <main+0x2c86>
  40c353:	48 8b 00             	mov    (%rax),%rax
  40c356:	48 85 c0             	test   %rax,%rax
  40c359:	0f 84 98 06 00 00    	je     40c9f7 <main+0x2c77>
    while (it != m_mapEnd && !is_defined(it))
  40c35f:	80 38 00             	cmpb   $0x0,(%rax)
  40c362:	0f 84 50 ff ff ff    	je     40c2b8 <main+0x2538>
  40c368:	48 89 fd             	mov    %rdi,%rbp
  40c36b:	e9 53 ff ff ff       	jmpq   40c2c3 <main+0x2543>
      throw BadSubscript();
  40c370:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  40c377:	ff ff ff 
  40c37a:	bf 40 00 00 00       	mov    $0x40,%edi
  40c37f:	49 89 df             	mov    %rbx,%r15
  40c382:	48 01 d8             	add    %rbx,%rax
  40c385:	ff d0                	callq  *%rax
  40c387:	48 89 c5             	mov    %rax,%rbp
  40c38a:	48 89 c7             	mov    %rax,%rdi
  40c38d:	48 b8 a0 af de ff ff 	movabs $0xffffffffffdeafa0,%rax
  40c394:	ff ff ff 
  40c397:	48 01 d8             	add    %rbx,%rax
  40c39a:	ff d0                	callq  *%rax
  40c39c:	48 b8 f0 94 de ff ff 	movabs $0xffffffffffde94f0,%rax
  40c3a3:	ff ff ff 
  40c3a6:	48 89 ef             	mov    %rbp,%rdi
  40c3a9:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40c3ad:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  40c3b4:	ff ff ff 
  40c3b7:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40c3bb:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  40c3c2:	ff ff ff 
  40c3c5:	48 01 d8             	add    %rbx,%rax
  40c3c8:	ff d0                	callq  *%rax
	++_M_current;
  40c3ca:	49 83 c5 08          	add    $0x8,%r13
  40c3ce:	e9 f3 fe ff ff       	jmpq   40c2c6 <main+0x2546>
  40c3d3:	4c 8b a8 88 00 00 00 	mov    0x88(%rax),%r13
      { return const_iterator(&this->_M_impl._M_header); }
  40c3da:	48 83 c0 78          	add    $0x78,%rax
  40c3de:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40c3e3:	49 39 c5             	cmp    %rax,%r13
  40c3e6:	0f 84 f5 fa ff ff    	je     40bee1 <main+0x2161>
  40c3ec:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  40c3f3:	00 
  40c3f4:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  40c3fb:	00 
	: allocator_type(__a), _M_p(__dat) { }
  40c3fc:	48 8d 84 24 70 02 00 	lea    0x270(%rsp),%rax
  40c403:	00 
  40c404:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        if( pi_ != 0 ) pi_->release();
  40c409:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c410:	ff ff ff 
  40c413:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  40c417:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40c41c:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40c423:	00 
  40c424:	e9 fb 00 00 00       	jmpq   40c524 <main+0x27a4>
  40c429:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40c430:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  40c437:	00 
  40c438:	f0 83 06 01          	lock addl $0x1,(%rsi)
    if (it->first->equals(key, pMemory)) {
  40c43c:	49 8b 45 20          	mov    0x20(%r13),%rax
  40c440:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
      { _M_string_length = __length; }
  40c445:	48 c7 84 24 68 02 00 	movq   $0x0,0x268(%rsp)
  40c44c:	00 00 00 00 00 
      { __c1 = __c2; }
  40c451:	c6 84 24 70 02 00 00 	movb   $0x0,0x270(%rsp)
  40c458:	00 
	: allocator_type(__a), _M_p(__dat) { }
  40c459:	48 89 94 24 60 02 00 	mov    %rdx,0x260(%rsp)
  40c460:	00 
  40c461:	f0 83 06 01          	lock addl $0x1,(%rsi)
  40c465:	f0 83 06 01          	lock addl $0x1,(%rsi)
  return m_pNode ? m_pNode->type() : NodeType::Null;
  40c469:	48 85 c0             	test   %rax,%rax
  40c46c:	0f 84 f6 00 00 00    	je     40c568 <main+0x27e8>
  40c472:	48 8b 00             	mov    (%rax),%rax
  40c475:	48 85 c0             	test   %rax,%rax
  40c478:	0f 84 88 05 00 00    	je     40ca06 <main+0x2c86>
  40c47e:	48 8b 00             	mov    (%rax),%rax
  40c481:	48 85 c0             	test   %rax,%rax
  40c484:	0f 84 6d 05 00 00    	je     40c9f7 <main+0x2c77>
  40c48a:	0f b6 28             	movzbl (%rax),%ebp
    return m_isDefined ? m_type : NodeType::Undefined;
  40c48d:	40 84 ed             	test   %bpl,%bpl
  40c490:	74 0c                	je     40c49e <main+0x271e>
    if (!node.IsScalar())
  40c492:	83 78 04 02          	cmpl   $0x2,0x4(%rax)
  40c496:	0f 84 df 00 00 00    	je     40c57b <main+0x27fb>
      return false;
  40c49c:	31 ed                	xor    %ebp,%ebp
  40c49e:	4d 85 e4             	test   %r12,%r12
  40c4a1:	74 29                	je     40c4cc <main+0x274c>
  40c4a3:	4c 89 e7             	mov    %r12,%rdi
  40c4a6:	41 ff d6             	callq  *%r14
  40c4a9:	4c 89 e7             	mov    %r12,%rdi
  40c4ac:	41 ff d6             	callq  *%r14
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  40c4af:	40 84 ed             	test   %bpl,%bpl
  40c4b2:	74 18                	je     40c4cc <main+0x274c>
  40c4b4:	48 8b 94 24 68 02 00 	mov    0x268(%rsp),%rdx
  40c4bb:	00 
  return false;
  40c4bc:	31 ed                	xor    %ebp,%ebp
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40c4be:	48 3b 94 24 48 02 00 	cmp    0x248(%rsp),%rdx
  40c4c5:	00 
  40c4c6:	0f 84 db 00 00 00    	je     40c5a7 <main+0x2827>
  40c4cc:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  40c4d3:	00 
	if (!_M_is_local())
  40c4d4:	48 3b 7c 24 30       	cmp    0x30(%rsp),%rdi
  40c4d9:	74 12                	je     40c4ed <main+0x276d>
      { ::operator delete(__p); }
  40c4db:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40c4e2:	ff ff ff 
  40c4e5:	49 89 df             	mov    %rbx,%r15
  40c4e8:	48 01 d8             	add    %rbx,%rax
  40c4eb:	ff d0                	callq  *%rax
  40c4ed:	4d 85 e4             	test   %r12,%r12
  40c4f0:	74 06                	je     40c4f8 <main+0x2778>
  40c4f2:	4c 89 e7             	mov    %r12,%rdi
  40c4f5:	41 ff d6             	callq  *%r14
    if (it->first->equals(key, pMemory)) {
  40c4f8:	40 84 ed             	test   %bpl,%bpl
  40c4fb:	0f 85 58 01 00 00    	jne    40c659 <main+0x28d9>
	_M_node = _Rb_tree_increment(_M_node);
  40c501:	48 b8 40 e8 dd ff ff 	movabs $0xffffffffffdde840,%rax
  40c508:	ff ff ff 
  40c50b:	4c 89 ef             	mov    %r13,%rdi
  40c50e:	49 89 df             	mov    %rbx,%r15
  40c511:	48 01 d8             	add    %rbx,%rax
  40c514:	ff d0                	callq  *%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40c516:	48 3b 44 24 50       	cmp    0x50(%rsp),%rax
  40c51b:	49 89 c5             	mov    %rax,%r13
  40c51e:	0f 84 bd f9 ff ff    	je     40bee1 <main+0x2161>
        if( pi_ != 0 ) pi_->add_ref_copy();
  40c524:	4d 85 e4             	test   %r12,%r12
  40c527:	0f 85 03 ff ff ff    	jne    40c430 <main+0x26b0>
    if (it->first->equals(key, pMemory)) {
  40c52d:	49 8b 45 20          	mov    0x20(%r13),%rax
	: allocator_type(__a), _M_p(__dat) { }
  40c531:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
      { _M_string_length = __length; }
  40c536:	48 c7 84 24 68 02 00 	movq   $0x0,0x268(%rsp)
  40c53d:	00 00 00 00 00 
  40c542:	c6 84 24 70 02 00 00 	movb   $0x0,0x270(%rsp)
  40c549:	00 
  40c54a:	48 85 c0             	test   %rax,%rax
	: allocator_type(__a), _M_p(__dat) { }
  40c54d:	48 89 b4 24 60 02 00 	mov    %rsi,0x260(%rsp)
  40c554:	00 
  40c555:	0f 85 17 ff ff ff    	jne    40c472 <main+0x26f2>
  return false;
  40c55b:	31 ed                	xor    %ebp,%ebp
  40c55d:	e9 6a ff ff ff       	jmpq   40c4cc <main+0x274c>
  40c562:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if( pi_ != 0 ) pi_->release();
  40c568:	4c 89 e7             	mov    %r12,%rdi
  40c56b:	31 ed                	xor    %ebp,%ebp
  40c56d:	41 ff d6             	callq  *%r14
  40c570:	4c 89 e7             	mov    %r12,%rdi
  40c573:	41 ff d6             	callq  *%r14
  40c576:	e9 51 ff ff ff       	jmpq   40c4cc <main+0x274c>
  const std::string& scalar() const { return m_scalar; }
  40c57b:	48 8d 70 30          	lea    0x30(%rax),%rsi
	this->_M_assign(__str);
  40c57f:	48 b8 b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%rax
  40c586:	ff ff ff 
  40c589:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  40c590:	00 
  40c591:	49 89 df             	mov    %rbx,%r15
  40c594:	48 01 d8             	add    %rbx,%rax
  40c597:	ff d0                	callq  *%rax
  40c599:	4d 85 e4             	test   %r12,%r12
  40c59c:	0f 85 01 ff ff ff    	jne    40c4a3 <main+0x2723>
  40c5a2:	e9 0d ff ff ff       	jmpq   40c4b4 <main+0x2734>
	if (__n == 0)
  40c5a7:	48 85 d2             	test   %rdx,%rdx
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40c5aa:	0f b6 ac 24 a0 00 00 	movzbl 0xa0(%rsp),%ebp
  40c5b1:	00 
  40c5b2:	0f 84 14 ff ff ff    	je     40c4cc <main+0x274c>
	return __builtin_memcmp(__s1, __s2, __n);
  40c5b8:	48 b8 60 e5 dd ff ff 	movabs $0xffffffffffdde560,%rax
  40c5bf:	ff ff ff 
  40c5c2:	48 8b b4 24 40 02 00 	mov    0x240(%rsp),%rsi
  40c5c9:	00 
  40c5ca:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  40c5d1:	00 
  40c5d2:	48 01 d8             	add    %rbx,%rax
  40c5d5:	49 89 df             	mov    %rbx,%r15
  40c5d8:	ff d0                	callq  *%rax
  40c5da:	85 c0                	test   %eax,%eax
  40c5dc:	40 0f 94 c5          	sete   %bpl
  40c5e0:	e9 e7 fe ff ff       	jmpq   40c4cc <main+0x274c>
	if (!_M_is_local())
  40c5e5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40c5ea:	48 8b bc 24 80 02 00 	mov    0x280(%rsp),%rdi
  40c5f1:	00 
  40c5f2:	31 ed                	xor    %ebp,%ebp
  40c5f4:	48 83 c0 10          	add    $0x10,%rax
  40c5f8:	48 39 c7             	cmp    %rax,%rdi
  40c5fb:	0f 85 f6 df ff ff    	jne    40a5f7 <main+0x877>
  40c601:	e9 0c e0 ff ff       	jmpq   40a612 <main+0x892>
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  40c606:	c6 84 24 e0 01 00 00 	movb   $0x1,0x1e0(%rsp)
  40c60d:	01 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40c60e:	48 89 94 24 e8 01 00 	mov    %rdx,0x1e8(%rsp)
  40c615:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40c616:	48 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%rsp)
  40c61d:	00 00 00 00 00 
  40c622:	48 89 ac 24 f8 01 00 	mov    %rbp,0x1f8(%rsp)
  40c629:	00 
  40c62a:	e9 71 f9 ff ff       	jmpq   40bfa0 <main+0x2220>
      return it->second;
  40c62f:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  40c633:	e9 a8 ec ff ff       	jmpq   40b2e0 <main+0x1560>
  40c638:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40c63d:	48 8b bc 24 80 02 00 	mov    0x280(%rsp),%rdi
  40c644:	00 
  40c645:	48 83 c0 10          	add    $0x10,%rax
  40c649:	48 39 c7             	cmp    %rax,%rdi
  40c64c:	0f 84 c0 df ff ff    	je     40a612 <main+0x892>
  40c652:	31 ed                	xor    %ebp,%ebp
  40c654:	e9 9e df ff ff       	jmpq   40a5f7 <main+0x877>
  40c659:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  40c65d:	e9 81 f8 ff ff       	jmpq   40bee3 <main+0x2163>
      { return _M_node == __x._M_node; }
  40c662:	48 8b 84 24 c0 04 00 	mov    0x4c0(%rsp),%rax
  40c669:	00 
  40c66a:	48 39 84 24 f0 02 00 	cmp    %rax,0x2f0(%rsp)
  40c671:	00 
  40c672:	0f 94 c0             	sete   %al
  40c675:	e9 ae fc ff ff       	jmpq   40c328 <main+0x25a8>
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  40c67a:	c6 84 24 c0 01 00 00 	movb   $0x0,0x1c0(%rsp)
  40c681:	00 
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  40c682:	48 c7 84 24 c8 01 00 	movq   $0x0,0x1c8(%rsp)
  40c689:	00 00 00 00 00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  40c68e:	48 c7 84 24 d0 01 00 	movq   $0x0,0x1d0(%rsp)
  40c695:	00 00 00 00 00 
  40c69a:	48 c7 84 24 d8 01 00 	movq   $0x0,0x1d8(%rsp)
  40c6a1:	00 00 00 00 00 
  40c6a6:	e9 99 e8 ff ff       	jmpq   40af44 <main+0x11c4>
  40c6ab:	c6 84 24 e0 01 00 00 	movb   $0x0,0x1e0(%rsp)
  40c6b2:	00 
  40c6b3:	48 c7 84 24 e8 01 00 	movq   $0x0,0x1e8(%rsp)
  40c6ba:	00 00 00 00 00 
  40c6bf:	48 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%rsp)
  40c6c6:	00 00 00 00 00 
  40c6cb:	48 c7 84 24 f8 01 00 	movq   $0x0,0x1f8(%rsp)
  40c6d2:	00 00 00 00 00 
  40c6d7:	e9 c4 f8 ff ff       	jmpq   40bfa0 <main+0x2220>
  40c6dc:	49 89 c5             	mov    %rax,%r13
        {}
  40c6df:	48 89 ef             	mov    %rbp,%rdi
  40c6e2:	48 b8 d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rax
  40c6e9:	ff ff ff 
  40c6ec:	4c 89 ed             	mov    %r13,%rbp
  40c6ef:	4c 89 a4 24 40 02 00 	mov    %r12,0x240(%rsp)
  40c6f6:	00 
  40c6f7:	49 89 df             	mov    %rbx,%r15
  40c6fa:	48 01 d8             	add    %rbx,%rax
  40c6fd:	ff d0                	callq  *%rax
  40c6ff:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40c704:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40c70b:	00 
  40c70c:	48 83 c0 10          	add    $0x10,%rax
  40c710:	48 39 c7             	cmp    %rax,%rdi
  40c713:	74 12                	je     40c727 <main+0x29a7>
  40c715:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40c71c:	ff ff ff 
  40c71f:	49 89 df             	mov    %rbx,%r15
  40c722:	48 01 d8             	add    %rbx,%rax
  40c725:	ff d0                	callq  *%rax
  40c727:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  40c72c:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  40c733:	00 
  40c734:	48 83 c0 10          	add    $0x10,%rax
  40c738:	48 39 c7             	cmp    %rax,%rdi
  40c73b:	74 12                	je     40c74f <main+0x29cf>
  40c73d:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40c744:	ff ff ff 
  40c747:	49 89 df             	mov    %rbx,%r15
  40c74a:	48 01 d8             	add    %rbx,%rax
  40c74d:	ff d0                	callq  *%rax
  40c74f:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  40c754:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  40c75b:	00 
  40c75c:	48 83 c0 10          	add    $0x10,%rax
  40c760:	48 39 c7             	cmp    %rax,%rdi
  40c763:	74 12                	je     40c777 <main+0x29f7>
  40c765:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40c76c:	ff ff ff 
  40c76f:	49 89 df             	mov    %rbx,%r15
  40c772:	48 01 d8             	add    %rbx,%rax
  40c775:	ff d0                	callq  *%rax
  po::options_description desc("Allowed options");
  40c777:	48 b8 70 b6 de ff ff 	movabs $0xffffffffffdeb670,%rax
  40c77e:	ff ff ff 
  40c781:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40c786:	48 01 d8             	add    %rbx,%rax
  40c789:	ff d0                	callq  *%rax
  40c78b:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  40c792:	ff ff ff 
  40c795:	48 89 ef             	mov    %rbp,%rdi
  40c798:	49 89 df             	mov    %rbx,%r15
  40c79b:	48 01 d8             	add    %rbx,%rax
  40c79e:	ff d0                	callq  *%rax
  40c7a0:	48 89 c5             	mov    %rax,%rbp
        if( pi_ != 0 ) pi_->release();
  40c7a3:	4d 85 e4             	test   %r12,%r12
  40c7a6:	74 1a                	je     40c7c2 <main+0x2a42>
  40c7a8:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c7af:	ff ff ff 
  40c7b2:	4c 89 e7             	mov    %r12,%rdi
  40c7b5:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  40c7b9:	41 ff d5             	callq  *%r13
  40c7bc:	4c 89 e7             	mov    %r12,%rdi
  40c7bf:	41 ff d5             	callq  *%r13
  40c7c2:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40c7c9:	00 
  40c7ca:	48 8b bc 24 00 02 00 	mov    0x200(%rsp),%rdi
  40c7d1:	00 
  40c7d2:	48 83 c0 10          	add    $0x10,%rax
  40c7d6:	48 39 c7             	cmp    %rax,%rdi
  40c7d9:	74 12                	je     40c7ed <main+0x2a6d>
  40c7db:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40c7e2:	ff ff ff 
  40c7e5:	49 89 df             	mov    %rbx,%r15
  40c7e8:	48 01 d8             	add    %rbx,%rax
  40c7eb:	ff d0                	callq  *%rax
  40c7ed:	4d 85 e4             	test   %r12,%r12
  40c7f0:	74 12                	je     40c804 <main+0x2a84>
  40c7f2:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c7f9:	ff ff ff 
  40c7fc:	4c 89 e7             	mov    %r12,%rdi
  40c7ff:	48 01 d8             	add    %rbx,%rax
  40c802:	ff d0                	callq  *%rax
  for (const auto& node : config["agents"]) {
  40c804:	48 b8 20 b8 de ff ff 	movabs $0xffffffffffdeb820,%rax
  40c80b:	ff ff ff 
  40c80e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40c813:	48 01 d8             	add    %rbx,%rax
  40c816:	ff d0                	callq  *%rax
  40c818:	48 8b bc 24 d8 04 00 	mov    0x4d8(%rsp),%rdi
  40c81f:	00 
  40c820:	48 85 ff             	test   %rdi,%rdi
  40c823:	74 0f                	je     40c834 <main+0x2ab4>
  40c825:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c82c:	ff ff ff 
  40c82f:	48 01 d8             	add    %rbx,%rax
  40c832:	ff d0                	callq  *%rax
  40c834:	48 8b bc 24 08 03 00 	mov    0x308(%rsp),%rdi
  40c83b:	00 
  40c83c:	48 85 ff             	test   %rdi,%rdi
  40c83f:	74 0f                	je     40c850 <main+0x2ad0>
  40c841:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c848:	ff ff ff 
  40c84b:	48 01 d8             	add    %rbx,%rax
  40c84e:	ff d0                	callq  *%rax
  40c850:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  40c857:	00 
  40c858:	48 85 ff             	test   %rdi,%rdi
  40c85b:	74 0f                	je     40c86c <main+0x2aec>
  40c85d:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c864:	ff ff ff 
  40c867:	48 01 d8             	add    %rbx,%rax
  40c86a:	ff d0                	callq  *%rax
  40c86c:	48 b8 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rax
  40c873:	ff ff ff 
  40c876:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40c87b:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  40c882:	00 
  40c883:	48 85 ff             	test   %rdi,%rdi
  40c886:	74 0f                	je     40c897 <main+0x2b17>
  40c888:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c88f:	ff ff ff 
  40c892:	48 01 d8             	add    %rbx,%rax
  40c895:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40c897:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  40c89e:	00 
	if (__p)
  40c89f:	48 85 ff             	test   %rdi,%rdi
  40c8a2:	74 12                	je     40c8b6 <main+0x2b36>
  40c8a4:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40c8ab:	ff ff ff 
  40c8ae:	49 89 df             	mov    %rbx,%r15
  40c8b1:	48 01 d8             	add    %rbx,%rax
  40c8b4:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40c8b6:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  40c8bd:	00 
	if (__p)
  40c8be:	48 85 ff             	test   %rdi,%rdi
  40c8c1:	74 12                	je     40c8d5 <main+0x2b55>
  40c8c3:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40c8ca:	ff ff ff 
  40c8cd:	49 89 df             	mov    %rbx,%r15
  40c8d0:	48 01 d8             	add    %rbx,%rax
  40c8d3:	ff d0                	callq  *%rax
  40c8d5:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  40c8da:	48 8b 3c 24          	mov    (%rsp),%rdi
  40c8de:	48 01 d8             	add    %rbx,%rax
  40c8e1:	ff d0                	callq  *%rax
  40c8e3:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  40c8ea:	00 
  40c8eb:	48 85 ff             	test   %rdi,%rdi
  40c8ee:	0f 84 33 fe ff ff    	je     40c727 <main+0x29a7>
  40c8f4:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c8fb:	ff ff ff 
  40c8fe:	48 01 d8             	add    %rbx,%rax
  40c901:	ff d0                	callq  *%rax
  40c903:	e9 1f fe ff ff       	jmpq   40c727 <main+0x29a7>
  40c908:	48 89 c5             	mov    %rax,%rbp
  40c90b:	4d 85 e4             	test   %r12,%r12
  40c90e:	74 1a                	je     40c92a <main+0x2baa>
  40c910:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c917:	ff ff ff 
  40c91a:	4c 89 e7             	mov    %r12,%rdi
  40c91d:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  40c921:	41 ff d5             	callq  *%r13
  40c924:	4c 89 e7             	mov    %r12,%rdi
  40c927:	41 ff d5             	callq  *%r13
  40c92a:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40c92f:	48 8b bc 24 40 02 00 	mov    0x240(%rsp),%rdi
  40c936:	00 
  40c937:	48 83 c0 10          	add    $0x10,%rax
  40c93b:	48 39 c7             	cmp    %rax,%rdi
  40c93e:	74 12                	je     40c952 <main+0x2bd2>
  40c940:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40c947:	ff ff ff 
  40c94a:	49 89 df             	mov    %rbx,%r15
  40c94d:	48 01 d8             	add    %rbx,%rax
  40c950:	ff d0                	callq  *%rax
  40c952:	4d 85 e4             	test   %r12,%r12
  40c955:	74 12                	je     40c969 <main+0x2be9>
  40c957:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c95e:	ff ff ff 
  40c961:	4c 89 e7             	mov    %r12,%rdi
  40c964:	48 01 d8             	add    %rbx,%rax
  40c967:	ff d0                	callq  *%rax
  40c969:	48 8b bc 24 d0 01 00 	mov    0x1d0(%rsp),%rdi
  40c970:	00 
  40c971:	48 85 ff             	test   %rdi,%rdi
  40c974:	0f 84 8a fe ff ff    	je     40c804 <main+0x2a84>
  40c97a:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40c981:	ff ff ff 
  40c984:	48 01 d8             	add    %rbx,%rax
  40c987:	ff d0                	callq  *%rax
  40c989:	e9 76 fe ff ff       	jmpq   40c804 <main+0x2a84>
	  _M_emplace_back_aux(__x);
  40c98e:	4c 89 ff             	mov    %r15,%rdi
  40c991:	41 ff d6             	callq  *%r14
  40c994:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  40c99b:	00 
  40c99c:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  40c9a3:	00 
  40c9a4:	e9 4c ed ff ff       	jmpq   40b6f5 <main+0x1975>
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  40c9a9:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  40c9b0:	00 
  40c9b1:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  40c9b8:	00 
  40c9b9:	48 89 c6             	mov    %rax,%rsi
  40c9bc:	48 b8 b0 eb de ff ff 	movabs $0xffffffffffdeebb0,%rax
  40c9c3:	ff ff ff 
  40c9c6:	48 01 d8             	add    %rbx,%rax
  40c9c9:	ff d0                	callq  *%rax
  40c9cb:	e9 9a f6 ff ff       	jmpq   40c06a <main+0x22ea>
  40c9d0:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  40c9d7:	00 
  40c9d8:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  40c9df:	00 
  40c9e0:	48 89 c6             	mov    %rax,%rsi
  40c9e3:	48 b8 10 ed de ff ff 	movabs $0xffffffffffdeed10,%rax
  40c9ea:	ff ff ff 
  40c9ed:	48 01 d8             	add    %rbx,%rax
  40c9f0:	ff d0                	callq  *%rax
  40c9f2:	e9 62 f7 ff ff       	jmpq   40c159 <main+0x23d9>
  40c9f7:	48 b8 c6 eb dd ff ff 	movabs $0xffffffffffddebc6,%rax
  40c9fe:	ff ff ff 
  40ca01:	48 01 d8             	add    %rbx,%rax
  40ca04:	ff d0                	callq  *%rax
  40ca06:	48 b8 72 ec dd ff ff 	movabs $0xffffffffffddec72,%rax
  40ca0d:	ff ff ff 
  40ca10:	48 01 d8             	add    %rbx,%rax
  40ca13:	ff d0                	callq  *%rax
  40ca15:	49 89 c5             	mov    %rax,%r13
      throw BadSubscript();
  40ca18:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  40ca1f:	ff ff ff 
  40ca22:	48 89 ef             	mov    %rbp,%rdi
  40ca25:	49 89 df             	mov    %rbx,%r15
  40ca28:	48 01 d8             	add    %rbx,%rax
  40ca2b:	4c 89 ed             	mov    %r13,%rbp
  40ca2e:	ff d0                	callq  *%rax
  40ca30:	e9 6e fd ff ff       	jmpq   40c7a3 <main+0x2a23>
  40ca35:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40ca3c:	00 
  40ca3d:	48 89 c5             	mov    %rax,%rbp
  40ca40:	48 85 ff             	test   %rdi,%rdi
  40ca43:	74 0f                	je     40ca54 <main+0x2cd4>
  40ca45:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40ca4c:	ff ff ff 
  40ca4f:	48 01 d8             	add    %rbx,%rax
  40ca52:	ff d0                	callq  *%rax
  40ca54:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40ca5b:	00 
  40ca5c:	48 85 ff             	test   %rdi,%rdi
  40ca5f:	74 0f                	je     40ca70 <main+0x2cf0>
  40ca61:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40ca68:	ff ff ff 
  40ca6b:	48 01 d8             	add    %rbx,%rax
  40ca6e:	ff d0                	callq  *%rax
  40ca70:	48 8b bc 24 f0 01 00 	mov    0x1f0(%rsp),%rdi
  40ca77:	00 
  40ca78:	48 85 ff             	test   %rdi,%rdi
  40ca7b:	0f 84 e8 fe ff ff    	je     40c969 <main+0x2be9>
  40ca81:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40ca88:	ff ff ff 
  40ca8b:	48 01 d8             	add    %rbx,%rax
  40ca8e:	ff d0                	callq  *%rax
  40ca90:	e9 d4 fe ff ff       	jmpq   40c969 <main+0x2be9>
  40ca95:	48 89 c5             	mov    %rax,%rbp
  40ca98:	e9 b5 fe ff ff       	jmpq   40c952 <main+0x2bd2>
  40ca9d:	48 89 c5             	mov    %rax,%rbp
  40caa0:	eb b2                	jmp    40ca54 <main+0x2cd4>
      { _M_h._M_deallocate_nodes(_M_nodes); }
  40caa2:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40caa9:	00 
      while (__n)
  40caaa:	48 85 ff             	test   %rdi,%rdi
  40caad:	74 6f                	je     40cb1e <main+0x2d9e>
  40caaf:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  40cab4:	48 8b 07             	mov    (%rdi),%rax
  40cab7:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  40cabe:	ff ff ff 
  40cac1:	49 89 df             	mov    %rbx,%r15
  40cac4:	48 01 da             	add    %rbx,%rdx
  40cac7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40cacc:	ff d2                	callq  *%rdx
	  __n = __n->_M_next();
  40cace:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  40cad3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40cad8:	eb d0                	jmp    40caaa <main+0x2d2a>
  40cada:	48 89 c5             	mov    %rax,%rbp
  40cadd:	48 b8 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rax
  40cae4:	ff ff ff 
  40cae7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40caec:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40caf1:	48 01 d8             	add    %rbx,%rax
  40caf4:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40caf6:	48 8b bc 24 e0 02 00 	mov    0x2e0(%rsp),%rdi
  40cafd:	00 
	if (__p)
  40cafe:	48 85 ff             	test   %rdi,%rdi
  40cb01:	0f 84 74 fd ff ff    	je     40c87b <main+0x2afb>
  40cb07:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40cb0e:	ff ff ff 
  40cb11:	49 89 df             	mov    %rbx,%r15
  40cb14:	48 01 d8             	add    %rbx,%rax
  40cb17:	ff d0                	callq  *%rax
  40cb19:	e9 5d fd ff ff       	jmpq   40c87b <main+0x2afb>
      __catch(...)
  40cb1e:	48 89 c7             	mov    %rax,%rdi
  40cb21:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  40cb28:	ff ff ff 
  40cb2b:	49 89 df             	mov    %rbx,%r15
  40cb2e:	48 01 d8             	add    %rbx,%rax
  40cb31:	ff d0                	callq  *%rax
	  if (__former_buckets)
  40cb33:	4d 85 e4             	test   %r12,%r12
  40cb36:	74 35                	je     40cb6d <main+0x2ded>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  40cb38:	48 8b 7c 1d 20       	mov    0x20(%rbp,%rbx,1),%rdi
	if (_M_uses_single_bucket(__bkts))
  40cb3d:	48 b8 10 d2 9b 3b 00 	movabs $0x3b9bd210,%rax
  40cb44:	00 00 00 
  40cb47:	48 01 d8             	add    %rbx,%rax
  40cb4a:	48 39 c7             	cmp    %rax,%rdi
  40cb4d:	74 0f                	je     40cb5e <main+0x2dde>
  40cb4f:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40cb56:	ff ff ff 
  40cb59:	48 01 d8             	add    %rbx,%rax
  40cb5c:	ff d0                	callq  *%rax
    { _M_next_resize = __state; }
  40cb5e:	4c 89 74 1d 48       	mov    %r14,0x48(%rbp,%rbx,1)
	      _M_buckets = __former_buckets;
  40cb63:	4c 89 64 1d 20       	mov    %r12,0x20(%rbp,%rbx,1)
	      _M_bucket_count = __former_bucket_count;
  40cb68:	4c 89 6c 1d 28       	mov    %r13,0x28(%rbp,%rbx,1)
	  __builtin_memset(_M_buckets, 0,
  40cb6d:	48 8b 44 1d 28       	mov    0x28(%rbp,%rbx,1),%rax
  40cb72:	48 8b 7c 1d 20       	mov    0x20(%rbp,%rbx,1),%rdi
  40cb77:	31 f6                	xor    %esi,%esi
  40cb79:	49 89 df             	mov    %rbx,%r15
  40cb7c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40cb83:	00 
  40cb84:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  40cb8b:	ff ff ff 
  40cb8e:	48 01 d8             	add    %rbx,%rax
  40cb91:	ff d0                	callq  *%rax
	  __throw_exception_again;
  40cb93:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  40cb9a:	ff ff ff 
  40cb9d:	48 01 d8             	add    %rbx,%rax
  40cba0:	ff d0                	callq  *%rax
  40cba2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	this->_M_widen_init();
  40cba8:	48 b8 30 e8 dd ff ff 	movabs $0xffffffffffdde830,%rax
  40cbaf:	ff ff ff 
  40cbb2:	4c 89 e7             	mov    %r12,%rdi
  40cbb5:	49 89 df             	mov    %rbx,%r15
  40cbb8:	48 01 d8             	add    %rbx,%rax
  40cbbb:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40cbbd:	49 8b 04 24          	mov    (%r12),%rax
  40cbc1:	be 0a 00 00 00       	mov    $0xa,%esi
  40cbc6:	48 8b 40 30          	mov    0x30(%rax),%rax
  40cbca:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  40cbcf:	0f 84 e2 ef ff ff    	je     40bbb7 <main+0x1e37>
  40cbd5:	4c 89 e7             	mov    %r12,%rdi
  40cbd8:	ff d0                	callq  *%rax
  40cbda:	0f be f0             	movsbl %al,%esi
  40cbdd:	e9 d5 ef ff ff       	jmpq   40bbb7 <main+0x1e37>
	this->_M_widen_init();
  40cbe2:	48 b8 30 e8 dd ff ff 	movabs $0xffffffffffdde830,%rax
  40cbe9:	ff ff ff 
  40cbec:	4c 89 e7             	mov    %r12,%rdi
  40cbef:	49 89 df             	mov    %rbx,%r15
  40cbf2:	48 01 d8             	add    %rbx,%rax
  40cbf5:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40cbf7:	49 8b 04 24          	mov    (%r12),%rax
  40cbfb:	be 0a 00 00 00       	mov    $0xa,%esi
  40cc00:	48 8b 40 30          	mov    0x30(%rax),%rax
  40cc04:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  40cc09:	0f 84 33 ef ff ff    	je     40bb42 <main+0x1dc2>
  40cc0f:	4c 89 e7             	mov    %r12,%rdi
  40cc12:	ff d0                	callq  *%rax
  40cc14:	0f be f0             	movsbl %al,%esi
  40cc17:	e9 26 ef ff ff       	jmpq   40bb42 <main+0x1dc2>
    for (size_t a = 0; a < ROBOT_NUMS; ++a) {
  40cc1c:	48 83 44 24 58 01    	addq   $0x1,0x58(%rsp)
  40cc22:	48 81 44 24 38 50 06 	addq   $0x650,0x38(%rsp)
  40cc29:	00 00 
  40cc2b:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40cc30:	48 83 f8 14          	cmp    $0x14,%rax
  40cc34:	0f 85 d1 ed ff ff    	jne    40ba0b <main+0x1c8b>
    std::ofstream out(outputFile);
  40cc3a:	48 b8 80 e9 dd ff ff 	movabs $0xffffffffffdde980,%rax
  40cc41:	ff ff ff 
  40cc44:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40cc49:	49 89 df             	mov    %rbx,%r15
  40cc4c:	48 01 d8             	add    %rbx,%rax
  40cc4f:	ff d0                	callq  *%rax
  40cc51:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  40cc58:	00 
  40cc59:	48 85 ff             	test   %rdi,%rdi
  40cc5c:	74 0f                	je     40cc6d <main+0x2eed>
  40cc5e:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40cc65:	ff ff ff 
  40cc68:	48 01 d8             	add    %rbx,%rax
  40cc6b:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40cc6d:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  40cc74:	00 
	if (__p)
  40cc75:	48 85 ff             	test   %rdi,%rdi
  40cc78:	74 12                	je     40cc8c <main+0x2f0c>
  40cc7a:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40cc81:	ff ff ff 
  40cc84:	49 89 df             	mov    %rbx,%r15
  40cc87:	48 01 d8             	add    %rbx,%rax
  40cc8a:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40cc8c:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  40cc93:	00 
	if (__p)
  40cc94:	48 85 ff             	test   %rdi,%rdi
  40cc97:	74 12                	je     40ccab <main+0x2f2b>
  40cc99:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40cca0:	ff ff ff 
  40cca3:	49 89 df             	mov    %rbx,%r15
  40cca6:	48 01 d8             	add    %rbx,%rax
  40cca9:	ff d0                	callq  *%rax
  40ccab:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  40ccb0:	48 8b 3c 24          	mov    (%rsp),%rdi
  40ccb4:	48 01 d8             	add    %rbx,%rax
  40ccb7:	ff d0                	callq  *%rax
  40ccb9:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  40ccc0:	00 
  40ccc1:	48 85 ff             	test   %rdi,%rdi
  40ccc4:	74 0f                	je     40ccd5 <main+0x2f55>
  40ccc6:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40cccd:	ff ff ff 
  40ccd0:	48 01 d8             	add    %rbx,%rax
  40ccd3:	ff d0                	callq  *%rax
  return 0;
  40ccd5:	31 ed                	xor    %ebp,%ebp
  40ccd7:	e9 c4 e3 ff ff       	jmpq   40b0a0 <main+0x1320>
	__throw_bad_cast();
  40ccdc:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  40cce3:	ff ff ff 
  40cce6:	48 01 d8             	add    %rbx,%rax
  40cce9:	ff d0                	callq  *%rax
  40cceb:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  40ccf2:	ff ff ff 
  40ccf5:	48 01 d8             	add    %rbx,%rax
  40ccf8:	ff d0                	callq  *%rax
  40ccfa:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  40cd01:	ff ff ff 
  40cd04:	48 01 d8             	add    %rbx,%rax
  40cd07:	ff d0                	callq  *%rax
  40cd09:	48 89 c5             	mov    %rax,%rbp
    std::ofstream out(outputFile);
  40cd0c:	48 b8 80 e9 dd ff ff 	movabs $0xffffffffffdde980,%rax
  40cd13:	ff ff ff 
  40cd16:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40cd1b:	49 89 df             	mov    %rbx,%r15
  40cd1e:	48 01 d8             	add    %rbx,%rax
  40cd21:	ff d0                	callq  *%rax
  40cd23:	e9 53 fb ff ff       	jmpq   40c87b <main+0x2afb>
	__ostream_insert(__out, __s,
  40cd28:	48 b8 e7 7f df ff ff 	movabs $0xffffffffffdf7fe7,%rax
  40cd2f:	ff ff ff 
  40cd32:	ba 18 00 00 00       	mov    $0x18,%edx
  40cd37:	49 89 df             	mov    %rbx,%r15
  40cd3a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40cd3e:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  40cd45:	ff ff ff 
  40cd48:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  40cd4c:	48 b8 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rax
  40cd53:	ff ff ff 
  40cd56:	48 01 d8             	add    %rbx,%rax
  40cd59:	ff d0                	callq  *%rax
	return __pf(*this);
  40cd5b:	48 b8 10 31 de ff ff 	movabs $0xffffffffffde3110,%rax
  40cd62:	ff ff ff 
  40cd65:	48 01 d8             	add    %rbx,%rax
  40cd68:	ff d0                	callq  *%rax
  40cd6a:	e9 e2 fe ff ff       	jmpq   40cc51 <main+0x2ed1>
  40cd6f:	48 89 c5             	mov    %rax,%rbp
      __catch(...)
  40cd72:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  40cd79:	ff ff ff 
  40cd7c:	49 89 df             	mov    %rbx,%r15
  40cd7f:	48 01 d8             	add    %rbx,%rax
  40cd82:	ff d0                	callq  *%rax
  40cd84:	e9 54 fd ff ff       	jmpq   40cadd <main+0x2d5d>
	    return &_M_single_bucket;
  40cd89:	48 b8 10 d2 9b 3b 00 	movabs $0x3b9bd210,%rax
  40cd90:	00 00 00 
	    _M_single_bucket = nullptr;
  40cd93:	48 c7 44 1d 50 00 00 	movq   $0x0,0x50(%rbp,%rbx,1)
  40cd9a:	00 00 
	    return &_M_single_bucket;
  40cd9c:	48 01 d8             	add    %rbx,%rax
  40cd9f:	e9 94 e7 ff ff       	jmpq   40b538 <main+0x17b8>
	__builtin_memset(_M_buckets, 0,
  40cda4:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  40cdab:	ff ff ff 
  40cdae:	4a 8d 14 ed 00 00 00 	lea    0x0(,%r13,8),%rdx
  40cdb5:	00 
  40cdb6:	48 8b 7c 1d 20       	mov    0x20(%rbp,%rbx,1),%rdi
  40cdbb:	31 f6                	xor    %esi,%esi
  40cdbd:	49 89 df             	mov    %rbx,%r15
  40cdc0:	48 01 d8             	add    %rbx,%rax
      __bucket_type* __former_buckets = nullptr;
  40cdc3:	45 31 e4             	xor    %r12d,%r12d
	__builtin_memset(_M_buckets, 0,
  40cdc6:	ff d0                	callq  *%rax
  40cdc8:	e9 75 e7 ff ff       	jmpq   40b542 <main+0x17c2>
  40cdcd:	48 89 c5             	mov    %rax,%rbp
  40cdd0:	48 b8 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rax
  40cdd7:	ff ff ff 
  40cdda:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40cddf:	e9 12 fd ff ff       	jmpq   40caf6 <main+0x2d76>
	  std::__throw_bad_alloc();
  40cde4:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  40cdeb:	ff ff ff 
  40cdee:	48 be 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rsi
  40cdf5:	ff ff ff 
  40cdf8:	49 89 df             	mov    %rbx,%r15
  40cdfb:	48 01 d8             	add    %rbx,%rax
  40cdfe:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  40ce03:	ff d0                	callq  *%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  40ce05:	31 c0                	xor    %eax,%eax
  40ce07:	e9 e3 e5 ff ff       	jmpq   40b3ef <main+0x166f>
  40ce0c:	49 89 c5             	mov    %rax,%r13
  40ce0f:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  40ce16:	ff ff ff 
  40ce19:	48 89 ef             	mov    %rbp,%rdi
  40ce1c:	49 89 df             	mov    %rbx,%r15
  40ce1f:	48 01 d8             	add    %rbx,%rax
  40ce22:	4c 89 ed             	mov    %r13,%rbp
  40ce25:	ff d0                	callq  *%rax
  40ce27:	e9 df fa ff ff       	jmpq   40c90b <main+0x2b8b>
  40ce2c:	48 89 c5             	mov    %rax,%rbp
  40ce2f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40ce34:	48 8b bc 24 b0 04 00 	mov    0x4b0(%rsp),%rdi
  40ce3b:	00 
  40ce3c:	48 83 c0 10          	add    $0x10,%rax
  40ce40:	48 39 c7             	cmp    %rax,%rdi
  40ce43:	0f 84 42 f9 ff ff    	je     40c78b <main+0x2a0b>
      { ::operator delete(__p); }
  40ce49:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  40ce50:	ff ff ff 
  40ce53:	49 89 df             	mov    %rbx,%r15
  40ce56:	48 01 da             	add    %rbx,%rdx
  40ce59:	ff d2                	callq  *%rdx
  40ce5b:	e9 2b f9 ff ff       	jmpq   40c78b <main+0x2a0b>
  40ce60:	48 89 c5             	mov    %rax,%rbp
  40ce63:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40ce6a:	00 
  40ce6b:	48 85 ff             	test   %rdi,%rdi
  40ce6e:	74 0f                	je     40ce7f <main+0x30ff>
  40ce70:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40ce77:	ff ff ff 
  40ce7a:	48 01 d8             	add    %rbx,%rax
  40ce7d:	ff d0                	callq  *%rax
  40ce7f:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40ce86:	00 
  40ce87:	48 85 ff             	test   %rdi,%rdi
  40ce8a:	74 0f                	je     40ce9b <main+0x311b>
  40ce8c:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40ce93:	ff ff ff 
  40ce96:	48 01 d8             	add    %rbx,%rax
  40ce99:	ff d0                	callq  *%rax
  for (const auto& node : config["map"]["obstacles"]) {
  40ce9b:	48 b8 20 b8 de ff ff 	movabs $0xffffffffffdeb820,%rax
  40cea2:	ff ff ff 
  40cea5:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40ceaa:	48 01 d8             	add    %rbx,%rax
  40cead:	ff d0                	callq  *%rax
  40ceaf:	48 8b bc 24 d8 02 00 	mov    0x2d8(%rsp),%rdi
  40ceb6:	00 
  40ceb7:	48 85 ff             	test   %rdi,%rdi
  40ceba:	74 0f                	je     40cecb <main+0x314b>
  40cebc:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40cec3:	ff ff ff 
  40cec6:	48 01 d8             	add    %rbx,%rax
  40cec9:	ff d0                	callq  *%rax
  40cecb:	48 8b bc 24 a8 02 00 	mov    0x2a8(%rsp),%rdi
  40ced2:	00 
  40ced3:	48 85 ff             	test   %rdi,%rdi
  40ced6:	74 0f                	je     40cee7 <main+0x3167>
  40ced8:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40cedf:	ff ff ff 
  40cee2:	48 01 d8             	add    %rbx,%rax
  40cee5:	ff d0                	callq  *%rax
  40cee7:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  40ceee:	00 
  40ceef:	48 85 ff             	test   %rdi,%rdi
  40cef2:	0f 84 74 f9 ff ff    	je     40c86c <main+0x2aec>
  40cef8:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40ceff:	ff ff ff 
  40cf02:	48 01 d8             	add    %rbx,%rax
  40cf05:	ff d0                	callq  *%rax
  40cf07:	e9 60 f9 ff ff       	jmpq   40c86c <main+0x2aec>
  40cf0c:	48 89 c5             	mov    %rax,%rbp
  40cf0f:	e9 6b ff ff ff       	jmpq   40ce7f <main+0x30ff>
  40cf14:	4d 85 e4             	test   %r12,%r12
  40cf17:	48 89 c5             	mov    %rax,%rbp
  40cf1a:	74 1a                	je     40cf36 <main+0x31b6>
  40cf1c:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40cf23:	ff ff ff 
  40cf26:	4c 89 e7             	mov    %r12,%rdi
  40cf29:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  40cf2d:	41 ff d5             	callq  *%r13
  40cf30:	4c 89 e7             	mov    %r12,%rdi
  40cf33:	41 ff d5             	callq  *%r13
  40cf36:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  40cf3d:	00 
  40cf3e:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  40cf45:	00 
  40cf46:	48 83 c0 10          	add    $0x10,%rax
  40cf4a:	48 39 c7             	cmp    %rax,%rdi
  40cf4d:	74 12                	je     40cf61 <main+0x31e1>
  40cf4f:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40cf56:	ff ff ff 
  40cf59:	49 89 df             	mov    %rbx,%r15
  40cf5c:	48 01 d8             	add    %rbx,%rax
  40cf5f:	ff d0                	callq  *%rax
  40cf61:	4d 85 e4             	test   %r12,%r12
  40cf64:	0f 84 a1 f9 ff ff    	je     40c90b <main+0x2b8b>
  40cf6a:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40cf71:	ff ff ff 
  40cf74:	4c 89 e7             	mov    %r12,%rdi
  40cf77:	48 01 d8             	add    %rbx,%rax
  40cf7a:	ff d0                	callq  *%rax
  40cf7c:	e9 8a f9 ff ff       	jmpq   40c90b <main+0x2b8b>
  40cf81:	48 89 c5             	mov    %rax,%rbp
  40cf84:	e9 12 ff ff ff       	jmpq   40ce9b <main+0x311b>
  40cf89:	48 89 c5             	mov    %rax,%rbp
  40cf8c:	e9 3a ff ff ff       	jmpq   40cecb <main+0x314b>
  40cf91:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40cf98:	00 
  40cf99:	48 89 c5             	mov    %rax,%rbp
  40cf9c:	48 85 ff             	test   %rdi,%rdi
  40cf9f:	0f 84 c7 f8 ff ff    	je     40c86c <main+0x2aec>
  40cfa5:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40cfac:	ff ff ff 
  40cfaf:	48 01 d8             	add    %rbx,%rax
  40cfb2:	ff d0                	callq  *%rax
  40cfb4:	e9 b3 f8 ff ff       	jmpq   40c86c <main+0x2aec>
      ~basic_ios() { }
  40cfb9:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40cfc0:	ff ff ff 
  40cfc3:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40cfc8:	49 89 df             	mov    %rbx,%r15
  40cfcb:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40cfcf:	48 83 c7 70          	add    $0x70,%rdi
  40cfd3:	48 83 c0 10          	add    $0x10,%rax
  40cfd7:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40cfde:	00 
  40cfdf:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  40cfe6:	ff ff ff 
  40cfe9:	48 01 d8             	add    %rbx,%rax
  40cfec:	ff d0                	callq  *%rax
            lexical_istream_limited_src() BOOST_NOEXCEPT
  40cfee:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  40cff5:	ff ff ff 
  40cff8:	48 01 d8             	add    %rbx,%rax
  40cffb:	ff d0                	callq  *%rax
  40cffd:	48 83 ea 01          	sub    $0x1,%rdx
  40d001:	0f 85 2a 01 00 00    	jne    40d131 <main+0x33b1>
  } catch (po::error& e) {
  40d007:	48 89 c7             	mov    %rax,%rdi
  40d00a:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  40d011:	ff ff ff 
  40d014:	49 89 df             	mov    %rbx,%r15
  40d017:	48 01 d8             	add    %rbx,%rax
    std::cerr << e.what() << std::endl << std::endl;
  40d01a:	48 bd e8 ff ff ff ff 	movabs $0xffffffffffffffe8,%rbp
  40d021:	ff ff ff 
  } catch (po::error& e) {
  40d024:	ff d0                	callq  *%rax
    std::cerr << e.what() << std::endl << std::endl;
  40d026:	48 8b 10             	mov    (%rax),%rdx
  40d029:	48 89 c7             	mov    %rax,%rdi
  40d02c:	ff 52 10             	callq  *0x10(%rdx)
  40d02f:	48 89 c6             	mov    %rax,%rsi
  40d032:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40d039:	ff ff ff 
  40d03c:	48 8b 7c 1d 00       	mov    0x0(%rbp,%rbx,1),%rdi
  40d041:	48 01 d8             	add    %rbx,%rax
  40d044:	ff d0                	callq  *%rax
  40d046:	48 89 c7             	mov    %rax,%rdi
  40d049:	48 b8 70 e5 dd ff ff 	movabs $0xffffffffffdde570,%rax
  40d050:	ff ff ff 
  40d053:	49 89 c6             	mov    %rax,%r14
  40d056:	48 01 d8             	add    %rbx,%rax
  40d059:	ff d0                	callq  *%rax
  40d05b:	48 89 c7             	mov    %rax,%rdi
  40d05e:	4c 89 f0             	mov    %r14,%rax
  40d061:	48 01 d8             	add    %rbx,%rax
  40d064:	ff d0                	callq  *%rax
    std::cerr << desc << std::endl;
  40d066:	48 b8 80 e4 dd ff ff 	movabs $0xffffffffffdde480,%rax
  40d06d:	ff ff ff 
  40d070:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  40d075:	48 8b 7c 1d 00       	mov    0x0(%rbp,%rbx,1),%rdi
  40d07a:	48 01 d8             	add    %rbx,%rax
  40d07d:	ff d0                	callq  *%rax
  40d07f:	48 89 c7             	mov    %rax,%rdi
  40d082:	4c 89 f0             	mov    %r14,%rax
  40d085:	48 01 d8             	add    %rbx,%rax
  40d088:	ff d0                	callq  *%rax
  } catch (po::error& e) {
  40d08a:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  40d091:	ff ff ff 
    return 1;
  40d094:	bd 01 00 00 00       	mov    $0x1,%ebp
  } catch (po::error& e) {
  40d099:	48 01 d8             	add    %rbx,%rax
  40d09c:	ff d0                	callq  *%rax
  40d09e:	e9 fd df ff ff       	jmpq   40b0a0 <main+0x1320>
  40d0a3:	48 89 c5             	mov    %rax,%rbp
      ~basic_ostream() { }
  40d0a6:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40d0aa:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40d0af:	49 89 df             	mov    %rbx,%r15
  40d0b2:	48 83 c0 18          	add    $0x18,%rax
  40d0b6:	49 8d 7e 70          	lea    0x70(%r14),%rdi
  40d0ba:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  40d0c1:	00 
  40d0c2:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40d0c9:	ff ff ff 
  40d0cc:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40d0d0:	48 83 c0 10          	add    $0x10,%rax
  40d0d4:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40d0db:	00 
  40d0dc:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  40d0e3:	ff ff ff 
  40d0e6:	48 01 d8             	add    %rbx,%rax
  40d0e9:	ff d0                	callq  *%rax
  40d0eb:	48 b8 50 fc ff ff ff 	movabs $0xfffffffffffffc50,%rax
  40d0f2:	ff ff ff 
  40d0f5:	4c 89 f7             	mov    %r14,%rdi
  40d0f8:	48 01 d8             	add    %rbx,%rax
  40d0fb:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40d102:	00 
  40d103:	48 b8 30 b9 de ff ff 	movabs $0xffffffffffdeb930,%rax
  40d10a:	ff ff ff 
  40d10d:	48 01 d8             	add    %rbx,%rax
  40d110:	ff d0                	callq  *%rax
  40d112:	e9 e8 f5 ff ff       	jmpq   40c6ff <main+0x297f>
  40d117:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  40d11e:	ff ff ff 
  40d121:	48 89 c5             	mov    %rax,%rbp
  40d124:	49 89 df             	mov    %rbx,%r15
  40d127:	48 01 da             	add    %rbx,%rdx
  40d12a:	ff d2                	callq  *%rdx
  40d12c:	e9 f6 f5 ff ff       	jmpq   40c727 <main+0x29a7>
  40d131:	48 89 c5             	mov    %rax,%rbp
  40d134:	e9 ee f5 ff ff       	jmpq   40c727 <main+0x29a7>
  40d139:	48 89 c5             	mov    %rax,%rbp
  40d13c:	e9 a6 fd ff ff       	jmpq   40cee7 <main+0x3167>
  40d141:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40d148:	00 
  40d149:	48 89 c5             	mov    %rax,%rbp
  40d14c:	48 85 ff             	test   %rdi,%rdi
  40d14f:	0f 84 17 f7 ff ff    	je     40c86c <main+0x2aec>
  40d155:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40d15c:	ff ff ff 
  40d15f:	48 01 d8             	add    %rbx,%rax
  40d162:	ff d0                	callq  *%rax
  40d164:	e9 03 f7 ff ff       	jmpq   40c86c <main+0x2aec>
  40d169:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40d170:	00 
  40d171:	48 89 c5             	mov    %rax,%rbp
  40d174:	48 85 ff             	test   %rdi,%rdi
  40d177:	0f 84 ef f6 ff ff    	je     40c86c <main+0x2aec>
  40d17d:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40d184:	ff ff ff 
  40d187:	48 01 d8             	add    %rbx,%rax
  40d18a:	ff d0                	callq  *%rax
  40d18c:	e9 db f6 ff ff       	jmpq   40c86c <main+0x2aec>
  40d191:	48 89 c5             	mov    %rax,%rbp
  40d194:	e9 e2 f6 ff ff       	jmpq   40c87b <main+0x2afb>
  40d199:	48 89 c5             	mov    %rax,%rbp
  40d19c:	e9 af f6 ff ff       	jmpq   40c850 <main+0x2ad0>
  40d1a1:	48 89 c5             	mov    %rax,%rbp
  40d1a4:	e9 8b f6 ff ff       	jmpq   40c834 <main+0x2ab4>
    throw InvalidNode();
  40d1a9:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  40d1b0:	ff ff ff 
  40d1b3:	bf 40 00 00 00       	mov    $0x40,%edi
  40d1b8:	49 89 df             	mov    %rbx,%r15
  40d1bb:	48 01 d8             	add    %rbx,%rax
  40d1be:	ff d0                	callq  *%rax
  40d1c0:	48 89 c5             	mov    %rax,%rbp
  40d1c3:	48 89 c7             	mov    %rax,%rdi
  40d1c6:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  40d1cd:	ff ff ff 
  40d1d0:	48 01 d8             	add    %rbx,%rax
  40d1d3:	ff d0                	callq  *%rax
  40d1d5:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  40d1dc:	ff ff ff 
  40d1df:	48 89 ef             	mov    %rbp,%rdi
  40d1e2:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40d1e6:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  40d1ed:	ff ff ff 
  40d1f0:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40d1f4:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  40d1fb:	ff ff ff 
  40d1fe:	48 01 d8             	add    %rbx,%rax
  40d201:	ff d0                	callq  *%rax
  40d203:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  40d20a:	ff ff ff 
  40d20d:	bf 40 00 00 00       	mov    $0x40,%edi
  40d212:	49 89 df             	mov    %rbx,%r15
  40d215:	48 01 d8             	add    %rbx,%rax
  40d218:	ff d0                	callq  *%rax
  40d21a:	48 89 c5             	mov    %rax,%rbp
  40d21d:	48 89 c7             	mov    %rax,%rdi
  40d220:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  40d227:	ff ff ff 
  40d22a:	48 01 d8             	add    %rbx,%rax
  40d22d:	ff d0                	callq  *%rax
  40d22f:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  40d236:	ff ff ff 
  40d239:	48 89 ef             	mov    %rbp,%rdi
  40d23c:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40d240:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  40d247:	ff ff ff 
  40d24a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40d24e:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  40d255:	ff ff ff 
  40d258:	48 01 d8             	add    %rbx,%rax
  40d25b:	ff d0                	callq  *%rax
  40d25d:	49 89 c4             	mov    %rax,%r12
  40d260:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  40d267:	ff ff ff 
  40d26a:	48 89 ef             	mov    %rbp,%rdi
  40d26d:	49 89 df             	mov    %rbx,%r15
  40d270:	48 01 d8             	add    %rbx,%rax
  40d273:	4c 89 e5             	mov    %r12,%rbp
  40d276:	ff d0                	callq  *%rax
  40d278:	e9 87 f5 ff ff       	jmpq   40c804 <main+0x2a84>
  40d27d:	49 89 c4             	mov    %rax,%r12
  40d280:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  40d287:	ff ff ff 
  40d28a:	48 89 ef             	mov    %rbp,%rdi
  40d28d:	49 89 df             	mov    %rbx,%r15
  40d290:	48 01 d8             	add    %rbx,%rax
  40d293:	4c 89 e5             	mov    %r12,%rbp
  40d296:	ff d0                	callq  *%rax
  40d298:	e9 cc f6 ff ff       	jmpq   40c969 <main+0x2be9>
  40d29d:	48 89 c5             	mov    %rax,%rbp
  40d2a0:	e9 c4 f6 ff ff       	jmpq   40c969 <main+0x2be9>
  40d2a5:	4c 89 e7             	mov    %r12,%rdi
  return false;
  40d2a8:	31 ed                	xor    %ebp,%ebp
  40d2aa:	41 ff d6             	callq  *%r14
  40d2ad:	4c 89 e7             	mov    %r12,%rdi
  40d2b0:	41 ff d6             	callq  *%r14
  40d2b3:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40d2ba:	00 
  40d2bb:	e9 4c ea ff ff       	jmpq   40bd0c <main+0x1f8c>
  40d2c0:	48 89 c5             	mov    %rax,%rbp
  40d2c3:	e9 a8 f7 ff ff       	jmpq   40ca70 <main+0x2cf0>
  40d2c8:	48 89 c5             	mov    %rax,%rbp
  40d2cb:	e9 34 f5 ff ff       	jmpq   40c804 <main+0x2a84>
  40d2d0:	48 89 c5             	mov    %rax,%rbp
  40d2d3:	e9 15 f5 ff ff       	jmpq   40c7ed <main+0x2a6d>
  40d2d8:	48 b8 1c ec dd ff ff 	movabs $0xffffffffffddec1c,%rax
  40d2df:	ff ff ff 
  40d2e2:	48 01 d8             	add    %rbx,%rax
  40d2e5:	ff d0                	callq  *%rax
  40d2e7:	49 89 c4             	mov    %rax,%r12
  40d2ea:	48 89 d5             	mov    %rdx,%rbp
    po::variables_map vm;
  40d2ed:	48 b8 90 4e df ff ff 	movabs $0xffffffffffdf4e90,%rax
  40d2f4:	ff ff ff 
  40d2f7:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40d2fc:	48 01 d8             	add    %rbx,%rax
  40d2ff:	ff d0                	callq  *%rax
  40d301:	4c 89 e0             	mov    %r12,%rax
  40d304:	48 89 ea             	mov    %rbp,%rdx
  40d307:	e9 f1 fc ff ff       	jmpq   40cffd <main+0x327d>
  40d30c:	49 89 c4             	mov    %rax,%r12
  40d30f:	48 b8 f0 c0 de ff ff 	movabs $0xffffffffffdec0f0,%rax
  40d316:	ff ff ff 
  40d319:	48 89 d5             	mov    %rdx,%rbp
  40d31c:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40d321:	48 01 d8             	add    %rbx,%rax
  40d324:	ff d0                	callq  *%rax
      if (vtable) {
  40d326:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  40d32d:	00 
  40d32e:	48 85 c0             	test   %rax,%rax
  40d331:	74 ba                	je     40d2ed <main+0x356d>
        if (!this->has_trivial_copy_and_destroy())
  40d333:	a8 01                	test   $0x1,%al
  40d335:	75 b6                	jne    40d2ed <main+0x356d>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40d337:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  40d33b:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  40d33e:	48 85 c0             	test   %rax,%rax
  40d341:	74 aa                	je     40d2ed <main+0x356d>
            base.manager(functor, functor, destroy_functor_tag);
  40d343:	48 8d bc 24 18 03 00 	lea    0x318(%rsp),%rdi
  40d34a:	00 
  40d34b:	ba 02 00 00 00       	mov    $0x2,%edx
  40d350:	48 89 fe             	mov    %rdi,%rsi
  40d353:	ff d0                	callq  *%rax
  40d355:	eb 96                	jmp    40d2ed <main+0x356d>
  40d357:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40d35e:	00 
  40d35f:	48 89 c5             	mov    %rax,%rbp
  40d362:	48 85 ff             	test   %rdi,%rdi
  40d365:	74 0f                	je     40d376 <main+0x35f6>
  40d367:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40d36e:	ff ff ff 
  40d371:	48 01 d8             	add    %rbx,%rax
  40d374:	ff d0                	callq  *%rax
  40d376:	48 b8 00 bc de ff ff 	movabs $0xffffffffffdebc00,%rax
  40d37d:	ff ff ff 
  40d380:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40d385:	e9 0d f5 ff ff       	jmpq   40c897 <main+0x2b17>
  40d38a:	49 89 c4             	mov    %rax,%r12
    class basic_command_line_parser : private detail::cmdline {
  40d38d:	48 b8 60 c0 de ff ff 	movabs $0xffffffffffdec060,%rax
  40d394:	ff ff ff 
  40d397:	48 89 d5             	mov    %rdx,%rbp
  40d39a:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40d39f:	48 01 d8             	add    %rbx,%rax
  40d3a2:	ff d0                	callq  *%rax
      if (vtable) {
  40d3a4:	48 8b 94 24 e0 02 00 	mov    0x2e0(%rsp),%rdx
  40d3ab:	00 
  40d3ac:	48 85 d2             	test   %rdx,%rdx
  40d3af:	0f 84 71 ff ff ff    	je     40d326 <main+0x35a6>
        if (!this->has_trivial_copy_and_destroy())
  40d3b5:	f6 c2 01             	test   $0x1,%dl
  40d3b8:	0f 85 68 ff ff ff    	jne    40d326 <main+0x35a6>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40d3be:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
  40d3c2:	48 8b 02             	mov    (%rdx),%rax
          if (base.manager)
  40d3c5:	48 85 c0             	test   %rax,%rax
  40d3c8:	0f 84 58 ff ff ff    	je     40d326 <main+0x35a6>
            base.manager(functor, functor, destroy_functor_tag);
  40d3ce:	48 8d bc 24 e8 02 00 	lea    0x2e8(%rsp),%rdi
  40d3d5:	00 
  40d3d6:	ba 02 00 00 00       	mov    $0x2,%edx
  40d3db:	48 89 fe             	mov    %rdi,%rsi
  40d3de:	ff d0                	callq  *%rax
  40d3e0:	e9 41 ff ff ff       	jmpq   40d326 <main+0x35a6>
  40d3e5:	49 89 c4             	mov    %rax,%r12
  40d3e8:	48 89 d5             	mov    %rdx,%rbp
  40d3eb:	eb b7                	jmp    40d3a4 <main+0x3624>
	  return iterator(__node);
	}
      __catch(...)
  40d3ed:	48 89 c7             	mov    %rax,%rdi
  40d3f0:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  40d3f7:	ff ff ff 
  40d3fa:	49 89 df             	mov    %rbx,%r15
  40d3fd:	48 01 d8             	add    %rbx,%rax
  40d400:	ff d0                	callq  *%rax
  40d402:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40d409:	ff ff ff 
  40d40c:	48 89 ef             	mov    %rbp,%rdi
  40d40f:	48 01 d8             	add    %rbx,%rax
  40d412:	ff d0                	callq  *%rax
	{
	  this->_M_deallocate_node(__node);
	  __throw_exception_again;
  40d414:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  40d41b:	ff ff ff 
  40d41e:	48 01 d8             	add    %rbx,%rax
  40d421:	ff d0                	callq  *%rax
  40d423:	48 89 c5             	mov    %rax,%rbp
  40d426:	e9 4b ff ff ff       	jmpq   40d376 <main+0x35f6>
  40d42b:	48 89 c5             	mov    %rax,%rbp
      __catch(...)
  40d42e:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  40d435:	ff ff ff 
  40d438:	49 89 df             	mov    %rbx,%r15
  40d43b:	48 01 d8             	add    %rbx,%rax
  40d43e:	ff d0                	callq  *%rax
  40d440:	e9 1e fa ff ff       	jmpq   40ce63 <main+0x30e3>
  40d445:	48 89 c5             	mov    %rax,%rbp
  40d448:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40d44f:	00 
  40d450:	48 85 ff             	test   %rdi,%rdi
  40d453:	0f 84 17 f6 ff ff    	je     40ca70 <main+0x2cf0>
  40d459:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40d460:	ff ff ff 
  40d463:	48 01 d8             	add    %rbx,%rax
  40d466:	ff d0                	callq  *%rax
  40d468:	e9 03 f6 ff ff       	jmpq   40ca70 <main+0x2cf0>
  40d46d:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40d474:	00 
  40d475:	48 89 c5             	mov    %rax,%rbp
  40d478:	48 85 ff             	test   %rdi,%rdi
  40d47b:	74 cb                	je     40d448 <main+0x36c8>
  40d47d:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40d484:	ff ff ff 
  40d487:	48 01 d8             	add    %rbx,%rax
  40d48a:	ff d0                	callq  *%rax
  40d48c:	eb ba                	jmp    40d448 <main+0x36c8>
  40d48e:	4d 85 e4             	test   %r12,%r12
  40d491:	48 89 c5             	mov    %rax,%rbp
  40d494:	74 1a                	je     40d4b0 <main+0x3730>
  40d496:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  40d49d:	ff ff ff 
  40d4a0:	4c 89 e7             	mov    %r12,%rdi
  40d4a3:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  40d4a7:	41 ff d5             	callq  *%r13
  40d4aa:	4c 89 e7             	mov    %r12,%rdi
  40d4ad:	41 ff d5             	callq  *%r13
  40d4b0:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  40d4b7:	00 
  40d4b8:	48 8b bc 24 20 02 00 	mov    0x220(%rsp),%rdi
  40d4bf:	00 
  40d4c0:	48 83 c0 10          	add    $0x10,%rax
  40d4c4:	48 39 c7             	cmp    %rax,%rdi
  40d4c7:	74 12                	je     40d4db <main+0x375b>
  40d4c9:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40d4d0:	ff ff ff 
  40d4d3:	49 89 df             	mov    %rbx,%r15
  40d4d6:	48 01 d8             	add    %rbx,%rax
  40d4d9:	ff d0                	callq  *%rax
  40d4db:	4d 85 e4             	test   %r12,%r12
  40d4de:	0f 84 bf f2 ff ff    	je     40c7a3 <main+0x2a23>
  40d4e4:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  40d4eb:	ff ff ff 
  40d4ee:	4c 89 e7             	mov    %r12,%rdi
  40d4f1:	48 01 d8             	add    %rbx,%rax
  40d4f4:	ff d0                	callq  *%rax
  40d4f6:	e9 a8 f2 ff ff       	jmpq   40c7a3 <main+0x2a23>
  40d4fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040d500 <_GLOBAL__sub_I__ZlsRSoRK6Action>:
}
  40d500:	41 57                	push   %r15
  40d502:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40d500 <_GLOBAL__sub_I__ZlsRSoRK6Action>
  40d509:	41 54                	push   %r12
  40d50b:	49 bb 00 db 21 00 00 	movabs $0x21db00,%r11
  40d512:	00 00 00 
  40d515:	55                   	push   %rbp
  40d516:	53                   	push   %rbx
  40d517:	4d 01 df             	add    %r11,%r15
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  40d51a:	48 bb d8 50 9c 3b 00 	movabs $0x3b9c50d8,%rbx
  40d521:	00 00 00 
  40d524:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  40d52b:	ff ff ff 
  40d52e:	48 83 ec 08          	sub    $0x8,%rsp
  40d532:	49 8d 3c 1f          	lea    (%r15,%rbx,1),%rdi
  40d536:	4c 01 f8             	add    %r15,%rax
  40d539:	48 bd e0 03 00 00 00 	movabs $0x3e0,%rbp
  40d540:	00 00 00 
  40d543:	ff d0                	callq  *%rax
  40d545:	49 8d 34 1f          	lea    (%r15,%rbx,1),%rsi
  40d549:	48 b8 f8 ff ff ff ff 	movabs $0xfffffffffffffff8,%rax
  40d550:	ff ff ff 
  40d553:	48 bb 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rbx
  40d55a:	ff ff ff 
  40d55d:	4a 8d 54 3d 00       	lea    0x0(%rbp,%r15,1),%rdx
  40d562:	49 8b 3c 07          	mov    (%r15,%rax,1),%rdi
  40d566:	4e 8d 24 3b          	lea    (%rbx,%r15,1),%r12
  40d56a:	41 ff d4             	callq  *%r12
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  40d56d:	48 b8 c0 50 9c 3b 00 	movabs $0x3b9c50c0,%rax
  40d574:	00 00 00 




#define MAX_NODE_NUMS 1000000000 //upto 1e9 possible because 1e10 = 10gb  
std::vector<State> g_initialStates __attribute__((aligned(SWARM_ALIGNMENT)));
  40d577:	4a 8d 54 3d 00       	lea    0x0(%rbp,%r15,1),%rdx
  40d57c:	49 c7 04 07 00 00 00 	movq   $0x0,(%r15,%rax,1)
  40d583:	00 
  40d584:	49 c7 44 07 08 00 00 	movq   $0x0,0x8(%r15,%rax,1)
  40d58b:	00 00 
  40d58d:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40d591:	49 c7 44 07 10 00 00 	movq   $0x0,0x10(%r15,%rax,1)
  40d598:	00 00 
  40d59a:	48 b8 30 84 de ff ff 	movabs $0xffffffffffde8430,%rax
  40d5a1:	ff ff ff 
  40d5a4:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  40d5a8:	41 ff d4             	callq  *%r12
  40d5ab:	48 b8 80 d2 9b 3b 00 	movabs $0x3b9bd280,%rax
  40d5b2:	00 00 00 
  40d5b5:	4c 01 f8             	add    %r15,%rax
  40d5b8:	48 8d 90 40 7e 00 00 	lea    0x7e40(%rax),%rdx
  40d5bf:	90                   	nop
	Cost cost;
};

struct PlanResult {
	PlanResult() {
		states_size = 0;
  40d5c0:	48 c7 80 00 04 00 00 	movq   $0x0,0x400(%rax)
  40d5c7:	00 00 00 00 
		actions_size = 0;
  40d5cb:	48 c7 80 08 06 00 00 	movq   $0x0,0x608(%rax)
  40d5d2:	00 00 00 00 
  40d5d6:	48 05 50 06 00 00    	add    $0x650,%rax
		cost = 0;
  40d5dc:	c7 40 c0 00 00 00 00 	movl   $0x0,-0x40(%rax)
		fmin = 0;
  40d5e3:	c7 40 c4 00 00 00 00 	movl   $0x0,-0x3c(%rax)
		success = false;
  40d5ea:	c6 40 c8 00          	movb   $0x0,-0x38(%rax)
PlanResult g_solution[ROBOT_NUMS] __attribute__((aligned(SWARM_ALIGNMENT)));
  40d5ee:	48 39 d0             	cmp    %rdx,%rax
  40d5f1:	75 cd                	jne    40d5c0 <_GLOBAL__sub_I__ZlsRSoRK6Action+0xc0>
      _Hashtable() = default;
  40d5f3:	48 ba 10 d2 9b 3b 00 	movabs $0x3b9bd210,%rdx
  40d5fa:	00 00 00 
  40d5fd:	48 b8 c0 d1 9b 3b 00 	movabs $0x3b9bd1c0,%rax
  40d604:	00 00 00 
bool g_isNoConflict __attribute__((aligned(SWARM_ALIGNMENT)));
Environment g_env __attribute__((aligned(SWARM_ALIGNMENT)));
  40d607:	4c 01 fb             	add    %r15,%rbx
  40d60a:	4c 01 fa             	add    %r15,%rdx
  40d60d:	49 c7 04 07 00 00 00 	movq   $0x0,(%r15,%rax,1)
  40d614:	00 
  40d615:	49 c7 44 07 08 00 00 	movq   $0x0,0x8(%r15,%rax,1)
  40d61c:	00 00 
  40d61e:	49 89 54 07 20       	mov    %rdx,0x20(%r15,%rax,1)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40d623:	48 ba 38 93 df ff ff 	movabs $0xffffffffffdf9338,%rdx
  40d62a:	ff ff ff 
  40d62d:	49 c7 44 07 10 00 00 	movq   $0x0,0x10(%r15,%rax,1)
  40d634:	00 00 
  40d636:	f3 41 0f 10 04 17    	movss  (%r15,%rdx,1),%xmm0
  40d63c:	49 c7 44 07 28 01 00 	movq   $0x1,0x28(%r15,%rax,1)
  40d643:	00 00 
    _Hash_node_base() noexcept : _M_nxt() { }
  40d645:	49 c7 44 07 30 00 00 	movq   $0x0,0x30(%r15,%rax,1)
  40d64c:	00 00 
  40d64e:	49 c7 44 07 38 00 00 	movq   $0x0,0x38(%r15,%rax,1)
  40d655:	00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40d657:	f3 41 0f 11 44 07 40 	movss  %xmm0,0x40(%r15,%rax,1)
  40d65e:	49 c7 44 07 48 00 00 	movq   $0x0,0x48(%r15,%rax,1)
  40d665:	00 00 
  40d667:	49 c7 44 07 50 00 00 	movq   $0x0,0x50(%r15,%rax,1)
  40d66e:	00 00 
  40d670:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
        m_lowLevelExpanded(0) {}
  40d674:	41 c7 44 07 58 00 00 	movl   $0x0,0x58(%r15,%rax,1)
  40d67b:	00 00 
  40d67d:	4a 8d 54 3d 00       	lea    0x0(%rbp,%r15,1),%rdx
  40d682:	41 c7 44 07 5c 00 00 	movl   $0x0,0x5c(%r15,%rax,1)
  40d689:	00 00 
  40d68b:	48 b8 f0 9a de ff ff 	movabs $0xffffffffffde9af0,%rax
  40d692:	ff ff ff 
  40d695:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  40d699:	ff d3                	callq  *%rbx
  40d69b:	48 b8 00 d1 9a 3b 00 	movabs $0x3b9ad100,%rax
  40d6a2:	00 00 00 
  40d6a5:	4c 01 f8             	add    %r15,%rax
  40d6a8:	48 8d 90 40 7e 00 00 	lea    0x7e40(%rax),%rdx
  40d6af:	90                   	nop
		states_size = 0;
  40d6b0:	48 c7 80 00 04 00 00 	movq   $0x0,0x400(%rax)
  40d6b7:	00 00 00 00 
		actions_size = 0;
  40d6bb:	48 c7 80 08 06 00 00 	movq   $0x0,0x608(%rax)
  40d6c2:	00 00 00 00 
  40d6c6:	48 05 50 06 00 00    	add    $0x650,%rax
		cost = 0;
  40d6cc:	c7 40 c0 00 00 00 00 	movl   $0x0,-0x40(%rax)
		fmin = 0;
  40d6d3:	c7 40 c4 00 00 00 00 	movl   $0x0,-0x3c(%rax)
		success = false;
  40d6da:	c6 40 c8 00          	movb   $0x0,-0x38(%rax)
				openSet_t;
				typedef typename openSet_t::handle_type handle_t;
#endif // USE_FIBONACCI_HEAP
#endif // NO_SWARM

struct HighLevelNode {
  40d6de:	48 39 d0             	cmp    %rdx,%rax
  40d6e1:	75 cd                	jne    40d6b0 <_GLOBAL__sub_I__ZlsRSoRK6Action+0x1b0>
  40d6e3:	48 ba 40 d1 9b 3b 00 	movabs $0x3b9bd140,%rdx
  40d6ea:	00 00 00 
  40d6ed:	4c 01 fa             	add    %r15,%rdx
#include "swarm_headers.hpp"
#include "Constraint.hpp"

struct Constraints {
	Constraints() {
		vertexConstraints_size = 0;
  40d6f0:	c7 80 40 06 00 00 00 	movl   $0x0,0x640(%rax)
  40d6f7:	00 00 00 
		edgeConstraints_size = 0;
  40d6fa:	c7 80 44 06 00 00 00 	movl   $0x0,0x644(%rax)
  40d701:	00 00 00 
  40d704:	48 05 80 06 00 00    	add    $0x680,%rax
  40d70a:	48 39 c2             	cmp    %rax,%rdx
  40d70d:	75 e1                	jne    40d6f0 <_GLOBAL__sub_I__ZlsRSoRK6Action+0x1f0>
  40d70f:	48 83 c4 08          	add    $0x8,%rsp
  40d713:	5b                   	pop    %rbx
  40d714:	5d                   	pop    %rbp
  40d715:	41 5c                	pop    %r12
  40d717:	41 5f                	pop    %r15
  40d719:	c3                   	retq   
  40d71a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040d720 <_start>:
  40d720:	31 ed                	xor    %ebp,%ebp
  40d722:	49 89 d1             	mov    %rdx,%r9
  40d725:	5e                   	pop    %rsi
  40d726:	48 89 e2             	mov    %rsp,%rdx
  40d729:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40d72d:	50                   	push   %rax
  40d72e:	54                   	push   %rsp
  40d72f:	49 c7 c0 40 29 42 00 	mov    $0x422940,%r8
  40d736:	48 c7 c1 d0 28 42 00 	mov    $0x4228d0,%rcx
  40d73d:	48 c7 c7 80 9d 40 00 	mov    $0x409d80,%rdi
  40d744:	ff 15 8e d8 21 00    	callq  *0x21d88e(%rip)        # 62afd8 <__libc_start_main@GLIBC_2.2.5>
  40d74a:	f4                   	hlt    
  40d74b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040d750 <_dl_relocate_static_pie>:
  40d750:	f3 c3                	repz retq 
  40d752:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40d759:	00 00 00 
  40d75c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000040d760 <deregister_tm_clones>:
  40d760:	b8 0f b4 62 00       	mov    $0x62b40f,%eax
  40d765:	55                   	push   %rbp
  40d766:	48 2d 08 b4 62 00    	sub    $0x62b408,%rax
  40d76c:	48 83 f8 0e          	cmp    $0xe,%rax
  40d770:	48 89 e5             	mov    %rsp,%rbp
  40d773:	76 1b                	jbe    40d790 <deregister_tm_clones+0x30>
  40d775:	b8 00 00 00 00       	mov    $0x0,%eax
  40d77a:	48 85 c0             	test   %rax,%rax
  40d77d:	74 11                	je     40d790 <deregister_tm_clones+0x30>
  40d77f:	5d                   	pop    %rbp
  40d780:	bf 08 b4 62 00       	mov    $0x62b408,%edi
  40d785:	ff e0                	jmpq   *%rax
  40d787:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40d78e:	00 00 
  40d790:	5d                   	pop    %rbp
  40d791:	c3                   	retq   
  40d792:	0f 1f 40 00          	nopl   0x0(%rax)
  40d796:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40d79d:	00 00 00 

000000000040d7a0 <register_tm_clones>:
  40d7a0:	be 08 b4 62 00       	mov    $0x62b408,%esi
  40d7a5:	55                   	push   %rbp
  40d7a6:	48 81 ee 08 b4 62 00 	sub    $0x62b408,%rsi
  40d7ad:	48 c1 fe 03          	sar    $0x3,%rsi
  40d7b1:	48 89 e5             	mov    %rsp,%rbp
  40d7b4:	48 89 f0             	mov    %rsi,%rax
  40d7b7:	48 c1 e8 3f          	shr    $0x3f,%rax
  40d7bb:	48 01 c6             	add    %rax,%rsi
  40d7be:	48 d1 fe             	sar    %rsi
  40d7c1:	74 15                	je     40d7d8 <register_tm_clones+0x38>
  40d7c3:	b8 00 00 00 00       	mov    $0x0,%eax
  40d7c8:	48 85 c0             	test   %rax,%rax
  40d7cb:	74 0b                	je     40d7d8 <register_tm_clones+0x38>
  40d7cd:	5d                   	pop    %rbp
  40d7ce:	bf 08 b4 62 00       	mov    $0x62b408,%edi
  40d7d3:	ff e0                	jmpq   *%rax
  40d7d5:	0f 1f 00             	nopl   (%rax)
  40d7d8:	5d                   	pop    %rbp
  40d7d9:	c3                   	retq   
  40d7da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040d7e0 <__do_global_dtors_aux>:
  40d7e0:	80 3d 59 dc 21 00 00 	cmpb   $0x0,0x21dc59(%rip)        # 62b440 <completed.7664>
  40d7e7:	75 11                	jne    40d7fa <__do_global_dtors_aux+0x1a>
  40d7e9:	55                   	push   %rbp
  40d7ea:	48 89 e5             	mov    %rsp,%rbp
  40d7ed:	e8 6e ff ff ff       	callq  40d760 <deregister_tm_clones>
  40d7f2:	5d                   	pop    %rbp
  40d7f3:	c6 05 46 dc 21 00 01 	movb   $0x1,0x21dc46(%rip)        # 62b440 <completed.7664>
  40d7fa:	f3 c3                	repz retq 
  40d7fc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000040d800 <frame_dummy>:
  40d800:	bf 20 9f 62 00       	mov    $0x629f20,%edi
  40d805:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  40d809:	75 05                	jne    40d810 <frame_dummy+0x10>
  40d80b:	eb 93                	jmp    40d7a0 <register_tm_clones>
  40d80d:	0f 1f 00             	nopl   (%rax)
  40d810:	b8 00 00 00 00       	mov    $0x0,%eax
  40d815:	48 85 c0             	test   %rax,%rax
  40d818:	74 f1                	je     40d80b <frame_dummy+0xb>
  40d81a:	55                   	push   %rbp
  40d81b:	48 89 e5             	mov    %rsp,%rbp
  40d81e:	ff d0                	callq  *%rax
  40d820:	5d                   	pop    %rbp
  40d821:	e9 7a ff ff ff       	jmpq   40d7a0 <register_tm_clones>
  40d826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40d82d:	00 00 00 

000000000040d830 <_ZN5swarmL22task_exception_handlerEv>:
static void task_exception_handler() {
  40d830:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40d830 <_ZN5swarmL22task_exception_handlerEv>
  40d837:	49 bb d0 d7 21 00 00 	movabs $0x21d7d0,%r11
  40d83e:	00 00 00 
  40d841:	41 57                	push   %r15
  40d843:	4c 01 d8             	add    %r11,%rax
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d846:	b9 0a 04 00 00       	mov    $0x40a,%ecx
  40d84b:	48 87 c9             	xchg   %rcx,%rcx
    std::abort();  // if this fires, the task became non-speculative... not good
  40d84e:	48 ba d0 e5 dd ff ff 	movabs $0xffffffffffdde5d0,%rdx
  40d855:	ff ff ff 
  40d858:	49 89 c7             	mov    %rax,%r15
  40d85b:	48 01 c2             	add    %rax,%rdx
  40d85e:	ff d2                	callq  *%rdx

000000000040d860 <_ZN5swarmL10pls_workerEPv>:
static void* pls_worker(void* isMainThread) {
  40d860:	55                   	push   %rbp
  40d861:	48 8d 05 f8 ff ff ff 	lea    -0x8(%rip),%rax        # 40d860 <_ZN5swarmL10pls_workerEPv>
  40d868:	49 bb a0 d7 21 00 00 	movabs $0x21d7a0,%r11
  40d86f:	00 00 00 
  40d872:	48 89 e5             	mov    %rsp,%rbp
  40d875:	41 57                	push   %r15
  40d877:	41 56                	push   %r14
  40d879:	41 55                	push   %r13
  40d87b:	41 54                	push   %r12
  40d87d:	4c 01 d8             	add    %r11,%rax
  40d880:	53                   	push   %rbx
  40d881:	48 83 ec 78          	sub    $0x78,%rsp
    if (isMainThread) sim_stack_base(__builtin_frame_address(0));
  40d885:	48 85 ff             	test   %rdi,%rdi
  40d888:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
static void* pls_worker(void* isMainThread) {
  40d88f:	48 89 bd 70 ff ff ff 	mov    %rdi,-0x90(%rbp)
    if (isMainThread) sim_stack_base(__builtin_frame_address(0));
  40d896:	0f 84 2c 02 00 00    	je     40dac8 <_ZN5swarmL10pls_workerEPv+0x268>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40d89c:	b9 06 04 00 00       	mov    $0x406,%ecx
  40d8a1:	48 89 ef             	mov    %rbp,%rdi
  40d8a4:	48 87 c9             	xchg   %rcx,%rcx
    assert((!!swarm::__mainThreadFSAddr()) == (!!swarm::__mainThreadFSAddr()));
  40d8a7:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  40d8ae:	48 b8 28 51 9c 3b 00 	movabs $0x3b9c5128,%rax
  40d8b5:	00 00 00 
  40d8b8:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40d8bf:	48 8b 04 30          	mov    (%rax,%rsi,1),%rax
  40d8c3:	48 85 c0             	test   %rax,%rax
  40d8c6:	0f 94 c1             	sete   %cl
  40d8c9:	0f 95 c2             	setne  %dl
  40d8cc:	38 d1                	cmp    %dl,%cl
  40d8ce:	0f 84 63 02 00 00    	je     40db37 <_ZN5swarmL10pls_workerEPv+0x2d7>
    if (swarm::__mainThreadFSAddr()) {
  40d8d4:	48 85 c0             	test   %rax,%rax
  40d8d7:	0f 85 73 01 00 00    	jne    40da50 <_ZN5swarmL10pls_workerEPv+0x1f0>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d8dd:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d8e2:	48 87 c9             	xchg   %rcx,%rcx
    if (isMainThread) zsim_roi_begin();
  40d8e5:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
  40d8ec:	00 
  40d8ed:	74 5c                	je     40d94b <_ZN5swarmL10pls_workerEPv+0xeb>
// Op defs (some kept "zsim_XXX" for backwards compatibility)

#define HOOKS_STR  "HOOKS"

static inline void zsim_roi_begin(void) {
    fflush(NULL);
  40d8ef:	4c 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%r14
  40d8f6:	48 bb 60 e8 dd ff ff 	movabs $0xffffffffffdde860,%rbx
  40d8fd:	ff ff ff 
  40d900:	31 ff                	xor    %edi,%edi
  40d902:	4d 89 f7             	mov    %r14,%r15
  40d905:	4c 01 f3             	add    %r14,%rbx
  40d908:	ff d3                	callq  *%rbx
  40d90a:	48 b8 9f 7d df ff ff 	movabs $0xffffffffffdf7d9f,%rax
  40d911:	ff ff ff 
  40d914:	4c 89 f6             	mov    %r14,%rsi
  40d917:	48 ba f0 e3 dd ff ff 	movabs $0xffffffffffdde3f0,%rdx
  40d91e:	ff ff ff 
  40d921:	48 01 c6             	add    %rax,%rsi
  40d924:	4c 01 f2             	add    %r14,%rdx
  40d927:	bf 01 00 00 00       	mov    $0x1,%edi
  40d92c:	31 c0                	xor    %eax,%eax
  40d92e:	ff d2                	callq  *%rdx
    printf("[" HOOKS_STR "] ROI begin\n");
    fflush(stdout);
  40d930:	48 b8 70 ff ff ff ff 	movabs $0xffffffffffffff70,%rax
  40d937:	ff ff ff 
  40d93a:	49 8b 04 06          	mov    (%r14,%rax,1),%rax
  40d93e:	48 8b 38             	mov    (%rax),%rdi
  40d941:	ff d3                	callq  *%rbx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d943:	b9 01 04 00 00       	mov    $0x401,%ecx
  40d948:	48 87 c9             	xchg   %rcx,%rcx
  40d94b:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d950:	48 87 c9             	xchg   %rcx,%rcx
             * work without -fomit-frame-pointer...
             */
            : "rax", "rbx", "rdx", "rsi", "rdi",
            "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
            "flags", "memory"
            );
  40d953:	b9 00 08 00 00       	mov    $0x800,%ecx
  40d958:	55                   	push   %rbp
  40d959:	48 c7 c6 71 d9 40 00 	mov    $0x40d971,%rsi
  40d960:	48 c7 c7 71 d9 40 00 	mov    $0x40d971,%rdi
  40d967:	48 c7 c2 74 d9 40 00 	mov    $0x40d974,%rdx
  40d96e:	48 87 c9             	xchg   %rcx,%rcx
  40d971:	48 87 d2             	xchg   %rdx,%rdx
  40d974:	5d                   	pop    %rbp
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d975:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d97a:	48 87 c9             	xchg   %rcx,%rcx
    if (isMainThread) zsim_roi_end();
  40d97d:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
  40d984:	00 
  40d985:	74 5c                	je     40d9e3 <_ZN5swarmL10pls_workerEPv+0x183>
  40d987:	b9 02 04 00 00       	mov    $0x402,%ecx
  40d98c:	48 87 c9             	xchg   %rcx,%rcx
    fflush(NULL);
  40d98f:	4c 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%r14
  40d996:	48 bb 60 e8 dd ff ff 	movabs $0xffffffffffdde860,%rbx
  40d99d:	ff ff ff 
  40d9a0:	31 ff                	xor    %edi,%edi
  40d9a2:	4d 89 f7             	mov    %r14,%r15
  40d9a5:	4c 01 f3             	add    %r14,%rbx
  40d9a8:	ff d3                	callq  *%rbx
  40d9aa:	48 b8 b2 7d df ff ff 	movabs $0xffffffffffdf7db2,%rax
  40d9b1:	ff ff ff 
  40d9b4:	4c 89 f6             	mov    %r14,%rsi
  40d9b7:	48 ba f0 e3 dd ff ff 	movabs $0xffffffffffdde3f0,%rdx
  40d9be:	ff ff ff 
  40d9c1:	48 01 c6             	add    %rax,%rsi
  40d9c4:	bf 01 00 00 00       	mov    $0x1,%edi
  40d9c9:	31 c0                	xor    %eax,%eax
  40d9cb:	4c 01 f2             	add    %r14,%rdx
  40d9ce:	ff d2                	callq  *%rdx
    fflush(stdout);
  40d9d0:	48 b8 70 ff ff ff ff 	movabs $0xffffffffffffff70,%rax
  40d9d7:	ff ff ff 
  40d9da:	49 8b 04 06          	mov    (%r14,%rax,1),%rax
  40d9de:	48 8b 38             	mov    (%rax),%rdi
  40d9e1:	ff d3                	callq  *%rbx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d9e3:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d9e8:	48 87 c9             	xchg   %rcx,%rcx
    if (swarm::__mainThreadFSAddr()) {
  40d9eb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40d9f2:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  40d9f9:	48 83 3c 30 00       	cmpq   $0x0,(%rax,%rsi,1)
  40d9fe:	74 37                	je     40da37 <_ZN5swarmL10pls_workerEPv+0x1d7>
  40da00:	49 89 f6             	mov    %rsi,%r14
    return syscall(SYS_arch_prctl, code, addr);
  40da03:	48 bb 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rbx
  40da0a:	ff ff ff 
  40da0d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40da11:	be 02 10 00 00       	mov    $0x1002,%esi
  40da16:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da1b:	4d 89 f7             	mov    %r14,%r15
  40da1e:	31 c0                	xor    %eax,%eax
  40da20:	4c 01 f3             	add    %r14,%rbx
  40da23:	ff d3                	callq  *%rbx
  40da25:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40da29:	be 01 10 00 00       	mov    $0x1001,%esi
  40da2e:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da33:	31 c0                	xor    %eax,%eax
  40da35:	ff d3                	callq  *%rbx
}
  40da37:	48 83 c4 78          	add    $0x78,%rsp
  40da3b:	31 c0                	xor    %eax,%eax
  40da3d:	5b                   	pop    %rbx
  40da3e:	41 5c                	pop    %r12
  40da40:	41 5d                	pop    %r13
  40da42:	41 5e                	pop    %r14
  40da44:	41 5f                	pop    %r15
  40da46:	5d                   	pop    %rbp
  40da47:	c3                   	retq   
  40da48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40da4f:	00 
  40da50:	49 89 f6             	mov    %rsi,%r14
    return syscall(SYS_arch_prctl, code, addr);
  40da53:	48 bb 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rbx
  40da5a:	ff ff ff 
        __arch_prctl(ARCH_GET_FS,
  40da5d:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
    return syscall(SYS_arch_prctl, code, addr);
  40da61:	4d 89 f7             	mov    %r14,%r15
  40da64:	4c 01 f3             	add    %r14,%rbx
  40da67:	be 03 10 00 00       	mov    $0x1003,%esi
  40da6c:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da71:	31 c0                	xor    %eax,%eax
  40da73:	ff d3                	callq  *%rbx
        __arch_prctl(ARCH_GET_GS,
  40da75:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    return syscall(SYS_arch_prctl, code, addr);
  40da79:	be 04 10 00 00       	mov    $0x1004,%esi
  40da7e:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da83:	31 c0                	xor    %eax,%eax
  40da85:	ff d3                	callq  *%rbx
  40da87:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40da8e:	be 02 10 00 00       	mov    $0x1002,%esi
  40da93:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da98:	4a 8b 14 30          	mov    (%rax,%r14,1),%rdx
  40da9c:	31 c0                	xor    %eax,%eax
  40da9e:	ff d3                	callq  *%rbx
        __arch_prctl(ARCH_SET_GS, swarm::__mainThreadGSAddr());
  40daa0:	48 b8 20 51 9c 3b 00 	movabs $0x3b9c5120,%rax
  40daa7:	00 00 00 
    return syscall(SYS_arch_prctl, code, addr);
  40daaa:	be 01 10 00 00       	mov    $0x1001,%esi
  40daaf:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40dab4:	49 8b 14 06          	mov    (%r14,%rax,1),%rdx
  40dab8:	31 c0                	xor    %eax,%eax
  40daba:	ff d3                	callq  *%rbx
  40dabc:	e9 1c fe ff ff       	jmpq   40d8dd <_ZN5swarmL10pls_workerEPv+0x7d>
  40dac1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    err = pthread_getattr_np(pthread_self(), &attr);
  40dac8:	4c 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%r14
  40dacf:	48 b8 70 e7 dd ff ff 	movabs $0xffffffffffdde770,%rax
  40dad6:	ff ff ff 
  40dad9:	48 8d 5d 90          	lea    -0x70(%rbp),%rbx
  40dadd:	4d 89 f7             	mov    %r14,%r15
  40dae0:	4c 01 f0             	add    %r14,%rax
  40dae3:	ff d0                	callq  *%rax
  40dae5:	48 89 c7             	mov    %rax,%rdi
  40dae8:	48 b8 00 e9 dd ff ff 	movabs $0xffffffffffdde900,%rax
  40daef:	ff ff ff 
  40daf2:	48 89 de             	mov    %rbx,%rsi
  40daf5:	4c 01 f0             	add    %r14,%rax
  40daf8:	ff d0                	callq  *%rax
    if (err != 0) std::abort();
  40dafa:	85 c0                	test   %eax,%eax
  40dafc:	75 7f                	jne    40db7d <_ZN5swarmL10pls_workerEPv+0x31d>
    err = pthread_attr_getstack(&attr, &stkaddr, &v);
  40dafe:	48 89 df             	mov    %rbx,%rdi
  40db01:	48 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%rbx
  40db08:	48 b8 f0 e6 dd ff ff 	movabs $0xffffffffffdde6f0,%rax
  40db0f:	ff ff ff 
  40db12:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
  40db16:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
  40db1a:	48 01 d8             	add    %rbx,%rax
  40db1d:	49 89 df             	mov    %rbx,%r15
  40db20:	ff d0                	callq  *%rax
    if (err != 0) std::abort();
  40db22:	85 c0                	test   %eax,%eax
  40db24:	75 57                	jne    40db7d <_ZN5swarmL10pls_workerEPv+0x31d>
    return reinterpret_cast<uint64_t>(ptr);
  40db26:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40db2a:	b9 06 04 00 00       	mov    $0x406,%ecx
  40db2f:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40db32:	e9 70 fd ff ff       	jmpq   40d8a7 <_ZN5swarmL10pls_workerEPv+0x47>
    assert((!!swarm::__mainThreadFSAddr()) == (!!swarm::__mainThreadFSAddr()));
  40db37:	48 b8 50 82 df ff ff 	movabs $0xffffffffffdf8250,%rax
  40db3e:	ff ff ff 
  40db41:	48 89 f3             	mov    %rsi,%rbx
  40db44:	48 89 f7             	mov    %rsi,%rdi
  40db47:	48 8d 0c 06          	lea    (%rsi,%rax,1),%rcx
  40db4b:	48 b8 b0 79 df ff ff 	movabs $0xffffffffffdf79b0,%rax
  40db52:	ff ff ff 
  40db55:	ba 6f 00 00 00       	mov    $0x6f,%edx
  40db5a:	48 8d 34 06          	lea    (%rsi,%rax,1),%rsi
  40db5e:	48 b8 f8 79 df ff ff 	movabs $0xffffffffffdf79f8,%rax
  40db65:	ff ff ff 
  40db68:	49 89 df             	mov    %rbx,%r15
  40db6b:	48 01 c7             	add    %rax,%rdi
  40db6e:	48 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%rax
  40db75:	ff ff ff 
  40db78:	48 01 d8             	add    %rbx,%rax
  40db7b:	ff d0                	callq  *%rax
    if (err != 0) std::abort();
  40db7d:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  40db84:	48 b8 d0 e5 dd ff ff 	movabs $0xffffffffffdde5d0,%rax
  40db8b:	ff ff ff 
  40db8e:	49 89 ff             	mov    %rdi,%r15
  40db91:	48 01 f8             	add    %rdi,%rax
  40db94:	ff d0                	callq  *%rax
  40db96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40db9d:	00 00 00 

000000000040dba0 <_ZL8getStatemPK10PlanResultm>:
		const PlanResult* solution, const size_t t) {
  40dba0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40dba0 <_ZL8getStatemPK10PlanResultm>
  40dba7:	49 bb 60 d4 21 00 00 	movabs $0x21d460,%r11
  40dbae:	00 00 00 
  40dbb1:	48 83 ec 28          	sub    $0x28,%rsp
  40dbb5:	4c 01 d8             	add    %r11,%rax
	assert(agentIdx < ROBOT_NUMS); // [TEST-removed]
  40dbb8:	48 83 ff 13          	cmp    $0x13,%rdi
  40dbbc:	77 4b                	ja     40dc09 <_ZL8getStatemPK10PlanResultm+0x69>
	if (t < solution[agentIdx].states_size) {
  40dbbe:	48 69 ff 50 06 00 00 	imul   $0x650,%rdi,%rdi
  40dbc5:	48 01 fe             	add    %rdi,%rsi
  40dbc8:	48 8b 86 00 04 00 00 	mov    0x400(%rsi),%rax
  40dbcf:	48 39 d0             	cmp    %rdx,%rax
  40dbd2:	77 2c                	ja     40dc00 <_ZL8getStatemPK10PlanResultm+0x60>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40dbd4:	48 83 e8 01          	sub    $0x1,%rax
  40dbd8:	48 c1 e0 04          	shl    $0x4,%rax
  40dbdc:	48 01 c6             	add    %rax,%rsi
  40dbdf:	48 8b 06             	mov    (%rsi),%rax
  40dbe2:	48 89 44 24 14       	mov    %rax,0x14(%rsp)
  40dbe7:	8b 46 08             	mov    0x8(%rsi),%eax
  40dbea:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  40dbee:	89 c2                	mov    %eax,%edx
}
  40dbf0:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  40dbf5:	48 83 c4 28          	add    $0x28,%rsp
  40dbf9:	c3                   	retq   
  40dbfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
		return solution[agentIdx].states[t].state;
  40dc00:	48 c1 e2 04          	shl    $0x4,%rdx
  40dc04:	48 01 d6             	add    %rdx,%rsi
  40dc07:	eb d6                	jmp    40dbdf <_ZL8getStatemPK10PlanResultm+0x3f>
  40dc09:	48 ba 70 eb dd ff ff 	movabs $0xffffffffffddeb70,%rdx
  40dc10:	ff ff ff 
  40dc13:	48 01 d0             	add    %rdx,%rax
  40dc16:	ff d0                	callq  *%rax
  40dc18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40dc1f:	00 

000000000040dc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
  40dc20:	41 57                	push   %r15
  40dc22:	41 55                	push   %r13
  40dc24:	49 bb e0 d3 21 00 00 	movabs $0x21d3e0,%r11
  40dc2b:	00 00 00 
  40dc2e:	41 54                	push   %r12
  40dc30:	55                   	push   %rbp
  40dc31:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 40dc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314>
  40dc38:	53                   	push   %rbx
  40dc39:	49 89 fc             	mov    %rdi,%r12
  40dc3c:	49 89 f5             	mov    %rsi,%r13
  40dc3f:	4c 01 dd             	add    %r11,%rbp
  40dc42:	48 83 ec 10          	sub    $0x10,%rsp
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  40dc46:	48 85 f6             	test   %rsi,%rsi
  40dc49:	75 2d                	jne    40dc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0x58>
  40dc4b:	48 85 d2             	test   %rdx,%rdx
  40dc4e:	74 28                	je     40dc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0x58>
	  std::__throw_logic_error(__N("basic_string::"
  40dc50:	48 b8 70 7a df ff ff 	movabs $0xffffffffffdf7a70,%rax
  40dc57:	ff ff ff 
  40dc5a:	49 89 ef             	mov    %rbp,%r15
  40dc5d:	48 8d 7c 05 00       	lea    0x0(%rbp,%rax,1),%rdi
  40dc62:	48 b8 d0 e6 dd ff ff 	movabs $0xffffffffffdde6d0,%rax
  40dc69:	ff ff ff 
  40dc6c:	48 01 e8             	add    %rbp,%rax
  40dc6f:	ff d0                	callq  *%rax
  40dc71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
  40dc78:	4c 29 ea             	sub    %r13,%rdx
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
  40dc7b:	48 83 fa 0f          	cmp    $0xf,%rdx
  40dc7f:	48 89 d3             	mov    %rdx,%rbx
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  40dc82:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
  40dc87:	77 27                	ja     40dcb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0x90>
	if (__n == 1)
  40dc89:	48 83 fb 01          	cmp    $0x1,%rbx
  40dc8d:	49 8b 3c 24          	mov    (%r12),%rdi
  40dc91:	74 6d                	je     40dd00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0xe0>
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
  40dc93:	48 85 db             	test   %rbx,%rbx
  40dc96:	75 45                	jne    40dcdd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0xbd>
      { _M_string_length = __length; }
  40dc98:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
      { __c1 = __c2; }
  40dc9d:	c6 04 1f 00          	movb   $0x0,(%rdi,%rbx,1)
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
      }
  40dca1:	48 83 c4 10          	add    $0x10,%rsp
  40dca5:	5b                   	pop    %rbx
  40dca6:	5d                   	pop    %rbp
  40dca7:	41 5c                	pop    %r12
  40dca9:	41 5d                	pop    %r13
  40dcab:	41 5f                	pop    %r15
  40dcad:	c3                   	retq   
  40dcae:	66 90                	xchg   %ax,%ax
	    _M_data(_M_create(__dnew, size_type(0)));
  40dcb0:	48 b8 e0 ea dd ff ff 	movabs $0xffffffffffddeae0,%rax
  40dcb7:	ff ff ff 
  40dcba:	4c 89 e7             	mov    %r12,%rdi
  40dcbd:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  40dcc2:	31 d2                	xor    %edx,%edx
  40dcc4:	49 89 ef             	mov    %rbp,%r15
  40dcc7:	48 01 e8             	add    %rbp,%rax
  40dcca:	ff d0                	callq  *%rax
  40dccc:	48 89 c7             	mov    %rax,%rdi
      { _M_dataplus._M_p = __p; }
  40dccf:	49 89 04 24          	mov    %rax,(%r12)
      { _M_allocated_capacity = __capacity; }
  40dcd3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40dcd8:	49 89 44 24 10       	mov    %rax,0x10(%r12)
	  return __s1;
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  40dcdd:	48 b8 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rax
  40dce4:	ff ff ff 
  40dce7:	48 89 da             	mov    %rbx,%rdx
  40dcea:	4c 89 ee             	mov    %r13,%rsi
  40dced:	49 89 ef             	mov    %rbp,%r15
  40dcf0:	48 01 e8             	add    %rbp,%rax
  40dcf3:	ff d0                	callq  *%rax
  40dcf5:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40dcfa:	49 8b 3c 24          	mov    (%r12),%rdi
  40dcfe:	eb 98                	jmp    40dc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0x78>
  40dd00:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
      { __c1 = __c2; }
  40dd05:	88 07                	mov    %al,(%rdi)
  40dd07:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40dd0c:	49 8b 3c 24          	mov    (%r12),%rdi
  40dd10:	eb 86                	jmp    40dc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0x78>
  40dd12:	0f 1f 40 00          	nopl   0x0(%rax)
  40dd16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40dd1d:	00 00 00 

000000000040dd20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.316>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  40dd20:	41 57                	push   %r15
  40dd22:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40dd20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.316>
  40dd29:	49 bb e0 d2 21 00 00 	movabs $0x21d2e0,%r11
  40dd30:	00 00 00 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  40dd33:	48 8d 47 10          	lea    0x10(%rdi),%rax
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  40dd37:	55                   	push   %rbp
  40dd38:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  40dd3f:	4d 01 df             	add    %r11,%r15
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dd42:	48 85 f6             	test   %rsi,%rsi
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  40dd45:	53                   	push   %rbx
  40dd46:	48 89 fd             	mov    %rdi,%rbp
  40dd49:	48 89 f3             	mov    %rsi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  40dd4c:	48 89 07             	mov    %rax,(%rdi)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dd4f:	74 16                	je     40dd67 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.316+0x47>
      { return __builtin_strlen(__s); }
  40dd51:	48 b8 50 e5 dd ff ff 	movabs $0xffffffffffdde550,%rax
  40dd58:	ff ff ff 
  40dd5b:	48 89 f7             	mov    %rsi,%rdi
  40dd5e:	4c 01 f8             	add    %r15,%rax
  40dd61:	ff d0                	callq  *%rax
  40dd63:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
          _M_construct(__beg, __end, _Tag());
  40dd67:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  40dd6e:	ff ff ff 
  40dd71:	48 89 de             	mov    %rbx,%rsi
  40dd74:	48 89 ef             	mov    %rbp,%rdi
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dd77:	5b                   	pop    %rbx
          _M_construct(__beg, __end, _Tag());
  40dd78:	4c 01 f8             	add    %r15,%rax
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dd7b:	5d                   	pop    %rbp
  40dd7c:	41 5f                	pop    %r15
          _M_construct(__beg, __end, _Tag());
  40dd7e:	ff e0                	jmpq   *%rax

000000000040dd80 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeI8LocationLb1EEEEE19_M_allocate_bucketsEm.isra.351>:
	}
    }

  template<typename _NodeAlloc>
    typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __n)
  40dd80:	41 57                	push   %r15
  40dd82:	41 54                	push   %r12
  40dd84:	49 bb 80 d2 21 00 00 	movabs $0x21d280,%r11
  40dd8b:	00 00 00 
  40dd8e:	55                   	push   %rbp
  40dd8f:	53                   	push   %rbx
  40dd90:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 40dd80 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeI8LocationLb1EEEEE19_M_allocate_bucketsEm.isra.351>
	if (__n > this->max_size())
  40dd97:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  40dd9e:	ff ff 1f 
  40dda1:	48 83 ec 08          	sub    $0x8,%rsp
  40dda5:	4c 01 db             	add    %r11,%rbx
  40dda8:	48 39 c7             	cmp    %rax,%rdi
  40ddab:	77 45                	ja     40ddf2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeI8LocationLb1EEEEE19_M_allocate_bucketsEm.isra.351+0x72>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40ddad:	48 8d 2c fd 00 00 00 	lea    0x0(,%rdi,8),%rbp
  40ddb4:	00 
  40ddb5:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  40ddbc:	ff ff ff 
  40ddbf:	49 89 df             	mov    %rbx,%r15
  40ddc2:	48 01 d8             	add    %rbx,%rax
  40ddc5:	48 89 ef             	mov    %rbp,%rdi
  40ddc8:	ff d0                	callq  *%rax
  40ddca:	49 89 c4             	mov    %rax,%r12
    {
      __bucket_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __n);
      __bucket_type* __p = std::__addressof(*__ptr);
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  40ddcd:	48 89 c7             	mov    %rax,%rdi
  40ddd0:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  40ddd7:	ff ff ff 
  40ddda:	48 89 ea             	mov    %rbp,%rdx
  40dddd:	48 01 d8             	add    %rbx,%rax
  40dde0:	31 f6                	xor    %esi,%esi
  40dde2:	ff d0                	callq  *%rax
      return __p;
    }
  40dde4:	48 83 c4 08          	add    $0x8,%rsp
  40dde8:	4c 89 e0             	mov    %r12,%rax
  40ddeb:	5b                   	pop    %rbx
  40ddec:	5d                   	pop    %rbp
  40dded:	41 5c                	pop    %r12
  40ddef:	41 5f                	pop    %r15
  40ddf1:	c3                   	retq   
	  std::__throw_bad_alloc();
  40ddf2:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  40ddf9:	ff ff ff 
  40ddfc:	49 89 df             	mov    %rbx,%r15
  40ddff:	48 01 d8             	add    %rbx,%rax
  40de02:	ff d0                	callq  *%rax
  40de04:	66 90                	xchg   %ax,%ax
  40de06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40de0d:	00 00 00 

000000000040de10 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632>:
static inline void launch_threads(void* (*workerFn)(void*)) {
  40de10:	41 57                	push   %r15
  40de12:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 40de10 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632>
  40de19:	41 56                	push   %r14
  40de1b:	41 55                	push   %r13
  40de1d:	41 54                	push   %r12
  40de1f:	49 bb f0 d1 21 00 00 	movabs $0x21d1f0,%r11
  40de26:	00 00 00 
  40de29:	55                   	push   %rbp
  40de2a:	53                   	push   %rbx
  40de2b:	4c 01 d8             	add    %r11,%rax
  40de2e:	48 81 ec d8 07 00 00 	sub    $0x7d8,%rsp
  40de35:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    uint32_t logStackSize = 0;
  40de3a:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  40de41:	00 
    uint32_t nthreads = 0;
  40de42:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
  40de49:	00 
    void* stacksBase = nullptr;
  40de4a:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  40de51:	00 00 
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  40de53:	b9 07 04 00 00       	mov    $0x407,%ecx
    return reinterpret_cast<uint64_t>(ptr);
  40de58:	48 8d 7c 24 24       	lea    0x24(%rsp),%rdi
  40de5d:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  40de62:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  40de67:	48 87 c9             	xchg   %rcx,%rcx
    assert(nthreads && logStackSize && stacksBase);
  40de6a:	8b 44 24 24          	mov    0x24(%rsp),%eax
  40de6e:	85 c0                	test   %eax,%eax
  40de70:	0f 84 1c 02 00 00    	je     40e092 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x282>
  40de76:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  40de7a:	85 c9                	test   %ecx,%ecx
  40de7c:	0f 84 10 02 00 00    	je     40e092 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x282>
  40de82:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
  40de88:	0f 84 04 02 00 00    	je     40e092 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x282>
    size_t stackSize = (1 << logStackSize);
  40de8e:	b8 01 00 00 00       	mov    $0x1,%eax
    pthread_attr_init(&attr);
  40de93:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  40de98:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
    size_t stackSize = (1 << logStackSize);
  40de9d:	d3 e0                	shl    %cl,%eax
  40de9f:	48 98                	cltq   
    pthread_attr_init(&attr);
  40dea1:	48 89 ef             	mov    %rbp,%rdi
    size_t stackSize = (1 << logStackSize);
  40dea4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    pthread_attr_init(&attr);
  40dea9:	48 b8 90 e8 dd ff ff 	movabs $0xffffffffffdde890,%rax
  40deb0:	ff ff ff 
  40deb3:	4d 89 f7             	mov    %r14,%r15
  40deb6:	4c 01 f0             	add    %r14,%rax
  40deb9:	ff d0                	callq  *%rax
    pthread_t* pthreads = (pthread_t*) calloc(sizeof(pthread_t), nthreads);
  40debb:	8b 74 24 24          	mov    0x24(%rsp),%esi
  40debf:	48 b8 10 75 df ff ff 	movabs $0xffffffffffdf7510,%rax
  40dec6:	ff ff ff 
  40dec9:	bf 08 00 00 00       	mov    $0x8,%edi
  40dece:	4c 01 f0             	add    %r14,%rax
  40ded1:	48 89 f3             	mov    %rsi,%rbx
  40ded4:	ff d0                	callq  *%rax
    for (uint32_t t = 1; t < nthreads; t++) {
  40ded6:	83 fb 01             	cmp    $0x1,%ebx
    pthread_t* pthreads = (pthread_t*) calloc(sizeof(pthread_t), nthreads);
  40ded9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    for (uint32_t t = 1; t < nthreads; t++) {
  40dede:	76 77                	jbe    40df57 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x147>
        int err = pthread_create(&pthreads[t], &attr, workerFn, nullptr);
  40dee0:	48 b8 60 28 de ff ff 	movabs $0xffffffffffde2860,%rax
  40dee7:	ff ff ff 
    for (uint32_t t = 1; t < nthreads; t++) {
  40deea:	bb 01 00 00 00       	mov    $0x1,%ebx
        int err = pthread_create(&pthreads[t], &attr, workerFn, nullptr);
  40deef:	4d 8d 24 06          	lea    (%r14,%rax,1),%r12
  40def3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40def8:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40defd:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40df02:	41 89 dd             	mov    %ebx,%r13d
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40df05:	48 b8 40 eb dd ff ff 	movabs $0xffffffffffddeb40,%rax
  40df0c:	ff ff ff 
  40df0f:	48 89 ef             	mov    %rbp,%rdi
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40df12:	48 89 d6             	mov    %rdx,%rsi
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40df15:	4d 89 f7             	mov    %r14,%r15
  40df18:	4c 01 f0             	add    %r14,%rax
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40df1b:	49 0f af f5          	imul   %r13,%rsi
  40df1f:	48 03 74 24 28       	add    0x28(%rsp),%rsi
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40df24:	ff d0                	callq  *%rax
        int err = pthread_create(&pthreads[t], &attr, workerFn, nullptr);
  40df26:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40df2b:	31 c9                	xor    %ecx,%ecx
  40df2d:	4c 89 e2             	mov    %r12,%rdx
  40df30:	48 89 ee             	mov    %rbp,%rsi
  40df33:	4a 8d 3c e8          	lea    (%rax,%r13,8),%rdi
  40df37:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  40df3e:	ff ff ff 
  40df41:	4c 01 f0             	add    %r14,%rax
  40df44:	ff d0                	callq  *%rax
        if (err != 0) std::abort();
  40df46:	85 c0                	test   %eax,%eax
  40df48:	0f 85 2d 01 00 00    	jne    40e07b <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x26b>
    for (uint32_t t = 1; t < nthreads; t++) {
  40df4e:	83 c3 01             	add    $0x1,%ebx
  40df51:	39 5c 24 24          	cmp    %ebx,0x24(%rsp)
  40df55:	77 a1                	ja     40def8 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0xe8>
    getcontext(&workerContext);
  40df57:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40df5c:	48 b8 80 e6 dd ff ff 	movabs $0xffffffffffdde680,%rax
  40df63:	ff ff ff 
  40df66:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  40df6b:	49 89 df             	mov    %rbx,%r15
  40df6e:	48 01 d8             	add    %rbx,%rax
  40df71:	ff d0                	callq  *%rax
    workerContext.uc_stack.ss_sp = stacksBase;  // thread 0 --> offset 0
  40df73:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40df78:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
    workerContext.uc_link = &returnContext;
  40df7d:	48 8d 9c 24 20 04 00 	lea    0x420(%rsp),%rbx
  40df84:	00 
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40df85:	48 8d 6c 24 70       	lea    0x70(%rsp),%rbp
  40df8a:	49 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%r8
  40df91:	ff ff ff 
  40df94:	b9 01 00 00 00       	mov    $0x1,%ecx
  40df99:	ba 01 00 00 00       	mov    $0x1,%edx
    workerContext.uc_link = &returnContext;
  40df9e:	48 89 5c 24 78       	mov    %rbx,0x78(%rsp)
    workerContext.uc_stack.ss_sp = stacksBase;  // thread 0 --> offset 0
  40dfa3:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40dfaa:	00 
    workerContext.uc_stack.ss_size = stackSize;
  40dfab:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40dfb0:	4d 01 f0             	add    %r14,%r8
  40dfb3:	48 89 ef             	mov    %rbp,%rdi
  40dfb6:	4d 89 f7             	mov    %r14,%r15
    workerContext.uc_stack.ss_size = stackSize;
  40dfb9:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40dfc0:	00 
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40dfc1:	48 b8 60 28 de ff ff 	movabs $0xffffffffffde2860,%rax
  40dfc8:	ff ff ff 
  40dfcb:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
  40dfcf:	31 c0                	xor    %eax,%eax
  40dfd1:	41 ff d0             	callq  *%r8
    int err = swapcontext(&returnContext, &workerContext);
  40dfd4:	48 b8 a0 e4 dd ff ff 	movabs $0xffffffffffdde4a0,%rax
  40dfdb:	ff ff ff 
  40dfde:	48 89 ee             	mov    %rbp,%rsi
  40dfe1:	48 89 df             	mov    %rbx,%rdi
  40dfe4:	4c 01 f0             	add    %r14,%rax
  40dfe7:	ff d0                	callq  *%rax
    assert(!err); (void) err;
  40dfe9:	85 c0                	test   %eax,%eax
  40dfeb:	0f 85 e7 00 00 00    	jne    40e0d8 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x2c8>
    for (uint32_t t = 1; t < nthreads; t++) {
  40dff1:	83 7c 24 24 01       	cmpl   $0x1,0x24(%rsp)
  40dff6:	bb 01 00 00 00       	mov    $0x1,%ebx
  40dffb:	76 34                	jbe    40e031 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x221>
  40dffd:	0f 1f 00             	nopl   (%rax)
        int err = pthread_join(pthreads[t], nullptr);
  40e000:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  40e005:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  40e00a:	89 d8                	mov    %ebx,%eax
  40e00c:	31 f6                	xor    %esi,%esi
  40e00e:	48 8b 3c c2          	mov    (%rdx,%rax,8),%rdi
  40e012:	48 b8 90 e5 dd ff ff 	movabs $0xffffffffffdde590,%rax
  40e019:	ff ff ff 
  40e01c:	49 89 cf             	mov    %rcx,%r15
  40e01f:	48 01 c8             	add    %rcx,%rax
  40e022:	ff d0                	callq  *%rax
        if (err != 0) std::abort();
  40e024:	85 c0                	test   %eax,%eax
  40e026:	75 53                	jne    40e07b <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x26b>
    for (uint32_t t = 1; t < nthreads; t++) {
  40e028:	83 c3 01             	add    $0x1,%ebx
  40e02b:	39 5c 24 24          	cmp    %ebx,0x24(%rsp)
  40e02f:	77 cf                	ja     40e000 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x1f0>
    pthread_attr_destroy(&attr);
  40e031:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e036:	48 b8 40 ea dd ff ff 	movabs $0xffffffffffddea40,%rax
  40e03d:	ff ff ff 
  40e040:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  40e045:	49 89 df             	mov    %rbx,%r15
  40e048:	48 01 d8             	add    %rbx,%rax
  40e04b:	ff d0                	callq  *%rax
    free(pthreads);
  40e04d:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e052:	48 b8 30 76 df ff ff 	movabs $0xffffffffffdf7630,%rax
  40e059:	ff ff ff 
  40e05c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40e061:	49 89 df             	mov    %rbx,%r15
  40e064:	48 01 d8             	add    %rbx,%rax
  40e067:	ff d0                	callq  *%rax
}
  40e069:	48 81 c4 d8 07 00 00 	add    $0x7d8,%rsp
  40e070:	5b                   	pop    %rbx
  40e071:	5d                   	pop    %rbp
  40e072:	41 5c                	pop    %r12
  40e074:	41 5d                	pop    %r13
  40e076:	41 5e                	pop    %r14
  40e078:	41 5f                	pop    %r15
  40e07a:	c3                   	retq   
        if (err != 0) std::abort();
  40e07b:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e080:	48 b8 d0 e5 dd ff ff 	movabs $0xffffffffffdde5d0,%rax
  40e087:	ff ff ff 
  40e08a:	49 89 df             	mov    %rbx,%r15
  40e08d:	48 01 d8             	add    %rbx,%rax
  40e090:	ff d0                	callq  *%rax
    assert(nthreads && logStackSize && stacksBase);
  40e092:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e097:	48 b8 80 81 df ff ff 	movabs $0xffffffffffdf8180,%rax
  40e09e:	ff ff ff 
  40e0a1:	ba 94 00 00 00       	mov    $0x94,%edx
  40e0a6:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40e0aa:	48 b8 b0 79 df ff ff 	movabs $0xffffffffffdf79b0,%rax
  40e0b1:	ff ff ff 
  40e0b4:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40e0b8:	48 b8 a0 7a df ff ff 	movabs $0xffffffffffdf7aa0,%rax
  40e0bf:	ff ff ff 
    assert(!err); (void) err;
  40e0c2:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  40e0c6:	48 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%rax
  40e0cd:	ff ff ff 
  40e0d0:	49 89 df             	mov    %rbx,%r15
  40e0d3:	48 01 d8             	add    %rbx,%rax
  40e0d6:	ff d0                	callq  *%rax
  40e0d8:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e0dd:	48 b8 80 81 df ff ff 	movabs $0xffffffffffdf8180,%rax
  40e0e4:	ff ff ff 
  40e0e7:	ba ae 00 00 00       	mov    $0xae,%edx
  40e0ec:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40e0f0:	48 b8 b0 79 df ff ff 	movabs $0xffffffffffdf79b0,%rax
  40e0f7:	ff ff ff 
  40e0fa:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40e0fe:	48 b8 f1 7d df ff ff 	movabs $0xffffffffffdf7df1,%rax
  40e105:	ff ff ff 
  40e108:	eb b8                	jmp    40e0c2 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x2b2>
  40e10a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040e110 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623>:
    endl(basic_ostream<_CharT, _Traits>& __os)
  40e110:	41 57                	push   %r15
  40e112:	41 54                	push   %r12
  40e114:	49 bb f0 ce 21 00 00 	movabs $0x21cef0,%r11
  40e11b:	00 00 00 
  40e11e:	55                   	push   %rbp
  40e11f:	53                   	push   %rbx
  40e120:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 40e110 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623>
    { return flush(__os.put(__os.widen('\n'))); }
  40e127:	49 bc b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%r12
  40e12e:	ff ff ff 
  40e131:	4c 01 db             	add    %r11,%rbx
    endl(basic_ostream<_CharT, _Traits>& __os)
  40e134:	48 83 ec 08          	sub    $0x8,%rsp
    { return flush(__os.put(__os.widen('\n'))); }
  40e138:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40e13c:	48 8b 10             	mov    (%rax),%rdx
      { return __check_facet(_M_ctype).widen(__c); }
  40e13f:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  40e143:	48 8b ac 02 f0 00 00 	mov    0xf0(%rdx,%rax,1),%rbp
  40e14a:	00 
      if (!__f)
  40e14b:	48 85 ed             	test   %rbp,%rbp
  40e14e:	74 7e                	je     40e1ce <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623+0xbe>
	if (_M_widen_ok)
  40e150:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
  40e154:	74 3a                	je     40e190 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623+0x80>
  40e156:	0f be 75 43          	movsbl 0x43(%rbp),%esi
  40e15a:	48 b8 10 e4 dd ff ff 	movabs $0xffffffffffdde410,%rax
  40e161:	ff ff ff 
  40e164:	49 8b 3c 1c          	mov    (%r12,%rbx,1),%rdi
  40e168:	49 89 df             	mov    %rbx,%r15
  40e16b:	48 01 d8             	add    %rbx,%rax
  40e16e:	ff d0                	callq  *%rax
  40e170:	48 83 c4 08          	add    $0x8,%rsp
    { return __os.flush(); }
  40e174:	48 89 c7             	mov    %rax,%rdi
  40e177:	48 b8 a0 e6 dd ff ff 	movabs $0xffffffffffdde6a0,%rax
  40e17e:	ff ff ff 
  40e181:	48 01 d8             	add    %rbx,%rax
    { return flush(__os.put(__os.widen('\n'))); }
  40e184:	5b                   	pop    %rbx
  40e185:	5d                   	pop    %rbp
  40e186:	41 5c                	pop    %r12
  40e188:	41 5f                	pop    %r15
    { return __os.flush(); }
  40e18a:	ff e0                	jmpq   *%rax
  40e18c:	0f 1f 40 00          	nopl   0x0(%rax)
	this->_M_widen_init();
  40e190:	48 b8 30 e8 dd ff ff 	movabs $0xffffffffffdde830,%rax
  40e197:	ff ff ff 
  40e19a:	48 89 ef             	mov    %rbp,%rdi
  40e19d:	49 89 df             	mov    %rbx,%r15
  40e1a0:	48 01 d8             	add    %rbx,%rax
  40e1a3:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40e1a5:	48 8b 45 00          	mov    0x0(%rbp),%rax
  40e1a9:	48 ba 60 7f de ff ff 	movabs $0xffffffffffde7f60,%rdx
  40e1b0:	ff ff ff 
  40e1b3:	be 0a 00 00 00       	mov    $0xa,%esi
  40e1b8:	48 01 da             	add    %rbx,%rdx
  40e1bb:	48 8b 40 30          	mov    0x30(%rax),%rax
  40e1bf:	48 39 d0             	cmp    %rdx,%rax
  40e1c2:	74 96                	je     40e15a <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623+0x4a>
  40e1c4:	48 89 ef             	mov    %rbp,%rdi
  40e1c7:	ff d0                	callq  *%rax
  40e1c9:	0f be f0             	movsbl %al,%esi
  40e1cc:	eb 8c                	jmp    40e15a <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623+0x4a>
	__throw_bad_cast();
  40e1ce:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  40e1d5:	ff ff ff 
  40e1d8:	49 89 df             	mov    %rbx,%r15
  40e1db:	48 01 d8             	add    %rbx,%rax
  40e1de:	ff d0                	callq  *%rax

000000000040e1e0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm>:
inline void bareRunner(Timestamp ts) {
    (*f)(ts);
}

template<typename F, F* f, typename T>
inline void bareRunner(Timestamp ts, uint64_t arg0) {
  40e1e0:	41 56                	push   %r14
  40e1e2:	41 55                	push   %r13
  40e1e4:	41 54                	push   %r12
  40e1e6:	55                   	push   %rbp
  40e1e7:	53                   	push   %rbx
// Requeuers were called "splitters" in the early Swarm papers
template <bool isFrame>
static inline void requeuer_impl(swarm::Timestamp, TaskDescriptors* descs) {
    // This requeuer can yield before an enqueue, so we always update the size
    // field directly
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e1e8:	48 8b 16             	mov    (%rsi),%rdx
  40e1eb:	48 89 f3             	mov    %rsi,%rbx
  40e1ee:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  40e1f2:	48 89 c1             	mov    %rax,%rcx
  40e1f5:	48 c1 e1 06          	shl    $0x6,%rcx
    while (descs->size) {
  40e1f9:	48 85 d2             	test   %rdx,%rdx
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e1fc:	0f 18 4c 0e 08       	prefetcht0 0x8(%rsi,%rcx,1)
    while (descs->size) {
  40e201:	75 38                	jne    40e23b <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x5b>
  40e203:	e9 ac 00 00 00       	jmpq   40e2b4 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0xd4>
  40e208:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e20f:	00 
    register uint64_t r8  asm("r8")  = v3;
  40e210:	4d 89 c8             	mov    %r9,%r8
    register uint64_t r11 asm("r11") = v6;
  40e213:	4d 89 e3             	mov    %r12,%r11
    register uint64_t r9  asm("r9")  = v4;
  40e216:	4d 89 d1             	mov    %r10,%r9
            :);
  40e219:	4c 89 ef             	mov    %r13,%rdi
    register uint64_t r10 asm("r10") = v5;
  40e21c:	49 89 ca             	mov    %rcx,%r10
            :);
  40e21f:	4c 89 f6             	mov    %r14,%rsi
  40e222:	48 89 e9             	mov    %rbp,%rcx
  40e225:	48 87 c9             	xchg   %rcx,%rcx
        if (descs->size >= 3) {
            __builtin_prefetch(&descs->tds[descs->size - 3].ts);
        }
        __enqueueOrYield<isFrame>(descs->tds[descs->size - 1]);
        descs->size--;
  40e228:	48 8b 03             	mov    (%rbx),%rax
  40e22b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e22f:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e232:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e235:	74 7d                	je     40e2b4 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0xd4>
  40e237:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
        if (descs->size >= 3) {
  40e23b:	48 83 fa 02          	cmp    $0x2,%rdx
  40e23f:	0f 87 8b 00 00 00    	ja     40e2d0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0xf0>
  40e245:	48 c1 e2 06          	shl    $0x6,%rdx
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e249:	48 c1 e0 06          	shl    $0x6,%rax
  40e24d:	48 8d 34 13          	lea    (%rbx,%rdx,1),%rsi
  40e251:	48 01 d8             	add    %rbx,%rax
  40e254:	4c 8b 50 40          	mov    0x40(%rax),%r10
  40e258:	4c 8b 48 38          	mov    0x38(%rax),%r9
    EnqFlags ef = EnqFlags(YIELDIFFULL | (task.taskPtrAndFlags & 0x0fffful));
  40e25c:	48 8b 7e d0          	mov    -0x30(%rsi),%rdi
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e260:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40e264:	4c 8b 70 28          	mov    0x28(%rax),%r14
  40e268:	4c 8b 68 20          	mov    0x20(%rax),%r13
  40e26c:	4c 8b 60 18          	mov    0x18(%rax),%r12
}

/* Enqueue functions */

constexpr uint64_t enqueueMagicOp(uint64_t numArgs, EnqFlags hintFlags) {
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  40e270:	48 89 fd             	mov    %rdi,%rbp
    asm("sar $16,%%rcx;" : "=c"(taskPtr) : "c"(task.taskPtrAndFlags));
  40e273:	48 89 f9             	mov    %rdi,%rcx
  40e276:	81 e5 fa ff 00 00    	and    $0xfffa,%ebp
  40e27c:	48 c1 f9 10          	sar    $0x10,%rcx
  40e280:	48 81 cd 05 00 30 40 	or     $0x40300005,%rbp
    if (!skipTs && !skipTask && !skipHint) {
  40e287:	f7 c7 00 02 00 00    	test   $0x200,%edi
  40e28d:	75 81                	jne    40e210 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x30>
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e28f:	48 8b 7e c8          	mov    -0x38(%rsi),%rdi
    register uint64_t r8  asm("r8")  = v3;
  40e293:	49 89 d0             	mov    %rdx,%r8
    register uint64_t r11 asm("r11") = v6;
  40e296:	49 89 cb             	mov    %rcx,%r11
            :);
  40e299:	4c 89 ee             	mov    %r13,%rsi
  40e29c:	48 89 e9             	mov    %rbp,%rcx
  40e29f:	4c 89 f2             	mov    %r14,%rdx
  40e2a2:	48 87 c9             	xchg   %rcx,%rcx
        descs->size--;
  40e2a5:	48 8b 03             	mov    (%rbx),%rax
  40e2a8:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e2ac:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e2af:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e2b2:	75 83                	jne    40e237 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x57>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40e2b4:	b9 11 20 00 00       	mov    $0x2011,%ecx
  40e2b9:	48 89 df             	mov    %rbx,%rdi
  40e2bc:	48 87 c9             	xchg   %rcx,%rcx
}
  40e2bf:	5b                   	pop    %rbx
  40e2c0:	5d                   	pop    %rbp
  40e2c1:	41 5c                	pop    %r12
  40e2c3:	41 5d                	pop    %r13
  40e2c5:	41 5e                	pop    %r14
  40e2c7:	c3                   	retq   
  40e2c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e2cf:	00 
            __builtin_prefetch(&descs->tds[descs->size - 3].ts);
  40e2d0:	48 89 d1             	mov    %rdx,%rcx
  40e2d3:	48 c1 e1 06          	shl    $0x6,%rcx
  40e2d7:	0f 18 8c 0b 48 ff ff 	prefetcht0 -0xb8(%rbx,%rcx,1)
  40e2de:	ff 
  40e2df:	e9 61 ff ff ff       	jmpq   40e245 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x65>
  40e2e4:	66 90                	xchg   %ax,%ax
  40e2e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40e2ed:	00 00 00 

000000000040e2f0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0) {
  40e2f0:	41 56                	push   %r14
  40e2f2:	41 55                	push   %r13
  40e2f4:	41 54                	push   %r12
  40e2f6:	55                   	push   %rbp
  40e2f7:	53                   	push   %rbx
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e2f8:	48 8b 16             	mov    (%rsi),%rdx
  40e2fb:	48 89 f3             	mov    %rsi,%rbx
  40e2fe:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  40e302:	48 89 c1             	mov    %rax,%rcx
  40e305:	48 c1 e1 06          	shl    $0x6,%rcx
    while (descs->size) {
  40e309:	48 85 d2             	test   %rdx,%rdx
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e30c:	0f 18 4c 0e 08       	prefetcht0 0x8(%rsi,%rcx,1)
    while (descs->size) {
  40e311:	75 38                	jne    40e34b <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x5b>
  40e313:	e9 ac 00 00 00       	jmpq   40e3c4 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0xd4>
  40e318:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e31f:	00 
    register uint64_t r8  asm("r8")  = v3;
  40e320:	4d 89 c8             	mov    %r9,%r8
    register uint64_t r11 asm("r11") = v6;
  40e323:	4d 89 e3             	mov    %r12,%r11
    register uint64_t r9  asm("r9")  = v4;
  40e326:	4d 89 d1             	mov    %r10,%r9
            :);
  40e329:	4c 89 ef             	mov    %r13,%rdi
    register uint64_t r10 asm("r10") = v5;
  40e32c:	49 89 ca             	mov    %rcx,%r10
            :);
  40e32f:	4c 89 f6             	mov    %r14,%rsi
  40e332:	48 89 e9             	mov    %rbp,%rcx
  40e335:	48 87 c9             	xchg   %rcx,%rcx
        descs->size--;
  40e338:	48 8b 03             	mov    (%rbx),%rax
  40e33b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e33f:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e342:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e345:	74 7d                	je     40e3c4 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0xd4>
  40e347:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
        if (descs->size >= 3) {
  40e34b:	48 83 fa 02          	cmp    $0x2,%rdx
  40e34f:	0f 87 8b 00 00 00    	ja     40e3e0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0xf0>
  40e355:	48 c1 e2 06          	shl    $0x6,%rdx
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e359:	48 c1 e0 06          	shl    $0x6,%rax
  40e35d:	48 8d 34 13          	lea    (%rbx,%rdx,1),%rsi
  40e361:	48 01 d8             	add    %rbx,%rax
  40e364:	4c 8b 50 40          	mov    0x40(%rax),%r10
  40e368:	4c 8b 48 38          	mov    0x38(%rax),%r9
    EnqFlags ef = EnqFlags(YIELDIFFULL | (task.taskPtrAndFlags & 0x0fffful));
  40e36c:	48 8b 7e d0          	mov    -0x30(%rsi),%rdi
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e370:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40e374:	4c 8b 70 28          	mov    0x28(%rax),%r14
  40e378:	4c 8b 68 20          	mov    0x20(%rax),%r13
  40e37c:	4c 8b 60 18          	mov    0x18(%rax),%r12
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  40e380:	48 89 fd             	mov    %rdi,%rbp
    asm("sar $16,%%rcx;" : "=c"(taskPtr) : "c"(task.taskPtrAndFlags));
  40e383:	48 89 f9             	mov    %rdi,%rcx
  40e386:	81 e5 fa ff 00 00    	and    $0xfffa,%ebp
  40e38c:	48 c1 f9 10          	sar    $0x10,%rcx
  40e390:	48 81 cd 05 00 10 40 	or     $0x40100005,%rbp
    if (!skipTs && !skipTask && !skipHint) {
  40e397:	f7 c7 00 02 00 00    	test   $0x200,%edi
  40e39d:	75 81                	jne    40e320 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x30>
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e39f:	48 8b 7e c8          	mov    -0x38(%rsi),%rdi
    register uint64_t r8  asm("r8")  = v3;
  40e3a3:	49 89 d0             	mov    %rdx,%r8
    register uint64_t r11 asm("r11") = v6;
  40e3a6:	49 89 cb             	mov    %rcx,%r11
            :);
  40e3a9:	4c 89 ee             	mov    %r13,%rsi
  40e3ac:	48 89 e9             	mov    %rbp,%rcx
  40e3af:	4c 89 f2             	mov    %r14,%rdx
  40e3b2:	48 87 c9             	xchg   %rcx,%rcx
        descs->size--;
  40e3b5:	48 8b 03             	mov    (%rbx),%rax
  40e3b8:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e3bc:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e3bf:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e3c2:	75 83                	jne    40e347 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x57>
  40e3c4:	b9 11 20 00 00       	mov    $0x2011,%ecx
  40e3c9:	48 89 df             	mov    %rbx,%rdi
  40e3cc:	48 87 c9             	xchg   %rcx,%rcx
}
  40e3cf:	5b                   	pop    %rbx
  40e3d0:	5d                   	pop    %rbp
  40e3d1:	41 5c                	pop    %r12
  40e3d3:	41 5d                	pop    %r13
  40e3d5:	41 5e                	pop    %r14
  40e3d7:	c3                   	retq   
  40e3d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e3df:	00 
            __builtin_prefetch(&descs->tds[descs->size - 3].ts);
  40e3e0:	48 89 d1             	mov    %rdx,%rcx
  40e3e3:	48 c1 e1 06          	shl    $0x6,%rcx
  40e3e7:	0f 18 8c 0b 48 ff ff 	prefetcht0 -0xb8(%rbx,%rcx,1)
  40e3ee:	ff 
  40e3ef:	e9 61 ff ff ff       	jmpq   40e355 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x65>
  40e3f4:	66 90                	xchg   %ax,%ax
  40e3f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40e3fd:	00 00 00 

000000000040e400 <_ZL14focalHeuristicPK10PlanResult>:
static inline int focalHeuristic(const PlanResult* solution) {
  40e400:	41 57                	push   %r15
  40e402:	41 56                	push   %r14
  40e404:	41 55                	push   %r13
  40e406:	41 54                	push   %r12
  40e408:	55                   	push   %rbp
  40e409:	53                   	push   %rbx
		max_t = std::max<int>(max_t, solution[i].states_size - 1);
  40e40a:	66 0f 76 d2          	pcmpeqd %xmm2,%xmm2
  40e40e:	f3 0f 7e 87 00 04 00 	movq   0x400(%rdi),%xmm0
  40e415:	00 
static inline int focalHeuristic(const PlanResult* solution) {
  40e416:	48 89 7c 24 e8       	mov    %rdi,-0x18(%rsp)
		max_t = std::max<int>(max_t, solution[i].states_size - 1);
  40e41b:	f3 0f 7e 8f a0 10 00 	movq   0x10a0(%rdi),%xmm1
  40e422:	00 
  40e423:	0f 16 87 50 0a 00 00 	movhps 0xa50(%rdi),%xmm0
  40e42a:	0f 16 8f f0 16 00 00 	movhps 0x16f0(%rdi),%xmm1
  40e431:	f3 0f 7e 9f e0 29 00 	movq   0x29e0(%rdi),%xmm3
  40e438:	00 
  40e439:	0f 16 9f 30 30 00 00 	movhps 0x3030(%rdi),%xmm3
  40e440:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40e444:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40e448:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40e44c:	66 0f 6f e0          	movdqa %xmm0,%xmm4
  40e450:	66 0f 66 e1          	pcmpgtd %xmm1,%xmm4
  40e454:	f3 0f 7e 8f 40 1d 00 	movq   0x1d40(%rdi),%xmm1
  40e45b:	00 
  40e45c:	0f 16 8f 90 23 00 00 	movhps 0x2390(%rdi),%xmm1
  40e463:	66 0f db c4          	pand   %xmm4,%xmm0
  40e467:	0f c6 cb 88          	shufps $0x88,%xmm3,%xmm1
  40e46b:	66 0f fe ca          	paddd  %xmm2,%xmm1
  40e46f:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40e473:	66 0f 66 d8          	pcmpgtd %xmm0,%xmm3
  40e477:	66 0f db cb          	pand   %xmm3,%xmm1
  40e47b:	66 0f df d8          	pandn  %xmm0,%xmm3
  40e47f:	f3 0f 7e 87 80 36 00 	movq   0x3680(%rdi),%xmm0
  40e486:	00 
  40e487:	0f 16 87 d0 3c 00 00 	movhps 0x3cd0(%rdi),%xmm0
  40e48e:	66 0f eb d9          	por    %xmm1,%xmm3
  40e492:	f3 0f 7e 8f 20 43 00 	movq   0x4320(%rdi),%xmm1
  40e499:	00 
  40e49a:	0f 16 8f 70 49 00 00 	movhps 0x4970(%rdi),%xmm1
  40e4a1:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40e4a5:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40e4a9:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  40e4ad:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  40e4b1:	66 0f db c1          	pand   %xmm1,%xmm0
  40e4b5:	66 0f df cb          	pandn  %xmm3,%xmm1
  40e4b9:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40e4bd:	f3 0f 7e 8f 60 5c 00 	movq   0x5c60(%rdi),%xmm1
  40e4c4:	00 
  40e4c5:	66 0f eb d8          	por    %xmm0,%xmm3
  40e4c9:	f3 0f 7e 87 c0 4f 00 	movq   0x4fc0(%rdi),%xmm0
  40e4d0:	00 
  40e4d1:	0f 16 8f b0 62 00 00 	movhps 0x62b0(%rdi),%xmm1
  40e4d8:	0f 16 87 10 56 00 00 	movhps 0x5610(%rdi),%xmm0
  40e4df:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40e4e3:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40e4e7:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  40e4eb:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  40e4ef:	66 0f db c1          	pand   %xmm1,%xmm0
  40e4f3:	66 0f df cb          	pandn  %xmm3,%xmm1
  40e4f7:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40e4fb:	f3 0f 7e 8f 00 69 00 	movq   0x6900(%rdi),%xmm1
  40e502:	00 
  40e503:	66 0f eb d8          	por    %xmm0,%xmm3
  40e507:	f3 0f 7e 87 a0 75 00 	movq   0x75a0(%rdi),%xmm0
  40e50e:	00 
  40e50f:	0f 16 87 f0 7b 00 00 	movhps 0x7bf0(%rdi),%xmm0
  40e516:	0f 16 8f 50 6f 00 00 	movhps 0x6f50(%rdi),%xmm1
  40e51d:	0f c6 c8 88          	shufps $0x88,%xmm0,%xmm1
  40e521:	66 0f fe ca          	paddd  %xmm2,%xmm1
  40e525:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  40e529:	66 0f 66 c3          	pcmpgtd %xmm3,%xmm0
  40e52d:	66 0f db c8          	pand   %xmm0,%xmm1
  40e531:	66 0f df c3          	pandn  %xmm3,%xmm0
  40e535:	66 0f eb c8          	por    %xmm0,%xmm1
  40e539:	66 0f 6f d1          	movdqa %xmm1,%xmm2
  40e53d:	66 0f 73 da 08       	psrldq $0x8,%xmm2
  40e542:	66 0f 6f c2          	movdqa %xmm2,%xmm0
  40e546:	66 0f 66 c1          	pcmpgtd %xmm1,%xmm0
  40e54a:	66 0f db d0          	pand   %xmm0,%xmm2
  40e54e:	66 0f df c1          	pandn  %xmm1,%xmm0
  40e552:	66 0f eb c2          	por    %xmm2,%xmm0
  40e556:	66 0f 6f d0          	movdqa %xmm0,%xmm2
  40e55a:	66 0f 73 da 04       	psrldq $0x4,%xmm2
  40e55f:	66 0f 6f ca          	movdqa %xmm2,%xmm1
  40e563:	66 0f 66 c8          	pcmpgtd %xmm0,%xmm1
  40e567:	66 0f db d1          	pand   %xmm1,%xmm2
  40e56b:	66 0f df c8          	pandn  %xmm0,%xmm1
  40e56f:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  40e573:	66 0f eb c2          	por    %xmm2,%xmm0
  40e577:	66 0f 7e c3          	movd   %xmm0,%ebx
  40e57b:	66 0f 7e 44 24 e4    	movd   %xmm0,-0x1c(%rsp)
	for (int t = 0; t < max_t; ++t) {
  40e581:	85 db                	test   %ebx,%ebx
  40e583:	0f 8e 60 02 00 00    	jle    40e7e9 <_ZL14focalHeuristicPK10PlanResult+0x3e9>
  40e589:	48 8d 9f f0 77 00 00 	lea    0x77f0(%rdi),%rbx
  40e590:	4c 8d b7 40 7e 00 00 	lea    0x7e40(%rdi),%r14
  40e597:	45 31 e4             	xor    %r12d,%r12d
  40e59a:	48 c7 44 24 d0 10 00 	movq   $0x10,-0x30(%rsp)
  40e5a1:	00 00 
  40e5a3:	45 31 ed             	xor    %r13d,%r13d
  40e5a6:	45 31 ff             	xor    %r15d,%r15d
  40e5a9:	48 89 5c 24 f0       	mov    %rbx,-0x10(%rsp)
  40e5ae:	48 8b 5c 24 e8       	mov    -0x18(%rsp),%rbx
  40e5b3:	4c 8b 4c 24 f0       	mov    -0x10(%rsp),%r9
  40e5b8:	48 89 d9             	mov    %rbx,%rcx
  40e5bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	if (t < solution[agentIdx].states_size) {
  40e5c0:	48 8b 83 00 04 00 00 	mov    0x400(%rbx),%rax
  40e5c7:	4c 39 e8             	cmp    %r13,%rax
  40e5ca:	77 74                	ja     40e640 <_ZL14focalHeuristicPK10PlanResult+0x240>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e5cc:	48 83 e8 01          	sub    $0x1,%rax
  40e5d0:	48 c1 e0 04          	shl    $0x4,%rax
  40e5d4:	48 01 d8             	add    %rbx,%rax
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e5d7:	4c 39 cb             	cmp    %r9,%rbx
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e5da:	8b 78 04             	mov    0x4(%rax),%edi
  40e5dd:	44 8b 40 08          	mov    0x8(%rax),%r8d
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e5e1:	74 6c                	je     40e64f <_ZL14focalHeuristicPK10PlanResult+0x24f>
  40e5e3:	48 81 c3 50 06 00 00 	add    $0x650,%rbx
  40e5ea:	48 89 da             	mov    %rbx,%rdx
  40e5ed:	eb 22                	jmp    40e611 <_ZL14focalHeuristicPK10PlanResult+0x211>
  40e5ef:	90                   	nop
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e5f0:	48 83 e8 01          	sub    $0x1,%rax
  40e5f4:	48 c1 e0 04          	shl    $0x4,%rax
  40e5f8:	48 01 d0             	add    %rdx,%rax
  40e5fb:	8b 70 04             	mov    0x4(%rax),%esi
  40e5fe:	8b 40 08             	mov    0x8(%rax),%eax

  bool operator==(const State& s) const {
    return time == s.time && x == s.x && y == s.y;
  }

  bool equalExceptTime(const State& s) const { return x == s.x && y == s.y; }
  40e601:	39 f7                	cmp    %esi,%edi
  40e603:	74 26                	je     40e62b <_ZL14focalHeuristicPK10PlanResult+0x22b>
  40e605:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e60c:	4c 39 f2             	cmp    %r14,%rdx
  40e60f:	74 af                	je     40e5c0 <_ZL14focalHeuristicPK10PlanResult+0x1c0>
	if (t < solution[agentIdx].states_size) {
  40e611:	48 8b 82 00 04 00 00 	mov    0x400(%rdx),%rax
  40e618:	4c 39 e8             	cmp    %r13,%rax
  40e61b:	76 d3                	jbe    40e5f0 <_ZL14focalHeuristicPK10PlanResult+0x1f0>
		return solution[agentIdx].states[t].state;
  40e61d:	42 8b 74 22 04       	mov    0x4(%rdx,%r12,1),%esi
  40e622:	42 8b 44 22 08       	mov    0x8(%rdx,%r12,1),%eax
  40e627:	39 f7                	cmp    %esi,%edi
  40e629:	75 da                	jne    40e605 <_ZL14focalHeuristicPK10PlanResult+0x205>
					++numConflicts;
  40e62b:	44 39 c0             	cmp    %r8d,%eax
  40e62e:	0f 94 c0             	sete   %al
  40e631:	0f b6 c0             	movzbl %al,%eax
  40e634:	41 01 c7             	add    %eax,%r15d
  40e637:	eb cc                	jmp    40e605 <_ZL14focalHeuristicPK10PlanResult+0x205>
  40e639:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e640:	4c 39 cb             	cmp    %r9,%rbx
		return solution[agentIdx].states[t].state;
  40e643:	42 8b 7c 23 04       	mov    0x4(%rbx,%r12,1),%edi
  40e648:	46 8b 44 23 08       	mov    0x8(%rbx,%r12,1),%r8d
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e64d:	75 94                	jne    40e5e3 <_ZL14focalHeuristicPK10PlanResult+0x1e3>
  40e64f:	48 8b 44 24 d0       	mov    -0x30(%rsp),%rax
  40e654:	49 8d 6d 01          	lea    0x1(%r13),%rbp
  40e658:	48 89 5c 24 b8       	mov    %rbx,-0x48(%rsp)
  40e65d:	4c 89 64 24 d8       	mov    %r12,-0x28(%rsp)
  40e662:	48 05 58 06 00 00    	add    $0x658,%rax
  40e668:	48 89 44 24 c0       	mov    %rax,-0x40(%rsp)
  40e66d:	49 8d 84 24 58 06 00 	lea    0x658(%r12),%rax
  40e674:	00 
  40e675:	48 89 44 24 c8       	mov    %rax,-0x38(%rsp)
	if (t < solution[agentIdx].states_size) {
  40e67a:	48 8b 81 00 04 00 00 	mov    0x400(%rcx),%rax
  40e681:	4c 39 e8             	cmp    %r13,%rax
  40e684:	0f 87 01 01 00 00    	ja     40e78b <_ZL14focalHeuristicPK10PlanResult+0x38b>
  40e68a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e690:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40e694:	48 c1 e2 04          	shl    $0x4,%rdx
  40e698:	48 01 ca             	add    %rcx,%rdx
	if (t < solution[agentIdx].states_size) {
  40e69b:	48 39 e8             	cmp    %rbp,%rax
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e69e:	44 8b 52 04          	mov    0x4(%rdx),%r10d
  40e6a2:	8b 5a 08             	mov    0x8(%rdx),%ebx
	if (t < solution[agentIdx].states_size) {
  40e6a5:	0f 87 f7 00 00 00    	ja     40e7a2 <_ZL14focalHeuristicPK10PlanResult+0x3a2>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e6ab:	48 83 e8 01          	sub    $0x1,%rax
  40e6af:	48 c1 e0 04          	shl    $0x4,%rax
  40e6b3:	48 01 c8             	add    %rcx,%rax
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e6b6:	48 3b 4c 24 b8       	cmp    -0x48(%rsp),%rcx
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e6bb:	44 8b 58 04          	mov    0x4(%rax),%r11d
  40e6bf:	8b 40 08             	mov    0x8(%rax),%eax
  40e6c2:	89 44 24 e0          	mov    %eax,-0x20(%rsp)
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e6c6:	0f 84 f3 00 00 00    	je     40e7bf <_ZL14focalHeuristicPK10PlanResult+0x3bf>
  40e6cc:	48 8b 44 24 c0       	mov    -0x40(%rsp),%rax
  40e6d1:	4c 8d a1 50 06 00 00 	lea    0x650(%rcx),%r12
  40e6d8:	4c 89 e2             	mov    %r12,%rdx
  40e6db:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
  40e6df:	48 03 4c 24 c8       	add    -0x38(%rsp),%rcx
  40e6e4:	eb 52                	jmp    40e738 <_ZL14focalHeuristicPK10PlanResult+0x338>
  40e6e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40e6ed:	00 00 00 
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e6f0:	48 8d 78 ff          	lea    -0x1(%rax),%rdi
  40e6f4:	48 c1 e7 04          	shl    $0x4,%rdi
  40e6f8:	48 01 d7             	add    %rdx,%rdi
	if (t < solution[agentIdx].states_size) {
  40e6fb:	48 39 e8             	cmp    %rbp,%rax
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e6fe:	44 8b 47 04          	mov    0x4(%rdi),%r8d
  40e702:	44 8b 4f 08          	mov    0x8(%rdi),%r9d
	if (t < solution[agentIdx].states_size) {
  40e706:	77 48                	ja     40e750 <_ZL14focalHeuristicPK10PlanResult+0x350>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e708:	48 83 e8 01          	sub    $0x1,%rax
  40e70c:	48 c1 e0 04          	shl    $0x4,%rax
  40e710:	48 01 d0             	add    %rdx,%rax
  40e713:	8b 78 04             	mov    0x4(%rax),%edi
  40e716:	8b 40 08             	mov    0x8(%rax),%eax
  40e719:	44 39 d7             	cmp    %r10d,%edi
  40e71c:	74 3c                	je     40e75a <_ZL14focalHeuristicPK10PlanResult+0x35a>
  40e71e:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
  40e725:	48 81 c6 50 06 00 00 	add    $0x650,%rsi
  40e72c:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e733:	4c 39 f2             	cmp    %r14,%rdx
  40e736:	74 40                	je     40e778 <_ZL14focalHeuristicPK10PlanResult+0x378>
	if (t < solution[agentIdx].states_size) {
  40e738:	48 8b 82 00 04 00 00 	mov    0x400(%rdx),%rax
  40e73f:	4c 39 e8             	cmp    %r13,%rax
  40e742:	76 ac                	jbe    40e6f0 <_ZL14focalHeuristicPK10PlanResult+0x2f0>
  40e744:	48 39 e8             	cmp    %rbp,%rax
		return solution[agentIdx].states[t].state;
  40e747:	44 8b 41 fc          	mov    -0x4(%rcx),%r8d
  40e74b:	44 8b 09             	mov    (%rcx),%r9d
	if (t < solution[agentIdx].states_size) {
  40e74e:	76 b8                	jbe    40e708 <_ZL14focalHeuristicPK10PlanResult+0x308>
		return solution[agentIdx].states[t].state;
  40e750:	8b 7e fc             	mov    -0x4(%rsi),%edi
  40e753:	8b 06                	mov    (%rsi),%eax
  40e755:	44 39 d7             	cmp    %r10d,%edi
  40e758:	75 c4                	jne    40e71e <_ZL14focalHeuristicPK10PlanResult+0x31e>
  40e75a:	39 c3                	cmp    %eax,%ebx
  40e75c:	75 c0                	jne    40e71e <_ZL14focalHeuristicPK10PlanResult+0x31e>
  40e75e:	45 39 d8             	cmp    %r11d,%r8d
  40e761:	75 bb                	jne    40e71e <_ZL14focalHeuristicPK10PlanResult+0x31e>
					++numConflicts;
  40e763:	31 c0                	xor    %eax,%eax
  40e765:	44 3b 4c 24 e0       	cmp    -0x20(%rsp),%r9d
  40e76a:	0f 94 c0             	sete   %al
  40e76d:	41 01 c7             	add    %eax,%r15d
  40e770:	eb ac                	jmp    40e71e <_ZL14focalHeuristicPK10PlanResult+0x31e>
  40e772:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40e778:	4c 89 e1             	mov    %r12,%rcx
	if (t < solution[agentIdx].states_size) {
  40e77b:	48 8b 81 00 04 00 00 	mov    0x400(%rcx),%rax
  40e782:	4c 39 e8             	cmp    %r13,%rax
  40e785:	0f 86 05 ff ff ff    	jbe    40e690 <_ZL14focalHeuristicPK10PlanResult+0x290>
		return solution[agentIdx].states[t].state;
  40e78b:	48 8b 5c 24 d8       	mov    -0x28(%rsp),%rbx
	if (t < solution[agentIdx].states_size) {
  40e790:	48 39 e8             	cmp    %rbp,%rax
		return solution[agentIdx].states[t].state;
  40e793:	44 8b 54 19 04       	mov    0x4(%rcx,%rbx,1),%r10d
  40e798:	8b 5c 19 08          	mov    0x8(%rcx,%rbx,1),%ebx
	if (t < solution[agentIdx].states_size) {
  40e79c:	0f 86 09 ff ff ff    	jbe    40e6ab <_ZL14focalHeuristicPK10PlanResult+0x2ab>
		return solution[agentIdx].states[t].state;
  40e7a2:	48 8b 44 24 d0       	mov    -0x30(%rsp),%rax
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e7a7:	48 3b 4c 24 b8       	cmp    -0x48(%rsp),%rcx
		return solution[agentIdx].states[t].state;
  40e7ac:	44 8b 5c 01 04       	mov    0x4(%rcx,%rax,1),%r11d
  40e7b1:	8b 44 01 08          	mov    0x8(%rcx,%rax,1),%eax
  40e7b5:	89 44 24 e0          	mov    %eax,-0x20(%rsp)
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e7b9:	0f 85 0d ff ff ff    	jne    40e6cc <_ZL14focalHeuristicPK10PlanResult+0x2cc>
  40e7bf:	4c 8b 64 24 d8       	mov    -0x28(%rsp),%r12
  40e7c4:	48 83 44 24 d0 10    	addq   $0x10,-0x30(%rsp)
  40e7ca:	49 89 ed             	mov    %rbp,%r13
  40e7cd:	49 83 c4 10          	add    $0x10,%r12
	for (int t = 0; t < max_t; ++t) {
  40e7d1:	39 6c 24 e4          	cmp    %ebp,-0x1c(%rsp)
  40e7d5:	0f 8f d3 fd ff ff    	jg     40e5ae <_ZL14focalHeuristicPK10PlanResult+0x1ae>
}
  40e7db:	5b                   	pop    %rbx
  40e7dc:	44 89 f8             	mov    %r15d,%eax
  40e7df:	5d                   	pop    %rbp
  40e7e0:	41 5c                	pop    %r12
  40e7e2:	41 5d                	pop    %r13
  40e7e4:	41 5e                	pop    %r14
  40e7e6:	41 5f                	pop    %r15
  40e7e8:	c3                   	retq   
	for (int t = 0; t < max_t; ++t) {
  40e7e9:	45 31 ff             	xor    %r15d,%r15d
}
  40e7ec:	5b                   	pop    %rbx
  40e7ed:	44 89 f8             	mov    %r15d,%eax
  40e7f0:	5d                   	pop    %rbp
  40e7f1:	41 5c                	pop    %r12
  40e7f3:	41 5d                	pop    %r13
  40e7f5:	41 5e                	pop    %r14
  40e7f7:	41 5f                	pop    %r15
  40e7f9:	c3                   	retq   
  40e7fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040e800 <_ZlsRSoRK6Action>:
  Left,
  Right,
  Wait,
};

std::ostream& operator<<(std::ostream& os, const Action& a) {
  40e800:	41 57                	push   %r15
  40e802:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 40e800 <_ZlsRSoRK6Action>
  40e809:	53                   	push   %rbx
  40e80a:	49 bb 00 c8 21 00 00 	movabs $0x21c800,%r11
  40e811:	00 00 00 
  40e814:	48 89 fb             	mov    %rdi,%rbx
  40e817:	48 83 ec 08          	sub    $0x8,%rsp
  40e81b:	4c 01 d8             	add    %r11,%rax
  switch (a) {
  40e81e:	83 3e 04             	cmpl   $0x4,(%rsi)
  40e821:	77 3d                	ja     40e860 <_ZlsRSoRK6Action+0x60>
  40e823:	8b 0e                	mov    (%rsi),%ecx
  40e825:	48 8d 15 14 49 01 00 	lea    0x14914(%rip),%rdx        # 423140 <_IO_stdin_used+0x7e0>
  40e82c:	48 03 14 ca          	add    (%rdx,%rcx,8),%rdx
  40e830:	ff e2                	jmpq   *%rdx
  40e832:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	__ostream_insert(__out, __s,
  40e838:	ba 05 00 00 00       	mov    $0x5,%edx
  40e83d:	48 b9 03 7e df ff ff 	movabs $0xffffffffffdf7e03,%rcx
  40e844:	ff ff ff 
  40e847:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
  40e84b:	48 b9 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rcx
  40e852:	ff ff ff 
  40e855:	48 89 df             	mov    %rbx,%rdi
  40e858:	49 89 c7             	mov    %rax,%r15
  40e85b:	48 01 c1             	add    %rax,%rcx
  40e85e:	ff d1                	callq  *%rcx
    case Action::Wait:
      os << "Wait";
      break;
  }
  return os;
}
  40e860:	48 83 c4 08          	add    $0x8,%rsp
  40e864:	48 89 d8             	mov    %rbx,%rax
  40e867:	5b                   	pop    %rbx
  40e868:	41 5f                	pop    %r15
  40e86a:	c3                   	retq   
  40e86b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  40e870:	ba 04 00 00 00       	mov    $0x4,%edx
  40e875:	48 b9 09 7e df ff ff 	movabs $0xffffffffffdf7e09,%rcx
  40e87c:	ff ff ff 
  40e87f:	eb c6                	jmp    40e847 <_ZlsRSoRK6Action+0x47>
  40e881:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40e888:	ba 02 00 00 00       	mov    $0x2,%edx
  40e88d:	48 b9 f6 7d df ff ff 	movabs $0xffffffffffdf7df6,%rcx
  40e894:	ff ff ff 
  40e897:	eb ae                	jmp    40e847 <_ZlsRSoRK6Action+0x47>
  40e899:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40e8a0:	ba 04 00 00 00       	mov    $0x4,%edx
  40e8a5:	48 b9 f9 7d df ff ff 	movabs $0xffffffffffdf7df9,%rcx
  40e8ac:	ff ff ff 
  40e8af:	eb 96                	jmp    40e847 <_ZlsRSoRK6Action+0x47>
  40e8b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40e8b8:	ba 04 00 00 00       	mov    $0x4,%edx
  40e8bd:	48 b9 fe 7d df ff ff 	movabs $0xffffffffffdf7dfe,%rcx
  40e8c4:	ff ff ff 
  40e8c7:	e9 7b ff ff ff       	jmpq   40e847 <_ZlsRSoRK6Action+0x47>
  40e8cc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000040e8d0 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE>:
	Cost focalHeuristic;
	int stat; //Open 0 or Close 1

};

void dump_openset(std::vector<AstarNode>& openSet) {
  40e8d0:	41 57                	push   %r15
  40e8d2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40e8d0 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE>
  40e8d9:	41 56                	push   %r14
  40e8db:	49 bb 30 c7 21 00 00 	movabs $0x21c730,%r11
  40e8e2:	00 00 00 
  40e8e5:	41 55                	push   %r13
  40e8e7:	41 54                	push   %r12
  40e8e9:	55                   	push   %rbp
  40e8ea:	53                   	push   %rbx
  40e8eb:	4d 01 df             	add    %r11,%r15
  40e8ee:	49 ba b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%r10
  40e8f5:	ff ff ff 
  40e8f8:	48 b8 0e 7e df ff ff 	movabs $0xffffffffffdf7e0e,%rax
  40e8ff:	ff ff ff 
  40e902:	ba 04 00 00 00       	mov    $0x4,%edx
  40e907:	48 83 ec 68          	sub    $0x68,%rsp
      : _M_current(__i) { }
  40e90b:	4c 8b 4f 08          	mov    0x8(%rdi),%r9
  40e90f:	4f 8b 2c 3a          	mov    (%r10,%r15,1),%r13
  40e913:	4a 8d 34 38          	lea    (%rax,%r15,1),%rsi
  40e917:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40e91c:	48 b8 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rax
  40e923:	ff ff ff 
  40e926:	4c 89 14 24          	mov    %r10,(%rsp)
  40e92a:	4c 8b 37             	mov    (%rdi),%r14
  40e92d:	4a 8d 1c 38          	lea    (%rax,%r15,1),%rbx
  40e931:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  40e936:	4c 89 ef             	mov    %r13,%rdi
  40e939:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40e93e:	ff d3                	callq  *%rbx
	return __pf(*this);
  40e940:	48 b8 10 31 de ff ff 	movabs $0xffffffffffde3110,%rax
  40e947:	ff ff ff 
  40e94a:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
  40e94e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40e953:	41 ff d4             	callq  *%r12
	__ostream_insert(__out, __s,
  40e956:	48 b8 13 7e df ff ff 	movabs $0xffffffffffdf7e13,%rax
  40e95d:	ff ff ff 
  40e960:	ba 18 00 00 00       	mov    $0x18,%edx
  40e965:	4c 89 ef             	mov    %r13,%rdi
  40e968:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40e96c:	ff d3                	callq  *%rbx
	return __pf(*this);
  40e96e:	41 ff d4             	callq  *%r12
	auto iter = openSet.begin();
	auto iterEnd = openSet.end();
	std::cout << "----" << std::endl;
	std::cout << "dump_openset AstarNode: " << std::endl;
	int index = 0;
	for (; iter != iterEnd; ++iter) {
  40e971:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  40e976:	4c 8b 14 24          	mov    (%rsp),%r10
  40e97a:	4d 39 f1             	cmp    %r14,%r9
  40e97d:	0f 84 f4 01 00 00    	je     40eb77 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0x2a7>
	__ostream_insert(__out, __s,
  40e983:	48 b8 8a 7e df ff ff 	movabs $0xffffffffffdf7e8a,%rax
  40e98a:	ff ff ff 
  40e98d:	45 31 c0             	xor    %r8d,%r8d
  40e990:	48 89 dd             	mov    %rbx,%rbp
  40e993:	4c 01 f8             	add    %r15,%rax
  40e996:	4d 89 f4             	mov    %r14,%r12
  40e999:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  40e99e:	48 b8 2c 7e df ff ff 	movabs $0xffffffffffdf7e2c,%rax
  40e9a5:	ff ff ff 
  40e9a8:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40e9ad:	eb 12                	jmp    40e9c1 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0xf1>
  40e9af:	90                   	nop
  40e9b0:	49 83 c4 1c          	add    $0x1c,%r12
		if(iter->stat == 0) {
			std::cout << index << ": " << *iter << std::endl; 
		}
		index++;
  40e9b4:	41 83 c0 01          	add    $0x1,%r8d
	for (; iter != iterEnd; ++iter) {
  40e9b8:	4d 39 e1             	cmp    %r12,%r9
  40e9bb:	0f 84 b6 01 00 00    	je     40eb77 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0x2a7>
		if(iter->stat == 0) {
  40e9c1:	41 8b 44 24 18       	mov    0x18(%r12),%eax
  40e9c6:	85 c0                	test   %eax,%eax
  40e9c8:	75 e6                	jne    40e9b0 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0xe0>
			std::cout << index << ": " << *iter << std::endl; 
  40e9ca:	48 bb 90 ea dd ff ff 	movabs $0xffffffffffddea90,%rbx
  40e9d1:	ff ff ff 
  40e9d4:	44 89 c6             	mov    %r8d,%esi
  40e9d7:	4b 8b 3c 3a          	mov    (%r10,%r15,1),%rdi
  40e9db:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  40e9e0:	44 89 44 24 2c       	mov    %r8d,0x2c(%rsp)
  40e9e5:	4c 01 fb             	add    %r15,%rbx
  40e9e8:	4c 89 54 24 20       	mov    %r10,0x20(%rsp)
  40e9ed:	49 83 c4 1c          	add    $0x1c,%r12
  40e9f1:	ff d3                	callq  *%rbx
  40e9f3:	ba 02 00 00 00       	mov    $0x2,%edx
  40e9f8:	49 89 c5             	mov    %rax,%r13
  40e9fb:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40ea00:	48 89 c7             	mov    %rax,%rdi
  40ea03:	ff d5                	callq  *%rbp
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40ea05:	41 8b 4c 24 f8       	mov    -0x8(%r12),%ecx
  40ea0a:	41 8b 54 24 f4       	mov    -0xc(%r12),%edx
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40ea0f:	41 8b 7c 24 f0       	mov    -0x10(%r12),%edi
			<< " stat: " << AstarNode.stat;
  40ea14:	41 8b 44 24 fc       	mov    -0x4(%r12),%eax
  40ea19:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40ea1e:	89 4c 24 14          	mov    %ecx,0x14(%rsp)
  40ea22:	89 54 24 18          	mov    %edx,0x18(%rsp)
  40ea26:	ba 07 00 00 00       	mov    $0x7,%edx
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40ea2b:	89 7c 24 1c          	mov    %edi,0x1c(%rsp)
			<< " stat: " << AstarNode.stat;
  40ea2f:	89 44 24 08          	mov    %eax,0x8(%rsp)
  40ea33:	4c 89 ef             	mov    %r13,%rdi
  40ea36:	4b 8d 34 1f          	lea    (%r15,%r11,1),%rsi
  40ea3a:	ff d5                	callq  *%rbp

  friend std::ostream& operator<<(std::ostream& os, const State& s) {
    return os << s.time << ": (" << s.x << "," << s.y << ")";
  40ea3c:	45 8b 5c 24 ec       	mov    -0x14(%r12),%r11d
  40ea41:	45 8b 74 24 e8       	mov    -0x18(%r12),%r14d
  40ea46:	4c 89 ef             	mov    %r13,%rdi
  40ea49:	41 8b 74 24 e4       	mov    -0x1c(%r12),%esi
  40ea4e:	4c 89 2c 24          	mov    %r13,(%rsp)
  40ea52:	44 89 5c 24 28       	mov    %r11d,0x28(%rsp)
  40ea57:	ff d3                	callq  *%rbx
  40ea59:	49 89 c5             	mov    %rax,%r13
  40ea5c:	48 b8 34 7e df ff ff 	movabs $0xffffffffffdf7e34,%rax
  40ea63:	ff ff ff 
  40ea66:	ba 03 00 00 00       	mov    $0x3,%edx
  40ea6b:	4c 89 ef             	mov    %r13,%rdi
  40ea6e:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ea72:	ff d5                	callq  *%rbp
  40ea74:	44 89 f6             	mov    %r14d,%esi
  40ea77:	4c 89 ef             	mov    %r13,%rdi
  40ea7a:	ff d3                	callq  *%rbx
  40ea7c:	49 89 c6             	mov    %rax,%r14
  40ea7f:	48 b8 38 7e df ff ff 	movabs $0xffffffffffdf7e38,%rax
  40ea86:	ff ff ff 
  40ea89:	ba 01 00 00 00       	mov    $0x1,%edx
  40ea8e:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ea92:	4c 89 f7             	mov    %r14,%rdi
  40ea95:	ff d5                	callq  *%rbp
  40ea97:	8b 74 24 28          	mov    0x28(%rsp),%esi
  40ea9b:	4c 89 f7             	mov    %r14,%rdi
  40ea9e:	ff d3                	callq  *%rbx
  40eaa0:	49 89 c5             	mov    %rax,%r13
  40eaa3:	48 b8 f7 7e df ff ff 	movabs $0xffffffffffdf7ef7,%rax
  40eaaa:	ff ff ff 
  40eaad:	ba 01 00 00 00       	mov    $0x1,%edx
  40eab2:	4c 89 ef             	mov    %r13,%rdi
  40eab5:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eab9:	ff d5                	callq  *%rbp
  40eabb:	48 b8 3a 7e df ff ff 	movabs $0xffffffffffdf7e3a,%rax
  40eac2:	ff ff ff 
  40eac5:	ba 09 00 00 00       	mov    $0x9,%edx
  40eaca:	4c 89 ef             	mov    %r13,%rdi
  40eacd:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ead1:	ff d5                	callq  *%rbp
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40ead3:	4c 89 ef             	mov    %r13,%rdi
  40ead6:	8b 74 24 1c          	mov    0x1c(%rsp),%esi
  40eada:	ff d3                	callq  *%rbx
  40eadc:	49 89 c5             	mov    %rax,%r13
  40eadf:	48 b8 44 7e df ff ff 	movabs $0xffffffffffdf7e44,%rax
  40eae6:	ff ff ff 
  40eae9:	ba 09 00 00 00       	mov    $0x9,%edx
  40eaee:	4c 89 ef             	mov    %r13,%rdi
  40eaf1:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eaf5:	ff d5                	callq  *%rbp
  40eaf7:	4c 89 ef             	mov    %r13,%rdi
  40eafa:	8b 74 24 18          	mov    0x18(%rsp),%esi
  40eafe:	ff d3                	callq  *%rbx
  40eb00:	49 89 c5             	mov    %rax,%r13
  40eb03:	48 b8 4e 7e df ff ff 	movabs $0xffffffffffdf7e4e,%rax
  40eb0a:	ff ff ff 
  40eb0d:	ba 08 00 00 00       	mov    $0x8,%edx
  40eb12:	4c 89 ef             	mov    %r13,%rdi
  40eb15:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eb19:	ff d5                	callq  *%rbp
			<< " stat: " << AstarNode.stat;
  40eb1b:	4c 89 ef             	mov    %r13,%rdi
  40eb1e:	8b 74 24 14          	mov    0x14(%rsp),%esi
  40eb22:	ff d3                	callq  *%rbx
  40eb24:	49 89 c5             	mov    %rax,%r13
  40eb27:	48 b8 57 7e df ff ff 	movabs $0xffffffffffdf7e57,%rax
  40eb2e:	ff ff ff 
  40eb31:	ba 07 00 00 00       	mov    $0x7,%edx
  40eb36:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eb3a:	4c 89 ef             	mov    %r13,%rdi
  40eb3d:	ff d5                	callq  *%rbp
  40eb3f:	8b 74 24 08          	mov    0x8(%rsp),%esi
  40eb43:	4c 89 ef             	mov    %r13,%rdi
  40eb46:	ff d3                	callq  *%rbx
	return __pf(*this);
  40eb48:	48 b8 70 e5 dd ff ff 	movabs $0xffffffffffdde570,%rax
  40eb4f:	ff ff ff 
  40eb52:	48 8b 3c 24          	mov    (%rsp),%rdi
  40eb56:	4c 01 f8             	add    %r15,%rax
  40eb59:	ff d0                	callq  *%rax
  40eb5b:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  40eb60:	44 8b 44 24 2c       	mov    0x2c(%rsp),%r8d
  40eb65:	4c 8b 54 24 20       	mov    0x20(%rsp),%r10
		index++;
  40eb6a:	41 83 c0 01          	add    $0x1,%r8d
	for (; iter != iterEnd; ++iter) {
  40eb6e:	4d 39 e1             	cmp    %r12,%r9
  40eb71:	0f 85 4a fe ff ff    	jne    40e9c1 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0xf1>
	__ostream_insert(__out, __s,
  40eb77:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  40eb7c:	4b 8b 3c 3a          	mov    (%r10,%r15,1),%rdi
  40eb80:	ba 04 00 00 00       	mov    $0x4,%edx
  40eb85:	4a 8d 34 38          	lea    (%rax,%r15,1),%rsi
  40eb89:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  40eb8e:	4c 01 f8             	add    %r15,%rax
  40eb91:	ff d0                	callq  *%rax
	return __pf(*this);
  40eb93:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
	}
	std::cout << "----" << std::endl;
}
  40eb98:	48 83 c4 68          	add    $0x68,%rsp
  40eb9c:	5b                   	pop    %rbx
  40eb9d:	5d                   	pop    %rbp
  40eb9e:	4c 01 f8             	add    %r15,%rax
  40eba1:	41 5c                	pop    %r12
  40eba3:	41 5d                	pop    %r13
  40eba5:	41 5e                	pop    %r14
  40eba7:	41 5f                	pop    %r15
  40eba9:	ff e0                	jmpq   *%rax
  40ebab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040ebb0 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE>:

void dump_focalset(std::vector<AstarNode>& openSet, std::vector<int>& focalSet) {
  40ebb0:	41 57                	push   %r15
  40ebb2:	41 56                	push   %r14
  40ebb4:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 40ebb0 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE>
  40ebbb:	41 55                	push   %r13
  40ebbd:	41 54                	push   %r12
  40ebbf:	49 bb 50 c4 21 00 00 	movabs $0x21c450,%r11
  40ebc6:	00 00 00 
  40ebc9:	55                   	push   %rbp
  40ebca:	53                   	push   %rbx
  40ebcb:	4d 01 de             	add    %r11,%r14
	__ostream_insert(__out, __s,
  40ebce:	48 b9 0e 7e df ff ff 	movabs $0xffffffffffdf7e0e,%rcx
  40ebd5:	ff ff ff 
  40ebd8:	ba 04 00 00 00       	mov    $0x4,%edx
  40ebdd:	4d 89 f7             	mov    %r14,%r15
  40ebe0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  40ebe7:	4c 8b 2e             	mov    (%rsi),%r13
  40ebea:	48 8b 46 08          	mov    0x8(%rsi),%rax
  40ebee:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  40ebf5:	00 
  40ebf6:	4a 8d 34 31          	lea    (%rcx,%r14,1),%rsi
  40ebfa:	48 b9 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rcx
  40ec01:	ff ff ff 
  40ec04:	4a 8b 2c 31          	mov    (%rcx,%r14,1),%rbp
  40ec08:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  40ec0f:	00 
  40ec10:	48 b9 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rcx
  40ec17:	ff ff ff 
  40ec1a:	4a 8d 1c 31          	lea    (%rcx,%r14,1),%rbx
  40ec1e:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  40ec23:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  40ec2a:	00 
  40ec2b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40ec30:	48 89 ef             	mov    %rbp,%rdi
  40ec33:	ff d3                	callq  *%rbx
	return __pf(*this);
  40ec35:	48 b9 10 31 de ff ff 	movabs $0xffffffffffde3110,%rcx
  40ec3c:	ff ff ff 
  40ec3f:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  40ec46:	00 
  40ec47:	4e 8d 24 31          	lea    (%rcx,%r14,1),%r12
  40ec4b:	41 ff d4             	callq  *%r12
	__ostream_insert(__out, __s,
  40ec4e:	48 b8 5f 7e df ff ff 	movabs $0xffffffffffdf7e5f,%rax
  40ec55:	ff ff ff 
  40ec58:	ba 0f 00 00 00       	mov    $0xf,%edx
  40ec5d:	48 89 ef             	mov    %rbp,%rdi
  40ec60:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
  40ec64:	ff d3                	callq  *%rbx
	return __pf(*this);
  40ec66:	41 ff d4             	callq  *%r12
	auto iter = focalSet.begin();
	auto iterEnd = focalSet.end();
	std::cout << "----" << std::endl;
	std::cout << "dump_focalset: " << std::endl;
	for (; iter != iterEnd; ++iter) {
  40ec69:	4c 3b 6c 24 28       	cmp    0x28(%rsp),%r13
  40ec6e:	0f 84 0c 03 00 00    	je     40ef80 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x3d0>
  40ec74:	48 b8 6f 7e df ff ff 	movabs $0xffffffffffdf7e6f,%rax
  40ec7b:	ff ff ff 
  40ec7e:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
	__ostream_insert(__out, __s,
  40ec83:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
  40ec88:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40ec8d:	48 b8 90 ea dd ff ff 	movabs $0xffffffffffddea90,%rax
  40ec94:	ff ff ff 
  40ec97:	49 89 dc             	mov    %rbx,%r12
  40ec9a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40ec9f:	48 b8 7f 7e df ff ff 	movabs $0xffffffffffdf7e7f,%rax
  40eca6:	ff ff ff 
  40eca9:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40ecb0:	00 
  40ecb1:	48 b8 2c 7e df ff ff 	movabs $0xffffffffffdf7e2c,%rax
  40ecb8:	ff ff ff 
  40ecbb:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  40ecc2:	00 
  40ecc3:	48 b8 34 7e df ff ff 	movabs $0xffffffffffdf7e34,%rax
  40ecca:	ff ff ff 
  40eccd:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40ecd4:	00 
  40ecd5:	48 b8 38 7e df ff ff 	movabs $0xffffffffffdf7e38,%rax
  40ecdc:	ff ff ff 
  40ecdf:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40ece4:	48 b8 f7 7e df ff ff 	movabs $0xffffffffffdf7ef7,%rax
  40eceb:	ff ff ff 
  40ecee:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40ecf3:	48 b8 3a 7e df ff ff 	movabs $0xffffffffffdf7e3a,%rax
  40ecfa:	ff ff ff 
  40ecfd:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40ed02:	48 b8 44 7e df ff ff 	movabs $0xffffffffffdf7e44,%rax
  40ed09:	ff ff ff 
  40ed0c:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  40ed11:	48 b8 4e 7e df ff ff 	movabs $0xffffffffffdf7e4e,%rax
  40ed18:	ff ff ff 
  40ed1b:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  40ed20:	48 b8 57 7e df ff ff 	movabs $0xffffffffffdf7e57,%rax
  40ed27:	ff ff ff 
  40ed2a:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  40ed2f:	48 b8 60 7f de ff ff 	movabs $0xffffffffffde7f60,%rax
  40ed36:	ff ff ff 
  40ed39:	4c 01 f0             	add    %r14,%rax
  40ed3c:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  40ed43:	00 
  40ed44:	4c 89 e8             	mov    %r13,%rax
  40ed47:	eb 48                	jmp    40ed91 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1e1>
  40ed49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40ed50:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    { return flush(__os.put(__os.widen('\n'))); }
  40ed54:	48 b8 10 e4 dd ff ff 	movabs $0xffffffffffdde410,%rax
  40ed5b:	ff ff ff 
  40ed5e:	4c 89 ef             	mov    %r13,%rdi
  40ed61:	4d 89 f7             	mov    %r14,%r15
  40ed64:	4c 01 f0             	add    %r14,%rax
  40ed67:	ff d0                	callq  *%rax
    { return __os.flush(); }
  40ed69:	48 89 c7             	mov    %rax,%rdi
  40ed6c:	48 b8 a0 e6 dd ff ff 	movabs $0xffffffffffdde6a0,%rax
  40ed73:	ff ff ff 
  40ed76:	4c 01 f0             	add    %r14,%rax
  40ed79:	ff d0                	callq  *%rax
  40ed7b:	48 83 44 24 08 04    	addq   $0x4,0x8(%rsp)
  40ed81:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40ed86:	48 39 44 24 28       	cmp    %rax,0x28(%rsp)
  40ed8b:	0f 84 ef 01 00 00    	je     40ef80 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x3d0>
		//std::cout << *iter << std::endl; 
		std::cout << "openset index: "<< *iter << ", AstarNode: " << openSet[*iter] << std::endl; 
  40ed91:	48 63 10             	movslq (%rax),%rdx
      { return *(this->_M_impl._M_start + __n); }
  40ed94:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
	__ostream_insert(__out, __s,
  40ed99:	4d 89 f7             	mov    %r14,%r15
  40ed9c:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
  40eda1:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40eda8:	00 
  40eda9:	48 89 d3             	mov    %rdx,%rbx
  40edac:	4c 89 ef             	mov    %r13,%rdi
  40edaf:	48 29 d0             	sub    %rdx,%rax
  40edb2:	48 8b 11             	mov    (%rcx),%rdx
  40edb5:	48 8d 2c 82          	lea    (%rdx,%rax,4),%rbp
  40edb9:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  40edbe:	ba 0f 00 00 00       	mov    $0xf,%edx
  40edc3:	4a 8d 34 30          	lea    (%rax,%r14,1),%rsi
  40edc7:	41 ff d4             	callq  *%r12
  40edca:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40edcf:	89 de                	mov    %ebx,%esi
  40edd1:	4c 89 ef             	mov    %r13,%rdi
  40edd4:	4a 8d 1c 30          	lea    (%rax,%r14,1),%rbx
  40edd8:	ff d3                	callq  *%rbx
  40edda:	49 89 c5             	mov    %rax,%r13
  40eddd:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40ede4:	00 
  40ede5:	ba 0d 00 00 00       	mov    $0xd,%edx
  40edea:	4c 89 ef             	mov    %r13,%rdi
  40eded:	4a 8d 34 30          	lea    (%rax,%r14,1),%rsi
  40edf1:	41 ff d4             	callq  *%r12
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40edf4:	8b 4d 14             	mov    0x14(%rbp),%ecx
  40edf7:	4c 8b 84 24 88 00 00 	mov    0x88(%rsp),%r8
  40edfe:	00 
  40edff:	8b 55 10             	mov    0x10(%rbp),%edx
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40ee02:	8b 7d 0c             	mov    0xc(%rbp),%edi
			<< " stat: " << AstarNode.stat;
  40ee05:	8b 45 18             	mov    0x18(%rbp),%eax
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40ee08:	89 4c 24 14          	mov    %ecx,0x14(%rsp)
  40ee0c:	4b 8d 34 30          	lea    (%r8,%r14,1),%rsi
  40ee10:	89 54 24 18          	mov    %edx,0x18(%rsp)
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40ee14:	89 7c 24 1c          	mov    %edi,0x1c(%rsp)
  40ee18:	ba 07 00 00 00       	mov    $0x7,%edx
  40ee1d:	4c 89 ef             	mov    %r13,%rdi
			<< " stat: " << AstarNode.stat;
  40ee20:	89 44 24 10          	mov    %eax,0x10(%rsp)
  40ee24:	41 ff d4             	callq  *%r12
  40ee27:	44 8b 55 04          	mov    0x4(%rbp),%r10d
  40ee2b:	44 8b 4d 08          	mov    0x8(%rbp),%r9d
  40ee2f:	4c 89 ef             	mov    %r13,%rdi
  40ee32:	8b 75 00             	mov    0x0(%rbp),%esi
  40ee35:	44 89 54 24 24       	mov    %r10d,0x24(%rsp)
  40ee3a:	44 89 4c 24 20       	mov    %r9d,0x20(%rsp)
  40ee3f:	ff d3                	callq  *%rbx
  40ee41:	4c 8b 9c 24 90 00 00 	mov    0x90(%rsp),%r11
  40ee48:	00 
  40ee49:	48 89 c5             	mov    %rax,%rbp
  40ee4c:	ba 03 00 00 00       	mov    $0x3,%edx
  40ee51:	48 89 c7             	mov    %rax,%rdi
  40ee54:	4b 8d 34 33          	lea    (%r11,%r14,1),%rsi
  40ee58:	41 ff d4             	callq  *%r12
  40ee5b:	48 89 ef             	mov    %rbp,%rdi
  40ee5e:	8b 74 24 24          	mov    0x24(%rsp),%esi
  40ee62:	ff d3                	callq  *%rbx
  40ee64:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
  40ee69:	48 89 c5             	mov    %rax,%rbp
  40ee6c:	ba 01 00 00 00       	mov    $0x1,%edx
  40ee71:	48 89 c7             	mov    %rax,%rdi
  40ee74:	4b 8d 34 30          	lea    (%r8,%r14,1),%rsi
  40ee78:	41 ff d4             	callq  *%r12
  40ee7b:	48 89 ef             	mov    %rbp,%rdi
  40ee7e:	8b 74 24 20          	mov    0x20(%rsp),%esi
  40ee82:	ff d3                	callq  *%rbx
  40ee84:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
  40ee89:	48 89 c5             	mov    %rax,%rbp
  40ee8c:	ba 01 00 00 00       	mov    $0x1,%edx
  40ee91:	48 89 c7             	mov    %rax,%rdi
  40ee94:	4b 8d 34 31          	lea    (%r9,%r14,1),%rsi
  40ee98:	41 ff d4             	callq  *%r12
  40ee9b:	4c 8b 54 24 58       	mov    0x58(%rsp),%r10
  40eea0:	ba 09 00 00 00       	mov    $0x9,%edx
  40eea5:	48 89 ef             	mov    %rbp,%rdi
  40eea8:	4b 8d 34 32          	lea    (%r10,%r14,1),%rsi
  40eeac:	41 ff d4             	callq  *%r12
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40eeaf:	48 89 ef             	mov    %rbp,%rdi
  40eeb2:	8b 74 24 1c          	mov    0x1c(%rsp),%esi
  40eeb6:	ff d3                	callq  *%rbx
  40eeb8:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40eebd:	48 89 c5             	mov    %rax,%rbp
  40eec0:	ba 09 00 00 00       	mov    $0x9,%edx
  40eec5:	4a 8d 34 37          	lea    (%rdi,%r14,1),%rsi
  40eec9:	48 89 c7             	mov    %rax,%rdi
  40eecc:	41 ff d4             	callq  *%r12
  40eecf:	48 89 ef             	mov    %rbp,%rdi
  40eed2:	8b 74 24 18          	mov    0x18(%rsp),%esi
  40eed6:	ff d3                	callq  *%rbx
  40eed8:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  40eedd:	48 89 c5             	mov    %rax,%rbp
  40eee0:	ba 08 00 00 00       	mov    $0x8,%edx
  40eee5:	4a 8d 34 37          	lea    (%rdi,%r14,1),%rsi
  40eee9:	48 89 c7             	mov    %rax,%rdi
  40eeec:	41 ff d4             	callq  *%r12
			<< " stat: " << AstarNode.stat;
  40eeef:	48 89 ef             	mov    %rbp,%rdi
  40eef2:	8b 74 24 14          	mov    0x14(%rsp),%esi
  40eef6:	ff d3                	callq  *%rbx
  40eef8:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  40eefd:	48 89 c5             	mov    %rax,%rbp
  40ef00:	ba 07 00 00 00       	mov    $0x7,%edx
  40ef05:	48 89 c7             	mov    %rax,%rdi
  40ef08:	4a 8d 34 31          	lea    (%rcx,%r14,1),%rsi
  40ef0c:	41 ff d4             	callq  *%r12
  40ef0f:	8b 74 24 10          	mov    0x10(%rsp),%esi
  40ef13:	48 89 ef             	mov    %rbp,%rdi
  40ef16:	ff d3                	callq  *%rbx
    { return flush(__os.put(__os.widen('\n'))); }
  40ef18:	49 8b 45 00          	mov    0x0(%r13),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40ef1c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40ef20:	49 8b 9c 05 f0 00 00 	mov    0xf0(%r13,%rax,1),%rbx
  40ef27:	00 
      if (!__f)
  40ef28:	48 85 db             	test   %rbx,%rbx
  40ef2b:	0f 84 9a 00 00 00    	je     40efcb <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x41b>
	if (_M_widen_ok)
  40ef31:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
  40ef35:	0f 85 15 fe ff ff    	jne    40ed50 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1a0>
	this->_M_widen_init();
  40ef3b:	48 b8 30 e8 dd ff ff 	movabs $0xffffffffffdde830,%rax
  40ef42:	ff ff ff 
  40ef45:	48 89 df             	mov    %rbx,%rdi
  40ef48:	4d 89 f7             	mov    %r14,%r15
  40ef4b:	4c 01 f0             	add    %r14,%rax
  40ef4e:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40ef50:	48 8b 03             	mov    (%rbx),%rax
  40ef53:	be 0a 00 00 00       	mov    $0xa,%esi
  40ef58:	48 8b 40 30          	mov    0x30(%rax),%rax
  40ef5c:	48 3b 84 24 98 00 00 	cmp    0x98(%rsp),%rax
  40ef63:	00 
  40ef64:	0f 84 ea fd ff ff    	je     40ed54 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1a4>
  40ef6a:	48 89 df             	mov    %rbx,%rdi
  40ef6d:	ff d0                	callq  *%rax
  40ef6f:	0f be f0             	movsbl %al,%esi
  40ef72:	e9 dd fd ff ff       	jmpq   40ed54 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1a4>
  40ef77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40ef7e:	00 00 
	__ostream_insert(__out, __s,
  40ef80:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  40ef87:	00 
  40ef88:	4d 89 f7             	mov    %r14,%r15
  40ef8b:	ba 04 00 00 00       	mov    $0x4,%edx
  40ef90:	4a 8d 34 30          	lea    (%rax,%r14,1),%rsi
  40ef94:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  40ef9b:	00 
  40ef9c:	4a 8b 3c 30          	mov    (%rax,%r14,1),%rdi
  40efa0:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  40efa7:	00 
  40efa8:	4c 01 f0             	add    %r14,%rax
  40efab:	ff d0                	callq  *%rax
	return __pf(*this);
  40efad:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  40efb4:	00 
	}
	std::cout << "----" << std::endl;
}
  40efb5:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  40efbc:	5b                   	pop    %rbx
  40efbd:	5d                   	pop    %rbp
  40efbe:	4c 01 f0             	add    %r14,%rax
  40efc1:	41 5c                	pop    %r12
  40efc3:	41 5d                	pop    %r13
  40efc5:	41 5e                	pop    %r14
  40efc7:	41 5f                	pop    %r15
  40efc9:	ff e0                	jmpq   *%rax
	__throw_bad_cast();
  40efcb:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  40efd2:	ff ff ff 
  40efd5:	4c 01 f0             	add    %r14,%rax
  40efd8:	ff d0                	callq  *%rax
  40efda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040efe0 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE>:

int openset_top(std::vector<AstarNode>& openSet) {
  40efe0:	48 8b 0f             	mov    (%rdi),%rcx
  40efe3:	48 8b 77 08          	mov    0x8(%rdi),%rsi
	AstarNode current = openSet[0];
	size_t current_idx = 0;
	auto iter = openSet.begin();
	auto iterEnd = openSet.end();
	// set initial AstarNode
	for (; iter != iterEnd; ++iter) {
  40efe7:	48 39 ce             	cmp    %rcx,%rsi
  40efea:	74 26                	je     40f012 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x32>
		if (iter->stat == 1) // CLOSED
  40efec:	83 79 18 01          	cmpl   $0x1,0x18(%rcx)
  40eff0:	48 8d 51 1c          	lea    0x1c(%rcx),%rdx
  40eff4:	74 17                	je     40f00d <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x2d>
  40eff6:	e9 a9 00 00 00       	jmpq   40f0a4 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0xc4>
  40effb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  40f000:	48 8d 42 1c          	lea    0x1c(%rdx),%rax
  40f004:	83 78 fc 01          	cmpl   $0x1,-0x4(%rax)
  40f008:	75 0e                	jne    40f018 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x38>
  40f00a:	48 89 c2             	mov    %rax,%rdx
	for (; iter != iterEnd; ++iter) {
  40f00d:	48 39 d6             	cmp    %rdx,%rsi
  40f010:	75 ee                	jne    40f000 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x20>
  40f012:	31 c0                	xor    %eax,%eax
				current_idx = std::distance(openSet.begin(), iter); 
			}
		}
	}

	return current_idx;
  40f014:	c3                   	retq   
  40f015:	0f 1f 00             	nopl   (%rax)
  40f018:	48 89 d0             	mov    %rdx,%rax
  40f01b:	48 bf b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rdi
  40f022:	db b6 6d 
  40f025:	48 29 c8             	sub    %rcx,%rax
  40f028:	48 c1 f8 02          	sar    $0x2,%rax
  40f02c:	48 0f af c7          	imul   %rdi,%rax
  40f030:	48 89 d7             	mov    %rdx,%rdi
			current = *iter;
  40f033:	44 8b 42 0c          	mov    0xc(%rdx),%r8d
  40f037:	44 8b 4a 10          	mov    0x10(%rdx),%r9d
  40f03b:	48 29 cf             	sub    %rcx,%rdi
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
  40f03e:	49 ba b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%r10
  40f045:	db b6 6d 
  40f048:	48 89 f9             	mov    %rdi,%rcx
  40f04b:	eb 24                	jmp    40f071 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x91>
  40f04d:	0f 1f 00             	nopl   (%rax)
			if (current.fScore > iter->fScore) {
  40f050:	7e 12                	jle    40f064 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x84>
  40f052:	48 89 c8             	mov    %rcx,%rax
				current = *iter;
  40f055:	44 8b 4a 10          	mov    0x10(%rdx),%r9d
  40f059:	41 89 f8             	mov    %edi,%r8d
  40f05c:	48 c1 f8 02          	sar    $0x2,%rax
				current_idx = std::distance(openSet.begin(), iter); 
  40f060:	49 0f af c2          	imul   %r10,%rax
	++_M_current;
  40f064:	48 83 c2 1c          	add    $0x1c,%rdx
  40f068:	48 83 c1 1c          	add    $0x1c,%rcx
	for (; iter != iterEnd; ++iter) {
  40f06c:	48 39 d6             	cmp    %rdx,%rsi
  40f06f:	74 31                	je     40f0a2 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0xc2>
		if (iter->stat == 1) // CLOSED
  40f071:	83 7a 18 01          	cmpl   $0x1,0x18(%rdx)
  40f075:	74 ed                	je     40f064 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x84>
		if (current.fScore != iter->fScore) {
  40f077:	8b 7a 0c             	mov    0xc(%rdx),%edi
  40f07a:	41 39 f8             	cmp    %edi,%r8d
  40f07d:	75 d1                	jne    40f050 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x70>
			if (current.gScore < iter->gScore) {
  40f07f:	8b 7a 10             	mov    0x10(%rdx),%edi
  40f082:	41 39 f9             	cmp    %edi,%r9d
  40f085:	7d dd                	jge    40f064 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x84>
    { return __lhs.base() - __rhs.base(); }
  40f087:	48 89 c8             	mov    %rcx,%rax
	++_M_current;
  40f08a:	48 83 c2 1c          	add    $0x1c,%rdx
  40f08e:	48 83 c1 1c          	add    $0x1c,%rcx
    { return __lhs.base() - __rhs.base(); }
  40f092:	48 c1 f8 02          	sar    $0x2,%rax
  40f096:	41 89 f9             	mov    %edi,%r9d
				current_idx = std::distance(openSet.begin(), iter); 
  40f099:	49 0f af c2          	imul   %r10,%rax
	for (; iter != iterEnd; ++iter) {
  40f09d:	48 39 d6             	cmp    %rdx,%rsi
  40f0a0:	75 cf                	jne    40f071 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x91>
  40f0a2:	f3 c3                	repz retq 
		if (iter->stat == 1) // CLOSED
  40f0a4:	48 89 ca             	mov    %rcx,%rdx
  40f0a7:	31 c0                	xor    %eax,%eax
  40f0a9:	eb 85                	jmp    40f030 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x50>
  40f0ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040f0b0 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE>:
}

int focalset_top(std::vector<AstarNode>& openSet, std::vector<int>& focalSet) {
  40f0b0:	55                   	push   %rbp
  40f0b1:	53                   	push   %rbx
  40f0b2:	4c 8b 0e             	mov    (%rsi),%r9
  40f0b5:	4c 8b 17             	mov    (%rdi),%r10
	int coi = focalSet[0]; // coi = current openset index
	AstarNode current = openSet[coi];
  40f0b8:	49 63 11             	movslq (%r9),%rdx
  40f0bb:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40f0c2:	00 
  40f0c3:	48 29 d0             	sub    %rdx,%rax
  40f0c6:	49 8d 04 82          	lea    (%r10,%rax,4),%rax
  40f0ca:	8b 58 0c             	mov    0xc(%rax),%ebx
  40f0cd:	8b 68 10             	mov    0x10(%rax),%ebp
  40f0d0:	44 8b 40 14          	mov    0x14(%rax),%r8d
      : _M_current(__i) { }
  40f0d4:	48 8b 46 08          	mov    0x8(%rsi),%rax
	int current_idx = 0;
	auto iter = focalSet.begin();
	auto iterEnd = focalSet.end();
	for (; iter != iterEnd; ++iter) {
  40f0d8:	4c 39 c8             	cmp    %r9,%rax
  40f0db:	0f 84 8e 00 00 00    	je     40f16f <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xbf>
  40f0e1:	49 8d 51 04          	lea    0x4(%r9),%rdx
  40f0e5:	44 89 c1             	mov    %r8d,%ecx
  40f0e8:	89 ef                	mov    %ebp,%edi
  40f0ea:	89 de                	mov    %ebx,%esi
  40f0ec:	48 29 d0             	sub    %rdx,%rax
  40f0ef:	31 d2                	xor    %edx,%edx
  40f0f1:	48 c1 e8 02          	shr    $0x2,%rax
  40f0f5:	4c 8d 1c 85 04 00 00 	lea    0x4(,%rax,4),%r11
  40f0fc:	00 
  40f0fd:	31 c0                	xor    %eax,%eax
  40f0ff:	eb 3c                	jmp    40f13d <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x8d>
  40f101:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		int n_coi = *iter;
		AstarNode n = openSet[n_coi];
		if (current.focalHeuristic != n.focalHeuristic) {
			if (current.focalHeuristic > n.focalHeuristic) {
  40f108:	7d 0e                	jge    40f118 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
				coi = n_coi;
				current = n;
				current_idx = std::distance(focalSet.begin(), iter); 
  40f10a:	48 89 d0             	mov    %rdx,%rax
  40f10d:	41 89 c8             	mov    %ecx,%r8d
  40f110:	89 fd                	mov    %edi,%ebp
  40f112:	48 c1 e8 02          	shr    $0x2,%rax
  40f116:	89 f3                	mov    %esi,%ebx
  40f118:	48 83 c2 04          	add    $0x4,%rdx
	for (; iter != iterEnd; ++iter) {
  40f11c:	49 39 d3             	cmp    %rdx,%r11
  40f11f:	74 3b                	je     40f15c <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xac>
  40f121:	49 63 34 11          	movslq (%r9,%rdx,1),%rsi
  40f125:	48 8d 0c f5 00 00 00 	lea    0x0(,%rsi,8),%rcx
  40f12c:	00 
  40f12d:	48 29 f1             	sub    %rsi,%rcx
  40f130:	49 8d 0c 8a          	lea    (%r10,%rcx,4),%rcx
  40f134:	8b 71 0c             	mov    0xc(%rcx),%esi
  40f137:	8b 79 10             	mov    0x10(%rcx),%edi
  40f13a:	8b 49 14             	mov    0x14(%rcx),%ecx
		if (current.focalHeuristic != n.focalHeuristic) {
  40f13d:	44 39 c1             	cmp    %r8d,%ecx
  40f140:	75 c6                	jne    40f108 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x58>
			}
		}
		else if (current.fScore != n.fScore) {
  40f142:	39 f3                	cmp    %esi,%ebx
  40f144:	74 1a                	je     40f160 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xb0>
			if (current.fScore > n.fScore) {
  40f146:	7e d0                	jle    40f118 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
				coi = n_coi;
				current = n;
				current_idx = std::distance(focalSet.begin(), iter); 
  40f148:	48 89 d0             	mov    %rdx,%rax
  40f14b:	48 83 c2 04          	add    $0x4,%rdx
  40f14f:	89 fd                	mov    %edi,%ebp
  40f151:	48 c1 e8 02          	shr    $0x2,%rax
	for (; iter != iterEnd; ++iter) {
  40f155:	49 39 d3             	cmp    %rdx,%r11
  40f158:	89 f3                	mov    %esi,%ebx
  40f15a:	75 c5                	jne    40f121 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x71>
			}
		}
	}

	return current_idx;
}
  40f15c:	5b                   	pop    %rbx
  40f15d:	5d                   	pop    %rbp
  40f15e:	c3                   	retq   
  40f15f:	90                   	nop
			if (current.gScore < n.gScore) {
  40f160:	39 fd                	cmp    %edi,%ebp
  40f162:	7d b4                	jge    40f118 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
				current_idx = std::distance(focalSet.begin(), iter); 
  40f164:	48 89 d0             	mov    %rdx,%rax
  40f167:	89 fd                	mov    %edi,%ebp
  40f169:	48 c1 e8 02          	shr    $0x2,%rax
  40f16d:	eb a9                	jmp    40f118 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
	int current_idx = 0;
  40f16f:	31 c0                	xor    %eax,%eax
	return current_idx;
  40f171:	eb e9                	jmp    40f15c <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xac>
  40f173:	0f 1f 00             	nopl   (%rax)
  40f176:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f17d:	00 00 00 

000000000040f180 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE>:
  40f180:	48 8b 07             	mov    (%rdi),%rax
  40f183:	48 8b 57 08          	mov    0x8(%rdi),%rdx

bool openset_is_allclosed(std::vector<AstarNode>& openSet) {
	auto iter = openSet.begin();
	auto iterEnd = openSet.end();
	for (; iter != iterEnd; ++iter) {
  40f187:	48 39 d0             	cmp    %rdx,%rax
  40f18a:	74 24                	je     40f1b0 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x30>
		if(iter->stat == 0)
  40f18c:	8b 70 18             	mov    0x18(%rax),%esi
  40f18f:	85 f6                	test   %esi,%esi
  40f191:	74 2d                	je     40f1c0 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x40>
  40f193:	48 83 c0 1c          	add    $0x1c,%rax
  40f197:	eb 12                	jmp    40f1ab <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x2b>
  40f199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40f1a0:	48 83 c0 1c          	add    $0x1c,%rax
  40f1a4:	8b 48 fc             	mov    -0x4(%rax),%ecx
  40f1a7:	85 c9                	test   %ecx,%ecx
  40f1a9:	74 15                	je     40f1c0 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x40>
	for (; iter != iterEnd; ++iter) {
  40f1ab:	48 39 c2             	cmp    %rax,%rdx
  40f1ae:	75 f0                	jne    40f1a0 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x20>
			return false;
	}
	return true;
  40f1b0:	b8 01 00 00 00       	mov    $0x1,%eax
  40f1b5:	c3                   	retq   
  40f1b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f1bd:	00 00 00 
			return false;
  40f1c0:	31 c0                	xor    %eax,%eax
}
  40f1c2:	c3                   	retq   
  40f1c3:	0f 1f 00             	nopl   (%rax)
  40f1c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f1cd:	00 00 00 

000000000040f1d0 <_Z5indexRK13HighLevelNode>:

bool done[MAX_NODE_NUMS] __attribute__((aligned(SWARM_ALIGNMENT)));

//#####################################

int index(const HighLevelNode& n) {
  40f1d0:	41 57                	push   %r15
  40f1d2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40f1d0 <_Z5indexRK13HighLevelNode>
  40f1d9:	53                   	push   %rbx
  40f1da:	49 bb 30 be 21 00 00 	movabs $0x21be30,%r11
  40f1e1:	00 00 00 
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
  40f1e4:	48 b8 20 93 df ff ff 	movabs $0xffffffffffdf9320,%rax
  40f1eb:	ff ff ff 
  40f1ee:	48 89 fb             	mov    %rdi,%rbx
  40f1f1:	48 83 ec 18          	sub    $0x18,%rsp
  40f1f5:	4d 01 df             	add    %r11,%r15
  40f1f8:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40f1fc:	f2 41 0f 10 14 07    	movsd  (%r15,%rax,1),%xmm2
  40f202:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  40f209:	ff ff ff 
  40f20c:	4c 01 f8             	add    %r15,%rax
  40f20f:	f2 0f 11 54 24 08    	movsd  %xmm2,0x8(%rsp)
  40f215:	f2 0f 2a 8f 5c 00 01 	cvtsi2sdl 0x1005c(%rdi),%xmm1
  40f21c:	00 
  40f21d:	66 0f 28 c2          	movapd %xmm2,%xmm0
  40f221:	ff d0                	callq  *%rax
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  40f223:	8b 83 54 00 01 00    	mov    0x10054(%rbx),%eax
  40f229:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40f22d:	01 c0                	add    %eax,%eax
  40f22f:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  40f233:	48 b8 28 93 df ff ff 	movabs $0xffffffffffdf9328,%rax
  40f23a:	ff ff ff 
  40f23d:	f2 42 0f 5c 04 38    	subsd  (%rax,%r15,1),%xmm0
  40f243:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40f247:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40f24b:	f2 0f 2a 8b 58 00 01 	cvtsi2sdl 0x10058(%rbx),%xmm1
  40f252:	00 
}
  40f253:	48 83 c4 18          	add    $0x18,%rsp
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  40f257:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
}
  40f25b:	5b                   	pop    %rbx
  40f25c:	41 5f                	pop    %r15
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  40f25e:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
}
  40f262:	c3                   	retq   
  40f263:	0f 1f 00             	nopl   (%rax)
  40f266:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f26d:	00 00 00 

000000000040f270 <_Z5indexii>:
 
int index(int parent_nodeid, int child_id) {
	return parent_nodeid * 2 + 1 + child_id;
  40f270:	8d 44 7e 01          	lea    0x1(%rsi,%rdi,2),%eax
}
  40f274:	c3                   	retq   
  40f275:	90                   	nop
  40f276:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f27d:	00 00 00 

000000000040f280 <_Z6fillermP13HighLevelNodemi>:
#else
	void main_loop_task(int n);
#endif
void enq_upper(swarm::Timestamp ts, HighLevelNode* node,  size_t i , int hlsnum);

void filler(swarm::Timestamp ts, HighLevelNode* node,  size_t i , int hlsnum){
  40f280:	41 56                	push   %r14
  40f282:	41 55                	push   %r13
  40f284:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 40f280 <_Z6fillermP13HighLevelNodemi>
  40f28b:	41 54                	push   %r12
  40f28d:	49 89 d4             	mov    %rdx,%r12
  40f290:	55                   	push   %rbp
  //swarm::info("filler reach ts:%x, superts:%x", ts, swarm::superTimestamp());
  //HLSQueueNode( node,  i , ts, hlsnum);
  node->cost += node->solution[i].cost;
  40f291:	48 69 d2 50 06 00 00 	imul   $0x650,%rdx,%rdx
void filler(swarm::Timestamp ts, HighLevelNode* node,  size_t i , int hlsnum){
  40f298:	53                   	push   %rbx
  40f299:	49 bb 80 bd 21 00 00 	movabs $0x21bd80,%r11
  40f2a0:	00 00 00 
  40f2a3:	48 89 f3             	mov    %rsi,%rbx
  40f2a6:	4d 01 dd             	add    %r11,%r13
  40f2a9:	89 cd                	mov    %ecx,%ebp
  node->LB += node->solution[i].fmin;
	node->focalHeuristic = focalHeuristic(node->solution);  
  40f2ab:	48 89 f7             	mov    %rsi,%rdi
  node->cost += node->solution[i].cost;
  40f2ae:	48 01 f2             	add    %rsi,%rdx
  40f2b1:	8b 82 10 06 00 00    	mov    0x610(%rdx),%eax
  40f2b7:	03 86 40 00 01 00    	add    0x10040(%rsi),%eax
  40f2bd:	41 89 c6             	mov    %eax,%r14d
  40f2c0:	89 86 40 00 01 00    	mov    %eax,0x10040(%rsi)
  node->LB += node->solution[i].fmin;
  40f2c6:	8b 82 14 06 00 00    	mov    0x614(%rdx),%eax
  40f2cc:	01 86 44 00 01 00    	add    %eax,0x10044(%rsi)
	node->focalHeuristic = focalHeuristic(node->solution);  
  40f2d2:	48 b8 00 34 de ff ff 	movabs $0xffffffffffde3400,%rax
  40f2d9:	ff ff ff 
  40f2dc:	4c 01 e8             	add    %r13,%rax
  40f2df:	ff d0                	callq  *%rax
  40f2e1:	89 83 48 00 01 00    	mov    %eax,0x10048(%rbx)
  
  unsigned int child_prio = node->focalHeuristic * 1000 + node->cost;
  40f2e7:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  40f2ed:	44 01 f0             	add    %r14d,%eax
  node->timestamp =  child_prio;
  40f2f0:	89 83 4c 00 01 00    	mov    %eax,0x1004c(%rbx)
        : [opcode]"g"(op));
  40f2f6:	48 c7 c1 12 04 00 00 	mov    $0x412,%rcx
  40f2fd:	48 87 c9             	xchg   %rcx,%rcx
  if(child_prio>= swarm::superTimestamp()){ 
  40f300:	48 39 c8             	cmp    %rcx,%rax
  40f303:	73 43                	jae    40f348 <_Z6fillermP13HighLevelNodemi+0xc8>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40f305:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f30c:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f311:	48 87 c9             	xchg   %rcx,%rcx
    register uint64_t r8  asm("r8")  = v3;
  40f314:	48 ba 20 0b df ff ff 	movabs $0xffffffffffdf0b20,%rdx
  40f31b:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f31e:	48 63 b3 50 00 01 00 	movslq 0x10050(%rbx),%rsi
            :);
  40f325:	b9 02 00 01 40       	mov    $0x40010002,%ecx
    register uint64_t r8  asm("r8")  = v3;
  40f32a:	4d 8d 44 15 00       	lea    0x0(%r13,%rdx,1),%r8
            :);
  40f32f:	48 89 c7             	mov    %rax,%rdi
  40f332:	48 89 da             	mov    %rbx,%rdx
  40f335:	48 87 c9             	xchg   %rcx,%rcx
		    EnqFlags::NOHINT,    
			  node->id, node);
  }
  return;

}
  40f338:	5b                   	pop    %rbx
  40f339:	5d                   	pop    %rbp
  40f33a:	41 5c                	pop    %r12
  40f33c:	41 5d                	pop    %r13
  40f33e:	41 5e                	pop    %r14
  40f340:	c3                   	retq   
  40f341:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    register uint64_t r9  asm("r9")  = v4;
  40f348:	48 ba d0 b5 de ff ff 	movabs $0xffffffffffdeb5d0,%rdx
  40f34f:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f352:	4c 63 c5             	movslq %ebp,%r8
    register uint64_t r10 asm("r10") = v5;
  40f355:	45 31 d2             	xor    %r10d,%r10d
    register uint64_t r9  asm("r9")  = v4;
  40f358:	4e 8d 0c 2a          	lea    (%rdx,%r13,1),%r9
            :);
  40f35c:	b9 03 00 20 40       	mov    $0x40200003,%ecx
  40f361:	48 89 c7             	mov    %rax,%rdi
  40f364:	48 89 de             	mov    %rbx,%rsi
  40f367:	4c 89 e2             	mov    %r12,%rdx
  40f36a:	48 87 c9             	xchg   %rcx,%rcx
  40f36d:	5b                   	pop    %rbx
  40f36e:	5d                   	pop    %rbp
  40f36f:	41 5c                	pop    %r12
  40f371:	41 5d                	pop    %r13
  40f373:	41 5e                	pop    %r14
  40f375:	c3                   	retq   
  40f376:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f37d:	00 00 00 

000000000040f380 <_Z9enq_uppermP13HighLevelNodemi>:


void enq_upper(swarm::Timestamp ts, HighLevelNode* node,  size_t i ,  int hlsnum) {
  40f380:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40f380 <_Z9enq_uppermP13HighLevelNodemi>
  40f387:	49 bb 80 bc 21 00 00 	movabs $0x21bc80,%r11
  40f38e:	00 00 00 
  40f391:	49 89 fa             	mov    %rdi,%r10
  40f394:	4c 63 c1             	movslq %ecx,%r8
  40f397:	4c 01 d8             	add    %r11,%rax
  40f39a:	49 89 f3             	mov    %rsi,%r11
        : [opcode]"g"(op));
  40f39d:	48 c7 c1 12 04 00 00 	mov    $0x412,%rcx
  40f3a4:	48 87 c9             	xchg   %rcx,%rcx

			node->timestamp =  child_prio;
      */
      //swarm::info("fractal doain ts = %i,perentts: %i,  nodets: %i, hlsnum: %i , superts: %x", ts,node->parentTimestamp, child_prio , hlsnum,swarm::superTimestamp() );
      
      if(ts>= swarm::superTimestamp()){ 
  40f3a7:	48 39 cf             	cmp    %rcx,%rdi
  40f3aa:	72 14                	jb     40f3c0 <_Z9enq_uppermP13HighLevelNodemi+0x40>
    register uint64_t r9  asm("r9")  = v4;
  40f3ac:	45 31 c9             	xor    %r9d,%r9d
            :);
  40f3af:	b9 03 00 24 40       	mov    $0x40240003,%ecx
  40f3b4:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40f3b7:	c3                   	retq   
  40f3b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40f3bf:	00 
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40f3c0:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f3c7:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f3cc:	48 87 c9             	xchg   %rcx,%rcx
    register uint64_t r8  asm("r8")  = v3;
  40f3cf:	48 ba 20 0b df ff ff 	movabs $0xffffffffffdf0b20,%rdx
  40f3d6:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f3d9:	48 63 b6 50 00 01 00 	movslq 0x10050(%rsi),%rsi
            :);
  40f3e0:	b9 02 00 01 40       	mov    $0x40010002,%ecx
    register uint64_t r8  asm("r8")  = v3;
  40f3e5:	4c 8d 04 10          	lea    (%rax,%rdx,1),%r8
            :);
  40f3e9:	4c 89 d7             	mov    %r10,%rdi
  40f3ec:	4c 89 da             	mov    %r11,%rdx
  40f3ef:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40f3f2:	c3                   	retq   
  40f3f3:	0f 1f 00             	nopl   (%rax)
  40f3f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f3fd:	00 00 00 

000000000040f400 <_Z10lls_searchmfPK5StateP13HighLevelNodemi>:
#ifdef HLS_NO_POINTER
  void lls_search(swarm::Timestamp score, float m_w, const State* startState, 
			PlanResult* solution, HighLevelNode *hls_node, size_t c_idx) {
#else
  void lls_search(swarm::Timestamp score, float m_w, const State* startState, 
		  HighLevelNode *hls_node, size_t c_idx, int newnodeid){	//int newnodeid, size_t c_idx) {
  40f400:	41 57                	push   %r15
		////HighLevelNode *hls_node = global_nodelist[newnodeid];
		//HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
		PlanResult *solution = &hls_node->solution[c_idx];
#endif
    //swarm::info("ll deepen next : %i", score);
    LowLevelEnvironment m_env(g_env, c_idx, hls_node->constraints[c_idx], hls_node->solution);
  40f402:	48 8d 04 49          	lea    (%rcx,%rcx,2),%rax
  40f406:	4c 8d 3d f3 ff ff ff 	lea    -0xd(%rip),%r15        # 40f400 <_Z10lls_searchmfPK5StateP13HighLevelNodemi>
		  HighLevelNode *hls_node, size_t c_idx, int newnodeid){	//int newnodeid, size_t c_idx) {
  40f40d:	41 56                	push   %r14
  40f40f:	49 bb 00 bc 21 00 00 	movabs $0x21bc00,%r11
  40f416:	00 00 00 
  40f419:	41 55                	push   %r13
  40f41b:	41 54                	push   %r12
  40f41d:	55                   	push   %rbp
  40f41e:	48 8d 2c cd 00 00 00 	lea    0x0(,%rcx,8),%rbp
  40f425:	00 
  40f426:	53                   	push   %rbx
  40f427:	4d 01 df             	add    %r11,%r15
    LowLevelEnvironment m_env(g_env, c_idx, hls_node->constraints[c_idx], hls_node->solution);
  40f42a:	48 8d 04 81          	lea    (%rcx,%rax,4),%rax
  40f42e:	49 ba c0 d1 9b 3b 00 	movabs $0x3b9bd1c0,%r10
  40f435:	00 00 00 
  40f438:	49 89 ed             	mov    %rbp,%r13
		  HighLevelNode *hls_node, size_t c_idx, int newnodeid){	//int newnodeid, size_t c_idx) {
  40f43b:	49 89 cc             	mov    %rcx,%r12
  40f43e:	48 83 ec 38          	sub    $0x38,%rsp
  40f442:	4f 03 2c 3a          	add    (%r10,%r15,1),%r13
    LowLevelEnvironment m_env(g_env, c_idx, hls_node->constraints[c_idx], hls_node->solution);
  40f446:	48 c1 e0 07          	shl    $0x7,%rax
  40f44a:	4c 8d 8c 02 40 7e 00 	lea    0x7e40(%rdx,%rax,1),%r9
  40f451:	00 
	void setLowLevelContext(size_t agentIdx, const Constraints* constraints) {
		//assert(constraints); // [TEST-removed]
		m_agentIdx = agentIdx;
		m_constraints = constraints;
		m_lastGoalConstraint = -1;
		for (const auto& vc : constraints->vertexConstraints) {
  40f452:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  40f457:	4d 8d 99 58 02 00 00 	lea    0x258(%r9),%r11
  40f45e:	4c 89 c8             	mov    %r9,%rax
  40f461:	41 8b 7d 00          	mov    0x0(%r13),%edi
  40f465:	eb 12                	jmp    40f479 <_Z10lls_searchmfPK5StateP13HighLevelNodemi+0x79>
  40f467:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40f46e:	00 00 
  40f470:	48 83 c0 0c          	add    $0xc,%rax
  40f474:	49 39 c3             	cmp    %rax,%r11
  40f477:	74 1e                	je     40f497 <_Z10lls_searchmfPK5StateP13HighLevelNodemi+0x97>
			if (vc.x == m_env.m_goals[m_agentIdx].x && vc.y == m_env.m_goals[m_agentIdx].y) {
  40f479:	3b 78 04             	cmp    0x4(%rax),%edi
  40f47c:	75 f2                	jne    40f470 <_Z10lls_searchmfPK5StateP13HighLevelNodemi+0x70>
  40f47e:	41 8b 4d 04          	mov    0x4(%r13),%ecx
  40f482:	39 48 08             	cmp    %ecx,0x8(%rax)
  40f485:	75 e9                	jne    40f470 <_Z10lls_searchmfPK5StateP13HighLevelNodemi+0x70>
  40f487:	8b 08                	mov    (%rax),%ecx
  40f489:	39 cb                	cmp    %ecx,%ebx
  40f48b:	0f 4c d9             	cmovl  %ecx,%ebx
  40f48e:	48 83 c0 0c          	add    $0xc,%rax
		for (const auto& vc : constraints->vertexConstraints) {
  40f492:	49 39 c3             	cmp    %rax,%r11
  40f495:	75 e2                	jne    40f479 <_Z10lls_searchmfPK5StateP13HighLevelNodemi+0x79>
    //came_from *** nextptr= new came_from [32][32][50];
    came_from * arryPtr = new came_from[60000]; //32x32x50
  40f497:	48 b8 00 e4 dd ff ff 	movabs $0xffffffffffdde400,%rax
  40f49e:	ff ff ff 
  40f4a1:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
  40f4a6:	48 89 34 24          	mov    %rsi,(%rsp)
  40f4aa:	44 89 44 24 2c       	mov    %r8d,0x2c(%rsp)
  40f4af:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  40f4b4:	bf 00 98 3a 00       	mov    $0x3a9800,%edi
  40f4b9:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
  40f4be:	4c 01 f8             	add    %r15,%rax
  40f4c1:	ff d0                	callq  *%rax
  40f4c3:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
  40f4c8:	48 8b 34 24          	mov    (%rsp),%rsi
  40f4cc:	48 89 e9             	mov    %rbp,%rcx
  40f4cf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  40f4d4:	4b 03 0c 3a          	add    (%r10,%r15,1),%rcx
  40f4d8:	44 8b 76 04          	mov    0x4(%rsi),%r14d
  40f4dc:	44 8b 6e 08          	mov    0x8(%rsi),%r13d
		stat(0) {}
  40f4e0:	8b 36                	mov    (%rsi),%esi
		}
	}

	Cost admissibleHeuristic(const State& s) {
		//return m_env.admissibleHeuristic(s);
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  40f4e2:	44 89 f0             	mov    %r14d,%eax
  40f4e5:	2b 01                	sub    (%rcx),%eax
  40f4e7:	89 34 24             	mov    %esi,(%rsp)
  40f4ea:	89 c7                	mov    %eax,%edi
  40f4ec:	c1 ff 1f             	sar    $0x1f,%edi
  40f4ef:	31 f8                	xor    %edi,%eax
  40f4f1:	89 c5                	mov    %eax,%ebp
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f4f3:	44 89 e8             	mov    %r13d,%eax
  40f4f6:	2b 41 04             	sub    0x4(%rcx),%eax
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  40f4f9:	29 fd                	sub    %edi,%ebp
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f4fb:	89 c1                	mov    %eax,%ecx
  40f4fd:	c1 f9 1f             	sar    $0x1f,%ecx
  40f500:	31 c8                	xor    %ecx,%eax
  40f502:	29 c8                	sub    %ecx,%eax
  40f504:	01 c5                	add    %eax,%ebp
  40f506:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f50d:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f512:	48 87 c9             	xchg   %rcx,%rcx
            }
#ifdef __clang__
#pragma GCC diagnostic pop
#endif
        } else {
            auto tup = new std::tuple<Args...>(args...);
  40f515:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  40f51c:	ff ff ff 
  40f51f:	bf 98 00 00 00       	mov    $0x98,%edi
  40f524:	4c 01 f8             	add    %r15,%rax
  40f527:	ff d0                	callq  *%rax
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  40f529:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
  40f52e:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
            :);
  40f533:	31 ff                	xor    %edi,%edi
  40f535:	8b 34 24             	mov    (%rsp),%esi
  40f538:	4c 8b 5c 24 10       	mov    0x10(%rsp),%r11
  40f53d:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  40f542:	44 8b 44 24 2c       	mov    0x2c(%rsp),%r8d
  40f547:	4b 8d 0c 3a          	lea    (%r10,%r15,1),%rcx
  40f54b:	48 89 50 28          	mov    %rdx,0x28(%rax)
  40f54f:	48 89 50 70          	mov    %rdx,0x70(%rax)
  40f553:	48 ba d0 e3 de ff ff 	movabs $0xffffffffffdee3d0,%rdx
  40f55a:	ff ff ff 
  40f55d:	89 70 30             	mov    %esi,0x30(%rax)
  40f560:	89 70 4c             	mov    %esi,0x4c(%rax)
  40f563:	48 89 48 08          	mov    %rcx,0x8(%rax)
  40f567:	89 70 78             	mov    %esi,0x78(%rax)
  40f56a:	4c 01 fa             	add    %r15,%rdx
  40f56d:	4c 89 18             	mov    %r11,(%rax)
  40f570:	4c 89 60 10          	mov    %r12,0x10(%rax)
  40f574:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40f579:	4c 89 48 18          	mov    %r9,0x18(%rax)
  40f57d:	89 58 20             	mov    %ebx,0x20(%rax)
  40f580:	48 89 c6             	mov    %rax,%rsi
  40f583:	44 89 70 34          	mov    %r14d,0x34(%rax)
  40f587:	44 89 68 38          	mov    %r13d,0x38(%rax)
  40f58b:	89 68 3c             	mov    %ebp,0x3c(%rax)
  40f58e:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)
  40f595:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%rax)
  40f59c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%rax)
  40f5a3:	44 89 70 50          	mov    %r14d,0x50(%rax)
  40f5a7:	44 89 68 54          	mov    %r13d,0x54(%rax)
  40f5ab:	c7 40 58 04 00 00 00 	movl   $0x4,0x58(%rax)
  40f5b2:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  40f5b9:	c7 40 60 00 00 00 00 	movl   $0x0,0x60(%rax)
  40f5c0:	44 89 40 64          	mov    %r8d,0x64(%rax)
  40f5c4:	4c 89 60 68          	mov    %r12,0x68(%rax)
  40f5c8:	44 89 70 7c          	mov    %r14d,0x7c(%rax)
  40f5cc:	44 89 a8 80 00 00 00 	mov    %r13d,0x80(%rax)
  40f5d3:	89 a8 84 00 00 00    	mov    %ebp,0x84(%rax)
  40f5d9:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%rax)
  40f5e0:	00 00 00 
  40f5e3:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  40f5ea:	00 00 00 
  40f5ed:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%rax)
  40f5f4:	00 00 00 
  40f5f7:	48 87 c9             	xchg   %rcx,%rcx
		swarm::deepen(); 
    
		swarm::enqueue(LL_pll,0,EnqFlags::NOHINT, tmp,prev ,m_env, arryPtr);//&cameFrom
			// most good
			//node->timestamp = ROBOT_NUMS * node->generation + node->focalHeuristic;
	}
  40f5fa:	48 83 c4 38          	add    $0x38,%rsp
  40f5fe:	5b                   	pop    %rbx
  40f5ff:	5d                   	pop    %rbp
  40f600:	41 5c                	pop    %r12
  40f602:	41 5d                	pop    %r13
  40f604:	41 5e                	pop    %r14
  40f606:	41 5f                	pop    %r15
  40f608:	c3                   	retq   
  40f609:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000040f610 <_Z6star_tmiP13HighLevelNode>:
void star_t(swarm::Timestamp tt, int si,HighLevelNode *newNode){
  40f610:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40f610 <_Z6star_tmiP13HighLevelNode>
  40f617:	49 bb f0 b9 21 00 00 	movabs $0x21b9f0,%r11
  40f61e:	00 00 00 
  40f621:	4c 01 d8             	add    %r11,%rax
  40f624:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f62b:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f630:	48 87 c9             	xchg   %rcx,%rcx
    register uint64_t r8  asm("r8")  = v3;
  40f633:	48 b9 20 0b df ff ff 	movabs $0xffffffffffdf0b20,%rcx
  40f63a:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f63d:	48 63 f6             	movslq %esi,%rsi
            :);
  40f640:	31 ff                	xor    %edi,%edi
    register uint64_t r8  asm("r8")  = v3;
  40f642:	4c 8d 04 08          	lea    (%rax,%rcx,1),%r8
            :);
  40f646:	b9 02 00 01 40       	mov    $0x40010002,%ecx
  40f64b:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40f64e:	c3                   	retq   
  40f64f:	90                   	nop

000000000040f650 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from>:
void LL_pll(swarm::Timestamp ts,AstarNode current,const LLNodee  prev, LowLevelEnvironment  m_env,came_from *cameFrom  ) {//came_from (*cameFrom)[32][32][50]  came_from *cameFrom, HighLevelNode *hls_node
  40f650:	41 57                	push   %r15
  40f652:	41 56                	push   %r14
  40f654:	48 8d 05 f5 ff ff ff 	lea    -0xb(%rip),%rax        # 40f650 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from>
  40f65b:	41 55                	push   %r13
  40f65d:	41 54                	push   %r12
  40f65f:	49 bb b0 b9 21 00 00 	movabs $0x21b9b0,%r11
  40f666:	00 00 00 
  40f669:	55                   	push   %rbp
  40f66a:	53                   	push   %rbx
  40f66b:	4c 01 d8             	add    %r11,%rax
      if(done[newnodeid] == true) {
  40f66e:	49 b8 80 04 00 00 00 	movabs $0x480,%r8
  40f675:	00 00 00 
void LL_pll(swarm::Timestamp ts,AstarNode current,const LLNodee  prev, LowLevelEnvironment  m_env,came_from *cameFrom  ) {//came_from (*cameFrom)[32][32][50]  came_from *cameFrom, HighLevelNode *hls_node
  40f678:	48 81 ec 88 04 00 00 	sub    $0x488,%rsp
      if(done[newnodeid] == true) {
  40f67f:	49 01 c0             	add    %rax,%r8
      int newnodeid = prev.newnodeid;
  40f682:	4c 63 8c 24 14 05 00 	movslq 0x514(%rsp),%r9
  40f689:	00 
  40f68a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
      if(done[newnodeid] == true) {
  40f68f:	43 80 3c 08 00       	cmpb   $0x0,(%r8,%r9,1)
      int newnodeid = prev.newnodeid;
  40f694:	44 89 4c 24 50       	mov    %r9d,0x50(%rsp)
      if(done[newnodeid] == true) {
  40f699:	0f 85 90 00 00 00    	jne    40f72f <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0xdf>
  40f69f:	48 8b 84 24 20 05 00 	mov    0x520(%rsp),%rax
  40f6a6:	00 
  40f6a7:	48 8b 9c 24 30 05 00 	mov    0x530(%rsp),%rbx
  40f6ae:	00 
  40f6af:	48 89 34 24          	mov    %rsi,(%rsp)
    return numConflicts;
  }

  bool isSolution(const State& s, const size_t m_agentIdx, 
			const int m_lastGoalConstraint) const {
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  40f6b3:	8b b4 24 c4 04 00 00 	mov    0x4c4(%rsp),%esi
  40f6ba:	8b bc 24 10 05 00 00 	mov    0x510(%rsp),%edi
  40f6c1:	8b 94 24 c8 04 00 00 	mov    0x4c8(%rsp),%edx
  40f6c8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  40f6cd:	48 8b 84 24 28 05 00 	mov    0x528(%rsp),%rax
  40f6d4:	00 
  40f6d5:	48 89 c1             	mov    %rax,%rcx
  40f6d8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40f6dd:	8b 84 24 40 05 00 00 	mov    0x540(%rsp),%eax
  40f6e4:	89 44 24 54          	mov    %eax,0x54(%rsp)
      size_t c_idx= prev.c_idx;
  40f6e8:	48 8b 84 24 18 05 00 	mov    0x518(%rsp),%rax
  40f6ef:	00 
  40f6f0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      { return *(this->_M_impl._M_start + __n); }
  40f6f5:	48 8d 04 dd 00 00 00 	lea    0x0(,%rbx,8),%rax
  40f6fc:	00 
  40f6fd:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40f702:	48 03 01             	add    (%rcx),%rax
           s.time > m_lastGoalConstraint;
  40f705:	8b 8c 24 c0 04 00 00 	mov    0x4c0(%rsp),%ecx
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  40f70c:	3b 30                	cmp    (%rax),%esi
  40f70e:	0f 84 10 02 00 00    	je     40f924 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x2d4>
    if (cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].set==false){ 
  40f714:	c1 e2 05             	shl    $0x5,%edx
  40f717:	c1 e1 0a             	shl    $0xa,%ecx
  40f71a:	8d 04 32             	lea    (%rdx,%rsi,1),%eax
  40f71d:	01 c8                	add    %ecx,%eax
  40f71f:	48 98                	cltq   
  40f721:	48 c1 e0 06          	shl    $0x6,%rax
  40f725:	48 03 04 24          	add    (%rsp),%rax
  40f729:	80 78 24 00          	cmpb   $0x0,0x24(%rax)
  40f72d:	74 12                	je     40f741 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0xf1>
}
  40f72f:	48 81 c4 88 04 00 00 	add    $0x488,%rsp
  40f736:	5b                   	pop    %rbx
  40f737:	5d                   	pop    %rbp
  40f738:	41 5c                	pop    %r12
  40f73a:	41 5d                	pop    %r13
  40f73c:	41 5e                	pop    %r14
  40f73e:	41 5f                	pop    %r15
  40f740:	c3                   	retq   
      cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].curr_state=current.state;
  40f741:	48 8b 94 24 c0 04 00 	mov    0x4c0(%rsp),%rdx
  40f748:	00 
  40f749:	48 8b b4 24 38 05 00 	mov    0x538(%rsp),%rsi
  40f750:	00 
      neighbors.reserve(10);
  40f751:	48 8d ac 24 80 00 00 	lea    0x80(%rsp),%rbp
  40f758:	00 
  40f759:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
      cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].gscore=prev.gscore;
  40f75e:	89 78 20             	mov    %edi,0x20(%rax)
      cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].set=true;    
  40f761:	c6 40 24 01          	movb   $0x1,0x24(%rax)
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  40f765:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  40f76c:	00 00 00 00 00 
      neighbors.reserve(10);
  40f771:	48 89 ef             	mov    %rbp,%rdi
      cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].curr_state=current.state;
  40f774:	48 89 10             	mov    %rdx,(%rax)
  40f777:	8b 94 24 c8 04 00 00 	mov    0x4c8(%rsp),%edx
  40f77e:	49 89 f7             	mov    %rsi,%r15
  40f781:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  40f786:	48 8b b4 24 48 05 00 	mov    0x548(%rsp),%rsi
  40f78d:	00 
  40f78e:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  40f795:	00 00 00 00 00 
  40f79a:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
  40f7a1:	00 00 00 00 00 
  40f7a6:	89 50 08             	mov    %edx,0x8(%rax)
      cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].neighbor=prev.neighbor;
  40f7a9:	48 8b 94 24 fc 04 00 	mov    0x4fc(%rsp),%rdx
  40f7b0:	00 
  40f7b1:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
      neighbors.reserve(10);
  40f7b6:	be 0a 00 00 00       	mov    $0xa,%esi
      cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].neighbor=prev.neighbor;
  40f7bb:	48 89 50 0c          	mov    %rdx,0xc(%rax)
  40f7bf:	48 8b 94 24 04 05 00 	mov    0x504(%rsp),%rdx
  40f7c6:	00 
  40f7c7:	48 89 50 14          	mov    %rdx,0x14(%rax)
  40f7cb:	8b 94 24 0c 05 00 00 	mov    0x50c(%rsp),%edx
  40f7d2:	89 50 1c             	mov    %edx,0x1c(%rax)
      neighbors.reserve(10);
  40f7d5:	48 b8 40 be de ff ff 	movabs $0xffffffffffdebe40,%rax
  40f7dc:	ff ff ff 
  40f7df:	4c 01 f0             	add    %r14,%rax
  40f7e2:	ff d0                	callq  *%rax

	bool isSolution(const State& s) { return m_env.isSolution(s, m_agentIdx, m_lastGoalConstraint); }

	void getNeighbors(const State& s,
			std::vector<Neighbor<State, Action, Cost> >& neighbors) {
		m_env.getNeighbors(s, neighbors, m_constraints);
  40f7e4:	48 b8 80 e0 de ff ff 	movabs $0xffffffffffdee080,%rax
  40f7eb:	ff ff ff 
  40f7ee:	4c 89 f9             	mov    %r15,%rcx
  40f7f1:	48 89 ea             	mov    %rbp,%rdx
  40f7f4:	48 8d b4 24 c0 04 00 	lea    0x4c0(%rsp),%rsi
  40f7fb:	00 
  40f7fc:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  40f801:	4c 01 f0             	add    %r14,%rax
  40f804:	ff d0                	callq  *%rax
  40f806:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  40f80d:	00 
  40f80e:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  40f815:	00 
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  40f816:	48 39 f8             	cmp    %rdi,%rax
  40f819:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  40f81e:	0f 84 66 07 00 00    	je     40ff8a <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x93a>
  40f824:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  40f82b:	ff ff ff 
  40f82e:	49 89 fd             	mov    %rdi,%r13
            auto tup = new std::tuple<Args...>(args...);
  40f831:	4c 01 f0             	add    %r14,%rax
  40f834:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
            :);
  40f839:	48 b8 d0 e3 de ff ff 	movabs $0xffffffffffdee3d0,%rax
  40f840:	ff ff ff 
  40f843:	4c 01 f0             	add    %r14,%rax
  40f846:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40f84b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
          Cost tentative_gScore = current.gScore + neighbor.cost;
  40f850:	41 8b 45 10          	mov    0x10(%r13),%eax
      { return *(this->_M_impl._M_start + __n); }
  40f854:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
	int numConflicts = 0;
  40f859:	45 31 c9             	xor    %r9d,%r9d
  40f85c:	41 8b 6d 04          	mov    0x4(%r13),%ebp
  40f860:	45 8b 75 08          	mov    0x8(%r13),%r14d
  40f864:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
                current.focalHeuristic +
  40f869:	44 8b a4 24 d4 04 00 	mov    0x4d4(%rsp),%r12d
  40f870:	00 
          Cost tentative_gScore = current.gScore + neighbor.cost;
  40f871:	89 44 24 38          	mov    %eax,0x38(%rsp)
  40f875:	03 84 24 d0 04 00 00 	add    0x4d0(%rsp),%eax
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f87c:	44 89 f6             	mov    %r14d,%esi
  40f87f:	89 c7                	mov    %eax,%edi
  40f881:	89 44 24 3c          	mov    %eax,0x3c(%rsp)
  40f885:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  40f88a:	48 03 10             	add    (%rax),%rdx
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  40f88d:	89 e8                	mov    %ebp,%eax
  40f88f:	2b 02                	sub    (%rdx),%eax
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f891:	2b 72 04             	sub    0x4(%rdx),%esi
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  40f894:	89 c1                	mov    %eax,%ecx
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f896:	89 f2                	mov    %esi,%edx
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  40f898:	c1 f9 1f             	sar    $0x1f,%ecx
  40f89b:	31 c8                	xor    %ecx,%eax
  40f89d:	29 c8                	sub    %ecx,%eax
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f89f:	89 f1                	mov    %esi,%ecx
  40f8a1:	49 63 75 00          	movslq 0x0(%r13),%rsi
  40f8a5:	c1 f9 1f             	sar    $0x1f,%ecx
  40f8a8:	31 ca                	xor    %ecx,%edx
  40f8aa:	29 ca                	sub    %ecx,%edx
  40f8ac:	4c 89 c1             	mov    %r8,%rcx
  40f8af:	01 d0                	add    %edx,%eax
  40f8b1:	89 74 24 4c          	mov    %esi,0x4c(%rsp)
                tentative_gScore + m_env.admissibleHeuristic(neighbor.state); 
  40f8b5:	01 f8                	add    %edi,%eax
  40f8b7:	48 89 f7             	mov    %rsi,%rdi
  40f8ba:	89 44 24 10          	mov    %eax,0x10(%rsp)
  40f8be:	48 c1 e7 04          	shl    $0x4,%rdi
	for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  40f8c2:	31 c0                	xor    %eax,%eax
  40f8c4:	eb 1f                	jmp    40f8e5 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x295>
  40f8c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f8cd:	00 00 00 
  40f8d0:	48 83 c0 01          	add    $0x1,%rax
  40f8d4:	49 81 c0 50 06 00 00 	add    $0x650,%r8
  40f8db:	48 83 f8 14          	cmp    $0x14,%rax
  40f8df:	0f 84 db 04 00 00    	je     40fdc0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x770>
		if (i != m_agentIdx && solution[i].states_size > 0) {
  40f8e5:	48 39 c3             	cmp    %rax,%rbx
  40f8e8:	74 e6                	je     40f8d0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x280>
  40f8ea:	49 8b 90 00 04 00 00 	mov    0x400(%r8),%rdx
  40f8f1:	48 85 d2             	test   %rdx,%rdx
  40f8f4:	74 da                	je     40f8d0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x280>
	if (t < solution[agentIdx].states_size) {
  40f8f6:	48 39 f2             	cmp    %rsi,%rdx
  40f8f9:	0f 87 b1 04 00 00    	ja     40fdb0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x760>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40f8ff:	48 83 ea 01          	sub    $0x1,%rdx
  40f903:	48 c1 e2 04          	shl    $0x4,%rdx
  40f907:	4c 01 c2             	add    %r8,%rdx
  40f90a:	44 8b 52 04          	mov    0x4(%rdx),%r10d
  40f90e:	8b 52 08             	mov    0x8(%rdx),%edx
  bool equalExceptTime(const State& s) const { return x == s.x && y == s.y; }
  40f911:	44 39 d5             	cmp    %r10d,%ebp
  40f914:	75 ba                	jne    40f8d0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x280>
				++numConflicts;
  40f916:	41 39 d6             	cmp    %edx,%r14d
  40f919:	0f 94 c2             	sete   %dl
  40f91c:	0f b6 d2             	movzbl %dl,%edx
  40f91f:	41 01 d1             	add    %edx,%r9d
  40f922:	eb ac                	jmp    40f8d0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x280>
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  40f924:	3b 50 04             	cmp    0x4(%rax),%edx
  40f927:	0f 85 e7 fd ff ff    	jne    40f714 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0xc4>
  40f92d:	39 4c 24 54          	cmp    %ecx,0x54(%rsp)
  40f931:	0f 8d dd fd ff ff    	jge    40f714 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0xc4>
        cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].curr_state=current.state;
  40f937:	89 d0                	mov    %edx,%eax
  40f939:	41 89 ca             	mov    %ecx,%r10d
  40f93c:	48 8d ac 24 80 00 00 	lea    0x80(%rsp),%rbp
  40f943:	00 
  40f944:	c1 e0 05             	shl    $0x5,%eax
  40f947:	41 c1 e2 0a          	shl    $0xa,%r10d
  40f94b:	01 f0                	add    %esi,%eax
  40f94d:	44 01 d0             	add    %r10d,%eax
  40f950:	4c 8b 94 24 c0 04 00 	mov    0x4c0(%rsp),%r10
  40f957:	00 
  40f958:	48 98                	cltq   
  40f95a:	48 c1 e0 06          	shl    $0x6,%rax
  40f95e:	48 03 04 24          	add    (%rsp),%rax
	char pad[48];

	void clear() {
		states_size = 0;
		actions_size = 0;
		cost = 0;
  40f962:	48 69 5c 24 20 50 06 	imul   $0x650,0x20(%rsp),%rbx
  40f969:	00 00 
  40f96b:	4c 89 10             	mov    %r10,(%rax)
        cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].neighbor=prev.neighbor;
  40f96e:	4c 8b 94 24 fc 04 00 	mov    0x4fc(%rsp),%r10
  40f975:	00 
  40f976:	48 03 5c 24 18       	add    0x18(%rsp),%rbx
        while (i>0) { 
  40f97b:	85 ff                	test   %edi,%edi
        cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].curr_state=current.state;
  40f97d:	89 50 08             	mov    %edx,0x8(%rax)
        cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].gscore=prev.gscore;
  40f980:	89 78 20             	mov    %edi,0x20(%rax)
        cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].set=true;    
  40f983:	c6 40 24 01          	movb   $0x1,0x24(%rax)
        cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].neighbor=prev.neighbor;
  40f987:	4c 89 50 0c          	mov    %r10,0xc(%rax)
  40f98b:	4c 8b 94 24 04 05 00 	mov    0x504(%rsp),%r10
  40f992:	00 
  40f993:	4c 89 50 14          	mov    %r10,0x14(%rax)
  40f997:	44 8b 94 24 0c 05 00 	mov    0x50c(%rsp),%r10d
  40f99e:	00 
  40f99f:	44 89 50 1c          	mov    %r10d,0x1c(%rax)
        done[newnodeid]=true;
  40f9a3:	43 c6 04 08 01       	movb   $0x1,(%r8,%r9,1)
  40f9a8:	c7 83 10 06 00 00 00 	movl   $0x0,0x610(%rbx)
  40f9af:	00 00 00 
		fmin = 0;
  40f9b2:	c7 83 14 06 00 00 00 	movl   $0x0,0x614(%rbx)
  40f9b9:	00 00 00 
				solution->states_size = 0;
  40f9bc:	48 c7 83 00 04 00 00 	movq   $0x0,0x400(%rbx)
  40f9c3:	00 00 00 00 
				solution->actions_size = 0;
  40f9c7:	48 c7 83 08 06 00 00 	movq   $0x0,0x608(%rbx)
  40f9ce:	00 00 00 00 
        curr_state=cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].curr_state;
  40f9d2:	44 8b 00             	mov    (%rax),%r8d
  40f9d5:	44 8b 58 04          	mov    0x4(%rax),%r11d
  40f9d9:	44 8b 50 08          	mov    0x8(%rax),%r10d
        while (i>0) { 
  40f9dd:	0f 8e 00 02 00 00    	jle    40fbe3 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x593>
  40f9e3:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
  40f9e8:	41 89 fc             	mov    %edi,%r12d
  40f9eb:	48 8d ac 24 80 00 00 	lea    0x80(%rsp),%rbp
  40f9f2:	00 
  40f9f3:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
  40f9f8:	4b 8d 04 bf          	lea    (%r15,%r15,4),%rax
  40f9fc:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  40fa00:	4d 8d 34 87          	lea    (%r15,%rax,4),%r14
  40fa04:	49 69 c7 ca 00 00 00 	imul   $0xca,%r15,%rax
				   __bos (__s), __fmt, __va_arg_pack ());
  40fa0b:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
  40fa10:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  40fa15:	48 b8 c8 7a df ff ff 	movabs $0xffffffffffdf7ac8,%rax
  40fa1c:	ff ff ff 
  40fa1f:	4c 01 f8             	add    %r15,%rax
  40fa22:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40fa27:	48 b8 00 7b df ff ff 	movabs $0xffffffffffdf7b00,%rax
  40fa2e:	ff ff ff 
  40fa31:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  40fa36:	e9 9a 00 00 00       	jmpq   40fad5 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x485>
  40fa3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
          cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].gscore));
  40fa40:	89 d0                	mov    %edx,%eax
  40fa42:	41 89 cf             	mov    %ecx,%r15d
  40fa45:	c1 e0 05             	shl    $0x5,%eax
  40fa48:	41 c1 e7 0a          	shl    $0xa,%r15d
  40fa4c:	01 f0                	add    %esi,%eax
  40fa4e:	44 01 f8             	add    %r15d,%eax
	}

	void add(StateCost s) {
		if (states_size < STATE_SIZE) {
			states[states_size] = s;
  40fa51:	4f 8d 3c 31          	lea    (%r9,%r14,1),%r15
			states_size++;
  40fa55:	49 83 c1 01          	add    $0x1,%r9
  40fa59:	48 98                	cltq   
			states[states_size] = s;
  40fa5b:	49 c1 e7 04          	shl    $0x4,%r15
  40fa5f:	48 c1 e0 06          	shl    $0x6,%rax
  40fa63:	48 03 04 24          	add    (%rsp),%rax
  40fa67:	4d 01 ef             	add    %r13,%r15
  40fa6a:	45 89 07             	mov    %r8d,(%r15)
  40fa6d:	45 89 5f 04          	mov    %r11d,0x4(%r15)
  40fa71:	45 89 57 08          	mov    %r10d,0x8(%r15)
  40fa75:	41 89 7f 0c          	mov    %edi,0xc(%r15)
			states_size++;
  40fa79:	4c 89 8b 00 04 00 00 	mov    %r9,0x400(%rbx)
			swarm::info("[ERROR] PlanResult add StateCost : states_size: %d", states_size);
			}
	}

	void add(ActionCost a) {
		if (actions_size < ACTION_SIZE) {
  40fa80:	4c 8b 8b 08 06 00 00 	mov    0x608(%rbx),%r9
  40fa87:	49 83 f9 3f          	cmp    $0x3f,%r9
  40fa8b:	0f 87 cf 00 00 00    	ja     40fb60 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x510>
			actions[actions_size] = a;
  40fa91:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
          solution->add(ActionCost(cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].neighbor.action,
  40fa96:	44 8b 40 1c          	mov    0x1c(%rax),%r8d
  40fa9a:	44 8b 50 18          	mov    0x18(%rax),%r10d
  40fa9e:	49 8d bc 39 81 00 00 	lea    0x81(%r9,%rdi,1),%rdi
  40faa5:	00 
			actions_size++;
  40faa6:	49 83 c1 01          	add    $0x1,%r9
        while (i>0) { 
  40faaa:	41 83 ec 01          	sub    $0x1,%r12d
			actions[actions_size] = a;
  40faae:	49 8d 7c fd 00       	lea    0x0(%r13,%rdi,8),%rdi
  40fab3:	44 89 17             	mov    %r10d,(%rdi)
  40fab6:	44 89 47 04          	mov    %r8d,0x4(%rdi)
			actions_size++;
  40faba:	4c 89 8b 08 06 00 00 	mov    %r9,0x608(%rbx)
  40fac1:	0f 84 10 01 00 00    	je     40fbd7 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x587>
  40fac7:	8b 78 20             	mov    0x20(%rax),%edi
  40faca:	44 8b 00             	mov    (%rax),%r8d
  40facd:	44 8b 50 08          	mov    0x8(%rax),%r10d
  40fad1:	44 8b 58 04          	mov    0x4(%rax),%r11d
		if (states_size < STATE_SIZE) {
  40fad5:	4c 8b 8b 00 04 00 00 	mov    0x400(%rbx),%r9
  40fadc:	49 83 f9 3f          	cmp    $0x3f,%r9
  40fae0:	0f 86 5a ff ff ff    	jbe    40fa40 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x3f0>
  40fae6:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
  40faeb:	49 ba 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%r10
  40faf2:	ff ff ff 
  40faf5:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
  40fafa:	b9 00 04 00 00       	mov    $0x400,%ecx
  40faff:	ba 01 00 00 00       	mov    $0x1,%edx
  40fb04:	be ff 03 00 00       	mov    $0x3ff,%esi
  40fb09:	48 89 ef             	mov    %rbp,%rdi
  40fb0c:	31 c0                	xor    %eax,%eax
  40fb0e:	4d 89 df             	mov    %r11,%r15
  40fb11:	4d 01 da             	add    %r11,%r10
  40fb14:	41 ff d2             	callq  *%r10
  40fb17:	b9 05 04 00 00       	mov    $0x405,%ecx
  40fb1c:	48 89 ef             	mov    %rbp,%rdi
  40fb1f:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40fb22:	8b 94 24 c8 04 00 00 	mov    0x4c8(%rsp),%edx
  40fb29:	8b 8c 24 c0 04 00 00 	mov    0x4c0(%rsp),%ecx
  40fb30:	8b b4 24 c4 04 00 00 	mov    0x4c4(%rsp),%esi
		if (actions_size < ACTION_SIZE) {
  40fb37:	4c 8b 8b 08 06 00 00 	mov    0x608(%rbx),%r9
  40fb3e:	89 d0                	mov    %edx,%eax
  40fb40:	89 cf                	mov    %ecx,%edi
  40fb42:	c1 e0 05             	shl    $0x5,%eax
  40fb45:	c1 e7 0a             	shl    $0xa,%edi
  40fb48:	01 f0                	add    %esi,%eax
  40fb4a:	01 f8                	add    %edi,%eax
  40fb4c:	48 98                	cltq   
  40fb4e:	48 c1 e0 06          	shl    $0x6,%rax
  40fb52:	48 03 04 24          	add    (%rsp),%rax
  40fb56:	49 83 f9 3f          	cmp    $0x3f,%r9
  40fb5a:	0f 86 31 ff ff ff    	jbe    40fa91 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x441>
  40fb60:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
  40fb65:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40fb6a:	49 ba 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%r10
  40fb71:	ff ff ff 
  40fb74:	b9 00 04 00 00       	mov    $0x400,%ecx
  40fb79:	ba 01 00 00 00       	mov    $0x1,%edx
  40fb7e:	be ff 03 00 00       	mov    $0x3ff,%esi
  40fb83:	31 c0                	xor    %eax,%eax
  40fb85:	4d 8d 04 3b          	lea    (%r11,%rdi,1),%r8
  40fb89:	4d 89 df             	mov    %r11,%r15
  40fb8c:	48 89 ef             	mov    %rbp,%rdi
  40fb8f:	4d 01 da             	add    %r11,%r10
  40fb92:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40fb95:	b9 05 04 00 00       	mov    $0x405,%ecx
  40fb9a:	48 89 ef             	mov    %rbp,%rdi
  40fb9d:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40fba0:	8b 94 24 c8 04 00 00 	mov    0x4c8(%rsp),%edx
  40fba7:	8b 8c 24 c0 04 00 00 	mov    0x4c0(%rsp),%ecx
  40fbae:	8b b4 24 c4 04 00 00 	mov    0x4c4(%rsp),%esi
  40fbb5:	89 d0                	mov    %edx,%eax
  40fbb7:	89 cf                	mov    %ecx,%edi
  40fbb9:	c1 e0 05             	shl    $0x5,%eax
  40fbbc:	c1 e7 0a             	shl    $0xa,%edi
  40fbbf:	01 f0                	add    %esi,%eax
  40fbc1:	01 f8                	add    %edi,%eax
  40fbc3:	48 98                	cltq   
  40fbc5:	48 c1 e0 06          	shl    $0x6,%rax
  40fbc9:	48 03 04 24          	add    (%rsp),%rax
  40fbcd:	41 83 ec 01          	sub    $0x1,%r12d
  40fbd1:	0f 85 f0 fe ff ff    	jne    40fac7 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x477>
          curr_state=  cameFrom[current.state.x + 32*current.state.y + 1024*current.state.time].neighbor.state;
  40fbd7:	44 8b 40 0c          	mov    0xc(%rax),%r8d
  40fbdb:	44 8b 58 10          	mov    0x10(%rax),%r11d
  40fbdf:	44 8b 50 14          	mov    0x14(%rax),%r10d
		if (states_size < STATE_SIZE) {
  40fbe3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  40fbe8:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  40fbed:	48 69 d8 50 06 00 00 	imul   $0x650,%rax,%rbx
  40fbf4:	48 01 f3             	add    %rsi,%rbx
  40fbf7:	4c 8b 8b 00 04 00 00 	mov    0x400(%rbx),%r9
  40fbfe:	49 83 f9 3f          	cmp    $0x3f,%r9
  40fc02:	0f 87 a7 03 00 00    	ja     40ffaf <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x95f>
			states[states_size] = s;
  40fc08:	48 89 c7             	mov    %rax,%rdi
  40fc0b:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
			states_size++;
  40fc0f:	49 8d 51 01          	lea    0x1(%r9),%rdx
			states[states_size] = s;
  40fc13:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  40fc17:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
  40fc1b:	4c 01 c8             	add    %r9,%rax
  40fc1e:	48 c1 e0 04          	shl    $0x4,%rax
  40fc22:	48 01 f0             	add    %rsi,%rax
  40fc25:	44 89 00             	mov    %r8d,(%rax)
  40fc28:	44 89 58 04          	mov    %r11d,0x4(%rax)
  40fc2c:	44 89 50 08          	mov    %r10d,0x8(%rax)
  40fc30:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
			states_size++;
  40fc37:	48 89 93 00 04 00 00 	mov    %rdx,0x400(%rbx)
  40fc3e:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
  40fc43:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  40fc48:	48 89 e9             	mov    %rbp,%rcx
  40fc4b:	48 8d 04 9b          	lea    (%rbx,%rbx,4),%rax
  40fc4f:	4c 69 c3 50 06 00 00 	imul   $0x650,%rbx,%r8
  40fc56:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  40fc5a:	48 8d 04 83          	lea    (%rbx,%rax,4),%rax
  40fc5e:	48 01 d0             	add    %rdx,%rax
  40fc61:	48 c1 e0 04          	shl    $0x4,%rax
  40fc65:	48 8d 44 07 f0       	lea    -0x10(%rdi,%rax,1),%rax
  40fc6a:	4a 8d 7c 07 f0       	lea    -0x10(%rdi,%r8,1),%rdi
  40fc6f:	90                   	nop

	void reverse_states() {
		StateCost tmp_s[STATE_SIZE];
		size_t j = states_size - 1;
		for(int i = 0; i < states_size; ++i) {
			tmp_s[i] = states[j];
  40fc70:	48 8b 30             	mov    (%rax),%rsi
  40fc73:	48 83 e8 10          	sub    $0x10,%rax
  40fc77:	48 83 c1 10          	add    $0x10,%rcx
  40fc7b:	48 89 71 f0          	mov    %rsi,-0x10(%rcx)
  40fc7f:	48 8b 70 18          	mov    0x18(%rax),%rsi
  40fc83:	48 89 71 f8          	mov    %rsi,-0x8(%rcx)
		for(int i = 0; i < states_size; ++i) {
  40fc87:	48 39 c7             	cmp    %rax,%rdi
  40fc8a:	75 e4                	jne    40fc70 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x620>
			j--;
		}
		for(int i = 0; i < states_size; ++i)
			states[i] = tmp_s[i];
  40fc8c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40fc91:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40fc96:	48 c1 e2 04          	shl    $0x4,%rdx
  40fc9a:	48 89 ee             	mov    %rbp,%rsi
  40fc9d:	4a 8d 3c 00          	lea    (%rax,%r8,1),%rdi
  40fca1:	48 b8 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rax
  40fca8:	ff ff ff 
  40fcab:	49 89 df             	mov    %rbx,%r15
  40fcae:	48 01 d8             	add    %rbx,%rax
  40fcb1:	ff d0                	callq  *%rax
	}

	void reverse_actions() {
		ActionCost tmp_a[STATE_SIZE];
		size_t j = actions_size - 1;
  40fcb3:	48 69 44 24 20 50 06 	imul   $0x650,0x20(%rsp),%rax
  40fcba:	00 00 
  40fcbc:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  40fcc1:	48 8b 94 03 08 06 00 	mov    0x608(%rbx,%rax,1),%rdx
  40fcc8:	00 
		for(int i = 0; i < actions_size; ++i) {
  40fcc9:	48 85 d2             	test   %rdx,%rdx
  40fccc:	74 66                	je     40fd34 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x6e4>
  40fcce:	48 69 44 24 20 ca 00 	imul   $0xca,0x20(%rsp),%rax
  40fcd5:	00 00 
  40fcd7:	48 8d 84 02 80 00 00 	lea    0x80(%rdx,%rax,1),%rax
  40fcde:	00 
  40fcdf:	48 c1 e2 03          	shl    $0x3,%rdx
  40fce3:	48 8d 7c 15 00       	lea    0x0(%rbp,%rdx,1),%rdi
  40fce8:	48 8d 0c c3          	lea    (%rbx,%rax,8),%rcx
  40fcec:	48 89 e8             	mov    %rbp,%rax
  40fcef:	90                   	nop
			tmp_a[i] = actions[j];
  40fcf0:	48 8b 31             	mov    (%rcx),%rsi
  40fcf3:	48 83 c0 08          	add    $0x8,%rax
  40fcf7:	48 83 e9 08          	sub    $0x8,%rcx
  40fcfb:	48 89 70 f8          	mov    %rsi,-0x8(%rax)
		for(int i = 0; i < actions_size; ++i) {
  40fcff:	48 39 f8             	cmp    %rdi,%rax
  40fd02:	75 ec                	jne    40fcf0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x6a0>
			j--;
		}
		for(int i = 0; i < actions_size; ++i)
			actions[i] = tmp_a[i];
  40fd04:	48 69 44 24 20 50 06 	imul   $0x650,0x20(%rsp),%rax
  40fd0b:	00 00 
  40fd0d:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  40fd12:	48 89 ee             	mov    %rbp,%rsi
  40fd15:	48 8d bc 03 08 04 00 	lea    0x408(%rbx,%rax,1),%rdi
  40fd1c:	00 
  40fd1d:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40fd22:	48 b8 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rax
  40fd29:	ff ff ff 
  40fd2c:	49 89 df             	mov    %rbx,%r15
  40fd2f:	48 01 d8             	add    %rbx,%rax
  40fd32:	ff d0                	callq  *%rax
        solution->cost = current.gScore;
  40fd34:	48 69 44 24 20 50 06 	imul   $0x650,0x20(%rsp),%rax
  40fd3b:	00 00 
  40fd3d:	8b 94 24 d0 04 00 00 	mov    0x4d0(%rsp),%edx
  40fd44:	48 03 44 24 18       	add    0x18(%rsp),%rax
        delete[]cameFrom; 
  40fd49:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
        solution->cost = current.gScore;
  40fd4e:	89 90 10 06 00 00    	mov    %edx,0x610(%rax)
        solution->fmin = 0; //what is this value +  how can we set this value
  40fd54:	c7 80 14 06 00 00 00 	movl   $0x0,0x614(%rax)
  40fd5b:	00 00 00 
        delete[]cameFrom; 
  40fd5e:	74 1b                	je     40fd7b <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x72b>
  40fd60:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40fd65:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  40fd6c:	ff ff ff 
  40fd6f:	48 8b 3c 24          	mov    (%rsp),%rdi
  40fd73:	49 89 df             	mov    %rbx,%r15
  40fd76:	48 01 d8             	add    %rbx,%rax
  40fd79:	ff d0                	callq  *%rax
        swarm::enqueue(filler,ts_tem,
  40fd7b:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    register uint64_t r9  asm("r9")  = v4;
  40fd80:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40fd85:	48 b8 a0 b5 de ff ff 	movabs $0xffffffffffdeb5a0,%rax
  40fd8c:	ff ff ff 
    return static_cast<uint64_t>(t);
  40fd8f:	4c 63 44 24 50       	movslq 0x50(%rsp),%r8
            :);
  40fd94:	b9 03 00 21 40       	mov    $0x40210003,%ecx
  40fd99:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  40fd9e:	8b be 68 00 01 00    	mov    0x10068(%rsi),%edi
    register uint64_t r9  asm("r9")  = v4;
  40fda4:	4c 8d 0c 18          	lea    (%rax,%rbx,1),%r9
            :);
  40fda8:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40fdab:	e9 7f f9 ff ff       	jmpq   40f72f <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0xdf>
		return solution[agentIdx].states[t].state;
  40fdb0:	45 8b 54 38 04       	mov    0x4(%r8,%rdi,1),%r10d
  40fdb5:	41 8b 54 38 08       	mov    0x8(%r8,%rdi,1),%edx
  40fdba:	e9 52 fb ff ff       	jmpq   40f911 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x2c1>
  40fdbf:	90                   	nop
                current.focalHeuristic +
  40fdc0:	45 01 cc             	add    %r9d,%r12d
    int numConflicts = 0;
  40fdc3:	45 31 d2             	xor    %r10d,%r10d
    for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  40fdc6:	31 d2                	xor    %edx,%edx
  40fdc8:	eb 1b                	jmp    40fde5 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x795>
  40fdca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40fdd0:	48 83 c2 01          	add    $0x1,%rdx
  40fdd4:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
  40fddb:	48 83 fa 14          	cmp    $0x14,%rdx
  40fddf:	0f 84 9b 00 00 00    	je     40fe80 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x830>
      if (i != m_agentIdx && solution[i].states_size > 0) {
  40fde5:	48 39 d3             	cmp    %rdx,%rbx
  40fde8:	74 e6                	je     40fdd0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x780>
  40fdea:	48 8b 81 00 04 00 00 	mov    0x400(%rcx),%rax
  40fdf1:	48 85 c0             	test   %rax,%rax
  40fdf4:	74 da                	je     40fdd0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x780>
        State s2a = getState(i, solution, s1a.time);
  40fdf6:	4c 63 84 24 c0 04 00 	movslq 0x4c0(%rsp),%r8
  40fdfd:	00 
	if (t < solution[agentIdx].states_size) {
  40fdfe:	4c 39 c0             	cmp    %r8,%rax
  40fe01:	77 55                	ja     40fe58 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x808>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40fe03:	4c 8d 48 ff          	lea    -0x1(%rax),%r9
  40fe07:	49 c1 e1 04          	shl    $0x4,%r9
  40fe0b:	49 01 c9             	add    %rcx,%r9
	if (t < solution[agentIdx].states_size) {
  40fe0e:	48 39 f0             	cmp    %rsi,%rax
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40fe11:	45 8b 41 04          	mov    0x4(%r9),%r8d
  40fe15:	45 8b 49 08          	mov    0x8(%r9),%r9d
	if (t < solution[agentIdx].states_size) {
  40fe19:	77 52                	ja     40fe6d <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x81d>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40fe1b:	48 83 e8 01          	sub    $0x1,%rax
  40fe1f:	48 c1 e0 04          	shl    $0x4,%rax
  40fe23:	48 01 c8             	add    %rcx,%rax
  40fe26:	44 8b 58 04          	mov    0x4(%rax),%r11d
  40fe2a:	8b 40 08             	mov    0x8(%rax),%eax
  40fe2d:	44 3b 9c 24 c4 04 00 	cmp    0x4c4(%rsp),%r11d
  40fe34:	00 
  40fe35:	75 99                	jne    40fdd0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x780>
  40fe37:	39 84 24 c8 04 00 00 	cmp    %eax,0x4c8(%rsp)
  40fe3e:	75 90                	jne    40fdd0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x780>
  40fe40:	44 39 c5             	cmp    %r8d,%ebp
  40fe43:	75 8b                	jne    40fdd0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x780>
          ++numConflicts;
  40fe45:	31 c0                	xor    %eax,%eax
  40fe47:	45 39 ce             	cmp    %r9d,%r14d
  40fe4a:	0f 94 c0             	sete   %al
  40fe4d:	41 01 c2             	add    %eax,%r10d
  40fe50:	e9 7b ff ff ff       	jmpq   40fdd0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x780>
  40fe55:	0f 1f 00             	nopl   (%rax)
		return solution[agentIdx].states[t].state;
  40fe58:	49 c1 e0 04          	shl    $0x4,%r8
	if (t < solution[agentIdx].states_size) {
  40fe5c:	48 39 f0             	cmp    %rsi,%rax
		return solution[agentIdx].states[t].state;
  40fe5f:	4e 8d 0c 01          	lea    (%rcx,%r8,1),%r9
  40fe63:	45 8b 41 04          	mov    0x4(%r9),%r8d
  40fe67:	45 8b 49 08          	mov    0x8(%r9),%r9d
	if (t < solution[agentIdx].states_size) {
  40fe6b:	76 ae                	jbe    40fe1b <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x7cb>
		return solution[agentIdx].states[t].state;
  40fe6d:	44 8b 5c 39 04       	mov    0x4(%rcx,%rdi,1),%r11d
  40fe72:	8b 44 39 08          	mov    0x8(%rcx,%rdi,1),%eax
  40fe76:	eb b5                	jmp    40fe2d <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x7dd>
  40fe78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40fe7f:	00 
            swarm::enqueue(LL_pll,fScore ,EnqFlags::NOHINT, tmp,prevv,m_env, cameFrom);  
  40fe80:	48 63 7c 24 10       	movslq 0x10(%rsp),%rdi
            prevv.neighbor=neighbor;
  40fe85:	41 8b 45 0c          	mov    0xc(%r13),%eax
                                               tentative_gScore);
  40fe89:	45 01 d4             	add    %r10d,%r12d
            auto tup = new std::tuple<Args...>(args...);
  40fe8c:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
  40fe91:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
            prevv.neighbor=neighbor;
  40fe96:	89 44 24 48          	mov    %eax,0x48(%rsp)
            swarm::enqueue(LL_pll,fScore ,EnqFlags::NOHINT, tmp,prevv,m_env, cameFrom);  
  40fe9a:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  40fe9f:	bf 98 00 00 00       	mov    $0x98,%edi
  40fea4:	ff d1                	callq  *%rcx
  40fea6:	48 8b 0c 24          	mov    (%rsp),%rcx
  40feaa:	44 8b 5c 24 48       	mov    0x48(%rsp),%r11d
  40feaf:	8b 54 24 3c          	mov    0x3c(%rsp),%edx
  40feb3:	8b 74 24 10          	mov    0x10(%rsp),%esi
  40feb7:	44 8b 7c 24 50       	mov    0x50(%rsp),%r15d
  40febc:	48 89 58 10          	mov    %rbx,0x10(%rax)
  40fec0:	48 89 08             	mov    %rcx,(%rax)
  40fec3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  40fec8:	44 89 58 58          	mov    %r11d,0x58(%rax)
  40fecc:	44 8b 5c 24 38       	mov    0x38(%rsp),%r11d
  40fed1:	89 70 3c             	mov    %esi,0x3c(%rax)
  40fed4:	89 50 40             	mov    %edx,0x40(%rax)
  40fed7:	48 89 48 08          	mov    %rcx,0x8(%rax)
  40fedb:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  40fee0:	44 89 58 5c          	mov    %r11d,0x5c(%rax)
  40fee4:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  40fee9:	89 50 60             	mov    %edx,0x60(%rax)
  40feec:	44 89 78 64          	mov    %r15d,0x64(%rax)
  40fef0:	48 89 48 18          	mov    %rcx,0x18(%rax)
  40fef4:	8b 4c 24 54          	mov    0x54(%rsp),%ecx
  40fef8:	89 68 34             	mov    %ebp,0x34(%rax)
  40fefb:	44 89 70 38          	mov    %r14d,0x38(%rax)
  40feff:	44 89 60 44          	mov    %r12d,0x44(%rax)
  40ff03:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%rax)
  40ff0a:	89 48 20             	mov    %ecx,0x20(%rax)
  40ff0d:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  40ff12:	89 68 50             	mov    %ebp,0x50(%rax)
  40ff15:	44 89 70 54          	mov    %r14d,0x54(%rax)
  40ff19:	48 89 48 28          	mov    %rcx,0x28(%rax)
  40ff1d:	8b 4c 24 4c          	mov    0x4c(%rsp),%ecx
  40ff21:	89 48 30             	mov    %ecx,0x30(%rax)
  40ff24:	89 48 4c             	mov    %ecx,0x4c(%rax)
  40ff27:	4c 89 58 68          	mov    %r11,0x68(%rax)
  40ff2b:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
  40ff30:	89 48 78             	mov    %ecx,0x78(%rax)
  40ff33:	89 b0 84 00 00 00    	mov    %esi,0x84(%rax)
            :);
  40ff39:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40ff3e:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  40ff44:	89 68 7c             	mov    %ebp,0x7c(%rax)
  40ff47:	48 89 c6             	mov    %rax,%rsi
  40ff4a:	4c 89 78 70          	mov    %r15,0x70(%rax)
  40ff4e:	44 89 b0 80 00 00 00 	mov    %r14d,0x80(%rax)
  40ff55:	44 89 a0 8c 00 00 00 	mov    %r12d,0x8c(%rax)
  40ff5c:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%rax)
  40ff63:	00 00 00 
  40ff66:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  40ff6b:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  40ff70:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40ff73:	49 83 c5 14          	add    $0x14,%r13
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  40ff77:	4c 39 6c 24 60       	cmp    %r13,0x60(%rsp)
  40ff7c:	0f 85 ce f8 ff ff    	jne    40f850 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x200>
  40ff82:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  40ff89:	00 
	if (__p)
  40ff8a:	48 85 ff             	test   %rdi,%rdi
  40ff8d:	0f 84 9c f7 ff ff    	je     40f72f <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0xdf>
      { ::operator delete(__p); }
  40ff93:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40ff98:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40ff9f:	ff ff ff 
  40ffa2:	49 89 df             	mov    %rbx,%r15
  40ffa5:	48 01 d8             	add    %rbx,%rax
  40ffa8:	ff d0                	callq  *%rax
  40ffaa:	e9 80 f7 ff ff       	jmpq   40f72f <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0xdf>
  40ffaf:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  40ffb4:	48 b8 c8 7a df ff ff 	movabs $0xffffffffffdf7ac8,%rax
  40ffbb:	ff ff ff 
  40ffbe:	49 ba 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%r10
  40ffc5:	ff ff ff 
  40ffc8:	b9 00 04 00 00       	mov    $0x400,%ecx
  40ffcd:	ba 01 00 00 00       	mov    $0x1,%edx
  40ffd2:	be ff 03 00 00       	mov    $0x3ff,%esi
  40ffd7:	48 89 ef             	mov    %rbp,%rdi
  40ffda:	4d 8d 04 06          	lea    (%r14,%rax,1),%r8
  40ffde:	4d 89 f7             	mov    %r14,%r15
  40ffe1:	31 c0                	xor    %eax,%eax
  40ffe3:	4d 01 f2             	add    %r14,%r10
  40ffe6:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40ffe9:	b9 05 04 00 00       	mov    $0x405,%ecx
  40ffee:	48 89 ef             	mov    %rbp,%rdi
  40fff1:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40fff4:	48 8b 93 00 04 00 00 	mov    0x400(%rbx),%rdx
		for(int i = 0; i < states_size; ++i) {
  40fffb:	48 85 d2             	test   %rdx,%rdx
  40fffe:	0f 85 3a fc ff ff    	jne    40fc3e <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x5ee>
  410004:	e9 aa fc ff ff       	jmpq   40fcb3 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x663>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  410009:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  410010:	00 
  410011:	48 89 c3             	mov    %rax,%rbx
	if (__p)
  410014:	48 85 ff             	test   %rdi,%rdi
  410017:	74 17                	je     410030 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironmentP9came_from+0x9e0>
  410019:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41001e:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  410025:	ff ff ff 
  410028:	49 89 c7             	mov    %rax,%r15
  41002b:	48 01 c2             	add    %rax,%rdx
  41002e:	ff d2                	callq  *%rdx
  410030:	48 89 df             	mov    %rbx,%rdi
  410033:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  410038:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41003f:	ff ff ff 
  410042:	49 89 df             	mov    %rbx,%r15
  410045:	48 01 d8             	add    %rbx,%rax
  410048:	ff d0                	callq  *%rax
  41004a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000410050 <_Z19main_loop_task_paramiP13HighLevelNode>:
		main_loop_task(0);
#endif
	}

#ifdef SWARM
	void main_loop_task_para(swarm::Timestamp score, int nodeid, HighLevelNode *newNodee ) {
  410050:	41 57                	push   %r15
  410052:	41 56                	push   %r14
  410054:	49 bb b0 af 21 00 00 	movabs $0x21afb0,%r11
  41005b:	00 00 00 
  41005e:	41 55                	push   %r13
  410060:	41 54                	push   %r12
  410062:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 410050 <_Z19main_loop_task_paramiP13HighLevelNode>
  410069:	55                   	push   %rbp
  41006a:	53                   	push   %rbx

		// Check done flag.
		 if(g_isNoConflict) {
  41006b:	48 b8 40 d2 9b 3b 00 	movabs $0x3b9bd240,%rax
  410072:	00 00 00 
  410075:	4d 01 dc             	add    %r11,%r12
	void main_loop_task_para(swarm::Timestamp score, int nodeid, HighLevelNode *newNodee ) {
  410078:	48 81 ec 08 05 00 00 	sub    $0x508,%rsp
		 if(g_isNoConflict) {
  41007f:	42 80 3c 20 00       	cmpb   $0x0,(%rax,%r12,1)
	void main_loop_task_para(swarm::Timestamp score, int nodeid, HighLevelNode *newNodee ) {
  410084:	89 74 24 28          	mov    %esi,0x28(%rsp)
		 if(g_isNoConflict) {
  410088:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  41008d:	0f 85 85 06 00 00    	jne    410718 <_Z19main_loop_task_paramiP13HighLevelNode+0x6c8>

		//pls::info("Environment::getFirstConflict() : at (1)");

    int max_t = 0;
		for (int i = 0; i < ROBOT_NUMS; ++i) {
			max_t = std::max<int>(max_t, solution[i].states_size - 1);
  410093:	f3 0f 7e 82 00 04 00 	movq   0x400(%rdx),%xmm0
  41009a:	00 
  41009b:	66 0f 76 d2          	pcmpeqd %xmm2,%xmm2
  41009f:	f3 0f 7e 8a a0 10 00 	movq   0x10a0(%rdx),%xmm1
  4100a6:	00 
  4100a7:	0f 16 82 50 0a 00 00 	movhps 0xa50(%rdx),%xmm0
  4100ae:	0f 16 8a f0 16 00 00 	movhps 0x16f0(%rdx),%xmm1
  4100b5:	f3 0f 7e 9a e0 29 00 	movq   0x29e0(%rdx),%xmm3
  4100bc:	00 
  4100bd:	0f 16 9a 30 30 00 00 	movhps 0x3030(%rdx),%xmm3
  4100c4:	49 89 d6             	mov    %rdx,%r14
  4100c7:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  4100cb:	66 0f ef c9          	pxor   %xmm1,%xmm1
  4100cf:	66 0f fe c2          	paddd  %xmm2,%xmm0
  4100d3:	66 0f 6f e0          	movdqa %xmm0,%xmm4
  4100d7:	66 0f 66 e1          	pcmpgtd %xmm1,%xmm4
  4100db:	f3 0f 7e 8a 40 1d 00 	movq   0x1d40(%rdx),%xmm1
  4100e2:	00 
  4100e3:	0f 16 8a 90 23 00 00 	movhps 0x2390(%rdx),%xmm1
  4100ea:	66 0f db c4          	pand   %xmm4,%xmm0
  4100ee:	0f c6 cb 88          	shufps $0x88,%xmm3,%xmm1
  4100f2:	66 0f fe ca          	paddd  %xmm2,%xmm1
  4100f6:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  4100fa:	66 0f 66 d8          	pcmpgtd %xmm0,%xmm3
  4100fe:	66 0f db cb          	pand   %xmm3,%xmm1
  410102:	66 0f df d8          	pandn  %xmm0,%xmm3
  410106:	f3 0f 7e 82 80 36 00 	movq   0x3680(%rdx),%xmm0
  41010d:	00 
  41010e:	0f 16 82 d0 3c 00 00 	movhps 0x3cd0(%rdx),%xmm0
  410115:	66 0f eb d9          	por    %xmm1,%xmm3
  410119:	f3 0f 7e 8a 20 43 00 	movq   0x4320(%rdx),%xmm1
  410120:	00 
  410121:	0f 16 8a 70 49 00 00 	movhps 0x4970(%rdx),%xmm1
  410128:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  41012c:	66 0f fe c2          	paddd  %xmm2,%xmm0
  410130:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  410134:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  410138:	66 0f db c1          	pand   %xmm1,%xmm0
  41013c:	66 0f df cb          	pandn  %xmm3,%xmm1
  410140:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  410144:	f3 0f 7e 8a 60 5c 00 	movq   0x5c60(%rdx),%xmm1
  41014b:	00 
  41014c:	66 0f eb d8          	por    %xmm0,%xmm3
  410150:	f3 0f 7e 82 c0 4f 00 	movq   0x4fc0(%rdx),%xmm0
  410157:	00 
  410158:	0f 16 8a b0 62 00 00 	movhps 0x62b0(%rdx),%xmm1
  41015f:	0f 16 82 10 56 00 00 	movhps 0x5610(%rdx),%xmm0
  410166:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  41016a:	66 0f fe c2          	paddd  %xmm2,%xmm0
  41016e:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  410172:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  410176:	66 0f db c1          	pand   %xmm1,%xmm0
  41017a:	66 0f df cb          	pandn  %xmm3,%xmm1
  41017e:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  410182:	f3 0f 7e 8a 00 69 00 	movq   0x6900(%rdx),%xmm1
  410189:	00 
  41018a:	66 0f eb d8          	por    %xmm0,%xmm3
  41018e:	f3 0f 7e 82 a0 75 00 	movq   0x75a0(%rdx),%xmm0
  410195:	00 
  410196:	0f 16 82 f0 7b 00 00 	movhps 0x7bf0(%rdx),%xmm0
  41019d:	0f 16 8a 50 6f 00 00 	movhps 0x6f50(%rdx),%xmm1
  4101a4:	0f c6 c8 88          	shufps $0x88,%xmm0,%xmm1
  4101a8:	66 0f fe ca          	paddd  %xmm2,%xmm1
  4101ac:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  4101b0:	66 0f 66 c3          	pcmpgtd %xmm3,%xmm0
  4101b4:	66 0f db c8          	pand   %xmm0,%xmm1
  4101b8:	66 0f df c3          	pandn  %xmm3,%xmm0
  4101bc:	66 0f eb c8          	por    %xmm0,%xmm1
  4101c0:	66 0f 6f d1          	movdqa %xmm1,%xmm2
  4101c4:	66 0f 73 da 08       	psrldq $0x8,%xmm2
  4101c9:	66 0f 6f c2          	movdqa %xmm2,%xmm0
  4101cd:	66 0f 66 c1          	pcmpgtd %xmm1,%xmm0
  4101d1:	66 0f db d0          	pand   %xmm0,%xmm2
  4101d5:	66 0f df c1          	pandn  %xmm1,%xmm0
  4101d9:	66 0f eb c2          	por    %xmm2,%xmm0
  4101dd:	66 0f 6f d0          	movdqa %xmm0,%xmm2
  4101e1:	66 0f 73 da 04       	psrldq $0x4,%xmm2
  4101e6:	66 0f 6f ca          	movdqa %xmm2,%xmm1
  4101ea:	66 0f 66 c8          	pcmpgtd %xmm0,%xmm1
  4101ee:	66 0f db d1          	pand   %xmm1,%xmm2
  4101f2:	66 0f df c8          	pandn  %xmm0,%xmm1
  4101f6:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  4101fa:	66 0f eb c2          	por    %xmm2,%xmm0
  4101fe:	66 0f 7e c0          	movd   %xmm0,%eax
  410202:	66 0f 7e 44 24 3c    	movd   %xmm0,0x3c(%rsp)
    }

		//pls::info("Environment::getFirstConflict() : at (2)");

    for (int t = 0; t < max_t; ++t) {
  410208:	85 c0                	test   %eax,%eax
  41020a:	0f 8e 58 09 00 00    	jle    410b68 <_Z19main_loop_task_paramiP13HighLevelNode+0xb18>
  410210:	48 8d 82 50 06 00 00 	lea    0x650(%rdx),%rax
  410217:	31 db                	xor    %ebx,%ebx
  410219:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
      // check drive-drive vertex collisions
      for (size_t i = 0; i < ROBOT_NUMS; ++i) {
        State state1 = getState(i, solution, t);
  41021e:	48 b8 a0 2b de ff ff 	movabs $0xffffffffffde2ba0,%rax
  410225:	ff ff ff 
  410228:	4c 01 e0             	add    %r12,%rax
  41022b:	48 89 c5             	mov    %rax,%rbp
  41022e:	48 89 da             	mov    %rbx,%rdx
  410231:	31 ff                	xor    %edi,%edi
  410233:	89 5c 24 38          	mov    %ebx,0x38(%rsp)
  410237:	4c 89 f6             	mov    %r14,%rsi
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  41023a:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        State state1 = getState(i, solution, t);
  410240:	ff d5                	callq  *%rbp
  410242:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  410247:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  41024e:	00 
  41024f:	48 89 d9             	mov    %rbx,%rcx
  410252:	48 c1 e8 20          	shr    $0x20,%rax
  410256:	89 94 24 08 01 00 00 	mov    %edx,0x108(%rsp)
  41025d:	41 89 d0             	mov    %edx,%r8d
  410260:	48 89 c7             	mov    %rax,%rdi
  410263:	48 c1 e1 04          	shl    $0x4,%rcx
  410267:	4d 8d 55 ff          	lea    -0x1(%r13),%r10
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  41026b:	4c 89 fa             	mov    %r15,%rdx
  41026e:	4c 89 ee             	mov    %r13,%rsi
  410271:	eb 31                	jmp    4102a4 <_Z19main_loop_task_paramiP13HighLevelNode+0x254>
  410273:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  410278:	48 83 e8 01          	sub    $0x1,%rax
  41027c:	48 c1 e0 04          	shl    $0x4,%rax
  410280:	48 01 d0             	add    %rdx,%rax
  410283:	44 8b 48 04          	mov    0x4(%rax),%r9d
  410287:	8b 40 08             	mov    0x8(%rax),%eax
  41028a:	41 39 f9             	cmp    %edi,%r9d
  41028d:	74 2f                	je     4102be <_Z19main_loop_task_paramiP13HighLevelNode+0x26e>
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  41028f:	48 83 c6 01          	add    $0x1,%rsi
  410293:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
  41029a:	48 83 fe 14          	cmp    $0x14,%rsi
  41029e:	0f 84 d4 04 00 00    	je     410778 <_Z19main_loop_task_paramiP13HighLevelNode+0x728>
	if (t < solution[agentIdx].states_size) {
  4102a4:	48 8b 82 00 04 00 00 	mov    0x400(%rdx),%rax
  4102ab:	48 39 d8             	cmp    %rbx,%rax
  4102ae:	76 c8                	jbe    410278 <_Z19main_loop_task_paramiP13HighLevelNode+0x228>
		return solution[agentIdx].states[t].state;
  4102b0:	44 8b 4c 0a 04       	mov    0x4(%rdx,%rcx,1),%r9d
  4102b5:	8b 44 0a 08          	mov    0x8(%rdx,%rcx,1),%eax
  4102b9:	41 39 f9             	cmp    %edi,%r9d
  4102bc:	75 d1                	jne    41028f <_Z19main_loop_task_paramiP13HighLevelNode+0x23f>
  4102be:	44 39 c0             	cmp    %r8d,%eax
  4102c1:	75 cc                	jne    41028f <_Z19main_loop_task_paramiP13HighLevelNode+0x23f>
  4102c3:	41 89 c7             	mov    %eax,%r15d
          State state2 = getState(j, solution, t);
          if (state1.equalExceptTime(state2)) {
            result.time = t;
  4102c6:	8b 44 24 38          	mov    0x38(%rsp),%eax
  4102ca:	41 89 fd             	mov    %edi,%r13d
            result.agent1 = i;
            result.agent2 = j;
            result.type = Conflict::Vertex;
            result.x1 = state1.x;
  4102cd:	89 bc 24 bc 00 00 00 	mov    %edi,0xbc(%rsp)
  void createConstraintsFromConflict(
      const Conflict& conflict, std::map<size_t, Constraints>& constraints) {
    if (conflict.type == Conflict::Vertex) {
      Constraints c1;
			c1.add(VertexConstraint(conflict.time, conflict.x1, conflict.y1));
      constraints[conflict.agent1] = c1;
  4102d4:	48 8d 9c 24 a0 00 00 	lea    0xa0(%rsp),%rbx
  4102db:	00 
  4102dc:	48 bd a0 08 df ff ff 	movabs $0xffffffffffdf08a0,%rbp
  4102e3:	ff ff ff 
            result.agent2 = j;
  4102e6:	48 89 b4 24 b0 00 00 	mov    %rsi,0xb0(%rsp)
  4102ed:	00 
            result.agent1 = i;
  4102ee:	4c 89 94 24 a8 00 00 	mov    %r10,0xa8(%rsp)
  4102f5:	00 
            result.time = t;
  4102f6:	89 84 24 a0 00 00 00 	mov    %eax,0xa0(%rsp)
	    this->_M_header._M_left = &this->_M_header;
  4102fd:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  410304:	00 
            result.type = Conflict::Vertex;
  410305:	c7 84 24 b8 00 00 00 	movl   $0x0,0xb8(%rsp)
  41030c:	00 00 00 00 
            result.y1 = state1.y;
  410310:	44 89 bc 24 c0 00 00 	mov    %r15d,0xc0(%rsp)
  410317:	00 
	    _M_node_count(0)
  410318:	c7 84 24 d8 00 00 00 	movl   $0x0,0xd8(%rsp)
  41031f:	00 00 00 00 
      constraints[conflict.agent1] = c1;
  410323:	48 8d 73 08          	lea    0x8(%rbx),%rsi
	    this->_M_header._M_left = &this->_M_header;
  410327:	48 89 c7             	mov    %rax,%rdi
  41032a:	48 8d 84 24 d8 00 00 	lea    0xd8(%rsp),%rax
  410331:	00 
	    _M_node_count(0)
  410332:	48 c7 84 24 e0 00 00 	movq   $0x0,0xe0(%rsp)
  410339:	00 00 00 00 00 
  41033e:	48 c7 84 24 f8 00 00 	movq   $0x0,0xf8(%rsp)
  410345:	00 00 00 00 00 
  41034a:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
	    this->_M_header._M_left = &this->_M_header;
  41034f:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  410356:	00 
	    this->_M_header._M_right = &this->_M_header;
  410357:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  41035e:	00 
  41035f:	4a 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%rax
  410364:	ff d0                	callq  *%rax
  410366:	8b 74 24 38          	mov    0x38(%rsp),%esi
  41036a:	44 89 68 04          	mov    %r13d,0x4(%rax)
  41036e:	44 89 78 08          	mov    %r15d,0x8(%rax)
  410372:	c7 80 40 06 00 00 01 	movl   $0x1,0x640(%rax)
  410379:	00 00 00 
  41037c:	c7 80 44 06 00 00 00 	movl   $0x0,0x644(%rax)
  410383:	00 00 00 
      constraints[conflict.agent2] = c1;
  410386:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
      constraints[conflict.agent1] = c1;
  41038b:	89 30                	mov    %esi,(%rax)
      constraints[conflict.agent2] = c1;
  41038d:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  410391:	4a 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%rax
  410396:	ff d0                	callq  *%rax
  410398:	8b 5c 24 38          	mov    0x38(%rsp),%ebx
  41039c:	44 89 68 04          	mov    %r13d,0x4(%rax)
  4103a0:	44 89 78 08          	mov    %r15d,0x8(%rax)
  4103a4:	c7 80 40 06 00 00 01 	movl   $0x1,0x640(%rax)
  4103ab:	00 00 00 
  4103ae:	c7 80 44 06 00 00 00 	movl   $0x0,0x644(%rax)
  4103b5:	00 00 00 
  4103b8:	89 18                	mov    %ebx,(%rax)
		 // create constraints
		 std::map<size_t, Constraints> constraints;
		 g_env.createConstraintsFromConflict(conflict, constraints);

		 // NOde expantion
		 int generation = P->generation + 1;
  4103ba:	41 8b 86 5c 00 01 00 	mov    0x1005c(%r14),%eax
  4103c1:	4c 8b ac 24 e8 00 00 	mov    0xe8(%rsp),%r13
  4103c8:	00 
  4103c9:	83 c0 01             	add    $0x1,%eax
  4103cc:	89 44 24 30          	mov    %eax,0x30(%rsp)
		 int child_id = 0;
     //swarm::info("hls node genrn");
     //int j=0;
		 for (const auto& c : constraints) {
  4103d0:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  4103d5:	48 83 c0 08          	add    $0x8,%rax
  4103d9:	49 39 c5             	cmp    %rax,%r13
  4103dc:	0f 84 79 08 00 00    	je     410c5b <_Z19main_loop_task_paramiP13HighLevelNode+0xc0b>
	return parent_nodeid * 2 + 1 + child_id;
  4103e2:	8b 44 24 28          	mov    0x28(%rsp),%eax
			 size_t i = c.first;
  4103e6:	49 8b 6d 20          	mov    0x20(%r13),%rbp
	return parent_nodeid * 2 + 1 + child_id;
  4103ea:	01 c0                	add    %eax,%eax
  4103ec:	8d 48 01             	lea    0x1(%rax),%ecx
			 int new_nodeid = index(nodeid, child_id);
       //int new_nodeid = 0;

			 if(new_nodeid > MAX_NODE_NUMS) {
  4103ef:	81 f9 00 ca 9a 3b    	cmp    $0x3b9aca00,%ecx
  4103f5:	0f 8f 0f 08 00 00    	jg     410c0a <_Z19main_loop_task_paramiP13HighLevelNode+0xbba>
  4103fb:	83 c0 03             	add    $0x3,%eax
  4103fe:	48 ba 00 b6 de ff ff 	movabs $0xffffffffffdeb600,%rdx
  410405:	ff ff ff 
  410408:	48 bb 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rbx
  41040f:	ff ff ff 
  410412:	89 44 24 3c          	mov    %eax,0x3c(%rsp)
  410416:	48 63 c1             	movslq %ecx,%rax
  410419:	49 8d 3c 14          	lea    (%r12,%rdx,1),%rdi
  41041d:	89 44 24 38          	mov    %eax,0x38(%rsp)
  410421:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  410426:	48 b8 c0 50 9c 3b 00 	movabs $0x3b9c50c0,%rax
  41042d:	00 00 00 
  410430:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  410435:	48 b8 c0 e6 dd ff ff 	movabs $0xffffffffffdde6c0,%rax
  41043c:	ff ff ff 
  41043f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  410444:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
#else
			//global_nodelist[new_nodeid] = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
			//HighLevelNode *newNode = global_nodelist[new_nodeid];
			//global_nodelist[new_nodeid].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
			//HighLevelNode *newNode = global_nodelist[new_nodeid].addr;
      HighLevelNode *newNode = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  410449:	48 b8 c0 74 df ff ff 	movabs $0xffffffffffdf74c0,%rax
  410450:	ff ff ff 
  410453:	48 bf 80 d1 9b 3b 00 	movabs $0x3b9bd180,%rdi
  41045a:	00 00 00 
  41045d:	4c 01 e0             	add    %r12,%rax
			 if(new_nodeid > MAX_NODE_NUMS) {
  410460:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  410467:	00 
  410468:	48 89 5c 24 50       	mov    %rbx,0x50(%rsp)
      HighLevelNode *newNode = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  41046d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  410472:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
  410479:	00 
  41047a:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
  41047f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  410484:	48 b8 98 7b df ff ff 	movabs $0xffffffffffdf7b98,%rax
  41048b:	ff ff ff 
  41048e:	4c 01 e0             	add    %r12,%rax
  410491:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  410496:	bf 80 00 01 00       	mov    $0x10080,%edi
  41049b:	4d 89 e7             	mov    %r12,%r15
  41049e:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  4104a3:	ff d0                	callq  *%rax
  4104a5:	48 89 c3             	mov    %rax,%rbx
#endif

			 //HighLevelNode newNode = P;
        //swarm::info("sol cost: %i nodenum: %i",newNode->cost, new_nodeid);
			 *newNode = *P;
  4104a8:	48 89 c7             	mov    %rax,%rdi
  4104ab:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  4104b0:	4c 89 f6             	mov    %r14,%rsi
  4104b3:	ba 80 00 01 00       	mov    $0x10080,%edx
  4104b8:	4c 01 e0             	add    %r12,%rax
  4104bb:	ff d0                	callq  *%rax
			 newNode->id = new_nodeid;
  4104bd:	8b 44 24 38          	mov    0x38(%rsp),%eax
			 newNode->generation = generation;
			 newNode->parent_child_id = P->own_child_id;
			 newNode->own_child_id = child_id;
			 newNode->parentTimestamp = P->timestamp;
  4104c1:	45 8b 86 4c 00 01 00 	mov    0x1004c(%r14),%r8d
			 newNode->id = new_nodeid;
  4104c8:	89 83 50 00 01 00    	mov    %eax,0x10050(%rbx)
			 newNode->generation = generation;
  4104ce:	8b 44 24 30          	mov    0x30(%rsp),%eax
			 newNode->parentTimestamp = P->timestamp;
  4104d2:	44 89 83 68 00 01 00 	mov    %r8d,0x10068(%rbx)
			 newNode->generation = generation;
  4104d9:	89 83 5c 00 01 00    	mov    %eax,0x1005c(%rbx)
			 newNode->parent_child_id = P->own_child_id;
  4104df:	41 8b 86 58 00 01 00 	mov    0x10058(%r14),%eax
  4104e6:	89 83 54 00 01 00    	mov    %eax,0x10054(%rbx)
			 newNode->own_child_id = child_id;
  4104ec:	8b 04 24             	mov    (%rsp),%eax
  4104ef:	89 83 58 00 01 00    	mov    %eax,0x10058(%rbx)
  void add(const Constraints& other) {
    //vertexConstraints.insert(other.vertexConstraints.begin(),
    //                         other.vertexConstraints.end());
    //edgeConstraints.insert(other.edgeConstraints.begin(),
    //                       other.edgeConstraints.end());
		if (vertexConstraints_size >= MAX_CONSTRAINT_SIZE || 
  4104f5:	48 8d 44 6d 00       	lea    0x0(%rbp,%rbp,2),%rax
  4104fa:	4c 8d 54 85 00       	lea    0x0(%rbp,%rax,4),%r10
  4104ff:	49 c1 e2 07          	shl    $0x7,%r10
  410503:	4a 8d 34 13          	lea    (%rbx,%r10,1),%rsi
  410507:	83 be 80 84 00 00 3f 	cmpl   $0x3f,0x8480(%rsi)
  41050e:	0f 8f 7c 05 00 00    	jg     410a90 <_Z19main_loop_task_paramiP13HighLevelNode+0xa40>
  410514:	83 be 84 84 00 00 3f 	cmpl   $0x3f,0x8484(%rsi)
  41051b:	0f 8f 6f 05 00 00    	jg     410a90 <_Z19main_loop_task_paramiP13HighLevelNode+0xa40>
#ifdef SWARM
			swarm::info("[ERROR] constraints size is over %d", MAX_CONSTRAINT_SIZE );
#endif
			return;
		}
		for (int i = 0; i < other.vertexConstraints_size; ++i) {
  410521:	41 8b bd 68 06 00 00 	mov    0x668(%r13),%edi
  410528:	85 ff                	test   %edi,%edi
  41052a:	7e 70                	jle    41059c <_Z19main_loop_task_paramiP13HighLevelNode+0x54c>
  41052c:	4d 8d 4d 28          	lea    0x28(%r13),%r9
  410530:	4e 8d bc 13 40 7e 00 	lea    0x7e40(%rbx,%r10,1),%r15
  410537:	00 
  410538:	45 31 db             	xor    %r11d,%r11d
  41053b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
			bool found_same_key = false;
			for (int j =0; j < vertexConstraints_size; ++j) {
  410540:	8b 8e 80 84 00 00    	mov    0x8480(%rsi),%ecx
  410546:	85 c9                	test   %ecx,%ecx
  410548:	0f 8e 12 05 00 00    	jle    410a60 <_Z19main_loop_task_paramiP13HighLevelNode+0xa10>
  41054e:	41 8b 39             	mov    (%r9),%edi
  410551:	4c 89 f8             	mov    %r15,%rax
  410554:	31 d2                	xor    %edx,%edx
  410556:	eb 1d                	jmp    410575 <_Z19main_loop_task_paramiP13HighLevelNode+0x525>
  410558:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41055f:	00 
  410560:	8b 8e 80 84 00 00    	mov    0x8480(%rsi),%ecx
  410566:	83 c2 01             	add    $0x1,%edx
  410569:	48 83 c0 0c          	add    $0xc,%rax
  41056d:	39 d1                	cmp    %edx,%ecx
  41056f:	0f 8e eb 04 00 00    	jle    410a60 <_Z19main_loop_task_paramiP13HighLevelNode+0xa10>
	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
  410575:	3b 38                	cmp    (%rax),%edi
  410577:	75 e7                	jne    410560 <_Z19main_loop_task_paramiP13HighLevelNode+0x510>
  410579:	41 8b 49 04          	mov    0x4(%r9),%ecx
  41057d:	39 48 04             	cmp    %ecx,0x4(%rax)
  410580:	75 de                	jne    410560 <_Z19main_loop_task_paramiP13HighLevelNode+0x510>
  410582:	41 8b 49 08          	mov    0x8(%r9),%ecx
  410586:	39 48 08             	cmp    %ecx,0x8(%rax)
  410589:	75 d5                	jne    410560 <_Z19main_loop_task_paramiP13HighLevelNode+0x510>
		for (int i = 0; i < other.vertexConstraints_size; ++i) {
  41058b:	41 83 c3 01          	add    $0x1,%r11d
  41058f:	49 83 c1 0c          	add    $0xc,%r9
  410593:	45 39 9d 68 06 00 00 	cmp    %r11d,0x668(%r13)
  41059a:	7f a4                	jg     410540 <_Z19main_loop_task_paramiP13HighLevelNode+0x4f0>
			if (!found_same_key) { // Not found
				vertexConstraints[vertexConstraints_size] = other.vertexConstraints[i];
				vertexConstraints_size++;
			}
		}
		for (int i = 0; i < other.edgeConstraints_size; ++i) {
  41059c:	41 8b 8d 6c 06 00 00 	mov    0x66c(%r13),%ecx
  4105a3:	85 c9                	test   %ecx,%ecx
  4105a5:	0f 8e 96 00 00 00    	jle    410641 <_Z19main_loop_task_paramiP13HighLevelNode+0x5f1>
  4105ab:	48 8d 44 6d 00       	lea    0x0(%rbp,%rbp,2),%rax
  4105b0:	49 8d bd 80 02 00 00 	lea    0x280(%r13),%rdi
  4105b7:	45 31 db             	xor    %r11d,%r11d
  4105ba:	4c 8d 54 85 00       	lea    0x0(%rbp,%rax,4),%r10
  4105bf:	49 c1 e2 07          	shl    $0x7,%r10
  4105c3:	4e 8d bc 13 98 80 00 	lea    0x8098(%rbx,%r10,1),%r15
  4105ca:	00 
			bool found_same_key = false;
			for (int j =0; j < edgeConstraints_size; ++j) {
  4105cb:	4a 8d 34 13          	lea    (%rbx,%r10,1),%rsi
  4105cf:	90                   	nop
  4105d0:	8b 8e 84 84 00 00    	mov    0x8484(%rsi),%ecx
  4105d6:	85 c9                	test   %ecx,%ecx
  4105d8:	0f 8e 4a 04 00 00    	jle    410a28 <_Z19main_loop_task_paramiP13HighLevelNode+0x9d8>
  4105de:	44 8b 0f             	mov    (%rdi),%r9d
  4105e1:	4c 89 f8             	mov    %r15,%rax
  4105e4:	31 d2                	xor    %edx,%edx
  4105e6:	eb 1d                	jmp    410605 <_Z19main_loop_task_paramiP13HighLevelNode+0x5b5>
  4105e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4105ef:	00 
  4105f0:	8b 8e 84 84 00 00    	mov    0x8484(%rsi),%ecx
  4105f6:	83 c2 01             	add    $0x1,%edx
  4105f9:	48 83 c0 14          	add    $0x14,%rax
  4105fd:	39 d1                	cmp    %edx,%ecx
  4105ff:	0f 8e 23 04 00 00    	jle    410a28 <_Z19main_loop_task_paramiP13HighLevelNode+0x9d8>
  410605:	44 39 08             	cmp    %r9d,(%rax)
  410608:	75 e6                	jne    4105f0 <_Z19main_loop_task_paramiP13HighLevelNode+0x5a0>
  41060a:	8b 4f 04             	mov    0x4(%rdi),%ecx
  41060d:	39 48 04             	cmp    %ecx,0x4(%rax)
  410610:	75 de                	jne    4105f0 <_Z19main_loop_task_paramiP13HighLevelNode+0x5a0>
  410612:	8b 4f 08             	mov    0x8(%rdi),%ecx
  410615:	39 48 08             	cmp    %ecx,0x8(%rax)
  410618:	75 d6                	jne    4105f0 <_Z19main_loop_task_paramiP13HighLevelNode+0x5a0>
  41061a:	8b 4f 0c             	mov    0xc(%rdi),%ecx
  41061d:	39 48 0c             	cmp    %ecx,0xc(%rax)
  410620:	75 ce                	jne    4105f0 <_Z19main_loop_task_paramiP13HighLevelNode+0x5a0>
  410622:	8b 4f 10             	mov    0x10(%rdi),%ecx
  410625:	39 48 10             	cmp    %ecx,0x10(%rax)
  410628:	75 c6                	jne    4105f0 <_Z19main_loop_task_paramiP13HighLevelNode+0x5a0>
  41062a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
		for (int i = 0; i < other.edgeConstraints_size; ++i) {
  410630:	41 83 c3 01          	add    $0x1,%r11d
  410634:	48 83 c7 14          	add    $0x14,%rdi
  410638:	45 39 9d 6c 06 00 00 	cmp    %r11d,0x66c(%r13)
  41063f:	7f 8f                	jg     4105d0 <_Z19main_loop_task_paramiP13HighLevelNode+0x580>

			newNode->constraints[i].add(c.second);
			newNode->cost -= newNode->solution[i].cost;
  410641:	48 69 c5 50 06 00 00 	imul   $0x650,%rbp,%rax
    register uint64_t r10 asm("r10") = v5;
  410648:	48 8b 34 24          	mov    (%rsp),%rsi
			State *s = &g_initialStates[i];
      //swarm::info("lls serch inii: %i , i_con: %i", new_nodeid, i);
      //if (j==1) continue;
      //swarm::info("swarm enw %i" ,i); P->timestamp
			//swarm::enqueue(lls_search,P->timestamp ,EnqFlags::NOHINT, g_w, s, new_nodeid, i);/* &newNode->solution[i], */
      swarm::enqueue(lls_search,P->timestamp ,EnqFlags::NOHINT, g_w, s, newNode, i, new_nodeid);
  41064c:	49 63 f8             	movslq %r8d,%rdi
    register uint64_t r8  asm("r8")  = v3;
  41064f:	49 89 d8             	mov    %rbx,%r8
    register uint64_t r9  asm("r9")  = v4;
  410652:	49 89 e9             	mov    %rbp,%r9
    register uint64_t r11 asm("r11") = v6;
  410655:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
			newNode->cost -= newNode->solution[i].cost;
  41065a:	48 01 d8             	add    %rbx,%rax
  41065d:	8b 90 10 06 00 00    	mov    0x610(%rax),%edx
			newNode->LB -= newNode->solution[i].fmin;
  410663:	8b 80 14 06 00 00    	mov    0x614(%rax),%eax
  410669:	29 83 44 00 01 00    	sub    %eax,0x10044(%rbx)
      { return *(this->_M_impl._M_start + __n); }
  41066f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
			newNode->cost -= newNode->solution[i].cost;
  410674:	29 93 40 00 01 00    	sub    %edx,0x10040(%rbx)
  41067a:	48 8d 54 6d 00       	lea    0x0(%rbp,%rbp,2),%rdx
    register uint64_t r10 asm("r10") = v5;
  41067f:	48 8b 5c 24 70       	mov    0x70(%rsp),%rbx
  410684:	4a 8b 04 20          	mov    (%rax,%r12,1),%rax
  410688:	4c 8d 14 33          	lea    (%rbx,%rsi,1),%r10
  41068c:	48 8d 14 90          	lea    (%rax,%rdx,4),%rdx
        U(T _t) : t(_t) {}
  410690:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  410695:	42 8b 0c 20          	mov    (%rax,%r12,1),%ecx
  410699:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  4106a0:	ff ff ff 
  4106a3:	48 23 44 24 40       	and    0x40(%rsp),%rax
  4106a8:	48 09 c8             	or     %rcx,%rax
            :);
  4106ab:	b9 05 00 01 40       	mov    $0x40010005,%ecx
        U(T _t) : t(_t) {}
  4106b0:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            :);
  4106b5:	48 89 c6             	mov    %rax,%rsi
  4106b8:	48 87 c9             	xchg   %rcx,%rcx
					//global_nodelist[new_nodeid], i);
#endif
      //swarm::info("lls serch after: parent ts : %i , ts: %i", score,P->timestamp);
			child_id++;
      //j++;
			if(child_id > 2) {
  4106bb:	8b 7c 24 3c          	mov    0x3c(%rsp),%edi
  4106bf:	39 7c 24 38          	cmp    %edi,0x38(%rsp)
  4106c3:	0f 84 14 04 00 00    	je     410add <_Z19main_loop_task_paramiP13HighLevelNode+0xa8d>
	_M_node = _Rb_tree_increment(_M_node);
  4106c9:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  4106ce:	4c 89 ef             	mov    %r13,%rdi
  4106d1:	4d 89 e7             	mov    %r12,%r15
  4106d4:	4c 01 e0             	add    %r12,%rax
  4106d7:	ff d0                	callq  *%rax
		 for (const auto& c : constraints) {
  4106d9:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
  4106de:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  4106e2:	48 39 d0             	cmp    %rdx,%rax
  4106e5:	0f 84 70 05 00 00    	je     410c5b <_Z19main_loop_task_paramiP13HighLevelNode+0xc0b>
  4106eb:	83 44 24 38 01       	addl   $0x1,0x38(%rsp)
  4106f0:	48 83 04 24 01       	addq   $0x1,(%rsp)
  4106f5:	49 89 c5             	mov    %rax,%r13
  4106f8:	8b 5c 24 38          	mov    0x38(%rsp),%ebx
			 size_t i = c.first;
  4106fc:	48 8b 68 20          	mov    0x20(%rax),%rbp
			 if(new_nodeid > MAX_NODE_NUMS) {
  410700:	81 fb 01 ca 9a 3b    	cmp    $0x3b9aca01,%ebx
  410706:	0f 85 8a fd ff ff    	jne    410496 <_Z19main_loop_task_paramiP13HighLevelNode+0x446>
  41070c:	41 89 d9             	mov    %ebx,%r9d
  41070f:	e9 fd 04 00 00       	jmpq   410c11 <_Z19main_loop_task_paramiP13HighLevelNode+0xbc1>
  410714:	0f 1f 40 00          	nopl   0x0(%rax)
  410718:	48 8d 9c 24 00 01 00 	lea    0x100(%rsp),%rbx
  41071f:	00 
  410720:	48 b8 38 7b df ff ff 	movabs $0xffffffffffdf7b38,%rax
  410727:	ff ff ff 
  41072a:	49 ba 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%r10
  410731:	ff ff ff 
  410734:	41 89 f1             	mov    %esi,%r9d
  410737:	4d 8d 04 04          	lea    (%r12,%rax,1),%r8
  41073b:	b9 00 04 00 00       	mov    $0x400,%ecx
  410740:	ba 01 00 00 00       	mov    $0x1,%edx
  410745:	be ff 03 00 00       	mov    $0x3ff,%esi
  41074a:	48 89 df             	mov    %rbx,%rdi
  41074d:	4d 89 e7             	mov    %r12,%r15
  410750:	31 c0                	xor    %eax,%eax
  410752:	4d 01 e2             	add    %r12,%r10
  410755:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410758:	b9 05 04 00 00       	mov    $0x405,%ecx
  41075d:	48 89 df             	mov    %rbx,%rdi
  410760:	48 87 c9             	xchg   %rcx,%rcx
		 //free(global_nodelist[nodeid].addr);
		 //global_nodelist[nodeid].addr = NULL;
     free(newNodee);
     newNodee=NULL;
		 return;
	}
  410763:	48 81 c4 08 05 00 00 	add    $0x508,%rsp
  41076a:	5b                   	pop    %rbx
  41076b:	5d                   	pop    %rbp
  41076c:	41 5c                	pop    %r12
  41076e:	41 5d                	pop    %r13
  410770:	41 5e                	pop    %r14
  410772:	41 5f                	pop    %r15
  410774:	c3                   	retq   
  410775:	0f 1f 00             	nopl   (%rax)
        State state1 = getState(i, solution, t);
  410778:	4c 89 ef             	mov    %r13,%rdi
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  41077b:	49 83 c5 01          	add    $0x1,%r13
        State state1 = getState(i, solution, t);
  41077f:	48 89 da             	mov    %rbx,%rdx
  410782:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  410787:	4c 89 f6             	mov    %r14,%rsi
  41078a:	49 81 c7 50 06 00 00 	add    $0x650,%r15
  410791:	ff d5                	callq  *%rbp
  410793:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  41079a:	00 
  41079b:	48 c1 e8 20          	shr    $0x20,%rax
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  41079f:	49 83 fd 14          	cmp    $0x14,%r13
        State state1 = getState(i, solution, t);
  4107a3:	89 94 24 08 01 00 00 	mov    %edx,0x108(%rsp)
  4107aa:	48 89 c7             	mov    %rax,%rdi
  4107ad:	41 89 d0             	mov    %edx,%r8d
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  4107b0:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  4107b5:	0f 85 ac fa ff ff    	jne    410267 <_Z19main_loop_task_paramiP13HighLevelNode+0x217>
        State state1a = getState(i, solution, t);
  4107bb:	48 89 da             	mov    %rbx,%rdx
  4107be:	4c 89 f6             	mov    %r14,%rsi
  4107c1:	31 ff                	xor    %edi,%edi
  4107c3:	ff d5                	callq  *%rbp
  4107c5:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  4107cc:	00 
  4107cd:	48 c1 e8 20          	shr    $0x20,%rax
  4107d1:	89 94 24 90 00 00 00 	mov    %edx,0x90(%rsp)
  4107d8:	48 89 04 24          	mov    %rax,(%rsp)
  4107dc:	48 8d 43 01          	lea    0x1(%rbx),%rax
  4107e0:	41 89 d7             	mov    %edx,%r15d
        State state1b = getState(i, solution, t + 1);
  4107e3:	4c 89 f6             	mov    %r14,%rsi
  4107e6:	31 ff                	xor    %edi,%edi
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  4107e8:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        State state1b = getState(i, solution, t + 1);
  4107ee:	48 89 c2             	mov    %rax,%rdx
  4107f1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4107f6:	ff d5                	callq  *%rbp
  4107f8:	48 89 84 24 94 00 00 	mov    %rax,0x94(%rsp)
  4107ff:	00 
  410800:	48 c1 e8 20          	shr    $0x20,%rax
  410804:	89 94 24 9c 00 00 00 	mov    %edx,0x9c(%rsp)
  41080b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  410810:	89 d1                	mov    %edx,%ecx
  410812:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  410817:	4d 8d 5d ff          	lea    -0x1(%r13),%r11
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  41081b:	4c 89 eb             	mov    %r13,%rbx
  41081e:	4c 89 6c 24 58       	mov    %r13,0x58(%rsp)
  410823:	49 89 ed             	mov    %rbp,%r13
  410826:	eb 16                	jmp    41083e <_Z19main_loop_task_paramiP13HighLevelNode+0x7ee>
  410828:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41082f:	00 
  410830:	48 83 c3 01          	add    $0x1,%rbx
  410834:	48 83 fb 14          	cmp    $0x14,%rbx
  410838:	0f 84 b7 02 00 00    	je     410af5 <_Z19main_loop_task_paramiP13HighLevelNode+0xaa5>
          State state2a = getState(j, solution, t);
  41083e:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  410843:	4c 89 5c 24 68       	mov    %r11,0x68(%rsp)
  410848:	4c 89 f6             	mov    %r14,%rsi
  41084b:	89 4c 24 60          	mov    %ecx,0x60(%rsp)
  41084f:	48 89 df             	mov    %rbx,%rdi
  410852:	41 ff d5             	callq  *%r13
          State state2b = getState(j, solution, t + 1);
  410855:	48 89 df             	mov    %rbx,%rdi
          State state2a = getState(j, solution, t);
  410858:	89 94 24 d8 00 00 00 	mov    %edx,0xd8(%rsp)
  41085f:	89 d5                	mov    %edx,%ebp
  410861:	48 89 84 24 d0 00 00 	mov    %rax,0xd0(%rsp)
  410868:	00 
          State state2b = getState(j, solution, t + 1);
  410869:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  41086e:	4c 89 f6             	mov    %r14,%rsi
  410871:	41 ff d5             	callq  *%r13
  410874:	48 89 c7             	mov    %rax,%rdi
  410877:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  41087e:	00 
  41087f:	8b 4c 24 60          	mov    0x60(%rsp),%ecx
  410883:	48 c1 ef 20          	shr    $0x20,%rdi
  410887:	3b 3c 24             	cmp    (%rsp),%edi
  41088a:	89 94 24 08 01 00 00 	mov    %edx,0x108(%rsp)
  410891:	4c 8b 5c 24 68       	mov    0x68(%rsp),%r11
  410896:	75 98                	jne    410830 <_Z19main_loop_task_paramiP13HighLevelNode+0x7e0>
  410898:	44 39 fa             	cmp    %r15d,%edx
  41089b:	75 93                	jne    410830 <_Z19main_loop_task_paramiP13HighLevelNode+0x7e0>
  41089d:	8b 44 24 10          	mov    0x10(%rsp),%eax
  4108a1:	39 84 24 d4 00 00 00 	cmp    %eax,0xd4(%rsp)
  4108a8:	75 86                	jne    410830 <_Z19main_loop_task_paramiP13HighLevelNode+0x7e0>
          if (state1a.equalExceptTime(state2b) &&
  4108aa:	39 cd                	cmp    %ecx,%ebp
  4108ac:	75 82                	jne    410830 <_Z19main_loop_task_paramiP13HighLevelNode+0x7e0>
  4108ae:	89 c7                	mov    %eax,%edi
            result.time = t;
  4108b0:	8b 44 24 38          	mov    0x38(%rsp),%eax
            result.agent2 = j;
  4108b4:	48 89 9c 24 b0 00 00 	mov    %rbx,0xb0(%rsp)
  4108bb:	00 
            result.x1 = state1a.x;
  4108bc:	8b 1c 24             	mov    (%rsp),%ebx
            result.x2 = state1b.x;
  4108bf:	89 bc 24 c4 00 00 00 	mov    %edi,0xc4(%rsp)
    } else if (conflict.type == Conflict::Edge) {
      Constraints c1;
      c1.add(EdgeConstraint(
          conflict.time, conflict.x1, conflict.y1, conflict.x2, conflict.y2));
      constraints[conflict.agent1] = c1;
  4108c6:	48 bd a0 08 df ff ff 	movabs $0xffffffffffdf08a0,%rbp
  4108cd:	ff ff ff 
  4108d0:	41 89 cd             	mov    %ecx,%r13d
            result.agent1 = i;
  4108d3:	4c 89 9c 24 a8 00 00 	mov    %r11,0xa8(%rsp)
  4108da:	00 
            result.type = Conflict::Edge;
  4108db:	c7 84 24 b8 00 00 00 	movl   $0x1,0xb8(%rsp)
  4108e2:	01 00 00 00 
            result.time = t;
  4108e6:	89 84 24 a0 00 00 00 	mov    %eax,0xa0(%rsp)
	    this->_M_header._M_left = &this->_M_header;
  4108ed:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
  4108f4:	00 
            result.y1 = state1a.y;
  4108f5:	44 89 bc 24 c0 00 00 	mov    %r15d,0xc0(%rsp)
  4108fc:	00 
            result.x1 = state1a.x;
  4108fd:	89 9c 24 bc 00 00 00 	mov    %ebx,0xbc(%rsp)
      constraints[conflict.agent1] = c1;
  410904:	48 8d 9c 24 a0 00 00 	lea    0xa0(%rsp),%rbx
  41090b:	00 
            result.y2 = state1b.y;
  41090c:	89 8c 24 c8 00 00 00 	mov    %ecx,0xc8(%rsp)
  410913:	48 89 c7             	mov    %rax,%rdi
  410916:	48 8d 84 24 d8 00 00 	lea    0xd8(%rsp),%rax
  41091d:	00 
	    _M_node_count(0)
  41091e:	c7 84 24 d8 00 00 00 	movl   $0x0,0xd8(%rsp)
  410925:	00 00 00 00 
  410929:	48 c7 84 24 e0 00 00 	movq   $0x0,0xe0(%rsp)
  410930:	00 00 00 00 00 
  410935:	48 c7 84 24 f8 00 00 	movq   $0x0,0xf8(%rsp)
  41093c:	00 00 00 00 00 
      constraints[conflict.agent1] = c1;
  410941:	48 8d 73 08          	lea    0x8(%rbx),%rsi
	    this->_M_header._M_left = &this->_M_header;
  410945:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  41094c:	00 
	    this->_M_header._M_right = &this->_M_header;
  41094d:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  410954:	00 
  410955:	4a 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%rax
  41095a:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41095f:	ff d0                	callq  *%rax
  410961:	8b 74 24 38          	mov    0x38(%rsp),%esi
  410965:	44 89 b8 60 02 00 00 	mov    %r15d,0x260(%rax)
  41096c:	44 89 a8 68 02 00 00 	mov    %r13d,0x268(%rax)
  410973:	c7 80 40 06 00 00 00 	movl   $0x0,0x640(%rax)
  41097a:	00 00 00 
  41097d:	c7 80 44 06 00 00 01 	movl   $0x1,0x644(%rax)
  410984:	00 00 00 
      Constraints c2;
      c2.add(EdgeConstraint(
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
  410987:	44 8b ac 24 c8 00 00 	mov    0xc8(%rsp),%r13d
  41098e:	00 
      constraints[conflict.agent1] = c1;
  41098f:	89 b0 58 02 00 00    	mov    %esi,0x258(%rax)
  410995:	8b 34 24             	mov    (%rsp),%esi
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
  410998:	44 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%r15d
  41099f:	00 
      constraints[conflict.agent2] = c2;
  4109a0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
      constraints[conflict.agent1] = c1;
  4109a5:	89 b0 5c 02 00 00    	mov    %esi,0x25c(%rax)
  4109ab:	8b 74 24 10          	mov    0x10(%rsp),%esi
  4109af:	89 b0 64 02 00 00    	mov    %esi,0x264(%rax)
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
  4109b5:	8b b4 24 c0 00 00 00 	mov    0xc0(%rsp),%esi
      constraints[conflict.agent2] = c2;
  4109bc:	4a 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%rax
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
  4109c1:	89 74 24 38          	mov    %esi,0x38(%rsp)
  4109c5:	8b b4 24 bc 00 00 00 	mov    0xbc(%rsp),%esi
  4109cc:	89 34 24             	mov    %esi,(%rsp)
  4109cf:	8b b4 24 c4 00 00 00 	mov    0xc4(%rsp),%esi
  4109d6:	89 74 24 10          	mov    %esi,0x10(%rsp)
      constraints[conflict.agent2] = c2;
  4109da:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  4109de:	ff d0                	callq  *%rax
  4109e0:	8b 5c 24 10          	mov    0x10(%rsp),%ebx
  4109e4:	44 89 b8 58 02 00 00 	mov    %r15d,0x258(%rax)
  4109eb:	44 89 a8 60 02 00 00 	mov    %r13d,0x260(%rax)
  4109f2:	c7 80 40 06 00 00 00 	movl   $0x0,0x640(%rax)
  4109f9:	00 00 00 
  4109fc:	c7 80 44 06 00 00 01 	movl   $0x1,0x644(%rax)
  410a03:	00 00 00 
  410a06:	89 98 5c 02 00 00    	mov    %ebx,0x25c(%rax)
  410a0c:	8b 1c 24             	mov    (%rsp),%ebx
  410a0f:	89 98 64 02 00 00    	mov    %ebx,0x264(%rax)
  410a15:	8b 5c 24 38          	mov    0x38(%rsp),%ebx
  410a19:	89 98 68 02 00 00    	mov    %ebx,0x268(%rax)
  410a1f:	e9 96 f9 ff ff       	jmpq   4103ba <_Z19main_loop_task_paramiP13HighLevelNode+0x36a>
  410a24:	0f 1f 40 00          	nopl   0x0(%rax)
					found_same_key = true;
					break;
				}
			}
			if (!found_same_key) { // Not found
				edgeConstraints[edgeConstraints_size] = other.edgeConstraints[i];
  410a28:	48 63 c1             	movslq %ecx,%rax
  410a2b:	48 8b 17             	mov    (%rdi),%rdx
				edgeConstraints_size++;
  410a2e:	83 c1 01             	add    $0x1,%ecx
				edgeConstraints[edgeConstraints_size] = other.edgeConstraints[i];
  410a31:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  410a35:	49 8d 04 82          	lea    (%r10,%rax,4),%rax
  410a39:	48 8d 84 03 90 80 00 	lea    0x8090(%rbx,%rax,1),%rax
  410a40:	00 
  410a41:	48 89 50 08          	mov    %rdx,0x8(%rax)
  410a45:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  410a49:	48 89 50 10          	mov    %rdx,0x10(%rax)
  410a4d:	8b 57 10             	mov    0x10(%rdi),%edx
  410a50:	89 50 18             	mov    %edx,0x18(%rax)
				edgeConstraints_size++;
  410a53:	89 8e 84 84 00 00    	mov    %ecx,0x8484(%rsi)
  410a59:	e9 d2 fb ff ff       	jmpq   410630 <_Z19main_loop_task_paramiP13HighLevelNode+0x5e0>
  410a5e:	66 90                	xchg   %ax,%ax
				vertexConstraints[vertexConstraints_size] = other.vertexConstraints[i];
  410a60:	48 63 c1             	movslq %ecx,%rax
  410a63:	49 8b 11             	mov    (%r9),%rdx
				vertexConstraints_size++;
  410a66:	83 c1 01             	add    $0x1,%ecx
				vertexConstraints[vertexConstraints_size] = other.vertexConstraints[i];
  410a69:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
  410a6d:	49 8d 04 82          	lea    (%r10,%rax,4),%rax
  410a71:	48 01 d8             	add    %rbx,%rax
  410a74:	48 89 90 40 7e 00 00 	mov    %rdx,0x7e40(%rax)
  410a7b:	41 8b 51 08          	mov    0x8(%r9),%edx
  410a7f:	89 90 48 7e 00 00    	mov    %edx,0x7e48(%rax)
				vertexConstraints_size++;
  410a85:	89 8e 80 84 00 00    	mov    %ecx,0x8480(%rsi)
  410a8b:	e9 fb fa ff ff       	jmpq   41058b <_Z19main_loop_task_paramiP13HighLevelNode+0x53b>
  410a90:	49 ba 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%r10
  410a97:	ff ff ff 
  410a9a:	41 b9 40 00 00 00    	mov    $0x40,%r9d
  410aa0:	4c 8b 44 24 78       	mov    0x78(%rsp),%r8
  410aa5:	b9 00 04 00 00       	mov    $0x400,%ecx
  410aaa:	ba 01 00 00 00       	mov    $0x1,%edx
  410aaf:	be ff 03 00 00       	mov    $0x3ff,%esi
  410ab4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  410ab9:	4d 89 e7             	mov    %r12,%r15
  410abc:	31 c0                	xor    %eax,%eax
  410abe:	4d 01 e2             	add    %r12,%r10
  410ac1:	41 ff d2             	callq  *%r10
  410ac4:	b9 05 04 00 00       	mov    $0x405,%ecx
  410ac9:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  410ace:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  410ad1:	45 8b 86 4c 00 01 00 	mov    0x1004c(%r14),%r8d
  410ad8:	e9 64 fb ff ff       	jmpq   410641 <_Z19main_loop_task_paramiP13HighLevelNode+0x5f1>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410add:	48 b8 8d 7e df ff ff 	movabs $0xffffffffffdf7e8d,%rax
  410ae4:	ff ff ff 
  410ae7:	b9 05 04 00 00       	mov    $0x405,%ecx
  410aec:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  410af0:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  410af3:	eb fe                	jmp    410af3 <_Z19main_loop_task_paramiP13HighLevelNode+0xaa3>
        State state1a = getState(i, solution, t);
  410af5:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  410afa:	4c 89 ed             	mov    %r13,%rbp
  410afd:	4c 8b 6c 24 58       	mov    0x58(%rsp),%r13
  410b02:	4c 89 f6             	mov    %r14,%rsi
  410b05:	4c 89 ef             	mov    %r13,%rdi
  410b08:	ff d5                	callq  *%rbp
  410b0a:	89 94 24 90 00 00 00 	mov    %edx,0x90(%rsp)
  410b11:	41 89 d7             	mov    %edx,%r15d
        State state1b = getState(i, solution, t + 1);
  410b14:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
        State state1a = getState(i, solution, t);
  410b19:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  410b20:	00 
        State state1b = getState(i, solution, t + 1);
  410b21:	4c 89 ef             	mov    %r13,%rdi
        State state1a = getState(i, solution, t);
  410b24:	48 c1 e8 20          	shr    $0x20,%rax
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  410b28:	49 83 c5 01          	add    $0x1,%r13
        State state1a = getState(i, solution, t);
  410b2c:	48 89 04 24          	mov    %rax,(%rsp)
        State state1b = getState(i, solution, t + 1);
  410b30:	4c 89 f6             	mov    %r14,%rsi
  410b33:	ff d5                	callq  *%rbp
  410b35:	48 89 84 24 94 00 00 	mov    %rax,0x94(%rsp)
  410b3c:	00 
  410b3d:	48 c1 e8 20          	shr    $0x20,%rax
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  410b41:	49 83 fd 14          	cmp    $0x14,%r13
        State state1b = getState(i, solution, t + 1);
  410b45:	89 94 24 9c 00 00 00 	mov    %edx,0x9c(%rsp)
  410b4c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  410b51:	89 d1                	mov    %edx,%ecx
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  410b53:	0f 85 be fc ff ff    	jne    410817 <_Z19main_loop_task_paramiP13HighLevelNode+0x7c7>
  410b59:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
    for (int t = 0; t < max_t; ++t) {
  410b5e:	39 5c 24 3c          	cmp    %ebx,0x3c(%rsp)
  410b62:	0f 8f c6 f6 ff ff    	jg     41022e <_Z19main_loop_task_paramiP13HighLevelNode+0x1de>
  410b68:	41 8b 86 40 00 01 00 	mov    0x10040(%r14),%eax
  410b6f:	48 8d 9c 24 00 01 00 	lea    0x100(%rsp),%rbx
  410b76:	00 
  410b77:	48 83 ec 08          	sub    $0x8,%rsp
  410b7b:	49 ba 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%r10
  410b82:	ff ff ff 
  410b85:	b9 00 04 00 00       	mov    $0x400,%ecx
  410b8a:	ba 01 00 00 00       	mov    $0x1,%edx
  410b8f:	be ff 03 00 00       	mov    $0x3ff,%esi
  410b94:	48 89 df             	mov    %rbx,%rdi
  410b97:	4d 89 e7             	mov    %r12,%r15
  410b9a:	50                   	push   %rax
  410b9b:	48 b8 c0 7b df ff ff 	movabs $0xffffffffffdf7bc0,%rax
  410ba2:	ff ff ff 
  410ba5:	44 8b 4c 24 38       	mov    0x38(%rsp),%r9d
  410baa:	4d 8d 04 04          	lea    (%r12,%rax,1),%r8
  410bae:	4d 01 e2             	add    %r12,%r10
  410bb1:	31 c0                	xor    %eax,%eax
  410bb3:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410bb6:	b9 05 04 00 00       	mov    $0x405,%ecx
  410bbb:	48 89 df             	mov    %rbx,%rdi
  410bbe:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  410bc1:	58                   	pop    %rax
  410bc2:	5a                   	pop    %rdx
  410bc3:	48 ba 80 d2 9b 3b 00 	movabs $0x3b9bd280,%rdx
  410bca:	00 00 00 
  410bcd:	31 c0                	xor    %eax,%eax
				 g_solution[i] = P->solution[i];
  410bcf:	4c 01 e2             	add    %r12,%rdx
  410bd2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  410bd8:	48 8d 3c 10          	lea    (%rax,%rdx,1),%rdi
  410bdc:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
  410be0:	b9 c9 00 00 00       	mov    $0xc9,%ecx
  410be5:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  410be8:	48 05 50 06 00 00    	add    $0x650,%rax
			 for(int i = 0; i < ROBOT_NUMS; ++i) {
  410bee:	48 3d 40 7e 00 00    	cmp    $0x7e40,%rax
				 g_solution[i] = P->solution[i];
  410bf4:	0f b6 0e             	movzbl (%rsi),%ecx
  410bf7:	88 0f                	mov    %cl,(%rdi)
			 for(int i = 0; i < ROBOT_NUMS; ++i) {
  410bf9:	75 dd                	jne    410bd8 <_Z19main_loop_task_paramiP13HighLevelNode+0xb88>
			 g_isNoConflict = true;
  410bfb:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  410c00:	42 c6 04 20 01       	movb   $0x1,(%rax,%r12,1)
			 return;
  410c05:	e9 59 fb ff ff       	jmpq   410763 <_Z19main_loop_task_paramiP13HighLevelNode+0x713>
			 if(new_nodeid > MAX_NODE_NUMS) {
  410c0a:	89 4c 24 38          	mov    %ecx,0x38(%rsp)
  410c0e:	41 89 c9             	mov    %ecx,%r9d
  410c11:	48 8d 9c 24 00 01 00 	lea    0x100(%rsp),%rbx
  410c18:	00 
  410c19:	48 b8 70 7b df ff ff 	movabs $0xffffffffffdf7b70,%rax
  410c20:	ff ff ff 
  410c23:	49 ba 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%r10
  410c2a:	ff ff ff 
  410c2d:	4d 8d 04 04          	lea    (%r12,%rax,1),%r8
  410c31:	b9 00 04 00 00       	mov    $0x400,%ecx
  410c36:	ba 01 00 00 00       	mov    $0x1,%edx
  410c3b:	be ff 03 00 00       	mov    $0x3ff,%esi
  410c40:	48 89 df             	mov    %rbx,%rdi
  410c43:	4d 89 e7             	mov    %r12,%r15
  410c46:	31 c0                	xor    %eax,%eax
  410c48:	4d 01 e2             	add    %r12,%r10
  410c4b:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410c4e:	b9 05 04 00 00       	mov    $0x405,%ecx
  410c53:	48 89 df             	mov    %rbx,%rdi
  410c56:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  410c59:	eb fe                	jmp    410c59 <_Z19main_loop_task_paramiP13HighLevelNode+0xc09>
  410c5b:	48 8b 9c 24 e0 00 00 	mov    0xe0(%rsp),%rbx
  410c62:	00 
     free(newNodee);
  410c63:	48 b8 30 76 df ff ff 	movabs $0xffffffffffdf7630,%rax
  410c6a:	ff ff ff 
  410c6d:	4c 89 f7             	mov    %r14,%rdi
  410c70:	4c 01 e0             	add    %r12,%rax
  410c73:	4d 89 e7             	mov    %r12,%r15
  410c76:	ff d0                	callq  *%rax
      { _M_erase(_M_begin()); }
  410c78:	48 b8 70 e8 de ff ff 	movabs $0xffffffffffdee870,%rax
  410c7f:	ff ff ff 
  410c82:	48 89 de             	mov    %rbx,%rsi
  410c85:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  410c8a:	4c 01 e0             	add    %r12,%rax
  410c8d:	ff d0                	callq  *%rax
  410c8f:	e9 cf fa ff ff       	jmpq   410763 <_Z19main_loop_task_paramiP13HighLevelNode+0x713>
  410c94:	48 89 c3             	mov    %rax,%rbx
  410c97:	48 b8 70 e8 de ff ff 	movabs $0xffffffffffdee870,%rax
  410c9e:	ff ff ff 
  410ca1:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  410ca6:	4c 01 e0             	add    %r12,%rax
  410ca9:	48 8b b4 24 e0 00 00 	mov    0xe0(%rsp),%rsi
  410cb0:	00 
  410cb1:	4d 89 e7             	mov    %r12,%r15
  410cb4:	ff d0                	callq  *%rax
  410cb6:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  410cbd:	ff ff ff 
  410cc0:	48 89 df             	mov    %rbx,%rdi
  410cc3:	4c 01 e0             	add    %r12,%rax
  410cc6:	ff d0                	callq  *%rax
  410cc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  410ccf:	00 

0000000000410cd0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult>:
}
#endif

#if 1
  bool astar_search(LowLevelEnvironment& m_env, float m_w, 
			const State& startState, PlanResult& solution) {
  410cd0:	55                   	push   %rbp
  410cd1:	48 8d 05 f8 ff ff ff 	lea    -0x8(%rip),%rax        # 410cd0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult>
  410cd8:	49 bb 30 a3 21 00 00 	movabs $0x21a330,%r11
  410cdf:	00 00 00 
  410ce2:	48 89 e5             	mov    %rsp,%rbp
  410ce5:	41 57                	push   %r15
  410ce7:	41 56                	push   %r14
  410ce9:	41 55                	push   %r13
  410ceb:	41 54                	push   %r12
  410ced:	4c 01 d8             	add    %r11,%rax
  410cf0:	53                   	push   %rbx
  410cf1:	49 89 c7             	mov    %rax,%r15
  410cf4:	48 81 ec 38 06 00 00 	sub    $0x638,%rsp
  410cfb:	48 89 85 48 fa ff ff 	mov    %rax,-0x5b8(%rbp)
  410d02:	48 89 f0             	mov    %rsi,%rax
		cost = 0;
  410d05:	c7 82 10 06 00 00 00 	movl   $0x0,0x610(%rdx)
  410d0c:	00 00 00 
		fmin = 0;
  410d0f:	c7 82 14 06 00 00 00 	movl   $0x0,0x614(%rdx)
  410d16:	00 00 00 
  410d19:	48 89 c3             	mov    %rax,%rbx
  410d1c:	8b 08                	mov    (%rax),%ecx
		actions_size = 0;
  410d1e:	48 c7 82 08 06 00 00 	movq   $0x0,0x608(%rdx)
  410d25:	00 00 00 00 
  410d29:	f3 0f 11 85 28 fa ff 	movss  %xmm0,-0x5d8(%rbp)
  410d30:	ff 
  410d31:	48 89 b5 b8 f9 ff ff 	mov    %rsi,-0x648(%rbp)
  410d38:	48 89 95 08 fa ff ff 	mov    %rdx,-0x5f8(%rbp)
  410d3f:	48 89 d6             	mov    %rdx,%rsi
  410d42:	8b 50 04             	mov    0x4(%rax),%edx
  410d45:	8b 40 08             	mov    0x8(%rax),%eax
  410d48:	48 89 bd e0 f9 ff ff 	mov    %rdi,-0x620(%rbp)
			states[states_size] = s;
  410d4f:	89 0e                	mov    %ecx,(%rsi)
  410d51:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%rsi)
  410d58:	89 56 04             	mov    %edx,0x4(%rsi)
			states_size++;
  410d5b:	48 c7 86 00 04 00 00 	movq   $0x1,0x400(%rsi)
  410d62:	01 00 00 00 
			states[states_size] = s;
  410d66:	89 46 08             	mov    %eax,0x8(%rsi)
  410d69:	48 8d 85 10 fb ff ff 	lea    -0x4f0(%rbp),%rax
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  410d70:	48 c7 85 70 fa ff ff 	movq   $0x0,-0x590(%rbp)
  410d77:	00 00 00 00 
  410d7b:	48 c7 85 78 fa ff ff 	movq   $0x0,-0x588(%rbp)
  410d82:	00 00 00 00 
  410d86:	48 c7 85 80 fa ff ff 	movq   $0x0,-0x580(%rbp)
  410d8d:	00 00 00 00 
  410d91:	48 89 85 38 fa ff ff 	mov    %rax,-0x5c8(%rbp)
  410d98:	49 89 c6             	mov    %rax,%r14
  410d9b:	48 83 c0 30          	add    $0x30,%rax
  410d9f:	48 89 85 10 fb ff ff 	mov    %rax,-0x4f0(%rbp)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  410da6:	48 b8 38 93 df ff ff 	movabs $0xffffffffffdf9338,%rax
  410dad:	ff ff ff 
  410db0:	48 c7 85 90 fa ff ff 	movq   $0x0,-0x570(%rbp)
  410db7:	00 00 00 00 
  410dbb:	48 c7 85 98 fa ff ff 	movq   $0x0,-0x568(%rbp)
  410dc2:	00 00 00 00 
  410dc6:	48 c7 85 a0 fa ff ff 	movq   $0x0,-0x560(%rbp)
  410dcd:	00 00 00 00 
  410dd1:	48 c7 85 18 fb ff ff 	movq   $0x1,-0x4e8(%rbp)
  410dd8:	01 00 00 00 
    _Hash_node_base() noexcept : _M_nxt() { }
  410ddc:	48 c7 85 20 fb ff ff 	movq   $0x0,-0x4e0(%rbp)
  410de3:	00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  410de7:	f3 41 0f 10 04 07    	movss  (%r15,%rax,1),%xmm0
  410ded:	48 8d 85 50 fb ff ff 	lea    -0x4b0(%rbp),%rax
      { return *(this->_M_impl._M_start + __n); }
  410df4:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  410df8:	8b 4b 08             	mov    0x8(%rbx),%ecx
  410dfb:	48 c7 85 28 fb ff ff 	movq   $0x0,-0x4d8(%rbp)
  410e02:	00 00 00 00 
  410e06:	f3 0f 11 85 30 fb ff 	movss  %xmm0,-0x4d0(%rbp)
  410e0d:	ff 
  410e0e:	48 89 85 e8 f9 ff ff 	mov    %rax,-0x618(%rbp)
  410e15:	48 83 c0 30          	add    $0x30,%rax
  410e19:	48 c7 85 38 fb ff ff 	movq   $0x0,-0x4c8(%rbp)
  410e20:	00 00 00 00 
  410e24:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
  410e2b:	48 8d 85 90 fb ff ff 	lea    -0x470(%rbp),%rax
  410e32:	f3 0f 11 85 70 fb ff 	movss  %xmm0,-0x490(%rbp)
  410e39:	ff 
  410e3a:	48 c7 85 40 fb ff ff 	movq   $0x0,-0x4c0(%rbp)
  410e41:	00 00 00 00 
  410e45:	48 c7 85 58 fb ff ff 	movq   $0x1,-0x4a8(%rbp)
  410e4c:	01 00 00 00 
  410e50:	f3 0f 11 85 b0 fb ff 	movss  %xmm0,-0x450(%rbp)
  410e57:	ff 
  410e58:	48 89 85 00 fa ff ff 	mov    %rax,-0x600(%rbp)
  410e5f:	48 83 c0 30          	add    $0x30,%rax
  410e63:	48 89 85 90 fb ff ff 	mov    %rax,-0x470(%rbp)
  410e6a:	48 8b 07             	mov    (%rdi),%rax
  410e6d:	48 8d bd 70 fa ff ff 	lea    -0x590(%rbp),%rdi
    _Hash_node_base() noexcept : _M_nxt() { }
  410e74:	48 c7 85 60 fb ff ff 	movq   $0x0,-0x4a0(%rbp)
  410e7b:	00 00 00 00 
  410e7f:	48 c7 85 68 fb ff ff 	movq   $0x0,-0x498(%rbp)
  410e86:	00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  410e8a:	48 c7 85 78 fb ff ff 	movq   $0x0,-0x488(%rbp)
  410e91:	00 00 00 00 
  410e95:	48 c7 85 80 fb ff ff 	movq   $0x0,-0x480(%rbp)
  410e9c:	00 00 00 00 
  410ea0:	48 c7 85 98 fb ff ff 	movq   $0x1,-0x468(%rbp)
  410ea7:	01 00 00 00 
  410eab:	48 8b 00             	mov    (%rax),%rax
    _Hash_node_base() noexcept : _M_nxt() { }
  410eae:	48 c7 85 a0 fb ff ff 	movq   $0x0,-0x460(%rbp)
  410eb5:	00 00 00 00 
  410eb9:	48 c7 85 a8 fb ff ff 	movq   $0x0,-0x458(%rbp)
  410ec0:	00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  410ec4:	48 c7 85 b8 fb ff ff 	movq   $0x0,-0x448(%rbp)
  410ecb:	00 00 00 00 
  410ecf:	48 c7 85 c0 fb ff ff 	movq   $0x0,-0x440(%rbp)
  410ed6:	00 00 00 00 
  410eda:	48 8d 34 d0          	lea    (%rax,%rdx,8),%rsi
  410ede:	89 c8                	mov    %ecx,%eax
  410ee0:	2b 46 04             	sub    0x4(%rsi),%eax
  410ee3:	99                   	cltd   
  410ee4:	31 d0                	xor    %edx,%eax
  410ee6:	29 d0                	sub    %edx,%eax
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  410ee8:	8b 53 04             	mov    0x4(%rbx),%edx
  410eeb:	2b 16                	sub    (%rsi),%edx
		stat(0) {}
  410eed:	89 8d d8 fb ff ff    	mov    %ecx,-0x428(%rbp)
  410ef3:	89 d6                	mov    %edx,%esi
  410ef5:	c1 fe 1f             	sar    $0x1f,%esi
  410ef8:	31 f2                	xor    %esi,%edx
  410efa:	29 f2                	sub    %esi,%edx
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  410efc:	01 d0                	add    %edx,%eax
  410efe:	48 8b 13             	mov    (%rbx),%rdx
  410f01:	89 85 dc fb ff ff    	mov    %eax,-0x424(%rbp)
  410f07:	48 8d 85 d0 fb ff ff 	lea    -0x430(%rbp),%rax
  410f0e:	48 89 95 d0 fb ff ff 	mov    %rdx,-0x430(%rbp)
  410f15:	49 89 c4             	mov    %rax,%r12
  410f18:	c7 85 e0 fb ff ff 00 	movl   $0x0,-0x420(%rbp)
  410f1f:	00 00 00 
  410f22:	48 89 c6             	mov    %rax,%rsi
  410f25:	48 89 85 20 fa ff ff 	mov    %rax,-0x5e0(%rbp)
  410f2c:	48 b8 90 f1 de ff ff 	movabs $0xffffffffffdef190,%rax
  410f33:	ff ff ff 
  410f36:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%rbp)
  410f3d:	00 00 00 
  410f40:	c7 85 e8 fb ff ff 00 	movl   $0x0,-0x418(%rbp)
  410f47:	00 00 00 
  410f4a:	4c 01 f8             	add    %r15,%rax
  410f4d:	48 89 bd d0 f9 ff ff 	mov    %rdi,-0x630(%rbp)
  410f54:	ff d0                	callq  *%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  410f56:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  410f5d:	48 2b 85 70 fa ff ff 	sub    -0x590(%rbp),%rax
	  return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
  410f64:	48 83 ec 08          	sub    $0x8,%rsp
        cameFrom;

    openSet.push_back(
        AstarNode(startState, m_env.admissibleHeuristic(startState), 0, 0));
		int index = openSet.size() - 1;
    stateToHeap.insert(std::make_pair<>(startState, index));
  410f68:	8b 33                	mov    (%rbx),%esi
      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }
  410f6a:	8b 4b 04             	mov    0x4(%rbx),%ecx
  410f6d:	4c 89 f7             	mov    %r14,%rdi
  410f70:	8b 53 08             	mov    0x8(%rbx),%edx
  410f73:	6a 00                	pushq  $0x0
  410f75:	48 c1 f8 02          	sar    $0x2,%rax
  410f79:	89 b5 d0 fb ff ff    	mov    %esi,-0x430(%rbp)
  410f7f:	89 8d d4 fb ff ff    	mov    %ecx,-0x42c(%rbp)
  410f85:	69 c0 49 92 24 49    	imul   $0x49249249,%eax,%eax
  410f8b:	89 95 d8 fb ff ff    	mov    %edx,-0x428(%rbp)
  410f91:	4c 89 e6             	mov    %r12,%rsi
		int index = openSet.size() - 1;
  410f94:	f7 d0                	not    %eax
  410f96:	89 85 5c fa ff ff    	mov    %eax,-0x5a4(%rbp)
    stateToHeap.insert(std::make_pair<>(startState, index));
  410f9c:	89 85 dc fb ff ff    	mov    %eax,-0x424(%rbp)
  410fa2:	48 b8 f0 21 df ff ff 	movabs $0xffffffffffdf21f0,%rax
  410fa9:	ff ff ff 
  410fac:	4c 01 f8             	add    %r15,%rax
  410faf:	ff d0                	callq  *%rax
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  410fb1:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  410fb8:	48 3b 85 a0 fa ff ff 	cmp    -0x560(%rbp),%rax
  410fbf:	41 5a                	pop    %r10
  410fc1:	41 5b                	pop    %r11
  410fc3:	0f 84 b2 1a 00 00    	je     412a7b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1dab>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  410fc9:	48 85 c0             	test   %rax,%rax
  410fcc:	8b 95 5c fa ff ff    	mov    -0x5a4(%rbp),%edx
  410fd2:	74 02                	je     410fd6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x306>
  410fd4:	89 10                	mov    %edx,(%rax)
	    ++this->_M_impl._M_finish;
  410fd6:	48 83 c0 04          	add    $0x4,%rax
  410fda:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
    //(*handle).handle = handle;

    focalSet.push_back(index);

    std::vector<Neighbor<State, Action, Cost> > neighbors;
    neighbors.reserve(10);
  410fe1:	48 8d 85 b0 fa ff ff 	lea    -0x550(%rbp),%rax
  410fe8:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  410fef:	48 c7 85 b0 fa ff ff 	movq   $0x0,-0x550(%rbp)
  410ff6:	00 00 00 00 
  410ffa:	48 c7 85 b8 fa ff ff 	movq   $0x0,-0x548(%rbp)
  411001:	00 00 00 00 
  411005:	48 c7 85 c0 fa ff ff 	movq   $0x0,-0x540(%rbp)
  41100c:	00 00 00 00 
  411010:	be 0a 00 00 00       	mov    $0xa,%esi
  411015:	48 89 85 b0 f9 ff ff 	mov    %rax,-0x650(%rbp)
  41101c:	48 89 c7             	mov    %rax,%rdi
  41101f:	48 b8 40 be de ff ff 	movabs $0xffffffffffdebe40,%rax
  411026:	ff ff ff 
  411029:	4c 01 f8             	add    %r15,%rax
  41102c:	ff d0                	callq  *%rax

    Cost bestFScore = openSet[focalSet[0]].fScore;
  41102e:	48 8b 85 90 fa ff ff 	mov    -0x570(%rbp),%rax
  411035:	48 8b 9d 70 fa ff ff 	mov    -0x590(%rbp),%rbx
  41103c:	48 63 10             	movslq (%rax),%rdx
  41103f:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  411046:	00 
  411047:	48 29 d0             	sub    %rdx,%rax
  41104a:	44 8b 6c 83 0c       	mov    0xc(%rbx,%rax,4),%r13d
  41104f:	48 8d 85 90 fa ff ff 	lea    -0x570(%rbp),%rax
  411056:	48 89 85 c8 f9 ff ff 	mov    %rax,-0x638(%rbp)
  41105d:	48 b8 40 f3 de ff ff 	movabs $0xffffffffffdef340,%rax
  411064:	ff ff ff 
  411067:	4c 01 f8             	add    %r15,%rax
  41106a:	48 89 85 c0 f9 ff ff 	mov    %rax,-0x640(%rbp)
  411071:	4c 8b a5 78 fa ff ff 	mov    -0x588(%rbp),%r12
	for (; iter != iterEnd; ++iter) {
  411078:	49 39 dc             	cmp    %rbx,%r12
  41107b:	74 29                	je     4110a6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3d6>
		if(iter->stat == 0)
  41107d:	44 8b 4b 18          	mov    0x18(%rbx),%r9d
  411081:	48 8d 43 1c          	lea    0x1c(%rbx),%rax
  411085:	45 85 c9             	test   %r9d,%r9d
  411088:	75 17                	jne    4110a1 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3d1>
  41108a:	e9 80 02 00 00       	jmpq   41130f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x63f>
  41108f:	90                   	nop
  411090:	48 83 c0 1c          	add    $0x1c,%rax
  411094:	44 8b 40 fc          	mov    -0x4(%rax),%r8d
  411098:	45 85 c0             	test   %r8d,%r8d
  41109b:	0f 84 6e 02 00 00    	je     41130f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x63f>
	for (; iter != iterEnd; ++iter) {
  4110a1:	49 39 c4             	cmp    %rax,%r12
  4110a4:	75 ea                	jne    411090 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3c0>
                                tentative_gScore)));
        }
      }
    }

    return false;
  4110a6:	45 31 ed             	xor    %r13d,%r13d
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4110a9:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
	if (__p)
  4110b0:	48 85 ff             	test   %rdi,%rdi
  4110b3:	74 19                	je     4110ce <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3fe>
      { ::operator delete(__p); }
  4110b5:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  4110bc:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  4110c3:	ff ff ff 
  4110c6:	49 89 c7             	mov    %rax,%r15
  4110c9:	48 01 c3             	add    %rax,%rbx
  4110cc:	ff d3                	callq  *%rbx
  4110ce:	48 8b bd a0 fb ff ff 	mov    -0x460(%rbp),%rdi
  4110d5:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  4110dc:	ff ff ff 
  4110df:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
      while (__n)
  4110e6:	48 85 ff             	test   %rdi,%rdi
  4110e9:	74 14                	je     4110ff <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x42f>
  4110eb:	4c 8b 27             	mov    (%rdi),%r12
  4110ee:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  4110f5:	ff d3                	callq  *%rbx
  4110f7:	4d 85 e4             	test   %r12,%r12
  4110fa:	4c 89 e7             	mov    %r12,%rdi
  4110fd:	75 ec                	jne    4110eb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x41b>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  4110ff:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
  411106:	49 bc c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%r12
  41110d:	ff ff ff 
  411110:	31 f6                	xor    %esi,%esi
  411112:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
  411119:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  411120:	00 
  411121:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  411128:	49 89 c7             	mov    %rax,%r15
  41112b:	4c 01 e0             	add    %r12,%rax
  41112e:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  411130:	48 8b 85 00 fa ff ff 	mov    -0x600(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  411137:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
      _M_element_count = 0;
  41113e:	48 c7 85 a8 fb ff ff 	movq   $0x0,-0x458(%rbp)
  411145:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  411149:	48 c7 85 a0 fb ff ff 	movq   $0x0,-0x460(%rbp)
  411150:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  411154:	48 83 c0 30          	add    $0x30,%rax
  411158:	48 39 c7             	cmp    %rax,%rdi
  41115b:	74 19                	je     411176 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x4a6>
  41115d:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  411164:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  41116b:	ff ff ff 
  41116e:	49 89 c7             	mov    %rax,%r15
  411171:	48 01 c3             	add    %rax,%rbx
  411174:	ff d3                	callq  *%rbx
  411176:	48 8b bd 60 fb ff ff 	mov    -0x4a0(%rbp),%rdi
  41117d:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  411184:	ff ff ff 
  411187:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
  41118e:	48 85 ff             	test   %rdi,%rdi
  411191:	74 14                	je     4111a7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x4d7>
  411193:	4c 8b 37             	mov    (%rdi),%r14
  411196:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  41119d:	ff d3                	callq  *%rbx
  41119f:	4d 85 f6             	test   %r14,%r14
  4111a2:	4c 89 f7             	mov    %r14,%rdi
  4111a5:	75 ec                	jne    411193 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x4c3>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  4111a7:	48 8b 85 58 fb ff ff 	mov    -0x4a8(%rbp),%rax
  4111ae:	31 f6                	xor    %esi,%esi
  4111b0:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
  4111b7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4111be:	00 
  4111bf:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  4111c6:	49 89 c7             	mov    %rax,%r15
  4111c9:	4c 01 e0             	add    %r12,%rax
  4111cc:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  4111ce:	48 8b 85 e8 f9 ff ff 	mov    -0x618(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  4111d5:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
      _M_element_count = 0;
  4111dc:	48 c7 85 68 fb ff ff 	movq   $0x0,-0x498(%rbp)
  4111e3:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  4111e7:	48 c7 85 60 fb ff ff 	movq   $0x0,-0x4a0(%rbp)
  4111ee:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  4111f2:	48 83 c0 30          	add    $0x30,%rax
  4111f6:	48 39 c7             	cmp    %rax,%rdi
  4111f9:	74 19                	je     411214 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x544>
  4111fb:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  411202:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  411209:	ff ff ff 
  41120c:	49 89 c7             	mov    %rax,%r15
  41120f:	48 01 c3             	add    %rax,%rbx
  411212:	ff d3                	callq  *%rbx
  411214:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  41121b:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  411222:	ff ff ff 
  411225:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
  41122c:	48 85 ff             	test   %rdi,%rdi
  41122f:	74 14                	je     411245 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x575>
  411231:	4c 8b 37             	mov    (%rdi),%r14
  411234:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  41123b:	ff d3                	callq  *%rbx
  41123d:	4d 85 f6             	test   %r14,%r14
  411240:	4c 89 f7             	mov    %r14,%rdi
  411243:	75 ec                	jne    411231 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x561>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  411245:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
  41124c:	31 f6                	xor    %esi,%esi
  41124e:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
  411255:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  41125c:	00 
  41125d:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  411264:	49 01 c4             	add    %rax,%r12
  411267:	49 89 c7             	mov    %rax,%r15
  41126a:	41 ff d4             	callq  *%r12
	if (_M_uses_single_bucket(__bkts))
  41126d:	48 8b 85 38 fa ff ff 	mov    -0x5c8(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  411274:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
      _M_element_count = 0;
  41127b:	48 c7 85 28 fb ff ff 	movq   $0x0,-0x4d8(%rbp)
  411282:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  411286:	48 c7 85 20 fb ff ff 	movq   $0x0,-0x4e0(%rbp)
  41128d:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  411291:	48 83 c0 30          	add    $0x30,%rax
  411295:	48 39 c7             	cmp    %rax,%rdi
  411298:	74 19                	je     4112b3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x5e3>
  41129a:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4112a1:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4112a8:	ff ff ff 
  4112ab:	49 89 df             	mov    %rbx,%r15
  4112ae:	48 01 d8             	add    %rbx,%rax
  4112b1:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4112b3:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
	if (__p)
  4112ba:	48 85 ff             	test   %rdi,%rdi
  4112bd:	74 19                	je     4112d8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x608>
  4112bf:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4112c6:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4112cd:	ff ff ff 
  4112d0:	49 89 df             	mov    %rbx,%r15
  4112d3:	48 01 d8             	add    %rbx,%rax
  4112d6:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4112d8:	48 8b bd 70 fa ff ff 	mov    -0x590(%rbp),%rdi
	if (__p)
  4112df:	48 85 ff             	test   %rdi,%rdi
  4112e2:	74 19                	je     4112fd <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x62d>
  4112e4:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4112eb:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4112f2:	ff ff ff 
  4112f5:	49 89 df             	mov    %rbx,%r15
  4112f8:	48 01 d8             	add    %rbx,%rax
  4112fb:	ff d0                	callq  *%rax
  }
  4112fd:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  411301:	44 89 e8             	mov    %r13d,%eax
  411304:	5b                   	pop    %rbx
  411305:	41 5c                	pop    %r12
  411307:	41 5d                	pop    %r13
  411309:	41 5e                	pop    %r14
  41130b:	41 5f                	pop    %r15
  41130d:	5d                   	pop    %rbp
  41130e:	c3                   	retq   
        bestFScore = openSet[openset_top(openSet)].fScore;
  41130f:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  411316:	49 be e0 3f de ff ff 	movabs $0xffffffffffde3fe0,%r14
  41131d:	ff ff ff 
  411320:	48 8b bd d0 f9 ff ff 	mov    -0x630(%rbp),%rdi
    { return __lhs.base() - __rhs.base(); }
  411327:	49 bf b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%r15
  41132e:	db b6 6d 
  411331:	4c 01 f0             	add    %r14,%rax
  411334:	ff d0                	callq  *%rax
  411336:	48 98                	cltq   
  411338:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  41133f:	00 
  411340:	48 29 c2             	sub    %rax,%rdx
  411343:	8b 44 93 0c          	mov    0xc(%rbx,%rdx,4),%eax
        if (bestFScore > oldBestFScore) {
  411347:	41 39 c5             	cmp    %eax,%r13d
        bestFScore = openSet[openset_top(openSet)].fScore;
  41134a:	89 85 1c fa ff ff    	mov    %eax,-0x5e4(%rbp)
  411350:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
        if (bestFScore > oldBestFScore) {
  411357:	0f 8c 88 09 00 00    	jl     411ce5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1015>
  41135d:	4c 8b 85 90 fa ff ff 	mov    -0x570(%rbp),%r8
			if (focalSet.empty()) 
  411364:	49 39 c0             	cmp    %rax,%r8
  411367:	0f 84 ee 10 00 00    	je     41245b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x178b>
	AstarNode current = openSet[coi];
  41136d:	49 63 08             	movslq (%r8),%rcx
  411370:	4c 8b 8d 70 fa ff ff 	mov    -0x590(%rbp),%r9
      { return *(this->_M_impl._M_start + __n); }
  411377:	48 8d 14 cd 00 00 00 	lea    0x0(,%rcx,8),%rdx
  41137e:	00 
  41137f:	48 29 ca             	sub    %rcx,%rdx
  411382:	49 8d 14 91          	lea    (%r9,%rdx,4),%rdx
  411386:	44 8b 5a 0c          	mov    0xc(%rdx),%r11d
  41138a:	8b 5a 10             	mov    0x10(%rdx),%ebx
  41138d:	8b 72 14             	mov    0x14(%rdx),%esi
  411390:	49 8d 50 04          	lea    0x4(%r8),%rdx
  411394:	89 df                	mov    %ebx,%edi
  411396:	44 89 d9             	mov    %r11d,%ecx
  411399:	45 31 e4             	xor    %r12d,%r12d
  41139c:	48 29 d0             	sub    %rdx,%rax
  41139f:	89 f2                	mov    %esi,%edx
  4113a1:	48 c1 e8 02          	shr    $0x2,%rax
  4113a5:	4c 8d 14 85 04 00 00 	lea    0x4(,%rax,4),%r10
  4113ac:	00 
  4113ad:	31 c0                	xor    %eax,%eax
  4113af:	eb 3f                	jmp    4113f0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x720>
  4113b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
			if (current.focalHeuristic > n.focalHeuristic) {
  4113b8:	7e 11                	jle    4113cb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6fb>
				current_idx = std::distance(focalSet.begin(), iter); 
  4113ba:	48 89 c3             	mov    %rax,%rbx
  4113bd:	89 d6                	mov    %edx,%esi
  4113bf:	41 89 cb             	mov    %ecx,%r11d
  4113c2:	48 c1 eb 02          	shr    $0x2,%rbx
  4113c6:	49 89 dc             	mov    %rbx,%r12
  4113c9:	89 fb                	mov    %edi,%ebx
  4113cb:	48 83 c0 04          	add    $0x4,%rax
	for (; iter != iterEnd; ++iter) {
  4113cf:	49 39 c2             	cmp    %rax,%r10
  4113d2:	74 43                	je     411417 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x747>
  4113d4:	49 63 0c 00          	movslq (%r8,%rax,1),%rcx
  4113d8:	48 8d 14 cd 00 00 00 	lea    0x0(,%rcx,8),%rdx
  4113df:	00 
  4113e0:	48 29 ca             	sub    %rcx,%rdx
  4113e3:	49 8d 14 91          	lea    (%r9,%rdx,4),%rdx
  4113e7:	8b 4a 0c             	mov    0xc(%rdx),%ecx
  4113ea:	8b 7a 10             	mov    0x10(%rdx),%edi
  4113ed:	8b 52 14             	mov    0x14(%rdx),%edx
		if (current.focalHeuristic != n.focalHeuristic) {
  4113f0:	39 d6                	cmp    %edx,%esi
  4113f2:	75 c4                	jne    4113b8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6e8>
		else if (current.fScore != n.fScore) {
  4113f4:	41 39 cb             	cmp    %ecx,%r11d
  4113f7:	0f 84 1b 0a 00 00    	je     411e18 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1148>
			if (current.fScore > n.fScore) {
  4113fd:	7e cc                	jle    4113cb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6fb>
				current_idx = std::distance(focalSet.begin(), iter); 
  4113ff:	48 89 c3             	mov    %rax,%rbx
  411402:	48 83 c0 04          	add    $0x4,%rax
  411406:	41 89 cb             	mov    %ecx,%r11d
  411409:	48 c1 eb 02          	shr    $0x2,%rbx
	for (; iter != iterEnd; ++iter) {
  41140d:	49 39 c2             	cmp    %rax,%r10
				current_idx = std::distance(focalSet.begin(), iter); 
  411410:	49 89 dc             	mov    %rbx,%r12
  411413:	89 fb                	mov    %edi,%ebx
	for (; iter != iterEnd; ++iter) {
  411415:	75 bd                	jne    4113d4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x704>
  411417:	49 63 dc             	movslq %r12d,%rbx
  41141a:	48 c1 e3 02          	shl    $0x2,%rbx
			AstarNode current = openSet[focalSet[focalset_top_index]];
  41141e:	49 63 14 18          	movslq (%r8,%rbx,1),%rdx
  411422:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  411429:	00 
  41142a:	48 29 d0             	sub    %rdx,%rax
  41142d:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
  411431:	48 8b 10             	mov    (%rax),%rdx
  411434:	48 89 95 f0 fa ff ff 	mov    %rdx,-0x510(%rbp)
  41143b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  41143f:	48 89 95 f8 fa ff ff 	mov    %rdx,-0x508(%rbp)
  411446:	48 8b 50 10          	mov    0x10(%rax),%rdx
  41144a:	48 89 95 00 fb ff ff 	mov    %rdx,-0x500(%rbp)
  411451:	8b 40 18             	mov    0x18(%rax),%eax
			if (current.stat == 1) {
  411454:	83 f8 01             	cmp    $0x1,%eax
			AstarNode current = openSet[focalSet[focalset_top_index]];
  411457:	89 85 08 fb ff ff    	mov    %eax,-0x4f8(%rbp)
			if (current.stat == 1) {
  41145d:	0f 84 e3 0e 00 00    	je     412346 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1676>
      { return *(this->_M_impl._M_start + __n); }
  411463:	48 8b bd e0 f9 ff ff 	mov    -0x620(%rbp),%rdi
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  41146a:	44 8b bd f4 fa ff ff 	mov    -0x50c(%rbp),%r15d
  411471:	48 8b 07             	mov    (%rdi),%rax
  411474:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  411478:	48 8b 00             	mov    (%rax),%rax
  41147b:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  41147f:	44 3b 38             	cmp    (%rax),%r15d
  411482:	0f 84 77 0a 00 00    	je     411eff <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x122f>
      { return *(this->_M_impl._M_start + __n); }
  411488:	48 03 9d 90 fa ff ff 	add    -0x570(%rbp),%rbx
			openSet[focalSet[focalset_top_index]].stat = 1;
  41148f:	48 63 13             	movslq (%rbx),%rdx
      { return __normal_iterator(_M_current + __n); }
  411492:	48 8d 73 04          	lea    0x4(%rbx),%rsi
  411496:	48 89 df             	mov    %rbx,%rdi
  411499:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  4114a0:	00 
  4114a1:	48 29 d0             	sub    %rdx,%rax
  4114a4:	48 8b 95 70 fa ff ff 	mov    -0x590(%rbp),%rdx
  4114ab:	48 8d 04 82          	lea    (%rdx,%rax,4),%rax
  4114af:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%rax)
      : _M_current(__i) { }
  4114b6:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
  4114bd:	48 39 f0             	cmp    %rsi,%rax
  4114c0:	74 16                	je     4114d8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x808>
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
  4114c2:	48 89 c2             	mov    %rax,%rdx
  4114c5:	48 29 f2             	sub    %rsi,%rdx
  4114c8:	48 89 d1             	mov    %rdx,%rcx
  4114cb:	48 c1 f9 02          	sar    $0x2,%rcx
	  if (_Num)
  4114cf:	48 85 c9             	test   %rcx,%rcx
  4114d2:	0f 85 fb 09 00 00    	jne    411ed3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1203>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
  4114d8:	48 83 e8 04          	sub    $0x4,%rax
  4114dc:	ba b9 79 37 9e       	mov    $0x9e3779b9,%edx
  4114e1:	4c 8b ad 18 fb ff ff 	mov    -0x4e8(%rbp),%r13
  4114e8:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
  4114ef:	48 63 85 f0 fa ff ff 	movslq -0x510(%rbp),%rax
      __node_base* __prev_n = _M_find_before_node(__bkt, __k, __code);
  4114f6:	4c 8d b5 f0 fa ff ff 	lea    -0x510(%rbp),%r14
  4114fd:	4c 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%r8
  411504:	48 8b bd 38 fa ff ff 	mov    -0x5c8(%rbp),%rdi
  41150b:	49 89 c4             	mov    %rax,%r12
  41150e:	48 01 d0             	add    %rdx,%rax
  411511:	48 89 c3             	mov    %rax,%rbx
  411514:	48 89 c1             	mov    %rax,%rcx
  411517:	48 c1 e9 02          	shr    $0x2,%rcx
  41151b:	48 c1 e3 06          	shl    $0x6,%rbx
  41151f:	48 01 cb             	add    %rcx,%rbx
  411522:	49 63 cf             	movslq %r15d,%rcx
  411525:	48 01 d3             	add    %rdx,%rbx
  411528:	48 01 cb             	add    %rcx,%rbx
  41152b:	48 63 8d f8 fa ff ff 	movslq -0x508(%rbp),%rcx
  411532:	48 31 c3             	xor    %rax,%rbx
  411535:	48 89 d8             	mov    %rbx,%rax
  411538:	48 c1 e0 06          	shl    $0x6,%rax
  41153c:	48 01 ca             	add    %rcx,%rdx
  41153f:	89 8d 2c fa ff ff    	mov    %ecx,-0x5d4(%rbp)
  411545:	48 01 d0             	add    %rdx,%rax
  411548:	48 89 da             	mov    %rbx,%rdx
  41154b:	48 c1 ea 02          	shr    $0x2,%rdx
  41154f:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  411552:	31 d2                	xor    %edx,%edx
  411554:	48 31 c3             	xor    %rax,%rbx
  411557:	48 89 d8             	mov    %rbx,%rax
  41155a:	48 89 d9             	mov    %rbx,%rcx
  41155d:	49 f7 f5             	div    %r13
  411560:	48 b8 50 0b df ff ff 	movabs $0xffffffffffdf0b50,%rax
  411567:	ff ff ff 
  41156a:	48 89 85 30 fa ff ff 	mov    %rax,-0x5d0(%rbp)
  411571:	4c 01 c0             	add    %r8,%rax
  411574:	49 89 d1             	mov    %rdx,%r9
  411577:	4c 89 f2             	mov    %r14,%rdx
  41157a:	4c 89 ce             	mov    %r9,%rsi
  41157d:	4c 89 8d 40 fa ff ff 	mov    %r9,-0x5c0(%rbp)
  411584:	ff d0                	callq  *%rax
      if (!__prev_n)
  411586:	48 85 c0             	test   %rax,%rax
      __node_base* __prev_n = _M_find_before_node(__bkt, __k, __code);
  411589:	48 89 c6             	mov    %rax,%rsi
      if (!__prev_n)
  41158c:	44 8b 85 2c fa ff ff 	mov    -0x5d4(%rbp),%r8d
  411593:	0f 84 b9 00 00 00    	je     411652 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x982>
      if (__prev_n == _M_buckets[__bkt])
  411599:	4c 8b 85 10 fb ff ff 	mov    -0x4f0(%rbp),%r8
  4115a0:	4c 8b 8d 40 fa ff ff 	mov    -0x5c0(%rbp),%r9
      __node_type* __n = static_cast<__node_type*>(__prev_n->_M_nxt);
  4115a7:	48 8b 38             	mov    (%rax),%rdi
      if (__prev_n == _M_buckets[__bkt])
  4115aa:	4f 8d 14 c8          	lea    (%r8,%r9,8),%r10
	   __n->_M_nxt ? _M_bucket_index(__n->_M_next()) : 0);
  4115ae:	48 8b 0f             	mov    (%rdi),%rcx
      if (__prev_n == _M_buckets[__bkt])
  4115b1:	49 3b 02             	cmp    (%r10),%rax
  4115b4:	0f 84 da 0d 00 00    	je     412394 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x16c4>
      else if (__n->_M_nxt)
  4115ba:	48 85 c9             	test   %rcx,%rcx
  4115bd:	74 15                	je     4115d4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x904>
  4115bf:	48 8b 41 18          	mov    0x18(%rcx),%rax
  4115c3:	31 d2                	xor    %edx,%edx
  4115c5:	49 f7 f5             	div    %r13
	  if (__next_bkt != __bkt)
  4115c8:	49 39 d1             	cmp    %rdx,%r9
  4115cb:	74 07                	je     4115d4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x904>
	    _M_buckets[__next_bkt] = __prev_n;
  4115cd:	49 89 34 d0          	mov    %rsi,(%r8,%rdx,8)
  4115d1:	48 8b 0f             	mov    (%rdi),%rcx
  4115d4:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  4115db:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  4115e2:	ff ff ff 
      __prev_n->_M_nxt = __n->_M_nxt;
  4115e5:	48 89 0e             	mov    %rcx,(%rsi)
  4115e8:	49 89 c7             	mov    %rax,%r15
  4115eb:	48 01 c3             	add    %rax,%rbx
  4115ee:	ff d3                	callq  *%rbx
  4115f0:	48 63 85 f0 fa ff ff 	movslq -0x510(%rbp),%rax
  4115f7:	48 63 8d f4 fa ff ff 	movslq -0x50c(%rbp),%rcx
  4115fe:	ba b9 79 37 9e       	mov    $0x9e3779b9,%edx
      --_M_element_count;
  411603:	48 83 ad 28 fb ff ff 	subq   $0x1,-0x4d8(%rbp)
  41160a:	01 
  41160b:	49 89 c4             	mov    %rax,%r12
  41160e:	48 01 d0             	add    %rdx,%rax
  411611:	49 89 cf             	mov    %rcx,%r15
  411614:	48 89 c3             	mov    %rax,%rbx
  411617:	48 01 d1             	add    %rdx,%rcx
  41161a:	48 c1 e3 06          	shl    $0x6,%rbx
  41161e:	48 01 cb             	add    %rcx,%rbx
  411621:	48 89 c1             	mov    %rax,%rcx
  411624:	48 c1 e9 02          	shr    $0x2,%rcx
  411628:	48 01 cb             	add    %rcx,%rbx
  41162b:	48 63 8d f8 fa ff ff 	movslq -0x508(%rbp),%rcx
  411632:	48 31 c3             	xor    %rax,%rbx
  411635:	48 89 d8             	mov    %rbx,%rax
  411638:	48 c1 e0 06          	shl    $0x6,%rax
  41163c:	48 01 ca             	add    %rcx,%rdx
  41163f:	49 89 c8             	mov    %rcx,%r8
  411642:	48 01 d0             	add    %rdx,%rax
  411645:	48 89 da             	mov    %rbx,%rdx
  411648:	48 c1 ea 02          	shr    $0x2,%rdx
  41164c:	48 01 d0             	add    %rdx,%rax
  41164f:	48 31 c3             	xor    %rax,%rbx
  411652:	48 8b bd 58 fb ff ff 	mov    -0x4a8(%rbp),%rdi
  411659:	31 d2                	xor    %edx,%edx
  41165b:	48 89 d8             	mov    %rbx,%rax
  41165e:	48 f7 f7             	div    %rdi
      __node_base* __prev_p = _M_buckets[__n];
  411661:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
  411668:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  41166c:	49 89 d1             	mov    %rdx,%r9
  41166f:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  411676:	00 
      if (!__prev_p)
  411677:	48 85 c0             	test   %rax,%rax
  41167a:	74 2c                	je     4116a8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9d8>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  41167c:	48 8b 08             	mov    (%rax),%rcx
  41167f:	48 8b 71 18          	mov    0x18(%rcx),%rsi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  411683:	48 39 f3             	cmp    %rsi,%rbx
  411686:	0f 84 69 07 00 00    	je     411df5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1125>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  41168c:	48 8b 01             	mov    (%rcx),%rax
  41168f:	48 85 c0             	test   %rax,%rax
  411692:	74 14                	je     4116a8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9d8>
  411694:	48 8b 70 18          	mov    0x18(%rax),%rsi
    { return __num % __den; }
  411698:	31 d2                	xor    %edx,%edx
  41169a:	48 89 c1             	mov    %rax,%rcx
  41169d:	48 89 f0             	mov    %rsi,%rax
  4116a0:	48 f7 f7             	div    %rdi
  4116a3:	49 39 d1             	cmp    %rdx,%r9
  4116a6:	74 db                	je     411683 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9b3>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4116a8:	4c 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%r8
  4116af:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  4116b6:	ff ff ff 
  4116b9:	bf 20 00 00 00       	mov    $0x20,%edi
  4116be:	4d 89 c7             	mov    %r8,%r15
  4116c1:	4c 01 c0             	add    %r8,%rax
  4116c4:	ff d0                	callq  *%rax
  4116c6:	49 89 c4             	mov    %rax,%r12
    _Hash_node_base() noexcept : _M_nxt() { }
  4116c9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4116d0:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  4116d7:	4c 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%r8
  4116de:	b9 01 00 00 00       	mov    $0x1,%ecx
  4116e3:	48 8b 95 68 fb ff ff 	mov    -0x498(%rbp),%rdx
  4116ea:	48 8b b5 58 fb ff ff 	mov    -0x4a8(%rbp),%rsi
  4116f1:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  4116f6:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  4116fc:	4d 89 c7             	mov    %r8,%r15
  4116ff:	41 89 44 24 10       	mov    %eax,0x10(%r12)
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  411704:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  41170b:	48 89 85 60 fa ff ff 	mov    %rax,-0x5a0(%rbp)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  411712:	48 8b 85 e8 f9 ff ff 	mov    -0x618(%rbp),%rax
  411719:	48 8d 78 20          	lea    0x20(%rax),%rdi
  41171d:	48 b8 20 e9 dd ff ff 	movabs $0xffffffffffdde920,%rax
  411724:	ff ff ff 
  411727:	4c 01 c0             	add    %r8,%rax
  41172a:	ff d0                	callq  *%rax
	  if (__do_rehash.first)
  41172c:	84 c0                	test   %al,%al
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41172e:	48 89 d6             	mov    %rdx,%rsi
	  if (__do_rehash.first)
  411731:	74 38                	je     41176b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xa9b>
	      _M_rehash(__do_rehash.second, __saved_state);
  411733:	4c 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%r8
  41173a:	48 b8 70 24 df ff ff 	movabs $0xffffffffffdf2470,%rax
  411741:	ff ff ff 
  411744:	48 8d 95 60 fa ff ff 	lea    -0x5a0(%rbp),%rdx
  41174b:	48 8b bd e8 f9 ff ff 	mov    -0x618(%rbp),%rdi
  411752:	4c 01 c0             	add    %r8,%rax
  411755:	ff d0                	callq  *%rax
    { return __num % __den; }
  411757:	48 89 d8             	mov    %rbx,%rax
  41175a:	31 d2                	xor    %edx,%edx
  41175c:	48 f7 b5 58 fb ff ff 	divq   -0x4a8(%rbp)
  411763:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  41176a:	00 
      if (_M_buckets[__bkt])
  41176b:	48 8b 8d 50 fb ff ff 	mov    -0x4b0(%rbp),%rcx
      { __n->_M_hash_code = __c; }
  411772:	49 89 5c 24 18       	mov    %rbx,0x18(%r12)
  411777:	49 01 cd             	add    %rcx,%r13
  41177a:	49 8b 45 00          	mov    0x0(%r13),%rax
  41177e:	48 85 c0             	test   %rax,%rax
  411781:	0f 84 70 12 00 00    	je     4129f7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1d27>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  411787:	48 8b 00             	mov    (%rax),%rax
  41178a:	49 89 04 24          	mov    %rax,(%r12)
	  _M_buckets[__bkt]->_M_nxt = __node;
  41178e:	49 8b 45 00          	mov    0x0(%r13),%rax
  411792:	4c 89 20             	mov    %r12,(%rax)
	  ++_M_element_count;
  411795:	48 83 85 68 fb ff ff 	addq   $0x1,-0x498(%rbp)
  41179c:	01 
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
  41179d:	48 8b 85 b0 fa ff ff 	mov    -0x550(%rbp),%rax
		m_env.getNeighbors(s, neighbors, m_constraints);
  4117a4:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4117ab:	4c 89 f6             	mov    %r14,%rsi
  4117ae:	48 8b 95 b0 f9 ff ff 	mov    -0x650(%rbp),%rdx
  4117b5:	48 89 85 b8 fa ff ff 	mov    %rax,-0x548(%rbp)
  4117bc:	48 8b 85 e0 f9 ff ff 	mov    -0x620(%rbp),%rax
  4117c3:	48 8b 48 10          	mov    0x10(%rax),%rcx
  4117c7:	48 8b 38             	mov    (%rax),%rdi
  4117ca:	48 b8 80 e0 de ff ff 	movabs $0xffffffffffdee080,%rax
  4117d1:	ff ff ff 
  4117d4:	48 01 d8             	add    %rbx,%rax
  4117d7:	ff d0                	callq  *%rax
  4117d9:	48 8b 9d b0 fa ff ff 	mov    -0x550(%rbp),%rbx
  4117e0:	4c 8b a5 b8 fa ff ff 	mov    -0x548(%rbp),%r12
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  4117e7:	49 39 dc             	cmp    %rbx,%r12
  4117ea:	0f 84 99 04 00 00    	je     411c89 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfb9>
	      _M_rehash(__do_rehash.second, __saved_state);
  4117f0:	48 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%rdi
  4117f7:	48 b8 30 26 df ff ff 	movabs $0xffffffffffdf2630,%rax
  4117fe:	ff ff ff 
  411801:	48 01 f8             	add    %rdi,%rax
  411804:	48 89 85 a8 f9 ff ff 	mov    %rax,-0x658(%rbp)
      { ::operator delete(__p); }
  41180b:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  411812:	ff ff ff 
  411815:	48 01 f8             	add    %rdi,%rax
  411818:	48 89 85 d8 f9 ff ff 	mov    %rax,-0x628(%rbp)
  41181f:	e9 b2 03 00 00       	jmpq   411bd6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf06>
  411824:	0f 1f 40 00          	nopl   0x0(%rax)
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  411828:	48 8b 36             	mov    (%rsi),%rsi
  41182b:	48 85 f6             	test   %rsi,%rsi
  41182e:	74 15                	je     411845 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb75>
  411830:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
    { return __num % __den; }
  411834:	31 d2                	xor    %edx,%edx
  411836:	48 89 f8             	mov    %rdi,%rax
  411839:	49 f7 f1             	div    %r9
  41183c:	49 39 d2             	cmp    %rdx,%r10
  41183f:	0f 84 10 04 00 00    	je     411c55 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf85>
          Cost tentative_gScore = current.gScore + neighbor.cost;
  411845:	8b 43 10             	mov    0x10(%rbx),%eax
  411848:	03 85 00 fb ff ff    	add    -0x500(%rbp),%eax
  41184e:	31 d2                	xor    %edx,%edx
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  411850:	4c 8b 85 30 fa ff ff 	mov    -0x5d0(%rbp),%r8
  411857:	4c 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%r11
  41185e:	48 8b bd 38 fa ff ff 	mov    -0x5c8(%rbp),%rdi
  411865:	89 85 40 fa ff ff    	mov    %eax,-0x5c0(%rbp)
  41186b:	48 89 c8             	mov    %rcx,%rax
  41186e:	48 f7 b5 18 fb ff ff 	divq   -0x4e8(%rbp)
  411875:	4b 8d 04 18          	lea    (%r8,%r11,1),%rax
  411879:	48 89 d6             	mov    %rdx,%rsi
  41187c:	48 89 da             	mov    %rbx,%rdx
  41187f:	ff d0                	callq  *%rax
	if (__before_n)
  411881:	48 85 c0             	test   %rax,%rax
  411884:	0f 84 a7 05 00 00    	je     411e31 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1161>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  41188a:	48 8b 00             	mov    (%rax),%rax
      return __p ? iterator(__p) : end();
  41188d:	48 85 c0             	test   %rax,%rax
  411890:	0f 84 9b 05 00 00    	je     411e31 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1161>
						int index = iter->second;
  411896:	48 63 48 14          	movslq 0x14(%rax),%rcx
      { return *(this->_M_impl._M_start + __n); }
  41189a:	48 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%rax
  4118a1:	00 
  4118a2:	89 8d d0 fb ff ff    	mov    %ecx,-0x430(%rbp)
  4118a8:	48 89 ca             	mov    %rcx,%rdx
  4118ab:	48 29 c8             	sub    %rcx,%rax
  4118ae:	48 8b 8d 70 fa ff ff 	mov    -0x590(%rbp),%rcx
  4118b5:	48 8d 04 81          	lea    (%rcx,%rax,4),%rax
            if (tentative_gScore >= n.gScore) {
  4118b9:	8b 48 10             	mov    0x10(%rax),%ecx
  4118bc:	39 8d 40 fa ff ff    	cmp    %ecx,-0x5c0(%rbp)
  4118c2:	0f 8d 01 03 00 00    	jge    411bc9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xef9>
            if (n.fScore <= bestFScore * m_w &&
  4118c8:	66 0f ef c9          	pxor   %xmm1,%xmm1
            n.gScore = tentative_gScore;
  4118cc:	8b bd 40 fa ff ff    	mov    -0x5c0(%rbp),%edi
            Cost last_fScore = n.fScore;
  4118d2:	8b 70 0c             	mov    0xc(%rax),%esi
            if (n.fScore <= bestFScore * m_w &&
  4118d5:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4118d9:	f3 0f 2a 8d 1c fa ff 	cvtsi2ssl -0x5e4(%rbp),%xmm1
  4118e0:	ff 
            Cost delta = last_gScore - tentative_gScore;
  4118e1:	29 f9                	sub    %edi,%ecx
            n.gScore = tentative_gScore;
  4118e3:	89 78 10             	mov    %edi,0x10(%rax)
            n.fScore -= delta;
  4118e6:	89 f7                	mov    %esi,%edi
  4118e8:	29 cf                	sub    %ecx,%edi
            if (n.fScore <= bestFScore * m_w &&
  4118ea:	f3 0f 2a c7          	cvtsi2ss %edi,%xmm0
            n.fScore -= delta;
  4118ee:	89 78 0c             	mov    %edi,0xc(%rax)
            if (n.fScore <= bestFScore * m_w &&
  4118f1:	f3 0f 59 8d 28 fa ff 	mulss  -0x5d8(%rbp),%xmm1
  4118f8:	ff 
  4118f9:	0f 2e c8             	ucomiss %xmm0,%xmm1
  4118fc:	72 11                	jb     41190f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc3f>
                last_fScore > bestFScore * m_w) {
  4118fe:	66 0f ef c0          	pxor   %xmm0,%xmm0
  411902:	f3 0f 2a c6          	cvtsi2ss %esi,%xmm0
            if (n.fScore <= bestFScore * m_w &&
  411906:	0f 2e c1             	ucomiss %xmm1,%xmm0
  411909:	0f 87 c4 07 00 00    	ja     4120d3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1403>
  41190f:	48 63 03             	movslq (%rbx),%rax
  411912:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx
  411917:	48 8b b5 98 fb ff ff 	mov    -0x468(%rbp),%rsi
      __node_base* __prev_p = _M_buckets[__n];
  41191e:	4c 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%r15
  411925:	48 8d 14 08          	lea    (%rax,%rcx,1),%rdx
  411929:	89 85 2c fa ff ff    	mov    %eax,-0x5d4(%rbp)
  41192f:	8b 43 04             	mov    0x4(%rbx),%eax
  411932:	4c 63 c0             	movslq %eax,%r8
  411935:	48 89 d0             	mov    %rdx,%rax
  411938:	48 c1 e0 06          	shl    $0x6,%rax
  41193c:	44 89 85 18 fa ff ff 	mov    %r8d,-0x5e8(%rbp)
  411943:	49 01 c8             	add    %rcx,%r8
  411946:	4c 01 c0             	add    %r8,%rax
  411949:	49 89 d0             	mov    %rdx,%r8
  41194c:	49 c1 e8 02          	shr    $0x2,%r8
  411950:	49 01 c0             	add    %rax,%r8
  411953:	4c 89 c0             	mov    %r8,%rax
  411956:	48 31 d0             	xor    %rdx,%rax
  411959:	48 63 53 08          	movslq 0x8(%rbx),%rdx
  41195d:	49 89 c0             	mov    %rax,%r8
  411960:	49 c1 e0 06          	shl    $0x6,%r8
  411964:	89 95 14 fa ff ff    	mov    %edx,-0x5ec(%rbp)
  41196a:	48 01 ca             	add    %rcx,%rdx
  41196d:	49 01 d0             	add    %rdx,%r8
  411970:	48 89 c2             	mov    %rax,%rdx
  411973:	48 c1 ea 02          	shr    $0x2,%rdx
  411977:	49 01 d0             	add    %rdx,%r8
  41197a:	31 d2                	xor    %edx,%edx
  41197c:	49 31 c0             	xor    %rax,%r8
  41197f:	4c 89 c0             	mov    %r8,%rax
  411982:	48 f7 f6             	div    %rsi
  411985:	4d 8d 34 d7          	lea    (%r15,%rdx,8),%r14
  411989:	49 89 d2             	mov    %rdx,%r10
  41198c:	4d 8b 1e             	mov    (%r14),%r11
      if (!__prev_p)
  41198f:	4d 85 db             	test   %r11,%r11
  411992:	74 32                	je     4119c6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcf6>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  411994:	49 8b 3b             	mov    (%r11),%rdi
  411997:	4d 89 d9             	mov    %r11,%r9
  41199a:	48 8b 4f 30          	mov    0x30(%rdi),%rcx
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  41199e:	49 39 c8             	cmp    %rcx,%r8
  4119a1:	0f 84 81 03 00 00    	je     411d28 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1058>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  4119a7:	48 8b 07             	mov    (%rdi),%rax
  4119aa:	48 85 c0             	test   %rax,%rax
  4119ad:	74 17                	je     4119c6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcf6>
  4119af:	48 8b 48 30          	mov    0x30(%rax),%rcx
    { return __num % __den; }
  4119b3:	31 d2                	xor    %edx,%edx
  4119b5:	49 89 f9             	mov    %rdi,%r9
  4119b8:	48 89 c7             	mov    %rax,%rdi
  4119bb:	48 89 c8             	mov    %rcx,%rax
  4119be:	48 f7 f6             	div    %rsi
  4119c1:	49 39 d2             	cmp    %rdx,%r10
  4119c4:	74 d8                	je     41199e <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcce>
  4119c6:	8b 43 0c             	mov    0xc(%rbx),%eax
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  4119c9:	8b bd f0 fa ff ff    	mov    -0x510(%rbp),%edi
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4119cf:	48 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%rdx
  4119d6:	8b 8d f4 fa ff ff    	mov    -0x50c(%rbp),%ecx
  4119dc:	8b b5 f8 fa ff ff    	mov    -0x508(%rbp),%esi
  4119e2:	41 89 c5             	mov    %eax,%r13d
      : _M_head_impl(__h) { }
  4119e5:	8b 43 10             	mov    0x10(%rbx),%eax
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  4119e8:	89 bd f4 f9 ff ff    	mov    %edi,-0x60c(%rbp)
  4119ee:	89 8d 10 fa ff ff    	mov    %ecx,-0x5f0(%rbp)
  4119f4:	bf 38 00 00 00       	mov    $0x38,%edi
  4119f9:	49 89 d7             	mov    %rdx,%r15
  4119fc:	89 b5 f8 f9 ff ff    	mov    %esi,-0x608(%rbp)
      : _M_head_impl(__h) { }
  411a02:	89 85 fc f9 ff ff    	mov    %eax,-0x604(%rbp)
  411a08:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  411a0f:	ff ff ff 
  411a12:	48 01 d0             	add    %rdx,%rax
  411a15:	ff d0                	callq  *%rax
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  411a17:	8b 95 fc f9 ff ff    	mov    -0x604(%rbp),%edx
  411a1d:	49 89 c6             	mov    %rax,%r14
    _Hash_node_base() noexcept : _M_nxt() { }
  411a20:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  411a27:	8b 8d 10 fa ff ff    	mov    -0x5f0(%rbp),%ecx
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
  411a2d:	44 8b 8d 2c fa ff ff 	mov    -0x5d4(%rbp),%r9d
  411a34:	8b bd 18 fa ff ff    	mov    -0x5e8(%rbp),%edi
  411a3a:	45 89 6e 1c          	mov    %r13d,0x1c(%r14)
  411a3e:	41 89 56 18          	mov    %edx,0x18(%r14)
  411a42:	8b 95 f4 f9 ff ff    	mov    -0x60c(%rbp),%edx
  411a48:	49 63 c1             	movslq %r9d,%rax
  411a4b:	41 89 4e 24          	mov    %ecx,0x24(%r14)
  411a4f:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx
  411a54:	41 89 46 08          	mov    %eax,0x8(%r14)
  411a58:	4c 63 ef             	movslq %edi,%r13
  411a5b:	8b b5 14 fa ff ff    	mov    -0x5ec(%rbp),%esi
  411a61:	41 89 56 20          	mov    %edx,0x20(%r14)
  411a65:	8b 95 f8 f9 ff ff    	mov    -0x608(%rbp),%edx
  411a6b:	49 01 cd             	add    %rcx,%r13
  411a6e:	44 8b 85 40 fa ff ff 	mov    -0x5c0(%rbp),%r8d
  411a75:	41 89 7e 0c          	mov    %edi,0xc(%r14)
  411a79:	41 89 76 10          	mov    %esi,0x10(%r14)
  411a7d:	41 89 56 28          	mov    %edx,0x28(%r14)
  411a81:	48 8d 14 08          	lea    (%rax,%rcx,1),%rdx
  411a85:	45 89 46 14          	mov    %r8d,0x14(%r14)
  411a89:	48 89 d0             	mov    %rdx,%rax
  411a8c:	48 c1 e0 06          	shl    $0x6,%rax
  411a90:	4c 01 e8             	add    %r13,%rax
  411a93:	49 89 d5             	mov    %rdx,%r13
  411a96:	49 c1 ed 02          	shr    $0x2,%r13
  411a9a:	49 01 c5             	add    %rax,%r13
  411a9d:	4c 89 e8             	mov    %r13,%rax
  411aa0:	48 31 d0             	xor    %rdx,%rax
  411aa3:	48 63 d6             	movslq %esi,%rdx
  411aa6:	48 8b b5 98 fb ff ff 	mov    -0x468(%rbp),%rsi
  411aad:	49 89 c5             	mov    %rax,%r13
  411ab0:	48 01 ca             	add    %rcx,%rdx
  411ab3:	49 c1 e5 06          	shl    $0x6,%r13
  411ab7:	49 01 d5             	add    %rdx,%r13
  411aba:	48 89 c2             	mov    %rax,%rdx
  411abd:	48 c1 ea 02          	shr    $0x2,%rdx
  411ac1:	49 01 d5             	add    %rdx,%r13
    { return __num % __den; }
  411ac4:	31 d2                	xor    %edx,%edx
  411ac6:	49 31 c5             	xor    %rax,%r13
  411ac9:	4c 89 e8             	mov    %r13,%rax
  411acc:	48 f7 f6             	div    %rsi
      __node_base* __prev_p = _M_buckets[__n];
  411acf:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  411ad6:	00 
  411ad7:	49 89 d0             	mov    %rdx,%r8
  411ada:	48 89 85 40 fa ff ff 	mov    %rax,-0x5c0(%rbp)
  411ae1:	48 8b 85 90 fb ff ff 	mov    -0x470(%rbp),%rax
  411ae8:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
      if (!__prev_p)
  411aec:	48 85 c0             	test   %rax,%rax
  411aef:	74 2c                	je     411b1d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe4d>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  411af1:	48 8b 08             	mov    (%rax),%rcx
  411af4:	48 8b 79 30          	mov    0x30(%rcx),%rdi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  411af8:	49 39 fd             	cmp    %rdi,%r13
  411afb:	0f 84 b4 02 00 00    	je     411db5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10e5>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  411b01:	48 8b 01             	mov    (%rcx),%rax
  411b04:	48 85 c0             	test   %rax,%rax
  411b07:	74 14                	je     411b1d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe4d>
  411b09:	48 8b 78 30          	mov    0x30(%rax),%rdi
    { return __num % __den; }
  411b0d:	31 d2                	xor    %edx,%edx
  411b0f:	48 89 c1             	mov    %rax,%rcx
  411b12:	48 89 f8             	mov    %rdi,%rax
  411b15:	48 f7 f6             	div    %rsi
  411b18:	49 39 d0             	cmp    %rdx,%r8
  411b1b:	74 db                	je     411af8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe28>
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  411b1d:	48 8b 85 b8 fb ff ff 	mov    -0x448(%rbp),%rax
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  411b24:	4c 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%r8
  411b2b:	b9 01 00 00 00       	mov    $0x1,%ecx
  411b30:	48 8b 95 a8 fb ff ff 	mov    -0x458(%rbp),%rdx
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  411b37:	48 89 85 68 fa ff ff 	mov    %rax,-0x598(%rbp)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  411b3e:	48 8b 85 00 fa ff ff 	mov    -0x600(%rbp),%rax
  411b45:	4d 89 c7             	mov    %r8,%r15
  411b48:	48 8d 78 20          	lea    0x20(%rax),%rdi
  411b4c:	48 b8 20 e9 dd ff ff 	movabs $0xffffffffffdde920,%rax
  411b53:	ff ff ff 
  411b56:	4c 01 c0             	add    %r8,%rax
  411b59:	ff d0                	callq  *%rax
	  if (__do_rehash.first)
  411b5b:	84 c0                	test   %al,%al
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  411b5d:	48 89 d6             	mov    %rdx,%rsi
	  if (__do_rehash.first)
  411b60:	74 32                	je     411b94 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xec4>
	      _M_rehash(__do_rehash.second, __saved_state);
  411b62:	48 8d 95 68 fa ff ff 	lea    -0x598(%rbp),%rdx
  411b69:	48 8b bd 00 fa ff ff 	mov    -0x600(%rbp),%rdi
  411b70:	48 8b 85 a8 f9 ff ff 	mov    -0x658(%rbp),%rax
  411b77:	ff d0                	callq  *%rax
  411b79:	4c 89 e8             	mov    %r13,%rax
  411b7c:	31 d2                	xor    %edx,%edx
  411b7e:	48 f7 b5 98 fb ff ff 	divq   -0x468(%rbp)
  411b85:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  411b8c:	00 
  411b8d:	48 89 85 40 fa ff ff 	mov    %rax,-0x5c0(%rbp)
      if (_M_buckets[__bkt])
  411b94:	48 8b b5 90 fb ff ff 	mov    -0x470(%rbp),%rsi
  411b9b:	48 8b 8d 40 fa ff ff 	mov    -0x5c0(%rbp),%rcx
      { __n->_M_hash_code = __c; }
  411ba2:	4d 89 6e 30          	mov    %r13,0x30(%r14)
  411ba6:	48 01 f1             	add    %rsi,%rcx
  411ba9:	48 8b 01             	mov    (%rcx),%rax
  411bac:	48 85 c0             	test   %rax,%rax
  411baf:	0f 84 20 08 00 00    	je     4123d5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1705>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  411bb5:	48 8b 00             	mov    (%rax),%rax
  411bb8:	49 89 06             	mov    %rax,(%r14)
	  _M_buckets[__bkt]->_M_nxt = __node;
  411bbb:	48 8b 01             	mov    (%rcx),%rax
  411bbe:	4c 89 30             	mov    %r14,(%rax)
	  ++_M_element_count;
  411bc1:	48 83 85 a8 fb ff ff 	addq   $0x1,-0x458(%rbp)
  411bc8:	01 
  411bc9:	48 83 c3 14          	add    $0x14,%rbx
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  411bcd:	49 39 dc             	cmp    %rbx,%r12
  411bd0:	0f 84 b3 00 00 00    	je     411c89 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfb9>
  411bd6:	4c 63 2b             	movslq (%rbx),%r13
  411bd9:	ba b9 79 37 9e       	mov    $0x9e3779b9,%edx
  411bde:	48 63 43 04          	movslq 0x4(%rbx),%rax
  411be2:	4c 8b 8d 58 fb ff ff 	mov    -0x4a8(%rbp),%r9
  411be9:	49 8d 74 15 00       	lea    0x0(%r13,%rdx,1),%rsi
  411bee:	4d 89 eb             	mov    %r13,%r11
  411bf1:	49 89 c6             	mov    %rax,%r14
  411bf4:	48 01 d0             	add    %rdx,%rax
  411bf7:	48 89 f1             	mov    %rsi,%rcx
  411bfa:	48 c1 e1 06          	shl    $0x6,%rcx
  411bfe:	48 01 c8             	add    %rcx,%rax
  411c01:	48 89 f1             	mov    %rsi,%rcx
  411c04:	48 c1 e9 02          	shr    $0x2,%rcx
  411c08:	48 01 c1             	add    %rax,%rcx
  411c0b:	48 31 f1             	xor    %rsi,%rcx
  411c0e:	48 63 73 08          	movslq 0x8(%rbx),%rsi
  411c12:	48 89 c8             	mov    %rcx,%rax
  411c15:	48 c1 e0 06          	shl    $0x6,%rax
  411c19:	48 01 f2             	add    %rsi,%rdx
  411c1c:	49 89 f7             	mov    %rsi,%r15
  411c1f:	48 01 d0             	add    %rdx,%rax
  411c22:	48 89 ca             	mov    %rcx,%rdx
  411c25:	48 c1 ea 02          	shr    $0x2,%rdx
  411c29:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  411c2c:	31 d2                	xor    %edx,%edx
  411c2e:	48 31 c1             	xor    %rax,%rcx
  411c31:	48 89 c8             	mov    %rcx,%rax
  411c34:	49 f7 f1             	div    %r9
      __node_base* __prev_p = _M_buckets[__n];
  411c37:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
  411c3e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  411c42:	49 89 d2             	mov    %rdx,%r10
      if (!__prev_p)
  411c45:	48 85 c0             	test   %rax,%rax
  411c48:	0f 84 f7 fb ff ff    	je     411845 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb75>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  411c4e:	48 8b 30             	mov    (%rax),%rsi
  411c51:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  411c55:	48 39 f9             	cmp    %rdi,%rcx
  411c58:	0f 85 ca fb ff ff    	jne    411828 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb58>
    return time == s.time && x == s.x && y == s.y;
  411c5e:	44 3b 5e 08          	cmp    0x8(%rsi),%r11d
  411c62:	0f 85 c0 fb ff ff    	jne    411828 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb58>
  411c68:	44 3b 76 0c          	cmp    0xc(%rsi),%r14d
  411c6c:	0f 85 b6 fb ff ff    	jne    411828 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb58>
  411c72:	44 3b 7e 10          	cmp    0x10(%rsi),%r15d
  411c76:	0f 85 ac fb ff ff    	jne    411828 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb58>
  411c7c:	48 83 c3 14          	add    $0x14,%rbx
  411c80:	49 39 dc             	cmp    %rbx,%r12
  411c83:	0f 85 4d ff ff ff    	jne    411bd6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf06>
  411c89:	48 8b 9d 70 fa ff ff 	mov    -0x590(%rbp),%rbx
        bestFScore = openSet[openset_top(openSet)].fScore;
  411c90:	44 8b ad 1c fa ff ff 	mov    -0x5e4(%rbp),%r13d
		while (!openset_is_allclosed(openSet)) {
  411c97:	e9 d5 f3 ff ff       	jmpq   411071 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3a1>
    { return __lhs.base() - __rhs.base(); }
  411c9c:	48 89 da             	mov    %rbx,%rdx
  411c9f:	48 2b 95 70 fa ff ff 	sub    -0x590(%rbp),%rdx
  411ca6:	48 c1 fa 02          	sar    $0x2,%rdx
  411caa:	49 0f af d7          	imul   %r15,%rdx
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  411cae:	48 39 85 a0 fa ff ff 	cmp    %rax,-0x560(%rbp)
							focalSet.push_back(std::distance(openSet.begin(), iter));
  411cb5:	89 95 d0 fb ff ff    	mov    %edx,-0x430(%rbp)
  411cbb:	0f 84 77 07 00 00    	je     412438 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1768>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  411cc1:	48 85 c0             	test   %rax,%rax
  411cc4:	74 02                	je     411cc8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xff8>
  411cc6:	89 10                	mov    %edx,(%rax)
	    ++this->_M_impl._M_finish;
  411cc8:	48 83 c0 04          	add    $0x4,%rax
  411ccc:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
  411cd3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	++_M_current;
  411cd8:	48 83 c3 1c          	add    $0x1c,%rbx
          for (; iter != iterEnd; ++iter) {
  411cdc:	49 39 dc             	cmp    %rbx,%r12
  411cdf:	0f 84 78 f6 ff ff    	je     41135d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x68d>
						if (iter->stat == 1)
  411ce5:	83 7b 18 01          	cmpl   $0x1,0x18(%rbx)
  411ce9:	74 ed                	je     411cd8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1008>
            if (val > oldBestFScore * m_w && val <= bestFScore * m_w) {
  411ceb:	66 0f ef c0          	pxor   %xmm0,%xmm0
  411cef:	f3 0f 10 95 28 fa ff 	movss  -0x5d8(%rbp),%xmm2
  411cf6:	ff 
  411cf7:	66 0f ef c9          	pxor   %xmm1,%xmm1
  411cfb:	f3 41 0f 2a c5       	cvtsi2ss %r13d,%xmm0
  411d00:	f3 0f 2a 4b 0c       	cvtsi2ssl 0xc(%rbx),%xmm1
  411d05:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
  411d09:	0f 2e c8             	ucomiss %xmm0,%xmm1
  411d0c:	76 ca                	jbe    411cd8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1008>
  411d0e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  411d12:	f3 0f 2a 85 1c fa ff 	cvtsi2ssl -0x5e4(%rbp),%xmm0
  411d19:	ff 
  411d1a:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
  411d1e:	0f 2e c1             	ucomiss %xmm1,%xmm0
  411d21:	72 b5                	jb     411cd8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1008>
  411d23:	e9 74 ff ff ff       	jmpq   411c9c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfcc>
  411d28:	8b 85 2c fa ff ff    	mov    -0x5d4(%rbp),%eax
  411d2e:	3b 47 08             	cmp    0x8(%rdi),%eax
  411d31:	0f 85 70 fc ff ff    	jne    4119a7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcd7>
  411d37:	8b 85 18 fa ff ff    	mov    -0x5e8(%rbp),%eax
  411d3d:	3b 47 0c             	cmp    0xc(%rdi),%eax
  411d40:	0f 85 61 fc ff ff    	jne    4119a7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcd7>
  411d46:	8b 85 14 fa ff ff    	mov    -0x5ec(%rbp),%eax
  411d4c:	3b 47 10             	cmp    0x10(%rdi),%eax
  411d4f:	0f 85 52 fc ff ff    	jne    4119a7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcd7>
      if (__prev_n == _M_buckets[__bkt])
  411d55:	4d 39 cb             	cmp    %r9,%r11
	   __n->_M_nxt ? _M_bucket_index(__n->_M_next()) : 0);
  411d58:	48 8b 0f             	mov    (%rdi),%rcx
      if (__prev_n == _M_buckets[__bkt])
  411d5b:	0f 84 9d 03 00 00    	je     4120fe <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x142e>
      else if (__n->_M_nxt)
  411d61:	48 85 c9             	test   %rcx,%rcx
  411d64:	74 15                	je     411d7b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10ab>
    { return __num % __den; }
  411d66:	48 8b 41 30          	mov    0x30(%rcx),%rax
  411d6a:	31 d2                	xor    %edx,%edx
  411d6c:	48 f7 f6             	div    %rsi
	  if (__next_bkt != __bkt)
  411d6f:	49 39 d2             	cmp    %rdx,%r10
  411d72:	74 07                	je     411d7b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10ab>
	    _M_buckets[__next_bkt] = __prev_n;
  411d74:	4d 89 0c d7          	mov    %r9,(%r15,%rdx,8)
  411d78:	48 8b 0f             	mov    (%rdi),%rcx
      { ::operator delete(__p); }
  411d7b:	48 8b 85 d8 f9 ff ff 	mov    -0x628(%rbp),%rax
      __prev_n->_M_nxt = __n->_M_nxt;
  411d82:	49 89 09             	mov    %rcx,(%r9)
  411d85:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  411d8c:	ff d0                	callq  *%rax
  411d8e:	8b 43 08             	mov    0x8(%rbx),%eax
      --_M_element_count;
  411d91:	48 83 ad a8 fb ff ff 	subq   $0x1,-0x458(%rbp)
  411d98:	01 
  411d99:	89 85 14 fa ff ff    	mov    %eax,-0x5ec(%rbp)
  411d9f:	8b 03                	mov    (%rbx),%eax
  411da1:	89 85 2c fa ff ff    	mov    %eax,-0x5d4(%rbp)
  411da7:	8b 43 04             	mov    0x4(%rbx),%eax
  411daa:	89 85 18 fa ff ff    	mov    %eax,-0x5e8(%rbp)
  411db0:	e9 11 fc ff ff       	jmpq   4119c6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcf6>
  411db5:	44 39 49 08          	cmp    %r9d,0x8(%rcx)
  411db9:	0f 85 42 fd ff ff    	jne    411b01 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe31>
  411dbf:	8b 85 18 fa ff ff    	mov    -0x5e8(%rbp),%eax
  411dc5:	39 41 0c             	cmp    %eax,0xc(%rcx)
  411dc8:	0f 85 33 fd ff ff    	jne    411b01 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe31>
  411dce:	8b 85 14 fa ff ff    	mov    -0x5ec(%rbp),%eax
  411dd4:	39 41 10             	cmp    %eax,0x10(%rcx)
  411dd7:	0f 85 24 fd ff ff    	jne    411b01 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe31>
  411ddd:	4c 89 f7             	mov    %r14,%rdi
  411de0:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  411de7:	48 8b 85 d8 f9 ff ff 	mov    -0x628(%rbp),%rax
  411dee:	ff d0                	callq  *%rax
  411df0:	e9 d4 fd ff ff       	jmpq   411bc9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xef9>
  411df5:	44 39 61 08          	cmp    %r12d,0x8(%rcx)
  411df9:	0f 85 8d f8 ff ff    	jne    41168c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9bc>
  411dff:	44 39 79 0c          	cmp    %r15d,0xc(%rcx)
  411e03:	0f 85 83 f8 ff ff    	jne    41168c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9bc>
	  if (this->_M_equals(__k, __code, __p))
  411e09:	44 39 41 10          	cmp    %r8d,0x10(%rcx)
  411e0d:	0f 85 79 f8 ff ff    	jne    41168c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9bc>
  411e13:	e9 85 f9 ff ff       	jmpq   41179d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xacd>
			if (current.gScore < n.gScore) {
  411e18:	39 fb                	cmp    %edi,%ebx
  411e1a:	0f 8d ab f5 ff ff    	jge    4113cb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6fb>
				current_idx = std::distance(focalSet.begin(), iter); 
  411e20:	48 89 c3             	mov    %rax,%rbx
  411e23:	48 c1 eb 02          	shr    $0x2,%rbx
  411e27:	49 89 dc             	mov    %rbx,%r12
  411e2a:	89 fb                	mov    %edi,%ebx
  411e2c:	e9 9a f5 ff ff       	jmpq   4113cb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6fb>
  411e31:	48 8b bd e0 f9 ff ff 	mov    -0x620(%rbp),%rdi
  411e38:	4d 89 eb             	mov    %r13,%r11
	int numConflicts = 0;
  411e3b:	45 31 d2             	xor    %r10d,%r10d
  411e3e:	49 c1 e3 04          	shl    $0x4,%r11
  411e42:	48 8b 07             	mov    (%rdi),%rax
  411e45:	48 8b 77 08          	mov    0x8(%rdi),%rsi
  411e49:	48 8b 00             	mov    (%rax),%rax
  411e4c:	48 8d 04 f0          	lea    (%rax,%rsi,8),%rax
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  411e50:	8b 10                	mov    (%rax),%edx
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  411e52:	8b 40 04             	mov    0x4(%rax),%eax
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  411e55:	89 95 18 fa ff ff    	mov    %edx,-0x5e8(%rbp)
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  411e5b:	89 85 14 fa ff ff    	mov    %eax,-0x5ec(%rbp)
  411e61:	48 8b 57 20          	mov    0x20(%rdi),%rdx
                current.focalHeuristic +
  411e65:	8b 85 04 fb ff ff    	mov    -0x4fc(%rbp),%eax
  411e6b:	48 89 d1             	mov    %rdx,%rcx
  411e6e:	41 89 c1             	mov    %eax,%r9d
	for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  411e71:	31 c0                	xor    %eax,%eax
  411e73:	eb 15                	jmp    411e8a <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11ba>
  411e75:	48 83 c0 01          	add    $0x1,%rax
  411e79:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
  411e80:	48 83 f8 14          	cmp    $0x14,%rax
  411e84:	0f 84 b9 02 00 00    	je     412143 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1473>
		if (i != m_agentIdx && solution[i].states_size > 0) {
  411e8a:	48 39 c6             	cmp    %rax,%rsi
  411e8d:	74 e6                	je     411e75 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11a5>
  411e8f:	48 8b b9 00 04 00 00 	mov    0x400(%rcx),%rdi
  411e96:	48 85 ff             	test   %rdi,%rdi
  411e99:	74 da                	je     411e75 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11a5>
	if (t < solution[agentIdx].states_size) {
  411e9b:	49 39 fd             	cmp    %rdi,%r13
  411e9e:	72 27                	jb     411ec7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11f7>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  411ea0:	48 83 ef 01          	sub    $0x1,%rdi
  411ea4:	48 c1 e7 04          	shl    $0x4,%rdi
  411ea8:	48 01 cf             	add    %rcx,%rdi
  411eab:	44 8b 47 04          	mov    0x4(%rdi),%r8d
  411eaf:	8b 7f 08             	mov    0x8(%rdi),%edi
  bool equalExceptTime(const State& s) const { return x == s.x && y == s.y; }
  411eb2:	45 39 c6             	cmp    %r8d,%r14d
  411eb5:	75 be                	jne    411e75 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11a5>
				++numConflicts;
  411eb7:	41 39 ff             	cmp    %edi,%r15d
  411eba:	40 0f 94 c7          	sete   %dil
  411ebe:	40 0f b6 ff          	movzbl %dil,%edi
  411ec2:	41 01 fa             	add    %edi,%r10d
  411ec5:	eb ae                	jmp    411e75 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11a5>
		return solution[agentIdx].states[t].state;
  411ec7:	46 8b 44 19 04       	mov    0x4(%rcx,%r11,1),%r8d
  411ecc:	42 8b 7c 19 08       	mov    0x8(%rcx,%r11,1),%edi
  411ed1:	eb df                	jmp    411eb2 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11e2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  411ed3:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  411eda:	48 b8 10 ea dd ff ff 	movabs $0xffffffffffddea10,%rax
  411ee1:	ff ff ff 
  411ee4:	49 89 df             	mov    %rbx,%r15
  411ee7:	48 01 d8             	add    %rbx,%rax
  411eea:	ff d0                	callq  *%rax
  411eec:	44 8b bd f4 fa ff ff 	mov    -0x50c(%rbp),%r15d
  411ef3:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  411efa:	e9 d9 f5 ff ff       	jmpq   4114d8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x808>
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  411eff:	8b 40 04             	mov    0x4(%rax),%eax
  411f02:	39 85 f8 fa ff ff    	cmp    %eax,-0x508(%rbp)
  411f08:	0f 85 7a f5 ff ff    	jne    411488 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x7b8>
  411f0e:	48 89 f8             	mov    %rdi,%rax
  411f11:	8b bd f0 fa ff ff    	mov    -0x510(%rbp),%edi
  411f17:	39 78 18             	cmp    %edi,0x18(%rax)
  411f1a:	0f 8d 68 f5 ff ff    	jge    411488 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x7b8>
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
      { return _M_h.find(__x); }
  411f20:	4c 8b a5 48 fa ff ff 	mov    -0x5b8(%rbp),%r12
				solution.states_size = 0;
  411f27:	4c 8b bd 08 fa ff ff 	mov    -0x5f8(%rbp),%r15
  411f2e:	48 b8 00 e6 de ff ff 	movabs $0xffffffffffdee600,%rax
  411f35:	ff ff ff 
  411f38:	48 8d b5 f0 fa ff ff 	lea    -0x510(%rbp),%rsi
  411f3f:	48 8b bd 00 fa ff ff 	mov    -0x600(%rbp),%rdi
  411f46:	4c 89 e3             	mov    %r12,%rbx
  411f49:	49 c7 87 00 04 00 00 	movq   $0x0,0x400(%r15)
  411f50:	00 00 00 00 
				solution.actions_size = 0;
  411f54:	49 c7 87 08 06 00 00 	movq   $0x0,0x608(%r15)
  411f5b:	00 00 00 00 
  411f5f:	48 01 c3             	add    %rax,%rbx
  411f62:	ff d3                	callq  *%rbx
        while (iter != cameFrom.end()) {
  411f64:	48 85 c0             	test   %rax,%rax
  411f67:	0f 84 c9 08 00 00    	je     412836 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b66>
  411f6d:	49 89 c5             	mov    %rax,%r13
  411f70:	48 b8 c8 7a df ff ff 	movabs $0xffffffffffdf7ac8,%rax
  411f77:	ff ff ff 
  411f7a:	4c 01 e0             	add    %r12,%rax
  411f7d:	4d 89 ea             	mov    %r13,%r10
  411f80:	49 bc 00 7b df ff ff 	movabs $0xffffffffffdf7b00,%r12
  411f87:	ff ff ff 
  411f8a:	49 89 dd             	mov    %rbx,%r13
  411f8d:	48 89 85 40 fa ff ff 	mov    %rax,-0x5c0(%rbp)
  411f94:	4c 89 fb             	mov    %r15,%rbx
  411f97:	eb 6e                	jmp    412007 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1337>
  411f99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  411fa0:	f3 41 0f 6f 42 08    	movdqu 0x8(%r10),%xmm0
  411fa6:	4c 89 c8             	mov    %r9,%rax
  411fa9:	48 c1 e0 04          	shl    $0x4,%rax
			states_size++;
  411fad:	49 83 c1 01          	add    $0x1,%r9
			states[states_size] = s;
  411fb1:	0f 11 04 03          	movups %xmm0,(%rbx,%rax,1)
			states_size++;
  411fb5:	4c 89 8b 00 04 00 00 	mov    %r9,0x400(%rbx)
		if (actions_size < ACTION_SIZE) {
  411fbc:	4c 8b 8b 08 06 00 00 	mov    0x608(%rbx),%r9
  411fc3:	49 83 f9 3f          	cmp    $0x3f,%r9
  411fc7:	0f 87 ae 00 00 00    	ja     41207b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x13ab>
					solution.add(
  411fcd:	41 8b 52 18          	mov    0x18(%r10),%edx
  411fd1:	41 8b 4a 1c          	mov    0x1c(%r10),%ecx
			actions[actions_size] = a;
  411fd5:	4a 8d 84 cb 08 04 00 	lea    0x408(%rbx,%r9,8),%rax
  411fdc:	00 
			actions_size++;
  411fdd:	49 83 c1 01          	add    $0x1,%r9
			actions[actions_size] = a;
  411fe1:	89 08                	mov    %ecx,(%rax)
  411fe3:	89 50 04             	mov    %edx,0x4(%rax)
			actions_size++;
  411fe6:	4c 89 8b 08 06 00 00 	mov    %r9,0x608(%rbx)
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  411fed:	49 8d 72 20          	lea    0x20(%r10),%rsi
  411ff1:	48 8b bd 00 fa ff ff 	mov    -0x600(%rbp),%rdi
  411ff8:	41 ff d5             	callq  *%r13
        while (iter != cameFrom.end()) {
  411ffb:	48 85 c0             	test   %rax,%rax
  411ffe:	0f 84 32 08 00 00    	je     412836 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b66>
  412004:	49 89 c2             	mov    %rax,%r10
		if (states_size < STATE_SIZE) {
  412007:	4c 8b 8b 00 04 00 00 	mov    0x400(%rbx),%r9
  41200e:	49 83 f9 3f          	cmp    $0x3f,%r9
  412012:	76 8c                	jbe    411fa0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x12d0>
  412014:	4c 89 95 30 fa ff ff 	mov    %r10,-0x5d0(%rbp)
  41201b:	4c 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%r10
  412022:	49 bb 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%r11
  412029:	ff ff ff 
  41202c:	4c 8b 85 40 fa ff ff 	mov    -0x5c0(%rbp),%r8
  412033:	b9 00 04 00 00       	mov    $0x400,%ecx
  412038:	ba 01 00 00 00       	mov    $0x1,%edx
  41203d:	be ff 03 00 00       	mov    $0x3ff,%esi
  412042:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  412049:	31 c0                	xor    %eax,%eax
  41204b:	4d 89 d7             	mov    %r10,%r15
  41204e:	4d 01 d3             	add    %r10,%r11
  412051:	41 ff d3             	callq  *%r11
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  412054:	b9 05 04 00 00       	mov    $0x405,%ecx
  412059:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  412060:	48 87 c9             	xchg   %rcx,%rcx
		if (actions_size < ACTION_SIZE) {
  412063:	4c 8b 8b 08 06 00 00 	mov    0x608(%rbx),%r9
    COMPILER_BARRIER();
  41206a:	4c 8b 95 30 fa ff ff 	mov    -0x5d0(%rbp),%r10
  412071:	49 83 f9 3f          	cmp    $0x3f,%r9
  412075:	0f 86 52 ff ff ff    	jbe    411fcd <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x12fd>
  41207b:	4c 89 95 30 fa ff ff 	mov    %r10,-0x5d0(%rbp)
  412082:	4c 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%r10
  412089:	49 bb 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%r11
  412090:	ff ff ff 
  412093:	b9 00 04 00 00       	mov    $0x400,%ecx
  412098:	ba 01 00 00 00       	mov    $0x1,%edx
  41209d:	be ff 03 00 00       	mov    $0x3ff,%esi
  4120a2:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  4120a9:	31 c0                	xor    %eax,%eax
  4120ab:	4f 8d 04 22          	lea    (%r10,%r12,1),%r8
  4120af:	4d 89 d7             	mov    %r10,%r15
  4120b2:	4d 01 d3             	add    %r10,%r11
  4120b5:	41 ff d3             	callq  *%r11
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4120b8:	b9 05 04 00 00       	mov    $0x405,%ecx
  4120bd:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  4120c4:	48 87 c9             	xchg   %rcx,%rcx
  4120c7:	4c 8b 95 30 fa ff ff 	mov    -0x5d0(%rbp),%r10
  4120ce:	e9 1a ff ff ff       	jmpq   411fed <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x131d>
      : _M_current(__i) { }
  4120d3:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4120da:	48 3b 85 a0 fa ff ff 	cmp    -0x560(%rbp),%rax
  4120e1:	0f 84 e2 03 00 00    	je     4124c9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x17f9>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  4120e7:	48 85 c0             	test   %rax,%rax
  4120ea:	74 02                	je     4120ee <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x141e>
  4120ec:	89 10                	mov    %edx,(%rax)
	    ++this->_M_impl._M_finish;
  4120ee:	48 83 c0 04          	add    $0x4,%rax
  4120f2:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
  4120f9:	e9 11 f8 ff ff       	jmpq   41190f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc3f>
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
  4120fe:	48 85 c9             	test   %rcx,%rcx
  412101:	0f 84 08 03 00 00    	je     41240f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x173f>
  412107:	48 8b 41 30          	mov    0x30(%rcx),%rax
  41210b:	31 d2                	xor    %edx,%edx
  41210d:	48 f7 f6             	div    %rsi
      if (!__next || __next_bkt != __bkt)
  412110:	49 39 d2             	cmp    %rdx,%r10
  412113:	0f 84 62 fc ff ff    	je     411d7b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10ab>
	    _M_buckets[__next_bkt] = _M_buckets[__bkt];
  412119:	4d 89 0c d7          	mov    %r9,(%r15,%rdx,8)
	  if (&_M_before_begin == _M_buckets[__bkt])
  41211d:	48 8b 95 00 fa ff ff 	mov    -0x600(%rbp),%rdx
  412124:	49 8b 06             	mov    (%r14),%rax
  412127:	48 83 c2 10          	add    $0x10,%rdx
  41212b:	48 39 d0             	cmp    %rdx,%rax
  41212e:	0f 84 f2 02 00 00    	je     412426 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1756>
	  _M_buckets[__bkt] = nullptr;
  412134:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
  41213b:	48 8b 0f             	mov    (%rdi),%rcx
  41213e:	e9 38 fc ff ff       	jmpq   411d7b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10ab>
                current.focalHeuristic +
  412143:	45 01 ca             	add    %r9d,%r10d
    for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  412146:	31 c0                	xor    %eax,%eax
  412148:	44 89 95 2c fa ff ff 	mov    %r10d,-0x5d4(%rbp)
    int numConflicts = 0;
  41214f:	45 31 d2             	xor    %r10d,%r10d
  412152:	eb 11                	jmp    412165 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1495>
    for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  412154:	48 83 c0 01          	add    $0x1,%rax
  412158:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
  41215f:	48 83 f8 14          	cmp    $0x14,%rax
  412163:	74 75                	je     4121da <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x150a>
      if (i != m_agentIdx && solution[i].states_size > 0) {
  412165:	48 39 c6             	cmp    %rax,%rsi
  412168:	74 ea                	je     412154 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
  41216a:	48 8b 8a 00 04 00 00 	mov    0x400(%rdx),%rcx
  412171:	48 85 c9             	test   %rcx,%rcx
  412174:	74 de                	je     412154 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
        State s2a = getState(i, solution, s1a.time);
  412176:	48 63 bd f0 fa ff ff 	movslq -0x510(%rbp),%rdi
	if (t < solution[agentIdx].states_size) {
  41217d:	48 39 f9             	cmp    %rdi,%rcx
  412180:	77 04                	ja     412186 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x14b6>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  412182:	48 8d 79 ff          	lea    -0x1(%rcx),%rdi
  412186:	48 c1 e7 04          	shl    $0x4,%rdi
  41218a:	48 01 d7             	add    %rdx,%rdi
	if (t < solution[agentIdx].states_size) {
  41218d:	49 39 cd             	cmp    %rcx,%r13
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  412190:	44 8b 47 04          	mov    0x4(%rdi),%r8d
  412194:	8b 7f 08             	mov    0x8(%rdi),%edi
	if (t < solution[agentIdx].states_size) {
  412197:	72 35                	jb     4121ce <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x14fe>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  412199:	48 83 e9 01          	sub    $0x1,%rcx
  41219d:	48 c1 e1 04          	shl    $0x4,%rcx
  4121a1:	48 01 d1             	add    %rdx,%rcx
  4121a4:	44 8b 49 04          	mov    0x4(%rcx),%r9d
  4121a8:	8b 49 08             	mov    0x8(%rcx),%ecx
  4121ab:	44 39 8d f4 fa ff ff 	cmp    %r9d,-0x50c(%rbp)
  4121b2:	75 a0                	jne    412154 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
  4121b4:	39 8d f8 fa ff ff    	cmp    %ecx,-0x508(%rbp)
  4121ba:	75 98                	jne    412154 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
  4121bc:	45 39 c6             	cmp    %r8d,%r14d
  4121bf:	75 93                	jne    412154 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
          ++numConflicts;
  4121c1:	31 c9                	xor    %ecx,%ecx
  4121c3:	41 39 ff             	cmp    %edi,%r15d
  4121c6:	0f 94 c1             	sete   %cl
  4121c9:	41 01 ca             	add    %ecx,%r10d
  4121cc:	eb 86                	jmp    412154 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
		return solution[agentIdx].states[t].state;
  4121ce:	46 8b 4c 1a 04       	mov    0x4(%rdx,%r11,1),%r9d
  4121d3:	42 8b 4c 1a 08       	mov    0x8(%rdx,%r11,1),%ecx
  4121d8:	eb d1                	jmp    4121ab <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x14db>
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  4121da:	44 2b b5 18 fa ff ff 	sub    -0x5e8(%rbp),%r14d
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  4121e1:	44 2b bd 14 fa ff ff 	sub    -0x5ec(%rbp),%r15d
		stat(0) {}
  4121e8:	48 8b 13             	mov    (%rbx),%rdx
                tentative_gScore + m_env.admissibleHeuristic(neighbor.state);
  4121eb:	8b bd 40 fa ff ff    	mov    -0x5c0(%rbp),%edi
                                               tentative_gScore);
  4121f1:	44 03 95 2c fa ff ff 	add    -0x5d4(%rbp),%r10d
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  4121f8:	44 89 f0             	mov    %r14d,%eax
		stat(0) {}
  4121fb:	48 89 95 d0 fb ff ff 	mov    %rdx,-0x430(%rbp)
  412202:	c1 f8 1f             	sar    $0x1f,%eax
  412205:	41 31 c6             	xor    %eax,%r14d
  412208:	41 29 c6             	sub    %eax,%r14d
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  41220b:	44 89 f8             	mov    %r15d,%eax
  41220e:	c1 f8 1f             	sar    $0x1f,%eax
  412211:	41 31 c7             	xor    %eax,%r15d
  412214:	41 29 c7             	sub    %eax,%r15d
  412217:	8b 43 08             	mov    0x8(%rbx),%eax
  41221a:	89 bd e0 fb ff ff    	mov    %edi,-0x420(%rbp)
  412220:	45 01 fe             	add    %r15d,%r14d
                                               tentative_gScore);
  412223:	44 89 95 e4 fb ff ff 	mov    %r10d,-0x41c(%rbp)
		stat(0) {}
  41222a:	c7 85 e8 fb ff ff 00 	movl   $0x0,-0x418(%rbp)
  412231:	00 00 00 
                tentative_gScore + m_env.admissibleHeuristic(neighbor.state);
  412234:	41 01 fe             	add    %edi,%r14d
		stat(0) {}
  412237:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  41223d:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  412244:	48 3b 85 80 fa ff ff 	cmp    -0x580(%rbp),%rax
  41224b:	44 89 b5 dc fb ff ff 	mov    %r14d,-0x424(%rbp)
  412252:	0f 84 d9 02 00 00    	je     412531 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1861>
  412258:	48 85 c0             	test   %rax,%rax
  41225b:	74 22                	je     41227f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x15af>
  41225d:	48 89 10             	mov    %rdx,(%rax)
  412260:	48 8b 95 d8 fb ff ff 	mov    -0x428(%rbp),%rdx
  412267:	48 89 50 08          	mov    %rdx,0x8(%rax)
  41226b:	48 8b 95 e0 fb ff ff 	mov    -0x420(%rbp),%rdx
  412272:	48 89 50 10          	mov    %rdx,0x10(%rax)
  412276:	8b 95 e8 fb ff ff    	mov    -0x418(%rbp),%edx
  41227c:	89 50 18             	mov    %edx,0x18(%rax)
	    ++this->_M_impl._M_finish;
  41227f:	48 83 c0 1c          	add    $0x1c,%rax
  412283:	48 89 85 78 fa ff ff 	mov    %rax,-0x588(%rbp)
            if (fScore <= bestFScore * m_w) {
  41228a:	66 0f ef c9          	pxor   %xmm1,%xmm1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41228e:	48 2b 85 70 fa ff ff 	sub    -0x590(%rbp),%rax
  412295:	48 ba b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rdx
  41229c:	db b6 6d 
  41229f:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4122a3:	f3 0f 2a 8d 1c fa ff 	cvtsi2ssl -0x5e4(%rbp),%xmm1
  4122aa:	ff 
  4122ab:	f3 41 0f 2a c6       	cvtsi2ss %r14d,%xmm0
  4122b0:	48 c1 f8 02          	sar    $0x2,%rax
  4122b4:	48 0f af c2          	imul   %rdx,%rax
  4122b8:	f3 0f 59 8d 28 fa ff 	mulss  -0x5d8(%rbp),%xmm1
  4122bf:	ff 
  4122c0:	0f 2e c8             	ucomiss %xmm0,%xmm1
  4122c3:	72 2f                	jb     4122f4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1624>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4122c5:	48 8b 95 98 fa ff ff 	mov    -0x568(%rbp),%rdx
  4122cc:	48 3b 95 a0 fa ff ff 	cmp    -0x560(%rbp),%rdx
							focalSet.push_back(openSet.size() - 1);
  4122d3:	8d 48 ff             	lea    -0x1(%rax),%ecx
  4122d6:	89 8d d0 fa ff ff    	mov    %ecx,-0x530(%rbp)
  4122dc:	0f 84 10 02 00 00    	je     4124f2 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1822>
  4122e2:	48 85 d2             	test   %rdx,%rdx
  4122e5:	74 02                	je     4122e9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1619>
  4122e7:	89 0a                	mov    %ecx,(%rdx)
	    ++this->_M_impl._M_finish;
  4122e9:	48 83 c2 04          	add    $0x4,%rdx
  4122ed:	48 89 95 98 fa ff ff 	mov    %rdx,-0x568(%rbp)
  4122f4:	4c 8d b5 d0 fa ff ff 	lea    -0x530(%rbp),%r14
       : first(__x), second(std::forward<_U2>(__y)) { }
  4122fb:	48 8b 13             	mov    (%rbx),%rdx
            stateToHeap.insert(std::make_pair<>(neighbor.state, openSet.size() - 1));
  4122fe:	48 83 e8 01          	sub    $0x1,%rax
	  return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
  412302:	48 83 ec 08          	sub    $0x8,%rsp
  412306:	4c 89 f6             	mov    %r14,%rsi
  412309:	48 8b bd 38 fa ff ff 	mov    -0x5c8(%rbp),%rdi
  412310:	48 89 95 d0 fa ff ff 	mov    %rdx,-0x530(%rbp)
  412317:	8b 53 08             	mov    0x8(%rbx),%edx
  41231a:	48 89 85 e0 fa ff ff 	mov    %rax,-0x520(%rbp)
  412321:	48 b8 30 23 df ff ff 	movabs $0xffffffffffdf2330,%rax
  412328:	ff ff ff 
  41232b:	6a 00                	pushq  $0x0
  41232d:	89 95 d8 fa ff ff    	mov    %edx,-0x528(%rbp)
  412333:	48 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%rdx
  41233a:	48 01 d0             	add    %rdx,%rax
  41233d:	ff d0                	callq  *%rax
  41233f:	59                   	pop    %rcx
  412340:	5e                   	pop    %rsi
  412341:	e9 c9 f5 ff ff       	jmpq   41190f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc3f>
	__ostream_insert(__out, __s,
  412346:	4c 8b a5 48 fa ff ff 	mov    -0x5b8(%rbp),%r12
  41234d:	48 b8 e8 7b df ff ff 	movabs $0xffffffffffdf7be8,%rax
  412354:	ff ff ff 
  412357:	ba 26 00 00 00       	mov    $0x26,%edx
  41235c:	49 8d 34 04          	lea    (%r12,%rax,1),%rsi
  412360:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  412367:	ff ff ff 
  41236a:	4d 89 e7             	mov    %r12,%r15
  41236d:	49 8b 3c 04          	mov    (%r12,%rax,1),%rdi
  412371:	48 b8 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rax
  412378:	ff ff ff 
  41237b:	4c 01 e0             	add    %r12,%rax
  41237e:	ff d0                	callq  *%rax
	return __pf(*this);
  412380:	48 b8 10 31 de ff ff 	movabs $0xffffffffffde3110,%rax
  412387:	ff ff ff 
  41238a:	4c 01 e0             	add    %r12,%rax
  41238d:	ff d0                	callq  *%rax
  41238f:	e9 cf f0 ff ff       	jmpq   411463 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x793>
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
  412394:	48 85 c9             	test   %rcx,%rcx
  412397:	74 19                	je     4123b2 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x16e2>
    { return __num % __den; }
  412399:	48 8b 41 18          	mov    0x18(%rcx),%rax
  41239d:	31 d2                	xor    %edx,%edx
  41239f:	49 f7 f5             	div    %r13
      if (!__next || __next_bkt != __bkt)
  4123a2:	49 39 d1             	cmp    %rdx,%r9
  4123a5:	0f 84 29 f2 ff ff    	je     4115d4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x904>
	    _M_buckets[__next_bkt] = _M_buckets[__bkt];
  4123ab:	49 89 34 d0          	mov    %rsi,(%r8,%rdx,8)
  4123af:	49 8b 02             	mov    (%r10),%rax
	  if (&_M_before_begin == _M_buckets[__bkt])
  4123b2:	48 8b 9d 38 fa ff ff 	mov    -0x5c8(%rbp),%rbx
  4123b9:	48 8d 53 10          	lea    0x10(%rbx),%rdx
  4123bd:	48 39 d0             	cmp    %rdx,%rax
  4123c0:	0f 84 d8 01 00 00    	je     41259e <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x18ce>
	  _M_buckets[__bkt] = nullptr;
  4123c6:	49 c7 02 00 00 00 00 	movq   $0x0,(%r10)
  4123cd:	48 8b 0f             	mov    (%rdi),%rcx
  4123d0:	e9 ff f1 ff ff       	jmpq   4115d4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x904>
	  __node->_M_nxt = _M_before_begin._M_nxt;
  4123d5:	48 8b 85 a0 fb ff ff 	mov    -0x460(%rbp),%rax
	  _M_before_begin._M_nxt = __node;
  4123dc:	4c 89 b5 a0 fb ff ff 	mov    %r14,-0x460(%rbp)
	  if (__node->_M_nxt)
  4123e3:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  4123e6:	49 89 06             	mov    %rax,(%r14)
	  if (__node->_M_nxt)
  4123e9:	74 11                	je     4123fc <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x172c>
  4123eb:	48 8b 40 30          	mov    0x30(%rax),%rax
  4123ef:	31 d2                	xor    %edx,%edx
  4123f1:	48 f7 b5 98 fb ff ff 	divq   -0x468(%rbp)
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  4123f8:	4c 89 34 d6          	mov    %r14,(%rsi,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  4123fc:	48 8b 85 00 fa ff ff 	mov    -0x600(%rbp),%rax
  412403:	48 83 c0 10          	add    $0x10,%rax
  412407:	48 89 01             	mov    %rax,(%rcx)
  41240a:	e9 b2 f7 ff ff       	jmpq   411bc1 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xef1>
	  if (&_M_before_begin == _M_buckets[__bkt])
  41240f:	48 8b 95 00 fa ff ff 	mov    -0x600(%rbp),%rdx
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
  412416:	4c 89 c8             	mov    %r9,%rax
	  if (&_M_before_begin == _M_buckets[__bkt])
  412419:	48 83 c2 10          	add    $0x10,%rdx
  41241d:	48 39 d0             	cmp    %rdx,%rax
  412420:	0f 85 0e fd ff ff    	jne    412134 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1464>
	    _M_before_begin._M_nxt = __next;
  412426:	48 89 8d a0 fb ff ff 	mov    %rcx,-0x460(%rbp)
  41242d:	e9 02 fd ff ff       	jmpq   412134 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1464>
  412432:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  412438:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
  41243f:	48 8b bd c8 f9 ff ff 	mov    -0x638(%rbp),%rdi
  412446:	48 8b 85 c0 f9 ff ff 	mov    -0x640(%rbp),%rax
  41244d:	ff d0                	callq  *%rax
  41244f:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  412456:	e9 7d f8 ff ff       	jmpq   411cd8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1008>
	__ostream_insert(__out, __s,
  41245b:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412462:	48 b8 93 7e df ff ff 	movabs $0xffffffffffdf7e93,%rax
  412469:	ff ff ff 
  41246c:	ba 1a 00 00 00       	mov    $0x1a,%edx
  412471:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  412475:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  41247c:	ff ff ff 
  41247f:	49 89 df             	mov    %rbx,%r15
  412482:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  412486:	48 b8 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rax
  41248d:	ff ff ff 
  412490:	48 01 d8             	add    %rbx,%rax
  412493:	ff d0                	callq  *%rax
	return __pf(*this);
  412495:	48 b8 10 31 de ff ff 	movabs $0xffffffffffde3110,%rax
  41249c:	ff ff ff 
  41249f:	48 01 d8             	add    %rbx,%rax
  4124a2:	ff d0                	callq  *%rax
  4124a4:	48 8b 95 90 fa ff ff 	mov    -0x570(%rbp),%rdx
  4124ab:	4c 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%r8
  4124b2:	4c 8b 8d 70 fa ff ff 	mov    -0x590(%rbp),%r9
	for (; iter != iterEnd; ++iter) {
  4124b9:	4c 39 c2             	cmp    %r8,%rdx
  4124bc:	0f 85 92 05 00 00    	jne    412a54 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1d84>
  4124c2:	31 db                	xor    %ebx,%ebx
  4124c4:	e9 55 ef ff ff       	jmpq   41141e <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x74e>
	  _M_emplace_back_aux(__x);
  4124c9:	48 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%rdx
  4124d0:	48 b8 c0 e4 de ff ff 	movabs $0xffffffffffdee4c0,%rax
  4124d7:	ff ff ff 
  4124da:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
  4124e1:	48 8b bd c8 f9 ff ff 	mov    -0x638(%rbp),%rdi
  4124e8:	48 01 d0             	add    %rdx,%rax
  4124eb:	ff d0                	callq  *%rax
  4124ed:	e9 1d f4 ff ff       	jmpq   41190f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc3f>
  4124f2:	4c 8d b5 d0 fa ff ff 	lea    -0x530(%rbp),%r14
  4124f9:	48 8b bd c8 f9 ff ff 	mov    -0x638(%rbp),%rdi
  412500:	48 8b 85 c0 f9 ff ff 	mov    -0x640(%rbp),%rax
  412507:	4c 89 f6             	mov    %r14,%rsi
  41250a:	ff d0                	callq  *%rax
  41250c:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  412513:	48 2b 85 70 fa ff ff 	sub    -0x590(%rbp),%rax
  41251a:	48 ba b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rdx
  412521:	db b6 6d 
  412524:	48 c1 f8 02          	sar    $0x2,%rax
  412528:	48 0f af c2          	imul   %rdx,%rax
  41252c:	e9 ca fd ff ff       	jmpq   4122fb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x162b>
  412531:	48 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%rdx
  412538:	48 b8 c0 e6 de ff ff 	movabs $0xffffffffffdee6c0,%rax
  41253f:	ff ff ff 
  412542:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
  412549:	48 8b bd d0 f9 ff ff 	mov    -0x630(%rbp),%rdi
  412550:	48 01 d0             	add    %rdx,%rax
  412553:	ff d0                	callq  *%rax
  412555:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  41255c:	e9 29 fd ff ff       	jmpq   41228a <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x15ba>
      __catch(...)
  412561:	4c 8b b5 48 fa ff ff 	mov    -0x5b8(%rbp),%r14
  412568:	48 89 c7             	mov    %rax,%rdi
      { ::operator delete(__p); }
  41256b:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  412572:	ff ff ff 
  412575:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41257c:	ff ff ff 
  41257f:	4d 89 f7             	mov    %r14,%r15
  412582:	4c 01 f0             	add    %r14,%rax
  412585:	4c 01 f3             	add    %r14,%rbx
  412588:	ff d0                	callq  *%rax
  41258a:	4c 89 e7             	mov    %r12,%rdi
  41258d:	ff d3                	callq  *%rbx
	  __throw_exception_again;
  41258f:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  412596:	ff ff ff 
  412599:	4c 01 f0             	add    %r14,%rax
  41259c:	ff d0                	callq  *%rax
	    _M_before_begin._M_nxt = __next;
  41259e:	48 89 8d 20 fb ff ff 	mov    %rcx,-0x4e0(%rbp)
  4125a5:	e9 1c fe ff ff       	jmpq   4123c6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x16f6>
      __catch(...)
  4125aa:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4125b1:	49 89 c5             	mov    %rax,%r13
  4125b4:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  4125bb:	ff ff ff 
  4125be:	49 89 df             	mov    %rbx,%r15
  4125c1:	48 01 d8             	add    %rbx,%rax
  4125c4:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4125c6:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
	if (__p)
  4125cd:	48 85 ff             	test   %rdi,%rdi
  4125d0:	74 19                	je     4125eb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x191b>
  4125d2:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  4125d9:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  4125e0:	ff ff ff 
  4125e3:	49 89 c7             	mov    %rax,%r15
  4125e6:	48 01 c3             	add    %rax,%rbx
  4125e9:	ff d3                	callq  *%rbx
  4125eb:	48 8b bd a0 fb ff ff 	mov    -0x460(%rbp),%rdi
  4125f2:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  4125f9:	ff ff ff 
  4125fc:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
      while (__n)
  412603:	48 85 ff             	test   %rdi,%rdi
  412606:	74 14                	je     41261c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x194c>
  412608:	4c 8b 27             	mov    (%rdi),%r12
  41260b:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  412612:	ff d3                	callq  *%rbx
  412614:	4d 85 e4             	test   %r12,%r12
  412617:	4c 89 e7             	mov    %r12,%rdi
  41261a:	75 ec                	jne    412608 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1938>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  41261c:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
  412623:	49 bc c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%r12
  41262a:	ff ff ff 
  41262d:	31 f6                	xor    %esi,%esi
  41262f:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
  412636:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  41263d:	00 
  41263e:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  412645:	49 89 c7             	mov    %rax,%r15
  412648:	4c 01 e0             	add    %r12,%rax
  41264b:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  41264d:	48 8b 85 00 fa ff ff 	mov    -0x600(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  412654:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
      _M_element_count = 0;
  41265b:	48 c7 85 a8 fb ff ff 	movq   $0x0,-0x458(%rbp)
  412662:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  412666:	48 c7 85 a0 fb ff ff 	movq   $0x0,-0x460(%rbp)
  41266d:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  412671:	48 83 c0 30          	add    $0x30,%rax
  412675:	48 39 c7             	cmp    %rax,%rdi
  412678:	74 19                	je     412693 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x19c3>
  41267a:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  412681:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  412688:	ff ff ff 
  41268b:	49 89 c7             	mov    %rax,%r15
  41268e:	48 01 c3             	add    %rax,%rbx
  412691:	ff d3                	callq  *%rbx
  412693:	48 8b bd 60 fb ff ff 	mov    -0x4a0(%rbp),%rdi
  41269a:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  4126a1:	ff ff ff 
  4126a4:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
  4126ab:	48 85 ff             	test   %rdi,%rdi
  4126ae:	74 14                	je     4126c4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x19f4>
  4126b0:	4c 8b 37             	mov    (%rdi),%r14
  4126b3:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  4126ba:	ff d3                	callq  *%rbx
  4126bc:	4d 85 f6             	test   %r14,%r14
  4126bf:	4c 89 f7             	mov    %r14,%rdi
  4126c2:	75 ec                	jne    4126b0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x19e0>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  4126c4:	48 8b 85 58 fb ff ff 	mov    -0x4a8(%rbp),%rax
  4126cb:	31 f6                	xor    %esi,%esi
  4126cd:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
  4126d4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4126db:	00 
  4126dc:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  4126e3:	49 89 c7             	mov    %rax,%r15
  4126e6:	4c 01 e0             	add    %r12,%rax
  4126e9:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  4126eb:	48 8b 85 e8 f9 ff ff 	mov    -0x618(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  4126f2:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
      _M_element_count = 0;
  4126f9:	48 c7 85 68 fb ff ff 	movq   $0x0,-0x498(%rbp)
  412700:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  412704:	48 c7 85 60 fb ff ff 	movq   $0x0,-0x4a0(%rbp)
  41270b:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  41270f:	48 83 c0 30          	add    $0x30,%rax
  412713:	48 39 c7             	cmp    %rax,%rdi
  412716:	74 19                	je     412731 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1a61>
  412718:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  41271f:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  412726:	ff ff ff 
  412729:	49 89 c7             	mov    %rax,%r15
  41272c:	48 01 c3             	add    %rax,%rbx
  41272f:	ff d3                	callq  *%rbx
  412731:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  412738:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  41273f:	ff ff ff 
  412742:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
  412749:	48 85 ff             	test   %rdi,%rdi
  41274c:	74 14                	je     412762 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1a92>
  41274e:	4c 8b 37             	mov    (%rdi),%r14
  412751:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  412758:	ff d3                	callq  *%rbx
  41275a:	4d 85 f6             	test   %r14,%r14
  41275d:	4c 89 f7             	mov    %r14,%rdi
  412760:	75 ec                	jne    41274e <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1a7e>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  412762:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
  412769:	31 f6                	xor    %esi,%esi
  41276b:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
  412772:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  412779:	00 
  41277a:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  412781:	49 01 c4             	add    %rax,%r12
  412784:	49 89 c7             	mov    %rax,%r15
  412787:	41 ff d4             	callq  *%r12
	if (_M_uses_single_bucket(__bkts))
  41278a:	48 8b 85 38 fa ff ff 	mov    -0x5c8(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  412791:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
      _M_element_count = 0;
  412798:	48 c7 85 28 fb ff ff 	movq   $0x0,-0x4d8(%rbp)
  41279f:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  4127a3:	48 c7 85 20 fb ff ff 	movq   $0x0,-0x4e0(%rbp)
  4127aa:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  4127ae:	48 83 c0 30          	add    $0x30,%rax
  4127b2:	48 39 c7             	cmp    %rax,%rdi
  4127b5:	74 19                	je     4127d0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b00>
  4127b7:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4127be:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4127c5:	ff ff ff 
  4127c8:	49 89 df             	mov    %rbx,%r15
  4127cb:	48 01 d8             	add    %rbx,%rax
  4127ce:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4127d0:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
	if (__p)
  4127d7:	48 85 ff             	test   %rdi,%rdi
  4127da:	74 19                	je     4127f5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b25>
  4127dc:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4127e3:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4127ea:	ff ff ff 
  4127ed:	49 89 df             	mov    %rbx,%r15
  4127f0:	48 01 d8             	add    %rbx,%rax
  4127f3:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4127f5:	48 8b bd 70 fa ff ff 	mov    -0x590(%rbp),%rdi
	if (__p)
  4127fc:	48 85 ff             	test   %rdi,%rdi
  4127ff:	74 19                	je     41281a <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b4a>
  412801:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412808:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41280f:	ff ff ff 
  412812:	49 89 df             	mov    %rbx,%r15
  412815:	48 01 d8             	add    %rbx,%rax
  412818:	ff d0                	callq  *%rax
  41281a:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412821:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  412828:	ff ff ff 
  41282b:	4c 89 ef             	mov    %r13,%rdi
  41282e:	49 89 df             	mov    %rbx,%r15
  412831:	48 01 d8             	add    %rbx,%rax
  412834:	ff d0                	callq  *%rax
		if (states_size < STATE_SIZE) {
  412836:	48 8b 9d 08 fa ff ff 	mov    -0x5f8(%rbp),%rbx
  41283d:	48 8b 85 b8 f9 ff ff 	mov    -0x648(%rbp),%rax
  412844:	4c 8b 8b 00 04 00 00 	mov    0x400(%rbx),%r9
  41284b:	8b 30                	mov    (%rax),%esi
  41284d:	8b 48 04             	mov    0x4(%rax),%ecx
  412850:	8b 50 08             	mov    0x8(%rax),%edx
  412853:	49 83 f9 3f          	cmp    $0x3f,%r9
  412857:	0f 87 47 02 00 00    	ja     412aa4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1dd4>
			states[states_size] = s;
  41285d:	4c 89 c8             	mov    %r9,%rax
  412860:	48 c1 e0 04          	shl    $0x4,%rax
  412864:	48 01 d8             	add    %rbx,%rax
  412867:	89 30                	mov    %esi,(%rax)
  412869:	89 48 04             	mov    %ecx,0x4(%rax)
  41286c:	89 50 08             	mov    %edx,0x8(%rax)
  41286f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
			states_size++;
  412876:	49 8d 41 01          	lea    0x1(%r9),%rax
  41287a:	48 89 83 00 04 00 00 	mov    %rax,0x400(%rbx)
  412881:	48 8b 9d 08 fa ff ff 	mov    -0x5f8(%rbp),%rbx
  412888:	48 c1 e0 04          	shl    $0x4,%rax
  41288c:	48 8b 8d 20 fa ff ff 	mov    -0x5e0(%rbp),%rcx
  412893:	48 89 c2             	mov    %rax,%rdx
  412896:	48 8d 44 13 f0       	lea    -0x10(%rbx,%rdx,1),%rax
  41289b:	48 8d 7b f0          	lea    -0x10(%rbx),%rdi
			tmp_s[i] = states[j];
  41289f:	48 8b 30             	mov    (%rax),%rsi
  4128a2:	48 83 e8 10          	sub    $0x10,%rax
  4128a6:	48 83 c1 10          	add    $0x10,%rcx
  4128aa:	48 89 71 f0          	mov    %rsi,-0x10(%rcx)
  4128ae:	48 8b 70 18          	mov    0x18(%rax),%rsi
  4128b2:	48 89 71 f8          	mov    %rsi,-0x8(%rcx)
		for(int i = 0; i < states_size; ++i) {
  4128b6:	48 39 f8             	cmp    %rdi,%rax
  4128b9:	75 e4                	jne    41289f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1bcf>
  4128bb:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4128c2:	48 b8 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rax
  4128c9:	ff ff ff 
  4128cc:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
  4128d3:	48 8b bd 08 fa ff ff 	mov    -0x5f8(%rbp),%rdi
  4128da:	49 89 df             	mov    %rbx,%r15
  4128dd:	48 01 d8             	add    %rbx,%rax
  4128e0:	ff d0                	callq  *%rax
		size_t j = actions_size - 1;
  4128e2:	48 8b 85 08 fa ff ff 	mov    -0x5f8(%rbp),%rax
  4128e9:	48 8b 80 08 06 00 00 	mov    0x608(%rax),%rax
		for(int i = 0; i < actions_size; ++i) {
  4128f0:	48 85 c0             	test   %rax,%rax
  4128f3:	74 6a                	je     41295f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1c8f>
  4128f5:	48 8d 14 c5 00 04 00 	lea    0x400(,%rax,8),%rdx
  4128fc:	00 
  4128fd:	48 8b 85 08 fa ff ff 	mov    -0x5f8(%rbp),%rax
  412904:	48 8b 9d 20 fa ff ff 	mov    -0x5e0(%rbp),%rbx
  41290b:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  41290f:	48 81 ea 00 04 00 00 	sub    $0x400,%rdx
  412916:	48 89 d8             	mov    %rbx,%rax
  412919:	48 8d 3c 13          	lea    (%rbx,%rdx,1),%rdi
			tmp_a[i] = actions[j];
  41291d:	48 8b 31             	mov    (%rcx),%rsi
  412920:	48 83 c0 08          	add    $0x8,%rax
  412924:	48 83 e9 08          	sub    $0x8,%rcx
  412928:	48 89 70 f8          	mov    %rsi,-0x8(%rax)
		for(int i = 0; i < actions_size; ++i) {
  41292c:	48 39 f8             	cmp    %rdi,%rax
  41292f:	75 ec                	jne    41291d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1c4d>
			actions[i] = tmp_a[i];
  412931:	48 8b 85 08 fa ff ff 	mov    -0x5f8(%rbp),%rax
  412938:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  41293f:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
  412946:	48 8d b8 08 04 00 00 	lea    0x408(%rax),%rdi
  41294d:	48 b8 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rax
  412954:	ff ff ff 
  412957:	49 89 df             	mov    %rbx,%r15
  41295a:	48 01 d8             	add    %rbx,%rax
  41295d:	ff d0                	callq  *%rax
        solution.cost = current.gScore;
  41295f:	8b 85 00 fb ff ff    	mov    -0x500(%rbp),%eax
  412965:	48 8b 9d 08 fa ff ff 	mov    -0x5f8(%rbp),%rbx
        return true;
  41296c:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        solution.fmin = openSet[openset_top(openSet)].fScore;
  412972:	48 8b bd d0 f9 ff ff 	mov    -0x630(%rbp),%rdi
        solution.cost = current.gScore;
  412979:	89 83 10 06 00 00    	mov    %eax,0x610(%rbx)
        solution.fmin = openSet[openset_top(openSet)].fScore;
  41297f:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  412986:	4c 01 f0             	add    %r14,%rax
  412989:	ff d0                	callq  *%rax
  41298b:	48 63 d0             	movslq %eax,%rdx
  41298e:	48 8b bd 70 fa ff ff 	mov    -0x590(%rbp),%rdi
  412995:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  41299c:	00 
  41299d:	48 29 d0             	sub    %rdx,%rax
  4129a0:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
  4129a4:	8b 40 0c             	mov    0xc(%rax),%eax
  4129a7:	89 83 14 06 00 00    	mov    %eax,0x614(%rbx)
  4129ad:	e9 f7 e6 ff ff       	jmpq   4110a9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3d9>
  4129b2:	49 89 c5             	mov    %rax,%r13
  4129b5:	e9 0c fc ff ff       	jmpq   4125c6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x18f6>
      __catch(...)
  4129ba:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4129c1:	48 89 c7             	mov    %rax,%rdi
  4129c4:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  4129cb:	ff ff ff 
  4129ce:	49 89 df             	mov    %rbx,%r15
  4129d1:	48 01 d8             	add    %rbx,%rax
  4129d4:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  4129db:	ff ff ff 
  4129de:	ff d0                	callq  *%rax
  4129e0:	4c 01 fb             	add    %r15,%rbx
  4129e3:	4c 89 f7             	mov    %r14,%rdi
  4129e6:	ff d3                	callq  *%rbx
	  __throw_exception_again;
  4129e8:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  4129ef:	ff ff ff 
  4129f2:	4c 01 f8             	add    %r15,%rax
  4129f5:	ff d0                	callq  *%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  4129f7:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
	  _M_before_begin._M_nxt = __node;
  4129fe:	4c 89 a5 60 fb ff ff 	mov    %r12,-0x4a0(%rbp)
	  if (__node->_M_nxt)
  412a05:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  412a08:	49 89 04 24          	mov    %rax,(%r12)
	  if (__node->_M_nxt)
  412a0c:	74 11                	je     412a1f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1d4f>
    { return __num % __den; }
  412a0e:	48 8b 40 18          	mov    0x18(%rax),%rax
  412a12:	31 d2                	xor    %edx,%edx
  412a14:	48 f7 b5 58 fb ff ff 	divq   -0x4a8(%rbp)
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  412a1b:	4c 89 24 d1          	mov    %r12,(%rcx,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  412a1f:	48 8b 85 e8 f9 ff ff 	mov    -0x618(%rbp),%rax
  412a26:	48 83 c0 10          	add    $0x10,%rax
  412a2a:	49 89 45 00          	mov    %rax,0x0(%r13)
  412a2e:	e9 62 ed ff ff       	jmpq   411795 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xac5>
      __catch(...)
  412a33:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412a3a:	49 89 c5             	mov    %rax,%r13
  412a3d:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  412a44:	ff ff ff 
  412a47:	49 89 df             	mov    %rbx,%r15
  412a4a:	48 01 d8             	add    %rbx,%rax
  412a4d:	ff d0                	callq  *%rax
  412a4f:	e9 72 fb ff ff       	jmpq   4125c6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x18f6>
	AstarNode current = openSet[coi];
  412a54:	48 63 0a             	movslq (%rdx),%rcx
      { return *(this->_M_impl._M_start + __n); }
  412a57:	48 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%rax
  412a5e:	00 
  412a5f:	48 29 c8             	sub    %rcx,%rax
  412a62:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
  412a66:	44 8b 58 0c          	mov    0xc(%rax),%r11d
  412a6a:	8b 58 10             	mov    0x10(%rax),%ebx
  412a6d:	8b 70 14             	mov    0x14(%rax),%esi
  412a70:	4c 89 c0             	mov    %r8,%rax
  412a73:	49 89 d0             	mov    %rdx,%r8
  412a76:	e9 15 e9 ff ff       	jmpq   411390 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6c0>
	  _M_emplace_back_aux(__x);
  412a7b:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412a82:	48 b8 c0 e4 de ff ff 	movabs $0xffffffffffdee4c0,%rax
  412a89:	ff ff ff 
  412a8c:	48 8d b5 5c fa ff ff 	lea    -0x5a4(%rbp),%rsi
  412a93:	48 8d bd 90 fa ff ff 	lea    -0x570(%rbp),%rdi
  412a9a:	48 01 d8             	add    %rbx,%rax
  412a9d:	ff d0                	callq  *%rax
  412a9f:	e9 3d e5 ff ff       	jmpq   410fe1 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x311>
  412aa4:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412aab:	4c 8b a5 20 fa ff ff 	mov    -0x5e0(%rbp),%r12
  412ab2:	48 b8 c8 7a df ff ff 	movabs $0xffffffffffdf7ac8,%rax
  412ab9:	ff ff ff 
  412abc:	49 ba 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%r10
  412ac3:	ff ff ff 
  412ac6:	b9 00 04 00 00       	mov    $0x400,%ecx
  412acb:	ba 01 00 00 00       	mov    $0x1,%edx
  412ad0:	be ff 03 00 00       	mov    $0x3ff,%esi
  412ad5:	4c 8d 04 03          	lea    (%rbx,%rax,1),%r8
  412ad9:	4c 89 e7             	mov    %r12,%rdi
  412adc:	49 89 df             	mov    %rbx,%r15
  412adf:	31 c0                	xor    %eax,%eax
  412ae1:	49 01 da             	add    %rbx,%r10
  412ae4:	41 ff d2             	callq  *%r10
  412ae7:	b9 05 04 00 00       	mov    $0x405,%ecx
  412aec:	4c 89 e7             	mov    %r12,%rdi
  412aef:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  412af2:	48 8b 85 08 fa ff ff 	mov    -0x5f8(%rbp),%rax
  412af9:	48 8b 80 00 04 00 00 	mov    0x400(%rax),%rax
		for(int i = 0; i < states_size; ++i) {
  412b00:	48 85 c0             	test   %rax,%rax
  412b03:	0f 85 78 fd ff ff    	jne    412881 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1bb1>
  412b09:	e9 d4 fd ff ff       	jmpq   4128e2 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1c12>
  412b0e:	49 89 c5             	mov    %rax,%r13
  412b11:	e9 d5 fa ff ff       	jmpq   4125eb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x191b>
  412b16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  412b1d:	00 00 00 

0000000000412b20 <_Z6searchm>:
	void search(swarm::Timestamp score) {
  412b20:	41 57                	push   %r15
  412b22:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 412b20 <_Z6searchm>
  412b29:	49 bb e0 84 21 00 00 	movabs $0x2184e0,%r11
  412b30:	00 00 00 
  412b33:	41 56                	push   %r14
  412b35:	41 55                	push   %r13
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  412b37:	48 b8 10 7c df ff ff 	movabs $0xffffffffffdf7c10,%rax
  412b3e:	ff ff ff 
  412b41:	41 54                	push   %r12
  412b43:	55                   	push   %rbp
  412b44:	4d 01 df             	add    %r11,%r15
  412b47:	53                   	push   %rbx
  412b48:	48 bb f0 e3 dd ff ff 	movabs $0xffffffffffdde3f0,%rbx
  412b4f:	ff ff ff 
  412b52:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412b56:	4c 01 fb             	add    %r15,%rbx
  412b59:	ba 80 00 01 00       	mov    $0x10080,%edx
  412b5e:	bf 01 00 00 00       	mov    $0x1,%edi
  412b63:	48 83 ec 58          	sub    $0x58,%rsp
  412b67:	31 c0                	xor    %eax,%eax
    start.cost = 0;
  412b69:	49 bc 00 d1 9a 3b 00 	movabs $0x3b9ad100,%r12
  412b70:	00 00 00 
  412b73:	ff d3                	callq  *%rbx
  412b75:	48 b8 38 7c df ff ff 	movabs $0xffffffffffdf7c38,%rax
  412b7c:	ff ff ff 
  412b7f:	ba 50 06 00 00       	mov    $0x650,%edx
  412b84:	bf 01 00 00 00       	mov    $0x1,%edi
  412b89:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412b8d:	31 c0                	xor    %eax,%eax
  412b8f:	ff d3                	callq  *%rbx
  412b91:	48 b8 60 7c df ff ff 	movabs $0xffffffffffdf7c60,%rax
  412b98:	ff ff ff 
  412b9b:	ba 10 00 00 00       	mov    $0x10,%edx
  412ba0:	bf 01 00 00 00       	mov    $0x1,%edi
  412ba5:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412ba9:	31 c0                	xor    %eax,%eax
  412bab:	ff d3                	callq  *%rbx
  412bad:	48 b8 88 7c df ff ff 	movabs $0xffffffffffdf7c88,%rax
  412bb4:	ff ff ff 
  412bb7:	ba 08 00 00 00       	mov    $0x8,%edx
  412bbc:	bf 01 00 00 00       	mov    $0x1,%edi
  412bc1:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412bc5:	31 c0                	xor    %eax,%eax
  412bc7:	ff d3                	callq  *%rbx
  412bc9:	48 b8 b0 7c df ff ff 	movabs $0xffffffffffdf7cb0,%rax
  412bd0:	ff ff ff 
  412bd3:	ba 40 7e 00 00       	mov    $0x7e40,%edx
  412bd8:	bf 01 00 00 00       	mov    $0x1,%edi
  412bdd:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412be1:	31 c0                	xor    %eax,%eax
  412be3:	ff d3                	callq  *%rbx
  412be5:	48 b8 e0 7c df ff ff 	movabs $0xffffffffffdf7ce0,%rax
  412bec:	ff ff ff 
  412bef:	ba 80 06 00 00       	mov    $0x680,%edx
  412bf4:	bf 01 00 00 00       	mov    $0x1,%edi
  412bf9:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412bfd:	31 c0                	xor    %eax,%eax
  412bff:	ff d3                	callq  *%rbx
  412c01:	48 b8 08 7d df ff ff 	movabs $0xffffffffffdf7d08,%rax
  412c08:	ff ff ff 
  412c0b:	ba 00 82 00 00       	mov    $0x8200,%edx
  412c10:	bf 01 00 00 00       	mov    $0x1,%edi
  412c15:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412c19:	31 c0                	xor    %eax,%eax
  412c1b:	ff d3                	callq  *%rbx
  412c1d:	48 b8 40 7d df ff ff 	movabs $0xffffffffffdf7d40,%rax
  412c24:	ff ff ff 
  412c27:	ba 40 00 00 00       	mov    $0x40,%edx
  412c2c:	bf 01 00 00 00       	mov    $0x1,%edi
  412c31:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412c35:	31 c0                	xor    %eax,%eax
  412c37:	ff d3                	callq  *%rbx
  412c39:	48 b8 60 7d df ff ff 	movabs $0xffffffffffdf7d60,%rax
  412c40:	ff ff ff 
  412c43:	ba 48 00 00 00       	mov    $0x48,%edx
  412c48:	bf 01 00 00 00       	mov    $0x1,%edi
  412c4d:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412c51:	31 c0                	xor    %eax,%eax
  412c53:	ff d3                	callq  *%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  412c55:	49 b9 c0 50 9c 3b 00 	movabs $0x3b9c50c0,%r9
  412c5c:	00 00 00 
  412c5f:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
  412c66:	aa aa aa 
  412c69:	43 c7 84 3c 40 00 01 	movl   $0x0,0x10040(%r12,%r15,1)
  412c70:	00 00 00 00 00 
  412c75:	4b 8b 3c 39          	mov    (%r9,%r15,1),%rdi
  412c79:	4b 8b 44 39 08       	mov    0x8(%r9,%r15,1),%rax
    start.LB = 0;
  412c7e:	43 c7 84 3c 44 00 01 	movl   $0x0,0x10044(%r12,%r15,1)
  412c85:	00 00 00 00 00 
    start.id = 0;
  412c8a:	43 c7 84 3c 50 00 01 	movl   $0x0,0x10050(%r12,%r15,1)
  412c91:	00 00 00 00 00 
  412c96:	48 29 f8             	sub    %rdi,%rax
  412c99:	48 c1 f8 02          	sar    $0x2,%rax
  412c9d:	48 0f af c2          	imul   %rdx,%rax
    for (size_t i = 0; i < g_initialStates.size(); ++i) {
  412ca1:	48 85 c0             	test   %rax,%rax
  412ca4:	0f 84 a4 01 00 00    	je     412e4e <_Z6searchm+0x32e>
  412caa:	48 b8 80 d2 9b 3b 00 	movabs $0x3b9bd280,%rax
  412cb1:	00 00 00 
			m_solution(solution) {
  412cb4:	49 bd c0 d1 9b 3b 00 	movabs $0x3b9bd1c0,%r13
  412cbb:	00 00 00 
  412cbe:	4b 8d 2c 3c          	lea    (%r12,%r15,1),%rbp
  412cc2:	4d 8d 34 07          	lea    (%r15,%rax,1),%r14
  412cc6:	4b 8d 04 2f          	lea    (%r15,%r13,1),%rax
  412cca:	31 db                	xor    %ebx,%ebx
  412ccc:	4c 8d 85 40 7e 00 00 	lea    0x7e40(%rbp),%r8
  412cd3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        bool success = astar_search(llenv, g_w, g_initialStates[i], start.solution[i]);
  412cd8:	48 b8 d0 5c de ff ff 	movabs $0xffffffffffde5cd0,%rax
  412cdf:	ff ff ff 
  412ce2:	4d 89 f2             	mov    %r14,%r10
  412ce5:	4c 01 f8             	add    %r15,%rax
  412ce8:	49 89 ee             	mov    %rbp,%r14
  412ceb:	4c 89 c5             	mov    %r8,%rbp
  412cee:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  412cf3:	eb 7e                	jmp    412d73 <_Z6searchm+0x253>
  412cf5:	0f 1f 00             	nopl   (%rax)
      if (i < ROBOT_NUMS && g_solution[i].states_size > 1) {
  412cf8:	49 83 ba 00 04 00 00 	cmpq   $0x1,0x400(%r10)
  412cff:	01 
  412d00:	76 7b                	jbe    412d7d <_Z6searchm+0x25d>
        start.solution[i] = g_solution[i];
  412d02:	b9 c9 00 00 00       	mov    $0xc9,%ecx
  412d07:	4c 89 f7             	mov    %r14,%rdi
  412d0a:	4c 89 d6             	mov    %r10,%rsi
  412d0d:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  412d10:	0f b6 06             	movzbl (%rsi),%eax
  412d13:	88 07                	mov    %al,(%rdi)
      start.cost += start.solution[i].cost;
  412d15:	41 8b 86 10 06 00 00 	mov    0x610(%r14),%eax
  412d1c:	43 01 84 3c 40 00 01 	add    %eax,0x10040(%r12,%r15,1)
  412d23:	00 
  412d24:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
  412d2b:	aa aa aa 
      start.LB += start.solution[i].fmin;
  412d2e:	41 8b 86 14 06 00 00 	mov    0x614(%r14),%eax
  412d35:	4b 8b 3c 39          	mov    (%r9,%r15,1),%rdi
    for (size_t i = 0; i < g_initialStates.size(); ++i) {
  412d39:	48 83 c3 01          	add    $0x1,%rbx
      start.LB += start.solution[i].fmin;
  412d3d:	43 01 84 3c 44 00 01 	add    %eax,0x10044(%r12,%r15,1)
  412d44:	00 
  412d45:	4b 8b 44 39 08       	mov    0x8(%r9,%r15,1),%rax
  412d4a:	49 81 c6 50 06 00 00 	add    $0x650,%r14
  412d51:	49 81 c2 50 06 00 00 	add    $0x650,%r10
  412d58:	48 81 c5 80 06 00 00 	add    $0x680,%rbp
  412d5f:	48 29 f8             	sub    %rdi,%rax
  412d62:	48 c1 f8 02          	sar    $0x2,%rax
  412d66:	48 0f af c2          	imul   %rdx,%rax
    for (size_t i = 0; i < g_initialStates.size(); ++i) {
  412d6a:	48 39 c3             	cmp    %rax,%rbx
  412d6d:	0f 83 db 00 00 00    	jae    412e4e <_Z6searchm+0x32e>
      if (i < ROBOT_NUMS && g_solution[i].states_size > 1) {
  412d73:	48 83 fb 14          	cmp    $0x14,%rbx
  412d77:	0f 85 7b ff ff ff    	jne    412cf8 <_Z6searchm+0x1d8>
  412d7d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
		m_agentIdx = agentIdx;
  412d82:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  412d87:	48 8d b5 58 02 00 00 	lea    0x258(%rbp),%rsi
		m_constraints = constraints;
  412d8e:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
		m_lastGoalConstraint = -1;
  412d93:	c7 44 24 38 ff ff ff 	movl   $0xffffffff,0x38(%rsp)
  412d9a:	ff 
			m_solution(solution) {
  412d9b:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  412da0:	4b 8d 04 3c          	lea    (%r12,%r15,1),%rax
  412da4:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  412da9:	4b 8b 04 2f          	mov    (%r15,%r13,1),%rax
  412dad:	4c 8d 1c d8          	lea    (%rax,%rbx,8),%r11
		m_lastGoalConstraint = -1;
  412db1:	48 89 e8             	mov    %rbp,%rax
  412db4:	41 8b 0b             	mov    (%r11),%ecx
  412db7:	eb 10                	jmp    412dc9 <_Z6searchm+0x2a9>
  412db9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  412dc0:	48 83 c0 0c          	add    $0xc,%rax
		for (const auto& vc : constraints->vertexConstraints) {
  412dc4:	48 39 c6             	cmp    %rax,%rsi
  412dc7:	74 26                	je     412def <_Z6searchm+0x2cf>
			if (vc.x == m_env.m_goals[m_agentIdx].x && vc.y == m_env.m_goals[m_agentIdx].y) {
  412dc9:	39 48 04             	cmp    %ecx,0x4(%rax)
  412dcc:	75 f2                	jne    412dc0 <_Z6searchm+0x2a0>
  412dce:	41 8b 53 04          	mov    0x4(%r11),%edx
  412dd2:	39 50 08             	cmp    %edx,0x8(%rax)
  412dd5:	75 e9                	jne    412dc0 <_Z6searchm+0x2a0>
				m_lastGoalConstraint = std::max(m_lastGoalConstraint, vc.time);
  412dd7:	8b 10                	mov    (%rax),%edx
  412dd9:	39 54 24 38          	cmp    %edx,0x38(%rsp)
  412ddd:	0f 4d 54 24 38       	cmovge 0x38(%rsp),%edx
  412de2:	48 83 c0 0c          	add    $0xc,%rax
		for (const auto& vc : constraints->vertexConstraints) {
  412de6:	48 39 c6             	cmp    %rax,%rsi
				m_lastGoalConstraint = std::max(m_lastGoalConstraint, vc.time);
  412de9:	89 54 24 38          	mov    %edx,0x38(%rsp)
		for (const auto& vc : constraints->vertexConstraints) {
  412ded:	75 da                	jne    412dc9 <_Z6searchm+0x2a9>
      { return *(this->_M_impl._M_start + __n); }
  412def:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
  412df3:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  412df8:	4c 89 14 24          	mov    %r10,(%rsp)
        bool success = astar_search(llenv, g_w, g_initialStates[i], start.solution[i]);
  412dfc:	4c 89 f2             	mov    %r14,%rdx
  412dff:	48 8d 34 87          	lea    (%rdi,%rax,4),%rsi
  412e03:	48 b8 80 d1 9b 3b 00 	movabs $0x3b9bd180,%rax
  412e0a:	00 00 00 
  412e0d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  412e12:	f3 41 0f 10 04 07    	movss  (%r15,%rax,1),%xmm0
  412e18:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  412e1d:	ff d0                	callq  *%rax
        if (!success) {
  412e1f:	84 c0                	test   %al,%al
  412e21:	4c 8b 14 24          	mov    (%rsp),%r10
  412e25:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  412e2a:	0f 85 e5 fe ff ff    	jne    412d15 <_Z6searchm+0x1f5>
					g_isNoConflict = false;
  412e30:	48 b8 40 d2 9b 3b 00 	movabs $0x3b9bd240,%rax
  412e37:	00 00 00 
  412e3a:	41 c6 04 07 00       	movb   $0x0,(%r15,%rax,1)
	}
  412e3f:	48 83 c4 58          	add    $0x58,%rsp
  412e43:	5b                   	pop    %rbx
  412e44:	5d                   	pop    %rbp
  412e45:	41 5c                	pop    %r12
  412e47:	41 5d                	pop    %r13
  412e49:	41 5e                	pop    %r14
  412e4b:	41 5f                	pop    %r15
  412e4d:	c3                   	retq   
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  412e4e:	48 b8 80 7d df ff ff 	movabs $0xffffffffffdf7d80,%rax
  412e55:	ff ff ff 
  412e58:	b9 05 04 00 00       	mov    $0x405,%ecx
  412e5d:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  412e61:	48 87 c9             	xchg   %rcx,%rcx
  412e64:	48 b8 ae 7e df ff ff 	movabs $0xffffffffffdf7eae,%rax
  412e6b:	ff ff ff 
  412e6e:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  412e72:	48 87 c9             	xchg   %rcx,%rcx
    start.focalHeuristic = focalHeuristic(start.solution);
  412e75:	48 b8 00 34 de ff ff 	movabs $0xffffffffffde3400,%rax
  412e7c:	ff ff ff 
  412e7f:	4b 8d 3c 3c          	lea    (%r12,%r15,1),%rdi
  412e83:	4c 01 f8             	add    %r15,%rax
  412e86:	ff d0                	callq  *%rax
  412e88:	66 0f ef c9          	pxor   %xmm1,%xmm1
  412e8c:	43 89 84 3c 48 00 01 	mov    %eax,0x10048(%r12,%r15,1)
  412e93:	00 
  412e94:	48 b8 20 93 df ff ff 	movabs $0xffffffffffdf9320,%rax
  412e9b:	ff ff ff 
  412e9e:	f2 41 0f 10 04 07    	movsd  (%r15,%rax,1),%xmm0
  412ea4:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  412eab:	ff ff ff 
  412eae:	f2 43 0f 2a 8c 3c 5c 	cvtsi2sdl 0x1005c(%r12,%r15,1),%xmm1
  412eb5:	00 01 00 
  412eb8:	4c 01 f8             	add    %r15,%rax
  412ebb:	ff d0                	callq  *%rax
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  412ebd:	43 8b 84 3c 54 00 01 	mov    0x10054(%r12,%r15,1),%eax
  412ec4:	00 
  412ec5:	66 0f ef c9          	pxor   %xmm1,%xmm1
     HighLevelNode *newNode = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  412ec9:	bf 80 00 01 00       	mov    $0x10080,%edi
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  412ece:	01 c0                	add    %eax,%eax
  412ed0:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  412ed4:	48 b8 28 93 df ff ff 	movabs $0xffffffffffdf9328,%rax
  412edb:	ff ff ff 
  412ede:	f2 42 0f 5c 04 38    	subsd  (%rax,%r15,1),%xmm0
     HighLevelNode *newNode = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  412ee4:	48 b8 c0 74 df ff ff 	movabs $0xffffffffffdf74c0,%rax
  412eeb:	ff ff ff 
  412eee:	4c 01 f8             	add    %r15,%rax
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  412ef1:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  412ef5:	66 0f ef c9          	pxor   %xmm1,%xmm1
  412ef9:	f2 43 0f 2a 8c 3c 58 	cvtsi2sdl 0x10058(%r12,%r15,1),%xmm1
  412f00:	00 01 00 
  412f03:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  412f07:	f2 0f 2c d8          	cvttsd2si %xmm0,%ebx
     HighLevelNode *newNode = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  412f0b:	ff d0                	callq  *%rax
     *newNode = start;
  412f0d:	48 89 c7             	mov    %rax,%rdi
  412f10:	48 b8 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rax
  412f17:	ff ff ff 
  412f1a:	4b 8d 34 3c          	lea    (%r12,%r15,1),%rsi
  412f1e:	ba 80 00 01 00       	mov    $0x10080,%edx
  412f23:	4c 01 f8             	add    %r15,%rax
  412f26:	ff d0                	callq  *%rax
  412f28:	49 89 c1             	mov    %rax,%r9
    register uint64_t r8  asm("r8")  = v3;
  412f2b:	48 b8 40 b6 de ff ff 	movabs $0xffffffffffdeb640,%rax
  412f32:	ff ff ff 
            :);
  412f35:	31 ff                	xor    %edi,%edi
    register uint64_t r8  asm("r8")  = v3;
  412f37:	4d 8d 04 07          	lea    (%r15,%rax,1),%r8
            :);
  412f3b:	b9 02 00 01 40       	mov    $0x40010002,%ecx
  412f40:	4c 89 ca             	mov    %r9,%rdx
    return static_cast<uint64_t>(t);
  412f43:	48 63 f3             	movslq %ebx,%rsi
            :);
  412f46:	48 87 c9             	xchg   %rcx,%rcx
	}
  412f49:	48 83 c4 58          	add    $0x58,%rsp
  412f4d:	5b                   	pop    %rbx
  412f4e:	5d                   	pop    %rbp
  412f4f:	41 5c                	pop    %r12
  412f51:	41 5d                	pop    %r13
  412f53:	41 5e                	pop    %r14
  412f55:	41 5f                	pop    %r15
  412f57:	c3                   	retq   
  412f58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  412f5f:	00 

0000000000412f60 <_ZNKSt5ctypeIcE8do_widenEc>:
       *  @param __c  The char to convert.
       *  @return  The converted character.
      */
      virtual char_type
      do_widen(char __c) const
      { return __c; }
  412f60:	89 f0                	mov    %esi,%eax
  412f62:	c3                   	retq   
  412f63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  412f6a:	00 00 00 
  412f6d:	0f 1f 00             	nopl   (%rax)

0000000000412f70 <_ZNK5boost16bad_lexical_cast4whatEv>:
        virtual const char *what() const BOOST_NOEXCEPT_OR_NOTHROW {
  412f70:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 412f70 <_ZNK5boost16bad_lexical_cast4whatEv>
  412f77:	49 bb 90 80 21 00 00 	movabs $0x218090,%r11
  412f7e:	00 00 00 
                   "source type value could not be interpreted as target";
  412f81:	48 ba 68 79 df ff ff 	movabs $0xffffffffffdf7968,%rdx
  412f88:	ff ff ff 
  412f8b:	4c 01 d8             	add    %r11,%rax
  412f8e:	48 01 d0             	add    %rdx,%rax
        }
  412f91:	c3                   	retq   
  412f92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  412f99:	00 00 00 
  412f9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000412fa0 <_ZN5boost6detail15sp_counted_base7destroyEv>:

    // destroy() is called when weak_count_ drops to zero.

    virtual void destroy() // nothrow
    {
        delete this;
  412fa0:	48 8b 07             	mov    (%rdi),%rax
  412fa3:	ff 60 08             	jmpq   *0x8(%rax)
  412fa6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  412fad:	00 00 00 

0000000000412fb0 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE6setbufEPcl>:
	_M_in_beg = __gbeg;
  412fb0:	48 89 77 08          	mov    %rsi,0x8(%rdi)
	_M_in_cur = __gnext;
  412fb4:	48 89 77 10          	mov    %rsi,0x10(%rdi)

template<class charT, class BufferT>
BufferT*
basic_pointerbuf<charT, BufferT>::setbuf(char_type* s, streamsize n)
{
   this->setg(s, s, s + n);
  412fb8:	48 01 d6             	add    %rdx,%rsi
basic_pointerbuf<charT, BufferT>::setbuf(char_type* s, streamsize n)
  412fbb:	48 89 f8             	mov    %rdi,%rax
   this->setg(s, s, s + n);
  412fbe:	48 89 77 18          	mov    %rsi,0x18(%rdi)
   return this;
}
  412fc2:	c3                   	retq   
  412fc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  412fca:	00 00 00 
  412fcd:	0f 1f 00             	nopl   (%rax)

0000000000412fd0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEED1Ev>:

template<class D> D * get_local_deleter( local_sp_deleter<D> * p );

//

template<class X> class sp_counted_impl_p: public sp_counted_base
  412fd0:	f3 c3                	repz retq 
  412fd2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  412fd9:	00 00 00 
  412fdc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000412fe0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEED1Ev>:
  412fe0:	f3 c3                	repz retq 
  412fe2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  412fe9:	00 00 00 
  412fec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000412ff0 <_ZN5boost3any6holderIfED1Ev>:
        class holder : public placeholder
  412ff0:	f3 c3                	repz retq 
  412ff2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  412ff9:	00 00 00 
  412ffc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413000 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode>:
typename basic_pointerbuf<charT, BufferT>::pos_type
basic_pointerbuf<charT, BufferT>::seekoff(off_type off, ::std::ios_base::seekdir way, ::std::ios_base::openmode which)
{
   typedef typename boost::int_t<sizeof(way) * CHAR_BIT>::least cast_type;

   if(which & ::std::ios_base::out)
  413000:	83 e1 10             	and    $0x10,%ecx
  413003:	75 43                	jne    413048 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  413005:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
      return pos_type(off_type(-1));
   std::ptrdiff_t size = this->egptr() - this->eback();
  413009:	4c 8b 47 18          	mov    0x18(%rdi),%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  41300d:	48 8b 47 10          	mov    0x10(%rdi),%rax
   std::ptrdiff_t size = this->egptr() - this->eback();
  413011:	49 29 c8             	sub    %rcx,%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  413014:	48 29 c8             	sub    %rcx,%rax
   charT* g = this->eback();
   switch(static_cast<cast_type>(way))
  413017:	83 fa 01             	cmp    $0x1,%edx
  41301a:	74 3c                	je     413058 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x58>
  41301c:	72 52                	jb     413070 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x70>
  41301e:	83 fa 02             	cmp    $0x2,%edx
  413021:	75 1d                	jne    413040 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
         return pos_type(off_type(-1));
      else
         this->setg(g, g + off, g + size);
      break;
   case ::std::ios_base::end:
      if((off < 0) || (off > size))
  413023:	48 89 f0             	mov    %rsi,%rax
  413026:	48 c1 e8 3f          	shr    $0x3f,%rax
  41302a:	84 c0                	test   %al,%al
  41302c:	75 1a                	jne    413048 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41302e:	49 39 f0             	cmp    %rsi,%r8
  413031:	7c 15                	jl     413048 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         return pos_type(off_type(-1));
      else
         this->setg(g, g + size - off, g + size);
  413033:	4c 89 c0             	mov    %r8,%rax
  413036:	48 29 f0             	sub    %rsi,%rax
  413039:	48 01 c1             	add    %rax,%rcx
  41303c:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
   }
#ifdef BOOST_MSVC
#pragma warning(push)
#pragma warning(disable:4244)
#endif
   return static_cast<pos_type>(this->gptr() - this->eback());
  413040:	31 d2                	xor    %edx,%edx
#ifdef BOOST_MSVC
#pragma warning(pop)
#endif
}
  413042:	c3                   	retq   
  413043:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return pos_type(off_type(-1));
  413048:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  41304f:	31 d2                	xor    %edx,%edx
  413051:	c3                   	retq   
  413052:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if((newpos < 0) || (newpos > size))
  413058:	48 01 f0             	add    %rsi,%rax
  41305b:	78 eb                	js     413048 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41305d:	49 39 c0             	cmp    %rax,%r8
  413060:	7c e6                	jl     413048 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + newpos, g + size);
  413062:	48 01 c1             	add    %rax,%rcx
  413065:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  413069:	eb d5                	jmp    413040 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  41306b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      if((off < 0) || (off > size))
  413070:	48 89 f0             	mov    %rsi,%rax
  413073:	48 c1 e8 3f          	shr    $0x3f,%rax
  413077:	84 c0                	test   %al,%al
  413079:	75 cd                	jne    413048 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41307b:	49 39 f0             	cmp    %rsi,%r8
  41307e:	7c c8                	jl     413048 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + off, g + size);
  413080:	48 01 f1             	add    %rsi,%rcx
  413083:	48 89 f0             	mov    %rsi,%rax
  413086:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  41308a:	eb b4                	jmp    413040 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  41308c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413090 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode>:

template<class charT, class BufferT>
typename basic_pointerbuf<charT, BufferT>::pos_type
basic_pointerbuf<charT, BufferT>::seekpos(pos_type sp, ::std::ios_base::openmode which)
{
   if(which & ::std::ios_base::out)
  413090:	83 e1 10             	and    $0x10,%ecx
  413093:	75 17                	jne    4130ac <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
  413095:	48 8b 57 08          	mov    0x8(%rdi),%rdx
      return pos_type(off_type(-1));
   off_type size = static_cast<off_type>(this->egptr() - this->eback());
  413099:	48 8b 47 18          	mov    0x18(%rdi),%rax
  41309d:	48 29 d0             	sub    %rdx,%rax
   charT* g = this->eback();
   if(off_type(sp) <= size)
  4130a0:	48 39 f0             	cmp    %rsi,%rax
  4130a3:	7c 07                	jl     4130ac <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
   {
      this->setg(g, g + off_type(sp), g + size);
  4130a5:	48 01 f2             	add    %rsi,%rdx
  4130a8:	48 89 57 10          	mov    %rdx,0x10(%rdi)
   }
   return pos_type(off_type(-1));
}
  4130ac:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  4130b3:	31 d2                	xor    %edx,%edx
  4130b5:	c3                   	retq   
  4130b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4130bd:	00 00 00 

00000000004130c0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE11get_deleterERKSt9type_info>:
    }

    virtual void * get_deleter( sp_typeinfo const & )
    {
        return 0;
    }
  4130c0:	31 c0                	xor    %eax,%eax
  4130c2:	c3                   	retq   
  4130c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4130ca:	00 00 00 
  4130cd:	0f 1f 00             	nopl   (%rax)

00000000004130d0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE17get_local_deleterERKSt9type_info>:

    virtual void * get_local_deleter( sp_typeinfo const & )
    {
        return 0;
    }
  4130d0:	31 c0                	xor    %eax,%eax
  4130d2:	c3                   	retq   
  4130d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4130da:	00 00 00 
  4130dd:	0f 1f 00             	nopl   (%rax)

00000000004130e0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE19get_untyped_deleterEv>:

    virtual void * get_untyped_deleter()
    {
        return 0;
    }
  4130e0:	31 c0                	xor    %eax,%eax
  4130e2:	c3                   	retq   
  4130e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4130ea:	00 00 00 
  4130ed:	0f 1f 00             	nopl   (%rax)

00000000004130f0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE11get_deleterERKSt9type_info>:
    }
  4130f0:	31 c0                	xor    %eax,%eax
  4130f2:	c3                   	retq   
  4130f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4130fa:	00 00 00 
  4130fd:	0f 1f 00             	nopl   (%rax)

0000000000413100 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE17get_local_deleterERKSt9type_info>:
    }
  413100:	31 c0                	xor    %eax,%eax
  413102:	c3                   	retq   
  413103:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41310a:	00 00 00 
  41310d:	0f 1f 00             	nopl   (%rax)

0000000000413110 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE19get_untyped_deleterEv>:
    }
  413110:	31 c0                	xor    %eax,%eax
  413112:	c3                   	retq   
  413113:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41311a:	00 00 00 
  41311d:	0f 1f 00             	nopl   (%rax)

0000000000413120 <_ZNK5boost3any6holderIfE4typeEv>:
            {
            }
#endif
        public: // queries

            virtual const boost::typeindex::type_info& type() const BOOST_NOEXCEPT
  413120:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413120 <_ZNK5boost3any6holderIfE4typeEv>
  413127:	49 bb e0 7e 21 00 00 	movabs $0x217ee0,%r11
  41312e:	00 00 00 
            {
                return boost::typeindex::type_id<ValueType>().type_info();
  413131:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  413138:	ff ff ff 
  41313b:	4c 01 d8             	add    %r11,%rax
  41313e:	48 8b 04 10          	mov    (%rax,%rdx,1),%rax
            }
  413142:	c3                   	retq   
  413143:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41314a:	00 00 00 
  41314d:	0f 1f 00             	nopl   (%rax)

0000000000413150 <_ZNK5boost15program_options11typed_valueIfcE10min_tokensEv>:

        std::string name() const;

        bool is_composing() const { return m_composing; }

        unsigned min_tokens() const
  413150:	31 c0                	xor    %eax,%eax
        {
            if (m_zero_tokens || !m_implicit_value.empty()) {
  413152:	80 bf 8b 00 00 00 00 	cmpb   $0x0,0x8b(%rdi)
  413159:	75 08                	jne    413163 <_ZNK5boost15program_options11typed_valueIfcE10min_tokensEv+0x13>
  41315b:	48 83 7f 60 00       	cmpq   $0x0,0x60(%rdi)
  413160:	0f 94 c0             	sete   %al
  413163:	0f b6 c0             	movzbl %al,%eax
                return 0;
            } else {
                return 1;
            }
        }
  413166:	c3                   	retq   
  413167:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41316e:	00 00 

0000000000413170 <_ZNK5boost15program_options11typed_valueIfcE10max_tokensEv>:

        unsigned max_tokens() const {
            if (m_multitoken) {
  413170:	80 bf 8a 00 00 00 00 	cmpb   $0x0,0x8a(%rdi)
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  413177:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
            if (m_multitoken) {
  41317c:	74 02                	je     413180 <_ZNK5boost15program_options11typed_valueIfcE10max_tokensEv+0x10>
            } else if (m_zero_tokens) {
                return 0;
            } else {
                return 1;
            }
        }
  41317e:	f3 c3                	repz retq 
            } else if (m_zero_tokens) {
  413180:	0f b6 87 8b 00 00 00 	movzbl 0x8b(%rdi),%eax
  413187:	83 f0 01             	xor    $0x1,%eax
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  41318a:	0f b6 c0             	movzbl %al,%eax
        }
  41318d:	c3                   	retq   
  41318e:	66 90                	xchg   %ax,%ax

0000000000413190 <_ZNK5boost15program_options11typed_valueIfcE12is_composingEv>:
        bool is_composing() const { return m_composing; }
  413190:	0f b6 87 88 00 00 00 	movzbl 0x88(%rdi),%eax
  413197:	c3                   	retq   
  413198:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41319f:	00 

00000000004131a0 <_ZNK5boost15program_options11typed_valueIfcE11is_requiredEv>:

        bool is_required() const { return m_required; }
  4131a0:	0f b6 87 8c 00 00 00 	movzbl 0x8c(%rdi),%eax
  4131a7:	c3                   	retq   
  4131a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4131af:	00 

00000000004131b0 <_ZNK5boost15program_options11typed_valueIfcE10value_typeEv>:
        void notify(const boost::any& value_store) const;

    public: // typed_value_base overrides
        
#ifndef BOOST_NO_RTTI
        const std::type_info& value_type() const
  4131b0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4131b0 <_ZNK5boost15program_options11typed_valueIfcE10value_typeEv>
  4131b7:	49 bb 50 7e 21 00 00 	movabs $0x217e50,%r11
  4131be:	00 00 00 
        {
            return typeid(T);
  4131c1:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  4131c8:	ff ff ff 
  4131cb:	4c 01 d8             	add    %r11,%rax
  4131ce:	48 8b 04 10          	mov    (%rax,%rdx,1),%rax
        }
  4131d2:	c3                   	retq   
  4131d3:	0f 1f 00             	nopl   (%rax)
  4131d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4131dd:	00 00 00 

00000000004131e0 <_ZThn8_NK5boost15program_options11typed_valueIfcE10value_typeEv>:
        const std::type_info& value_type() const
  4131e0:	48 83 ef 08          	sub    $0x8,%rdi
  4131e4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4131e4 <_ZThn8_NK5boost15program_options11typed_valueIfcE10value_typeEv+0x4>
  4131eb:	49 ba 1c 7e 21 00 00 	movabs $0x217e1c,%r10
  4131f2:	00 00 00 
  4131f5:	4d 01 d3             	add    %r10,%r11
  4131f8:	49 ba b0 81 de ff ff 	movabs $0xffffffffffde81b0,%r10
  4131ff:	ff ff ff 
  413202:	4d 01 da             	add    %r11,%r10
  413205:	41 ff e2             	jmpq   *%r10
  413208:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41320f:	00 

0000000000413210 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10min_tokensEv>:
        unsigned min_tokens() const
  413210:	31 c0                	xor    %eax,%eax
            if (m_zero_tokens || !m_implicit_value.empty()) {
  413212:	80 bf 8b 00 00 00 00 	cmpb   $0x0,0x8b(%rdi)
  413219:	75 08                	jne    413223 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10min_tokensEv+0x13>
  41321b:	48 83 7f 60 00       	cmpq   $0x0,0x60(%rdi)
  413220:	0f 94 c0             	sete   %al
  413223:	0f b6 c0             	movzbl %al,%eax
        }
  413226:	c3                   	retq   
  413227:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41322e:	00 00 

0000000000413230 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10max_tokensEv>:
            if (m_multitoken) {
  413230:	80 bf 8a 00 00 00 00 	cmpb   $0x0,0x8a(%rdi)
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  413237:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
            if (m_multitoken) {
  41323c:	74 02                	je     413240 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10max_tokensEv+0x10>
        }
  41323e:	f3 c3                	repz retq 
            } else if (m_zero_tokens) {
  413240:	0f b6 87 8b 00 00 00 	movzbl 0x8b(%rdi),%eax
  413247:	83 f0 01             	xor    $0x1,%eax
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  41324a:	0f b6 c0             	movzbl %al,%eax
        }
  41324d:	c3                   	retq   
  41324e:	66 90                	xchg   %ax,%ax

0000000000413250 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE12is_composingEv>:
        bool is_composing() const { return m_composing; }
  413250:	0f b6 87 88 00 00 00 	movzbl 0x88(%rdi),%eax
  413257:	c3                   	retq   
  413258:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41325f:	00 

0000000000413260 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE11is_requiredEv>:
        bool is_required() const { return m_required; }
  413260:	0f b6 87 8c 00 00 00 	movzbl 0x8c(%rdi),%eax
  413267:	c3                   	retq   
  413268:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41326f:	00 

0000000000413270 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv>:
        const std::type_info& value_type() const
  413270:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413270 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv>
  413277:	49 bb 90 7d 21 00 00 	movabs $0x217d90,%r11
  41327e:	00 00 00 
            return typeid(T);
  413281:	48 ba 60 f8 ff ff ff 	movabs $0xfffffffffffff860,%rdx
  413288:	ff ff ff 
  41328b:	4c 01 d8             	add    %r11,%rax
  41328e:	48 01 d0             	add    %rdx,%rax
        }
  413291:	c3                   	retq   
  413292:	0f 1f 40 00          	nopl   0x0(%rax)
  413296:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41329d:	00 00 00 

00000000004132a0 <_ZThn8_NK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv>:
        const std::type_info& value_type() const
  4132a0:	48 83 ef 08          	sub    $0x8,%rdi
  4132a4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4132a4 <_ZThn8_NK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv+0x4>
  4132ab:	49 ba 5c 7d 21 00 00 	movabs $0x217d5c,%r10
  4132b2:	00 00 00 
  4132b5:	4d 01 d3             	add    %r10,%r11
  4132b8:	49 ba 70 82 de ff ff 	movabs $0xffffffffffde8270,%r10
  4132bf:	ff ff ff 
  4132c2:	4d 01 da             	add    %r11,%r10
  4132c5:	41 ff e2             	jmpq   *%r10
  4132c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4132cf:	00 

00000000004132d0 <_ZN5boost9function1IvRKfE5dummy7nonnullEv>:
    // Sun C++ 5.3 can't handle the safe_bool idiom, so don't use it
    operator bool () const { return !this->empty(); }
#else
  private:
    struct dummy {
      void nonnull() {}
  4132d0:	f3 c3                	repz retq 
  4132d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4132d9:	00 00 00 
  4132dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004132e0 <_ZN5boost9function1IvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5dummy7nonnullEv>:
  4132e0:	f3 c3                	repz retq 
  4132e2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4132e9:	00 00 00 
  4132ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004132f0 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE6setbufEPcl>:
	_M_in_beg = __gbeg;
  4132f0:	48 89 77 08          	mov    %rsi,0x8(%rdi)
	_M_in_cur = __gnext;
  4132f4:	48 89 77 10          	mov    %rsi,0x10(%rdi)
   this->setg(s, s, s + n);
  4132f8:	48 01 d6             	add    %rdx,%rsi
basic_pointerbuf<charT, BufferT>::setbuf(char_type* s, streamsize n)
  4132fb:	48 89 f8             	mov    %rdi,%rax
   this->setg(s, s, s + n);
  4132fe:	48 89 77 18          	mov    %rsi,0x18(%rdi)
}
  413302:	c3                   	retq   
  413303:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41330a:	00 00 00 
  41330d:	0f 1f 00             	nopl   (%rax)

0000000000413310 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode>:
   if(which & ::std::ios_base::out)
  413310:	83 e1 10             	and    $0x10,%ecx
  413313:	75 43                	jne    413358 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  413315:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
   std::ptrdiff_t size = this->egptr() - this->eback();
  413319:	4c 8b 47 18          	mov    0x18(%rdi),%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  41331d:	48 8b 47 10          	mov    0x10(%rdi),%rax
   std::ptrdiff_t size = this->egptr() - this->eback();
  413321:	49 29 c8             	sub    %rcx,%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  413324:	48 29 c8             	sub    %rcx,%rax
   switch(static_cast<cast_type>(way))
  413327:	83 fa 01             	cmp    $0x1,%edx
  41332a:	74 3c                	je     413368 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x58>
  41332c:	72 52                	jb     413380 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x70>
  41332e:	83 fa 02             	cmp    $0x2,%edx
  413331:	75 1d                	jne    413350 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
      if((off < 0) || (off > size))
  413333:	48 89 f0             	mov    %rsi,%rax
  413336:	48 c1 e8 3f          	shr    $0x3f,%rax
  41333a:	84 c0                	test   %al,%al
  41333c:	75 1a                	jne    413358 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41333e:	49 39 f0             	cmp    %rsi,%r8
  413341:	7c 15                	jl     413358 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + size - off, g + size);
  413343:	4c 89 c0             	mov    %r8,%rax
  413346:	48 29 f0             	sub    %rsi,%rax
  413349:	48 01 c1             	add    %rax,%rcx
  41334c:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
   return static_cast<pos_type>(this->gptr() - this->eback());
  413350:	31 d2                	xor    %edx,%edx
}
  413352:	c3                   	retq   
  413353:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return pos_type(off_type(-1));
  413358:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  41335f:	31 d2                	xor    %edx,%edx
  413361:	c3                   	retq   
  413362:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if((newpos < 0) || (newpos > size))
  413368:	48 01 f0             	add    %rsi,%rax
  41336b:	78 eb                	js     413358 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41336d:	49 39 c0             	cmp    %rax,%r8
  413370:	7c e6                	jl     413358 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + newpos, g + size);
  413372:	48 01 c1             	add    %rax,%rcx
  413375:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  413379:	eb d5                	jmp    413350 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  41337b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      if((off < 0) || (off > size))
  413380:	48 89 f0             	mov    %rsi,%rax
  413383:	48 c1 e8 3f          	shr    $0x3f,%rax
  413387:	84 c0                	test   %al,%al
  413389:	75 cd                	jne    413358 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41338b:	49 39 f0             	cmp    %rsi,%r8
  41338e:	7c c8                	jl     413358 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + off, g + size);
  413390:	48 01 f1             	add    %rsi,%rcx
  413393:	48 89 f0             	mov    %rsi,%rax
  413396:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  41339a:	eb b4                	jmp    413350 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  41339c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004133a0 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode>:
   if(which & ::std::ios_base::out)
  4133a0:	83 e1 10             	and    $0x10,%ecx
  4133a3:	75 17                	jne    4133bc <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
  4133a5:	48 8b 57 08          	mov    0x8(%rdi),%rdx
   off_type size = static_cast<off_type>(this->egptr() - this->eback());
  4133a9:	48 8b 47 18          	mov    0x18(%rdi),%rax
  4133ad:	48 29 d0             	sub    %rdx,%rax
   if(off_type(sp) <= size)
  4133b0:	48 39 f0             	cmp    %rsi,%rax
  4133b3:	7c 07                	jl     4133bc <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
      this->setg(g, g + off_type(sp), g + size);
  4133b5:	48 01 f2             	add    %rsi,%rdx
  4133b8:	48 89 57 10          	mov    %rdx,0x10(%rdi)
}
  4133bc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  4133c3:	31 d2                	xor    %edx,%edx
  4133c5:	c3                   	retq   
  4133c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4133cd:	00 00 00 

00000000004133d0 <_ZNK5boost3any6holderIfE5cloneEv>:

            virtual placeholder * clone() const
  4133d0:	41 57                	push   %r15
  4133d2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 4133d0 <_ZNK5boost3any6holderIfE5cloneEv>
  4133d9:	53                   	push   %rbx
  4133da:	49 bb 30 7c 21 00 00 	movabs $0x217c30,%r11
  4133e1:	00 00 00 
            {
                return new holder(held);
  4133e4:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  4133eb:	ff ff ff 
            virtual placeholder * clone() const
  4133ee:	48 89 fb             	mov    %rdi,%rbx
  4133f1:	4d 01 df             	add    %r11,%r15
  4133f4:	48 83 ec 08          	sub    $0x8,%rsp
                return new holder(held);
  4133f8:	bf 10 00 00 00       	mov    $0x10,%edi
  4133fd:	4c 01 f8             	add    %r15,%rax
  413400:	ff d0                	callq  *%rax
              : held(value)
  413402:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  413409:	ff ff ff 
  41340c:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
  413411:	4c 01 fa             	add    %r15,%rdx
  413414:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  413419:	48 89 10             	mov    %rdx,(%rax)
            }
  41341c:	48 83 c4 08          	add    $0x8,%rsp
  413420:	5b                   	pop    %rbx
  413421:	41 5f                	pop    %r15
  413423:	c3                   	retq   
  413424:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41342b:	00 00 00 
  41342e:	66 90                	xchg   %ax,%ax

0000000000413430 <_ZNSt6vectorI5StateSaIS0_EED1Ev>:
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  413430:	48 8b 3f             	mov    (%rdi),%rdi
  413433:	48 8d 05 f6 ff ff ff 	lea    -0xa(%rip),%rax        # 413430 <_ZNSt6vectorI5StateSaIS0_EED1Ev>
  41343a:	49 bb d0 7b 21 00 00 	movabs $0x217bd0,%r11
  413441:	00 00 00 
  413444:	4c 01 d8             	add    %r11,%rax
	if (__p)
  413447:	48 85 ff             	test   %rdi,%rdi
  41344a:	74 14                	je     413460 <_ZNSt6vectorI5StateSaIS0_EED1Ev+0x30>
      ~vector() _GLIBCXX_NOEXCEPT
  41344c:	41 57                	push   %r15
  41344e:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  413455:	ff ff ff 
		      _M_get_Tp_allocator()); }
  413458:	41 5f                	pop    %r15
  41345a:	48 01 c2             	add    %rax,%rdx
  41345d:	ff e2                	jmpq   *%rdx
  41345f:	90                   	nop
  413460:	f3 c3                	repz retq 
  413462:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413469:	00 00 00 
  41346c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413470 <_ZN5boost15program_options11typed_valueIfcED1Ev>:
    class typed_value : public value_semantic_codecvt_helper<charT>
  413470:	41 57                	push   %r15
  413472:	55                   	push   %rbp
  413473:	48 8d 2d f6 ff ff ff 	lea    -0xa(%rip),%rbp        # 413470 <_ZN5boost15program_options11typed_valueIfcED1Ev>
  41347a:	49 bb 90 7b 21 00 00 	movabs $0x217b90,%r11
  413481:	00 00 00 
  413484:	48 b8 90 fb ff ff ff 	movabs $0xfffffffffffffb90,%rax
  41348b:	ff ff ff 
  41348e:	53                   	push   %rbx
  41348f:	4c 01 dd             	add    %r11,%rbp
  413492:	48 89 fb             	mov    %rdi,%rbx
  413495:	48 01 e8             	add    %rbp,%rax
  413498:	48 89 07             	mov    %rax,(%rdi)
  41349b:	48 83 c0 70          	add    $0x70,%rax
  41349f:	48 89 47 08          	mov    %rax,0x8(%rdi)
      if (vtable) {
  4134a3:	48 8b 87 90 00 00 00 	mov    0x90(%rdi),%rax
  4134aa:	48 85 c0             	test   %rax,%rax
  4134ad:	74 04                	je     4134b3 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x43>
        if (!this->has_trivial_copy_and_destroy())
  4134af:	a8 01                	test   $0x1,%al
  4134b1:	74 7d                	je     413530 <_ZN5boost15program_options11typed_valueIfcED1Ev+0xc0>
  4134b3:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4134b7:	48 8d 43 78          	lea    0x78(%rbx),%rax
	if (!_M_is_local())
  4134bb:	48 39 c7             	cmp    %rax,%rdi
  4134be:	74 12                	je     4134d2 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x62>
  4134c0:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4134c7:	ff ff ff 
  4134ca:	49 89 ef             	mov    %rbp,%r15
  4134cd:	48 01 e8             	add    %rbp,%rax
  4134d0:	ff d0                	callq  *%rax
            delete content;
  4134d2:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  4134d6:	48 85 ff             	test   %rdi,%rdi
  4134d9:	74 06                	je     4134e1 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x71>
  4134db:	48 8b 07             	mov    (%rdi),%rax
  4134de:	ff 50 08             	callq  *0x8(%rax)
  4134e1:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4134e5:	48 8d 43 50          	lea    0x50(%rbx),%rax
	if (!_M_is_local())
  4134e9:	48 39 c7             	cmp    %rax,%rdi
  4134ec:	74 12                	je     413500 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x90>
  4134ee:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4134f5:	ff ff ff 
  4134f8:	49 89 ef             	mov    %rbp,%r15
  4134fb:	48 01 e8             	add    %rbp,%rax
  4134fe:	ff d0                	callq  *%rax
  413500:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
  413504:	48 85 ff             	test   %rdi,%rdi
  413507:	74 06                	je     41350f <_ZN5boost15program_options11typed_valueIfcED1Ev+0x9f>
  413509:	48 8b 07             	mov    (%rdi),%rax
  41350c:	ff 50 08             	callq  *0x8(%rax)
  41350f:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413513:	48 83 c3 28          	add    $0x28,%rbx
	if (!_M_is_local())
  413517:	48 39 df             	cmp    %rbx,%rdi
  41351a:	74 44                	je     413560 <_ZN5boost15program_options11typed_valueIfcED1Ev+0xf0>
  41351c:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  413523:	ff ff ff 
  413526:	5b                   	pop    %rbx
  413527:	48 01 e8             	add    %rbp,%rax
  41352a:	5d                   	pop    %rbp
  41352b:	41 5f                	pop    %r15
  41352d:	ff e0                	jmpq   *%rax
  41352f:	90                   	nop
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  413530:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  413534:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  413537:	48 85 c0             	test   %rax,%rax
  41353a:	0f 84 73 ff ff ff    	je     4134b3 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x43>
          get_vtable()->clear(this->functor);
  413540:	48 8d bf 98 00 00 00 	lea    0x98(%rdi),%rdi
            base.manager(functor, functor, destroy_functor_tag);
  413547:	ba 02 00 00 00       	mov    $0x2,%edx
  41354c:	48 89 fe             	mov    %rdi,%rsi
  41354f:	ff d0                	callq  *%rax
  413551:	e9 5d ff ff ff       	jmpq   4134b3 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x43>
  413556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41355d:	00 00 00 
  413560:	5b                   	pop    %rbx
  413561:	5d                   	pop    %rbp
  413562:	41 5f                	pop    %r15
  413564:	c3                   	retq   
  413565:	90                   	nop
  413566:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41356d:	00 00 00 

0000000000413570 <_ZThn8_N5boost15program_options11typed_valueIfcED1Ev>:
  413570:	48 83 ef 08          	sub    $0x8,%rdi
  413574:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413574 <_ZThn8_N5boost15program_options11typed_valueIfcED1Ev+0x4>
  41357b:	49 ba 8c 7a 21 00 00 	movabs $0x217a8c,%r10
  413582:	00 00 00 
  413585:	4d 01 d3             	add    %r10,%r11
  413588:	49 ba 70 84 de ff ff 	movabs $0xffffffffffde8470,%r10
  41358f:	ff ff ff 
  413592:	4d 01 da             	add    %r11,%r10
  413595:	41 ff e2             	jmpq   *%r10
  413598:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41359f:	00 

00000000004135a0 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev>:
  4135a0:	41 57                	push   %r15
  4135a2:	55                   	push   %rbp
  4135a3:	48 8d 2d f6 ff ff ff 	lea    -0xa(%rip),%rbp        # 4135a0 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev>
  4135aa:	49 bb 60 7a 21 00 00 	movabs $0x217a60,%r11
  4135b1:	00 00 00 
  4135b4:	48 b8 f8 fa ff ff ff 	movabs $0xfffffffffffffaf8,%rax
  4135bb:	ff ff ff 
  4135be:	53                   	push   %rbx
  4135bf:	4c 01 dd             	add    %r11,%rbp
  4135c2:	48 89 fb             	mov    %rdi,%rbx
  4135c5:	48 01 e8             	add    %rbp,%rax
  4135c8:	48 89 07             	mov    %rax,(%rdi)
  4135cb:	48 83 c0 70          	add    $0x70,%rax
  4135cf:	48 89 47 08          	mov    %rax,0x8(%rdi)
      if (vtable) {
  4135d3:	48 8b 87 90 00 00 00 	mov    0x90(%rdi),%rax
  4135da:	48 85 c0             	test   %rax,%rax
  4135dd:	74 04                	je     4135e3 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x43>
        if (!this->has_trivial_copy_and_destroy())
  4135df:	a8 01                	test   $0x1,%al
  4135e1:	74 7d                	je     413660 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0xc0>
  4135e3:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4135e7:	48 8d 43 78          	lea    0x78(%rbx),%rax
	if (!_M_is_local())
  4135eb:	48 39 c7             	cmp    %rax,%rdi
  4135ee:	74 12                	je     413602 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x62>
  4135f0:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4135f7:	ff ff ff 
  4135fa:	49 89 ef             	mov    %rbp,%r15
  4135fd:	48 01 e8             	add    %rbp,%rax
  413600:	ff d0                	callq  *%rax
  413602:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  413606:	48 85 ff             	test   %rdi,%rdi
  413609:	74 06                	je     413611 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x71>
  41360b:	48 8b 07             	mov    (%rdi),%rax
  41360e:	ff 50 08             	callq  *0x8(%rax)
  413611:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413615:	48 8d 43 50          	lea    0x50(%rbx),%rax
	if (!_M_is_local())
  413619:	48 39 c7             	cmp    %rax,%rdi
  41361c:	74 12                	je     413630 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x90>
  41361e:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  413625:	ff ff ff 
  413628:	49 89 ef             	mov    %rbp,%r15
  41362b:	48 01 e8             	add    %rbp,%rax
  41362e:	ff d0                	callq  *%rax
  413630:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
  413634:	48 85 ff             	test   %rdi,%rdi
  413637:	74 06                	je     41363f <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x9f>
  413639:	48 8b 07             	mov    (%rdi),%rax
  41363c:	ff 50 08             	callq  *0x8(%rax)
  41363f:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413643:	48 83 c3 28          	add    $0x28,%rbx
	if (!_M_is_local())
  413647:	48 39 df             	cmp    %rbx,%rdi
  41364a:	74 44                	je     413690 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0xf0>
  41364c:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  413653:	ff ff ff 
  413656:	5b                   	pop    %rbx
  413657:	48 01 e8             	add    %rbp,%rax
  41365a:	5d                   	pop    %rbp
  41365b:	41 5f                	pop    %r15
  41365d:	ff e0                	jmpq   *%rax
  41365f:	90                   	nop
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  413660:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  413664:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  413667:	48 85 c0             	test   %rax,%rax
  41366a:	0f 84 73 ff ff ff    	je     4135e3 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x43>
          get_vtable()->clear(this->functor);
  413670:	48 8d bf 98 00 00 00 	lea    0x98(%rdi),%rdi
            base.manager(functor, functor, destroy_functor_tag);
  413677:	ba 02 00 00 00       	mov    $0x2,%edx
  41367c:	48 89 fe             	mov    %rdi,%rsi
  41367f:	ff d0                	callq  *%rax
  413681:	e9 5d ff ff ff       	jmpq   4135e3 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x43>
  413686:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41368d:	00 00 00 
  413690:	5b                   	pop    %rbx
  413691:	5d                   	pop    %rbp
  413692:	41 5f                	pop    %r15
  413694:	c3                   	retq   
  413695:	90                   	nop
  413696:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41369d:	00 00 00 

00000000004136a0 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev>:
  4136a0:	48 83 ef 08          	sub    $0x8,%rdi
  4136a4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4136a4 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x4>
  4136ab:	49 ba 5c 79 21 00 00 	movabs $0x21795c,%r10
  4136b2:	00 00 00 
  4136b5:	4d 01 d3             	add    %r10,%r11
  4136b8:	49 ba a0 85 de ff ff 	movabs $0xffffffffffde85a0,%r10
  4136bf:	ff ff ff 
  4136c2:	4d 01 da             	add    %r11,%r10
  4136c5:	41 ff e2             	jmpq   *%r10
  4136c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4136cf:	00 

00000000004136d0 <_ZN5boost3any6holderIfED0Ev>:
        class holder : public placeholder
  4136d0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4136d0 <_ZN5boost3any6holderIfED0Ev>
  4136d7:	49 bb 30 79 21 00 00 	movabs $0x217930,%r11
  4136de:	00 00 00 
  4136e1:	41 57                	push   %r15
  4136e3:	48 ba d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rdx
  4136ea:	ff ff ff 
  4136ed:	be 10 00 00 00       	mov    $0x10,%esi
  4136f2:	4c 01 d8             	add    %r11,%rax
  4136f5:	41 5f                	pop    %r15
  4136f7:	48 01 c2             	add    %rax,%rdx
  4136fa:	ff e2                	jmpq   *%rdx
  4136fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413700 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEED0Ev>:
template<class X> class sp_counted_impl_p: public sp_counted_base
  413700:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413700 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEED0Ev>
  413707:	49 bb 00 79 21 00 00 	movabs $0x217900,%r11
  41370e:	00 00 00 
  413711:	41 57                	push   %r15
  413713:	48 ba d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rdx
  41371a:	ff ff ff 
  41371d:	be 18 00 00 00       	mov    $0x18,%esi
  413722:	4c 01 d8             	add    %r11,%rax
  413725:	41 5f                	pop    %r15
  413727:	48 01 c2             	add    %rax,%rdx
  41372a:	ff e2                	jmpq   *%rdx
  41372c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413730 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEED0Ev>:
  413730:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413730 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEED0Ev>
  413737:	49 bb d0 78 21 00 00 	movabs $0x2178d0,%r11
  41373e:	00 00 00 
  413741:	41 57                	push   %r15
  413743:	48 ba d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rdx
  41374a:	ff ff ff 
  41374d:	be 18 00 00 00       	mov    $0x18,%esi
  413752:	4c 01 d8             	add    %r11,%rax
  413755:	41 5f                	pop    %r15
  413757:	48 01 c2             	add    %rax,%rdx
  41375a:	ff e2                	jmpq   *%rdx
  41375c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413760 <_ZN5boost15program_options11typed_valueIfcED0Ev>:
  413760:	41 57                	push   %r15
  413762:	55                   	push   %rbp
  413763:	49 bb a0 78 21 00 00 	movabs $0x2178a0,%r11
  41376a:	00 00 00 
  41376d:	53                   	push   %rbx
  41376e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413760 <_ZN5boost15program_options11typed_valueIfcED0Ev>
  413775:	48 b8 70 84 de ff ff 	movabs $0xffffffffffde8470,%rax
  41377c:	ff ff ff 
  41377f:	48 89 fd             	mov    %rdi,%rbp
  413782:	4c 01 db             	add    %r11,%rbx
  413785:	48 01 d8             	add    %rbx,%rax
  413788:	ff d0                	callq  *%rax
  41378a:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  413791:	ff ff ff 
  413794:	48 89 ef             	mov    %rbp,%rdi
  413797:	be b0 00 00 00       	mov    $0xb0,%esi
  41379c:	48 01 d8             	add    %rbx,%rax
  41379f:	5b                   	pop    %rbx
  4137a0:	5d                   	pop    %rbp
  4137a1:	41 5f                	pop    %r15
  4137a3:	ff e0                	jmpq   *%rax
  4137a5:	90                   	nop
  4137a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4137ad:	00 00 00 

00000000004137b0 <_ZThn8_N5boost15program_options11typed_valueIfcED0Ev>:
  4137b0:	48 83 ef 08          	sub    $0x8,%rdi
  4137b4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4137b4 <_ZThn8_N5boost15program_options11typed_valueIfcED0Ev+0x4>
  4137bb:	49 ba 4c 78 21 00 00 	movabs $0x21784c,%r10
  4137c2:	00 00 00 
  4137c5:	4d 01 d3             	add    %r10,%r11
  4137c8:	49 ba 60 87 de ff ff 	movabs $0xffffffffffde8760,%r10
  4137cf:	ff ff ff 
  4137d2:	4d 01 da             	add    %r11,%r10
  4137d5:	41 ff e2             	jmpq   *%r10
  4137d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4137df:	00 

00000000004137e0 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev>:
  4137e0:	41 57                	push   %r15
  4137e2:	55                   	push   %rbp
  4137e3:	49 bb 20 78 21 00 00 	movabs $0x217820,%r11
  4137ea:	00 00 00 
  4137ed:	53                   	push   %rbx
  4137ee:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4137e0 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev>
  4137f5:	48 b8 a0 85 de ff ff 	movabs $0xffffffffffde85a0,%rax
  4137fc:	ff ff ff 
  4137ff:	48 89 fd             	mov    %rdi,%rbp
  413802:	4c 01 db             	add    %r11,%rbx
  413805:	48 01 d8             	add    %rbx,%rax
  413808:	ff d0                	callq  *%rax
  41380a:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  413811:	ff ff ff 
  413814:	48 89 ef             	mov    %rbp,%rdi
  413817:	be b0 00 00 00       	mov    $0xb0,%esi
  41381c:	48 01 d8             	add    %rbx,%rax
  41381f:	5b                   	pop    %rbx
  413820:	5d                   	pop    %rbp
  413821:	41 5f                	pop    %r15
  413823:	ff e0                	jmpq   *%rax
  413825:	90                   	nop
  413826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41382d:	00 00 00 

0000000000413830 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev>:
  413830:	48 83 ef 08          	sub    $0x8,%rdi
  413834:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413834 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev+0x4>
  41383b:	49 ba cc 77 21 00 00 	movabs $0x2177cc,%r10
  413842:	00 00 00 
  413845:	4d 01 d3             	add    %r10,%r11
  413848:	49 ba e0 87 de ff ff 	movabs $0xffffffffffde87e0,%r10
  41384f:	ff ff ff 
  413852:	4d 01 da             	add    %r11,%r10
  413855:	41 ff e2             	jmpq   *%r10
  413858:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41385f:	00 

0000000000413860 <_ZN5boost15program_options5errorD1Ev>:
            return text.substr(i);
        }
    }

    /** Base class for all errors in the library. */
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  413860:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413860 <_ZN5boost15program_options5errorD1Ev>
  413867:	49 bb a0 77 21 00 00 	movabs $0x2177a0,%r11
  41386e:	00 00 00 
  413871:	48 ba 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rdx
  413878:	ff ff ff 
  41387b:	41 57                	push   %r15
  41387d:	4c 01 d8             	add    %r11,%rax
  413880:	48 01 c2             	add    %rax,%rdx
  413883:	48 89 17             	mov    %rdx,(%rdi)
  413886:	48 ba d0 ea dd ff ff 	movabs $0xffffffffffddead0,%rdx
  41388d:	ff ff ff 
  413890:	41 5f                	pop    %r15
  413892:	48 01 c2             	add    %rax,%rdx
  413895:	ff e2                	jmpq   *%rdx
  413897:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41389e:	00 00 

00000000004138a0 <_ZN5boost15program_options5errorD0Ev>:
  4138a0:	41 57                	push   %r15
  4138a2:	55                   	push   %rbp
  4138a3:	49 bb 60 77 21 00 00 	movabs $0x217760,%r11
  4138aa:	00 00 00 
  4138ad:	53                   	push   %rbx
  4138ae:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4138a0 <_ZN5boost15program_options5errorD0Ev>
  4138b5:	48 b8 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rax
  4138bc:	ff ff ff 
  4138bf:	48 89 fd             	mov    %rdi,%rbp
  4138c2:	4c 01 db             	add    %r11,%rbx
  4138c5:	48 01 d8             	add    %rbx,%rax
  4138c8:	49 89 df             	mov    %rbx,%r15
  4138cb:	48 89 07             	mov    %rax,(%rdi)
  4138ce:	48 b8 d0 ea dd ff ff 	movabs $0xffffffffffddead0,%rax
  4138d5:	ff ff ff 
  4138d8:	48 01 d8             	add    %rbx,%rax
  4138db:	ff d0                	callq  *%rax
  4138dd:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  4138e4:	ff ff ff 
  4138e7:	48 89 ef             	mov    %rbp,%rdi
  4138ea:	be 10 00 00 00       	mov    $0x10,%esi
  4138ef:	48 01 d8             	add    %rbx,%rax
  4138f2:	5b                   	pop    %rbx
  4138f3:	5d                   	pop    %rbp
  4138f4:	41 5f                	pop    %r15
  4138f6:	ff e0                	jmpq   *%rax
  4138f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4138ff:	00 

0000000000413900 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED1Ev>:
        class basic_unlockedbuf : public basic_pointerbuf<CharT, BufferType> {
  413900:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413900 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED1Ev>
  413907:	49 bb 00 77 21 00 00 	movabs $0x217700,%r11
  41390e:	00 00 00 
      { }
  413911:	48 ba 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rdx
  413918:	ff ff ff 
  41391b:	41 57                	push   %r15
  41391d:	48 83 c7 38          	add    $0x38,%rdi
  413921:	4c 01 d8             	add    %r11,%rax
  413924:	48 8b 14 10          	mov    (%rax,%rdx,1),%rdx
  413928:	48 83 c2 10          	add    $0x10,%rdx
  41392c:	48 89 57 c8          	mov    %rdx,-0x38(%rdi)
  413930:	48 ba 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rdx
  413937:	ff ff ff 
  41393a:	41 5f                	pop    %r15
  41393c:	48 01 c2             	add    %rax,%rdx
  41393f:	ff e2                	jmpq   *%rdx
  413941:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413948:	00 00 00 
  41394b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000413950 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED0Ev>:
  413950:	41 57                	push   %r15
  413952:	55                   	push   %rbp
  413953:	49 bb b0 76 21 00 00 	movabs $0x2176b0,%r11
  41395a:	00 00 00 
  41395d:	53                   	push   %rbx
  41395e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413950 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED0Ev>
  413965:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  41396c:	ff ff ff 
  41396f:	48 89 fd             	mov    %rdi,%rbp
  413972:	48 8d 7f 38          	lea    0x38(%rdi),%rdi
  413976:	4c 01 db             	add    %r11,%rbx
  413979:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  41397d:	49 89 df             	mov    %rbx,%r15
  413980:	48 83 c0 10          	add    $0x10,%rax
  413984:	48 89 47 c8          	mov    %rax,-0x38(%rdi)
  413988:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  41398f:	ff ff ff 
  413992:	48 01 d8             	add    %rbx,%rax
  413995:	ff d0                	callq  *%rax
  413997:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  41399e:	ff ff ff 
  4139a1:	48 89 ef             	mov    %rbp,%rdi
  4139a4:	be 40 00 00 00       	mov    $0x40,%esi
  4139a9:	48 01 d8             	add    %rbx,%rax
  4139ac:	5b                   	pop    %rbx
  4139ad:	5d                   	pop    %rbp
  4139ae:	41 5f                	pop    %r15
  4139b0:	ff e0                	jmpq   *%rax
  4139b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4139b9:	00 00 00 
  4139bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004139c0 <_ZN5boost16bad_lexical_castD1Ev>:
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  4139c0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4139c0 <_ZN5boost16bad_lexical_castD1Ev>
  4139c7:	49 bb 40 76 21 00 00 	movabs $0x217640,%r11
  4139ce:	00 00 00 
        {}
  4139d1:	48 ba 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rdx
  4139d8:	ff ff ff 
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  4139db:	41 57                	push   %r15
  4139dd:	4c 01 d8             	add    %r11,%rax
        {}
  4139e0:	48 01 c2             	add    %rax,%rdx
  4139e3:	48 89 17             	mov    %rdx,(%rdi)
  4139e6:	48 ba d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rdx
  4139ed:	ff ff ff 
  4139f0:	41 5f                	pop    %r15
  4139f2:	48 01 c2             	add    %rax,%rdx
  4139f5:	ff e2                	jmpq   *%rdx
  4139f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4139fe:	00 00 

0000000000413a00 <_ZN5boost16bad_lexical_castD0Ev>:
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  413a00:	41 57                	push   %r15
  413a02:	55                   	push   %rbp
  413a03:	49 bb 00 76 21 00 00 	movabs $0x217600,%r11
  413a0a:	00 00 00 
  413a0d:	53                   	push   %rbx
  413a0e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413a00 <_ZN5boost16bad_lexical_castD0Ev>
        {}
  413a15:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  413a1c:	ff ff ff 
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  413a1f:	48 89 fd             	mov    %rdi,%rbp
  413a22:	4c 01 db             	add    %r11,%rbx
        {}
  413a25:	48 01 d8             	add    %rbx,%rax
  413a28:	49 89 df             	mov    %rbx,%r15
  413a2b:	48 89 07             	mov    %rax,(%rdi)
  413a2e:	48 b8 d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rax
  413a35:	ff ff ff 
  413a38:	48 01 d8             	add    %rbx,%rax
  413a3b:	ff d0                	callq  *%rax
  413a3d:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  413a44:	ff ff ff 
  413a47:	48 89 ef             	mov    %rbp,%rdi
  413a4a:	be 18 00 00 00       	mov    $0x18,%esi
  413a4f:	48 01 d8             	add    %rbx,%rax
  413a52:	5b                   	pop    %rbx
  413a53:	5d                   	pop    %rbp
  413a54:	41 5f                	pop    %r15
  413a56:	ff e0                	jmpq   *%rax
  413a58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413a5f:	00 

0000000000413a60 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev>:
            error_info_injector( T const & x ):
                T(x)
                {
                }

            ~error_info_injector() throw()
  413a60:	41 57                	push   %r15
  413a62:	55                   	push   %rbp
  413a63:	49 bb a0 75 21 00 00 	movabs $0x2175a0,%r11
  413a6a:	00 00 00 
  413a6d:	53                   	push   %rbx
  413a6e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413a60 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev>
                {
                }
  413a75:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  413a7c:	ff ff ff 
            ~error_info_injector() throw()
  413a7f:	48 89 fd             	mov    %rdi,%rbp
  413a82:	4c 01 db             	add    %r11,%rbx
                }
  413a85:	48 01 d8             	add    %rbx,%rax
  413a88:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  413a8b:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413a92:	ff ff ff 
  413a95:	48 01 d8             	add    %rbx,%rax
  413a98:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  413a9c:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  413aa0:	48 85 ff             	test   %rdi,%rdi
  413aa3:	74 06                	je     413aab <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev+0x4b>
  413aa5:	48 8b 07             	mov    (%rdi),%rax
  413aa8:	ff 50 20             	callq  *0x20(%rax)
  413aab:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  413ab2:	ff ff ff 
  413ab5:	48 89 ef             	mov    %rbp,%rdi
  413ab8:	48 01 d8             	add    %rbx,%rax
  413abb:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413abf:	48 b8 d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rax
  413ac6:	ff ff ff 
  413ac9:	48 01 d8             	add    %rbx,%rax
                }
  413acc:	5b                   	pop    %rbx
  413acd:	5d                   	pop    %rbp
  413ace:	41 5f                	pop    %r15
  413ad0:	ff e0                	jmpq   *%rax
  413ad2:	0f 1f 40 00          	nopl   0x0(%rax)
  413ad6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413add:	00 00 00 

0000000000413ae0 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev>:
            ~error_info_injector() throw()
  413ae0:	48 83 ef 18          	sub    $0x18,%rdi
  413ae4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413ae4 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev+0x4>
  413aeb:	49 ba 1c 75 21 00 00 	movabs $0x21751c,%r10
  413af2:	00 00 00 
  413af5:	4d 01 d3             	add    %r10,%r11
  413af8:	49 ba 60 8a de ff ff 	movabs $0xffffffffffde8a60,%r10
  413aff:	ff ff ff 
  413b02:	4d 01 da             	add    %r11,%r10
  413b05:	41 ff e2             	jmpq   *%r10
  413b08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413b0f:	00 

0000000000413b10 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv>:
                {
                return new clone_impl(*this,clone_tag());
                }

            void
            rethrow() const
  413b10:	41 57                	push   %r15
  413b12:	41 55                	push   %r13
  413b14:	49 bb f0 74 21 00 00 	movabs $0x2174f0,%r11
  413b1b:	00 00 00 
  413b1e:	41 54                	push   %r12
  413b20:	55                   	push   %rbp
                {
                throw*this;
  413b21:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  413b28:	ff ff ff 
            rethrow() const
  413b2b:	53                   	push   %rbx
  413b2c:	48 8d 1d dd ff ff ff 	lea    -0x23(%rip),%rbx        # 413b10 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv>
  413b33:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  413b36:	bf 48 00 00 00       	mov    $0x48,%edi
    class BOOST_SYMBOL_VISIBLE bad_lexical_cast :
  413b3b:	49 bd 68 ef ff ff ff 	movabs $0xffffffffffffef68,%r13
  413b42:	ff ff ff 
  413b45:	4c 01 db             	add    %r11,%rbx
  413b48:	48 01 d8             	add    %rbx,%rax
  413b4b:	49 89 df             	mov    %rbx,%r15
  413b4e:	ff d0                	callq  *%rax
  413b50:	48 89 c5             	mov    %rax,%rbp
        clone_base
  413b53:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  413b5a:	ff ff ff 
                px_(x.px_)
  413b5d:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
        clone_base
  413b62:	48 01 d8             	add    %rbx,%rax
  413b65:	48 89 45 40          	mov    %rax,0x40(%rbp)
  413b69:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
                px_(x.px_)
  413b6e:	48 89 7d 20          	mov    %rdi,0x20(%rbp)
  413b72:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413b76:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  413b7b:	48 89 45 08          	mov    %rax,0x8(%rbp)
  413b7f:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  413b84:	48 89 45 10          	mov    %rax,0x10(%rbp)
    exception
  413b88:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413b8f:	ff ff ff 
  413b92:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  413b95:	48 85 ff             	test   %rdi,%rdi
    exception
  413b98:	48 89 45 18          	mov    %rax,0x18(%rbp)
                if( px_ )
  413b9c:	74 06                	je     413ba4 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv+0x94>
                    px_->add_ref();
  413b9e:	48 8b 07             	mov    (%rdi),%rax
  413ba1:	ff 50 18             	callq  *0x18(%rax)
    exception
  413ba4:	41 8b 44 24 38       	mov    0x38(%r12),%eax
                throw*this;
  413ba9:	48 89 ef             	mov    %rbp,%rdi
  413bac:	49 89 df             	mov    %rbx,%r15
    exception
  413baf:	f3 41 0f 6f 44 24 28 	movdqu 0x28(%r12),%xmm0
  413bb6:	89 45 38             	mov    %eax,0x38(%rbp)
        clone_impl:
  413bb9:	48 b8 b0 f0 ff ff ff 	movabs $0xfffffffffffff0b0,%rax
  413bc0:	ff ff ff 
  413bc3:	48 01 d8             	add    %rbx,%rax
  413bc6:	48 8d 50 38          	lea    0x38(%rax),%rdx
  413bca:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413bce:	48 83 c0 70          	add    $0x70,%rax
  413bd2:	48 89 45 40          	mov    %rax,0x40(%rbp)
                throw*this;
  413bd6:	48 b8 c0 9b de ff ff 	movabs $0xffffffffffde9bc0,%rax
  413bdd:	ff ff ff 
        clone_impl:
  413be0:	48 89 55 18          	mov    %rdx,0x18(%rbp)
                throw*this;
  413be4:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  413be8:	48 b8 d8 f8 ff ff ff 	movabs $0xfffffffffffff8d8,%rax
  413bef:	ff ff ff 
  413bf2:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  413bf6:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  413bfd:	ff ff ff 
    exception
  413c00:	0f 11 45 28          	movups %xmm0,0x28(%rbp)
                throw*this;
  413c04:	48 01 d8             	add    %rbx,%rax
  413c07:	ff d0                	callq  *%rax
  413c09:	49 89 c4             	mov    %rax,%r12
        {}
  413c0c:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  413c11:	48 ba d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rdx
  413c18:	ff ff ff 
  413c1b:	48 89 ef             	mov    %rbp,%rdi
  413c1e:	49 89 df             	mov    %rbx,%r15
  413c21:	48 01 da             	add    %rbx,%rdx
  413c24:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413c28:	ff d2                	callq  *%rdx
  413c2a:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  413c31:	ff ff ff 
  413c34:	48 89 ef             	mov    %rbp,%rdi
  413c37:	48 01 da             	add    %rbx,%rdx
  413c3a:	ff d2                	callq  *%rdx
  413c3c:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  413c43:	ff ff ff 
  413c46:	4c 89 e7             	mov    %r12,%rdi
  413c49:	48 01 d8             	add    %rbx,%rax
  413c4c:	ff d0                	callq  *%rax
  413c4e:	66 90                	xchg   %ax,%ax

0000000000413c50 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv>:
            rethrow() const
  413c50:	4c 8b 17             	mov    (%rdi),%r10
  413c53:	49 03 7a e0          	add    -0x20(%r10),%rdi
  413c57:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413c57 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv+0x7>
  413c5e:	49 ba a9 73 21 00 00 	movabs $0x2173a9,%r10
  413c65:	00 00 00 
  413c68:	4d 01 d3             	add    %r10,%r11
  413c6b:	49 ba 10 8b de ff ff 	movabs $0xffffffffffde8b10,%r10
  413c72:	ff ff ff 
  413c75:	4d 01 da             	add    %r11,%r10
  413c78:	41 ff e2             	jmpq   *%r10
  413c7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000413c80 <_ZN5boost17bad_function_callD1Ev>:

/**
 * The bad_function_call exception class is thrown when a boost::function
 * object is invoked
 */
class bad_function_call : public std::runtime_error
  413c80:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413c80 <_ZN5boost17bad_function_callD1Ev>
  413c87:	49 bb 80 73 21 00 00 	movabs $0x217380,%r11
  413c8e:	00 00 00 
  413c91:	48 ba 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rdx
  413c98:	ff ff ff 
  413c9b:	41 57                	push   %r15
  413c9d:	4c 01 d8             	add    %r11,%rax
  413ca0:	48 01 c2             	add    %rax,%rdx
  413ca3:	48 89 17             	mov    %rdx,(%rdi)
  413ca6:	48 ba 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rdx
  413cad:	ff ff ff 
  413cb0:	41 5f                	pop    %r15
  413cb2:	48 01 c2             	add    %rax,%rdx
  413cb5:	ff e2                	jmpq   *%rdx
  413cb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  413cbe:	00 00 

0000000000413cc0 <_ZN5boost17bad_function_callD0Ev>:
  413cc0:	41 57                	push   %r15
  413cc2:	55                   	push   %rbp
  413cc3:	49 bb 40 73 21 00 00 	movabs $0x217340,%r11
  413cca:	00 00 00 
  413ccd:	53                   	push   %rbx
  413cce:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413cc0 <_ZN5boost17bad_function_callD0Ev>
  413cd5:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  413cdc:	ff ff ff 
  413cdf:	48 89 fd             	mov    %rdi,%rbp
  413ce2:	4c 01 db             	add    %r11,%rbx
  413ce5:	48 01 d8             	add    %rbx,%rax
  413ce8:	49 89 df             	mov    %rbx,%r15
  413ceb:	48 89 07             	mov    %rax,(%rdi)
  413cee:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  413cf5:	ff ff ff 
  413cf8:	48 01 d8             	add    %rbx,%rax
  413cfb:	ff d0                	callq  *%rax
  413cfd:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  413d04:	ff ff ff 
  413d07:	48 89 ef             	mov    %rbp,%rdi
  413d0a:	be 10 00 00 00       	mov    $0x10,%esi
  413d0f:	48 01 d8             	add    %rbx,%rax
  413d12:	5b                   	pop    %rbx
  413d13:	5d                   	pop    %rbp
  413d14:	41 5f                	pop    %r15
  413d16:	ff e0                	jmpq   *%rax
  413d18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413d1f:	00 

0000000000413d20 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev>:
            ~error_info_injector() throw()
  413d20:	41 57                	push   %r15
  413d22:	55                   	push   %rbp
  413d23:	49 bb e0 72 21 00 00 	movabs $0x2172e0,%r11
  413d2a:	00 00 00 
  413d2d:	53                   	push   %rbx
  413d2e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413d20 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev>
                }
  413d35:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  413d3c:	ff ff ff 
            ~error_info_injector() throw()
  413d3f:	48 89 fd             	mov    %rdi,%rbp
  413d42:	4c 01 db             	add    %r11,%rbx
                }
  413d45:	48 01 d8             	add    %rbx,%rax
  413d48:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  413d4b:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413d52:	ff ff ff 
  413d55:	48 01 d8             	add    %rbx,%rax
  413d58:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  413d5c:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  413d60:	48 85 ff             	test   %rdi,%rdi
  413d63:	74 06                	je     413d6b <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev+0x4b>
  413d65:	48 8b 07             	mov    (%rdi),%rax
  413d68:	ff 50 20             	callq  *0x20(%rax)
  413d6b:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  413d72:	ff ff ff 
  413d75:	48 89 ef             	mov    %rbp,%rdi
  413d78:	48 01 d8             	add    %rbx,%rax
  413d7b:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413d7f:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  413d86:	ff ff ff 
  413d89:	48 01 d8             	add    %rbx,%rax
                }
  413d8c:	5b                   	pop    %rbx
  413d8d:	5d                   	pop    %rbp
  413d8e:	41 5f                	pop    %r15
  413d90:	ff e0                	jmpq   *%rax
  413d92:	0f 1f 40 00          	nopl   0x0(%rax)
  413d96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413d9d:	00 00 00 

0000000000413da0 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev>:
            ~error_info_injector() throw()
  413da0:	48 83 ef 10          	sub    $0x10,%rdi
  413da4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413da4 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev+0x4>
  413dab:	49 ba 5c 72 21 00 00 	movabs $0x21725c,%r10
  413db2:	00 00 00 
  413db5:	4d 01 d3             	add    %r10,%r11
  413db8:	49 ba 20 8d de ff ff 	movabs $0xffffffffffde8d20,%r10
  413dbf:	ff ff ff 
  413dc2:	4d 01 da             	add    %r11,%r10
  413dc5:	41 ff e2             	jmpq   *%r10
  413dc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413dcf:	00 

0000000000413dd0 <_ZN4YAML9ExceptionD1Ev>:

class Exception : public std::runtime_error {
 public:
  Exception(const Mark& mark_, const std::string& msg_)
      : std::runtime_error(build_what(mark_, msg_)), mark(mark_), msg(msg_) {}
  virtual ~Exception() throw() {}
  413dd0:	41 57                	push   %r15
  413dd2:	55                   	push   %rbp
  413dd3:	49 bb 30 72 21 00 00 	movabs $0x217230,%r11
  413dda:	00 00 00 
  413ddd:	53                   	push   %rbx
  413dde:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413dd0 <_ZN4YAML9ExceptionD1Ev>
  413de5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  413dec:	ff ff ff 
  413def:	48 89 fd             	mov    %rdi,%rbp
  413df2:	4c 01 db             	add    %r11,%rbx
  413df5:	48 01 d8             	add    %rbx,%rax
  413df8:	48 89 07             	mov    %rax,(%rdi)
  413dfb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413dff:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  413e03:	48 39 c7             	cmp    %rax,%rdi
  413e06:	74 12                	je     413e1a <_ZN4YAML9ExceptionD1Ev+0x4a>
  413e08:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  413e0f:	ff ff ff 
  413e12:	49 89 df             	mov    %rbx,%r15
  413e15:	48 01 d8             	add    %rbx,%rax
  413e18:	ff d0                	callq  *%rax
  413e1a:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  413e21:	ff ff ff 
  413e24:	48 89 ef             	mov    %rbp,%rdi
  413e27:	48 01 d8             	add    %rbx,%rax
  413e2a:	5b                   	pop    %rbx
  413e2b:	5d                   	pop    %rbp
  413e2c:	41 5f                	pop    %r15
  413e2e:	ff e0                	jmpq   *%rax

0000000000413e30 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv>:
            rethrow() const
  413e30:	41 57                	push   %r15
  413e32:	41 55                	push   %r13
  413e34:	49 bb d0 71 21 00 00 	movabs $0x2171d0,%r11
  413e3b:	00 00 00 
  413e3e:	41 54                	push   %r12
  413e40:	55                   	push   %rbp
                throw*this;
  413e41:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  413e48:	ff ff ff 
            rethrow() const
  413e4b:	53                   	push   %rbx
  413e4c:	48 8d 1d dd ff ff ff 	lea    -0x23(%rip),%rbx        # 413e30 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv>
  413e53:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  413e56:	bf 40 00 00 00       	mov    $0x40,%edi
  413e5b:	49 bd 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%r13
  413e62:	ff ff ff 
  413e65:	4c 01 db             	add    %r11,%rbx
  413e68:	49 89 df             	mov    %rbx,%r15
  413e6b:	48 01 d8             	add    %rbx,%rax
  413e6e:	ff d0                	callq  *%rax
  413e70:	48 89 c5             	mov    %rax,%rbp
        clone_base
  413e73:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  413e7a:	ff ff ff 
  413e7d:	4c 89 e6             	mov    %r12,%rsi
  413e80:	48 01 d8             	add    %rbx,%rax
  413e83:	48 89 ef             	mov    %rbp,%rdi
  413e86:	48 89 45 38          	mov    %rax,0x38(%rbp)
  413e8a:	48 b8 f0 e8 dd ff ff 	movabs $0xffffffffffdde8f0,%rax
  413e91:	ff ff ff 
  413e94:	48 01 d8             	add    %rbx,%rax
  413e97:	ff d0                	callq  *%rax
  413e99:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
                px_(x.px_)
  413e9e:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
  413ea3:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  413ea7:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413eae:	ff ff ff 
  413eb1:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  413eb4:	48 85 ff             	test   %rdi,%rdi
                px_(x.px_)
  413eb7:	48 89 7d 18          	mov    %rdi,0x18(%rbp)
    exception
  413ebb:	48 89 45 10          	mov    %rax,0x10(%rbp)
                if( px_ )
  413ebf:	74 06                	je     413ec7 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv+0x97>
                    px_->add_ref();
  413ec1:	48 8b 07             	mov    (%rdi),%rax
  413ec4:	ff 50 18             	callq  *0x18(%rax)
    exception
  413ec7:	41 8b 44 24 30       	mov    0x30(%r12),%eax
                throw*this;
  413ecc:	48 89 ef             	mov    %rbp,%rdi
  413ecf:	49 89 df             	mov    %rbx,%r15
    exception
  413ed2:	f3 41 0f 6f 44 24 20 	movdqu 0x20(%r12),%xmm0
  413ed9:	89 45 30             	mov    %eax,0x30(%rbp)
        clone_impl:
  413edc:	48 b8 20 f3 ff ff ff 	movabs $0xfffffffffffff320,%rax
  413ee3:	ff ff ff 
  413ee6:	48 01 d8             	add    %rbx,%rax
  413ee9:	48 8d 50 38          	lea    0x38(%rax),%rdx
  413eed:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413ef1:	48 83 c0 70          	add    $0x70,%rax
  413ef5:	48 89 45 38          	mov    %rax,0x38(%rbp)
                throw*this;
  413ef9:	48 b8 b0 9c de ff ff 	movabs $0xffffffffffde9cb0,%rax
  413f00:	ff ff ff 
        clone_impl:
  413f03:	48 89 55 10          	mov    %rdx,0x10(%rbp)
                throw*this;
  413f07:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  413f0b:	48 b8 78 f1 ff ff ff 	movabs $0xfffffffffffff178,%rax
  413f12:	ff ff ff 
  413f15:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  413f19:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  413f20:	ff ff ff 
    exception
  413f23:	0f 11 45 20          	movups %xmm0,0x20(%rbp)
                throw*this;
  413f27:	48 01 d8             	add    %rbx,%rax
  413f2a:	ff d0                	callq  *%rax
  413f2c:	49 89 c4             	mov    %rax,%r12
  413f2f:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  413f34:	48 ba 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rdx
  413f3b:	ff ff ff 
  413f3e:	48 89 ef             	mov    %rbp,%rdi
  413f41:	49 89 df             	mov    %rbx,%r15
  413f44:	48 01 da             	add    %rbx,%rdx
  413f47:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413f4b:	ff d2                	callq  *%rdx
  413f4d:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  413f54:	ff ff ff 
  413f57:	48 89 ef             	mov    %rbp,%rdi
  413f5a:	48 01 da             	add    %rbx,%rdx
  413f5d:	ff d2                	callq  *%rdx
  413f5f:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  413f66:	ff ff ff 
  413f69:	4c 89 e7             	mov    %r12,%rdi
  413f6c:	48 01 d8             	add    %rbx,%rax
  413f6f:	ff d0                	callq  *%rax
  413f71:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  413f76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413f7d:	00 00 00 

0000000000413f80 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv>:
            rethrow() const
  413f80:	4c 8b 17             	mov    (%rdi),%r10
  413f83:	49 03 7a e0          	add    -0x20(%r10),%rdi
  413f87:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413f87 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv+0x7>
  413f8e:	49 ba 79 70 21 00 00 	movabs $0x217079,%r10
  413f95:	00 00 00 
  413f98:	4d 01 d3             	add    %r10,%r11
  413f9b:	49 ba 30 8e de ff ff 	movabs $0xffffffffffde8e30,%r10
  413fa2:	ff ff ff 
  413fa5:	4d 01 da             	add    %r11,%r10
  413fa8:	41 ff e2             	jmpq   *%r10
  413fab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000413fb0 <_ZN5swarm13frame_spillerEmj>:
__attribute__((noinline))
inline void spiller(swarm::Timestamp ts, const uint32_t n) {
    spiller_impl<false>(ts, n);
}
__attribute__((noinline))
inline void frame_spiller(swarm::Timestamp ts, const uint32_t n) {
  413fb0:	41 57                	push   %r15
  413fb2:	41 55                	push   %r13
  413fb4:	49 bb 50 70 21 00 00 	movabs $0x217050,%r11
  413fbb:	00 00 00 
  413fbe:	41 54                	push   %r12
  413fc0:	4c 8d 25 e9 ff ff ff 	lea    -0x17(%rip),%r12        # 413fb0 <_ZN5swarm13frame_spillerEmj>
  413fc7:	55                   	push   %rbp
  413fc8:	53                   	push   %rbx
                        sizeof(TaskDescriptors) + n*sizeof(TaskDescriptor));
  413fc9:	89 f3                	mov    %esi,%ebx
  413fcb:	4d 01 dc             	add    %r11,%r12
  413fce:	48 c1 e3 06          	shl    $0x6,%rbx
inline void frame_spiller(swarm::Timestamp ts, const uint32_t n) {
  413fd2:	48 83 ec 10          	sub    $0x10,%rsp
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  413fd6:	31 d2                	xor    %edx,%edx
    return reinterpret_cast<uint64_t>(ptr);
  413fd8:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    TaskDescriptors* tdstruct = (TaskDescriptors*) sim_zero_cycle_untracked_malloc(
  413fdd:	48 8d 73 08          	lea    0x8(%rbx),%rsi
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  413fe1:	b9 12 20 00 00       	mov    $0x2012,%ecx
  413fe6:	48 87 c9             	xchg   %rcx,%rcx
    return ptr;
  413fe9:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
    TaskDescriptor* tasks = tdstruct->tds;
  413fee:	49 8d 6d 08          	lea    0x8(%r13),%rbp
    TaskDescriptor* const end = tasks + n;
  413ff2:	48 01 eb             	add    %rbp,%rbx
    __builtin_prefetch(&tasks[0].ts, 1);
  413ff5:	0f 18 4d 00          	prefetcht0 0x0(%rbp)
    for (task = begin; task < end; task++) {
  413ff9:	48 39 dd             	cmp    %rbx,%rbp
  413ffc:	0f 83 c9 00 00 00    	jae    4140cb <_ZN5swarm13frame_spillerEmj+0x11b>
  414002:	48 89 e8             	mov    %rbp,%rax
  414005:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  41400c:	eb 3c                	jmp    41404a <_ZN5swarm13frame_spillerEmj+0x9a>
  41400e:	66 90                	xchg   %ax,%ax
        assert(!isFrame || !nonTimestamped);
  414010:	f7 c6 00 02 00 00    	test   $0x200,%esi
    task->ts = ts;
  414016:	48 89 38             	mov    %rdi,(%rax)
    task->taskPtrAndFlags = taskPtrAndFlags;
  414019:	48 89 70 08          	mov    %rsi,0x8(%rax)
    task->hint = hint;
  41401d:	48 89 50 10          	mov    %rdx,0x10(%rax)
    task->args[0] = a0;
  414021:	48 89 48 18          	mov    %rcx,0x18(%rax)
    task->args[1] = a1;
  414025:	4c 89 40 20          	mov    %r8,0x20(%rax)
    task->args[2] = a2;
  414029:	4c 89 48 28          	mov    %r9,0x28(%rax)
    task->args[3] = a3;
  41402d:	4c 89 50 30          	mov    %r10,0x30(%rax)
    task->args[4] = a4;
  414031:	4c 89 58 38          	mov    %r11,0x38(%rax)
        assert(!isFrame || !nonTimestamped);
  414035:	0f 85 9a 00 00 00    	jne    4140d5 <_ZN5swarm13frame_spillerEmj+0x125>
        if (nonTimestamped || newMin == UINT64_MAX) break;
  41403b:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
  41403f:	74 2b                	je     41406c <_ZN5swarm13frame_spillerEmj+0xbc>
    for (task = begin; task < end; task++) {
  414041:	48 83 c0 40          	add    $0x40,%rax
  414045:	48 39 c3             	cmp    %rax,%rbx
  414048:	76 22                	jbe    41406c <_ZN5swarm13frame_spillerEmj+0xbc>
    void* prefetch = (void*)(mask &
  41404a:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
  414051:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
    if (pls_likely(prefetch < end)) __builtin_prefetch(prefetch, 1);
  414055:	48 39 d3             	cmp    %rdx,%rbx
  414058:	76 03                	jbe    41405d <_ZN5swarm13frame_spillerEmj+0xad>
  41405a:	0f 18 0a             	prefetcht0 (%rdx)
        :);
  41405d:	48 c7 c1 02 08 00 00 	mov    $0x802,%rcx
        :);
  414064:	48 87 c9             	xchg   %rcx,%rcx
    if (pls_unlikely(taskPtrAndFlags == 0ul)) return UINT64_MAX;
  414067:	48 85 f6             	test   %rsi,%rsi
  41406a:	75 a4                	jne    414010 <_ZN5swarm13frame_spillerEmj+0x60>
  41406c:	48 29 e8             	sub    %rbp,%rax
  41406f:	48 c1 f8 06          	sar    $0x6,%rax
    if (tdstruct->size > 0) {
  414073:	48 85 c0             	test   %rax,%rax
    tdstruct->size = std::distance(begin, task);
  414076:	49 89 45 00          	mov    %rax,0x0(%r13)
    if (tdstruct->size > 0) {
  41407a:	75 24                	jne    4140a0 <_ZN5swarm13frame_spillerEmj+0xf0>
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  41407c:	41 0f 18 4d c8       	prefetcht0 -0x38(%r13)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  414081:	b9 11 20 00 00       	mov    $0x2011,%ecx
  414086:	4c 89 ef             	mov    %r13,%rdi
  414089:	48 87 c9             	xchg   %rcx,%rcx
    spiller_impl<true>(ts, n);
}
  41408c:	48 83 c4 10          	add    $0x10,%rsp
  414090:	5b                   	pop    %rbx
  414091:	5d                   	pop    %rbp
  414092:	41 5c                	pop    %r12
  414094:	41 5d                	pop    %r13
  414096:	41 5f                	pop    %r15
  414098:	c3                   	retq   
  414099:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            :);
  4140a0:	48 b8 e0 31 de ff ff 	movabs $0xffffffffffde31e0,%rax
  4140a7:	ff ff ff 
  4140aa:	bf 2a 00 00 00       	mov    $0x2a,%edi
  4140af:	b9 b1 0c 02 40       	mov    $0x40020cb1,%ecx
  4140b4:	49 8d 14 04          	lea    (%r12,%rax,1),%rdx
  4140b8:	4c 89 ee             	mov    %r13,%rsi
  4140bb:	48 87 c9             	xchg   %rcx,%rcx
  4140be:	48 83 c4 10          	add    $0x10,%rsp
  4140c2:	5b                   	pop    %rbx
  4140c3:	5d                   	pop    %rbp
  4140c4:	41 5c                	pop    %r12
  4140c6:	41 5d                	pop    %r13
  4140c8:	41 5f                	pop    %r15
  4140ca:	c3                   	retq   
    tdstruct->size = std::distance(begin, task);
  4140cb:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
  4140d2:	00 
  4140d3:	eb a7                	jmp    41407c <_ZN5swarm13frame_spillerEmj+0xcc>
        assert(!isFrame || !nonTimestamped);
  4140d5:	48 b8 c0 81 df ff ff 	movabs $0xffffffffffdf81c0,%rax
  4140dc:	ff ff ff 
  4140df:	ba de 00 00 00       	mov    $0xde,%edx
  4140e4:	4d 89 e7             	mov    %r12,%r15
  4140e7:	49 8d 0c 04          	lea    (%r12,%rax,1),%rcx
  4140eb:	48 b8 00 80 df ff ff 	movabs $0xffffffffffdf8000,%rax
  4140f2:	ff ff ff 
  4140f5:	49 8d 34 04          	lea    (%r12,%rax,1),%rsi
  4140f9:	48 b8 46 80 df ff ff 	movabs $0xffffffffffdf8046,%rax
  414100:	ff ff ff 
  414103:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  414107:	48 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%rax
  41410e:	ff ff ff 
  414111:	4c 01 e0             	add    %r12,%rax
  414114:	ff d0                	callq  *%rax
  414116:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41411d:	00 00 00 

0000000000414120 <_ZN5swarm7spillerEmj>:
inline void spiller(swarm::Timestamp ts, const uint32_t n) {
  414120:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 414120 <_ZN5swarm7spillerEmj>
  414127:	41 57                	push   %r15
  414129:	49 bb e0 6e 21 00 00 	movabs $0x216ee0,%r11
  414130:	00 00 00 
  414133:	41 56                	push   %r14
  414135:	41 55                	push   %r13
  414137:	41 54                	push   %r12
  414139:	55                   	push   %rbp
  41413a:	4c 01 d8             	add    %r11,%rax
  41413d:	53                   	push   %rbx
                        sizeof(TaskDescriptors) + n*sizeof(TaskDescriptor));
  41413e:	41 89 f4             	mov    %esi,%r12d
  414141:	49 c1 e4 06          	shl    $0x6,%r12
  414145:	48 89 44 24 e8       	mov    %rax,-0x18(%rsp)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  41414a:	31 d2                	xor    %edx,%edx
    return reinterpret_cast<uint64_t>(ptr);
  41414c:	48 8d 7c 24 f8       	lea    -0x8(%rsp),%rdi
    TaskDescriptors* tdstruct = (TaskDescriptors*) sim_zero_cycle_untracked_malloc(
  414151:	49 8d 74 24 08       	lea    0x8(%r12),%rsi
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  414156:	b9 12 20 00 00       	mov    $0x2012,%ecx
  41415b:	48 87 c9             	xchg   %rcx,%rcx
    return ptr;
  41415e:	48 8b 44 24 f8       	mov    -0x8(%rsp),%rax
    TaskDescriptor* tasks = tdstruct->tds;
  414163:	4c 8d 70 08          	lea    0x8(%rax),%r14
  414167:	48 89 44 24 e0       	mov    %rax,-0x20(%rsp)
    TaskDescriptor* const end = tasks + n;
  41416c:	4d 01 f4             	add    %r14,%r12
    __builtin_prefetch(&tasks[0].ts, 1);
  41416f:	41 0f 18 0e          	prefetcht0 (%r14)
    for (task = begin; task < end; task++) {
  414173:	4d 39 e6             	cmp    %r12,%r14
  414176:	0f 83 50 01 00 00    	jae    4142cc <_ZN5swarm7spillerEmj+0x1ac>
  41417c:	4c 89 f0             	mov    %r14,%rax
  41417f:	41 bd 80 02 00 00    	mov    $0x280,%r13d
  414185:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  41418c:	eb 42                	jmp    4141d0 <_ZN5swarm7spillerEmj+0xb0>
  41418e:	66 90                	xchg   %ax,%ax
    *requeuerFlags &= taskPtrAndFlags;
  414190:	49 21 f5             	and    %rsi,%r13
        if (nonTimestamped || newMin == UINT64_MAX) break;
  414193:	f7 c6 00 02 00 00    	test   $0x200,%esi
    task->ts = ts;
  414199:	48 89 38             	mov    %rdi,(%rax)
    task->taskPtrAndFlags = taskPtrAndFlags;
  41419c:	48 89 70 08          	mov    %rsi,0x8(%rax)
    task->hint = hint;
  4141a0:	48 89 50 10          	mov    %rdx,0x10(%rax)
    task->args[0] = a0;
  4141a4:	48 89 48 18          	mov    %rcx,0x18(%rax)
    task->args[1] = a1;
  4141a8:	4c 89 40 20          	mov    %r8,0x20(%rax)
    task->args[2] = a2;
  4141ac:	4c 89 48 28          	mov    %r9,0x28(%rax)
    task->args[3] = a3;
  4141b0:	4c 89 50 30          	mov    %r10,0x30(%rax)
    task->args[4] = a4;
  4141b4:	4c 89 58 38          	mov    %r11,0x38(%rax)
        if (nonTimestamped || newMin == UINT64_MAX) break;
  4141b8:	0f 85 8a 00 00 00    	jne    414248 <_ZN5swarm7spillerEmj+0x128>
  4141be:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
  4141c2:	74 31                	je     4141f5 <_ZN5swarm7spillerEmj+0xd5>
    for (task = begin; task < end; task++) {
  4141c4:	48 83 c0 40          	add    $0x40,%rax
  4141c8:	48 89 fb             	mov    %rdi,%rbx
  4141cb:	49 39 c4             	cmp    %rax,%r12
  4141ce:	76 25                	jbe    4141f5 <_ZN5swarm7spillerEmj+0xd5>
    void* prefetch = (void*)(mask &
  4141d0:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
  4141d7:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
    if (pls_likely(prefetch < end)) __builtin_prefetch(prefetch, 1);
  4141db:	49 39 d4             	cmp    %rdx,%r12
  4141de:	76 03                	jbe    4141e3 <_ZN5swarm7spillerEmj+0xc3>
  4141e0:	0f 18 0a             	prefetcht0 (%rdx)
        :);
  4141e3:	48 c7 c1 01 08 00 00 	mov    $0x801,%rcx
        :);
  4141ea:	48 89 df             	mov    %rbx,%rdi
  4141ed:	48 87 c9             	xchg   %rcx,%rcx
    if (pls_unlikely(taskPtrAndFlags == 0ul)) return UINT64_MAX;
  4141f0:	48 85 f6             	test   %rsi,%rsi
  4141f3:	75 9b                	jne    414190 <_ZN5swarm7spillerEmj+0x70>
  4141f5:	4c 29 f0             	sub    %r14,%rax
    tdstruct->size = std::distance(begin, task);
  4141f8:	48 8b 74 24 e0       	mov    -0x20(%rsp),%rsi
  4141fd:	48 c1 f8 06          	sar    $0x6,%rax
    if (tdstruct->size > 0) {
  414201:	48 85 c0             	test   %rax,%rax
    tdstruct->size = std::distance(begin, task);
  414204:	48 89 06             	mov    %rax,(%rsi)
    if (tdstruct->size > 0) {
  414207:	0f 84 cb 00 00 00    	je     4142d8 <_ZN5swarm7spillerEmj+0x1b8>
        uintptr_t fp = reinterpret_cast<uintptr_t>(bareRunner<F, f, Args...>);
  41420d:	48 8b 7c 24 e8       	mov    -0x18(%rsp),%rdi
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  414212:	44 89 e9             	mov    %r13d,%ecx
        uintptr_t fp = reinterpret_cast<uintptr_t>(bareRunner<F, f, Args...>);
  414215:	48 b8 f0 32 de ff ff 	movabs $0xffffffffffde32f0,%rax
  41421c:	ff ff ff 
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  41421f:	81 c9 31 0c 02 40    	or     $0x40020c31,%ecx
    } else if (!skipTs && !skipTask && skipHint) {
  414225:	41 f7 c5 00 02 08 01 	test   $0x1080200,%r13d
        uintptr_t fp = reinterpret_cast<uintptr_t>(bareRunner<F, f, Args...>);
  41422c:	48 8d 14 07          	lea    (%rdi,%rax,1),%rdx
    } else if (!skipTs && !skipTask && skipHint) {
  414230:	0f 85 c2 00 00 00    	jne    4142f8 <_ZN5swarm7spillerEmj+0x1d8>
            :);
  414236:	48 89 df             	mov    %rbx,%rdi
  414239:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  41423c:	e9 a8 00 00 00       	jmpq   4142e9 <_ZN5swarm7spillerEmj+0x1c9>
  414241:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        for (task = task + 1; task < end; task++) {
  414248:	48 83 c0 40          	add    $0x40,%rax
        :);
  41424c:	31 ed                	xor    %ebp,%ebp
        for (task = task + 1; task < end; task++) {
  41424e:	49 39 c4             	cmp    %rax,%r12
  414251:	77 4f                	ja     4142a2 <_ZN5swarm7spillerEmj+0x182>
  414253:	eb a0                	jmp    4141f5 <_ZN5swarm7spillerEmj+0xd5>
  414255:	0f 1f 00             	nopl   (%rax)
    *nonTimestamped = taskPtrAndFlags & EnqFlags::NOTIMESTAMP;
  414258:	49 89 f7             	mov    %rsi,%r15
    *requeuerFlags &= taskPtrAndFlags;
  41425b:	49 21 f5             	and    %rsi,%r13
    task->ts = ts;
  41425e:	48 89 38             	mov    %rdi,(%rax)
    *nonTimestamped = taskPtrAndFlags & EnqFlags::NOTIMESTAMP;
  414261:	41 81 e7 00 02 00 00 	and    $0x200,%r15d
            if (newMin == UINT64_MAX) break;
  414268:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
    task->taskPtrAndFlags = taskPtrAndFlags;
  41426c:	48 89 70 08          	mov    %rsi,0x8(%rax)
    task->hint = hint;
  414270:	48 89 50 10          	mov    %rdx,0x10(%rax)
    task->args[0] = a0;
  414274:	48 89 48 18          	mov    %rcx,0x18(%rax)
    task->args[1] = a1;
  414278:	4c 89 40 20          	mov    %r8,0x20(%rax)
    task->args[2] = a2;
  41427c:	4c 89 48 28          	mov    %r9,0x28(%rax)
    task->args[3] = a3;
  414280:	4c 89 50 30          	mov    %r10,0x30(%rax)
    task->args[4] = a4;
  414284:	4c 89 58 38          	mov    %r11,0x38(%rax)
            if (newMin == UINT64_MAX) break;
  414288:	0f 84 67 ff ff ff    	je     4141f5 <_ZN5swarm7spillerEmj+0xd5>
            if (!nonTimestamped) minTs = 0ul;
  41428e:	4d 85 ff             	test   %r15,%r15
  414291:	48 0f 44 dd          	cmove  %rbp,%rbx
        for (task = task + 1; task < end; task++) {
  414295:	48 83 c0 40          	add    $0x40,%rax
  414299:	49 39 c4             	cmp    %rax,%r12
  41429c:	0f 86 53 ff ff ff    	jbe    4141f5 <_ZN5swarm7spillerEmj+0xd5>
    void* prefetch = (void*)(mask &
  4142a2:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
  4142a9:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
    if (pls_likely(prefetch < end)) __builtin_prefetch(prefetch, 1);
  4142ad:	49 39 d4             	cmp    %rdx,%r12
  4142b0:	76 03                	jbe    4142b5 <_ZN5swarm7spillerEmj+0x195>
  4142b2:	0f 18 0a             	prefetcht0 (%rdx)
        :);
  4142b5:	48 c7 c1 01 08 00 00 	mov    $0x801,%rcx
        :);
  4142bc:	48 89 ef             	mov    %rbp,%rdi
  4142bf:	48 87 c9             	xchg   %rcx,%rcx
    if (pls_unlikely(taskPtrAndFlags == 0ul)) return UINT64_MAX;
  4142c2:	48 85 f6             	test   %rsi,%rsi
  4142c5:	75 91                	jne    414258 <_ZN5swarm7spillerEmj+0x138>
  4142c7:	e9 29 ff ff ff       	jmpq   4141f5 <_ZN5swarm7spillerEmj+0xd5>
    tdstruct->size = std::distance(begin, task);
  4142cc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4142d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  4142d8:	48 8b 7c 24 e0       	mov    -0x20(%rsp),%rdi
  4142dd:	0f 18 4f c8          	prefetcht0 -0x38(%rdi)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4142e1:	b9 11 20 00 00       	mov    $0x2011,%ecx
  4142e6:	48 87 c9             	xchg   %rcx,%rcx
}
  4142e9:	5b                   	pop    %rbx
  4142ea:	5d                   	pop    %rbp
  4142eb:	41 5c                	pop    %r12
  4142ed:	41 5d                	pop    %r13
  4142ef:	41 5e                	pop    %r14
  4142f1:	41 5f                	pop    %r15
  4142f3:	c3                   	retq   
  4142f4:	0f 1f 40 00          	nopl   0x0(%rax)
  4142f8:	48 89 f7             	mov    %rsi,%rdi
            :);
  4142fb:	48 89 d6             	mov    %rdx,%rsi
  4142fe:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  414301:	eb e6                	jmp    4142e9 <_ZN5swarm7spillerEmj+0x1c9>
  414303:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41430a:	00 00 00 
  41430d:	0f 1f 00             	nopl   (%rax)

0000000000414310 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45>:
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
           !m_constraints->isIncluded(VertexConstraint(s.time, s.x, s.y));
  }

  bool transitionValid(const State& s1, const State& s2, const Constraints* m_constraints) const {
  414310:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 414310 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45>
  414317:	49 bb f0 6c 21 00 00 	movabs $0x216cf0,%r11
  41431e:	00 00 00 
  414321:	4c 01 d8             	add    %r11,%rax
    assert(m_constraints);
  414324:	48 85 d2             	test   %rdx,%rdx
  414327:	74 5d                	je     414386 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x76>
		}
		return false;
	}

	bool isIncluded(EdgeConstraint c) const {
		for (int i = 0; i < edgeConstraints_size; ++i) {
  414329:	8b 8a 44 06 00 00    	mov    0x644(%rdx),%ecx
  41432f:	31 c0                	xor    %eax,%eax
  414331:	48 81 c2 58 02 00 00 	add    $0x258,%rdx
    const auto& con = m_constraints->edgeConstraints;
    return !m_constraints->isIncluded(EdgeConstraint(s1.time, s1.x, s1.y, s2.x, s2.y));
  414338:	44 8b 5e 08          	mov    0x8(%rsi),%r11d
  41433c:	44 8b 56 04          	mov    0x4(%rsi),%r10d
  414340:	44 8b 4f 08          	mov    0x8(%rdi),%r9d
  414344:	44 8b 47 04          	mov    0x4(%rdi),%r8d
  414348:	85 c9                	test   %ecx,%ecx
  41434a:	8b 37                	mov    (%rdi),%esi
  41434c:	7f 0d                	jg     41435b <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x4b>
  41434e:	eb 30                	jmp    414380 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x70>
  414350:	83 c0 01             	add    $0x1,%eax
  414353:	48 83 c2 14          	add    $0x14,%rdx
  414357:	39 c8                	cmp    %ecx,%eax
  414359:	7d 25                	jge    414380 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x70>
	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
  41435b:	3b 32                	cmp    (%rdx),%esi
  41435d:	75 f1                	jne    414350 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  41435f:	44 3b 42 04          	cmp    0x4(%rdx),%r8d
  414363:	75 eb                	jne    414350 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  414365:	44 3b 4a 08          	cmp    0x8(%rdx),%r9d
  414369:	75 e5                	jne    414350 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  41436b:	44 3b 52 0c          	cmp    0xc(%rdx),%r10d
  41436f:	75 df                	jne    414350 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  414371:	44 3b 5a 10          	cmp    0x10(%rdx),%r11d
  414375:	75 d9                	jne    414350 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  414377:	31 c0                	xor    %eax,%eax
  }
  414379:	c3                   	retq   
  41437a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  414380:	b8 01 00 00 00       	mov    $0x1,%eax
  414385:	c3                   	retq   
    assert(m_constraints);
  414386:	48 ba 60 89 df ff ff 	movabs $0xffffffffffdf8960,%rdx
  41438d:	ff ff ff 
  414390:	48 be c3 7d df ff ff 	movabs $0xffffffffffdf7dc3,%rsi
  414397:	ff ff ff 
  41439a:	48 bf 62 80 df ff ff 	movabs $0xffffffffffdf8062,%rdi
  4143a1:	ff ff ff 
  4143a4:	49 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%r8
  4143ab:	ff ff ff 
  bool transitionValid(const State& s1, const State& s2, const Constraints* m_constraints) const {
  4143ae:	41 57                	push   %r15
    assert(m_constraints);
  4143b0:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  4143b4:	48 01 c6             	add    %rax,%rsi
  4143b7:	ba 09 01 00 00       	mov    $0x109,%edx
  4143bc:	48 01 c7             	add    %rax,%rdi
  4143bf:	49 89 c7             	mov    %rax,%r15
  4143c2:	49 01 c0             	add    %rax,%r8
  4143c5:	41 ff d0             	callq  *%r8
  4143c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4143cf:	00 

00000000004143d0 <_ZN4YAML13BadConversionD1Ev>:
 public:
  InvalidNode()
      : RepresentationException(Mark::null_mark(), ErrorMsg::INVALID_NODE) {}
};

class BadConversion : public RepresentationException {
  4143d0:	41 57                	push   %r15
  4143d2:	55                   	push   %rbp
  4143d3:	49 bb 30 6c 21 00 00 	movabs $0x216c30,%r11
  4143da:	00 00 00 
  4143dd:	53                   	push   %rbx
  4143de:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4143d0 <_ZN4YAML13BadConversionD1Ev>
  virtual ~Exception() throw() {}
  4143e5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4143ec:	ff ff ff 
class BadConversion : public RepresentationException {
  4143ef:	48 89 fd             	mov    %rdi,%rbp
  4143f2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4143f5:	48 01 d8             	add    %rbx,%rax
  4143f8:	48 89 07             	mov    %rax,(%rdi)
  4143fb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4143ff:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414403:	48 39 c7             	cmp    %rax,%rdi
  414406:	74 12                	je     41441a <_ZN4YAML13BadConversionD1Ev+0x4a>
  414408:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41440f:	ff ff ff 
  414412:	49 89 df             	mov    %rbx,%r15
  414415:	48 01 d8             	add    %rbx,%rax
  414418:	ff d0                	callq  *%rax
  41441a:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414421:	ff ff ff 
  414424:	48 89 ef             	mov    %rbp,%rdi
  414427:	48 01 d8             	add    %rbx,%rax
class BadConversion : public RepresentationException {
  41442a:	5b                   	pop    %rbx
  41442b:	5d                   	pop    %rbp
  41442c:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  41442e:	ff e0                	jmpq   *%rax

0000000000414430 <_ZN4YAML18TypedBadConversionIiED1Ev>:
  BadConversion()
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_CONVERSION) {}
};

template <typename T>
class TypedBadConversion : public BadConversion {
  414430:	41 57                	push   %r15
  414432:	55                   	push   %rbp
  414433:	49 bb d0 6b 21 00 00 	movabs $0x216bd0,%r11
  41443a:	00 00 00 
  41443d:	53                   	push   %rbx
  41443e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414430 <_ZN4YAML18TypedBadConversionIiED1Ev>
  virtual ~Exception() throw() {}
  414445:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41444c:	ff ff ff 
class TypedBadConversion : public BadConversion {
  41444f:	48 89 fd             	mov    %rdi,%rbp
  414452:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414455:	48 01 d8             	add    %rbx,%rax
  414458:	48 89 07             	mov    %rax,(%rdi)
  41445b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41445f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414463:	48 39 c7             	cmp    %rax,%rdi
  414466:	74 12                	je     41447a <_ZN4YAML18TypedBadConversionIiED1Ev+0x4a>
  414468:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41446f:	ff ff ff 
  414472:	49 89 df             	mov    %rbx,%r15
  414475:	48 01 d8             	add    %rbx,%rax
  414478:	ff d0                	callq  *%rax
  41447a:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414481:	ff ff ff 
  414484:	48 89 ef             	mov    %rbp,%rdi
  414487:	48 01 d8             	add    %rbx,%rax
class TypedBadConversion : public BadConversion {
  41448a:	5b                   	pop    %rbx
  41448b:	5d                   	pop    %rbp
  41448c:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  41448e:	ff e0                	jmpq   *%rax

0000000000414490 <_ZN4YAML11InvalidNodeD1Ev>:
class InvalidNode : public RepresentationException {
  414490:	41 57                	push   %r15
  414492:	55                   	push   %rbp
  414493:	49 bb 70 6b 21 00 00 	movabs $0x216b70,%r11
  41449a:	00 00 00 
  41449d:	53                   	push   %rbx
  41449e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414490 <_ZN4YAML11InvalidNodeD1Ev>
  virtual ~Exception() throw() {}
  4144a5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4144ac:	ff ff ff 
class InvalidNode : public RepresentationException {
  4144af:	48 89 fd             	mov    %rdi,%rbp
  4144b2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4144b5:	48 01 d8             	add    %rbx,%rax
  4144b8:	48 89 07             	mov    %rax,(%rdi)
  4144bb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4144bf:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4144c3:	48 39 c7             	cmp    %rax,%rdi
  4144c6:	74 12                	je     4144da <_ZN4YAML11InvalidNodeD1Ev+0x4a>
  4144c8:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4144cf:	ff ff ff 
  4144d2:	49 89 df             	mov    %rbx,%r15
  4144d5:	48 01 d8             	add    %rbx,%rax
  4144d8:	ff d0                	callq  *%rax
  4144da:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  4144e1:	ff ff ff 
  4144e4:	48 89 ef             	mov    %rbp,%rdi
  4144e7:	48 01 d8             	add    %rbx,%rax
class InvalidNode : public RepresentationException {
  4144ea:	5b                   	pop    %rbx
  4144eb:	5d                   	pop    %rbp
  4144ec:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  4144ee:	ff e0                	jmpq   *%rax

00000000004144f0 <_ZN4YAML12BadSubscriptD1Ev>:
 public:
  BadDereference()
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_DEREFERENCE) {}
};

class BadSubscript : public RepresentationException {
  4144f0:	41 57                	push   %r15
  4144f2:	55                   	push   %rbp
  4144f3:	49 bb 10 6b 21 00 00 	movabs $0x216b10,%r11
  4144fa:	00 00 00 
  4144fd:	53                   	push   %rbx
  4144fe:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4144f0 <_ZN4YAML12BadSubscriptD1Ev>
  virtual ~Exception() throw() {}
  414505:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41450c:	ff ff ff 
class BadSubscript : public RepresentationException {
  41450f:	48 89 fd             	mov    %rdi,%rbp
  414512:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414515:	48 01 d8             	add    %rbx,%rax
  414518:	48 89 07             	mov    %rax,(%rdi)
  41451b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41451f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414523:	48 39 c7             	cmp    %rax,%rdi
  414526:	74 12                	je     41453a <_ZN4YAML12BadSubscriptD1Ev+0x4a>
  414528:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41452f:	ff ff ff 
  414532:	49 89 df             	mov    %rbx,%r15
  414535:	48 01 d8             	add    %rbx,%rax
  414538:	ff d0                	callq  *%rax
  41453a:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414541:	ff ff ff 
  414544:	48 89 ef             	mov    %rbp,%rdi
  414547:	48 01 d8             	add    %rbx,%rax
class BadSubscript : public RepresentationException {
  41454a:	5b                   	pop    %rbx
  41454b:	5d                   	pop    %rbp
  41454c:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  41454e:	ff e0                	jmpq   *%rax

0000000000414550 <_ZN4YAML23RepresentationExceptionD1Ev>:
class RepresentationException : public Exception {
  414550:	41 57                	push   %r15
  414552:	55                   	push   %rbp
  414553:	49 bb b0 6a 21 00 00 	movabs $0x216ab0,%r11
  41455a:	00 00 00 
  41455d:	53                   	push   %rbx
  41455e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414550 <_ZN4YAML23RepresentationExceptionD1Ev>
  virtual ~Exception() throw() {}
  414565:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41456c:	ff ff ff 
class RepresentationException : public Exception {
  41456f:	48 89 fd             	mov    %rdi,%rbp
  414572:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414575:	48 01 d8             	add    %rbx,%rax
  414578:	48 89 07             	mov    %rax,(%rdi)
  41457b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41457f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414583:	48 39 c7             	cmp    %rax,%rdi
  414586:	74 12                	je     41459a <_ZN4YAML23RepresentationExceptionD1Ev+0x4a>
  414588:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41458f:	ff ff ff 
  414592:	49 89 df             	mov    %rbx,%r15
  414595:	48 01 d8             	add    %rbx,%rax
  414598:	ff d0                	callq  *%rax
  41459a:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  4145a1:	ff ff ff 
  4145a4:	48 89 ef             	mov    %rbp,%rdi
  4145a7:	48 01 d8             	add    %rbx,%rax
class RepresentationException : public Exception {
  4145aa:	5b                   	pop    %rbx
  4145ab:	5d                   	pop    %rbp
  4145ac:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  4145ae:	ff e0                	jmpq   *%rax

00000000004145b0 <_ZN4YAML9ExceptionD0Ev>:
  4145b0:	41 57                	push   %r15
  4145b2:	55                   	push   %rbp
  4145b3:	49 bb 50 6a 21 00 00 	movabs $0x216a50,%r11
  4145ba:	00 00 00 
  4145bd:	53                   	push   %rbx
  4145be:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4145b0 <_ZN4YAML9ExceptionD0Ev>
  4145c5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4145cc:	ff ff ff 
  4145cf:	48 89 fd             	mov    %rdi,%rbp
  4145d2:	4c 01 db             	add    %r11,%rbx
  4145d5:	48 01 d8             	add    %rbx,%rax
  4145d8:	48 89 07             	mov    %rax,(%rdi)
  4145db:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4145df:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4145e3:	48 39 c7             	cmp    %rax,%rdi
  4145e6:	74 12                	je     4145fa <_ZN4YAML9ExceptionD0Ev+0x4a>
  4145e8:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4145ef:	ff ff ff 
  4145f2:	49 89 df             	mov    %rbx,%r15
  4145f5:	48 01 d8             	add    %rbx,%rax
  4145f8:	ff d0                	callq  *%rax
  4145fa:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414601:	ff ff ff 
  414604:	48 89 ef             	mov    %rbp,%rdi
  414607:	49 89 df             	mov    %rbx,%r15
  41460a:	48 01 d8             	add    %rbx,%rax
  41460d:	ff d0                	callq  *%rax
  41460f:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414616:	ff ff ff 
  414619:	48 89 ef             	mov    %rbp,%rdi
  41461c:	be 40 00 00 00       	mov    $0x40,%esi
  414621:	48 01 d8             	add    %rbx,%rax
  414624:	5b                   	pop    %rbx
  414625:	5d                   	pop    %rbp
  414626:	41 5f                	pop    %r15
  414628:	ff e0                	jmpq   *%rax
  41462a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414630 <_ZN4YAML11InvalidNodeD0Ev>:
class InvalidNode : public RepresentationException {
  414630:	41 57                	push   %r15
  414632:	55                   	push   %rbp
  414633:	49 bb d0 69 21 00 00 	movabs $0x2169d0,%r11
  41463a:	00 00 00 
  41463d:	53                   	push   %rbx
  41463e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414630 <_ZN4YAML11InvalidNodeD0Ev>
  virtual ~Exception() throw() {}
  414645:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41464c:	ff ff ff 
class InvalidNode : public RepresentationException {
  41464f:	48 89 fd             	mov    %rdi,%rbp
  414652:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414655:	48 01 d8             	add    %rbx,%rax
  414658:	48 89 07             	mov    %rax,(%rdi)
  41465b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41465f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414663:	48 39 c7             	cmp    %rax,%rdi
  414666:	74 12                	je     41467a <_ZN4YAML11InvalidNodeD0Ev+0x4a>
  414668:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41466f:	ff ff ff 
  414672:	49 89 df             	mov    %rbx,%r15
  414675:	48 01 d8             	add    %rbx,%rax
  414678:	ff d0                	callq  *%rax
  41467a:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414681:	ff ff ff 
  414684:	48 89 ef             	mov    %rbp,%rdi
  414687:	49 89 df             	mov    %rbx,%r15
  41468a:	48 01 d8             	add    %rbx,%rax
  41468d:	ff d0                	callq  *%rax
class InvalidNode : public RepresentationException {
  41468f:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414696:	ff ff ff 
  414699:	48 89 ef             	mov    %rbp,%rdi
  41469c:	be 40 00 00 00       	mov    $0x40,%esi
  4146a1:	48 01 d8             	add    %rbx,%rax
  4146a4:	5b                   	pop    %rbx
  4146a5:	5d                   	pop    %rbp
  4146a6:	41 5f                	pop    %r15
  4146a8:	ff e0                	jmpq   *%rax
  4146aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004146b0 <_ZN4YAML18TypedBadConversionIiED0Ev>:
class TypedBadConversion : public BadConversion {
  4146b0:	41 57                	push   %r15
  4146b2:	55                   	push   %rbp
  4146b3:	49 bb 50 69 21 00 00 	movabs $0x216950,%r11
  4146ba:	00 00 00 
  4146bd:	53                   	push   %rbx
  4146be:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4146b0 <_ZN4YAML18TypedBadConversionIiED0Ev>
  virtual ~Exception() throw() {}
  4146c5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4146cc:	ff ff ff 
class TypedBadConversion : public BadConversion {
  4146cf:	48 89 fd             	mov    %rdi,%rbp
  4146d2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4146d5:	48 01 d8             	add    %rbx,%rax
  4146d8:	48 89 07             	mov    %rax,(%rdi)
  4146db:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4146df:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4146e3:	48 39 c7             	cmp    %rax,%rdi
  4146e6:	74 12                	je     4146fa <_ZN4YAML18TypedBadConversionIiED0Ev+0x4a>
  4146e8:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4146ef:	ff ff ff 
  4146f2:	49 89 df             	mov    %rbx,%r15
  4146f5:	48 01 d8             	add    %rbx,%rax
  4146f8:	ff d0                	callq  *%rax
  4146fa:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414701:	ff ff ff 
  414704:	48 89 ef             	mov    %rbp,%rdi
  414707:	49 89 df             	mov    %rbx,%r15
  41470a:	48 01 d8             	add    %rbx,%rax
  41470d:	ff d0                	callq  *%rax
class TypedBadConversion : public BadConversion {
  41470f:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414716:	ff ff ff 
  414719:	48 89 ef             	mov    %rbp,%rdi
  41471c:	be 40 00 00 00       	mov    $0x40,%esi
  414721:	48 01 d8             	add    %rbx,%rax
  414724:	5b                   	pop    %rbx
  414725:	5d                   	pop    %rbp
  414726:	41 5f                	pop    %r15
  414728:	ff e0                	jmpq   *%rax
  41472a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414730 <_ZN4YAML13BadConversionD0Ev>:
class BadConversion : public RepresentationException {
  414730:	41 57                	push   %r15
  414732:	55                   	push   %rbp
  414733:	49 bb d0 68 21 00 00 	movabs $0x2168d0,%r11
  41473a:	00 00 00 
  41473d:	53                   	push   %rbx
  41473e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414730 <_ZN4YAML13BadConversionD0Ev>
  virtual ~Exception() throw() {}
  414745:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41474c:	ff ff ff 
class BadConversion : public RepresentationException {
  41474f:	48 89 fd             	mov    %rdi,%rbp
  414752:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414755:	48 01 d8             	add    %rbx,%rax
  414758:	48 89 07             	mov    %rax,(%rdi)
  41475b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41475f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414763:	48 39 c7             	cmp    %rax,%rdi
  414766:	74 12                	je     41477a <_ZN4YAML13BadConversionD0Ev+0x4a>
  414768:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41476f:	ff ff ff 
  414772:	49 89 df             	mov    %rbx,%r15
  414775:	48 01 d8             	add    %rbx,%rax
  414778:	ff d0                	callq  *%rax
  41477a:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414781:	ff ff ff 
  414784:	48 89 ef             	mov    %rbp,%rdi
  414787:	49 89 df             	mov    %rbx,%r15
  41478a:	48 01 d8             	add    %rbx,%rax
  41478d:	ff d0                	callq  *%rax
class BadConversion : public RepresentationException {
  41478f:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414796:	ff ff ff 
  414799:	48 89 ef             	mov    %rbp,%rdi
  41479c:	be 40 00 00 00       	mov    $0x40,%esi
  4147a1:	48 01 d8             	add    %rbx,%rax
  4147a4:	5b                   	pop    %rbx
  4147a5:	5d                   	pop    %rbp
  4147a6:	41 5f                	pop    %r15
  4147a8:	ff e0                	jmpq   *%rax
  4147aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004147b0 <_ZN4YAML12BadSubscriptD0Ev>:
class BadSubscript : public RepresentationException {
  4147b0:	41 57                	push   %r15
  4147b2:	55                   	push   %rbp
  4147b3:	49 bb 50 68 21 00 00 	movabs $0x216850,%r11
  4147ba:	00 00 00 
  4147bd:	53                   	push   %rbx
  4147be:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4147b0 <_ZN4YAML12BadSubscriptD0Ev>
  virtual ~Exception() throw() {}
  4147c5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4147cc:	ff ff ff 
class BadSubscript : public RepresentationException {
  4147cf:	48 89 fd             	mov    %rdi,%rbp
  4147d2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4147d5:	48 01 d8             	add    %rbx,%rax
  4147d8:	48 89 07             	mov    %rax,(%rdi)
  4147db:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4147df:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4147e3:	48 39 c7             	cmp    %rax,%rdi
  4147e6:	74 12                	je     4147fa <_ZN4YAML12BadSubscriptD0Ev+0x4a>
  4147e8:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4147ef:	ff ff ff 
  4147f2:	49 89 df             	mov    %rbx,%r15
  4147f5:	48 01 d8             	add    %rbx,%rax
  4147f8:	ff d0                	callq  *%rax
  4147fa:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414801:	ff ff ff 
  414804:	48 89 ef             	mov    %rbp,%rdi
  414807:	49 89 df             	mov    %rbx,%r15
  41480a:	48 01 d8             	add    %rbx,%rax
  41480d:	ff d0                	callq  *%rax
class BadSubscript : public RepresentationException {
  41480f:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414816:	ff ff ff 
  414819:	48 89 ef             	mov    %rbp,%rdi
  41481c:	be 40 00 00 00       	mov    $0x40,%esi
  414821:	48 01 d8             	add    %rbx,%rax
  414824:	5b                   	pop    %rbx
  414825:	5d                   	pop    %rbp
  414826:	41 5f                	pop    %r15
  414828:	ff e0                	jmpq   *%rax
  41482a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414830 <_ZN4YAML23RepresentationExceptionD0Ev>:
class RepresentationException : public Exception {
  414830:	41 57                	push   %r15
  414832:	55                   	push   %rbp
  414833:	49 bb d0 67 21 00 00 	movabs $0x2167d0,%r11
  41483a:	00 00 00 
  41483d:	53                   	push   %rbx
  41483e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414830 <_ZN4YAML23RepresentationExceptionD0Ev>
  virtual ~Exception() throw() {}
  414845:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41484c:	ff ff ff 
class RepresentationException : public Exception {
  41484f:	48 89 fd             	mov    %rdi,%rbp
  414852:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414855:	48 01 d8             	add    %rbx,%rax
  414858:	48 89 07             	mov    %rax,(%rdi)
  41485b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41485f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414863:	48 39 c7             	cmp    %rax,%rdi
  414866:	74 12                	je     41487a <_ZN4YAML23RepresentationExceptionD0Ev+0x4a>
  414868:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41486f:	ff ff ff 
  414872:	49 89 df             	mov    %rbx,%r15
  414875:	48 01 d8             	add    %rbx,%rax
  414878:	ff d0                	callq  *%rax
  41487a:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414881:	ff ff ff 
  414884:	48 89 ef             	mov    %rbp,%rdi
  414887:	49 89 df             	mov    %rbx,%r15
  41488a:	48 01 d8             	add    %rbx,%rax
  41488d:	ff d0                	callq  *%rax
class RepresentationException : public Exception {
  41488f:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414896:	ff ff ff 
  414899:	48 89 ef             	mov    %rbp,%rdi
  41489c:	be 40 00 00 00       	mov    $0x40,%esi
  4148a1:	48 01 d8             	add    %rbx,%rax
  4148a4:	5b                   	pop    %rbx
  4148a5:	5d                   	pop    %rbp
  4148a6:	41 5f                	pop    %r15
  4148a8:	ff e0                	jmpq   *%rax
  4148aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004148b0 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED1Ev>:
class basic_pointerbuf : public BufferT {
  4148b0:	41 57                	push   %r15
  4148b2:	55                   	push   %rbp
  4148b3:	49 bb 50 67 21 00 00 	movabs $0x216750,%r11
  4148ba:	00 00 00 
  4148bd:	53                   	push   %rbx
  4148be:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4148b0 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED1Ev>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
  4148c5:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  4148cc:	ff ff ff 
  4148cf:	48 89 fd             	mov    %rdi,%rbp
  4148d2:	4c 01 db             	add    %r11,%rbx
  4148d5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4148d9:	48 83 c0 10          	add    $0x10,%rax
  4148dd:	48 89 07             	mov    %rax,(%rdi)
  4148e0:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4148e4:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  4148e8:	48 39 c7             	cmp    %rax,%rdi
  4148eb:	74 12                	je     4148ff <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED1Ev+0x4f>
  4148ed:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4148f4:	ff ff ff 
  4148f7:	49 89 df             	mov    %rbx,%r15
  4148fa:	48 01 d8             	add    %rbx,%rax
  4148fd:	ff d0                	callq  *%rax
  4148ff:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414906:	ff ff ff 
  414909:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  41490d:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414911:	48 83 c0 10          	add    $0x10,%rax
  414915:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414919:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  414920:	ff ff ff 
  414923:	48 01 d8             	add    %rbx,%rax
  414926:	5b                   	pop    %rbx
  414927:	5d                   	pop    %rbp
  414928:	41 5f                	pop    %r15
  41492a:	ff e0                	jmpq   *%rax
  41492c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414930 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED1Ev>:
  414930:	41 57                	push   %r15
  414932:	55                   	push   %rbp
  414933:	49 bb d0 66 21 00 00 	movabs $0x2166d0,%r11
  41493a:	00 00 00 
  41493d:	53                   	push   %rbx
  41493e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414930 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED1Ev>
  414945:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  41494c:	ff ff ff 
  41494f:	48 89 fd             	mov    %rdi,%rbp
  414952:	4c 01 db             	add    %r11,%rbx
  414955:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414959:	48 83 c0 10          	add    $0x10,%rax
  41495d:	48 89 07             	mov    %rax,(%rdi)
  414960:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414964:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  414968:	48 39 c7             	cmp    %rax,%rdi
  41496b:	74 12                	je     41497f <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED1Ev+0x4f>
  41496d:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  414974:	ff ff ff 
  414977:	49 89 df             	mov    %rbx,%r15
  41497a:	48 01 d8             	add    %rbx,%rax
  41497d:	ff d0                	callq  *%rax
  41497f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414986:	ff ff ff 
  414989:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  41498d:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414991:	48 83 c0 10          	add    $0x10,%rax
  414995:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414999:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  4149a0:	ff ff ff 
  4149a3:	48 01 d8             	add    %rbx,%rax
  4149a6:	5b                   	pop    %rbx
  4149a7:	5d                   	pop    %rbp
  4149a8:	41 5f                	pop    %r15
  4149aa:	ff e0                	jmpq   *%rax
  4149ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004149b0 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED0Ev>:
  4149b0:	41 57                	push   %r15
  4149b2:	55                   	push   %rbp
  4149b3:	49 bb 50 66 21 00 00 	movabs $0x216650,%r11
  4149ba:	00 00 00 
  4149bd:	53                   	push   %rbx
  4149be:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4149b0 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED0Ev>
  4149c5:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  4149cc:	ff ff ff 
  4149cf:	48 89 fd             	mov    %rdi,%rbp
  4149d2:	4c 01 db             	add    %r11,%rbx
  4149d5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4149d9:	48 83 c0 10          	add    $0x10,%rax
  4149dd:	48 89 07             	mov    %rax,(%rdi)
  4149e0:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4149e4:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  4149e8:	48 39 c7             	cmp    %rax,%rdi
  4149eb:	74 12                	je     4149ff <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED0Ev+0x4f>
  4149ed:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4149f4:	ff ff ff 
  4149f7:	49 89 df             	mov    %rbx,%r15
  4149fa:	48 01 d8             	add    %rbx,%rax
  4149fd:	ff d0                	callq  *%rax
  4149ff:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414a06:	ff ff ff 
  414a09:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  414a0d:	49 89 df             	mov    %rbx,%r15
  414a10:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414a14:	48 83 c0 10          	add    $0x10,%rax
  414a18:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414a1c:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  414a23:	ff ff ff 
  414a26:	48 01 d8             	add    %rbx,%rax
  414a29:	ff d0                	callq  *%rax
  414a2b:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414a32:	ff ff ff 
  414a35:	48 89 ef             	mov    %rbp,%rdi
  414a38:	be 68 00 00 00       	mov    $0x68,%esi
  414a3d:	48 01 d8             	add    %rbx,%rax
  414a40:	5b                   	pop    %rbx
  414a41:	5d                   	pop    %rbp
  414a42:	41 5f                	pop    %r15
  414a44:	ff e0                	jmpq   *%rax
  414a46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414a4d:	00 00 00 

0000000000414a50 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED0Ev>:
  414a50:	41 57                	push   %r15
  414a52:	55                   	push   %rbp
  414a53:	49 bb b0 65 21 00 00 	movabs $0x2165b0,%r11
  414a5a:	00 00 00 
  414a5d:	53                   	push   %rbx
  414a5e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414a50 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED0Ev>
  414a65:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  414a6c:	ff ff ff 
  414a6f:	48 89 fd             	mov    %rdi,%rbp
  414a72:	4c 01 db             	add    %r11,%rbx
  414a75:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414a79:	48 83 c0 10          	add    $0x10,%rax
  414a7d:	48 89 07             	mov    %rax,(%rdi)
  414a80:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414a84:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  414a88:	48 39 c7             	cmp    %rax,%rdi
  414a8b:	74 12                	je     414a9f <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED0Ev+0x4f>
  414a8d:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  414a94:	ff ff ff 
  414a97:	49 89 df             	mov    %rbx,%r15
  414a9a:	48 01 d8             	add    %rbx,%rax
  414a9d:	ff d0                	callq  *%rax
  414a9f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414aa6:	ff ff ff 
  414aa9:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  414aad:	49 89 df             	mov    %rbx,%r15
  414ab0:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414ab4:	48 83 c0 10          	add    $0x10,%rax
  414ab8:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414abc:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  414ac3:	ff ff ff 
  414ac6:	48 01 d8             	add    %rbx,%rax
  414ac9:	ff d0                	callq  *%rax
  414acb:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414ad2:	ff ff ff 
  414ad5:	48 89 ef             	mov    %rbp,%rdi
  414ad8:	be 68 00 00 00       	mov    $0x68,%esi
  414add:	48 01 d8             	add    %rbx,%rax
  414ae0:	5b                   	pop    %rbx
  414ae1:	5d                   	pop    %rbp
  414ae2:	41 5f                	pop    %r15
  414ae4:	ff e0                	jmpq   *%rax
  414ae6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414aed:	00 00 00 

0000000000414af0 <_ZN11EnvironmentD1Ev>:
class Environment {
  414af0:	41 57                	push   %r15
  414af2:	41 55                	push   %r13
  414af4:	49 89 fd             	mov    %rdi,%r13
  414af7:	41 54                	push   %r12
  414af9:	55                   	push   %rbp
  414afa:	48 8d 2d ef ff ff ff 	lea    -0x11(%rip),%rbp        # 414af0 <_ZN11EnvironmentD1Ev>
  414b01:	53                   	push   %rbx
  414b02:	48 8b 7f 30          	mov    0x30(%rdi),%rdi
  414b06:	49 bb 10 65 21 00 00 	movabs $0x216510,%r11
  414b0d:	00 00 00 
  414b10:	4c 01 dd             	add    %r11,%rbp
  414b13:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  414b1a:	ff ff ff 
  414b1d:	49 01 ec             	add    %rbp,%r12
      while (__n)
  414b20:	48 85 ff             	test   %rdi,%rdi
  414b23:	74 14                	je     414b39 <_ZN11EnvironmentD1Ev+0x49>
  414b25:	0f 1f 00             	nopl   (%rax)
  414b28:	48 8b 1f             	mov    (%rdi),%rbx
  414b2b:	49 89 ef             	mov    %rbp,%r15
  414b2e:	41 ff d4             	callq  *%r12
  414b31:	48 85 db             	test   %rbx,%rbx
  414b34:	48 89 df             	mov    %rbx,%rdi
  414b37:	75 ef                	jne    414b28 <_ZN11EnvironmentD1Ev+0x38>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  414b39:	49 8b 45 28          	mov    0x28(%r13),%rax
  414b3d:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  414b41:	31 f6                	xor    %esi,%esi
  414b43:	49 89 ef             	mov    %rbp,%r15
  414b46:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  414b4d:	00 
  414b4e:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  414b55:	ff ff ff 
  414b58:	48 01 e8             	add    %rbp,%rax
  414b5b:	ff d0                	callq  *%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  414b5d:	49 8b 7d 20          	mov    0x20(%r13),%rdi
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  414b61:	49 8d 45 50          	lea    0x50(%r13),%rax
      _M_element_count = 0;
  414b65:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
  414b6c:	00 
      _M_before_begin._M_nxt = nullptr;
  414b6d:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
  414b74:	00 
	if (_M_uses_single_bucket(__bkts))
  414b75:	48 39 c7             	cmp    %rax,%rdi
  414b78:	74 12                	je     414b8c <_ZN11EnvironmentD1Ev+0x9c>
  414b7a:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  414b81:	ff ff ff 
  414b84:	49 89 ef             	mov    %rbp,%r15
  414b87:	48 01 e8             	add    %rbp,%rax
  414b8a:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  414b8c:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	if (__p)
  414b90:	48 85 ff             	test   %rdi,%rdi
  414b93:	74 1b                	je     414bb0 <_ZN11EnvironmentD1Ev+0xc0>
  414b95:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  414b9c:	ff ff ff 
  414b9f:	5b                   	pop    %rbx
  414ba0:	48 01 e8             	add    %rbp,%rax
  414ba3:	5d                   	pop    %rbp
  414ba4:	41 5c                	pop    %r12
  414ba6:	41 5d                	pop    %r13
  414ba8:	41 5f                	pop    %r15
  414baa:	ff e0                	jmpq   *%rax
  414bac:	0f 1f 40 00          	nopl   0x0(%rax)
  414bb0:	5b                   	pop    %rbx
  414bb1:	5d                   	pop    %rbp
  414bb2:	41 5c                	pop    %r12
  414bb4:	41 5d                	pop    %r13
  414bb6:	41 5f                	pop    %r15
  414bb8:	c3                   	retq   
  414bb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000414bc0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>:
            ~clone_impl() throw()
  414bc0:	41 57                	push   %r15
  414bc2:	55                   	push   %rbp
  414bc3:	49 bb 40 64 21 00 00 	movabs $0x216440,%r11
  414bca:	00 00 00 
  414bcd:	53                   	push   %rbx
  414bce:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414bc0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>
                }
  414bd5:	48 b8 20 f1 ff ff ff 	movabs $0xfffffffffffff120,%rax
  414bdc:	ff ff ff 
            ~clone_impl() throw()
  414bdf:	48 89 fd             	mov    %rdi,%rbp
  414be2:	4c 01 db             	add    %r11,%rbx
                }
  414be5:	48 01 d8             	add    %rbx,%rax
  414be8:	48 89 47 40          	mov    %rax,0x40(%rdi)
                }
  414bec:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  414bf3:	ff ff ff 
  414bf6:	48 01 d8             	add    %rbx,%rax
  414bf9:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414bfc:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414c03:	ff ff ff 
  414c06:	48 01 d8             	add    %rbx,%rax
  414c09:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  414c0d:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  414c11:	48 85 ff             	test   %rdi,%rdi
  414c14:	74 06                	je     414c1c <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev+0x5c>
  414c16:	48 8b 07             	mov    (%rdi),%rax
  414c19:	ff 50 20             	callq  *0x20(%rax)
  414c1c:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  414c23:	ff ff ff 
  414c26:	48 89 ef             	mov    %rbp,%rdi
  414c29:	48 01 d8             	add    %rbx,%rax
  414c2c:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414c30:	48 b8 d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rax
  414c37:	ff ff ff 
  414c3a:	48 01 d8             	add    %rbx,%rax
                }
  414c3d:	5b                   	pop    %rbx
  414c3e:	5d                   	pop    %rbp
  414c3f:	41 5f                	pop    %r15
  414c41:	ff e0                	jmpq   *%rax
  414c43:	0f 1f 00             	nopl   (%rax)
  414c46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414c4d:	00 00 00 

0000000000414c50 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>:
            ~clone_impl() throw()
  414c50:	48 83 ef 18          	sub    $0x18,%rdi
  414c54:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414c54 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev+0x4>
  414c5b:	49 ba ac 63 21 00 00 	movabs $0x2163ac,%r10
  414c62:	00 00 00 
  414c65:	4d 01 d3             	add    %r10,%r11
  414c68:	49 ba c0 9b de ff ff 	movabs $0xffffffffffde9bc0,%r10
  414c6f:	ff ff ff 
  414c72:	4d 01 da             	add    %r11,%r10
  414c75:	41 ff e2             	jmpq   *%r10
  414c78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  414c7f:	00 

0000000000414c80 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>:
  414c80:	4c 8b 17             	mov    (%rdi),%r10
  414c83:	49 03 7a d8          	add    -0x28(%r10),%rdi
  414c87:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414c87 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev+0x7>
  414c8e:	49 ba 79 63 21 00 00 	movabs $0x216379,%r10
  414c95:	00 00 00 
  414c98:	4d 01 d3             	add    %r10,%r11
  414c9b:	49 ba c0 9b de ff ff 	movabs $0xffffffffffde9bc0,%r10
  414ca2:	ff ff ff 
  414ca5:	4d 01 da             	add    %r11,%r10
  414ca8:	41 ff e2             	jmpq   *%r10
  414cab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000414cb0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>:
  414cb0:	41 57                	push   %r15
  414cb2:	55                   	push   %rbp
  414cb3:	49 bb 50 63 21 00 00 	movabs $0x216350,%r11
  414cba:	00 00 00 
  414cbd:	53                   	push   %rbx
  414cbe:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414cb0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>
                }
  414cc5:	48 b8 90 f3 ff ff ff 	movabs $0xfffffffffffff390,%rax
  414ccc:	ff ff ff 
            ~clone_impl() throw()
  414ccf:	48 89 fd             	mov    %rdi,%rbp
  414cd2:	4c 01 db             	add    %r11,%rbx
                }
  414cd5:	48 01 d8             	add    %rbx,%rax
  414cd8:	48 89 47 38          	mov    %rax,0x38(%rdi)
                }
  414cdc:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  414ce3:	ff ff ff 
  414ce6:	48 01 d8             	add    %rbx,%rax
  414ce9:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414cec:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414cf3:	ff ff ff 
  414cf6:	48 01 d8             	add    %rbx,%rax
  414cf9:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  414cfd:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  414d01:	48 85 ff             	test   %rdi,%rdi
  414d04:	74 06                	je     414d0c <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev+0x5c>
  414d06:	48 8b 07             	mov    (%rdi),%rax
  414d09:	ff 50 20             	callq  *0x20(%rax)
  414d0c:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  414d13:	ff ff ff 
  414d16:	48 89 ef             	mov    %rbp,%rdi
  414d19:	48 01 d8             	add    %rbx,%rax
  414d1c:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414d20:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414d27:	ff ff ff 
  414d2a:	48 01 d8             	add    %rbx,%rax
                }
  414d2d:	5b                   	pop    %rbx
  414d2e:	5d                   	pop    %rbp
  414d2f:	41 5f                	pop    %r15
  414d31:	ff e0                	jmpq   *%rax
  414d33:	0f 1f 00             	nopl   (%rax)
  414d36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414d3d:	00 00 00 

0000000000414d40 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>:
            ~clone_impl() throw()
  414d40:	48 83 ef 10          	sub    $0x10,%rdi
  414d44:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414d44 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev+0x4>
  414d4b:	49 ba bc 62 21 00 00 	movabs $0x2162bc,%r10
  414d52:	00 00 00 
  414d55:	4d 01 d3             	add    %r10,%r11
  414d58:	49 ba b0 9c de ff ff 	movabs $0xffffffffffde9cb0,%r10
  414d5f:	ff ff ff 
  414d62:	4d 01 da             	add    %r11,%r10
  414d65:	41 ff e2             	jmpq   *%r10
  414d68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  414d6f:	00 

0000000000414d70 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>:
  414d70:	4c 8b 17             	mov    (%rdi),%r10
  414d73:	49 03 7a d8          	add    -0x28(%r10),%rdi
  414d77:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414d77 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev+0x7>
  414d7e:	49 ba 89 62 21 00 00 	movabs $0x216289,%r10
  414d85:	00 00 00 
  414d88:	4d 01 d3             	add    %r10,%r11
  414d8b:	49 ba b0 9c de ff ff 	movabs $0xffffffffffde9cb0,%r10
  414d92:	ff ff ff 
  414d95:	4d 01 da             	add    %r11,%r10
  414d98:	41 ff e2             	jmpq   *%r10
  414d9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000414da0 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev>:
            ~error_info_injector() throw()
  414da0:	41 57                	push   %r15
  414da2:	55                   	push   %rbp
  414da3:	49 bb 60 62 21 00 00 	movabs $0x216260,%r11
  414daa:	00 00 00 
  414dad:	53                   	push   %rbx
  414dae:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414da0 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev>
                }
  414db5:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  414dbc:	ff ff ff 
            ~error_info_injector() throw()
  414dbf:	48 89 fd             	mov    %rdi,%rbp
  414dc2:	4c 01 db             	add    %r11,%rbx
                }
  414dc5:	48 01 d8             	add    %rbx,%rax
  414dc8:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414dcb:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414dd2:	ff ff ff 
  414dd5:	48 01 d8             	add    %rbx,%rax
  414dd8:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  414ddc:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  414de0:	48 85 ff             	test   %rdi,%rdi
  414de3:	74 06                	je     414deb <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev+0x4b>
  414de5:	48 8b 07             	mov    (%rdi),%rax
  414de8:	ff 50 20             	callq  *0x20(%rax)
  414deb:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  414df2:	ff ff ff 
  414df5:	48 89 ef             	mov    %rbp,%rdi
  414df8:	49 89 df             	mov    %rbx,%r15
  414dfb:	48 01 d8             	add    %rbx,%rax
  414dfe:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414e02:	48 b8 d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rax
  414e09:	ff ff ff 
  414e0c:	48 01 d8             	add    %rbx,%rax
  414e0f:	ff d0                	callq  *%rax
                }
  414e11:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414e18:	ff ff ff 
  414e1b:	48 89 ef             	mov    %rbp,%rdi
  414e1e:	be 40 00 00 00       	mov    $0x40,%esi
  414e23:	48 01 d8             	add    %rbx,%rax
  414e26:	5b                   	pop    %rbx
  414e27:	5d                   	pop    %rbp
  414e28:	41 5f                	pop    %r15
  414e2a:	ff e0                	jmpq   *%rax
  414e2c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414e30 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev>:
            ~error_info_injector() throw()
  414e30:	48 83 ef 18          	sub    $0x18,%rdi
  414e34:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414e34 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev+0x4>
  414e3b:	49 ba cc 61 21 00 00 	movabs $0x2161cc,%r10
  414e42:	00 00 00 
  414e45:	4d 01 d3             	add    %r10,%r11
  414e48:	49 ba a0 9d de ff ff 	movabs $0xffffffffffde9da0,%r10
  414e4f:	ff ff ff 
  414e52:	4d 01 da             	add    %r11,%r10
  414e55:	41 ff e2             	jmpq   *%r10
  414e58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  414e5f:	00 

0000000000414e60 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev>:
  414e60:	41 57                	push   %r15
  414e62:	55                   	push   %rbp
  414e63:	49 bb a0 61 21 00 00 	movabs $0x2161a0,%r11
  414e6a:	00 00 00 
  414e6d:	53                   	push   %rbx
  414e6e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414e60 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev>
                }
  414e75:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  414e7c:	ff ff ff 
            ~error_info_injector() throw()
  414e7f:	48 89 fd             	mov    %rdi,%rbp
  414e82:	4c 01 db             	add    %r11,%rbx
                }
  414e85:	48 01 d8             	add    %rbx,%rax
  414e88:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414e8b:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414e92:	ff ff ff 
  414e95:	48 01 d8             	add    %rbx,%rax
  414e98:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  414e9c:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  414ea0:	48 85 ff             	test   %rdi,%rdi
  414ea3:	74 06                	je     414eab <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev+0x4b>
  414ea5:	48 8b 07             	mov    (%rdi),%rax
  414ea8:	ff 50 20             	callq  *0x20(%rax)
  414eab:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  414eb2:	ff ff ff 
  414eb5:	48 89 ef             	mov    %rbp,%rdi
  414eb8:	49 89 df             	mov    %rbx,%r15
  414ebb:	48 01 d8             	add    %rbx,%rax
  414ebe:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414ec2:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414ec9:	ff ff ff 
  414ecc:	48 01 d8             	add    %rbx,%rax
  414ecf:	ff d0                	callq  *%rax
                }
  414ed1:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414ed8:	ff ff ff 
  414edb:	48 89 ef             	mov    %rbp,%rdi
  414ede:	be 38 00 00 00       	mov    $0x38,%esi
  414ee3:	48 01 d8             	add    %rbx,%rax
  414ee6:	5b                   	pop    %rbx
  414ee7:	5d                   	pop    %rbp
  414ee8:	41 5f                	pop    %r15
  414eea:	ff e0                	jmpq   *%rax
  414eec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414ef0 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev>:
            ~error_info_injector() throw()
  414ef0:	48 83 ef 10          	sub    $0x10,%rdi
  414ef4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414ef4 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev+0x4>
  414efb:	49 ba 0c 61 21 00 00 	movabs $0x21610c,%r10
  414f02:	00 00 00 
  414f05:	4d 01 d3             	add    %r10,%r11
  414f08:	49 ba 60 9e de ff ff 	movabs $0xffffffffffde9e60,%r10
  414f0f:	ff ff ff 
  414f12:	4d 01 da             	add    %r11,%r10
  414f15:	41 ff e2             	jmpq   *%r10
  414f18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  414f1f:	00 

0000000000414f20 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>:
            ~clone_impl() throw()
  414f20:	41 57                	push   %r15
  414f22:	55                   	push   %rbp
  414f23:	49 bb e0 60 21 00 00 	movabs $0x2160e0,%r11
  414f2a:	00 00 00 
  414f2d:	53                   	push   %rbx
  414f2e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414f20 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>
                }
  414f35:	48 b8 90 f3 ff ff ff 	movabs $0xfffffffffffff390,%rax
  414f3c:	ff ff ff 
            ~clone_impl() throw()
  414f3f:	48 89 fd             	mov    %rdi,%rbp
  414f42:	4c 01 db             	add    %r11,%rbx
                }
  414f45:	48 01 d8             	add    %rbx,%rax
  414f48:	48 89 47 38          	mov    %rax,0x38(%rdi)
                }
  414f4c:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  414f53:	ff ff ff 
  414f56:	48 01 d8             	add    %rbx,%rax
  414f59:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414f5c:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414f63:	ff ff ff 
  414f66:	48 01 d8             	add    %rbx,%rax
  414f69:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  414f6d:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  414f71:	48 85 ff             	test   %rdi,%rdi
  414f74:	74 06                	je     414f7c <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev+0x5c>
  414f76:	48 8b 07             	mov    (%rdi),%rax
  414f79:	ff 50 20             	callq  *0x20(%rax)
  414f7c:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  414f83:	ff ff ff 
  414f86:	48 89 ef             	mov    %rbp,%rdi
  414f89:	49 89 df             	mov    %rbx,%r15
  414f8c:	48 01 d8             	add    %rbx,%rax
  414f8f:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414f93:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  414f9a:	ff ff ff 
  414f9d:	48 01 d8             	add    %rbx,%rax
  414fa0:	ff d0                	callq  *%rax
                }
  414fa2:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  414fa9:	ff ff ff 
  414fac:	48 89 ef             	mov    %rbp,%rdi
  414faf:	be 40 00 00 00       	mov    $0x40,%esi
  414fb4:	48 01 d8             	add    %rbx,%rax
  414fb7:	5b                   	pop    %rbx
  414fb8:	5d                   	pop    %rbp
  414fb9:	41 5f                	pop    %r15
  414fbb:	ff e0                	jmpq   *%rax
  414fbd:	0f 1f 00             	nopl   (%rax)

0000000000414fc0 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>:
            ~clone_impl() throw()
  414fc0:	48 83 ef 10          	sub    $0x10,%rdi
  414fc4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414fc4 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev+0x4>
  414fcb:	49 ba 3c 60 21 00 00 	movabs $0x21603c,%r10
  414fd2:	00 00 00 
  414fd5:	4d 01 d3             	add    %r10,%r11
  414fd8:	49 ba 20 9f de ff ff 	movabs $0xffffffffffde9f20,%r10
  414fdf:	ff ff ff 
  414fe2:	4d 01 da             	add    %r11,%r10
  414fe5:	41 ff e2             	jmpq   *%r10
  414fe8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  414fef:	00 

0000000000414ff0 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>:
  414ff0:	4c 8b 17             	mov    (%rdi),%r10
  414ff3:	49 03 7a d8          	add    -0x28(%r10),%rdi
  414ff7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414ff7 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev+0x7>
  414ffe:	49 ba 09 60 21 00 00 	movabs $0x216009,%r10
  415005:	00 00 00 
  415008:	4d 01 d3             	add    %r10,%r11
  41500b:	49 ba 20 9f de ff ff 	movabs $0xffffffffffde9f20,%r10
  415012:	ff ff ff 
  415015:	4d 01 da             	add    %r11,%r10
  415018:	41 ff e2             	jmpq   *%r10
  41501b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415020 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>:
  415020:	41 57                	push   %r15
  415022:	55                   	push   %rbp
  415023:	49 bb e0 5f 21 00 00 	movabs $0x215fe0,%r11
  41502a:	00 00 00 
  41502d:	53                   	push   %rbx
  41502e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 415020 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>
                }
  415035:	48 b8 20 f1 ff ff ff 	movabs $0xfffffffffffff120,%rax
  41503c:	ff ff ff 
            ~clone_impl() throw()
  41503f:	48 89 fd             	mov    %rdi,%rbp
  415042:	4c 01 db             	add    %r11,%rbx
                }
  415045:	48 01 d8             	add    %rbx,%rax
  415048:	48 89 47 40          	mov    %rax,0x40(%rdi)
                }
  41504c:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  415053:	ff ff ff 
  415056:	48 01 d8             	add    %rbx,%rax
  415059:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  41505c:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  415063:	ff ff ff 
  415066:	48 01 d8             	add    %rbx,%rax
  415069:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  41506d:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  415071:	48 85 ff             	test   %rdi,%rdi
  415074:	74 06                	je     41507c <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev+0x5c>
  415076:	48 8b 07             	mov    (%rdi),%rax
  415079:	ff 50 20             	callq  *0x20(%rax)
  41507c:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  415083:	ff ff ff 
  415086:	48 89 ef             	mov    %rbp,%rdi
  415089:	49 89 df             	mov    %rbx,%r15
  41508c:	48 01 d8             	add    %rbx,%rax
  41508f:	48 89 45 00          	mov    %rax,0x0(%rbp)
  415093:	48 b8 d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rax
  41509a:	ff ff ff 
  41509d:	48 01 d8             	add    %rbx,%rax
  4150a0:	ff d0                	callq  *%rax
                }
  4150a2:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  4150a9:	ff ff ff 
  4150ac:	48 89 ef             	mov    %rbp,%rdi
  4150af:	be 48 00 00 00       	mov    $0x48,%esi
  4150b4:	48 01 d8             	add    %rbx,%rax
  4150b7:	5b                   	pop    %rbx
  4150b8:	5d                   	pop    %rbp
  4150b9:	41 5f                	pop    %r15
  4150bb:	ff e0                	jmpq   *%rax
  4150bd:	0f 1f 00             	nopl   (%rax)

00000000004150c0 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>:
            ~clone_impl() throw()
  4150c0:	48 83 ef 18          	sub    $0x18,%rdi
  4150c4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4150c4 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev+0x4>
  4150cb:	49 ba 3c 5f 21 00 00 	movabs $0x215f3c,%r10
  4150d2:	00 00 00 
  4150d5:	4d 01 d3             	add    %r10,%r11
  4150d8:	49 ba 20 a0 de ff ff 	movabs $0xffffffffffdea020,%r10
  4150df:	ff ff ff 
  4150e2:	4d 01 da             	add    %r11,%r10
  4150e5:	41 ff e2             	jmpq   *%r10
  4150e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4150ef:	00 

00000000004150f0 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>:
  4150f0:	4c 8b 17             	mov    (%rdi),%r10
  4150f3:	49 03 7a d8          	add    -0x28(%r10),%rdi
  4150f7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4150f7 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev+0x7>
  4150fe:	49 ba 09 5f 21 00 00 	movabs $0x215f09,%r10
  415105:	00 00 00 
  415108:	4d 01 d3             	add    %r10,%r11
  41510b:	49 ba 20 a0 de ff ff 	movabs $0xffffffffffdea020,%r10
  415112:	ff ff ff 
  415115:	4d 01 da             	add    %r11,%r10
  415118:	41 ff e2             	jmpq   *%r10
  41511b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415120 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE>:
        virtual bool apply_default(boost::any& value_store) const
  415120:	41 57                	push   %r15
  415122:	41 54                	push   %r12
  415124:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 415120 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE>
  41512b:	55                   	push   %rbp
  41512c:	53                   	push   %rbx
  41512d:	49 bb e0 5e 21 00 00 	movabs $0x215ee0,%r11
  415134:	00 00 00 
  415137:	4d 01 df             	add    %r11,%r15
                return false;
  41513a:	31 ed                	xor    %ebp,%ebp
        virtual bool apply_default(boost::any& value_store) const
  41513c:	48 83 ec 08          	sub    $0x8,%rsp
            return !content;
  415140:	4c 8b 67 38          	mov    0x38(%rdi),%r12
            if (m_default_value.empty()) {
  415144:	4d 85 e4             	test   %r12,%r12
  415147:	74 63                	je     4151ac <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0x8c>
          : content(other.content ? other.content->clone() : 0)
  415149:	49 8b 04 24          	mov    (%r12),%rax
  41514d:	48 ba d0 83 de ff ff 	movabs $0xffffffffffde83d0,%rdx
  415154:	ff ff ff 
  415157:	48 89 f3             	mov    %rsi,%rbx
  41515a:	4c 01 fa             	add    %r15,%rdx
  41515d:	48 8b 40 18          	mov    0x18(%rax),%rax
  415161:	48 39 d0             	cmp    %rdx,%rax
  415164:	75 5a                	jne    4151c0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0xa0>
                return new holder(held);
  415166:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41516d:	ff ff ff 
  415170:	bf 10 00 00 00       	mov    $0x10,%edi
  415175:	4c 01 f8             	add    %r15,%rax
  415178:	ff d0                	callq  *%rax
              : held(value)
  41517a:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  415181:	ff ff ff 
  415184:	f3 41 0f 10 44 24 08 	movss  0x8(%r12),%xmm0
  41518b:	4c 01 fa             	add    %r15,%rdx
  41518e:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  415193:	48 89 10             	mov    %rdx,(%rax)
      __a = _GLIBCXX_MOVE(__b);
  415196:	48 8b 3b             	mov    (%rbx),%rdi
                return true;
  415199:	bd 01 00 00 00       	mov    $0x1,%ebp
      __b = _GLIBCXX_MOVE(__tmp);
  41519e:	48 89 03             	mov    %rax,(%rbx)
            delete content;
  4151a1:	48 85 ff             	test   %rdi,%rdi
  4151a4:	74 06                	je     4151ac <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0x8c>
  4151a6:	48 8b 07             	mov    (%rdi),%rax
  4151a9:	ff 50 08             	callq  *0x8(%rax)
        }
  4151ac:	48 83 c4 08          	add    $0x8,%rsp
  4151b0:	89 e8                	mov    %ebp,%eax
  4151b2:	5b                   	pop    %rbx
  4151b3:	5d                   	pop    %rbp
  4151b4:	41 5c                	pop    %r12
  4151b6:	41 5f                	pop    %r15
  4151b8:	c3                   	retq   
  4151b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
          : content(other.content ? other.content->clone() : 0)
  4151c0:	4c 89 e7             	mov    %r12,%rdi
  4151c3:	ff d0                	callq  *%rax
  4151c5:	eb cf                	jmp    415196 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0x76>
  4151c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4151ce:	00 00 

00000000004151d0 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE>:
        virtual bool apply_default(boost::any& value_store) const
  4151d0:	41 57                	push   %r15
  4151d2:	41 54                	push   %r12
  4151d4:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 4151d0 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE>
  4151db:	55                   	push   %rbp
  4151dc:	53                   	push   %rbx
  4151dd:	49 bb 30 5e 21 00 00 	movabs $0x215e30,%r11
  4151e4:	00 00 00 
  4151e7:	4d 01 df             	add    %r11,%r15
                return false;
  4151ea:	31 ed                	xor    %ebp,%ebp
        virtual bool apply_default(boost::any& value_store) const
  4151ec:	48 83 ec 08          	sub    $0x8,%rsp
            return !content;
  4151f0:	4c 8b 67 38          	mov    0x38(%rdi),%r12
            if (m_default_value.empty()) {
  4151f4:	4d 85 e4             	test   %r12,%r12
  4151f7:	74 63                	je     41525c <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0x8c>
          : content(other.content ? other.content->clone() : 0)
  4151f9:	49 8b 04 24          	mov    (%r12),%rax
  4151fd:	48 ba d0 83 de ff ff 	movabs $0xffffffffffde83d0,%rdx
  415204:	ff ff ff 
  415207:	48 89 f3             	mov    %rsi,%rbx
  41520a:	4c 01 fa             	add    %r15,%rdx
  41520d:	48 8b 40 18          	mov    0x18(%rax),%rax
  415211:	48 39 d0             	cmp    %rdx,%rax
  415214:	75 5a                	jne    415270 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0xa0>
                return new holder(held);
  415216:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41521d:	ff ff ff 
  415220:	bf 10 00 00 00       	mov    $0x10,%edi
  415225:	4c 01 f8             	add    %r15,%rax
  415228:	ff d0                	callq  *%rax
              : held(value)
  41522a:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  415231:	ff ff ff 
  415234:	f3 41 0f 10 44 24 08 	movss  0x8(%r12),%xmm0
  41523b:	4c 01 fa             	add    %r15,%rdx
  41523e:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  415243:	48 89 10             	mov    %rdx,(%rax)
      __a = _GLIBCXX_MOVE(__b);
  415246:	48 8b 3b             	mov    (%rbx),%rdi
                return true;
  415249:	bd 01 00 00 00       	mov    $0x1,%ebp
      __b = _GLIBCXX_MOVE(__tmp);
  41524e:	48 89 03             	mov    %rax,(%rbx)
            delete content;
  415251:	48 85 ff             	test   %rdi,%rdi
  415254:	74 06                	je     41525c <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0x8c>
  415256:	48 8b 07             	mov    (%rdi),%rax
  415259:	ff 50 08             	callq  *0x8(%rax)
        }
  41525c:	48 83 c4 08          	add    $0x8,%rsp
  415260:	89 e8                	mov    %ebp,%eax
  415262:	5b                   	pop    %rbx
  415263:	5d                   	pop    %rbp
  415264:	41 5c                	pop    %r12
  415266:	41 5f                	pop    %r15
  415268:	c3                   	retq   
  415269:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
          : content(other.content ? other.content->clone() : 0)
  415270:	4c 89 e7             	mov    %r12,%rdi
  415273:	ff d0                	callq  *%rax
  415275:	eb cf                	jmp    415246 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0x76>
  415277:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41527e:	00 00 

0000000000415280 <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i>:
            invalid_option_value,
            invalid_option
        };
        
    public:
        validation_error(kind_t kind, 
  415280:	41 57                	push   %r15
  415282:	41 56                	push   %r14
  415284:	49 bb 80 5d 21 00 00 	movabs $0x215d80,%r11
  41528b:	00 00 00 
  41528e:	41 55                	push   %r13
  415290:	41 54                	push   %r12
                   const std::string& option_name = "",
                   const std::string& original_token = "",
                   int option_style              = 0):
        error_with_option_name(get_template(kind), option_name, original_token, option_style)
  415292:	48 b8 60 e4 dd ff ff 	movabs $0xffffffffffdde460,%rax
  415299:	ff ff ff 
        validation_error(kind_t kind, 
  41529c:	55                   	push   %rbp
  41529d:	53                   	push   %rbx
  41529e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 415280 <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i>
  4152a5:	49 89 fc             	mov    %rdi,%r12
  4152a8:	49 89 d5             	mov    %rdx,%r13
  4152ab:	49 89 ce             	mov    %rcx,%r14
  4152ae:	48 83 ec 38          	sub    $0x38,%rsp
  4152b2:	4c 01 db             	add    %r11,%rbx
        error_with_option_name(get_template(kind), option_name, original_token, option_style)
  4152b5:	89 f2                	mov    %esi,%edx
  4152b7:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  4152bc:	48 89 fe             	mov    %rdi,%rsi
        validation_error(kind_t kind, 
  4152bf:	44 89 44 24 0c       	mov    %r8d,0xc(%rsp)
        error_with_option_name(get_template(kind), option_name, original_token, option_style)
  4152c4:	48 01 d8             	add    %rbx,%rax
  4152c7:	49 89 df             	mov    %rbx,%r15
  4152ca:	48 89 ef             	mov    %rbp,%rdi
  4152cd:	ff d0                	callq  *%rax
  4152cf:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4152d6:	ff ff ff 
  4152d9:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  4152de:	4c 89 f1             	mov    %r14,%rcx
  4152e1:	4c 89 ea             	mov    %r13,%rdx
  4152e4:	48 89 ee             	mov    %rbp,%rsi
  4152e7:	4c 89 e7             	mov    %r12,%rdi
  4152ea:	48 01 d8             	add    %rbx,%rax
  4152ed:	ff d0                	callq  *%rax
  4152ef:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4152f4:	48 83 c5 10          	add    $0x10,%rbp
  4152f8:	48 39 ef             	cmp    %rbp,%rdi
  4152fb:	74 0f                	je     41530c <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i+0x8c>
  4152fd:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  415304:	ff ff ff 
  415307:	48 01 d8             	add    %rbx,%rax
  41530a:	ff d0                	callq  *%rax
  41530c:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  415313:	ff ff ff 
  415316:	48 01 d8             	add    %rbx,%rax
  415319:	49 89 04 24          	mov    %rax,(%r12)
        {
        }
  41531d:	48 83 c4 38          	add    $0x38,%rsp
  415321:	5b                   	pop    %rbx
  415322:	5d                   	pop    %rbp
  415323:	41 5c                	pop    %r12
  415325:	41 5d                	pop    %r13
  415327:	41 5e                	pop    %r14
  415329:	41 5f                	pop    %r15
  41532b:	c3                   	retq   
  41532c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415331:	48 83 c5 10          	add    $0x10,%rbp
  415335:	49 89 c4             	mov    %rax,%r12
  415338:	48 39 ef             	cmp    %rbp,%rdi
  41533b:	74 12                	je     41534f <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i+0xcf>
  41533d:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  415344:	ff ff ff 
  415347:	49 89 df             	mov    %rbx,%r15
  41534a:	48 01 da             	add    %rbx,%rdx
  41534d:	ff d2                	callq  *%rdx
  41534f:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  415356:	ff ff ff 
  415359:	4c 89 e7             	mov    %r12,%rdi
  41535c:	49 89 df             	mov    %rbx,%r15
  41535f:	48 01 d8             	add    %rbx,%rax
  415362:	ff d0                	callq  *%rax
  415364:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41536b:	00 00 00 
  41536e:	66 90                	xchg   %ax,%ax

0000000000415370 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_>:
            {
  415370:	41 57                	push   %r15
  415372:	41 55                	push   %r13
  415374:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 415370 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_>
  41537b:	41 54                	push   %r12
  41537d:	55                   	push   %rbp
  41537e:	49 bb 90 5c 21 00 00 	movabs $0x215c90,%r11
  415385:	00 00 00 
  415388:	53                   	push   %rbx
  415389:	4d 01 dd             	add    %r11,%r13
  41538c:	48 89 fd             	mov    %rdi,%rbp
  41538f:	49 89 f4             	mov    %rsi,%r12
  415392:	48 83 ec 10          	sub    $0x10,%rsp
                return px_;
  415396:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
            if( error_info_container * d=b->data_.get() )
  41539a:	48 85 db             	test   %rbx,%rbx
  41539d:	0f 84 85 00 00 00    	je     415428 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xb8>
                data = d->clone();
  4153a3:	48 8b 03             	mov    (%rbx),%rax
  4153a6:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4153ab:	48 89 de             	mov    %rbx,%rsi
  4153ae:	ff 50 28             	callq  *0x28(%rax)
                adopt(x.px_);
  4153b1:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
                if( px_ )
  4153b6:	48 85 db             	test   %rbx,%rbx
  4153b9:	74 19                	je     4153d4 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x64>
                    px_->add_ref();
  4153bb:	48 8b 03             	mov    (%rbx),%rax
  4153be:	48 89 df             	mov    %rbx,%rdi
  4153c1:	ff 50 18             	callq  *0x18(%rax)
                if( px_ && px_->release() )
  4153c4:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4153c9:	48 85 ff             	test   %rdi,%rdi
  4153cc:	74 06                	je     4153d4 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x64>
  4153ce:	48 8b 07             	mov    (%rdi),%rax
  4153d1:	ff 50 20             	callq  *0x20(%rax)
            a->throw_file_ = b->throw_file_;
  4153d4:	49 8b 44 24 18       	mov    0x18(%r12),%rax
                if( px_ && px_->release() )
  4153d9:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
            a->throw_file_ = b->throw_file_;
  4153dd:	48 89 45 18          	mov    %rax,0x18(%rbp)
            a->throw_line_ = b->throw_line_;
  4153e1:	41 8b 44 24 20       	mov    0x20(%r12),%eax
                if( px_ && px_->release() )
  4153e6:	48 85 ff             	test   %rdi,%rdi
            a->throw_line_ = b->throw_line_;
  4153e9:	89 45 20             	mov    %eax,0x20(%rbp)
            a->throw_function_ = b->throw_function_;
  4153ec:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  4153f1:	48 89 45 10          	mov    %rax,0x10(%rbp)
                if( px_ && px_->release() )
  4153f5:	74 06                	je     4153fd <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x8d>
  4153f7:	48 8b 07             	mov    (%rdi),%rax
  4153fa:	ff 50 20             	callq  *0x20(%rax)
                if( px_ )
  4153fd:	48 85 db             	test   %rbx,%rbx
                px_=px;
  415400:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
                if( px_ )
  415404:	74 12                	je     415418 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xa8>
                    px_->add_ref();
  415406:	48 8b 03             	mov    (%rbx),%rax
  415409:	48 89 df             	mov    %rbx,%rdi
  41540c:	ff 50 18             	callq  *0x18(%rax)
                if( px_ && px_->release() )
  41540f:	48 8b 03             	mov    (%rbx),%rax
  415412:	48 89 df             	mov    %rbx,%rdi
  415415:	ff 50 20             	callq  *0x20(%rax)
            }
  415418:	48 83 c4 10          	add    $0x10,%rsp
  41541c:	5b                   	pop    %rbx
  41541d:	5d                   	pop    %rbp
  41541e:	41 5c                	pop    %r12
  415420:	41 5d                	pop    %r13
  415422:	41 5f                	pop    %r15
  415424:	c3                   	retq   
  415425:	0f 1f 00             	nopl   (%rax)
            a->throw_file_ = b->throw_file_;
  415428:	48 8b 46 18          	mov    0x18(%rsi),%rax
  41542c:	48 89 47 18          	mov    %rax,0x18(%rdi)
            a->throw_line_ = b->throw_line_;
  415430:	8b 46 20             	mov    0x20(%rsi),%eax
  415433:	89 47 20             	mov    %eax,0x20(%rdi)
            a->throw_function_ = b->throw_function_;
  415436:	48 8b 46 10          	mov    0x10(%rsi),%rax
  41543a:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  41543e:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  415442:	48 85 ff             	test   %rdi,%rdi
  415445:	75 b0                	jne    4153f7 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x87>
  415447:	eb cf                	jmp    415418 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xa8>
  415449:	48 89 c5             	mov    %rax,%rbp
  41544c:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  415453:	ff ff ff 
  415456:	48 89 ef             	mov    %rbp,%rdi
  415459:	4d 89 ef             	mov    %r13,%r15
  41545c:	4c 01 e8             	add    %r13,%rax
  41545f:	ff d0                	callq  *%rax
  415461:	48 89 c5             	mov    %rax,%rbp
  415464:	48 8b 03             	mov    (%rbx),%rax
  415467:	48 89 df             	mov    %rbx,%rdi
  41546a:	ff 50 20             	callq  *0x20(%rax)
  41546d:	eb dd                	jmp    41544c <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xdc>
  41546f:	48 85 db             	test   %rbx,%rbx
  415472:	48 89 c5             	mov    %rax,%rbp
  415475:	75 ed                	jne    415464 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xf4>
  415477:	eb d3                	jmp    41544c <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xdc>
  415479:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41547e:	48 89 c5             	mov    %rax,%rbp
  415481:	48 85 ff             	test   %rdi,%rdi
  415484:	74 de                	je     415464 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xf4>
  415486:	48 8b 07             	mov    (%rdi),%rax
  415489:	ff 50 20             	callq  *0x20(%rax)
  41548c:	eb d6                	jmp    415464 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xf4>
  41548e:	66 90                	xchg   %ax,%ax

0000000000415490 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv>:
            clone() const
  415490:	41 57                	push   %r15
  415492:	41 55                	push   %r13
  415494:	49 bb 70 5b 21 00 00 	movabs $0x215b70,%r11
  41549b:	00 00 00 
  41549e:	41 54                	push   %r12
  4154a0:	55                   	push   %rbp
  4154a1:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 415490 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv>
                return new clone_impl(*this,clone_tag());
  4154a8:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  4154af:	ff ff ff 
            clone() const
  4154b2:	49 89 fc             	mov    %rdi,%r12
  4154b5:	53                   	push   %rbx
  4154b6:	4c 01 dd             	add    %r11,%rbp
                return new clone_impl(*this,clone_tag());
  4154b9:	bf 48 00 00 00       	mov    $0x48,%edi
    class BOOST_SYMBOL_VISIBLE bad_lexical_cast :
  4154be:	49 bd 68 ef ff ff ff 	movabs $0xffffffffffffef68,%r13
  4154c5:	ff ff ff 
  4154c8:	48 01 e8             	add    %rbp,%rax
  4154cb:	49 89 ef             	mov    %rbp,%r15
  4154ce:	ff d0                	callq  *%rax
  4154d0:	48 89 c3             	mov    %rax,%rbx
        clone_base
  4154d3:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  4154da:	ff ff ff 
                px_(x.px_)
  4154dd:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
        clone_base
  4154e2:	48 01 e8             	add    %rbp,%rax
  4154e5:	48 89 43 40          	mov    %rax,0x40(%rbx)
  4154e9:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
                px_(x.px_)
  4154ee:	48 89 7b 20          	mov    %rdi,0x20(%rbx)
  4154f2:	48 89 03             	mov    %rax,(%rbx)
  4154f5:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  4154fa:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4154fe:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  415503:	48 89 43 10          	mov    %rax,0x10(%rbx)
    exception
  415507:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  41550e:	ff ff ff 
  415511:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  415514:	48 85 ff             	test   %rdi,%rdi
    exception
  415517:	48 89 43 18          	mov    %rax,0x18(%rbx)
                if( px_ )
  41551b:	74 06                	je     415523 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv+0x93>
                    px_->add_ref();
  41551d:	48 8b 07             	mov    (%rdi),%rax
  415520:	ff 50 18             	callq  *0x18(%rax)
    exception
  415523:	41 8b 44 24 38       	mov    0x38(%r12),%eax
                copy_boost_exception(this,&x);
  415528:	49 8d 74 24 18       	lea    0x18(%r12),%rsi
  41552d:	48 8d 7b 18          	lea    0x18(%rbx),%rdi
    exception
  415531:	f3 41 0f 6f 44 24 28 	movdqu 0x28(%r12),%xmm0
  415538:	89 43 38             	mov    %eax,0x38(%rbx)
                T(x)
  41553b:	48 b8 b0 f0 ff ff ff 	movabs $0xfffffffffffff0b0,%rax
  415542:	ff ff ff 
  415545:	48 01 e8             	add    %rbp,%rax
  415548:	48 8d 50 38          	lea    0x38(%rax),%rdx
  41554c:	48 89 03             	mov    %rax,(%rbx)
  41554f:	48 83 c0 70          	add    $0x70,%rax
  415553:	48 89 43 40          	mov    %rax,0x40(%rbx)
                copy_boost_exception(this,&x);
  415557:	48 b8 70 a3 de ff ff 	movabs $0xffffffffffdea370,%rax
  41555e:	ff ff ff 
    exception
  415561:	0f 11 43 28          	movups %xmm0,0x28(%rbx)
                T(x)
  415565:	48 89 53 18          	mov    %rdx,0x18(%rbx)
                copy_boost_exception(this,&x);
  415569:	48 01 e8             	add    %rbp,%rax
  41556c:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  41556e:	48 8b 03             	mov    (%rbx),%rax
  415571:	48 03 58 e8          	add    -0x18(%rax),%rbx
  415575:	48 89 d8             	mov    %rbx,%rax
                }
  415578:	5b                   	pop    %rbx
  415579:	5d                   	pop    %rbp
  41557a:	41 5c                	pop    %r12
  41557c:	41 5d                	pop    %r13
  41557e:	41 5f                	pop    %r15
  415580:	c3                   	retq   
  415581:	49 89 c4             	mov    %rax,%r12
        {}
  415584:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  415589:	48 89 df             	mov    %rbx,%rdi
  41558c:	49 89 ef             	mov    %rbp,%r15
  41558f:	48 89 03             	mov    %rax,(%rbx)
  415592:	48 b8 d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rax
  415599:	ff ff ff 
  41559c:	48 01 e8             	add    %rbp,%rax
  41559f:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  4155a1:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  4155a8:	ff ff ff 
  4155ab:	48 89 df             	mov    %rbx,%rdi
  4155ae:	be 48 00 00 00       	mov    $0x48,%esi
  4155b3:	48 01 e8             	add    %rbp,%rax
  4155b6:	49 89 ef             	mov    %rbp,%r15
  4155b9:	ff d0                	callq  *%rax
  4155bb:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  4155c2:	ff ff ff 
  4155c5:	4c 89 e7             	mov    %r12,%rdi
  4155c8:	48 01 e8             	add    %rbp,%rax
  4155cb:	ff d0                	callq  *%rax
  4155cd:	49 89 c4             	mov    %rax,%r12
                T(x)
  4155d0:	48 b8 60 8a de ff ff 	movabs $0xffffffffffde8a60,%rax
  4155d7:	ff ff ff 
  4155da:	48 89 df             	mov    %rbx,%rdi
  4155dd:	48 01 e8             	add    %rbp,%rax
  4155e0:	ff d0                	callq  *%rax
  4155e2:	eb bd                	jmp    4155a1 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv+0x111>
  4155e4:	66 90                	xchg   %ax,%ax
  4155e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4155ed:	00 00 00 

00000000004155f0 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv>:
            clone() const
  4155f0:	4c 8b 17             	mov    (%rdi),%r10
  4155f3:	49 03 7a e8          	add    -0x18(%r10),%rdi
  4155f7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4155f7 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv+0x7>
  4155fe:	49 ba 09 5a 21 00 00 	movabs $0x215a09,%r10
  415605:	00 00 00 
  415608:	4d 01 d3             	add    %r10,%r11
  41560b:	49 ba 90 a4 de ff ff 	movabs $0xffffffffffdea490,%r10
  415612:	ff ff ff 
  415615:	4d 01 da             	add    %r11,%r10
  415618:	41 ff e2             	jmpq   *%r10
  41561b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415620 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv>:
  415620:	41 57                	push   %r15
  415622:	41 55                	push   %r13
  415624:	49 bb e0 59 21 00 00 	movabs $0x2159e0,%r11
  41562b:	00 00 00 
  41562e:	41 54                	push   %r12
  415630:	55                   	push   %rbp
  415631:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 415620 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv>
                return new clone_impl(*this,clone_tag());
  415638:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41563f:	ff ff ff 
            clone() const
  415642:	53                   	push   %rbx
  415643:	49 89 fc             	mov    %rdi,%r12
  415646:	4c 01 dd             	add    %r11,%rbp
                return new clone_impl(*this,clone_tag());
  415649:	bf 40 00 00 00       	mov    $0x40,%edi
  41564e:	49 bd 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%r13
  415655:	ff ff ff 
  415658:	49 89 ef             	mov    %rbp,%r15
  41565b:	48 01 e8             	add    %rbp,%rax
  41565e:	ff d0                	callq  *%rax
  415660:	48 89 c3             	mov    %rax,%rbx
        clone_base
  415663:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  41566a:	ff ff ff 
  41566d:	4c 89 e6             	mov    %r12,%rsi
  415670:	48 01 e8             	add    %rbp,%rax
  415673:	48 89 df             	mov    %rbx,%rdi
  415676:	48 89 43 38          	mov    %rax,0x38(%rbx)
  41567a:	48 b8 f0 e8 dd ff ff 	movabs $0xffffffffffdde8f0,%rax
  415681:	ff ff ff 
  415684:	48 01 e8             	add    %rbp,%rax
  415687:	ff d0                	callq  *%rax
  415689:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
                px_(x.px_)
  41568e:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
  415693:	48 89 03             	mov    %rax,(%rbx)
    exception
  415696:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  41569d:	ff ff ff 
  4156a0:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  4156a3:	48 85 ff             	test   %rdi,%rdi
                px_(x.px_)
  4156a6:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
    exception
  4156aa:	48 89 43 10          	mov    %rax,0x10(%rbx)
                if( px_ )
  4156ae:	74 06                	je     4156b6 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv+0x96>
                    px_->add_ref();
  4156b0:	48 8b 07             	mov    (%rdi),%rax
  4156b3:	ff 50 18             	callq  *0x18(%rax)
    exception
  4156b6:	41 8b 44 24 30       	mov    0x30(%r12),%eax
                copy_boost_exception(this,&x);
  4156bb:	49 8d 74 24 10       	lea    0x10(%r12),%rsi
  4156c0:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    exception
  4156c4:	f3 41 0f 6f 44 24 20 	movdqu 0x20(%r12),%xmm0
  4156cb:	89 43 30             	mov    %eax,0x30(%rbx)
                T(x)
  4156ce:	48 b8 20 f3 ff ff ff 	movabs $0xfffffffffffff320,%rax
  4156d5:	ff ff ff 
  4156d8:	48 01 e8             	add    %rbp,%rax
  4156db:	48 8d 50 38          	lea    0x38(%rax),%rdx
  4156df:	48 89 03             	mov    %rax,(%rbx)
  4156e2:	48 83 c0 70          	add    $0x70,%rax
  4156e6:	48 89 43 38          	mov    %rax,0x38(%rbx)
                copy_boost_exception(this,&x);
  4156ea:	48 b8 70 a3 de ff ff 	movabs $0xffffffffffdea370,%rax
  4156f1:	ff ff ff 
    exception
  4156f4:	0f 11 43 20          	movups %xmm0,0x20(%rbx)
                T(x)
  4156f8:	48 89 53 10          	mov    %rdx,0x10(%rbx)
                copy_boost_exception(this,&x);
  4156fc:	48 01 e8             	add    %rbp,%rax
  4156ff:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  415701:	48 8b 03             	mov    (%rbx),%rax
  415704:	48 03 58 e8          	add    -0x18(%rax),%rbx
  415708:	48 89 d8             	mov    %rbx,%rax
                }
  41570b:	5b                   	pop    %rbx
  41570c:	5d                   	pop    %rbp
  41570d:	41 5c                	pop    %r12
  41570f:	41 5d                	pop    %r13
  415711:	41 5f                	pop    %r15
  415713:	c3                   	retq   
  415714:	49 89 c4             	mov    %rax,%r12
  415717:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  41571c:	48 89 df             	mov    %rbx,%rdi
  41571f:	49 89 ef             	mov    %rbp,%r15
  415722:	48 89 03             	mov    %rax,(%rbx)
  415725:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  41572c:	ff ff ff 
  41572f:	48 01 e8             	add    %rbp,%rax
  415732:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  415734:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  41573b:	ff ff ff 
  41573e:	48 89 df             	mov    %rbx,%rdi
  415741:	be 40 00 00 00       	mov    $0x40,%esi
  415746:	48 01 e8             	add    %rbp,%rax
  415749:	49 89 ef             	mov    %rbp,%r15
  41574c:	ff d0                	callq  *%rax
  41574e:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  415755:	ff ff ff 
  415758:	4c 89 e7             	mov    %r12,%rdi
  41575b:	48 01 e8             	add    %rbp,%rax
  41575e:	ff d0                	callq  *%rax
  415760:	49 89 c4             	mov    %rax,%r12
                T(x)
  415763:	48 b8 20 8d de ff ff 	movabs $0xffffffffffde8d20,%rax
  41576a:	ff ff ff 
  41576d:	48 89 df             	mov    %rbx,%rdi
  415770:	48 01 e8             	add    %rbp,%rax
  415773:	ff d0                	callq  *%rax
  415775:	eb bd                	jmp    415734 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv+0x114>
  415777:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41577e:	00 00 

0000000000415780 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv>:
            clone() const
  415780:	4c 8b 17             	mov    (%rdi),%r10
  415783:	49 03 7a e8          	add    -0x18(%r10),%rdi
  415787:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 415787 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv+0x7>
  41578e:	49 ba 79 58 21 00 00 	movabs $0x215879,%r10
  415795:	00 00 00 
  415798:	4d 01 d3             	add    %r10,%r11
  41579b:	49 ba 20 a6 de ff ff 	movabs $0xffffffffffdea620,%r10
  4157a2:	ff ff ff 
  4157a5:	4d 01 da             	add    %r11,%r10
  4157a8:	41 ff e2             	jmpq   *%r10
  4157ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004157b0 <_ZN5boost3anyaSERKS0_>:
        any & operator=(const any& rhs)
  4157b0:	41 57                	push   %r15
  4157b2:	55                   	push   %rbp
  4157b3:	4c 8d 3d f6 ff ff ff 	lea    -0xa(%rip),%r15        # 4157b0 <_ZN5boost3anyaSERKS0_>
  4157ba:	53                   	push   %rbx
          : content(other.content ? other.content->clone() : 0)
  4157bb:	48 8b 1e             	mov    (%rsi),%rbx
  4157be:	49 bb 50 58 21 00 00 	movabs $0x215850,%r11
  4157c5:	00 00 00 
  4157c8:	4d 01 df             	add    %r11,%r15
        any & operator=(const any& rhs)
  4157cb:	48 89 fd             	mov    %rdi,%rbp
          : content(other.content ? other.content->clone() : 0)
  4157ce:	48 85 db             	test   %rbx,%rbx
  4157d1:	74 4a                	je     41581d <_ZN5boost3anyaSERKS0_+0x6d>
  4157d3:	48 8b 03             	mov    (%rbx),%rax
  4157d6:	48 ba d0 83 de ff ff 	movabs $0xffffffffffde83d0,%rdx
  4157dd:	ff ff ff 
  4157e0:	4c 01 fa             	add    %r15,%rdx
  4157e3:	48 8b 40 18          	mov    0x18(%rax),%rax
  4157e7:	48 39 d0             	cmp    %rdx,%rax
  4157ea:	75 54                	jne    415840 <_ZN5boost3anyaSERKS0_+0x90>
                return new holder(held);
  4157ec:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  4157f3:	ff ff ff 
  4157f6:	bf 10 00 00 00       	mov    $0x10,%edi
  4157fb:	4c 01 f8             	add    %r15,%rax
  4157fe:	ff d0                	callq  *%rax
              : held(value)
  415800:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
  415805:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  41580c:	ff ff ff 
  41580f:	4c 01 fa             	add    %r15,%rdx
  415812:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  415817:	48 89 c3             	mov    %rax,%rbx
  41581a:	48 89 10             	mov    %rdx,(%rax)
      __a = _GLIBCXX_MOVE(__b);
  41581d:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
      __b = _GLIBCXX_MOVE(__tmp);
  415821:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
            delete content;
  415825:	48 85 ff             	test   %rdi,%rdi
  415828:	74 06                	je     415830 <_ZN5boost3anyaSERKS0_+0x80>
  41582a:	48 8b 07             	mov    (%rdi),%rax
  41582d:	ff 50 08             	callq  *0x8(%rax)
        }
  415830:	48 89 e8             	mov    %rbp,%rax
  415833:	5b                   	pop    %rbx
  415834:	5d                   	pop    %rbp
  415835:	41 5f                	pop    %r15
  415837:	c3                   	retq   
  415838:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41583f:	00 
          : content(other.content ? other.content->clone() : 0)
  415840:	48 89 df             	mov    %rbx,%rdi
  415843:	ff d0                	callq  *%rax
  415845:	48 89 c3             	mov    %rax,%rbx
  415848:	eb d3                	jmp    41581d <_ZN5boost3anyaSERKS0_+0x6d>
  41584a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000415850 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE>:
    typed_value<T, charT>::
  415850:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 415850 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE>
  415857:	49 bb b0 57 21 00 00 	movabs $0x2157b0,%r11
  41585e:	00 00 00 
  415861:	48 89 f9             	mov    %rdi,%rcx
  415864:	48 89 f7             	mov    %rsi,%rdi
  415867:	48 89 d6             	mov    %rdx,%rsi
        if (new_tokens.empty() && !m_implicit_value.empty())
  41586a:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  41586e:	4c 01 d8             	add    %r11,%rax
  415871:	48 39 16             	cmp    %rdx,(%rsi)
  415874:	74 1a                	je     415890 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE+0x40>
    typed_value<T, charT>::
  415876:	41 57                	push   %r15
            validate(value_store, new_tokens, (T*)0, 0);
  415878:	49 b8 10 e9 dd ff ff 	movabs $0xffffffffffdde910,%r8
  41587f:	ff ff ff 
  415882:	31 c9                	xor    %ecx,%ecx
    }
  415884:	41 5f                	pop    %r15
            validate(value_store, new_tokens, (T*)0, 0);
  415886:	31 d2                	xor    %edx,%edx
  415888:	49 01 c0             	add    %rax,%r8
  41588b:	41 ff e0             	jmpq   *%r8
  41588e:	66 90                	xchg   %ax,%ax
        if (new_tokens.empty() && !m_implicit_value.empty())
  415890:	48 83 79 60 00       	cmpq   $0x0,0x60(%rcx)
  415895:	74 df                	je     415876 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE+0x26>
            value_store = m_implicit_value;
  415897:	48 ba b0 a7 de ff ff 	movabs $0xffffffffffdea7b0,%rdx
  41589e:	ff ff ff 
  4158a1:	48 8d 71 60          	lea    0x60(%rcx),%rsi
  4158a5:	48 01 d0             	add    %rdx,%rax
  4158a8:	ff e0                	jmpq   *%rax
  4158aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004158b0 <_ZN5boost6detail15sp_counted_base7releaseEv>:
    bool add_ref_lock() // true on success
    {
        return atomic_conditional_increment( &use_count_ ) != 0;
    }

    void release() // nothrow
  4158b0:	55                   	push   %rbp
  4158b1:	48 8d 2d f8 ff ff ff 	lea    -0x8(%rip),%rbp        # 4158b0 <_ZN5boost6detail15sp_counted_base7releaseEv>
  4158b8:	53                   	push   %rbx
  4158b9:	49 bb 50 57 21 00 00 	movabs $0x215750,%r11
  4158c0:	00 00 00 
  4158c3:	48 83 ec 08          	sub    $0x8,%rsp
  4158c7:	4c 01 dd             	add    %r11,%rbp
    {
        if( atomic_decrement( &use_count_ ) == 1 )
  4158ca:	f0 83 6f 08 01       	lock subl $0x1,0x8(%rdi)
  4158cf:	74 0f                	je     4158e0 <_ZN5boost6detail15sp_counted_base7releaseEv+0x30>
        {
            dispose();
            weak_release();
        }
    }
  4158d1:	48 83 c4 08          	add    $0x8,%rsp
  4158d5:	5b                   	pop    %rbx
  4158d6:	5d                   	pop    %rbp
  4158d7:	c3                   	retq   
  4158d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4158df:	00 
            dispose();
  4158e0:	48 8b 07             	mov    (%rdi),%rax
  4158e3:	48 89 fb             	mov    %rdi,%rbx
  4158e6:	ff 50 10             	callq  *0x10(%rax)
        atomic_increment( &weak_count_ );
    }

    void weak_release() // nothrow
    {
        if( atomic_decrement( &weak_count_ ) == 1 )
  4158e9:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  4158ee:	75 e1                	jne    4158d1 <_ZN5boost6detail15sp_counted_base7releaseEv+0x21>
        {
            destroy();
  4158f0:	48 8b 03             	mov    (%rbx),%rax
  4158f3:	48 b9 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rcx
  4158fa:	ff ff ff 
  4158fd:	48 01 e9             	add    %rbp,%rcx
  415900:	48 8b 50 18          	mov    0x18(%rax),%rdx
  415904:	48 39 ca             	cmp    %rcx,%rdx
  415907:	75 0f                	jne    415918 <_ZN5boost6detail15sp_counted_base7releaseEv+0x68>
        delete this;
  415909:	48 8b 40 08          	mov    0x8(%rax),%rax
    }
  41590d:	48 83 c4 08          	add    $0x8,%rsp
        delete this;
  415911:	48 89 df             	mov    %rbx,%rdi
    }
  415914:	5b                   	pop    %rbx
  415915:	5d                   	pop    %rbp
        delete this;
  415916:	ff e0                	jmpq   *%rax
    }
  415918:	48 83 c4 08          	add    $0x8,%rsp
            destroy();
  41591c:	48 89 df             	mov    %rbx,%rdi
    }
  41591f:	5b                   	pop    %rbx
  415920:	5d                   	pop    %rbp
            destroy();
  415921:	ff e2                	jmpq   *%rdx
  415923:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41592a:	00 00 00 
  41592d:	0f 1f 00             	nopl   (%rax)

0000000000415930 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv>:
    virtual void dispose() // nothrow
  415930:	41 57                	push   %r15
  415932:	55                   	push   %rbp
  415933:	49 bb d0 56 21 00 00 	movabs $0x2156d0,%r11
  41593a:	00 00 00 
  41593d:	53                   	push   %rbx
        boost::checked_delete( px_ );
  41593e:	48 8b 6f 10          	mov    0x10(%rdi),%rbp
  415942:	48 8d 1d e7 ff ff ff 	lea    -0x19(%rip),%rbx        # 415930 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv>
  415949:	4c 01 db             	add    %r11,%rbx
template<class T> inline void checked_delete(T * x)
{
    // intentionally complex - simplification causes regressions
    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete x;
  41594c:	48 85 ed             	test   %rbp,%rbp
  41594f:	74 37                	je     415988 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv+0x58>
  415951:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  415955:	48 85 ff             	test   %rdi,%rdi
  415958:	74 0f                	je     415969 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv+0x39>
  41595a:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  415961:	ff ff ff 
  415964:	48 01 d8             	add    %rbx,%rax
  415967:	ff d0                	callq  *%rax
  415969:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  415970:	ff ff ff 
  415973:	48 89 ef             	mov    %rbp,%rdi
  415976:	be 10 00 00 00       	mov    $0x10,%esi
  41597b:	48 01 d8             	add    %rbx,%rax
    }
  41597e:	5b                   	pop    %rbx
  41597f:	5d                   	pop    %rbp
  415980:	41 5f                	pop    %r15
  415982:	ff e0                	jmpq   *%rax
  415984:	0f 1f 40 00          	nopl   0x0(%rax)
  415988:	5b                   	pop    %rbx
  415989:	5d                   	pop    %rbp
  41598a:	41 5f                	pop    %r15
  41598c:	c3                   	retq   
  41598d:	0f 1f 00             	nopl   (%rax)

0000000000415990 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  static const std::string build_what(const Mark& mark,
  415990:	41 57                	push   %r15
  415992:	41 56                	push   %r14
  415994:	49 bb 70 56 21 00 00 	movabs $0x215670,%r11
  41599b:	00 00 00 
  41599e:	41 55                	push   %r13
  4159a0:	41 54                	push   %r12
    std::stringstream output;
  4159a2:	48 b8 10 e7 dd ff ff 	movabs $0xffffffffffdde710,%rax
  4159a9:	ff ff ff 
  static const std::string build_what(const Mark& mark,
  4159ac:	55                   	push   %rbp
  4159ad:	53                   	push   %rbx
  4159ae:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 415990 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  4159b5:	49 89 f4             	mov    %rsi,%r12
  4159b8:	49 89 d6             	mov    %rdx,%r14
    std::stringstream output;
  4159bb:	be 18 00 00 00       	mov    $0x18,%esi
  static const std::string build_what(const Mark& mark,
  4159c0:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  4159c7:	4c 01 db             	add    %r11,%rbx
  4159ca:	48 89 fd             	mov    %rdi,%rbp
    std::stringstream output;
  4159cd:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
  4159d2:	48 01 d8             	add    %rbx,%rax
  4159d5:	49 89 df             	mov    %rbx,%r15
  4159d8:	4c 89 ef             	mov    %r13,%rdi
  4159db:	ff d0                	callq  *%rax
           << mark.column + 1 << ": " << msg;
  4159dd:	41 8b 44 24 08       	mov    0x8(%r12),%eax
	__ostream_insert(__out, __s,
  4159e2:	49 8d 7d 10          	lea    0x10(%r13),%rdi
  4159e6:	ba 18 00 00 00       	mov    $0x18,%edx
  4159eb:	83 c0 01             	add    $0x1,%eax
  4159ee:	89 44 24 08          	mov    %eax,0x8(%rsp)
    output << "yaml-cpp: error at line " << mark.line + 1 << ", column "
  4159f2:	41 8b 44 24 04       	mov    0x4(%r12),%eax
  4159f7:	49 bc 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%r12
  4159fe:	ff ff ff 
  415a01:	8d 48 01             	lea    0x1(%rax),%ecx
  415a04:	48 b8 70 80 df ff ff 	movabs $0xffffffffffdf8070,%rax
  415a0b:	ff ff ff 
  415a0e:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415a12:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  415a16:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
  415a1a:	ff d0                	callq  *%rax
  415a1c:	48 b8 90 ea dd ff ff 	movabs $0xffffffffffddea90,%rax
  415a23:	ff ff ff 
  415a26:	49 8d 7d 10          	lea    0x10(%r13),%rdi
  415a2a:	8b 74 24 10          	mov    0x10(%rsp),%esi
  415a2e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  415a33:	48 01 d8             	add    %rbx,%rax
  415a36:	ff d0                	callq  *%rax
  415a38:	48 89 c1             	mov    %rax,%rcx
  415a3b:	48 b8 89 80 df ff ff 	movabs $0xffffffffffdf8089,%rax
  415a42:	ff ff ff 
  415a45:	ba 09 00 00 00       	mov    $0x9,%edx
  415a4a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415a4e:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  415a53:	48 89 cf             	mov    %rcx,%rdi
  415a56:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  415a5a:	ff d0                	callq  *%rax
           << mark.column + 1 << ": " << msg;
  415a5c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  415a61:	8b 74 24 08          	mov    0x8(%rsp),%esi
  415a65:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415a6a:	48 01 d8             	add    %rbx,%rax
  415a6d:	ff d0                	callq  *%rax
  415a6f:	48 89 c1             	mov    %rax,%rcx
  415a72:	48 b8 8a 7e df ff ff 	movabs $0xffffffffffdf7e8a,%rax
  415a79:	ff ff ff 
  415a7c:	ba 02 00 00 00       	mov    $0x2,%edx
  415a81:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415a85:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  415a8a:	48 89 cf             	mov    %rcx,%rdi
  415a8d:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  415a91:	ff d0                	callq  *%rax
    operator<<(basic_ostream<_CharT, _Traits>& __os,
	       const basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 586. string inserter not a formatted function
      return __ostream_insert(__os, __str.data(), __str.size());
  415a93:	49 8b 56 08          	mov    0x8(%r14),%rdx
  415a97:	49 8b 36             	mov    (%r14),%rsi
  415a9a:	49 01 dc             	add    %rbx,%r12
  415a9d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  415aa2:	41 ff d4             	callq  *%r12
  415aa5:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  415aac:	00 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  415aad:	4c 8d 75 10          	lea    0x10(%rbp),%r14
      { _M_string_length = __length; }
  415ab1:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
  415ab8:	00 
      { __c1 = __c2; }
  415ab9:	c6 45 10 00          	movb   $0x0,0x10(%rbp)
	: allocator_type(__a), _M_p(__dat) { }
  415abd:	4c 89 75 00          	mov    %r14,0x0(%rbp)
      */
      __string_type
      str() const
      {
	__string_type __ret;
	if (this->pptr())
  415ac1:	48 85 c0             	test   %rax,%rax
  415ac4:	0f 84 f6 00 00 00    	je     415bc0 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>
  415aca:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
  415ad1:	00 
	  {
	    // The current egptr() may not be the actual string end.
	    if (this->pptr() > this->egptr())
  415ad2:	48 39 d0             	cmp    %rdx,%rax
  415ad5:	0f 87 8d 00 00 00    	ja     415b68 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d8>
  415adb:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
          _M_construct(__beg, __end, _Tag());
  415ae0:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  415ae7:	00 
	: allocator_type(__a), _M_p(__dat) { }
  415ae8:	49 8d 44 24 10       	lea    0x10(%r12),%rax
          _M_construct(__beg, __end, _Tag());
  415aed:	4c 89 e7             	mov    %r12,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  415af0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
          _M_construct(__beg, __end, _Tag());
  415af5:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  415afc:	ff ff ff 
  415aff:	48 01 d8             	add    %rbx,%rax
  415b02:	ff d0                	callq  *%rax
	      __ret = __string_type(this->pbase(), this->pptr());
	    else
 	      __ret = __string_type(this->pbase(), this->egptr());
  415b04:	48 b8 a0 e8 dd ff ff 	movabs $0xffffffffffdde8a0,%rax
  415b0b:	ff ff ff 
  415b0e:	4c 89 e6             	mov    %r12,%rsi
  415b11:	48 89 ef             	mov    %rbp,%rdi
  415b14:	48 01 d8             	add    %rbx,%rax
  415b17:	49 89 df             	mov    %rbx,%r15
	if (!_M_is_local())
  415b1a:	49 83 c4 10          	add    $0x10,%r12
  415b1e:	ff d0                	callq  *%rax
  415b20:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  415b25:	4c 39 e7             	cmp    %r12,%rdi
  415b28:	74 0f                	je     415b39 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a9>
  415b2a:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  415b31:	ff ff ff 
  415b34:	48 01 d8             	add    %rbx,%rax
  415b37:	ff d0                	callq  *%rax
    std::stringstream output;
  415b39:	48 b8 00 e7 dd ff ff 	movabs $0xffffffffffdde700,%rax
  415b40:	ff ff ff 
  415b43:	49 89 df             	mov    %rbx,%r15
  415b46:	4c 89 ef             	mov    %r13,%rdi
  415b49:	48 01 d8             	add    %rbx,%rax
  415b4c:	ff d0                	callq  *%rax
  }
  415b4e:	48 81 c4 f8 01 00 00 	add    $0x1f8,%rsp
  415b55:	48 89 e8             	mov    %rbp,%rax
  415b58:	5b                   	pop    %rbx
  415b59:	5d                   	pop    %rbp
  415b5a:	41 5c                	pop    %r12
  415b5c:	41 5d                	pop    %r13
  415b5e:	41 5e                	pop    %r14
  415b60:	41 5f                	pop    %r15
  415b62:	c3                   	retq   
  415b63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	: allocator_type(__a), _M_p(__dat) { }
  415b68:	4c 8d 64 24 40       	lea    0x40(%rsp),%r12
          _M_construct(__beg, __end, _Tag());
  415b6d:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  415b74:	00 
	: allocator_type(__a), _M_p(__dat) { }
  415b75:	49 8d 54 24 10       	lea    0x10(%r12),%rdx
          _M_construct(__beg, __end, _Tag());
  415b7a:	4c 89 e7             	mov    %r12,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  415b7d:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
          _M_construct(__beg, __end, _Tag());
  415b82:	48 89 c2             	mov    %rax,%rdx
  415b85:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  415b8c:	ff ff ff 
  415b8f:	48 01 d8             	add    %rbx,%rax
  415b92:	ff d0                	callq  *%rax
	      __ret = __string_type(this->pbase(), this->pptr());
  415b94:	48 b8 a0 e8 dd ff ff 	movabs $0xffffffffffdde8a0,%rax
  415b9b:	ff ff ff 
  415b9e:	4c 89 e6             	mov    %r12,%rsi
  415ba1:	48 89 ef             	mov    %rbp,%rdi
  415ba4:	48 01 d8             	add    %rbx,%rax
	if (!_M_is_local())
  415ba7:	49 83 c4 10          	add    $0x10,%r12
  415bab:	ff d0                	callq  *%rax
  415bad:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  415bb2:	4c 39 e7             	cmp    %r12,%rdi
  415bb5:	0f 85 6f ff ff ff    	jne    415b2a <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19a>
  415bbb:	e9 79 ff ff ff       	jmpq   415b39 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a9>
	this->_M_assign(__str);
  415bc0:	48 b8 b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%rax
  415bc7:	ff ff ff 
  415bca:	49 8d 75 60          	lea    0x60(%r13),%rsi
  415bce:	48 89 ef             	mov    %rbp,%rdi
  415bd1:	49 89 df             	mov    %rbx,%r15
  415bd4:	48 01 d8             	add    %rbx,%rax
  415bd7:	ff d0                	callq  *%rax
  415bd9:	e9 5b ff ff ff       	jmpq   415b39 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a9>
  415bde:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  415be2:	49 89 c4             	mov    %rax,%r12
	if (!_M_is_local())
  415be5:	49 39 fe             	cmp    %rdi,%r14
  415be8:	74 12                	je     415bfc <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26c>
  415bea:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  415bf1:	ff ff ff 
  415bf4:	49 89 df             	mov    %rbx,%r15
  415bf7:	48 01 d8             	add    %rbx,%rax
  415bfa:	ff d0                	callq  *%rax
    std::stringstream output;
  415bfc:	48 b8 00 e7 dd ff ff 	movabs $0xffffffffffdde700,%rax
  415c03:	ff ff ff 
  415c06:	4c 89 ef             	mov    %r13,%rdi
  415c09:	49 89 df             	mov    %rbx,%r15
  415c0c:	48 01 d8             	add    %rbx,%rax
  415c0f:	ff d0                	callq  *%rax
  415c11:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  415c18:	ff ff ff 
  415c1b:	4c 89 e7             	mov    %r12,%rdi
  415c1e:	48 01 d8             	add    %rbx,%rax
  415c21:	ff d0                	callq  *%rax
  415c23:	49 89 c4             	mov    %rax,%r12
  415c26:	eb d4                	jmp    415bfc <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26c>
  415c28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  415c2f:	00 

0000000000415c30 <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  Exception(const Mark& mark_, const std::string& msg_)
  415c30:	41 57                	push   %r15
  415c32:	41 56                	push   %r14
  415c34:	49 bb d0 53 21 00 00 	movabs $0x2153d0,%r11
  415c3b:	00 00 00 
  415c3e:	41 55                	push   %r13
  415c40:	41 54                	push   %r12
      : std::runtime_error(build_what(mark_, msg_)), mark(mark_), msg(msg_) {}
  415c42:	48 b8 90 a9 de ff ff 	movabs $0xffffffffffdea990,%rax
  415c49:	ff ff ff 
  Exception(const Mark& mark_, const std::string& msg_)
  415c4c:	55                   	push   %rbp
  415c4d:	53                   	push   %rbx
  415c4e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 415c30 <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  415c55:	48 89 fd             	mov    %rdi,%rbp
  415c58:	49 89 f6             	mov    %rsi,%r14
  415c5b:	49 89 d5             	mov    %rdx,%r13
  415c5e:	48 83 ec 28          	sub    $0x28,%rsp
  415c62:	4c 01 db             	add    %r11,%rbx
      : std::runtime_error(build_what(mark_, msg_)), mark(mark_), msg(msg_) {}
  415c65:	48 89 e7             	mov    %rsp,%rdi
  415c68:	48 01 d8             	add    %rbx,%rax
  415c6b:	49 89 e4             	mov    %rsp,%r12
  415c6e:	ff d0                	callq  *%rax
  415c70:	48 b8 c0 e8 dd ff ff 	movabs $0xffffffffffdde8c0,%rax
  415c77:	ff ff ff 
  415c7a:	48 89 e6             	mov    %rsp,%rsi
  415c7d:	48 89 ef             	mov    %rbp,%rdi
  415c80:	49 89 df             	mov    %rbx,%r15
  415c83:	48 01 d8             	add    %rbx,%rax
  415c86:	ff d0                	callq  *%rax
  415c88:	48 8b 3c 24          	mov    (%rsp),%rdi
  415c8c:	49 83 c4 10          	add    $0x10,%r12
  415c90:	4c 39 e7             	cmp    %r12,%rdi
  415c93:	74 0f                	je     415ca4 <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x74>
  415c95:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  415c9c:	ff ff ff 
  415c9f:	48 01 d8             	add    %rbx,%rax
  415ca2:	ff d0                	callq  *%rax
  415ca4:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  415cab:	ff ff ff 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  415cae:	48 8d 7d 20          	lea    0x20(%rbp),%rdi
  415cb2:	48 01 d8             	add    %rbx,%rax
  415cb5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  415cb9:	49 8b 06             	mov    (%r14),%rax
  415cbc:	48 89 45 10          	mov    %rax,0x10(%rbp)
  415cc0:	41 8b 46 08          	mov    0x8(%r14),%eax
  415cc4:	89 45 18             	mov    %eax,0x18(%rbp)
  415cc7:	48 8d 45 30          	lea    0x30(%rbp),%rax
  415ccb:	48 89 45 20          	mov    %rax,0x20(%rbp)
  415ccf:	49 8b 75 00          	mov    0x0(%r13),%rsi
          _M_construct(__beg, __end, _Tag());
  415cd3:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  415cda:	ff ff ff 
  415cdd:	48 01 d8             	add    %rbx,%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  415ce0:	48 89 f2             	mov    %rsi,%rdx
  415ce3:	49 03 55 08          	add    0x8(%r13),%rdx
          _M_construct(__beg, __end, _Tag());
  415ce7:	ff d0                	callq  *%rax
  415ce9:	48 83 c4 28          	add    $0x28,%rsp
  415ced:	5b                   	pop    %rbx
  415cee:	5d                   	pop    %rbp
  415cef:	41 5c                	pop    %r12
  415cf1:	41 5d                	pop    %r13
  415cf3:	41 5e                	pop    %r14
  415cf5:	41 5f                	pop    %r15
  415cf7:	c3                   	retq   
  415cf8:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  415cfc:	49 83 c4 10          	add    $0x10,%r12
  415d00:	48 89 c5             	mov    %rax,%rbp
  415d03:	4c 39 e7             	cmp    %r12,%rdi
  415d06:	74 12                	je     415d1a <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea>
  415d08:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  415d0f:	ff ff ff 
  415d12:	49 89 df             	mov    %rbx,%r15
  415d15:	48 01 da             	add    %rbx,%rdx
  415d18:	ff d2                	callq  *%rdx
  415d1a:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  415d21:	ff ff ff 
  415d24:	48 89 ef             	mov    %rbp,%rdi
  415d27:	49 89 df             	mov    %rbx,%r15
  415d2a:	48 01 d8             	add    %rbx,%rax
  415d2d:	ff d0                	callq  *%rax
  415d2f:	48 ba 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rdx
  415d36:	ff ff ff 
  415d39:	49 89 c4             	mov    %rax,%r12
  415d3c:	48 89 ef             	mov    %rbp,%rdi
  415d3f:	49 89 df             	mov    %rbx,%r15
  415d42:	48 01 da             	add    %rbx,%rdx
  415d45:	ff d2                	callq  *%rdx
  415d47:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  415d4e:	ff ff ff 
  415d51:	4c 89 e7             	mov    %r12,%rdi
  415d54:	48 01 d8             	add    %rbx,%rax
  415d57:	ff d0                	callq  *%rax
  415d59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000415d60 <_ZN4YAML11InvalidNodeC1Ev>:
  InvalidNode()
  415d60:	41 57                	push   %r15
  415d62:	41 54                	push   %r12
  415d64:	49 bb a0 52 21 00 00 	movabs $0x2152a0,%r11
  415d6b:	00 00 00 
  415d6e:	55                   	push   %rbp
  415d6f:	53                   	push   %rbx
  415d70:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 415d60 <_ZN4YAML11InvalidNodeC1Ev>
  415d77:	49 89 fc             	mov    %rdi,%r12
  415d7a:	48 83 ec 38          	sub    $0x38,%rsp
  415d7e:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  415d81:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  415d86:	48 8d 45 10          	lea    0x10(%rbp),%rax
          _M_construct(__beg, __end, _Tag());
  415d8a:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  415d8d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  415d92:	48 b8 f5 80 df ff ff 	movabs $0xffffffffffdf80f5,%rax
  415d99:	ff ff ff 
  415d9c:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  415da0:	48 b8 98 80 df ff ff 	movabs $0xffffffffffdf8098,%rax
  415da7:	ff ff ff 
  415daa:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415dae:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  415db5:	ff ff ff 
  415db8:	48 01 d8             	add    %rbx,%rax
  415dbb:	ff d0                	callq  *%rax
      : Exception(mark_, msg_) {}
  415dbd:	48 b8 30 ac de ff ff 	movabs $0xffffffffffdeac30,%rax
  415dc4:	ff ff ff 
      : RepresentationException(Mark::null_mark(), ErrorMsg::INVALID_NODE) {}
  415dc7:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
  415dce:	ff 
  415dcf:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
  415dd6:	ff 
  415dd7:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  415dde:	ff 
      : Exception(mark_, msg_) {}
  415ddf:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  415de4:	48 89 ea             	mov    %rbp,%rdx
  415de7:	4c 89 e7             	mov    %r12,%rdi
  415dea:	48 01 d8             	add    %rbx,%rax
  415ded:	ff d0                	callq  *%rax
  415def:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415df4:	48 b8 58 fa ff ff ff 	movabs $0xfffffffffffffa58,%rax
  415dfb:	ff ff ff 
	if (!_M_is_local())
  415dfe:	48 83 c5 10          	add    $0x10,%rbp
  415e02:	48 01 d8             	add    %rbx,%rax
  415e05:	49 89 04 24          	mov    %rax,(%r12)
  415e09:	48 39 ef             	cmp    %rbp,%rdi
  415e0c:	74 12                	je     415e20 <_ZN4YAML11InvalidNodeC1Ev+0xc0>
  415e0e:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  415e15:	ff ff ff 
  415e18:	49 89 df             	mov    %rbx,%r15
  415e1b:	48 01 d8             	add    %rbx,%rax
  415e1e:	ff d0                	callq  *%rax
      : RepresentationException(Mark::null_mark(), ErrorMsg::INVALID_NODE) {}
  415e20:	48 b8 80 fa ff ff ff 	movabs $0xfffffffffffffa80,%rax
  415e27:	ff ff ff 
  415e2a:	48 01 d8             	add    %rbx,%rax
  415e2d:	49 89 04 24          	mov    %rax,(%r12)
  415e31:	48 83 c4 38          	add    $0x38,%rsp
  415e35:	5b                   	pop    %rbx
  415e36:	5d                   	pop    %rbp
  415e37:	41 5c                	pop    %r12
  415e39:	41 5f                	pop    %r15
  415e3b:	c3                   	retq   
  415e3c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415e41:	48 83 c5 10          	add    $0x10,%rbp
  415e45:	49 89 c4             	mov    %rax,%r12
  415e48:	48 39 ef             	cmp    %rbp,%rdi
  415e4b:	74 12                	je     415e5f <_ZN4YAML11InvalidNodeC1Ev+0xff>
  415e4d:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  415e54:	ff ff ff 
  415e57:	49 89 df             	mov    %rbx,%r15
  415e5a:	48 01 da             	add    %rbx,%rdx
  415e5d:	ff d2                	callq  *%rdx
  415e5f:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  415e66:	ff ff ff 
  415e69:	4c 89 e7             	mov    %r12,%rdi
  415e6c:	49 89 df             	mov    %rbx,%r15
  415e6f:	48 01 d8             	add    %rbx,%rax
  415e72:	ff d0                	callq  *%rax
  415e74:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  415e7b:	00 00 00 
  415e7e:	66 90                	xchg   %ax,%ax

0000000000415e80 <_ZN4YAML13BadConversionC1Ev>:
  BadConversion()
  415e80:	41 57                	push   %r15
  415e82:	41 54                	push   %r12
  415e84:	49 bb 80 51 21 00 00 	movabs $0x215180,%r11
  415e8b:	00 00 00 
  415e8e:	55                   	push   %rbp
  415e8f:	53                   	push   %rbx
  415e90:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 415e80 <_ZN4YAML13BadConversionC1Ev>
  415e97:	49 89 fc             	mov    %rdi,%r12
  415e9a:	48 83 ec 38          	sub    $0x38,%rsp
  415e9e:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  415ea1:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  415ea6:	48 8d 45 10          	lea    0x10(%rbp),%rax
          _M_construct(__beg, __end, _Tag());
  415eaa:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  415ead:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  415eb2:	48 b8 04 81 df ff ff 	movabs $0xffffffffffdf8104,%rax
  415eb9:	ff ff ff 
  415ebc:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  415ec0:	48 b8 f6 80 df ff ff 	movabs $0xffffffffffdf80f6,%rax
  415ec7:	ff ff ff 
  415eca:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415ece:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  415ed5:	ff ff ff 
  415ed8:	48 01 d8             	add    %rbx,%rax
  415edb:	ff d0                	callq  *%rax
      : Exception(mark_, msg_) {}
  415edd:	48 b8 30 ac de ff ff 	movabs $0xffffffffffdeac30,%rax
  415ee4:	ff ff ff 
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_CONVERSION) {}
  415ee7:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
  415eee:	ff 
  415eef:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
  415ef6:	ff 
  415ef7:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  415efe:	ff 
      : Exception(mark_, msg_) {}
  415eff:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  415f04:	48 89 ea             	mov    %rbp,%rdx
  415f07:	4c 89 e7             	mov    %r12,%rdi
  415f0a:	48 01 d8             	add    %rbx,%rax
  415f0d:	ff d0                	callq  *%rax
  415f0f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415f14:	48 b8 58 fa ff ff ff 	movabs $0xfffffffffffffa58,%rax
  415f1b:	ff ff ff 
	if (!_M_is_local())
  415f1e:	48 83 c5 10          	add    $0x10,%rbp
  415f22:	48 01 d8             	add    %rbx,%rax
  415f25:	49 89 04 24          	mov    %rax,(%r12)
  415f29:	48 39 ef             	cmp    %rbp,%rdi
  415f2c:	74 12                	je     415f40 <_ZN4YAML13BadConversionC1Ev+0xc0>
  415f2e:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  415f35:	ff ff ff 
  415f38:	49 89 df             	mov    %rbx,%r15
  415f3b:	48 01 d8             	add    %rbx,%rax
  415f3e:	ff d0                	callq  *%rax
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_CONVERSION) {}
  415f40:	48 b8 a8 fa ff ff ff 	movabs $0xfffffffffffffaa8,%rax
  415f47:	ff ff ff 
  415f4a:	48 01 d8             	add    %rbx,%rax
  415f4d:	49 89 04 24          	mov    %rax,(%r12)
  415f51:	48 83 c4 38          	add    $0x38,%rsp
  415f55:	5b                   	pop    %rbx
  415f56:	5d                   	pop    %rbp
  415f57:	41 5c                	pop    %r12
  415f59:	41 5f                	pop    %r15
  415f5b:	c3                   	retq   
  415f5c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415f61:	48 83 c5 10          	add    $0x10,%rbp
  415f65:	49 89 c4             	mov    %rax,%r12
  415f68:	48 39 ef             	cmp    %rbp,%rdi
  415f6b:	74 12                	je     415f7f <_ZN4YAML13BadConversionC1Ev+0xff>
  415f6d:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  415f74:	ff ff ff 
  415f77:	49 89 df             	mov    %rbx,%r15
  415f7a:	48 01 da             	add    %rbx,%rdx
  415f7d:	ff d2                	callq  *%rdx
  415f7f:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  415f86:	ff ff ff 
  415f89:	4c 89 e7             	mov    %r12,%rdi
  415f8c:	49 89 df             	mov    %rbx,%r15
  415f8f:	48 01 d8             	add    %rbx,%rax
  415f92:	ff d0                	callq  *%rax
  415f94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  415f9b:	00 00 00 
  415f9e:	66 90                	xchg   %ax,%ax

0000000000415fa0 <_ZN4YAML12BadSubscriptC1Ev>:
 public:
  BadSubscript()
  415fa0:	41 57                	push   %r15
  415fa2:	41 54                	push   %r12
  415fa4:	49 bb 60 50 21 00 00 	movabs $0x215060,%r11
  415fab:	00 00 00 
  415fae:	55                   	push   %rbp
  415faf:	53                   	push   %rbx
  415fb0:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 415fa0 <_ZN4YAML12BadSubscriptC1Ev>
  415fb7:	49 89 fc             	mov    %rdi,%r12
  415fba:	48 83 ec 38          	sub    $0x38,%rsp
  415fbe:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  415fc1:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  415fc6:	48 8d 45 10          	lea    0x10(%rbp),%rax
          _M_construct(__beg, __end, _Tag());
  415fca:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  415fcd:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  415fd2:	48 b8 20 81 df ff ff 	movabs $0xffffffffffdf8120,%rax
  415fd9:	ff ff ff 
  415fdc:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  415fe0:	48 b8 05 81 df ff ff 	movabs $0xffffffffffdf8105,%rax
  415fe7:	ff ff ff 
  415fea:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415fee:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  415ff5:	ff ff ff 
  415ff8:	48 01 d8             	add    %rbx,%rax
  415ffb:	ff d0                	callq  *%rax
      : Exception(mark_, msg_) {}
  415ffd:	48 b8 30 ac de ff ff 	movabs $0xffffffffffdeac30,%rax
  416004:	ff ff ff 
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_SUBSCRIPT) {}
  416007:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
  41600e:	ff 
  41600f:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
  416016:	ff 
  416017:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  41601e:	ff 
      : Exception(mark_, msg_) {}
  41601f:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  416024:	48 89 ea             	mov    %rbp,%rdx
  416027:	4c 89 e7             	mov    %r12,%rdi
  41602a:	48 01 d8             	add    %rbx,%rax
  41602d:	ff d0                	callq  *%rax
  41602f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  416034:	48 b8 58 fa ff ff ff 	movabs $0xfffffffffffffa58,%rax
  41603b:	ff ff ff 
	if (!_M_is_local())
  41603e:	48 83 c5 10          	add    $0x10,%rbp
  416042:	48 01 d8             	add    %rbx,%rax
  416045:	49 89 04 24          	mov    %rax,(%r12)
  416049:	48 39 ef             	cmp    %rbp,%rdi
  41604c:	74 12                	je     416060 <_ZN4YAML12BadSubscriptC1Ev+0xc0>
  41604e:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  416055:	ff ff ff 
  416058:	49 89 df             	mov    %rbx,%r15
  41605b:	48 01 d8             	add    %rbx,%rax
  41605e:	ff d0                	callq  *%rax
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_SUBSCRIPT) {}
  416060:	48 b8 d0 fa ff ff ff 	movabs $0xfffffffffffffad0,%rax
  416067:	ff ff ff 
  41606a:	48 01 d8             	add    %rbx,%rax
  41606d:	49 89 04 24          	mov    %rax,(%r12)
  416071:	48 83 c4 38          	add    $0x38,%rsp
  416075:	5b                   	pop    %rbx
  416076:	5d                   	pop    %rbp
  416077:	41 5c                	pop    %r12
  416079:	41 5f                	pop    %r15
  41607b:	c3                   	retq   
  41607c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  416081:	48 83 c5 10          	add    $0x10,%rbp
  416085:	49 89 c4             	mov    %rax,%r12
  416088:	48 39 ef             	cmp    %rbp,%rdi
  41608b:	74 12                	je     41609f <_ZN4YAML12BadSubscriptC1Ev+0xff>
  41608d:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  416094:	ff ff ff 
  416097:	49 89 df             	mov    %rbx,%r15
  41609a:	48 01 da             	add    %rbx,%rdx
  41609d:	ff d2                	callq  *%rdx
  41609f:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  4160a6:	ff ff ff 
  4160a9:	4c 89 e7             	mov    %r12,%rdi
  4160ac:	49 89 df             	mov    %rbx,%r15
  4160af:	48 01 d8             	add    %rbx,%rax
  4160b2:	ff d0                	callq  *%rax
  4160b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4160bb:	00 00 00 
  4160be:	66 90                	xchg   %ax,%ax

00000000004160c0 <_ZN4YAML4Node5beginEv>:
inline iterator Node::begin() {
  4160c0:	41 57                	push   %r15
  4160c2:	41 55                	push   %r13
  4160c4:	49 bb 40 4f 21 00 00 	movabs $0x214f40,%r11
  4160cb:	00 00 00 
  4160ce:	41 54                	push   %r12
  4160d0:	55                   	push   %rbp
  4160d1:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 4160c0 <_ZN4YAML4Node5beginEv>
  4160d8:	53                   	push   %rbx
  4160d9:	48 89 fb             	mov    %rdi,%rbx
  4160dc:	4c 01 dd             	add    %r11,%rbp
  4160df:	48 83 ec 20          	sub    $0x20,%rsp
  if (!m_isValid)
  4160e3:	80 3e 00             	cmpb   $0x0,(%rsi)
  4160e6:	0f 84 ac 00 00 00    	je     416198 <_ZN4YAML4Node5beginEv+0xd8>
  return m_pNode ? iterator(m_pNode->begin(), m_pMemory) : iterator();
  4160ec:	48 8b 46 18          	mov    0x18(%rsi),%rax
  4160f0:	48 85 c0             	test   %rax,%rax
  4160f3:	0f 84 9f 00 00 00    	je     416198 <_ZN4YAML4Node5beginEv+0xd8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  4160f9:	4c 8b 66 10          	mov    0x10(%rsi),%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  4160fd:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
        if( pi_ != 0 ) pi_->add_ref_copy();
  416101:	4d 85 e4             	test   %r12,%r12
  416104:	74 0b                	je     416111 <_ZN4YAML4Node5beginEv+0x51>
  416106:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
  41610d:	48 8b 46 18          	mov    0x18(%rsi),%rax
  416111:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  416114:	48 85 c0             	test   %rax,%rax
  416117:	0f 84 c8 00 00 00    	je     4161e5 <_ZN4YAML4Node5beginEv+0x125>
  41611d:	48 8b 30             	mov    (%rax),%rsi
  416120:	48 85 f6             	test   %rsi,%rsi
  416123:	0f 84 ad 00 00 00    	je     4161d6 <_ZN4YAML4Node5beginEv+0x116>
  std::size_t size() const { return m_pData->size(); }

  const_node_iterator begin() const {
    return static_cast<const node_data&>(*m_pData).begin();
  }
  node_iterator begin() { return m_pData->begin(); }
  416129:	48 b8 70 e8 dd ff ff 	movabs $0xffffffffffdde870,%rax
  416130:	ff ff ff 
  416133:	48 89 e7             	mov    %rsp,%rdi
  416136:	49 89 ef             	mov    %rbp,%r15
  416139:	48 01 e8             	add    %rbp,%rax
  41613c:	ff d0                	callq  *%rax
      >::type super_t;
   public:
      iterator_adaptor() {}

      explicit iterator_adaptor(Base const &iter)
          : m_iterator(iter)
  41613e:	8b 04 24             	mov    (%rsp),%eax
  416141:	4d 85 e4             	test   %r12,%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  416144:	4c 89 6b 20          	mov    %r13,0x20(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416148:	4c 89 63 28          	mov    %r12,0x28(%rbx)
  41614c:	89 03                	mov    %eax,(%rbx)
  41614e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  416153:	48 89 43 08          	mov    %rax,0x8(%rbx)
  416157:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41615c:	48 89 43 10          	mov    %rax,0x10(%rbx)
  416160:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  416165:	48 89 43 18          	mov    %rax,0x18(%rbx)
        if( pi_ != 0 ) pi_->add_ref_copy();
  416169:	74 19                	je     416184 <_ZN4YAML4Node5beginEv+0xc4>
  41616b:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  416172:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  416179:	ff ff ff 
  41617c:	4c 89 e7             	mov    %r12,%rdi
  41617f:	48 01 e8             	add    %rbp,%rax
  416182:	ff d0                	callq  *%rax
}
  416184:	48 83 c4 20          	add    $0x20,%rsp
  416188:	48 89 d8             	mov    %rbx,%rax
  41618b:	5b                   	pop    %rbx
  41618c:	5d                   	pop    %rbp
  41618d:	41 5c                	pop    %r12
  41618f:	41 5d                	pop    %r13
  416191:	41 5f                	pop    %r15
  416193:	c3                   	retq   
  416194:	0f 1f 40 00          	nopl   0x0(%rax)
      : m_type(iterator_type::None), m_seqIt(), m_mapIt(), m_mapEnd() {}
  416198:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
      : _M_current(_Iterator()) { }
  41619e:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  4161a5:	00 
  4161a6:	48 89 d8             	mov    %rbx,%rax
      : _M_node() { }
  4161a9:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  4161b0:	00 
  4161b1:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  4161b8:	00 
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  4161b9:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  4161c0:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  4161c1:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  4161c8:	00 
  4161c9:	48 83 c4 20          	add    $0x20,%rsp
  4161cd:	5b                   	pop    %rbx
  4161ce:	5d                   	pop    %rbp
  4161cf:	41 5c                	pop    %r12
  4161d1:	41 5d                	pop    %r13
  4161d3:	41 5f                	pop    %r15
  4161d5:	c3                   	retq   
  4161d6:	48 b8 c6 eb dd ff ff 	movabs $0xffffffffffddebc6,%rax
  4161dd:	ff ff ff 
  4161e0:	48 01 e8             	add    %rbp,%rax
  4161e3:	ff d0                	callq  *%rax
  4161e5:	48 b8 72 ec dd ff ff 	movabs $0xffffffffffddec72,%rax
  4161ec:	ff ff ff 
  4161ef:	48 01 e8             	add    %rbp,%rax
  4161f2:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  4161f4:	4d 85 e4             	test   %r12,%r12
  4161f7:	48 89 c3             	mov    %rax,%rbx
  4161fa:	74 12                	je     41620e <_ZN4YAML4Node5beginEv+0x14e>
  4161fc:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  416203:	ff ff ff 
  416206:	4c 89 e7             	mov    %r12,%rdi
  416209:	48 01 e8             	add    %rbp,%rax
  41620c:	ff d0                	callq  *%rax
  41620e:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  416215:	ff ff ff 
  416218:	48 89 df             	mov    %rbx,%rdi
  41621b:	49 89 ef             	mov    %rbp,%r15
  41621e:	48 01 e8             	add    %rbp,%rax
  416221:	ff d0                	callq  *%rax
  416223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41622a:	00 00 00 
  41622d:	0f 1f 00             	nopl   (%rax)

0000000000416230 <_ZN4YAML4Node3endEv>:
inline iterator Node::end() {
  416230:	41 57                	push   %r15
  416232:	41 55                	push   %r13
  416234:	49 bb d0 4d 21 00 00 	movabs $0x214dd0,%r11
  41623b:	00 00 00 
  41623e:	41 54                	push   %r12
  416240:	55                   	push   %rbp
  416241:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 416230 <_ZN4YAML4Node3endEv>
  416248:	53                   	push   %rbx
  416249:	48 89 fb             	mov    %rdi,%rbx
  41624c:	4c 01 dd             	add    %r11,%rbp
  41624f:	48 83 ec 20          	sub    $0x20,%rsp
  if (!m_isValid)
  416253:	80 3e 00             	cmpb   $0x0,(%rsi)
  416256:	0f 84 ac 00 00 00    	je     416308 <_ZN4YAML4Node3endEv+0xd8>
  return m_pNode ? iterator(m_pNode->end(), m_pMemory) : iterator();
  41625c:	48 8b 46 18          	mov    0x18(%rsi),%rax
  416260:	48 85 c0             	test   %rax,%rax
  416263:	0f 84 9f 00 00 00    	je     416308 <_ZN4YAML4Node3endEv+0xd8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416269:	4c 8b 66 10          	mov    0x10(%rsi),%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41626d:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
        if( pi_ != 0 ) pi_->add_ref_copy();
  416271:	4d 85 e4             	test   %r12,%r12
  416274:	74 0b                	je     416281 <_ZN4YAML4Node3endEv+0x51>
  416276:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
  41627d:	48 8b 46 18          	mov    0x18(%rsi),%rax
  416281:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  416284:	48 85 c0             	test   %rax,%rax
  416287:	0f 84 c8 00 00 00    	je     416355 <_ZN4YAML4Node3endEv+0x125>
  41628d:	48 8b 30             	mov    (%rax),%rsi
  416290:	48 85 f6             	test   %rsi,%rsi
  416293:	0f 84 ad 00 00 00    	je     416346 <_ZN4YAML4Node3endEv+0x116>

  const_node_iterator end() const {
    return static_cast<const node_data&>(*m_pData).end();
  }
  node_iterator end() { return m_pData->end(); }
  416299:	48 b8 40 e4 dd ff ff 	movabs $0xffffffffffdde440,%rax
  4162a0:	ff ff ff 
  4162a3:	48 89 e7             	mov    %rsp,%rdi
  4162a6:	49 89 ef             	mov    %rbp,%r15
  4162a9:	48 01 e8             	add    %rbp,%rax
  4162ac:	ff d0                	callq  *%rax
  4162ae:	8b 04 24             	mov    (%rsp),%eax
  4162b1:	4d 85 e4             	test   %r12,%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  4162b4:	4c 89 6b 20          	mov    %r13,0x20(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  4162b8:	4c 89 63 28          	mov    %r12,0x28(%rbx)
  4162bc:	89 03                	mov    %eax,(%rbx)
  4162be:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4162c3:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4162c7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4162cc:	48 89 43 10          	mov    %rax,0x10(%rbx)
  4162d0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4162d5:	48 89 43 18          	mov    %rax,0x18(%rbx)
        if( pi_ != 0 ) pi_->add_ref_copy();
  4162d9:	74 19                	je     4162f4 <_ZN4YAML4Node3endEv+0xc4>
  4162db:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  4162e2:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  4162e9:	ff ff ff 
  4162ec:	4c 89 e7             	mov    %r12,%rdi
  4162ef:	48 01 e8             	add    %rbp,%rax
  4162f2:	ff d0                	callq  *%rax
}
  4162f4:	48 83 c4 20          	add    $0x20,%rsp
  4162f8:	48 89 d8             	mov    %rbx,%rax
  4162fb:	5b                   	pop    %rbx
  4162fc:	5d                   	pop    %rbp
  4162fd:	41 5c                	pop    %r12
  4162ff:	41 5d                	pop    %r13
  416301:	41 5f                	pop    %r15
  416303:	c3                   	retq   
  416304:	0f 1f 40 00          	nopl   0x0(%rax)
  416308:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  41630e:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  416315:	00 
  416316:	48 89 d8             	mov    %rbx,%rax
  416319:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  416320:	00 
  416321:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  416328:	00 
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  416329:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  416330:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  416331:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  416338:	00 
  416339:	48 83 c4 20          	add    $0x20,%rsp
  41633d:	5b                   	pop    %rbx
  41633e:	5d                   	pop    %rbp
  41633f:	41 5c                	pop    %r12
  416341:	41 5d                	pop    %r13
  416343:	41 5f                	pop    %r15
  416345:	c3                   	retq   
  416346:	48 b8 c6 eb dd ff ff 	movabs $0xffffffffffddebc6,%rax
  41634d:	ff ff ff 
  416350:	48 01 e8             	add    %rbp,%rax
  416353:	ff d0                	callq  *%rax
  416355:	48 b8 72 ec dd ff ff 	movabs $0xffffffffffddec72,%rax
  41635c:	ff ff ff 
  41635f:	48 01 e8             	add    %rbp,%rax
  416362:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  416364:	4d 85 e4             	test   %r12,%r12
  416367:	48 89 c3             	mov    %rax,%rbx
  41636a:	74 12                	je     41637e <_ZN4YAML4Node3endEv+0x14e>
  41636c:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  416373:	ff ff ff 
  416376:	4c 89 e7             	mov    %r12,%rdi
  416379:	48 01 e8             	add    %rbp,%rax
  41637c:	ff d0                	callq  *%rax
  41637e:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  416385:	ff ff ff 
  416388:	48 89 df             	mov    %rbx,%rdi
  41638b:	49 89 ef             	mov    %rbp,%r15
  41638e:	48 01 e8             	add    %rbp,%rax
  416391:	ff d0                	callq  *%rax
  416393:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41639a:	00 00 00 
  41639d:	0f 1f 00             	nopl   (%rax)

00000000004163a0 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi>:
  YAML_DEFINE_CONVERT_STREAMABLE(type, -)

#define YAML_DEFINE_CONVERT_STREAMABLE_UNSIGNED(type) \
  YAML_DEFINE_CONVERT_STREAMABLE(type, +)

YAML_DEFINE_CONVERT_STREAMABLE_SIGNED(int);
  4163a0:	41 57                	push   %r15
  4163a2:	41 54                	push   %r12
  4163a4:	49 bb 60 4c 21 00 00 	movabs $0x214c60,%r11
  4163ab:	00 00 00 
  4163ae:	55                   	push   %rbp
  4163af:	53                   	push   %rbx
  4163b0:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 4163a0 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi>
  4163b7:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  4163be:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  4163c1:	80 3f 00             	cmpb   $0x0,(%rdi)
  4163c4:	0f 84 12 01 00 00    	je     4164dc <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x13c>
  return m_pNode ? m_pNode->type() : NodeType::Null;
  4163ca:	48 8b 47 18          	mov    0x18(%rdi),%rax
  4163ce:	48 85 c0             	test   %rax,%rax
  4163d1:	74 3d                	je     416410 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x70>
  4163d3:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  4163d6:	48 85 c0             	test   %rax,%rax
  4163d9:	0f 84 66 01 00 00    	je     416545 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x1a5>
  4163df:	49 89 f4             	mov    %rsi,%r12
  4163e2:	48 8b 30             	mov    (%rax),%rsi
  4163e5:	48 85 f6             	test   %rsi,%rsi
  4163e8:	0f 84 48 01 00 00    	je     416536 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x196>
  4163ee:	0f b6 06             	movzbl (%rsi),%eax
    return m_isDefined ? m_type : NodeType::Undefined;
  4163f1:	84 c0                	test   %al,%al
  4163f3:	74 08                	je     4163fd <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x5d>
  4163f5:	31 c0                	xor    %eax,%eax
  4163f7:	83 7e 04 02          	cmpl   $0x2,0x4(%rsi)
  4163fb:	74 23                	je     416420 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x80>
  4163fd:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  416404:	5b                   	pop    %rbx
  416405:	5d                   	pop    %rbp
  416406:	41 5c                	pop    %r12
  416408:	41 5f                	pop    %r15
  41640a:	c3                   	retq   
  41640b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  416410:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  416417:	31 c0                	xor    %eax,%eax
  416419:	5b                   	pop    %rbx
  41641a:	5d                   	pop    %rbp
  41641b:	41 5c                	pop    %r12
  41641d:	41 5f                	pop    %r15
  41641f:	c3                   	retq   
  416420:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  416425:	48 b8 e0 e9 dd ff ff 	movabs $0xffffffffffdde9e0,%rax
  41642c:	ff ff ff 
  const std::string& scalar() const { return m_scalar; }
  41642f:	48 83 c6 30          	add    $0x30,%rsi
  416433:	48 01 d8             	add    %rbx,%rax
  416436:	ba 18 00 00 00       	mov    $0x18,%edx
  41643b:	49 89 df             	mov    %rbx,%r15
  41643e:	48 89 ef             	mov    %rbp,%rdi
  416441:	ff d0                	callq  *%rax
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
	__pf(*this);
  416443:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  416448:	48 89 e9             	mov    %rbp,%rcx
      _S_ios_fmtflags_min = ~__INT_MAX__
    };

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
  41644b:	83 a4 24 a8 00 00 00 	andl   $0xfffffffd,0xa8(%rsp)
  416452:	fd 
  416453:	4c 89 e6             	mov    %r12,%rsi
  416456:	48 89 ef             	mov    %rbp,%rdi
  416459:	48 03 48 e8          	add    -0x18(%rax),%rcx
  41645d:	48 b8 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%rax
  416464:	ff ff ff 
  416467:	48 01 d8             	add    %rbx,%rax
  41646a:	81 61 18 ff ef ff ff 	andl   $0xffffefff,0x18(%rcx)
  416471:	ff d0                	callq  *%rax
  416473:	48 89 c2             	mov    %rax,%rdx
  416476:	48 8b 00             	mov    (%rax),%rax
      _S_ios_iostate_min = ~__INT_MAX__
    };

  inline _GLIBCXX_CONSTEXPR _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
  416479:	48 8b 48 e8          	mov    -0x18(%rax),%rcx
  41647d:	31 c0                	xor    %eax,%eax
  41647f:	f6 44 0a 20 05       	testb  $0x5,0x20(%rdx,%rcx,1)
  416484:	74 32                	je     4164b8 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x118>
  416486:	48 ba 00 e7 dd ff ff 	movabs $0xffffffffffdde700,%rdx
  41648d:	ff ff ff 
  416490:	88 44 24 0f          	mov    %al,0xf(%rsp)
  416494:	49 89 df             	mov    %rbx,%r15
  416497:	48 89 ef             	mov    %rbp,%rdi
  41649a:	48 01 da             	add    %rbx,%rdx
  41649d:	ff d2                	callq  *%rdx
  41649f:	0f b6 44 24 0f       	movzbl 0xf(%rsp),%eax
  4164a4:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  4164ab:	5b                   	pop    %rbx
  4164ac:	5d                   	pop    %rbp
  4164ad:	41 5c                	pop    %r12
  4164af:	41 5f                	pop    %r15
  4164b1:	c3                   	retq   
  4164b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      { return __pf(*this); }
  4164b8:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  4164bf:	ff ff ff 
  4164c2:	48 89 ef             	mov    %rbp,%rdi
  4164c5:	48 01 d8             	add    %rbx,%rax
  4164c8:	ff d0                	callq  *%rax
  4164ca:	48 8b 10             	mov    (%rax),%rdx
  4164cd:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  4164d1:	8b 44 10 20          	mov    0x20(%rax,%rdx,1),%eax
  4164d5:	d1 e8                	shr    %eax
  4164d7:	83 e0 01             	and    $0x1,%eax
  4164da:	eb aa                	jmp    416486 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0xe6>
    throw InvalidNode();
  4164dc:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  4164e3:	ff ff ff 
  4164e6:	bf 40 00 00 00       	mov    $0x40,%edi
  4164eb:	49 89 df             	mov    %rbx,%r15
  4164ee:	48 01 d8             	add    %rbx,%rax
  4164f1:	ff d0                	callq  *%rax
  4164f3:	48 89 c5             	mov    %rax,%rbp
  4164f6:	48 89 c7             	mov    %rax,%rdi
  4164f9:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  416500:	ff ff ff 
  416503:	48 01 d8             	add    %rbx,%rax
  416506:	ff d0                	callq  *%rax
  416508:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  41650f:	ff ff ff 
  416512:	48 89 ef             	mov    %rbp,%rdi
  416515:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  416519:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  416520:	ff ff ff 
  416523:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  416527:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41652e:	ff ff ff 
  416531:	48 01 d8             	add    %rbx,%rax
  416534:	ff d0                	callq  *%rax
  416536:	48 b8 c6 eb dd ff ff 	movabs $0xffffffffffddebc6,%rax
  41653d:	ff ff ff 
  416540:	48 01 d8             	add    %rbx,%rax
  416543:	ff d0                	callq  *%rax
  416545:	48 b8 72 ec dd ff ff 	movabs $0xffffffffffddec72,%rax
  41654c:	ff ff ff 
  41654f:	48 01 d8             	add    %rbx,%rax
  416552:	ff d0                	callq  *%rax
  416554:	49 89 c4             	mov    %rax,%r12
  416557:	48 89 ef             	mov    %rbp,%rdi
  41655a:	49 89 df             	mov    %rbx,%r15
  41655d:	48 ba 00 e7 dd ff ff 	movabs $0xffffffffffdde700,%rdx
  416564:	ff ff ff 
  416567:	48 01 da             	add    %rbx,%rdx
  41656a:	ff d2                	callq  *%rdx
  41656c:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  416573:	ff ff ff 
  416576:	4c 89 e7             	mov    %r12,%rdi
  416579:	48 01 d8             	add    %rbx,%rax
  41657c:	ff d0                	callq  *%rax
  41657e:	49 89 c4             	mov    %rax,%r12
  416581:	48 89 ef             	mov    %rbp,%rdi
  416584:	49 89 df             	mov    %rbx,%r15
  416587:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41658e:	ff ff ff 
  416591:	eb d4                	jmp    416567 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x1c7>
  416593:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41659a:	00 00 00 
  41659d:	0f 1f 00             	nopl   (%rax)

00000000004165a0 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z6fillermS2_miEES2_miEEvmmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
  4165a0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4165a0 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z6fillermS2_miEES2_miEEvmmmm>
  4165a7:	49 bb 60 4a 21 00 00 	movabs $0x214a60,%r11
  4165ae:	00 00 00 
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1), uncastArg<V>(arg2));
  4165b1:	49 b8 80 42 de ff ff 	movabs $0xffffffffffde4280,%r8
  4165b8:	ff ff ff 
  4165bb:	4c 01 d8             	add    %r11,%rax
  4165be:	4c 01 c0             	add    %r8,%rax
  4165c1:	ff e0                	jmpq   *%rax
  4165c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4165ca:	00 00 00 
  4165cd:	0f 1f 00             	nopl   (%rax)

00000000004165d0 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z9enq_uppermS2_miEES2_miEEvmmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
  4165d0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4165d0 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z9enq_uppermS2_miEES2_miEEvmmmm>
  4165d7:	49 bb 30 4a 21 00 00 	movabs $0x214a30,%r11
  4165de:	00 00 00 
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1), uncastArg<V>(arg2));
  4165e1:	49 b8 80 43 de ff ff 	movabs $0xffffffffffde4380,%r8
  4165e8:	ff ff ff 
  4165eb:	4c 01 d8             	add    %r11,%rax
  4165ee:	4c 01 c0             	add    %r8,%rax
  4165f1:	ff e0                	jmpq   *%rax
  4165f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4165fa:	00 00 00 
  4165fd:	0f 1f 00             	nopl   (%rax)

0000000000416600 <_ZN5swarm10bareRunnerIFvmfPK5StateP13HighLevelNodemiEXadL_Z10lls_searchmfS3_S5_miEEfPS1_S5_miEEvmmmmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4) {
  416600:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 416600 <_ZN5swarm10bareRunnerIFvmfPK5StateP13HighLevelNodemiEXadL_Z10lls_searchmfS3_S5_miEEfPS1_S5_miEEvmmmmmm>
  416607:	49 bb 00 4a 21 00 00 	movabs $0x214a00,%r11
  41660e:	00 00 00 
  416611:	49 89 d2             	mov    %rdx,%r10
    return u.res;
  416614:	89 74 24 f4          	mov    %esi,-0xc(%rsp)
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4) {
  416618:	48 89 ca             	mov    %rcx,%rdx
  41661b:	4c 89 c1             	mov    %r8,%rcx
  41661e:	4c 01 d8             	add    %r11,%rax
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1), uncastArg<V>(arg2), uncastArg<X>(arg3), uncastArg<Y>(arg4));
  416621:	45 89 c8             	mov    %r9d,%r8d
  416624:	49 b9 00 44 de ff ff 	movabs $0xffffffffffde4400,%r9
  41662b:	ff ff ff 
    return u.res;
  41662e:	f3 0f 10 44 24 f4    	movss  -0xc(%rsp),%xmm0
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1), uncastArg<V>(arg2), uncastArg<X>(arg3), uncastArg<Y>(arg4));
  416634:	4c 89 d6             	mov    %r10,%rsi
  416637:	4c 01 c8             	add    %r9,%rax
  41663a:	ff e0                	jmpq   *%rax
  41663c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000416640 <_ZN5swarm10bareRunnerIFvmiP13HighLevelNodeEXadL_Z6star_tmiS2_EEiS2_EEvmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1) {
  416640:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 416640 <_ZN5swarm10bareRunnerIFvmiP13HighLevelNodeEXadL_Z6star_tmiS2_EEiS2_EEvmmm>
  416647:	49 bb c0 49 21 00 00 	movabs $0x2149c0,%r11
  41664e:	00 00 00 
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1));
  416651:	48 b9 10 46 de ff ff 	movabs $0xffffffffffde4610,%rcx
  416658:	ff ff ff 
  41665b:	4c 01 d8             	add    %r11,%rax
  41665e:	48 01 c8             	add    %rcx,%rax
  416661:	ff e0                	jmpq   *%rax
  416663:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41666a:	00 00 00 
  41666d:	0f 1f 00             	nopl   (%rax)

0000000000416670 <_ZN5boost15program_options19options_descriptionD1Ev>:
        for options by name.
        
        See @ref a_adding_options "here" for option adding interface discussion.
        @sa option_description
    */
    class BOOST_PROGRAM_OPTIONS_DECL options_description {
  416670:	41 57                	push   %r15
  416672:	41 56                	push   %r14
  416674:	49 bb 90 49 21 00 00 	movabs $0x214990,%r11
  41667b:	00 00 00 
  41667e:	41 55                	push   %r13
  416680:	41 54                	push   %r12
  416682:	4c 8d 2d e7 ff ff ff 	lea    -0x19(%rip),%r13        # 416670 <_ZN5boost15program_options19options_descriptionD1Ev>
  416689:	55                   	push   %rbp
  41668a:	53                   	push   %rbx
  41668b:	49 89 fc             	mov    %rdi,%r12
  41668e:	4d 01 dd             	add    %r11,%r13
  416691:	48 83 ec 08          	sub    $0x8,%rsp
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  416695:	4c 8b 7f 70          	mov    0x70(%rdi),%r15
  416699:	48 8b 6f 68          	mov    0x68(%rdi),%rbp
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
  41669d:	49 39 ef             	cmp    %rbp,%r15
  4166a0:	74 63                	je     416705 <_ZN5boost15program_options19options_descriptionD1Ev+0x95>
  4166a2:	48 b8 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rax
  4166a9:	ff ff ff 
  4166ac:	4d 8d 74 05 00       	lea    0x0(%r13,%rax,1),%r14
  4166b1:	eb 0e                	jmp    4166c1 <_ZN5boost15program_options19options_descriptionD1Ev+0x51>
  4166b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4166b8:	48 83 c5 10          	add    $0x10,%rbp
  4166bc:	49 39 ef             	cmp    %rbp,%r15
  4166bf:	74 3f                	je     416700 <_ZN5boost15program_options19options_descriptionD1Ev+0x90>
  4166c1:	48 8b 5d 08          	mov    0x8(%rbp),%rbx
  4166c5:	48 85 db             	test   %rbx,%rbx
  4166c8:	74 ee                	je     4166b8 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
        if( atomic_decrement( &use_count_ ) == 1 )
  4166ca:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  4166cf:	75 e7                	jne    4166b8 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
            dispose();
  4166d1:	48 8b 03             	mov    (%rbx),%rax
  4166d4:	48 89 df             	mov    %rbx,%rdi
  4166d7:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4166da:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  4166df:	75 d7                	jne    4166b8 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
            destroy();
  4166e1:	48 8b 03             	mov    (%rbx),%rax
        delete this;
  4166e4:	48 89 df             	mov    %rbx,%rdi
            destroy();
  4166e7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  4166eb:	4c 39 f2             	cmp    %r14,%rdx
  4166ee:	0f 85 1a 01 00 00    	jne    41680e <_ZN5boost15program_options19options_descriptionD1Ev+0x19e>
  4166f4:	48 83 c5 10          	add    $0x10,%rbp
        delete this;
  4166f8:	ff 50 08             	callq  *0x8(%rax)
  4166fb:	49 39 ef             	cmp    %rbp,%r15
  4166fe:	75 c1                	jne    4166c1 <_ZN5boost15program_options19options_descriptionD1Ev+0x51>
  416700:	49 8b 6c 24 68       	mov    0x68(%r12),%rbp
	if (__p)
  416705:	48 85 ed             	test   %rbp,%rbp
  416708:	74 15                	je     41671f <_ZN5boost15program_options19options_descriptionD1Ev+0xaf>
  41670a:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  416711:	ff ff ff 
  416714:	48 89 ef             	mov    %rbp,%rdi
  416717:	4d 89 ef             	mov    %r13,%r15
  41671a:	4c 01 e8             	add    %r13,%rax
  41671d:	ff d0                	callq  *%rax
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
	if (_M_impl._M_start._M_p)
  41671f:	49 8b 7c 24 40       	mov    0x40(%r12),%rdi
  416724:	48 85 ff             	test   %rdi,%rdi
  416727:	74 12                	je     41673b <_ZN5boost15program_options19options_descriptionD1Ev+0xcb>
  416729:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  416730:	ff ff ff 
  416733:	4d 89 ef             	mov    %r13,%r15
  416736:	4c 01 e8             	add    %r13,%rax
  416739:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41673b:	4d 8b 7c 24 30       	mov    0x30(%r12),%r15
  416740:	49 8b 6c 24 28       	mov    0x28(%r12),%rbp
  416745:	49 39 ef             	cmp    %rbp,%r15
  416748:	74 63                	je     4167ad <_ZN5boost15program_options19options_descriptionD1Ev+0x13d>
  41674a:	48 b8 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rax
  416751:	ff ff ff 
  416754:	4d 8d 74 05 00       	lea    0x0(%r13,%rax,1),%r14
  416759:	eb 0e                	jmp    416769 <_ZN5boost15program_options19options_descriptionD1Ev+0xf9>
  41675b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  416760:	48 83 c5 10          	add    $0x10,%rbp
  416764:	49 39 ef             	cmp    %rbp,%r15
  416767:	74 3f                	je     4167a8 <_ZN5boost15program_options19options_descriptionD1Ev+0x138>
  416769:	48 8b 5d 08          	mov    0x8(%rbp),%rbx
  41676d:	48 85 db             	test   %rbx,%rbx
  416770:	74 ee                	je     416760 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
        if( atomic_decrement( &use_count_ ) == 1 )
  416772:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  416777:	75 e7                	jne    416760 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
            dispose();
  416779:	48 8b 03             	mov    (%rbx),%rax
  41677c:	48 89 df             	mov    %rbx,%rdi
  41677f:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  416782:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  416787:	75 d7                	jne    416760 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
            destroy();
  416789:	48 8b 03             	mov    (%rbx),%rax
        delete this;
  41678c:	48 89 df             	mov    %rbx,%rdi
            destroy();
  41678f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  416793:	4c 39 f2             	cmp    %r14,%rdx
  416796:	75 6f                	jne    416807 <_ZN5boost15program_options19options_descriptionD1Ev+0x197>
  416798:	48 83 c5 10          	add    $0x10,%rbp
        delete this;
  41679c:	ff 50 08             	callq  *0x8(%rax)
  41679f:	49 39 ef             	cmp    %rbp,%r15
  4167a2:	75 c5                	jne    416769 <_ZN5boost15program_options19options_descriptionD1Ev+0xf9>
  4167a4:	0f 1f 40 00          	nopl   0x0(%rax)
  4167a8:	49 8b 6c 24 28       	mov    0x28(%r12),%rbp
	if (__p)
  4167ad:	48 85 ed             	test   %rbp,%rbp
  4167b0:	74 15                	je     4167c7 <_ZN5boost15program_options19options_descriptionD1Ev+0x157>
  4167b2:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4167b9:	ff ff ff 
  4167bc:	48 89 ef             	mov    %rbp,%rdi
  4167bf:	4d 89 ef             	mov    %r13,%r15
  4167c2:	4c 01 e8             	add    %r13,%rax
  4167c5:	ff d0                	callq  *%rax
  4167c7:	49 8b 3c 24          	mov    (%r12),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4167cb:	49 83 c4 10          	add    $0x10,%r12
	if (!_M_is_local())
  4167cf:	4c 39 e7             	cmp    %r12,%rdi
  4167d2:	74 24                	je     4167f8 <_ZN5boost15program_options19options_descriptionD1Ev+0x188>
  4167d4:	48 83 c4 08          	add    $0x8,%rsp
  4167d8:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4167df:	ff ff ff 
  4167e2:	5b                   	pop    %rbx
  4167e3:	4c 01 e8             	add    %r13,%rax
  4167e6:	5d                   	pop    %rbp
  4167e7:	41 5c                	pop    %r12
  4167e9:	41 5d                	pop    %r13
  4167eb:	41 5e                	pop    %r14
  4167ed:	41 5f                	pop    %r15
  4167ef:	ff e0                	jmpq   *%rax
  4167f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4167f8:	48 83 c4 08          	add    $0x8,%rsp
  4167fc:	5b                   	pop    %rbx
  4167fd:	5d                   	pop    %rbp
  4167fe:	41 5c                	pop    %r12
  416800:	41 5d                	pop    %r13
  416802:	41 5e                	pop    %r14
  416804:	41 5f                	pop    %r15
  416806:	c3                   	retq   
            destroy();
  416807:	ff d2                	callq  *%rdx
  416809:	e9 52 ff ff ff       	jmpq   416760 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
  41680e:	ff d2                	callq  *%rdx
  416810:	e9 a3 fe ff ff       	jmpq   4166b8 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
  416815:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41681c:	00 00 00 
  41681f:	90                   	nop

0000000000416820 <_ZN4YAML6detail14iterator_valueD1Ev>:
#include <utility>
#include <vector>

namespace YAML {
namespace detail {
struct iterator_value : public Node, std::pair<Node, Node> {
  416820:	55                   	push   %rbp
  416821:	53                   	push   %rbx
  416822:	48 89 fd             	mov    %rdi,%rbp
  416825:	48 8d 1d f4 ff ff ff 	lea    -0xc(%rip),%rbx        # 416820 <_ZN4YAML6detail14iterator_valueD1Ev>
  41682c:	49 bb e0 47 21 00 00 	movabs $0x2147e0,%r11
  416833:	00 00 00 
  416836:	48 83 ec 08          	sub    $0x8,%rsp
  41683a:	48 8b 7f 50          	mov    0x50(%rdi),%rdi
  41683e:	4c 01 db             	add    %r11,%rbx
  416841:	48 85 ff             	test   %rdi,%rdi
  416844:	74 0f                	je     416855 <_ZN4YAML6detail14iterator_valueD1Ev+0x35>
  416846:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41684d:	ff ff ff 
  416850:	48 01 d8             	add    %rbx,%rax
  416853:	ff d0                	callq  *%rax
  416855:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  416859:	48 85 ff             	test   %rdi,%rdi
  41685c:	74 0f                	je     41686d <_ZN4YAML6detail14iterator_valueD1Ev+0x4d>
  41685e:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  416865:	ff ff ff 
  416868:	48 01 d8             	add    %rbx,%rax
  41686b:	ff d0                	callq  *%rax
  41686d:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  416871:	48 85 ff             	test   %rdi,%rdi
  416874:	74 1a                	je     416890 <_ZN4YAML6detail14iterator_valueD1Ev+0x70>
  416876:	48 83 c4 08          	add    $0x8,%rsp
  41687a:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  416881:	ff ff ff 
  416884:	48 01 d8             	add    %rbx,%rax
  416887:	5b                   	pop    %rbx
  416888:	5d                   	pop    %rbp
  416889:	ff e0                	jmpq   *%rax
  41688b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  416890:	48 83 c4 08          	add    $0x8,%rsp
  416894:	5b                   	pop    %rbx
  416895:	5d                   	pop    %rbp
  416896:	c3                   	retq   
  416897:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41689e:	00 00 

00000000004168a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  4168a0:	41 57                	push   %r15
  4168a2:	41 55                	push   %r13
  4168a4:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 4168a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
  4168ab:	41 54                	push   %r12
  4168ad:	55                   	push   %rbp
  4168ae:	49 bb 60 47 21 00 00 	movabs $0x214760,%r11
  4168b5:	00 00 00 
  4168b8:	53                   	push   %rbx
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4168b9:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  4168bd:	4d 01 dd             	add    %r11,%r13
  4168c0:	48 8b 1f             	mov    (%rdi),%rbx
  4168c3:	48 39 dd             	cmp    %rbx,%rbp
  4168c6:	74 33                	je     4168fb <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x5b>
  4168c8:	49 89 fc             	mov    %rdi,%r12
  4168cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4168d0:	48 8b 3b             	mov    (%rbx),%rdi
  4168d3:	48 8d 43 10          	lea    0x10(%rbx),%rax
  4168d7:	48 39 c7             	cmp    %rax,%rdi
  4168da:	74 12                	je     4168ee <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x4e>
  4168dc:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4168e3:	ff ff ff 
  4168e6:	4d 89 ef             	mov    %r13,%r15
  4168e9:	4c 01 e8             	add    %r13,%rax
  4168ec:	ff d0                	callq  *%rax
  4168ee:	48 83 c3 20          	add    $0x20,%rbx
  4168f2:	48 39 dd             	cmp    %rbx,%rbp
  4168f5:	75 d9                	jne    4168d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x30>
  4168f7:	49 8b 1c 24          	mov    (%r12),%rbx
	if (__p)
  4168fb:	48 85 db             	test   %rbx,%rbx
  4168fe:	74 20                	je     416920 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x80>
  416900:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  416907:	ff ff ff 
  41690a:	48 89 df             	mov    %rbx,%rdi
  41690d:	4c 01 e8             	add    %r13,%rax
		      _M_get_Tp_allocator()); }
  416910:	5b                   	pop    %rbx
  416911:	5d                   	pop    %rbp
  416912:	41 5c                	pop    %r12
  416914:	41 5d                	pop    %r13
  416916:	41 5f                	pop    %r15
  416918:	ff e0                	jmpq   *%rax
  41691a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  416920:	5b                   	pop    %rbx
  416921:	5d                   	pop    %rbp
  416922:	41 5c                	pop    %r12
  416924:	41 5d                	pop    %r13
  416926:	41 5f                	pop    %r15
  416928:	c3                   	retq   
  416929:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000416930 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev>:
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
  416930:	41 57                	push   %r15
  416932:	55                   	push   %rbp
  416933:	49 bb d0 46 21 00 00 	movabs $0x2146d0,%r11
  41693a:	00 00 00 
  41693d:	53                   	push   %rbx
  41693e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 416930 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev>
  416945:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  41694c:	ff ff ff 
  41694f:	48 89 fd             	mov    %rdi,%rbp
  416952:	4c 01 db             	add    %r11,%rbx
  416955:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416959:	48 83 c0 10          	add    $0x10,%rax
  41695d:	48 89 07             	mov    %rax,(%rdi)
  416960:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  416964:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  416968:	48 39 c7             	cmp    %rax,%rdi
  41696b:	74 12                	je     41697f <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev+0x4f>
  41696d:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  416974:	ff ff ff 
  416977:	49 89 df             	mov    %rbx,%r15
  41697a:	48 01 d8             	add    %rbx,%rax
  41697d:	ff d0                	callq  *%rax
  41697f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  416986:	ff ff ff 
  416989:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  41698d:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416991:	48 83 c0 10          	add    $0x10,%rax
  416995:	48 89 45 00          	mov    %rax,0x0(%rbp)
  416999:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  4169a0:	ff ff ff 
  4169a3:	48 01 d8             	add    %rbx,%rax
  4169a6:	5b                   	pop    %rbx
  4169a7:	5d                   	pop    %rbp
  4169a8:	41 5f                	pop    %r15
  4169aa:	ff e0                	jmpq   *%rax
  4169ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004169b0 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev>:
  4169b0:	41 57                	push   %r15
  4169b2:	55                   	push   %rbp
  4169b3:	49 bb 50 46 21 00 00 	movabs $0x214650,%r11
  4169ba:	00 00 00 
  4169bd:	53                   	push   %rbx
  4169be:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4169b0 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev>
  4169c5:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  4169cc:	ff ff ff 
  4169cf:	48 89 fd             	mov    %rdi,%rbp
  4169d2:	4c 01 db             	add    %r11,%rbx
  4169d5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4169d9:	48 83 c0 10          	add    $0x10,%rax
  4169dd:	48 89 07             	mov    %rax,(%rdi)
  4169e0:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4169e4:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  4169e8:	48 39 c7             	cmp    %rax,%rdi
  4169eb:	74 12                	je     4169ff <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev+0x4f>
  4169ed:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4169f4:	ff ff ff 
  4169f7:	49 89 df             	mov    %rbx,%r15
  4169fa:	48 01 d8             	add    %rbx,%rax
  4169fd:	ff d0                	callq  *%rax
  4169ff:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  416a06:	ff ff ff 
  416a09:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  416a0d:	49 89 df             	mov    %rbx,%r15
  416a10:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416a14:	48 83 c0 10          	add    $0x10,%rax
  416a18:	48 89 45 00          	mov    %rax,0x0(%rbp)
  416a1c:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  416a23:	ff ff ff 
  416a26:	48 01 d8             	add    %rbx,%rax
  416a29:	ff d0                	callq  *%rax
  416a2b:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  416a32:	ff ff ff 
  416a35:	48 89 ef             	mov    %rbp,%rdi
  416a38:	be 68 00 00 00       	mov    $0x68,%esi
  416a3d:	48 01 d8             	add    %rbx,%rax
  416a40:	5b                   	pop    %rbx
  416a41:	5d                   	pop    %rbp
  416a42:	41 5f                	pop    %r15
  416a44:	ff e0                	jmpq   *%rax
  416a46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  416a4d:	00 00 00 

0000000000416a50 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE>:
inline bool node::equals(const T& rhs, shared_memory_holder pMemory) {
  416a50:	41 57                	push   %r15
  416a52:	41 56                	push   %r14
  416a54:	49 bb b0 45 21 00 00 	movabs $0x2145b0,%r11
  416a5b:	00 00 00 
  416a5e:	41 55                	push   %r13
  416a60:	41 54                	push   %r12
  416a62:	49 89 f6             	mov    %rsi,%r14
  416a65:	55                   	push   %rbp
  416a66:	53                   	push   %rbx
  416a67:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 416a50 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE>
  416a6e:	48 83 ec 28          	sub    $0x28,%rsp
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416a72:	4c 8b 62 08          	mov    0x8(%rdx),%r12
  416a76:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  416a79:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  416a7e:	48 89 e5             	mov    %rsp,%rbp
      { _M_string_length = __length; }
  416a81:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  416a88:	00 00 
  416a8a:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  416a8f:	4d 85 e4             	test   %r12,%r12
	: allocator_type(__a), _M_p(__dat) { }
  416a92:	48 89 04 24          	mov    %rax,(%rsp)
  416a96:	74 0d                	je     416aa5 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x55>
  416a98:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  416a9d:	f0 83 00 01          	lock addl $0x1,(%rax)
  416aa1:	f0 83 00 01          	lock addl $0x1,(%rax)
  416aa5:	48 8b 07             	mov    (%rdi),%rax
  416aa8:	48 85 c0             	test   %rax,%rax
  416aab:	0f 84 cd 00 00 00    	je     416b7e <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x12e>
  416ab1:	48 8b 30             	mov    (%rax),%rsi
  416ab4:	48 85 f6             	test   %rsi,%rsi
  416ab7:	0f 84 d0 00 00 00    	je     416b8d <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x13d>
  416abd:	44 0f b6 2e          	movzbl (%rsi),%r13d
    return m_isDefined ? m_type : NodeType::Undefined;
  416ac1:	45 84 ed             	test   %r13b,%r13b
  416ac4:	74 0d                	je     416ad3 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x83>
    if (!node.IsScalar())
  416ac6:	83 7e 04 02          	cmpl   $0x2,0x4(%rsi)
  416aca:	0f 84 90 00 00 00    	je     416b60 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x110>
      return false;
  416ad0:	45 31 ed             	xor    %r13d,%r13d
        if( pi_ != 0 ) pi_->release();
  416ad3:	4d 85 e4             	test   %r12,%r12
  416ad6:	74 1a                	je     416af2 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xa2>
  416ad8:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  416adf:	ff ff ff 
  416ae2:	4c 89 e7             	mov    %r12,%rdi
  416ae5:	4c 8d 3c 03          	lea    (%rbx,%rax,1),%r15
  416ae9:	41 ff d7             	callq  *%r15
  416aec:	4c 89 e7             	mov    %r12,%rdi
  416aef:	41 ff d7             	callq  *%r15
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  416af2:	45 84 ed             	test   %r13b,%r13b
  416af5:	4c 8b 24 24          	mov    (%rsp),%r12
  416af9:	75 35                	jne    416b30 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xe0>
  return false;
  416afb:	45 31 ed             	xor    %r13d,%r13d
	if (!_M_is_local())
  416afe:	48 83 c5 10          	add    $0x10,%rbp
  416b02:	49 39 ec             	cmp    %rbp,%r12
  416b05:	74 15                	je     416b1c <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xcc>
  416b07:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  416b0e:	ff ff ff 
  416b11:	4c 89 e7             	mov    %r12,%rdi
  416b14:	49 89 df             	mov    %rbx,%r15
  416b17:	48 01 d8             	add    %rbx,%rax
  416b1a:	ff d0                	callq  *%rax
}
  416b1c:	48 83 c4 28          	add    $0x28,%rsp
  416b20:	44 89 e8             	mov    %r13d,%eax
  416b23:	5b                   	pop    %rbx
  416b24:	5d                   	pop    %rbp
  416b25:	41 5c                	pop    %r12
  416b27:	41 5d                	pop    %r13
  416b29:	41 5e                	pop    %r14
  416b2b:	41 5f                	pop    %r15
  416b2d:	c3                   	retq   
  416b2e:	66 90                	xchg   %ax,%ax
  416b30:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  416b35:	49 3b 56 08          	cmp    0x8(%r14),%rdx
  416b39:	75 c0                	jne    416afb <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xab>
	if (__n == 0)
  416b3b:	48 85 d2             	test   %rdx,%rdx
  416b3e:	74 be                	je     416afe <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xae>
	return __builtin_memcmp(__s1, __s2, __n);
  416b40:	48 b8 60 e5 dd ff ff 	movabs $0xffffffffffdde560,%rax
  416b47:	ff ff ff 
  416b4a:	49 8b 36             	mov    (%r14),%rsi
  416b4d:	4c 89 e7             	mov    %r12,%rdi
  416b50:	48 01 d8             	add    %rbx,%rax
  416b53:	49 89 df             	mov    %rbx,%r15
  416b56:	ff d0                	callq  *%rax
  416b58:	85 c0                	test   %eax,%eax
  416b5a:	41 0f 94 c5          	sete   %r13b
  416b5e:	eb 9e                	jmp    416afe <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xae>
	this->_M_assign(__str);
  416b60:	48 b8 b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%rax
  416b67:	ff ff ff 
  const std::string& scalar() const { return m_scalar; }
  416b6a:	48 83 c6 30          	add    $0x30,%rsi
  416b6e:	48 89 ef             	mov    %rbp,%rdi
  416b71:	49 89 df             	mov    %rbx,%r15
  416b74:	48 01 d8             	add    %rbx,%rax
  416b77:	ff d0                	callq  *%rax
  416b79:	e9 55 ff ff ff       	jmpq   416ad3 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x83>
  416b7e:	48 b8 72 ec dd ff ff 	movabs $0xffffffffffddec72,%rax
  416b85:	ff ff ff 
  416b88:	48 01 d8             	add    %rbx,%rax
  416b8b:	ff d0                	callq  *%rax
  416b8d:	48 b8 c6 eb dd ff ff 	movabs $0xffffffffffddebc6,%rax
  416b94:	ff ff ff 
  416b97:	48 01 d8             	add    %rbx,%rax
  416b9a:	ff d0                	callq  *%rax
  416b9c:	4d 85 e4             	test   %r12,%r12
  416b9f:	49 89 c5             	mov    %rax,%r13
  416ba2:	74 1a                	je     416bbe <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x16e>
  416ba4:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  416bab:	ff ff ff 
  416bae:	4c 89 e7             	mov    %r12,%rdi
  416bb1:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  416bb5:	41 ff d6             	callq  *%r14
  416bb8:	4c 89 e7             	mov    %r12,%rdi
  416bbb:	41 ff d6             	callq  *%r14
  416bbe:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  416bc2:	48 83 c5 10          	add    $0x10,%rbp
  416bc6:	48 39 ef             	cmp    %rbp,%rdi
  416bc9:	74 12                	je     416bdd <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x18d>
  416bcb:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  416bd2:	ff ff ff 
  416bd5:	49 89 df             	mov    %rbx,%r15
  416bd8:	48 01 d8             	add    %rbx,%rax
  416bdb:	ff d0                	callq  *%rax
  416bdd:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  416be4:	ff ff ff 
  416be7:	4c 89 ef             	mov    %r13,%rdi
  416bea:	49 89 df             	mov    %rbx,%r15
  416bed:	48 01 d8             	add    %rbx,%rax
  416bf0:	ff d0                	callq  *%rax
  416bf2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  416bf9:	00 00 00 
  416bfc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000416c00 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  416c00:	41 57                	push   %r15
  416c02:	41 55                	push   %r13
  416c04:	49 89 fd             	mov    %rdi,%r13
  416c07:	41 54                	push   %r12
  416c09:	55                   	push   %rbp
  416c0a:	48 8d 2d ef ff ff ff 	lea    -0x11(%rip),%rbp        # 416c00 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev>
  416c11:	53                   	push   %rbx
  416c12:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  416c16:	49 bb 00 44 21 00 00 	movabs $0x214400,%r11
  416c1d:	00 00 00 
  416c20:	4c 01 dd             	add    %r11,%rbp
  416c23:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  416c2a:	ff ff ff 
  416c2d:	49 01 ec             	add    %rbp,%r12
  416c30:	48 85 ff             	test   %rdi,%rdi
  416c33:	74 14                	je     416c49 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev+0x49>
  416c35:	0f 1f 00             	nopl   (%rax)
  416c38:	48 8b 1f             	mov    (%rdi),%rbx
  416c3b:	49 89 ef             	mov    %rbp,%r15
  416c3e:	41 ff d4             	callq  *%r12
  416c41:	48 85 db             	test   %rbx,%rbx
  416c44:	48 89 df             	mov    %rbx,%rdi
  416c47:	75 ef                	jne    416c38 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev+0x38>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  416c49:	49 8b 45 08          	mov    0x8(%r13),%rax
  416c4d:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  416c51:	31 f6                	xor    %esi,%esi
  416c53:	49 89 ef             	mov    %rbp,%r15
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  416c56:	49 83 c5 30          	add    $0x30,%r13
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  416c5a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  416c61:	00 
  416c62:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  416c69:	ff ff ff 
  416c6c:	48 01 e8             	add    %rbp,%rax
  416c6f:	ff d0                	callq  *%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  416c71:	49 8b 7d d0          	mov    -0x30(%r13),%rdi
      _M_element_count = 0;
  416c75:	49 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%r13)
  416c7c:	00 
      _M_before_begin._M_nxt = nullptr;
  416c7d:	49 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%r13)
  416c84:	00 
	if (_M_uses_single_bucket(__bkts))
  416c85:	4c 39 ef             	cmp    %r13,%rdi
  416c88:	74 17                	je     416ca1 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev+0xa1>
  416c8a:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  416c91:	ff ff ff 
    }
  416c94:	5b                   	pop    %rbx
  416c95:	48 01 e8             	add    %rbp,%rax
  416c98:	5d                   	pop    %rbp
  416c99:	41 5c                	pop    %r12
  416c9b:	41 5d                	pop    %r13
  416c9d:	41 5f                	pop    %r15
  416c9f:	ff e0                	jmpq   *%rax
  416ca1:	5b                   	pop    %rbx
  416ca2:	5d                   	pop    %rbp
  416ca3:	41 5c                	pop    %r12
  416ca5:	41 5d                	pop    %r13
  416ca7:	41 5f                	pop    %r15
  416ca9:	c3                   	retq   
  416caa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000416cb0 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
  416cb0:	41 57                	push   %r15
  416cb2:	41 56                	push   %r14
  416cb4:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 416cb0 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_>
  416cbb:	41 55                	push   %r13
  416cbd:	41 54                	push   %r12
  416cbf:	49 bb 50 43 21 00 00 	movabs $0x214350,%r11
  416cc6:	00 00 00 
  416cc9:	55                   	push   %rbp
  416cca:	53                   	push   %rbx
  416ccb:	4d 01 de             	add    %r11,%r14
  416cce:	49 89 fc             	mov    %rdi,%r12
  416cd1:	48 83 ec 18          	sub    $0x18,%rsp
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
  416cd5:	48 39 fe             	cmp    %rdi,%rsi
  416cd8:	74 67                	je     416d41 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x91>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416cda:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
  416cde:	48 8b 1e             	mov    (%rsi),%rbx
  416ce1:	48 8b 3f             	mov    (%rdi),%rdi
			 - this->_M_impl._M_start); }
  416ce4:	49 8b 44 24 10       	mov    0x10(%r12),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416ce9:	49 89 ed             	mov    %rbp,%r13
  416cec:	49 29 dd             	sub    %rbx,%r13
			 - this->_M_impl._M_start); }
  416cef:	48 29 f8             	sub    %rdi,%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416cf2:	4c 89 ee             	mov    %r13,%rsi
			 - this->_M_impl._M_start); }
  416cf5:	48 c1 f8 03          	sar    $0x3,%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416cf9:	48 c1 fe 03          	sar    $0x3,%rsi
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
  416cfd:	48 39 f0             	cmp    %rsi,%rax
  416d00:	0f 82 9a 00 00 00    	jb     416da0 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xf0>
  416d06:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
  416d0b:	48 89 ca             	mov    %rcx,%rdx
  416d0e:	48 29 fa             	sub    %rdi,%rdx
  416d11:	49 89 d0             	mov    %rdx,%r8
  416d14:	49 c1 f8 03          	sar    $0x3,%r8
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
	    }
	  else if (size() >= __xlen)
  416d18:	4c 39 c6             	cmp    %r8,%rsi
  416d1b:	77 3b                	ja     416d58 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xa8>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  416d1d:	31 c0                	xor    %eax,%eax
  416d1f:	48 85 f6             	test   %rsi,%rsi
  416d22:	7e 15                	jle    416d39 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x89>
  416d24:	0f 1f 40 00          	nopl   0x0(%rax)
	      *__result = *__first;
  416d28:	48 8b 14 c3          	mov    (%rbx,%rax,8),%rdx
  416d2c:	48 89 14 c7          	mov    %rdx,(%rdi,%rax,8)
  416d30:	48 83 c0 01          	add    $0x1,%rax
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  416d34:	48 39 f0             	cmp    %rsi,%rax
  416d37:	75 ef                	jne    416d28 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x78>
  416d39:	4c 01 ef             	add    %r13,%rdi
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
  416d3c:	49 89 7c 24 08       	mov    %rdi,0x8(%r12)
	}
      return *this;
    }
  416d41:	48 83 c4 18          	add    $0x18,%rsp
  416d45:	4c 89 e0             	mov    %r12,%rax
  416d48:	5b                   	pop    %rbx
  416d49:	5d                   	pop    %rbp
  416d4a:	41 5c                	pop    %r12
  416d4c:	41 5d                	pop    %r13
  416d4e:	41 5e                	pop    %r14
  416d50:	41 5f                	pop    %r15
  416d52:	c3                   	retq   
  416d53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
  416d58:	48 01 da             	add    %rbx,%rdx
  416d5b:	31 c0                	xor    %eax,%eax
  416d5d:	4d 85 c0             	test   %r8,%r8
  416d60:	7e 31                	jle    416d93 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xe3>
  416d62:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      *__result = *__first;
  416d68:	48 8b 34 c3          	mov    (%rbx,%rax,8),%rsi
  416d6c:	48 89 34 c7          	mov    %rsi,(%rdi,%rax,8)
  416d70:	48 83 c0 01          	add    $0x1,%rax
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  416d74:	4c 39 c0             	cmp    %r8,%rax
  416d77:	75 ef                	jne    416d68 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xb8>
  416d79:	48 39 d5             	cmp    %rdx,%rbp
  416d7c:	74 bb                	je     416d39 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x89>
  416d7e:	66 90                	xchg   %ax,%ax
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  416d80:	48 85 c9             	test   %rcx,%rcx
  416d83:	74 06                	je     416d8b <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xdb>
  416d85:	48 8b 02             	mov    (%rdx),%rax
  416d88:	48 89 01             	mov    %rax,(%rcx)
  416d8b:	48 83 c2 08          	add    $0x8,%rdx
  416d8f:	48 83 c1 08          	add    $0x8,%rcx
  416d93:	48 39 d5             	cmp    %rdx,%rbp
  416d96:	75 e8                	jne    416d80 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xd0>
  416d98:	eb 9f                	jmp    416d39 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x89>
  416d9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  416da0:	31 c0                	xor    %eax,%eax
  416da2:	48 85 f6             	test   %rsi,%rsi
  416da5:	74 28                	je     416dcf <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x11f>
	if (__n > this->max_size())
  416da7:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  416dae:	ff ff 1f 
  416db1:	48 39 c6             	cmp    %rax,%rsi
  416db4:	77 75                	ja     416e2b <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x17b>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  416db6:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  416dbd:	ff ff ff 
  416dc0:	4c 89 ef             	mov    %r13,%rdi
  416dc3:	4d 89 f7             	mov    %r14,%r15
  416dc6:	4c 01 f0             	add    %r14,%rax
  416dc9:	ff d0                	callq  *%rax
  416dcb:	49 8b 3c 24          	mov    (%r12),%rdi
  416dcf:	48 39 eb             	cmp    %rbp,%rbx
  416dd2:	48 89 c1             	mov    %rax,%rcx
  416dd5:	48 89 da             	mov    %rbx,%rdx
  416dd8:	74 1e                	je     416df8 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x148>
  416dda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  416de0:	48 85 c9             	test   %rcx,%rcx
  416de3:	74 06                	je     416deb <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x13b>
  416de5:	48 8b 32             	mov    (%rdx),%rsi
  416de8:	48 89 31             	mov    %rsi,(%rcx)
	++_M_current;
  416deb:	48 83 c2 08          	add    $0x8,%rdx
  416def:	48 83 c1 08          	add    $0x8,%rcx
  416df3:	48 39 d5             	cmp    %rdx,%rbp
  416df6:	75 e8                	jne    416de0 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x130>
	if (__p)
  416df8:	48 85 ff             	test   %rdi,%rdi
  416dfb:	74 1c                	je     416e19 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x169>
      { ::operator delete(__p); }
  416dfd:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  416e04:	ff ff ff 
  416e07:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  416e0c:	4d 89 f7             	mov    %r14,%r15
  416e0f:	4c 01 f2             	add    %r14,%rdx
  416e12:	ff d2                	callq  *%rdx
  416e14:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
  416e19:	4a 8d 3c 28          	lea    (%rax,%r13,1),%rdi
	      this->_M_impl._M_start = __tmp;
  416e1d:	49 89 04 24          	mov    %rax,(%r12)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
  416e21:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  416e26:	e9 11 ff ff ff       	jmpq   416d3c <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x8c>
	  std::__throw_bad_alloc();
  416e2b:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  416e32:	ff ff ff 
  416e35:	4d 89 f7             	mov    %r14,%r15
  416e38:	4c 01 f0             	add    %r14,%rax
  416e3b:	ff d0                	callq  *%rax
  416e3d:	0f 1f 00             	nopl   (%rax)

0000000000416e40 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm>:
    vector<_Tp, _Alloc>::
  416e40:	41 57                	push   %r15
  416e42:	41 56                	push   %r14
  416e44:	49 bb c0 41 21 00 00 	movabs $0x2141c0,%r11
  416e4b:	00 00 00 
  416e4e:	41 55                	push   %r13
  416e50:	41 54                	push   %r12
  416e52:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 416e40 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm>
  416e59:	55                   	push   %rbp
  416e5a:	53                   	push   %rbx
      if (__n > this->max_size())
  416e5b:	48 b8 cc cc cc cc cc 	movabs $0xccccccccccccccc,%rax
  416e62:	cc cc 0c 
  416e65:	4d 01 dc             	add    %r11,%r12
    vector<_Tp, _Alloc>::
  416e68:	48 83 ec 18          	sub    $0x18,%rsp
      if (__n > this->max_size())
  416e6c:	48 39 c6             	cmp    %rax,%rsi
  416e6f:	0f 87 ee 00 00 00    	ja     416f63 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0x123>
  416e75:	48 8b 1f             	mov    (%rdi),%rbx
			 - this->_M_impl._M_start); }
  416e78:	48 8b 47 10          	mov    0x10(%rdi),%rax
  416e7c:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
  416e83:	cc cc cc 
  416e86:	49 89 fd             	mov    %rdi,%r13
  416e89:	49 89 f6             	mov    %rsi,%r14
  416e8c:	48 29 d8             	sub    %rbx,%rax
  416e8f:	48 c1 f8 02          	sar    $0x2,%rax
  416e93:	48 0f af c2          	imul   %rdx,%rax
      if (this->capacity() < __n)
  416e97:	48 39 c6             	cmp    %rax,%rsi
  416e9a:	77 14                	ja     416eb0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0x70>
    }
  416e9c:	48 83 c4 18          	add    $0x18,%rsp
  416ea0:	5b                   	pop    %rbx
  416ea1:	5d                   	pop    %rbp
  416ea2:	41 5c                	pop    %r12
  416ea4:	41 5d                	pop    %r13
  416ea6:	41 5e                	pop    %r14
  416ea8:	41 5f                	pop    %r15
  416eaa:	c3                   	retq   
  416eab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416eb0:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  416eb4:	48 89 e8             	mov    %rbp,%rax
  416eb7:	48 29 d8             	sub    %rbx,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  416eba:	48 85 f6             	test   %rsi,%rsi
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416ebd:	48 89 04 24          	mov    %rax,(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  416ec1:	0f 84 95 00 00 00    	je     416f5c <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0x11c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  416ec7:	4c 8d 34 b6          	lea    (%rsi,%rsi,4),%r14
  416ecb:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  416ed2:	ff ff ff 
  416ed5:	4d 89 e7             	mov    %r12,%r15
  416ed8:	4c 01 e0             	add    %r12,%rax
  416edb:	49 c1 e6 02          	shl    $0x2,%r14
  416edf:	4c 89 f7             	mov    %r14,%rdi
  416ee2:	ff d0                	callq  *%rax
  416ee4:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  416ee8:	48 39 eb             	cmp    %rbp,%rbx
  416eeb:	48 89 c2             	mov    %rax,%rdx
  416eee:	74 26                	je     416f16 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xd6>
  416ef0:	48 85 d2             	test   %rdx,%rdx
  416ef3:	74 14                	je     416f09 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xc9>
  416ef5:	48 8b 0b             	mov    (%rbx),%rcx
  416ef8:	48 89 0a             	mov    %rcx,(%rdx)
  416efb:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
  416eff:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  416f03:	8b 4b 10             	mov    0x10(%rbx),%ecx
  416f06:	89 4a 10             	mov    %ecx,0x10(%rdx)
      { return _M_current; }

      move_iterator&
      operator++()
      {
	++_M_current;
  416f09:	48 83 c3 14          	add    $0x14,%rbx
  416f0d:	48 83 c2 14          	add    $0x14,%rdx
  416f11:	48 39 dd             	cmp    %rbx,%rbp
  416f14:	75 da                	jne    416ef0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xb0>
	if (__p)
  416f16:	48 85 ff             	test   %rdi,%rdi
  416f19:	74 1c                	je     416f37 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xf7>
      { ::operator delete(__p); }
  416f1b:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  416f22:	ff ff ff 
  416f25:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  416f2a:	4d 89 e7             	mov    %r12,%r15
  416f2d:	4c 01 e2             	add    %r12,%rdx
  416f30:	ff d2                	callq  *%rdx
  416f32:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	  this->_M_impl._M_finish = __tmp + __old_size;
  416f37:	48 8b 2c 24          	mov    (%rsp),%rbp
	  this->_M_impl._M_start = __tmp;
  416f3b:	49 89 45 00          	mov    %rax,0x0(%r13)
	  this->_M_impl._M_finish = __tmp + __old_size;
  416f3f:	48 01 c5             	add    %rax,%rbp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  416f42:	4c 01 f0             	add    %r14,%rax
	  this->_M_impl._M_finish = __tmp + __old_size;
  416f45:	49 89 6d 08          	mov    %rbp,0x8(%r13)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  416f49:	49 89 45 10          	mov    %rax,0x10(%r13)
    }
  416f4d:	48 83 c4 18          	add    $0x18,%rsp
  416f51:	5b                   	pop    %rbx
  416f52:	5d                   	pop    %rbp
  416f53:	41 5c                	pop    %r12
  416f55:	41 5d                	pop    %r13
  416f57:	41 5e                	pop    %r14
  416f59:	41 5f                	pop    %r15
  416f5b:	c3                   	retq   
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  416f5c:	48 89 df             	mov    %rbx,%rdi
  416f5f:	31 c0                	xor    %eax,%eax
  416f61:	eb 85                	jmp    416ee8 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xa8>
	__throw_length_error(__N("vector::reserve"));
  416f63:	48 b8 b8 89 df ff ff 	movabs $0xffffffffffdf89b8,%rax
  416f6a:	ff ff ff 
  416f6d:	4d 89 e7             	mov    %r12,%r15
  416f70:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  416f74:	48 b8 a0 e5 dd ff ff 	movabs $0xffffffffffdde5a0,%rax
  416f7b:	ff ff ff 
  416f7e:	4c 01 e0             	add    %r12,%rax
  416f81:	ff d0                	callq  *%rax
  416f83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  416f8a:	00 00 00 
  416f8d:	0f 1f 00             	nopl   (%rax)

0000000000416f90 <_ZN5boost15program_options5valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPNS0_11typed_valueIT_cEEPS9_>:
    value(T* v)
  416f90:	41 57                	push   %r15
  416f92:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 416f90 <_ZN5boost15program_options5valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPNS0_11typed_valueIT_cEEPS9_>
  416f99:	53                   	push   %rbx
  416f9a:	49 bb 70 40 21 00 00 	movabs $0x214070,%r11
  416fa1:	00 00 00 
        typed_value<T>* r = new typed_value<T>(v);
  416fa4:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  416fab:	ff ff ff 
    value(T* v)
  416fae:	48 89 fb             	mov    %rdi,%rbx
  416fb1:	4d 01 df             	add    %r11,%r15
  416fb4:	48 83 ec 08          	sub    $0x8,%rsp
        typed_value<T>* r = new typed_value<T>(v);
  416fb8:	bf b0 00 00 00       	mov    $0xb0,%edi
  416fbd:	4c 01 f8             	add    %r15,%rax
  416fc0:	ff d0                	callq  *%rax
          m_zero_tokens(false), m_required(false)
  416fc2:	48 ba f8 fa ff ff ff 	movabs $0xfffffffffffffaf8,%rdx
  416fc9:	ff ff ff 
  416fcc:	48 89 58 10          	mov    %rbx,0x10(%rax)
      { _M_string_length = __length; }
  416fd0:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  416fd7:	00 
  416fd8:	4c 01 fa             	add    %r15,%rdx
      { __c1 = __c2; }
  416fdb:	c6 40 28 00          	movb   $0x0,0x28(%rax)
          : content(0)
  416fdf:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
  416fe6:	00 
  416fe7:	48 89 10             	mov    %rdx,(%rax)
  416fea:	48 83 c2 70          	add    $0x70,%rdx
  416fee:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
  416ff5:	00 
  416ff6:	48 89 50 08          	mov    %rdx,0x8(%rax)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  416ffa:	48 8d 50 28          	lea    0x28(%rax),%rdx
  416ffe:	c6 40 50 00          	movb   $0x0,0x50(%rax)
  417002:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
  417009:	00 
      { _M_string_length = __length; }
  41700a:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  417011:	00 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  417012:	48 89 50 18          	mov    %rdx,0x18(%rax)
  417016:	48 8d 50 50          	lea    0x50(%rax),%rdx
  41701a:	c6 40 78 00          	movb   $0x0,0x78(%rax)
  41701e:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%rax)
  417025:	c6 80 89 00 00 00 00 	movb   $0x0,0x89(%rax)
  41702c:	48 89 50 40          	mov    %rdx,0x40(%rax)
  417030:	48 8d 50 78          	lea    0x78(%rax),%rdx
  417034:	c6 80 8a 00 00 00 00 	movb   $0x0,0x8a(%rax)
  41703b:	c6 80 8b 00 00 00 00 	movb   $0x0,0x8b(%rax)
  417042:	c6 80 8c 00 00 00 00 	movb   $0x0,0x8c(%rax)
  417049:	48 89 50 68          	mov    %rdx,0x68(%rax)
  function_base() : vtable(0) { }
  41704d:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
  417054:	00 00 00 00 

        return r;        
    }
  417058:	48 83 c4 08          	add    $0x8,%rsp
  41705c:	5b                   	pop    %rbx
  41705d:	41 5f                	pop    %r15
  41705f:	c3                   	retq   

0000000000417060 <_ZN5boost15program_options6detail7cmdlineD1Ev>:
        line parsing. In addition, it's possible to install additional parser
        which will process custom option styles.

        @todo mininal match length for guessing?
    */
    class BOOST_PROGRAM_OPTIONS_DECL cmdline {
  417060:	55                   	push   %rbp
  417061:	53                   	push   %rbx
  417062:	48 8d 2d f7 ff ff ff 	lea    -0x9(%rip),%rbp        # 417060 <_ZN5boost15program_options6detail7cmdlineD1Ev>
  417069:	49 bb a0 3f 21 00 00 	movabs $0x213fa0,%r11
  417070:	00 00 00 
  417073:	48 89 fb             	mov    %rdi,%rbx
  417076:	48 83 ec 08          	sub    $0x8,%rsp
      if (vtable) {
  41707a:	48 8b 47 50          	mov    0x50(%rdi),%rax
  41707e:	4c 01 dd             	add    %r11,%rbp
  417081:	48 85 c0             	test   %rax,%rax
  417084:	74 04                	je     41708a <_ZN5boost15program_options6detail7cmdlineD1Ev+0x2a>
        if (!this->has_trivial_copy_and_destroy())
  417086:	a8 01                	test   $0x1,%al
  417088:	74 46                	je     4170d0 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x70>
      if (vtable) {
  41708a:	48 8b 43 30          	mov    0x30(%rbx),%rax
  41708e:	48 85 c0             	test   %rax,%rax
  417091:	74 1e                	je     4170b1 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x51>
        if (!this->has_trivial_copy_and_destroy())
  417093:	a8 01                	test   $0x1,%al
  417095:	75 1a                	jne    4170b1 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x51>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  417097:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
          get_vtable()->clear(this->functor);
  41709b:	48 8d 7b 38          	lea    0x38(%rbx),%rdi
  41709f:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  4170a2:	48 85 c0             	test   %rax,%rax
  4170a5:	74 0a                	je     4170b1 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x51>
            base.manager(functor, functor, destroy_functor_tag);
  4170a7:	ba 02 00 00 00       	mov    $0x2,%edx
  4170ac:	48 89 fe             	mov    %rdi,%rsi
  4170af:	ff d0                	callq  *%rax
  4170b1:	48 83 c4 08          	add    $0x8,%rsp
  4170b5:	48 b8 a0 b8 de ff ff 	movabs $0xffffffffffdeb8a0,%rax
  4170bc:	ff ff ff 
  4170bf:	48 89 df             	mov    %rbx,%rdi
  4170c2:	48 01 e8             	add    %rbp,%rax
  4170c5:	5b                   	pop    %rbx
  4170c6:	5d                   	pop    %rbp
  4170c7:	ff e0                	jmpq   *%rax
  4170c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  4170d0:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  4170d4:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  4170d7:	48 85 c0             	test   %rax,%rax
  4170da:	74 ae                	je     41708a <_ZN5boost15program_options6detail7cmdlineD1Ev+0x2a>
          get_vtable()->clear(this->functor);
  4170dc:	48 8d 7f 58          	lea    0x58(%rdi),%rdi
            base.manager(functor, functor, destroy_functor_tag);
  4170e0:	ba 02 00 00 00       	mov    $0x2,%edx
  4170e5:	48 89 fe             	mov    %rdi,%rsi
  4170e8:	ff d0                	callq  *%rax
  4170ea:	eb 9e                	jmp    41708a <_ZN5boost15program_options6detail7cmdlineD1Ev+0x2a>
  4170ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004170f0 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  4170f0:	41 57                	push   %r15
  4170f2:	41 56                	push   %r14
  4170f4:	49 bb 10 3f 21 00 00 	movabs $0x213f10,%r11
  4170fb:	00 00 00 
  4170fe:	41 55                	push   %r13
  417100:	41 54                	push   %r12
  417102:	55                   	push   %rbp
  417103:	53                   	push   %rbx
  417104:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 4170f0 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev>
  41710b:	48 83 ec 18          	sub    $0x18,%rsp
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41710f:	4c 8b 6f 08          	mov    0x8(%rdi),%r13
  417113:	4c 8b 27             	mov    (%rdi),%r12
  417116:	4c 01 db             	add    %r11,%rbx
      ~vector() _GLIBCXX_NOEXCEPT
  417119:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	  for (; __first != __last; ++__first)
  41711e:	4d 39 e5             	cmp    %r12,%r13
  417121:	0f 84 ec 00 00 00    	je     417213 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x123>
  417127:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41712e:	00 00 
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  417130:	49 8b 6c 24 48       	mov    0x48(%r12),%rbp
  417135:	4d 8b 74 24 40       	mov    0x40(%r12),%r14
  41713a:	4c 39 f5             	cmp    %r14,%rbp
  41713d:	74 2d                	je     41716c <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x7c>
  41713f:	90                   	nop
  417140:	49 8b 3e             	mov    (%r14),%rdi
	if (!_M_is_local())
  417143:	49 8d 56 10          	lea    0x10(%r14),%rdx
  417147:	48 39 d7             	cmp    %rdx,%rdi
  41714a:	74 12                	je     41715e <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x6e>
  41714c:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  417153:	ff ff ff 
  417156:	49 89 df             	mov    %rbx,%r15
  417159:	48 01 da             	add    %rbx,%rdx
  41715c:	ff d2                	callq  *%rdx
  41715e:	49 83 c6 20          	add    $0x20,%r14
  417162:	4c 39 f5             	cmp    %r14,%rbp
  417165:	75 d9                	jne    417140 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x50>
  417167:	4d 8b 74 24 40       	mov    0x40(%r12),%r14
	if (__p)
  41716c:	4d 85 f6             	test   %r14,%r14
  41716f:	74 15                	je     417186 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x96>
  417171:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  417178:	ff ff ff 
  41717b:	4c 89 f7             	mov    %r14,%rdi
  41717e:	49 89 df             	mov    %rbx,%r15
  417181:	48 01 d8             	add    %rbx,%rax
  417184:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  417186:	49 8b 6c 24 30       	mov    0x30(%r12),%rbp
  41718b:	4d 8b 74 24 28       	mov    0x28(%r12),%r14
  417190:	4c 39 f5             	cmp    %r14,%rbp
  417193:	74 2f                	je     4171c4 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xd4>
  417195:	0f 1f 00             	nopl   (%rax)
  417198:	49 8b 3e             	mov    (%r14),%rdi
  41719b:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41719f:	48 39 d7             	cmp    %rdx,%rdi
  4171a2:	74 12                	je     4171b6 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xc6>
  4171a4:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  4171ab:	ff ff ff 
  4171ae:	49 89 df             	mov    %rbx,%r15
  4171b1:	48 01 da             	add    %rbx,%rdx
  4171b4:	ff d2                	callq  *%rdx
  4171b6:	49 83 c6 20          	add    $0x20,%r14
  4171ba:	4c 39 f5             	cmp    %r14,%rbp
  4171bd:	75 d9                	jne    417198 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xa8>
  4171bf:	4d 8b 74 24 28       	mov    0x28(%r12),%r14
	if (__p)
  4171c4:	4d 85 f6             	test   %r14,%r14
  4171c7:	74 15                	je     4171de <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xee>
  4171c9:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4171d0:	ff ff ff 
  4171d3:	4c 89 f7             	mov    %r14,%rdi
  4171d6:	49 89 df             	mov    %rbx,%r15
  4171d9:	48 01 d8             	add    %rbx,%rax
  4171dc:	ff d0                	callq  *%rax
  4171de:	49 8b 3c 24          	mov    (%r12),%rdi
  4171e2:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  4171e7:	48 39 c7             	cmp    %rax,%rdi
  4171ea:	74 12                	je     4171fe <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x10e>
  4171ec:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4171f3:	ff ff ff 
  4171f6:	49 89 df             	mov    %rbx,%r15
  4171f9:	48 01 d8             	add    %rbx,%rax
  4171fc:	ff d0                	callq  *%rax
  4171fe:	49 83 c4 60          	add    $0x60,%r12
  417202:	4d 39 e5             	cmp    %r12,%r13
  417205:	0f 85 25 ff ff ff    	jne    417130 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x40>
  41720b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  417210:	4c 8b 20             	mov    (%rax),%r12
  417213:	4d 85 e4             	test   %r12,%r12
  417216:	74 20                	je     417238 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x148>
		      _M_get_Tp_allocator()); }
  417218:	48 83 c4 18          	add    $0x18,%rsp
  41721c:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  417223:	ff ff ff 
  417226:	4c 89 e7             	mov    %r12,%rdi
  417229:	48 01 d8             	add    %rbx,%rax
  41722c:	5b                   	pop    %rbx
  41722d:	5d                   	pop    %rbp
  41722e:	41 5c                	pop    %r12
  417230:	41 5d                	pop    %r13
  417232:	41 5e                	pop    %r14
  417234:	41 5f                	pop    %r15
  417236:	ff e0                	jmpq   *%rax
  417238:	48 83 c4 18          	add    $0x18,%rsp
  41723c:	5b                   	pop    %rbx
  41723d:	5d                   	pop    %rbp
  41723e:	41 5c                	pop    %r12
  417240:	41 5d                	pop    %r13
  417242:	41 5e                	pop    %r14
  417244:	41 5f                	pop    %r15
  417246:	c3                   	retq   
  417247:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41724e:	00 00 

0000000000417250 <_ZNK4YAML4Node2asIiEEKT_v>:
inline const T Node::as() const {
  417250:	41 57                	push   %r15
  417252:	41 54                	push   %r12
  417254:	49 bb b0 3d 21 00 00 	movabs $0x213db0,%r11
  41725b:	00 00 00 
  41725e:	55                   	push   %rbp
  41725f:	53                   	push   %rbx
  417260:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 417250 <_ZNK4YAML4Node2asIiEEKT_v>
  417267:	48 83 ec 18          	sub    $0x18,%rsp
  41726b:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41726e:	80 3f 00             	cmpb   $0x0,(%rdi)
  417271:	74 32                	je     4172a5 <_ZNK4YAML4Node2asIiEEKT_v+0x55>
    if (!node.m_pNode)
  417273:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
  417278:	0f 84 d8 00 00 00    	je     417356 <_ZNK4YAML4Node2asIiEEKT_v+0x106>
    if (convert<T>::decode(node, t))
  41727e:	48 b8 a0 b3 de ff ff 	movabs $0xffffffffffdeb3a0,%rax
  417285:	ff ff ff 
  417288:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  41728d:	48 01 d8             	add    %rbx,%rax
  417290:	ff d0                	callq  *%rax
  417292:	84 c0                	test   %al,%al
  417294:	74 69                	je     4172ff <_ZNK4YAML4Node2asIiEEKT_v+0xaf>
      return t;
  417296:	8b 44 24 0c          	mov    0xc(%rsp),%eax
}
  41729a:	48 83 c4 18          	add    $0x18,%rsp
  41729e:	5b                   	pop    %rbx
  41729f:	5d                   	pop    %rbp
  4172a0:	41 5c                	pop    %r12
  4172a2:	41 5f                	pop    %r15
  4172a4:	c3                   	retq   
    throw InvalidNode();
  4172a5:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  4172ac:	ff ff ff 
  4172af:	bf 40 00 00 00       	mov    $0x40,%edi
  4172b4:	49 89 df             	mov    %rbx,%r15
  4172b7:	48 01 d8             	add    %rbx,%rax
  4172ba:	ff d0                	callq  *%rax
  4172bc:	48 89 c5             	mov    %rax,%rbp
  4172bf:	48 89 c7             	mov    %rax,%rdi
  4172c2:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  4172c9:	ff ff ff 
  4172cc:	48 01 d8             	add    %rbx,%rax
  4172cf:	ff d0                	callq  *%rax
  4172d1:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  4172d8:	ff ff ff 
  4172db:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4172df:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  4172e6:	ff ff ff 
      throw TypedBadConversion<T>();
  4172e9:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  4172ed:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  4172f4:	ff ff ff 
  4172f7:	48 89 ef             	mov    %rbp,%rdi
  4172fa:	48 01 d8             	add    %rbx,%rax
  4172fd:	ff d0                	callq  *%rax
    throw TypedBadConversion<T>();
  4172ff:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  417306:	ff ff ff 
  417309:	bf 40 00 00 00       	mov    $0x40,%edi
  41730e:	49 89 df             	mov    %rbx,%r15
  417311:	48 01 d8             	add    %rbx,%rax
  417314:	ff d0                	callq  *%rax
  417316:	48 89 c5             	mov    %rax,%rbp
  TypedBadConversion() : BadConversion() {}
  417319:	48 89 c7             	mov    %rax,%rdi
  41731c:	48 b8 80 ae de ff ff 	movabs $0xffffffffffdeae80,%rax
  417323:	ff ff ff 
  417326:	48 01 d8             	add    %rbx,%rax
  417329:	ff d0                	callq  *%rax
  41732b:	48 b8 28 fc ff ff ff 	movabs $0xfffffffffffffc28,%rax
  417332:	ff ff ff 
  417335:	48 01 d8             	add    %rbx,%rax
  417338:	48 89 45 00          	mov    %rax,0x0(%rbp)
      throw TypedBadConversion<T>();
  41733c:	48 b8 30 94 de ff ff 	movabs $0xffffffffffde9430,%rax
  417343:	ff ff ff 
  417346:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41734a:	48 b8 18 f8 ff ff ff 	movabs $0xfffffffffffff818,%rax
  417351:	ff ff ff 
  417354:	eb 93                	jmp    4172e9 <_ZNK4YAML4Node2asIiEEKT_v+0x99>
  417356:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41735d:	ff ff ff 
  417360:	bf 40 00 00 00       	mov    $0x40,%edi
  417365:	49 89 df             	mov    %rbx,%r15
  417368:	48 01 d8             	add    %rbx,%rax
  41736b:	ff d0                	callq  *%rax
  41736d:	48 89 c5             	mov    %rax,%rbp
  417370:	48 89 c7             	mov    %rax,%rdi
  417373:	48 b8 80 ae de ff ff 	movabs $0xffffffffffdeae80,%rax
  41737a:	ff ff ff 
  41737d:	48 01 d8             	add    %rbx,%rax
  417380:	ff d0                	callq  *%rax
  417382:	eb a7                	jmp    41732b <_ZNK4YAML4Node2asIiEEKT_v+0xdb>
    throw InvalidNode();
  417384:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41738b:	ff ff ff 
  41738e:	49 89 c4             	mov    %rax,%r12
  417391:	48 89 ef             	mov    %rbp,%rdi
  417394:	49 89 df             	mov    %rbx,%r15
  417397:	48 01 da             	add    %rbx,%rdx
  41739a:	ff d2                	callq  *%rdx
  41739c:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  4173a3:	ff ff ff 
  4173a6:	4c 89 e7             	mov    %r12,%rdi
  4173a9:	48 01 d8             	add    %rbx,%rax
  4173ac:	ff d0                	callq  *%rax
  4173ae:	eb d4                	jmp    417384 <_ZNK4YAML4Node2asIiEEKT_v+0x134>
  4173b0:	eb d2                	jmp    417384 <_ZNK4YAML4Node2asIiEEKT_v+0x134>
  4173b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4173b9:	00 00 00 
  4173bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004173c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  4173c0:	41 57                	push   %r15
  4173c2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 4173c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  4173c9:	41 56                	push   %r14
  4173cb:	49 bb 40 3c 21 00 00 	movabs $0x213c40,%r11
  4173d2:	00 00 00 
  4173d5:	41 55                	push   %r13
  4173d7:	41 54                	push   %r12
  4173d9:	55                   	push   %rbp
  4173da:	53                   	push   %rbx
  4173db:	4d 01 df             	add    %r11,%r15
  4173de:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  4173e5:	ff ff ff 
  4173e8:	48 b8 c0 c3 de ff ff 	movabs $0xffffffffffdec3c0,%rax
  4173ef:	ff ff ff 
  4173f2:	48 83 ec 08          	sub    $0x8,%rsp
  4173f6:	4c 01 fd             	add    %r15,%rbp
      while (__x != 0)
  4173f9:	48 85 f6             	test   %rsi,%rsi
	  _M_erase(_S_right(__x));
  4173fc:	4e 8d 2c 38          	lea    (%rax,%r15,1),%r13
      while (__x != 0)
  417400:	74 47                	je     417449 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x89>
  417402:	49 89 fe             	mov    %rdi,%r14
  417405:	48 89 f3             	mov    %rsi,%rbx
  417408:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41740f:	00 
	  _M_erase(_S_right(__x));
  417410:	4c 89 f7             	mov    %r14,%rdi
  417413:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  417417:	41 ff d5             	callq  *%r13
  41741a:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41741e:	48 8d 43 50          	lea    0x50(%rbx),%rax
  417422:	4c 8b 63 10          	mov    0x10(%rbx),%r12
	if (!_M_is_local())
  417426:	48 39 c7             	cmp    %rax,%rdi
  417429:	74 02                	je     41742d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6d>
  41742b:	ff d5                	callq  *%rbp
  41742d:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417431:	48 8d 43 30          	lea    0x30(%rbx),%rax
	if (!_M_is_local())
  417435:	48 39 c7             	cmp    %rax,%rdi
  417438:	74 02                	je     41743c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x7c>
  41743a:	ff d5                	callq  *%rbp
  41743c:	48 89 df             	mov    %rbx,%rdi
  41743f:	4c 89 e3             	mov    %r12,%rbx
  417442:	ff d5                	callq  *%rbp
      while (__x != 0)
  417444:	4d 85 e4             	test   %r12,%r12
  417447:	75 c7                	jne    417410 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x50>
    }
  417449:	48 83 c4 08          	add    $0x8,%rsp
  41744d:	5b                   	pop    %rbx
  41744e:	5d                   	pop    %rbp
  41744f:	41 5c                	pop    %r12
  417451:	41 5d                	pop    %r13
  417453:	41 5e                	pop    %r14
  417455:	41 5f                	pop    %r15
  417457:	c3                   	retq   
  417458:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41745f:	00 

0000000000417460 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  417460:	41 57                	push   %r15
  417462:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 417460 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
  417469:	41 56                	push   %r14
  41746b:	49 bb a0 3b 21 00 00 	movabs $0x213ba0,%r11
  417472:	00 00 00 
  417475:	41 55                	push   %r13
  417477:	41 54                	push   %r12
  417479:	55                   	push   %rbp
  41747a:	53                   	push   %rbx
  41747b:	4d 01 df             	add    %r11,%r15
  41747e:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  417485:	ff ff ff 
  417488:	48 b8 60 c4 de ff ff 	movabs $0xffffffffffdec460,%rax
  41748f:	ff ff ff 
  417492:	48 83 ec 08          	sub    $0x8,%rsp
  417496:	4c 01 fd             	add    %r15,%rbp
      while (__x != 0)
  417499:	48 85 f6             	test   %rsi,%rsi
	  _M_erase(_S_right(__x));
  41749c:	4e 8d 2c 38          	lea    (%rax,%r15,1),%r13
      while (__x != 0)
  4174a0:	74 56                	je     4174f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x98>
  4174a2:	49 89 fe             	mov    %rdi,%r14
  4174a5:	48 89 f3             	mov    %rsi,%rbx
  4174a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4174af:	00 
	  _M_erase(_S_right(__x));
  4174b0:	4c 89 f7             	mov    %r14,%rdi
  4174b3:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  4174b7:	41 ff d5             	callq  *%r13
  4174ba:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4174be:	48 8d 43 70          	lea    0x70(%rbx),%rax
  4174c2:	4c 8b 63 10          	mov    0x10(%rbx),%r12
	if (!_M_is_local())
  4174c6:	48 39 c7             	cmp    %rax,%rdi
  4174c9:	74 02                	je     4174cd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x6d>
  4174cb:	ff d5                	callq  *%rbp
  4174cd:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4174d1:	48 8d 43 50          	lea    0x50(%rbx),%rax
	if (!_M_is_local())
  4174d5:	48 39 c7             	cmp    %rax,%rdi
  4174d8:	74 02                	je     4174dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x7c>
  4174da:	ff d5                	callq  *%rbp
  4174dc:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4174e0:	48 8d 43 30          	lea    0x30(%rbx),%rax
	if (!_M_is_local())
  4174e4:	48 39 c7             	cmp    %rax,%rdi
  4174e7:	74 02                	je     4174eb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x8b>
  4174e9:	ff d5                	callq  *%rbp
  4174eb:	48 89 df             	mov    %rbx,%rdi
  4174ee:	4c 89 e3             	mov    %r12,%rbx
  4174f1:	ff d5                	callq  *%rbp
      while (__x != 0)
  4174f3:	4d 85 e4             	test   %r12,%r12
  4174f6:	75 b8                	jne    4174b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x50>
    }
  4174f8:	48 83 c4 08          	add    $0x8,%rsp
  4174fc:	5b                   	pop    %rbx
  4174fd:	5d                   	pop    %rbp
  4174fe:	41 5c                	pop    %r12
  417500:	41 5d                	pop    %r13
  417502:	41 5e                	pop    %r14
  417504:	41 5f                	pop    %r15
  417506:	c3                   	retq   
  417507:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41750e:	00 00 

0000000000417510 <_ZN5boost15program_options22error_with_option_nameD1Ev>:
        ~error_with_option_name() throw() {}
  417510:	41 57                	push   %r15
  417512:	41 56                	push   %r14
  417514:	49 bb f0 3a 21 00 00 	movabs $0x213af0,%r11
  41751b:	00 00 00 
  41751e:	41 55                	push   %r13
  417520:	41 54                	push   %r12
  417522:	48 b8 c0 ff ff ff ff 	movabs $0xffffffffffffffc0,%rax
  417529:	ff ff ff 
  41752c:	55                   	push   %rbp
  41752d:	53                   	push   %rbx
  41752e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 417510 <_ZN5boost15program_options22error_with_option_nameD1Ev>
  417535:	49 89 fd             	mov    %rdi,%r13
  417538:	4c 01 db             	add    %r11,%rbx
  41753b:	48 83 ec 18          	sub    $0x18,%rsp
  41753f:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  417543:	48 83 c0 10          	add    $0x10,%rax
  417547:	48 89 07             	mov    %rax,(%rdi)
  41754a:	48 8b bf 98 00 00 00 	mov    0x98(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417551:	49 8d 85 a8 00 00 00 	lea    0xa8(%r13),%rax
	if (!_M_is_local())
  417558:	48 39 c7             	cmp    %rax,%rdi
  41755b:	74 12                	je     41756f <_ZN5boost15program_options22error_with_option_nameD1Ev+0x5f>
  41755d:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  417564:	ff ff ff 
  417567:	49 89 df             	mov    %rbx,%r15
  41756a:	48 01 dd             	add    %rbx,%rbp
  41756d:	ff d5                	callq  *%rbp
  41756f:	49 8b 7d 78          	mov    0x78(%r13),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417573:	49 8d 85 88 00 00 00 	lea    0x88(%r13),%rax
	if (!_M_is_local())
  41757a:	48 39 c7             	cmp    %rax,%rdi
  41757d:	74 12                	je     417591 <_ZN5boost15program_options22error_with_option_nameD1Ev+0x81>
  41757f:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  417586:	ff ff ff 
  417589:	49 89 df             	mov    %rbx,%r15
  41758c:	48 01 dd             	add    %rbx,%rbp
  41758f:	ff d5                	callq  *%rbp
    class map
  417591:	49 8d 45 48          	lea    0x48(%r13),%rax
  417595:	4d 8b 75 58          	mov    0x58(%r13),%r14
  417599:	48 ba 60 c4 de ff ff 	movabs $0xffffffffffdec460,%rdx
  4175a0:	ff ff ff 
  4175a3:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  4175aa:	ff ff ff 
  4175ad:	48 89 04 24          	mov    %rax,(%rsp)
	  _M_erase(_S_right(__x));
  4175b1:	48 8d 04 1a          	lea    (%rdx,%rbx,1),%rax
  4175b5:	48 01 dd             	add    %rbx,%rbp
      while (__x != 0)
  4175b8:	4d 85 f6             	test   %r14,%r14
	  _M_erase(_S_right(__x));
  4175bb:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
      while (__x != 0)
  4175c0:	74 5f                	je     417621 <_ZN5boost15program_options22error_with_option_nameD1Ev+0x111>
  4175c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  _M_erase(_S_right(__x));
  4175c8:	48 8b 3c 24          	mov    (%rsp),%rdi
  4175cc:	49 8b 76 18          	mov    0x18(%r14),%rsi
  4175d0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4175d5:	ff d0                	callq  *%rax
  4175d7:	49 8b 7e 60          	mov    0x60(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4175db:	49 8d 56 70          	lea    0x70(%r14),%rdx
  4175df:	4d 8b 66 10          	mov    0x10(%r14),%r12
	if (!_M_is_local())
  4175e3:	48 39 d7             	cmp    %rdx,%rdi
  4175e6:	74 05                	je     4175ed <_ZN5boost15program_options22error_with_option_nameD1Ev+0xdd>
  4175e8:	49 89 df             	mov    %rbx,%r15
  4175eb:	ff d5                	callq  *%rbp
  4175ed:	49 8b 7e 40          	mov    0x40(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4175f1:	49 8d 56 50          	lea    0x50(%r14),%rdx
	if (!_M_is_local())
  4175f5:	48 39 d7             	cmp    %rdx,%rdi
  4175f8:	74 05                	je     4175ff <_ZN5boost15program_options22error_with_option_nameD1Ev+0xef>
  4175fa:	49 89 df             	mov    %rbx,%r15
  4175fd:	ff d5                	callq  *%rbp
  4175ff:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417603:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  417607:	48 39 d7             	cmp    %rdx,%rdi
  41760a:	74 05                	je     417611 <_ZN5boost15program_options22error_with_option_nameD1Ev+0x101>
  41760c:	49 89 df             	mov    %rbx,%r15
  41760f:	ff d5                	callq  *%rbp
  417611:	4c 89 f7             	mov    %r14,%rdi
  417614:	49 89 df             	mov    %rbx,%r15
  417617:	4d 89 e6             	mov    %r12,%r14
  41761a:	ff d5                	callq  *%rbp
      while (__x != 0)
  41761c:	4d 85 e4             	test   %r12,%r12
  41761f:	75 a7                	jne    4175c8 <_ZN5boost15program_options22error_with_option_nameD1Ev+0xb8>
  417621:	49 8d 45 18          	lea    0x18(%r13),%rax
  417625:	48 89 04 24          	mov    %rax,(%rsp)
  417629:	49 8b 45 28          	mov    0x28(%r13),%rax
  41762d:	48 85 c0             	test   %rax,%rax
  417630:	74 6d                	je     41769f <_ZN5boost15program_options22error_with_option_nameD1Ev+0x18f>
  417632:	48 ba c0 c3 de ff ff 	movabs $0xffffffffffdec3c0,%rdx
  417639:	ff ff ff 
  41763c:	49 89 c6             	mov    %rax,%r14
  41763f:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  417646:	ff ff ff 
	  _M_erase(_S_right(__x));
  417649:	48 8d 04 1a          	lea    (%rdx,%rbx,1),%rax
  41764d:	48 01 dd             	add    %rbx,%rbp
  417650:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  417655:	0f 1f 00             	nopl   (%rax)
  417658:	48 8b 3c 24          	mov    (%rsp),%rdi
  41765c:	49 8b 76 18          	mov    0x18(%r14),%rsi
  417660:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  417665:	ff d0                	callq  *%rax
  417667:	49 8b 7e 40          	mov    0x40(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41766b:	49 8d 56 50          	lea    0x50(%r14),%rdx
  41766f:	4d 8b 66 10          	mov    0x10(%r14),%r12
	if (!_M_is_local())
  417673:	48 39 d7             	cmp    %rdx,%rdi
  417676:	74 05                	je     41767d <_ZN5boost15program_options22error_with_option_nameD1Ev+0x16d>
  417678:	49 89 df             	mov    %rbx,%r15
  41767b:	ff d5                	callq  *%rbp
  41767d:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417681:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  417685:	48 39 d7             	cmp    %rdx,%rdi
  417688:	74 05                	je     41768f <_ZN5boost15program_options22error_with_option_nameD1Ev+0x17f>
  41768a:	49 89 df             	mov    %rbx,%r15
  41768d:	ff d5                	callq  *%rbp
  41768f:	4c 89 f7             	mov    %r14,%rdi
  417692:	49 89 df             	mov    %rbx,%r15
  417695:	4d 89 e6             	mov    %r12,%r14
  417698:	ff d5                	callq  *%rbp
      while (__x != 0)
  41769a:	4d 85 e4             	test   %r12,%r12
  41769d:	75 b9                	jne    417658 <_ZN5boost15program_options22error_with_option_nameD1Ev+0x148>
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  41769f:	48 b8 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rax
  4176a6:	ff ff ff 
  4176a9:	4c 89 ef             	mov    %r13,%rdi
  4176ac:	48 01 d8             	add    %rbx,%rax
  4176af:	49 89 45 00          	mov    %rax,0x0(%r13)
        ~error_with_option_name() throw() {}
  4176b3:	48 83 c4 18          	add    $0x18,%rsp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  4176b7:	48 b8 d0 ea dd ff ff 	movabs $0xffffffffffddead0,%rax
  4176be:	ff ff ff 
  4176c1:	48 01 d8             	add    %rbx,%rax
        ~error_with_option_name() throw() {}
  4176c4:	5b                   	pop    %rbx
  4176c5:	5d                   	pop    %rbp
  4176c6:	41 5c                	pop    %r12
  4176c8:	41 5d                	pop    %r13
  4176ca:	41 5e                	pop    %r14
  4176cc:	41 5f                	pop    %r15
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  4176ce:	ff e0                	jmpq   *%rax

00000000004176d0 <_ZN5boost15program_options22error_with_option_nameD0Ev>:
        ~error_with_option_name() throw() {}
  4176d0:	41 57                	push   %r15
  4176d2:	55                   	push   %rbp
  4176d3:	49 bb 30 39 21 00 00 	movabs $0x213930,%r11
  4176da:	00 00 00 
  4176dd:	53                   	push   %rbx
  4176de:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4176d0 <_ZN5boost15program_options22error_with_option_nameD0Ev>
  4176e5:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  4176ec:	ff ff ff 
  4176ef:	48 89 fd             	mov    %rdi,%rbp
  4176f2:	4c 01 db             	add    %r11,%rbx
  4176f5:	48 01 d8             	add    %rbx,%rax
  4176f8:	ff d0                	callq  *%rax
  4176fa:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  417701:	ff ff ff 
  417704:	48 89 ef             	mov    %rbp,%rdi
  417707:	be b8 00 00 00       	mov    $0xb8,%esi
  41770c:	48 01 d8             	add    %rbx,%rax
  41770f:	5b                   	pop    %rbx
  417710:	5d                   	pop    %rbp
  417711:	41 5f                	pop    %r15
  417713:	ff e0                	jmpq   *%rax
  417715:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41771c:	00 00 00 
  41771f:	90                   	nop

0000000000417720 <_ZN5boost15program_options16validation_errorD1Ev>:

        ~validation_error() throw() {}
  417720:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 417720 <_ZN5boost15program_options16validation_errorD1Ev>
  417727:	49 bb e0 38 21 00 00 	movabs $0x2138e0,%r11
  41772e:	00 00 00 
  417731:	48 ba 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rdx
  417738:	ff ff ff 
  41773b:	4c 01 d8             	add    %r11,%rax
  41773e:	48 01 c2             	add    %rax,%rdx
  417741:	48 89 17             	mov    %rdx,(%rdi)
  417744:	48 ba 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rdx
  41774b:	ff ff ff 
  41774e:	48 01 d0             	add    %rdx,%rax
  417751:	ff e0                	jmpq   *%rax
  417753:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41775a:	00 00 00 
  41775d:	0f 1f 00             	nopl   (%rax)

0000000000417760 <_ZN5boost15program_options16validation_errorD0Ev>:
  417760:	41 57                	push   %r15
  417762:	55                   	push   %rbp
  417763:	49 bb a0 38 21 00 00 	movabs $0x2138a0,%r11
  41776a:	00 00 00 
  41776d:	53                   	push   %rbx
  41776e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417760 <_ZN5boost15program_options16validation_errorD0Ev>
  417775:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  41777c:	ff ff ff 
  41777f:	48 89 fd             	mov    %rdi,%rbp
  417782:	4c 01 db             	add    %r11,%rbx
  417785:	48 01 d8             	add    %rbx,%rax
  417788:	48 89 07             	mov    %rax,(%rdi)
  41778b:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  417792:	ff ff ff 
  417795:	48 01 d8             	add    %rbx,%rax
  417798:	ff d0                	callq  *%rax
  41779a:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  4177a1:	ff ff ff 
  4177a4:	48 89 ef             	mov    %rbp,%rdi
  4177a7:	be c0 00 00 00       	mov    $0xc0,%esi
  4177ac:	48 01 d8             	add    %rbx,%rax
  4177af:	5b                   	pop    %rbx
  4177b0:	5d                   	pop    %rbp
  4177b1:	41 5f                	pop    %r15
  4177b3:	ff e0                	jmpq   *%rax
  4177b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4177bc:	00 00 00 
  4177bf:	90                   	nop

00000000004177c0 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev>:
            ~error_info_injector() throw()
  4177c0:	55                   	push   %rbp
  4177c1:	53                   	push   %rbx
  4177c2:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 4177c0 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev>
  4177c9:	49 bb 40 38 21 00 00 	movabs $0x213840,%r11
  4177d0:	00 00 00 
                }
  4177d3:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  4177da:	ff ff ff 
            ~error_info_injector() throw()
  4177dd:	48 89 fd             	mov    %rdi,%rbp
  4177e0:	4c 01 db             	add    %r11,%rbx
  4177e3:	48 83 ec 08          	sub    $0x8,%rsp
                }
  4177e7:	48 01 d8             	add    %rbx,%rax
  4177ea:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  4177ed:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  4177f4:	ff ff ff 
  4177f7:	48 01 d8             	add    %rbx,%rax
  4177fa:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417801:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417808:	48 85 ff             	test   %rdi,%rdi
  41780b:	74 06                	je     417813 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev+0x53>
  41780d:	48 8b 07             	mov    (%rdi),%rax
  417810:	ff 50 20             	callq  *0x20(%rax)
  417813:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  41781a:	ff ff ff 
  41781d:	48 89 ef             	mov    %rbp,%rdi
  417820:	48 01 d8             	add    %rbx,%rax
  417823:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417827:	48 83 c4 08          	add    $0x8,%rsp
  41782b:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  417832:	ff ff ff 
  417835:	48 01 d8             	add    %rbx,%rax
  417838:	5b                   	pop    %rbx
  417839:	5d                   	pop    %rbp
  41783a:	ff e0                	jmpq   *%rax
  41783c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000417840 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev>:
            ~error_info_injector() throw()
  417840:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417847:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417847 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev+0x7>
  41784e:	49 ba b9 37 21 00 00 	movabs $0x2137b9,%r10
  417855:	00 00 00 
  417858:	4d 01 d3             	add    %r10,%r11
  41785b:	49 ba c0 c7 de ff ff 	movabs $0xffffffffffdec7c0,%r10
  417862:	ff ff ff 
  417865:	4d 01 da             	add    %r11,%r10
  417868:	41 ff e2             	jmpq   *%r10
  41786b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417870 <_ZN5boost15program_options20invalid_option_valueD1Ev>:
        std::string get_template(kind_t kind);
        kind_t m_kind;
    };

    /** Class thrown if there is an invalid option value given */
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  417870:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 417870 <_ZN5boost15program_options20invalid_option_valueD1Ev>
  417877:	49 bb 90 37 21 00 00 	movabs $0x213790,%r11
  41787e:	00 00 00 
        ~validation_error() throw() {}
  417881:	48 ba 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rdx
  417888:	ff ff ff 
  41788b:	4c 01 d8             	add    %r11,%rax
  41788e:	48 01 c2             	add    %rax,%rdx
  417891:	48 89 17             	mov    %rdx,(%rdi)
  417894:	48 ba 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rdx
  41789b:	ff ff ff 
  41789e:	48 01 d0             	add    %rdx,%rax
  4178a1:	ff e0                	jmpq   *%rax
  4178a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4178aa:	00 00 00 
  4178ad:	0f 1f 00             	nopl   (%rax)

00000000004178b0 <_ZN5boost15program_options20invalid_option_valueD0Ev>:
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  4178b0:	41 57                	push   %r15
  4178b2:	55                   	push   %rbp
  4178b3:	49 bb 50 37 21 00 00 	movabs $0x213750,%r11
  4178ba:	00 00 00 
  4178bd:	53                   	push   %rbx
  4178be:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4178b0 <_ZN5boost15program_options20invalid_option_valueD0Ev>
        ~validation_error() throw() {}
  4178c5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4178cc:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  4178cf:	48 89 fd             	mov    %rdi,%rbp
  4178d2:	4c 01 db             	add    %r11,%rbx
        ~validation_error() throw() {}
  4178d5:	48 01 d8             	add    %rbx,%rax
  4178d8:	48 89 07             	mov    %rax,(%rdi)
  4178db:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  4178e2:	ff ff ff 
  4178e5:	48 01 d8             	add    %rbx,%rax
  4178e8:	ff d0                	callq  *%rax
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  4178ea:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  4178f1:	ff ff ff 
  4178f4:	48 89 ef             	mov    %rbp,%rdi
  4178f7:	be c0 00 00 00       	mov    $0xc0,%esi
  4178fc:	48 01 d8             	add    %rbx,%rax
  4178ff:	5b                   	pop    %rbx
  417900:	5d                   	pop    %rbp
  417901:	41 5f                	pop    %r15
  417903:	ff e0                	jmpq   *%rax
  417905:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41790c:	00 00 00 
  41790f:	90                   	nop

0000000000417910 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev>:
  417910:	55                   	push   %rbp
  417911:	53                   	push   %rbx
  417912:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 417910 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev>
  417919:	49 bb f0 36 21 00 00 	movabs $0x2136f0,%r11
  417920:	00 00 00 
                }
  417923:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  41792a:	ff ff ff 
            ~error_info_injector() throw()
  41792d:	48 89 fd             	mov    %rdi,%rbp
  417930:	4c 01 db             	add    %r11,%rbx
  417933:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417937:	48 01 d8             	add    %rbx,%rax
  41793a:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  41793d:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417944:	ff ff ff 
  417947:	48 01 d8             	add    %rbx,%rax
  41794a:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417951:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417958:	48 85 ff             	test   %rdi,%rdi
  41795b:	74 06                	je     417963 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev+0x53>
  41795d:	48 8b 07             	mov    (%rdi),%rax
  417960:	ff 50 20             	callq  *0x20(%rax)
        ~validation_error() throw() {}
  417963:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  41796a:	ff ff ff 
  41796d:	48 89 ef             	mov    %rbp,%rdi
  417970:	48 01 d8             	add    %rbx,%rax
  417973:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417977:	48 83 c4 08          	add    $0x8,%rsp
  41797b:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  417982:	ff ff ff 
  417985:	48 01 d8             	add    %rbx,%rax
  417988:	5b                   	pop    %rbx
  417989:	5d                   	pop    %rbp
  41798a:	ff e0                	jmpq   *%rax
  41798c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000417990 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev>:
            ~error_info_injector() throw()
  417990:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417997:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417997 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev+0x7>
  41799e:	49 ba 69 36 21 00 00 	movabs $0x213669,%r10
  4179a5:	00 00 00 
  4179a8:	4d 01 d3             	add    %r10,%r11
  4179ab:	49 ba 10 c9 de ff ff 	movabs $0xffffffffffdec910,%r10
  4179b2:	ff ff ff 
  4179b5:	4d 01 da             	add    %r11,%r10
  4179b8:	41 ff e2             	jmpq   *%r10
  4179bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004179c0 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev>:
  4179c0:	41 57                	push   %r15
  4179c2:	55                   	push   %rbp
  4179c3:	49 bb 40 36 21 00 00 	movabs $0x213640,%r11
  4179ca:	00 00 00 
  4179cd:	53                   	push   %rbx
  4179ce:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4179c0 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev>
                }
  4179d5:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  4179dc:	ff ff ff 
            ~error_info_injector() throw()
  4179df:	48 89 fd             	mov    %rdi,%rbp
  4179e2:	4c 01 db             	add    %r11,%rbx
                }
  4179e5:	48 01 d8             	add    %rbx,%rax
  4179e8:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  4179eb:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  4179f2:	ff ff ff 
  4179f5:	48 01 d8             	add    %rbx,%rax
  4179f8:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  4179ff:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417a06:	48 85 ff             	test   %rdi,%rdi
  417a09:	74 06                	je     417a11 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev+0x51>
  417a0b:	48 8b 07             	mov    (%rdi),%rax
  417a0e:	ff 50 20             	callq  *0x20(%rax)
  417a11:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417a18:	ff ff ff 
  417a1b:	48 89 ef             	mov    %rbp,%rdi
  417a1e:	48 01 d8             	add    %rbx,%rax
  417a21:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417a25:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  417a2c:	ff ff ff 
  417a2f:	48 01 d8             	add    %rbx,%rax
  417a32:	ff d0                	callq  *%rax
                }
  417a34:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  417a3b:	ff ff ff 
  417a3e:	48 89 ef             	mov    %rbp,%rdi
  417a41:	be e8 00 00 00       	mov    $0xe8,%esi
  417a46:	48 01 d8             	add    %rbx,%rax
  417a49:	5b                   	pop    %rbx
  417a4a:	5d                   	pop    %rbp
  417a4b:	41 5f                	pop    %r15
  417a4d:	ff e0                	jmpq   *%rax
  417a4f:	90                   	nop

0000000000417a50 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev>:
            ~error_info_injector() throw()
  417a50:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417a57:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417a57 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev+0x7>
  417a5e:	49 ba a9 35 21 00 00 	movabs $0x2135a9,%r10
  417a65:	00 00 00 
  417a68:	4d 01 d3             	add    %r10,%r11
  417a6b:	49 ba c0 c9 de ff ff 	movabs $0xffffffffffdec9c0,%r10
  417a72:	ff ff ff 
  417a75:	4d 01 da             	add    %r11,%r10
  417a78:	41 ff e2             	jmpq   *%r10
  417a7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417a80 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev>:
  417a80:	41 57                	push   %r15
  417a82:	55                   	push   %rbp
  417a83:	49 bb 80 35 21 00 00 	movabs $0x213580,%r11
  417a8a:	00 00 00 
  417a8d:	53                   	push   %rbx
  417a8e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417a80 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev>
                }
  417a95:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  417a9c:	ff ff ff 
            ~error_info_injector() throw()
  417a9f:	48 89 fd             	mov    %rdi,%rbp
  417aa2:	4c 01 db             	add    %r11,%rbx
                }
  417aa5:	48 01 d8             	add    %rbx,%rax
  417aa8:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417aab:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417ab2:	ff ff ff 
  417ab5:	48 01 d8             	add    %rbx,%rax
  417ab8:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417abf:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417ac6:	48 85 ff             	test   %rdi,%rdi
  417ac9:	74 06                	je     417ad1 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev+0x51>
  417acb:	48 8b 07             	mov    (%rdi),%rax
  417ace:	ff 50 20             	callq  *0x20(%rax)
  417ad1:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417ad8:	ff ff ff 
  417adb:	48 89 ef             	mov    %rbp,%rdi
  417ade:	48 01 d8             	add    %rbx,%rax
  417ae1:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417ae5:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  417aec:	ff ff ff 
  417aef:	48 01 d8             	add    %rbx,%rax
  417af2:	ff d0                	callq  *%rax
                }
  417af4:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  417afb:	ff ff ff 
  417afe:	48 89 ef             	mov    %rbp,%rdi
  417b01:	be e8 00 00 00       	mov    $0xe8,%esi
  417b06:	48 01 d8             	add    %rbx,%rax
  417b09:	5b                   	pop    %rbx
  417b0a:	5d                   	pop    %rbp
  417b0b:	41 5f                	pop    %r15
  417b0d:	ff e0                	jmpq   *%rax
  417b0f:	90                   	nop

0000000000417b10 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev>:
            ~error_info_injector() throw()
  417b10:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417b17:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417b17 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev+0x7>
  417b1e:	49 ba e9 34 21 00 00 	movabs $0x2134e9,%r10
  417b25:	00 00 00 
  417b28:	4d 01 d3             	add    %r10,%r11
  417b2b:	49 ba 80 ca de ff ff 	movabs $0xffffffffffdeca80,%r10
  417b32:	ff ff ff 
  417b35:	4d 01 da             	add    %r11,%r10
  417b38:	41 ff e2             	jmpq   *%r10
  417b3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417b40 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>:
            ~clone_impl() throw()
  417b40:	55                   	push   %rbp
  417b41:	53                   	push   %rbx
  417b42:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 417b40 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>
  417b49:	49 bb c0 34 21 00 00 	movabs $0x2134c0,%r11
  417b50:	00 00 00 
                }
  417b53:	48 b8 b0 f5 ff ff ff 	movabs $0xfffffffffffff5b0,%rax
  417b5a:	ff ff ff 
            ~clone_impl() throw()
  417b5d:	48 89 fd             	mov    %rdi,%rbp
  417b60:	4c 01 db             	add    %r11,%rbx
  417b63:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417b67:	48 01 d8             	add    %rbx,%rax
  417b6a:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417b71:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  417b78:	ff ff ff 
  417b7b:	48 01 d8             	add    %rbx,%rax
  417b7e:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417b81:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417b88:	ff ff ff 
  417b8b:	48 01 d8             	add    %rbx,%rax
  417b8e:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417b95:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417b9c:	48 85 ff             	test   %rdi,%rdi
  417b9f:	74 06                	je     417ba7 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev+0x67>
  417ba1:	48 8b 07             	mov    (%rdi),%rax
  417ba4:	ff 50 20             	callq  *0x20(%rax)
  417ba7:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417bae:	ff ff ff 
  417bb1:	48 89 ef             	mov    %rbp,%rdi
  417bb4:	48 01 d8             	add    %rbx,%rax
  417bb7:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417bbb:	48 83 c4 08          	add    $0x8,%rsp
  417bbf:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  417bc6:	ff ff ff 
  417bc9:	48 01 d8             	add    %rbx,%rax
  417bcc:	5b                   	pop    %rbx
  417bcd:	5d                   	pop    %rbp
  417bce:	ff e0                	jmpq   *%rax

0000000000417bd0 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>:
            ~clone_impl() throw()
  417bd0:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417bd7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417bd7 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev+0x7>
  417bde:	49 ba 29 34 21 00 00 	movabs $0x213429,%r10
  417be5:	00 00 00 
  417be8:	4d 01 d3             	add    %r10,%r11
  417beb:	49 ba 40 cb de ff ff 	movabs $0xffffffffffdecb40,%r10
  417bf2:	ff ff ff 
  417bf5:	4d 01 da             	add    %r11,%r10
  417bf8:	41 ff e2             	jmpq   *%r10
  417bfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417c00 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>:
  417c00:	4c 8b 17             	mov    (%rdi),%r10
  417c03:	49 03 7a d8          	add    -0x28(%r10),%rdi
  417c07:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417c07 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev+0x7>
  417c0e:	49 ba f9 33 21 00 00 	movabs $0x2133f9,%r10
  417c15:	00 00 00 
  417c18:	4d 01 d3             	add    %r10,%r11
  417c1b:	49 ba 40 cb de ff ff 	movabs $0xffffffffffdecb40,%r10
  417c22:	ff ff ff 
  417c25:	4d 01 da             	add    %r11,%r10
  417c28:	41 ff e2             	jmpq   *%r10
  417c2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417c30 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>:
  417c30:	55                   	push   %rbp
  417c31:	53                   	push   %rbx
  417c32:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 417c30 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>
  417c39:	49 bb d0 33 21 00 00 	movabs $0x2133d0,%r11
  417c40:	00 00 00 
                }
  417c43:	48 b8 a0 f4 ff ff ff 	movabs $0xfffffffffffff4a0,%rax
  417c4a:	ff ff ff 
            ~clone_impl() throw()
  417c4d:	48 89 fd             	mov    %rdi,%rbp
  417c50:	4c 01 db             	add    %r11,%rbx
  417c53:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417c57:	48 01 d8             	add    %rbx,%rax
  417c5a:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417c61:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  417c68:	ff ff ff 
  417c6b:	48 01 d8             	add    %rbx,%rax
  417c6e:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417c71:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417c78:	ff ff ff 
  417c7b:	48 01 d8             	add    %rbx,%rax
  417c7e:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417c85:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417c8c:	48 85 ff             	test   %rdi,%rdi
  417c8f:	74 06                	je     417c97 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev+0x67>
  417c91:	48 8b 07             	mov    (%rdi),%rax
  417c94:	ff 50 20             	callq  *0x20(%rax)
  417c97:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417c9e:	ff ff ff 
  417ca1:	48 89 ef             	mov    %rbp,%rdi
  417ca4:	48 01 d8             	add    %rbx,%rax
  417ca7:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417cab:	48 83 c4 08          	add    $0x8,%rsp
  417caf:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  417cb6:	ff ff ff 
  417cb9:	48 01 d8             	add    %rbx,%rax
  417cbc:	5b                   	pop    %rbx
  417cbd:	5d                   	pop    %rbp
  417cbe:	ff e0                	jmpq   *%rax

0000000000417cc0 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>:
            ~clone_impl() throw()
  417cc0:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417cc7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417cc7 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev+0x7>
  417cce:	49 ba 39 33 21 00 00 	movabs $0x213339,%r10
  417cd5:	00 00 00 
  417cd8:	4d 01 d3             	add    %r10,%r11
  417cdb:	49 ba 30 cc de ff ff 	movabs $0xffffffffffdecc30,%r10
  417ce2:	ff ff ff 
  417ce5:	4d 01 da             	add    %r11,%r10
  417ce8:	41 ff e2             	jmpq   *%r10
  417ceb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417cf0 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>:
  417cf0:	4c 8b 17             	mov    (%rdi),%r10
  417cf3:	49 03 7a d8          	add    -0x28(%r10),%rdi
  417cf7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417cf7 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev+0x7>
  417cfe:	49 ba 09 33 21 00 00 	movabs $0x213309,%r10
  417d05:	00 00 00 
  417d08:	4d 01 d3             	add    %r10,%r11
  417d0b:	49 ba 30 cc de ff ff 	movabs $0xffffffffffdecc30,%r10
  417d12:	ff ff ff 
  417d15:	4d 01 da             	add    %r11,%r10
  417d18:	41 ff e2             	jmpq   *%r10
  417d1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417d20 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>:
  417d20:	41 57                	push   %r15
  417d22:	55                   	push   %rbp
  417d23:	49 bb e0 32 21 00 00 	movabs $0x2132e0,%r11
  417d2a:	00 00 00 
  417d2d:	53                   	push   %rbx
  417d2e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417d20 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>
                }
  417d35:	48 b8 a0 f4 ff ff ff 	movabs $0xfffffffffffff4a0,%rax
  417d3c:	ff ff ff 
            ~clone_impl() throw()
  417d3f:	48 89 fd             	mov    %rdi,%rbp
  417d42:	4c 01 db             	add    %r11,%rbx
                }
  417d45:	48 01 d8             	add    %rbx,%rax
  417d48:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417d4f:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  417d56:	ff ff ff 
  417d59:	48 01 d8             	add    %rbx,%rax
  417d5c:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417d5f:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417d66:	ff ff ff 
  417d69:	48 01 d8             	add    %rbx,%rax
  417d6c:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417d73:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417d7a:	48 85 ff             	test   %rdi,%rdi
  417d7d:	74 06                	je     417d85 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev+0x65>
  417d7f:	48 8b 07             	mov    (%rdi),%rax
  417d82:	ff 50 20             	callq  *0x20(%rax)
  417d85:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417d8c:	ff ff ff 
  417d8f:	48 89 ef             	mov    %rbp,%rdi
  417d92:	48 01 d8             	add    %rbx,%rax
  417d95:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417d99:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  417da0:	ff ff ff 
  417da3:	48 01 d8             	add    %rbx,%rax
  417da6:	ff d0                	callq  *%rax
                }
  417da8:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  417daf:	ff ff ff 
  417db2:	48 89 ef             	mov    %rbp,%rdi
  417db5:	be f0 00 00 00       	mov    $0xf0,%esi
  417dba:	48 01 d8             	add    %rbx,%rax
  417dbd:	5b                   	pop    %rbx
  417dbe:	5d                   	pop    %rbp
  417dbf:	41 5f                	pop    %r15
  417dc1:	ff e0                	jmpq   *%rax
  417dc3:	0f 1f 00             	nopl   (%rax)
  417dc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  417dcd:	00 00 00 

0000000000417dd0 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>:
            ~clone_impl() throw()
  417dd0:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417dd7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417dd7 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev+0x7>
  417dde:	49 ba 29 32 21 00 00 	movabs $0x213229,%r10
  417de5:	00 00 00 
  417de8:	4d 01 d3             	add    %r10,%r11
  417deb:	49 ba 20 cd de ff ff 	movabs $0xffffffffffdecd20,%r10
  417df2:	ff ff ff 
  417df5:	4d 01 da             	add    %r11,%r10
  417df8:	41 ff e2             	jmpq   *%r10
  417dfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417e00 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>:
  417e00:	4c 8b 17             	mov    (%rdi),%r10
  417e03:	49 03 7a d8          	add    -0x28(%r10),%rdi
  417e07:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417e07 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev+0x7>
  417e0e:	49 ba f9 31 21 00 00 	movabs $0x2131f9,%r10
  417e15:	00 00 00 
  417e18:	4d 01 d3             	add    %r10,%r11
  417e1b:	49 ba 20 cd de ff ff 	movabs $0xffffffffffdecd20,%r10
  417e22:	ff ff ff 
  417e25:	4d 01 da             	add    %r11,%r10
  417e28:	41 ff e2             	jmpq   *%r10
  417e2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417e30 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>:
  417e30:	41 57                	push   %r15
  417e32:	55                   	push   %rbp
  417e33:	49 bb d0 31 21 00 00 	movabs $0x2131d0,%r11
  417e3a:	00 00 00 
  417e3d:	53                   	push   %rbx
  417e3e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417e30 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>
                }
  417e45:	48 b8 b0 f5 ff ff ff 	movabs $0xfffffffffffff5b0,%rax
  417e4c:	ff ff ff 
            ~clone_impl() throw()
  417e4f:	48 89 fd             	mov    %rdi,%rbp
  417e52:	4c 01 db             	add    %r11,%rbx
                }
  417e55:	48 01 d8             	add    %rbx,%rax
  417e58:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417e5f:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  417e66:	ff ff ff 
  417e69:	48 01 d8             	add    %rbx,%rax
  417e6c:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417e6f:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417e76:	ff ff ff 
  417e79:	48 01 d8             	add    %rbx,%rax
  417e7c:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417e83:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417e8a:	48 85 ff             	test   %rdi,%rdi
  417e8d:	74 06                	je     417e95 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev+0x65>
  417e8f:	48 8b 07             	mov    (%rdi),%rax
  417e92:	ff 50 20             	callq  *0x20(%rax)
  417e95:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417e9c:	ff ff ff 
  417e9f:	48 89 ef             	mov    %rbp,%rdi
  417ea2:	48 01 d8             	add    %rbx,%rax
  417ea5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417ea9:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  417eb0:	ff ff ff 
  417eb3:	48 01 d8             	add    %rbx,%rax
  417eb6:	ff d0                	callq  *%rax
                }
  417eb8:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  417ebf:	ff ff ff 
  417ec2:	48 89 ef             	mov    %rbp,%rdi
  417ec5:	be f0 00 00 00       	mov    $0xf0,%esi
  417eca:	48 01 d8             	add    %rbx,%rax
  417ecd:	5b                   	pop    %rbx
  417ece:	5d                   	pop    %rbp
  417ecf:	41 5f                	pop    %r15
  417ed1:	ff e0                	jmpq   *%rax
  417ed3:	0f 1f 00             	nopl   (%rax)
  417ed6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  417edd:	00 00 00 

0000000000417ee0 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>:
            ~clone_impl() throw()
  417ee0:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417ee7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417ee7 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev+0x7>
  417eee:	49 ba 19 31 21 00 00 	movabs $0x213119,%r10
  417ef5:	00 00 00 
  417ef8:	4d 01 d3             	add    %r10,%r11
  417efb:	49 ba 30 ce de ff ff 	movabs $0xffffffffffdece30,%r10
  417f02:	ff ff ff 
  417f05:	4d 01 da             	add    %r11,%r10
  417f08:	41 ff e2             	jmpq   *%r10
  417f0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417f10 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>:
  417f10:	4c 8b 17             	mov    (%rdi),%r10
  417f13:	49 03 7a d8          	add    -0x28(%r10),%rdi
  417f17:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417f17 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev+0x7>
  417f1e:	49 ba e9 30 21 00 00 	movabs $0x2130e9,%r10
  417f25:	00 00 00 
  417f28:	4d 01 d3             	add    %r10,%r11
  417f2b:	49 ba 30 ce de ff ff 	movabs $0xffffffffffdece30,%r10
  417f32:	ff ff ff 
  417f35:	4d 01 da             	add    %r11,%r10
  417f38:	41 ff e2             	jmpq   *%r10
  417f3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417f40 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  417f40:	41 57                	push   %r15
  417f42:	41 56                	push   %r14
  417f44:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 417f40 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
  417f4b:	41 55                	push   %r13
  417f4d:	41 54                	push   %r12
  417f4f:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  417f56:	ff ff ff 
  417f59:	55                   	push   %rbp
  417f5a:	53                   	push   %rbx
  417f5b:	49 bb c0 30 21 00 00 	movabs $0x2130c0,%r11
  417f62:	00 00 00 
  417f65:	4d 01 df             	add    %r11,%r15
  417f68:	48 83 ec 68          	sub    $0x68,%rsp
      while (__x != 0)
  417f6c:	48 85 f6             	test   %rsi,%rsi
  417f6f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  417f74:	48 b8 40 cf de ff ff 	movabs $0xffffffffffdecf40,%rax
  417f7b:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  417f7e:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
	  _M_erase(_S_right(__x));
  417f83:	4e 8d 34 38          	lea    (%rax,%r15,1),%r14
      while (__x != 0)
  417f87:	0f 84 12 03 00 00    	je     41829f <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x35f>
  417f8d:	4c 89 f0             	mov    %r14,%rax
  417f90:	49 89 fe             	mov    %rdi,%r14
  417f93:	49 89 c5             	mov    %rax,%r13
  417f96:	48 89 f0             	mov    %rsi,%rax
  417f99:	48 8b 40 18          	mov    0x18(%rax),%rax
  417f9d:	48 85 c0             	test   %rax,%rax
  417fa0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  417fa5:	0f 84 b7 02 00 00    	je     418262 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x322>
  417fab:	48 8b 40 18          	mov    0x18(%rax),%rax
  417faf:	48 85 c0             	test   %rax,%rax
  417fb2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  417fb7:	0f 84 68 02 00 00    	je     418225 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2e5>
  417fbd:	48 8b 40 18          	mov    0x18(%rax),%rax
  417fc1:	48 85 c0             	test   %rax,%rax
  417fc4:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  417fc9:	0f 84 19 02 00 00    	je     4181e8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2a8>
  417fcf:	48 8b 40 18          	mov    0x18(%rax),%rax
  417fd3:	48 85 c0             	test   %rax,%rax
  417fd6:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  417fdb:	0f 84 ca 01 00 00    	je     4181ab <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x26b>
  417fe1:	48 8b 40 18          	mov    0x18(%rax),%rax
  417fe5:	48 85 c0             	test   %rax,%rax
  417fe8:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  417fed:	0f 84 7b 01 00 00    	je     41816e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x22e>
  417ff3:	48 8b 40 18          	mov    0x18(%rax),%rax
  417ff7:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  417ffc:	48 85 c0             	test   %rax,%rax
  417fff:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  418004:	4a 8d 2c 39          	lea    (%rcx,%r15,1),%rbp
  418008:	0f 84 23 01 00 00    	je     418131 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1f1>
  41800e:	48 8b 40 18          	mov    0x18(%rax),%rax
  418012:	48 89 c1             	mov    %rax,%rcx
  418015:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41801a:	48 b8 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rax
  418021:	ff ff ff 
  418024:	4c 01 f8             	add    %r15,%rax
  418027:	48 85 c9             	test   %rcx,%rcx
  41802a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41802f:	0f 84 c5 00 00 00    	je     4180fa <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1ba>
  418035:	0f 1f 00             	nopl   (%rax)
  418038:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41803d:	4c 8b 60 18          	mov    0x18(%rax),%r12
  418041:	4d 85 e4             	test   %r12,%r12
  418044:	75 17                	jne    41805d <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x11d>
  418046:	e9 82 00 00 00       	jmpq   4180cd <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x18d>
  41804b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  418050:	4c 89 e7             	mov    %r12,%rdi
  418053:	49 89 dc             	mov    %rbx,%r12
  418056:	ff d5                	callq  *%rbp
  418058:	48 85 db             	test   %rbx,%rbx
  41805b:	74 6b                	je     4180c8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x188>
	  _M_erase(_S_right(__x));
  41805d:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
  418062:	4c 89 f7             	mov    %r14,%rdi
  418065:	41 ff d5             	callq  *%r13
  418068:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  41806d:	49 8b 5c 24 10       	mov    0x10(%r12),%rbx
  418072:	48 85 c0             	test   %rax,%rax
  418075:	74 d9                	je     418050 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
        if( atomic_decrement( &use_count_ ) == 1 )
  418077:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  41807c:	75 d2                	jne    418050 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
            dispose();
  41807e:	48 8b 10             	mov    (%rax),%rdx
  418081:	48 89 c7             	mov    %rax,%rdi
  418084:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  418089:	ff 52 10             	callq  *0x10(%rdx)
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_sub(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }
  41808c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  418091:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  418096:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41809b:	83 fa 01             	cmp    $0x1,%edx
  41809e:	75 b0                	jne    418050 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
            destroy();
  4180a0:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  4180a3:	48 89 c7             	mov    %rax,%rdi
            destroy();
  4180a6:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  4180aa:	48 3b 4c 24 18       	cmp    0x18(%rsp),%rcx
  4180af:	0f 85 3a 02 00 00    	jne    4182ef <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3af>
        delete this;
  4180b5:	ff 52 08             	callq  *0x8(%rdx)
  4180b8:	4c 89 e7             	mov    %r12,%rdi
  4180bb:	49 89 dc             	mov    %rbx,%r12
  4180be:	ff d5                	callq  *%rbp
      while (__x != 0)
  4180c0:	48 85 db             	test   %rbx,%rbx
  4180c3:	75 98                	jne    41805d <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x11d>
  4180c5:	0f 1f 00             	nopl   (%rax)
  4180c8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4180cd:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4180d1:	48 8b 40 28          	mov    0x28(%rax),%rax
  4180d5:	48 85 c0             	test   %rax,%rax
  4180d8:	74 0b                	je     4180e5 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
        if( atomic_decrement( &use_count_ ) == 1 )
  4180da:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  4180df:	0f 84 cb 01 00 00    	je     4182b0 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x370>
  4180e5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4180ea:	ff d5                	callq  *%rbp
  4180ec:	48 85 db             	test   %rbx,%rbx
  4180ef:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  4180f4:	0f 85 3e ff ff ff    	jne    418038 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xf8>
  4180fa:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  4180ff:	4c 8b 60 28          	mov    0x28(%rax),%r12
  418103:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418107:	4d 85 e4             	test   %r12,%r12
  41810a:	74 0d                	je     418119 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
  41810c:	f0 41 83 6c 24 08 01 	lock subl $0x1,0x8(%r12)
  418113:	0f 84 dd 01 00 00    	je     4182f6 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3b6>
  418119:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41811e:	ff d5                	callq  *%rbp
  418120:	48 85 db             	test   %rbx,%rbx
  418123:	48 89 d8             	mov    %rbx,%rax
  418126:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  41812b:	0f 85 dd fe ff ff    	jne    41800e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xce>
  418131:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  418136:	48 8b 58 28          	mov    0x28(%rax),%rbx
  41813a:	48 8b 68 10          	mov    0x10(%rax),%rbp
  41813e:	48 85 db             	test   %rbx,%rbx
  418141:	74 0b                	je     41814e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
  418143:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  418148:	0f 84 eb 01 00 00    	je     418339 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3f9>
  41814e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  418153:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  418158:	4c 01 f8             	add    %r15,%rax
  41815b:	ff d0                	callq  *%rax
  41815d:	48 85 ed             	test   %rbp,%rbp
  418160:	48 89 e8             	mov    %rbp,%rax
  418163:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
  418168:	0f 85 85 fe ff ff    	jne    417ff3 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xb3>
  41816e:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  418173:	48 8b 58 28          	mov    0x28(%rax),%rbx
  418177:	48 8b 68 10          	mov    0x10(%rax),%rbp
  41817b:	48 85 db             	test   %rbx,%rbx
  41817e:	74 0b                	je     41818b <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
  418180:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  418185:	0f 84 f4 01 00 00    	je     41837f <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x43f>
  41818b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  418190:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  418195:	4c 01 f8             	add    %r15,%rax
  418198:	ff d0                	callq  *%rax
  41819a:	48 85 ed             	test   %rbp,%rbp
  41819d:	48 89 e8             	mov    %rbp,%rax
  4181a0:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  4181a5:	0f 85 36 fe ff ff    	jne    417fe1 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa1>
  4181ab:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  4181b0:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4181b4:	48 8b 68 10          	mov    0x10(%rax),%rbp
  4181b8:	48 85 db             	test   %rbx,%rbx
  4181bb:	74 0b                	je     4181c8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
  4181bd:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  4181c2:	0f 84 7b 02 00 00    	je     418443 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x503>
  4181c8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4181cd:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  4181d2:	4c 01 f8             	add    %r15,%rax
  4181d5:	ff d0                	callq  *%rax
  4181d7:	48 85 ed             	test   %rbp,%rbp
  4181da:	48 89 e8             	mov    %rbp,%rax
  4181dd:	48 89 6c 24 48       	mov    %rbp,0x48(%rsp)
  4181e2:	0f 85 e7 fd ff ff    	jne    417fcf <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x8f>
  4181e8:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  4181ed:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4181f1:	48 8b 68 10          	mov    0x10(%rax),%rbp
  4181f5:	48 85 db             	test   %rbx,%rbx
  4181f8:	74 0b                	je     418205 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
  4181fa:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  4181ff:	0f 84 76 02 00 00    	je     41847b <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x53b>
  418205:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41820a:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41820f:	4c 01 f8             	add    %r15,%rax
  418212:	ff d0                	callq  *%rax
  418214:	48 85 ed             	test   %rbp,%rbp
  418217:	48 89 e8             	mov    %rbp,%rax
  41821a:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  41821f:	0f 85 98 fd ff ff    	jne    417fbd <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x7d>
  418225:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41822a:	48 8b 58 28          	mov    0x28(%rax),%rbx
  41822e:	48 8b 68 10          	mov    0x10(%rax),%rbp
  418232:	48 85 db             	test   %rbx,%rbx
  418235:	74 0b                	je     418242 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
  418237:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  41823c:	0f 84 83 01 00 00    	je     4183c5 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x485>
  418242:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  418247:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41824c:	4c 01 f8             	add    %r15,%rax
  41824f:	ff d0                	callq  *%rax
  418251:	48 85 ed             	test   %rbp,%rbp
  418254:	48 89 e8             	mov    %rbp,%rax
  418257:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
  41825c:	0f 85 49 fd ff ff    	jne    417fab <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x6b>
  418262:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  418267:	48 8b 58 28          	mov    0x28(%rax),%rbx
  41826b:	48 8b 68 10          	mov    0x10(%rax),%rbp
  41826f:	48 85 db             	test   %rbx,%rbx
  418272:	74 0b                	je     41827f <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
  418274:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  418279:	0f 84 7e 01 00 00    	je     4183fd <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x4bd>
  41827f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  418284:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  418289:	4c 01 f8             	add    %r15,%rax
  41828c:	ff d0                	callq  *%rax
  41828e:	48 85 ed             	test   %rbp,%rbp
  418291:	48 89 e8             	mov    %rbp,%rax
  418294:	48 89 6c 24 58       	mov    %rbp,0x58(%rsp)
  418299:	0f 85 fa fc ff ff    	jne    417f99 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x59>
    }
  41829f:	48 83 c4 68          	add    $0x68,%rsp
  4182a3:	5b                   	pop    %rbx
  4182a4:	5d                   	pop    %rbp
  4182a5:	41 5c                	pop    %r12
  4182a7:	41 5d                	pop    %r13
  4182a9:	41 5e                	pop    %r14
  4182ab:	41 5f                	pop    %r15
  4182ad:	c3                   	retq   
  4182ae:	66 90                	xchg   %ax,%ax
            dispose();
  4182b0:	48 8b 10             	mov    (%rax),%rdx
  4182b3:	48 89 c7             	mov    %rax,%rdi
  4182b6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4182bb:	ff 52 10             	callq  *0x10(%rdx)
  4182be:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4182c3:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  4182c8:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4182cd:	83 fa 01             	cmp    $0x1,%edx
  4182d0:	0f 85 0f fe ff ff    	jne    4180e5 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
            destroy();
  4182d6:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  4182d9:	48 89 c7             	mov    %rax,%rdi
            destroy();
  4182dc:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  4182e0:	48 3b 4c 24 18       	cmp    0x18(%rsp),%rcx
  4182e5:	75 4b                	jne    418332 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3f2>
        delete this;
  4182e7:	ff 52 08             	callq  *0x8(%rdx)
  4182ea:	e9 f6 fd ff ff       	jmpq   4180e5 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
            destroy();
  4182ef:	ff d1                	callq  *%rcx
  4182f1:	e9 5a fd ff ff       	jmpq   418050 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
            dispose();
  4182f6:	49 8b 04 24          	mov    (%r12),%rax
  4182fa:	4c 89 e7             	mov    %r12,%rdi
  4182fd:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418300:	f0 41 83 6c 24 0c 01 	lock subl $0x1,0xc(%r12)
  418307:	0f 85 0c fe ff ff    	jne    418119 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
            destroy();
  41830d:	49 8b 14 24          	mov    (%r12),%rdx
  418311:	48 b9 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rcx
  418318:	ff ff ff 
        delete this;
  41831b:	4c 89 e7             	mov    %r12,%rdi
  41831e:	4c 01 f9             	add    %r15,%rcx
            destroy();
  418321:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418325:	48 39 c8             	cmp    %rcx,%rax
  418328:	75 4e                	jne    418378 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x438>
        delete this;
  41832a:	ff 52 08             	callq  *0x8(%rdx)
  41832d:	e9 e7 fd ff ff       	jmpq   418119 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
            destroy();
  418332:	ff d1                	callq  *%rcx
  418334:	e9 ac fd ff ff       	jmpq   4180e5 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
            dispose();
  418339:	48 8b 03             	mov    (%rbx),%rax
  41833c:	48 89 df             	mov    %rbx,%rdi
  41833f:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418342:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  418347:	0f 85 01 fe ff ff    	jne    41814e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
            destroy();
  41834d:	48 8b 13             	mov    (%rbx),%rdx
  418350:	48 b9 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rcx
  418357:	ff ff ff 
        delete this;
  41835a:	48 89 df             	mov    %rbx,%rdi
  41835d:	4c 01 f9             	add    %r15,%rcx
            destroy();
  418360:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418364:	48 39 c8             	cmp    %rcx,%rax
  418367:	75 4e                	jne    4183b7 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x477>
        delete this;
  418369:	ff 52 08             	callq  *0x8(%rdx)
  41836c:	e9 dd fd ff ff       	jmpq   41814e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
  418371:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            destroy();
  418378:	ff d0                	callq  *%rax
  41837a:	e9 9a fd ff ff       	jmpq   418119 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
            dispose();
  41837f:	48 8b 03             	mov    (%rbx),%rax
  418382:	48 89 df             	mov    %rbx,%rdi
  418385:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418388:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  41838d:	0f 85 f8 fd ff ff    	jne    41818b <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
            destroy();
  418393:	48 8b 13             	mov    (%rbx),%rdx
  418396:	48 b9 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rcx
  41839d:	ff ff ff 
        delete this;
  4183a0:	48 89 df             	mov    %rbx,%rdi
  4183a3:	4c 01 f9             	add    %r15,%rcx
            destroy();
  4183a6:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4183aa:	48 39 c8             	cmp    %rcx,%rax
  4183ad:	75 0f                	jne    4183be <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x47e>
        delete this;
  4183af:	ff 52 08             	callq  *0x8(%rdx)
  4183b2:	e9 d4 fd ff ff       	jmpq   41818b <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
            destroy();
  4183b7:	ff d0                	callq  *%rax
  4183b9:	e9 90 fd ff ff       	jmpq   41814e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
  4183be:	ff d0                	callq  *%rax
  4183c0:	e9 c6 fd ff ff       	jmpq   41818b <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
            dispose();
  4183c5:	48 8b 03             	mov    (%rbx),%rax
  4183c8:	48 89 df             	mov    %rbx,%rdi
  4183cb:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4183ce:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  4183d3:	0f 85 69 fe ff ff    	jne    418242 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
            destroy();
  4183d9:	48 8b 13             	mov    (%rbx),%rdx
  4183dc:	48 b9 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rcx
  4183e3:	ff ff ff 
        delete this;
  4183e6:	48 89 df             	mov    %rbx,%rdi
  4183e9:	4c 01 f9             	add    %r15,%rcx
            destroy();
  4183ec:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4183f0:	48 39 c8             	cmp    %rcx,%rax
  4183f3:	75 40                	jne    418435 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x4f5>
        delete this;
  4183f5:	ff 52 08             	callq  *0x8(%rdx)
  4183f8:	e9 45 fe ff ff       	jmpq   418242 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
            dispose();
  4183fd:	48 8b 03             	mov    (%rbx),%rax
  418400:	48 89 df             	mov    %rbx,%rdi
  418403:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418406:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  41840b:	0f 85 6e fe ff ff    	jne    41827f <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
            destroy();
  418411:	48 8b 13             	mov    (%rbx),%rdx
  418414:	48 b9 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rcx
  41841b:	ff ff ff 
        delete this;
  41841e:	48 89 df             	mov    %rbx,%rdi
  418421:	4c 01 f9             	add    %r15,%rcx
            destroy();
  418424:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418428:	48 39 c8             	cmp    %rcx,%rax
  41842b:	75 0f                	jne    41843c <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x4fc>
        delete this;
  41842d:	ff 52 08             	callq  *0x8(%rdx)
  418430:	e9 4a fe ff ff       	jmpq   41827f <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
            destroy();
  418435:	ff d0                	callq  *%rax
  418437:	e9 06 fe ff ff       	jmpq   418242 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
  41843c:	ff d0                	callq  *%rax
  41843e:	e9 3c fe ff ff       	jmpq   41827f <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
            dispose();
  418443:	48 8b 03             	mov    (%rbx),%rax
  418446:	48 89 df             	mov    %rbx,%rdi
  418449:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41844c:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  418451:	0f 85 71 fd ff ff    	jne    4181c8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
            destroy();
  418457:	48 8b 13             	mov    (%rbx),%rdx
  41845a:	48 b9 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rcx
  418461:	ff ff ff 
        delete this;
  418464:	48 89 df             	mov    %rbx,%rdi
  418467:	4c 01 f9             	add    %r15,%rcx
            destroy();
  41846a:	48 8b 42 18          	mov    0x18(%rdx),%rax
  41846e:	48 39 c8             	cmp    %rcx,%rax
  418471:	75 40                	jne    4184b3 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x573>
        delete this;
  418473:	ff 52 08             	callq  *0x8(%rdx)
  418476:	e9 4d fd ff ff       	jmpq   4181c8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
            dispose();
  41847b:	48 8b 03             	mov    (%rbx),%rax
  41847e:	48 89 df             	mov    %rbx,%rdi
  418481:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418484:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  418489:	0f 85 76 fd ff ff    	jne    418205 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
            destroy();
  41848f:	48 8b 13             	mov    (%rbx),%rdx
  418492:	48 b9 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rcx
  418499:	ff ff ff 
        delete this;
  41849c:	48 89 df             	mov    %rbx,%rdi
  41849f:	4c 01 f9             	add    %r15,%rcx
            destroy();
  4184a2:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4184a6:	48 39 c8             	cmp    %rcx,%rax
  4184a9:	75 0f                	jne    4184ba <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x57a>
        delete this;
  4184ab:	ff 52 08             	callq  *0x8(%rdx)
  4184ae:	e9 52 fd ff ff       	jmpq   418205 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
            destroy();
  4184b3:	ff d0                	callq  *%rax
  4184b5:	e9 0e fd ff ff       	jmpq   4181c8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
  4184ba:	ff d0                	callq  *%rax
  4184bc:	e9 44 fd ff ff       	jmpq   418205 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
  4184c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4184c8:	00 00 00 
  4184cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004184d0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv>:
    virtual void dispose() // nothrow
  4184d0:	41 57                	push   %r15
  4184d2:	41 56                	push   %r14
  4184d4:	49 bb 30 2b 21 00 00 	movabs $0x212b30,%r11
  4184db:	00 00 00 
  4184de:	41 55                	push   %r13
  4184e0:	41 54                	push   %r12
  4184e2:	55                   	push   %rbp
  4184e3:	53                   	push   %rbx
  4184e4:	48 8d 2d e5 ff ff ff 	lea    -0x1b(%rip),%rbp        # 4184d0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv>
  4184eb:	48 83 ec 18          	sub    $0x18,%rsp
        boost::checked_delete( px_ );
  4184ef:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  4184f3:	4c 01 dd             	add    %r11,%rbp
  4184f6:	4d 85 e4             	test   %r12,%r12
  4184f9:	0f 84 d1 00 00 00    	je     4185d0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x100>
  4184ff:	4d 8b 7c 24 10       	mov    0x10(%r12),%r15
      while (__x != 0)
  418504:	4d 85 ff             	test   %r15,%r15
  418507:	0f 84 9b 00 00 00    	je     4185a8 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0xd8>
	  _M_erase(_S_right(__x));
  41850d:	48 b8 40 cf de ff ff 	movabs $0xffffffffffdecf40,%rax
  418514:	ff ff ff 
  418517:	49 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r13
  41851e:	ff ff ff 
  418521:	4c 8d 34 28          	lea    (%rax,%rbp,1),%r14
  418525:	48 b8 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rax
  41852c:	ff ff ff 
  41852f:	49 01 ed             	add    %rbp,%r13
  418532:	48 01 e8             	add    %rbp,%rax
  418535:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41853a:	eb 15                	jmp    418551 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x81>
  41853c:	0f 1f 40 00          	nopl   0x0(%rax)
  418540:	4c 89 ff             	mov    %r15,%rdi
  418543:	49 89 ef             	mov    %rbp,%r15
  418546:	41 ff d5             	callq  *%r13
      while (__x != 0)
  418549:	48 85 db             	test   %rbx,%rbx
  41854c:	49 89 df             	mov    %rbx,%r15
  41854f:	74 57                	je     4185a8 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0xd8>
	  _M_erase(_S_right(__x));
  418551:	49 8b 77 18          	mov    0x18(%r15),%rsi
  418555:	4c 89 e7             	mov    %r12,%rdi
  418558:	41 ff d6             	callq  *%r14
  41855b:	49 8b 47 28          	mov    0x28(%r15),%rax
  41855f:	49 8b 5f 10          	mov    0x10(%r15),%rbx
  418563:	48 85 c0             	test   %rax,%rax
  418566:	74 d8                	je     418540 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
        if( atomic_decrement( &use_count_ ) == 1 )
  418568:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  41856d:	75 d1                	jne    418540 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
            dispose();
  41856f:	48 8b 10             	mov    (%rax),%rdx
  418572:	48 89 c7             	mov    %rax,%rdi
  418575:	48 89 04 24          	mov    %rax,(%rsp)
  418579:	ff 52 10             	callq  *0x10(%rdx)
  41857c:	48 8b 04 24          	mov    (%rsp),%rax
  418580:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  418585:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41858a:	83 fa 01             	cmp    $0x1,%edx
  41858d:	75 b1                	jne    418540 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
            destroy();
  41858f:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  418592:	48 89 c7             	mov    %rax,%rdi
            destroy();
  418595:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  418599:	48 3b 4c 24 08       	cmp    0x8(%rsp),%rcx
  41859e:	75 3f                	jne    4185df <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x10f>
        delete this;
  4185a0:	ff 52 08             	callq  *0x8(%rdx)
  4185a3:	eb 9b                	jmp    418540 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
  4185a5:	0f 1f 00             	nopl   (%rax)
    }
  4185a8:	48 83 c4 18          	add    $0x18,%rsp
  4185ac:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  4185b3:	ff ff ff 
  4185b6:	4c 89 e7             	mov    %r12,%rdi
  4185b9:	5b                   	pop    %rbx
  4185ba:	48 01 e8             	add    %rbp,%rax
  4185bd:	be 30 00 00 00       	mov    $0x30,%esi
  4185c2:	5d                   	pop    %rbp
  4185c3:	41 5c                	pop    %r12
  4185c5:	41 5d                	pop    %r13
  4185c7:	41 5e                	pop    %r14
  4185c9:	41 5f                	pop    %r15
  4185cb:	ff e0                	jmpq   *%rax
  4185cd:	0f 1f 00             	nopl   (%rax)
  4185d0:	48 83 c4 18          	add    $0x18,%rsp
  4185d4:	5b                   	pop    %rbx
  4185d5:	5d                   	pop    %rbp
  4185d6:	41 5c                	pop    %r12
  4185d8:	41 5d                	pop    %r13
  4185da:	41 5e                	pop    %r14
  4185dc:	41 5f                	pop    %r15
  4185de:	c3                   	retq   
            destroy();
  4185df:	ff d1                	callq  *%rcx
  4185e1:	e9 5a ff ff ff       	jmpq   418540 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
  4185e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4185ed:	00 00 00 

00000000004185f0 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  4185f0:	41 57                	push   %r15
  4185f2:	41 56                	push   %r14
  4185f4:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 4185f0 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
  4185fb:	41 55                	push   %r13
  4185fd:	41 54                	push   %r12
  4185ff:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  418606:	ff ff ff 
  418609:	55                   	push   %rbp
  41860a:	53                   	push   %rbx
  41860b:	49 bb 10 2a 21 00 00 	movabs $0x212a10,%r11
  418612:	00 00 00 
  418615:	4d 01 df             	add    %r11,%r15
  418618:	48 83 ec 58          	sub    $0x58,%rsp
      while (__x != 0)
  41861c:	48 85 f6             	test   %rsi,%rsi
  41861f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  418624:	48 b8 f0 d5 de ff ff 	movabs $0xffffffffffded5f0,%rax
  41862b:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41862e:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
	  _M_erase(_S_right(__x));
  418633:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
      while (__x != 0)
  418637:	0f 84 d3 01 00 00    	je     418810 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x220>
  41863d:	49 89 fd             	mov    %rdi,%r13
  418640:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  418645:	48 8b 40 18          	mov    0x18(%rax),%rax
  418649:	48 85 c0             	test   %rax,%rax
  41864c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  418651:	0f 84 95 01 00 00    	je     4187ec <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1fc>
  418657:	48 8b 40 18          	mov    0x18(%rax),%rax
  41865b:	48 85 c0             	test   %rax,%rax
  41865e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  418663:	0f 84 5c 01 00 00    	je     4187c5 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1d5>
  418669:	48 8b 40 18          	mov    0x18(%rax),%rax
  41866d:	48 85 c0             	test   %rax,%rax
  418670:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  418675:	0f 84 23 01 00 00    	je     41879e <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1ae>
  41867b:	48 8b 40 18          	mov    0x18(%rax),%rax
  41867f:	48 85 c0             	test   %rax,%rax
  418682:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  418687:	0f 84 ea 00 00 00    	je     418777 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x187>
  41868d:	48 8b 40 18          	mov    0x18(%rax),%rax
  418691:	48 85 c0             	test   %rax,%rax
  418694:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  418699:	0f 84 b1 00 00 00    	je     418750 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x160>
  41869f:	48 8b 40 18          	mov    0x18(%rax),%rax
  4186a3:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  4186a8:	48 85 c0             	test   %rax,%rax
  4186ab:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4186b0:	4a 8d 2c 3a          	lea    (%rdx,%r15,1),%rbp
  4186b4:	74 73                	je     418729 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x139>
  4186b6:	48 8b 40 18          	mov    0x18(%rax),%rax
  4186ba:	48 85 c0             	test   %rax,%rax
  4186bd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4186c2:	74 4a                	je     41870e <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x11e>
  4186c4:	0f 1f 40 00          	nopl   0x0(%rax)
  4186c8:	4c 8b 70 18          	mov    0x18(%rax),%r14
  4186cc:	4d 85 f6             	test   %r14,%r14
  4186cf:	74 27                	je     4186f8 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x108>
  4186d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  4186d8:	49 8b 76 18          	mov    0x18(%r14),%rsi
  4186dc:	4c 89 ef             	mov    %r13,%rdi
  4186df:	41 ff d4             	callq  *%r12
  4186e2:	49 8b 5e 10          	mov    0x10(%r14),%rbx
  4186e6:	4c 89 f7             	mov    %r14,%rdi
  4186e9:	ff d5                	callq  *%rbp
      while (__x != 0)
  4186eb:	48 85 db             	test   %rbx,%rbx
  4186ee:	49 89 de             	mov    %rbx,%r14
  4186f1:	75 e5                	jne    4186d8 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xe8>
  4186f3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4186f8:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4186fc:	48 89 c7             	mov    %rax,%rdi
  4186ff:	ff d5                	callq  *%rbp
  418701:	48 85 db             	test   %rbx,%rbx
  418704:	48 89 d8             	mov    %rbx,%rax
  418707:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  41870c:	75 ba                	jne    4186c8 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xd8>
  41870e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  418713:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418717:	48 89 c7             	mov    %rax,%rdi
  41871a:	ff d5                	callq  *%rbp
  41871c:	48 85 db             	test   %rbx,%rbx
  41871f:	48 89 d8             	mov    %rbx,%rax
  418722:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  418727:	75 8d                	jne    4186b6 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xc6>
  418729:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41872e:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418732:	48 89 c7             	mov    %rax,%rdi
  418735:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41873a:	4c 01 f8             	add    %r15,%rax
  41873d:	ff d0                	callq  *%rax
  41873f:	48 85 db             	test   %rbx,%rbx
  418742:	48 89 d8             	mov    %rbx,%rax
  418745:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  41874a:	0f 85 4f ff ff ff    	jne    41869f <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xaf>
  418750:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  418755:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418759:	48 89 c7             	mov    %rax,%rdi
  41875c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  418761:	4c 01 f8             	add    %r15,%rax
  418764:	ff d0                	callq  *%rax
  418766:	48 85 db             	test   %rbx,%rbx
  418769:	48 89 d8             	mov    %rbx,%rax
  41876c:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  418771:	0f 85 16 ff ff ff    	jne    41868d <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x9d>
  418777:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41877c:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418780:	48 89 c7             	mov    %rax,%rdi
  418783:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  418788:	4c 01 f8             	add    %r15,%rax
  41878b:	ff d0                	callq  *%rax
  41878d:	48 85 db             	test   %rbx,%rbx
  418790:	48 89 d8             	mov    %rbx,%rax
  418793:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  418798:	0f 85 dd fe ff ff    	jne    41867b <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x8b>
  41879e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4187a3:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4187a7:	48 89 c7             	mov    %rax,%rdi
  4187aa:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4187af:	4c 01 f8             	add    %r15,%rax
  4187b2:	ff d0                	callq  *%rax
  4187b4:	48 85 db             	test   %rbx,%rbx
  4187b7:	48 89 d8             	mov    %rbx,%rax
  4187ba:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  4187bf:	0f 85 a4 fe ff ff    	jne    418669 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x79>
  4187c5:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4187ca:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4187ce:	48 89 c7             	mov    %rax,%rdi
  4187d1:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4187d6:	4c 01 f8             	add    %r15,%rax
  4187d9:	ff d0                	callq  *%rax
  4187db:	48 85 db             	test   %rbx,%rbx
  4187de:	48 89 d8             	mov    %rbx,%rax
  4187e1:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  4187e6:	0f 85 6b fe ff ff    	jne    418657 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x67>
  4187ec:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  4187f1:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4187f5:	48 89 c7             	mov    %rax,%rdi
  4187f8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4187fd:	4c 01 f8             	add    %r15,%rax
  418800:	ff d0                	callq  *%rax
  418802:	48 85 db             	test   %rbx,%rbx
  418805:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  41880a:	0f 85 30 fe ff ff    	jne    418640 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x50>
    }
  418810:	48 83 c4 58          	add    $0x58,%rsp
  418814:	5b                   	pop    %rbx
  418815:	5d                   	pop    %rbp
  418816:	41 5c                	pop    %r12
  418818:	41 5d                	pop    %r13
  41881a:	41 5e                	pop    %r14
  41881c:	41 5f                	pop    %r15
  41881e:	c3                   	retq   
  41881f:	90                   	nop

0000000000418820 <_ZN4YAML6detail4node12mark_definedEv>:

  template <typename T>
  bool equals(const T& rhs, shared_memory_holder pMemory);
  bool equals(const char* rhs, shared_memory_holder pMemory);

  void mark_defined() {
  418820:	41 57                	push   %r15
  418822:	41 56                	push   %r14
  418824:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 418820 <_ZN4YAML6detail4node12mark_definedEv>
  41882b:	41 55                	push   %r13
  41882d:	41 54                	push   %r12
  41882f:	49 bb e0 27 21 00 00 	movabs $0x2127e0,%r11
  418836:	00 00 00 
  418839:	55                   	push   %rbp
  41883a:	53                   	push   %rbx
  41883b:	4d 01 df             	add    %r11,%r15
  41883e:	48 83 ec 18          	sub    $0x18,%rsp
  418842:	48 8b 07             	mov    (%rdi),%rax
  418845:	48 85 c0             	test   %rax,%rax
  418848:	0f 84 ea 00 00 00    	je     418938 <_ZN4YAML6detail4node12mark_definedEv+0x118>
  41884e:	49 89 fd             	mov    %rdi,%r13
  418851:	48 8b 38             	mov    (%rax),%rdi
  418854:	48 85 ff             	test   %rdi,%rdi
  418857:	0f 84 ea 00 00 00    	je     418947 <_ZN4YAML6detail4node12mark_definedEv+0x127>
    if (is_defined())
  41885d:	80 3f 00             	cmpb   $0x0,(%rdi)
  418860:	0f 85 c3 00 00 00    	jne    418929 <_ZN4YAML6detail4node12mark_definedEv+0x109>
  void mark_defined() { m_pData->mark_defined(); }
  418866:	48 b8 00 e6 dd ff ff 	movabs $0xffffffffffdde600,%rax
  41886d:	ff ff ff 
      { return const_iterator(&this->_M_impl._M_header); }
  418870:	49 8d 6d 18          	lea    0x18(%r13),%rbp
	_M_node = _Rb_tree_increment(_M_node);
  418874:	48 bb 40 e8 dd ff ff 	movabs $0xffffffffffdde840,%rbx
  41887b:	ff ff ff 
  41887e:	4c 01 f8             	add    %r15,%rax
  418881:	4c 01 fb             	add    %r15,%rbx
  418884:	ff d0                	callq  *%rax
      return;

    m_pRef->mark_defined();
    for (nodes::iterator it = m_dependencies.begin();
  418886:	4d 8b 75 28          	mov    0x28(%r13),%r14
  41888a:	48 b8 20 d8 de ff ff 	movabs $0xffffffffffded820,%rax
  418891:	ff ff ff 
         it != m_dependencies.end(); ++it)
      (*it)->mark_defined();
  418894:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
    for (nodes::iterator it = m_dependencies.begin();
  418898:	49 39 ee             	cmp    %rbp,%r14
  41889b:	74 17                	je     4188b4 <_ZN4YAML6detail4node12mark_definedEv+0x94>
  41889d:	0f 1f 00             	nopl   (%rax)
      (*it)->mark_defined();
  4188a0:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  4188a4:	41 ff d4             	callq  *%r12
  4188a7:	4c 89 f7             	mov    %r14,%rdi
  4188aa:	ff d3                	callq  *%rbx
    for (nodes::iterator it = m_dependencies.begin();
  4188ac:	48 39 e8             	cmp    %rbp,%rax
  4188af:	49 89 c6             	mov    %rax,%r14
  4188b2:	75 ec                	jne    4188a0 <_ZN4YAML6detail4node12mark_definedEv+0x80>
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
      { _M_t.clear(); }
  4188b4:	49 8d 45 10          	lea    0x10(%r13),%rax
  4188b8:	48 89 04 24          	mov    %rax,(%rsp)
  4188bc:	49 8b 45 20          	mov    0x20(%r13),%rax
      while (__x != 0)
  4188c0:	48 85 c0             	test   %rax,%rax
  4188c3:	74 4c                	je     418911 <_ZN4YAML6detail4node12mark_definedEv+0xf1>
  4188c5:	48 ba f0 d5 de ff ff 	movabs $0xffffffffffded5f0,%rdx
  4188cc:	ff ff ff 
  4188cf:	49 89 c6             	mov    %rax,%r14
  4188d2:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  4188d9:	ff ff ff 
	  _M_erase(_S_right(__x));
  4188dc:	4a 8d 04 3a          	lea    (%rdx,%r15,1),%rax
  4188e0:	4d 01 fc             	add    %r15,%r12
  4188e3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4188e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4188ef:	00 
  4188f0:	49 8b 76 18          	mov    0x18(%r14),%rsi
  4188f4:	48 8b 3c 24          	mov    (%rsp),%rdi
  4188f8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4188fd:	ff d0                	callq  *%rax
  4188ff:	49 8b 5e 10          	mov    0x10(%r14),%rbx
  418903:	4c 89 f7             	mov    %r14,%rdi
  418906:	41 ff d4             	callq  *%r12
      while (__x != 0)
  418909:	48 85 db             	test   %rbx,%rbx
  41890c:	49 89 de             	mov    %rbx,%r14
  41890f:	75 df                	jne    4188f0 <_ZN4YAML6detail4node12mark_definedEv+0xd0>
	    this->_M_header._M_parent = 0;
  418911:	49 c7 45 20 00 00 00 	movq   $0x0,0x20(%r13)
  418918:	00 
	    this->_M_header._M_left = &this->_M_header;
  418919:	49 89 6d 28          	mov    %rbp,0x28(%r13)
	    this->_M_header._M_right = &this->_M_header;
  41891d:	49 89 6d 30          	mov    %rbp,0x30(%r13)
	    this->_M_node_count = 0;
  418921:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
  418928:	00 
    m_dependencies.clear();
  }
  418929:	48 83 c4 18          	add    $0x18,%rsp
  41892d:	5b                   	pop    %rbx
  41892e:	5d                   	pop    %rbp
  41892f:	41 5c                	pop    %r12
  418931:	41 5d                	pop    %r13
  418933:	41 5e                	pop    %r14
  418935:	41 5f                	pop    %r15
  418937:	c3                   	retq   
  418938:	48 b8 72 ec dd ff ff 	movabs $0xffffffffffddec72,%rax
  41893f:	ff ff ff 
  418942:	4c 01 f8             	add    %r15,%rax
  418945:	ff d0                	callq  *%rax
  418947:	48 b8 c6 eb dd ff ff 	movabs $0xffffffffffddebc6,%rax
  41894e:	ff ff ff 
  418951:	4c 01 f8             	add    %r15,%rax
  418954:	ff d0                	callq  *%rax
  418956:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41895d:	00 00 00 

0000000000418960 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  418960:	41 57                	push   %r15
  418962:	41 56                	push   %r14
  418964:	49 bb a0 26 21 00 00 	movabs $0x2126a0,%r11
  41896b:	00 00 00 
  41896e:	41 55                	push   %r13
  418970:	41 54                	push   %r12
  418972:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 418960 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_>
  418979:	55                   	push   %rbp
  41897a:	53                   	push   %rbx
  41897b:	49 89 fd             	mov    %rdi,%r13
  41897e:	4d 01 dc             	add    %r11,%r12
  418981:	49 89 f6             	mov    %rsi,%r14
      { return &this->_M_impl._M_header; }
  418984:	48 8d 6f 08          	lea    0x8(%rdi),%rbp
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  418988:	48 83 ec 18          	sub    $0x18,%rsp
  41898c:	48 8b 57 10          	mov    0x10(%rdi),%rdx
      while (__x != 0)
  418990:	48 85 d2             	test   %rdx,%rdx
  418993:	74 53                	je     4189e8 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x88>
  418995:	48 8b 3e             	mov    (%rsi),%rdi
  418998:	eb 18                	jmp    4189b2 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x52>
  41899a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4189a0:	48 8b 42 10          	mov    0x10(%rdx),%rax
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  4189a4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
      while (__x != 0)
  4189aa:	48 85 c0             	test   %rax,%rax
  4189ad:	74 18                	je     4189c7 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x67>
  4189af:	48 89 c2             	mov    %rax,%rdx
  4189b2:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  4189b6:	48 39 f9             	cmp    %rdi,%rcx
  4189b9:	77 e5                	ja     4189a0 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x40>
  4189bb:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4189bf:	45 31 c0             	xor    %r8d,%r8d
      while (__x != 0)
  4189c2:	48 85 c0             	test   %rax,%rax
  4189c5:	75 e8                	jne    4189af <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x4f>
      if (__comp)
  4189c7:	45 84 c0             	test   %r8b,%r8b
  4189ca:	48 89 d3             	mov    %rdx,%rbx
  4189cd:	48 89 d0             	mov    %rdx,%rax
  4189d0:	75 1e                	jne    4189f0 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x90>
      return _Res(iterator(__res.first), false);
  4189d2:	31 d2                	xor    %edx,%edx
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
  4189d4:	48 39 cf             	cmp    %rcx,%rdi
  4189d7:	77 40                	ja     418a19 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0xb9>
    }
  4189d9:	48 83 c4 18          	add    $0x18,%rsp
  4189dd:	5b                   	pop    %rbx
  4189de:	5d                   	pop    %rbp
  4189df:	41 5c                	pop    %r12
  4189e1:	41 5d                	pop    %r13
  4189e3:	41 5e                	pop    %r14
  4189e5:	41 5f                	pop    %r15
  4189e7:	c3                   	retq   
      { return &this->_M_impl._M_header; }
  4189e8:	48 89 eb             	mov    %rbp,%rbx
  4189eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  if (__j == begin())
  4189f0:	49 39 5d 18          	cmp    %rbx,0x18(%r13)
  4189f4:	74 23                	je     418a19 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0xb9>
	_M_node = _Rb_tree_decrement(_M_node);
  4189f6:	48 b8 e0 e7 dd ff ff 	movabs $0xffffffffffdde7e0,%rax
  4189fd:	ff ff ff 
  418a00:	48 89 df             	mov    %rbx,%rdi
  418a03:	4d 89 e7             	mov    %r12,%r15
  418a06:	4c 01 e0             	add    %r12,%rax
  418a09:	ff d0                	callq  *%rax
  418a0b:	49 8b 3e             	mov    (%r14),%rdi
  418a0e:	48 8b 48 20          	mov    0x20(%rax),%rcx
      return _Res(iterator(__res.first), false);
  418a12:	31 d2                	xor    %edx,%edx
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
  418a14:	48 39 cf             	cmp    %rcx,%rdi
  418a17:	76 c0                	jbe    4189d9 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x79>
	bool __insert_left = (__x != 0 || __p == _M_end()
  418a19:	48 39 dd             	cmp    %rbx,%rbp
  418a1c:	74 6b                	je     418a89 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x129>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
  418a1e:	48 8b 43 20          	mov    0x20(%rbx),%rax
  418a22:	49 39 06             	cmp    %rax,(%r14)
  418a25:	0f 92 44 24 08       	setb   0x8(%rsp)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  418a2a:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  418a31:	ff ff ff 
  418a34:	4d 89 e7             	mov    %r12,%r15
  418a37:	bf 28 00 00 00       	mov    $0x28,%edi
  418a3c:	4c 01 e0             	add    %r12,%rax
  418a3f:	ff d0                	callq  *%rax
  418a41:	49 8b 16             	mov    (%r14),%rdx
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  418a44:	0f b6 7c 24 08       	movzbl 0x8(%rsp),%edi
  418a49:	49 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%r8
  418a50:	ff ff ff 
  418a53:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  418a58:	48 89 e9             	mov    %rbp,%rcx
  418a5b:	48 89 c6             	mov    %rax,%rsi
  418a5e:	4d 01 e0             	add    %r12,%r8
  418a61:	48 89 50 20          	mov    %rdx,0x20(%rax)
  418a65:	48 89 da             	mov    %rbx,%rdx
  418a68:	41 ff d0             	callq  *%r8
	++_M_impl._M_node_count;
  418a6b:	49 83 45 28 01       	addq   $0x1,0x28(%r13)
		      true);
  418a70:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  418a75:	48 83 c4 18          	add    $0x18,%rsp
  418a79:	5b                   	pop    %rbx
		      true);
  418a7a:	ba 01 00 00 00       	mov    $0x1,%edx
    }
  418a7f:	5d                   	pop    %rbp
  418a80:	41 5c                	pop    %r12
  418a82:	41 5d                	pop    %r13
  418a84:	41 5e                	pop    %r14
  418a86:	41 5f                	pop    %r15
  418a88:	c3                   	retq   
	bool __insert_left = (__x != 0 || __p == _M_end()
  418a89:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  418a8e:	eb 9a                	jmp    418a2a <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0xca>

0000000000418a90 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  418a90:	41 57                	push   %r15
  418a92:	41 55                	push   %r13
  418a94:	49 89 fd             	mov    %rdi,%r13
  418a97:	41 54                	push   %r12
  418a99:	55                   	push   %rbp
  418a9a:	48 8d 2d ef ff ff ff 	lea    -0x11(%rip),%rbp        # 418a90 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv>
  418aa1:	53                   	push   %rbx
  418aa2:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  418aa6:	49 bb 70 25 21 00 00 	movabs $0x212570,%r11
  418aad:	00 00 00 
  418ab0:	4c 01 dd             	add    %r11,%rbp
  418ab3:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  418aba:	ff ff ff 
      { ::operator delete(__p); }
  418abd:	49 01 ec             	add    %rbp,%r12
  418ac0:	48 85 ff             	test   %rdi,%rdi
  418ac3:	74 14                	je     418ad9 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv+0x49>
  418ac5:	0f 1f 00             	nopl   (%rax)
  418ac8:	48 8b 1f             	mov    (%rdi),%rbx
  418acb:	49 89 ef             	mov    %rbp,%r15
  418ace:	41 ff d4             	callq  *%r12
  418ad1:	48 85 db             	test   %rbx,%rbx
  418ad4:	48 89 df             	mov    %rbx,%rdi
  418ad7:	75 ef                	jne    418ac8 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv+0x38>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  418ad9:	49 8b 45 08          	mov    0x8(%r13),%rax
  418add:	49 89 ef             	mov    %rbp,%r15
  418ae0:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  418ae4:	31 f6                	xor    %esi,%esi
  418ae6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  418aed:	00 
  418aee:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  418af5:	ff ff ff 
  418af8:	48 01 e8             	add    %rbp,%rax
  418afb:	ff d0                	callq  *%rax
    }
  418afd:	5b                   	pop    %rbx
      _M_element_count = 0;
  418afe:	49 c7 45 18 00 00 00 	movq   $0x0,0x18(%r13)
  418b05:	00 
      _M_before_begin._M_nxt = nullptr;
  418b06:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
  418b0d:	00 
    }
  418b0e:	5d                   	pop    %rbp
  418b0f:	41 5c                	pop    %r12
  418b11:	41 5d                	pop    %r13
  418b13:	41 5f                	pop    %r15
  418b15:	c3                   	retq   
  418b16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418b1d:	00 00 00 

0000000000418b20 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  418b20:	41 57                	push   %r15
  418b22:	41 56                	push   %r14
  418b24:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 418b20 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_>
  418b2b:	41 55                	push   %r13
  418b2d:	41 54                	push   %r12
  418b2f:	49 bb e0 24 21 00 00 	movabs $0x2124e0,%r11
  418b36:	00 00 00 
  418b39:	55                   	push   %rbp
  418b3a:	53                   	push   %rbx
  418b3b:	4d 01 de             	add    %r11,%r14
  418b3e:	49 89 fc             	mov    %rdi,%r12
  418b41:	49 89 d5             	mov    %rdx,%r13
  418b44:	48 83 ec 18          	sub    $0x18,%rsp
	if (!_M_buckets)
  418b48:	48 83 3f 00          	cmpq   $0x0,(%rdi)
	__bucket_type* __buckets = nullptr;
  418b4c:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  418b53:	00 
	if (!_M_buckets)
  418b54:	0f 84 05 01 00 00    	je     418c5f <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x13f>
	    if (!__ht._M_before_begin._M_nxt)
  418b5a:	48 8b 5e 10          	mov    0x10(%rsi),%rbx
  418b5e:	48 85 db             	test   %rbx,%rbx
  418b61:	0f 84 b0 00 00 00    	je     418c17 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xf7>
		    { return __roan(__n->_M_v()); });
  418b67:	49 8b 45 00          	mov    0x0(%r13),%rax
	  if (_M_nodes)
  418b6b:	48 8b 28             	mov    (%rax),%rbp
  418b6e:	48 85 ed             	test   %rbp,%rbp
  418b71:	0f 84 18 01 00 00    	je     418c8f <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x16f>
	      _M_nodes = _M_nodes->_M_next();
  418b77:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  418b7b:	48 89 10             	mov    %rdx,(%rax)
  418b7e:	48 8b 43 08          	mov    0x8(%rbx),%rax
	      __node->_M_nxt = nullptr;
  418b82:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
  418b89:	00 
  418b8a:	48 89 45 08          	mov    %rax,0x8(%rbp)
  418b8e:	48 8b 43 10          	mov    0x10(%rbx),%rax
    { return __num % __den; }
  418b92:	31 d2                	xor    %edx,%edx
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  418b94:	49 8b 34 24          	mov    (%r12),%rsi
      { __to->_M_hash_code = __from->_M_hash_code; }
  418b98:	48 89 45 10          	mov    %rax,0x10(%rbp)
	    _M_before_begin._M_nxt = __this_n;
  418b9c:	49 89 6c 24 10       	mov    %rbp,0x10(%r12)
    { return __num % __den; }
  418ba1:	49 f7 74 24 08       	divq   0x8(%r12)
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  418ba6:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  418bab:	48 89 04 d6          	mov    %rax,(%rsi,%rdx,8)
  418baf:	48 8b 1b             	mov    (%rbx),%rbx
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  418bb2:	48 85 db             	test   %rbx,%rbx
  418bb5:	75 14                	jne    418bcb <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xab>
  418bb7:	eb 5e                	jmp    418c17 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xf7>
  418bb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  418bc0:	48 8b 1b             	mov    (%rbx),%rbx
  418bc3:	48 89 cd             	mov    %rcx,%rbp
  418bc6:	48 85 db             	test   %rbx,%rbx
  418bc9:	74 4c                	je     418c17 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xf7>
		    { return __roan(__n->_M_v()); });
  418bcb:	49 8b 45 00          	mov    0x0(%r13),%rax
	  if (_M_nodes)
  418bcf:	48 8b 08             	mov    (%rax),%rcx
  418bd2:	48 85 c9             	test   %rcx,%rcx
  418bd5:	74 59                	je     418c30 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x110>
	      _M_nodes = _M_nodes->_M_next();
  418bd7:	48 8b 11             	mov    (%rcx),%rdx
  418bda:	48 89 10             	mov    %rdx,(%rax)
  418bdd:	48 8b 43 08          	mov    0x8(%rbx),%rax
	      __node->_M_nxt = nullptr;
  418be1:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
  418be8:	48 89 41 08          	mov    %rax,0x8(%rcx)
  418bec:	48 8b 43 10          	mov    0x10(%rbx),%rax
		__prev_n->_M_nxt = __this_n;
  418bf0:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
    { return __num % __den; }
  418bf4:	31 d2                	xor    %edx,%edx
      { __to->_M_hash_code = __from->_M_hash_code; }
  418bf6:	48 89 41 10          	mov    %rax,0x10(%rcx)
    { return __num % __den; }
  418bfa:	49 f7 74 24 08       	divq   0x8(%r12)
		if (!_M_buckets[__bkt])
  418bff:	48 8d 04 d6          	lea    (%rsi,%rdx,8),%rax
  418c03:	48 83 38 00          	cmpq   $0x0,(%rax)
  418c07:	75 b7                	jne    418bc0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xa0>
		  _M_buckets[__bkt] = __prev_n;
  418c09:	48 89 28             	mov    %rbp,(%rax)
  418c0c:	48 8b 1b             	mov    (%rbx),%rbx
  418c0f:	48 89 cd             	mov    %rcx,%rbp
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  418c12:	48 85 db             	test   %rbx,%rbx
  418c15:	75 b4                	jne    418bcb <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xab>
      }
  418c17:	48 83 c4 18          	add    $0x18,%rsp
  418c1b:	5b                   	pop    %rbx
  418c1c:	5d                   	pop    %rbp
  418c1d:	41 5c                	pop    %r12
  418c1f:	41 5d                	pop    %r13
  418c21:	41 5e                	pop    %r14
  418c23:	41 5f                	pop    %r15
  418c25:	c3                   	retq   
  418c26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418c2d:	00 00 00 
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  418c30:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  418c37:	ff ff ff 
  418c3a:	bf 18 00 00 00       	mov    $0x18,%edi
  418c3f:	4d 89 f7             	mov    %r14,%r15
  418c42:	4c 01 f0             	add    %r14,%rax
  418c45:	ff d0                	callq  *%rax
  418c47:	48 89 c1             	mov    %rax,%rcx
    _Hash_node_base() noexcept : _M_nxt() { }
  418c4a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  418c51:	48 8b 43 08          	mov    0x8(%rbx),%rax
  418c55:	49 8b 34 24          	mov    (%r12),%rsi
  418c59:	48 89 41 08          	mov    %rax,0x8(%rcx)
  418c5d:	eb 8d                	jmp    418bec <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xcc>
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  418c5f:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
	if (__builtin_expect(__n == 1, false))
  418c63:	48 83 ff 01          	cmp    $0x1,%rdi
  418c67:	74 54                	je     418cbd <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x19d>
	return __hashtable_alloc::_M_allocate_buckets(__n);
  418c69:	48 b8 80 2d de ff ff 	movabs $0xffffffffffde2d80,%rax
  418c70:	ff ff ff 
  418c73:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  418c78:	4c 01 f0             	add    %r14,%rax
  418c7b:	ff d0                	callq  *%rax
  418c7d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  418c82:	48 89 04 24          	mov    %rax,(%rsp)
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  418c86:	49 89 04 24          	mov    %rax,(%r12)
  418c8a:	e9 cb fe ff ff       	jmpq   418b5a <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x3a>
  418c8f:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  418c96:	ff ff ff 
  418c99:	bf 18 00 00 00       	mov    $0x18,%edi
  418c9e:	4d 89 f7             	mov    %r14,%r15
  418ca1:	4c 01 f0             	add    %r14,%rax
  418ca4:	ff d0                	callq  *%rax
  418ca6:	48 89 c5             	mov    %rax,%rbp
  418ca9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  418cb0:	48 8b 43 08          	mov    0x8(%rbx),%rax
  418cb4:	48 89 45 08          	mov    %rax,0x8(%rbp)
  418cb8:	e9 d1 fe ff ff       	jmpq   418b8e <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x6e>
	    return &_M_single_bucket;
  418cbd:	49 8d 44 24 30       	lea    0x30(%r12),%rax
	    _M_single_bucket = nullptr;
  418cc2:	49 c7 44 24 30 00 00 	movq   $0x0,0x30(%r12)
  418cc9:	00 00 
	    return &_M_single_bucket;
  418ccb:	48 89 04 24          	mov    %rax,(%rsp)
  418ccf:	eb b5                	jmp    418c86 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x166>
	__catch(...)
  418cd1:	48 89 c7             	mov    %rax,%rdi
  418cd4:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  418cdb:	ff ff ff 
  418cde:	4d 89 f7             	mov    %r14,%r15
  418ce1:	4c 01 f0             	add    %r14,%rax
  418ce4:	ff d0                	callq  *%rax
	    clear();
  418ce6:	48 b8 90 da de ff ff 	movabs $0xffffffffffdeda90,%rax
  418ced:	ff ff ff 
  418cf0:	4c 89 e7             	mov    %r12,%rdi
  418cf3:	4c 01 f0             	add    %r14,%rax
  418cf6:	ff d0                	callq  *%rax
	    if (__buckets)
  418cf8:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  418cfd:	74 1c                	je     418d1b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x1fb>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  418cff:	49 8b 3c 24          	mov    (%r12),%rdi
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  418d03:	49 83 c4 30          	add    $0x30,%r12
	if (_M_uses_single_bucket(__bkts))
  418d07:	4c 39 e7             	cmp    %r12,%rdi
  418d0a:	74 0f                	je     418d1b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x1fb>
      { ::operator delete(__p); }
  418d0c:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  418d13:	ff ff ff 
  418d16:	4c 01 f0             	add    %r14,%rax
  418d19:	ff d0                	callq  *%rax
	    __throw_exception_again;
  418d1b:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  418d22:	ff ff ff 
  418d25:	4d 89 f7             	mov    %r14,%r15
  418d28:	4c 01 f0             	add    %r14,%rax
  418d2b:	ff d0                	callq  *%rax
	__catch(...)
  418d2d:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  418d34:	ff ff ff 
  418d37:	48 89 c3             	mov    %rax,%rbx
  418d3a:	4d 89 f7             	mov    %r14,%r15
  418d3d:	4c 01 f2             	add    %r14,%rdx
  418d40:	ff d2                	callq  *%rdx
  418d42:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  418d49:	ff ff ff 
  418d4c:	48 89 df             	mov    %rbx,%rdi
  418d4f:	4c 01 f0             	add    %r14,%rax
  418d52:	ff d0                	callq  *%rax
  418d54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418d5b:	00 00 00 
  418d5e:	66 90                	xchg   %ax,%ax

0000000000418d60 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
  418d60:	41 57                	push   %r15
  418d62:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  418d64:	48 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rcx
  418d6b:	cc cc cc 
  418d6e:	41 55                	push   %r13
  418d70:	41 54                	push   %r12
  418d72:	49 bb a0 22 21 00 00 	movabs $0x2122a0,%r11
  418d79:	00 00 00 
  418d7c:	55                   	push   %rbp
  418d7d:	53                   	push   %rbx
  418d7e:	48 89 fd             	mov    %rdi,%rbp
  418d81:	48 8d 1d d8 ff ff ff 	lea    -0x28(%rip),%rbx        # 418d60 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_>
  418d88:	49 89 f6             	mov    %rsi,%r14
  418d8b:	48 83 ec 18          	sub    $0x18,%rsp
  418d8f:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  418d93:	48 8b 3f             	mov    (%rdi),%rdi
  418d96:	4c 01 db             	add    %r11,%rbx
  418d99:	4c 89 c2             	mov    %r8,%rdx
  418d9c:	48 29 fa             	sub    %rdi,%rdx
  418d9f:	48 89 d0             	mov    %rdx,%rax
  418da2:	48 c1 f8 02          	sar    $0x2,%rax
  418da6:	48 0f af c1          	imul   %rcx,%rax
      if (__a < __b)
  418daa:	48 85 c0             	test   %rax,%rax
  418dad:	74 21                	je     418dd0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x70>
  418daf:	48 01 c0             	add    %rax,%rax
  418db2:	72 13                	jb     418dc7 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  418db4:	48 b9 cc cc cc cc cc 	movabs $0xccccccccccccccc,%rcx
  418dbb:	cc cc 0c 
  418dbe:	48 39 c8             	cmp    %rcx,%rax
  418dc1:	0f 86 e1 00 00 00    	jbe    418ea8 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x148>
  418dc7:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
  418dce:	eb 06                	jmp    418dd6 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x76>
  418dd0:	41 bd 14 00 00 00    	mov    $0x14,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  418dd6:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  418ddd:	ff ff ff 
  418de0:	4c 89 ef             	mov    %r13,%rdi
  418de3:	49 89 df             	mov    %rbx,%r15
  418de6:	48 01 d8             	add    %rbx,%rax
  418de9:	ff d0                	callq  *%rax
  418deb:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  418def:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  418df3:	48 8d 48 14          	lea    0x14(%rax),%rcx
  418df7:	49 89 c4             	mov    %rax,%r12
  418dfa:	49 01 c5             	add    %rax,%r13
  418dfd:	4c 89 c2             	mov    %r8,%rdx
  418e00:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  418e03:	4c 01 e2             	add    %r12,%rdx
  418e06:	74 15                	je     418e1d <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xbd>
  418e08:	49 8b 06             	mov    (%r14),%rax
  418e0b:	48 89 02             	mov    %rax,(%rdx)
  418e0e:	49 8b 46 08          	mov    0x8(%r14),%rax
  418e12:	48 89 42 08          	mov    %rax,0x8(%rdx)
  418e16:	41 8b 46 10          	mov    0x10(%r14),%eax
  418e1a:	89 42 10             	mov    %eax,0x10(%rdx)
  418e1d:	4c 39 c7             	cmp    %r8,%rdi
  418e20:	74 44                	je     418e66 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x106>
  418e22:	48 89 fa             	mov    %rdi,%rdx
  418e25:	4c 89 e1             	mov    %r12,%rcx
  418e28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  418e2f:	00 
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  418e30:	48 85 c9             	test   %rcx,%rcx
  418e33:	74 14                	je     418e49 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xe9>
  418e35:	48 8b 32             	mov    (%rdx),%rsi
  418e38:	48 89 31             	mov    %rsi,(%rcx)
  418e3b:	48 8b 72 08          	mov    0x8(%rdx),%rsi
  418e3f:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  418e43:	8b 72 10             	mov    0x10(%rdx),%esi
  418e46:	89 71 10             	mov    %esi,0x10(%rcx)
  418e49:	48 83 c2 14          	add    $0x14,%rdx
  418e4d:	48 83 c1 14          	add    $0x14,%rcx
  418e51:	4c 39 c2             	cmp    %r8,%rdx
  418e54:	75 da                	jne    418e30 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xd0>
  418e56:	48 8d 47 14          	lea    0x14(%rdi),%rax
  418e5a:	48 29 c2             	sub    %rax,%rdx
  418e5d:	48 c1 ea 02          	shr    $0x2,%rdx
  418e61:	49 8d 4c 94 28       	lea    0x28(%r12,%rdx,4),%rcx
	if (__p)
  418e66:	48 85 ff             	test   %rdi,%rdi
  418e69:	74 1c                	je     418e87 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x127>
      { ::operator delete(__p); }
  418e6b:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  418e72:	ff ff ff 
  418e75:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  418e7a:	49 89 df             	mov    %rbx,%r15
  418e7d:	48 01 d8             	add    %rbx,%rax
  418e80:	ff d0                	callq  *%rax
  418e82:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
  418e87:	4c 89 65 00          	mov    %r12,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  418e8b:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  418e8f:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
      }
  418e93:	48 83 c4 18          	add    $0x18,%rsp
  418e97:	5b                   	pop    %rbx
  418e98:	5d                   	pop    %rbp
  418e99:	41 5c                	pop    %r12
  418e9b:	41 5d                	pop    %r13
  418e9d:	41 5e                	pop    %r14
  418e9f:	41 5f                	pop    %r15
  418ea1:	c3                   	retq   
  418ea2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  418ea8:	48 85 c0             	test   %rax,%rax
  418eab:	75 10                	jne    418ebd <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x15d>
  418ead:	b9 14 00 00 00       	mov    $0x14,%ecx
  418eb2:	45 31 ed             	xor    %r13d,%r13d
  418eb5:	45 31 e4             	xor    %r12d,%r12d
  418eb8:	e9 46 ff ff ff       	jmpq   418e03 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xa3>
  418ebd:	4c 8d 2c 80          	lea    (%rax,%rax,4),%r13
  418ec1:	49 c1 e5 02          	shl    $0x2,%r13
  418ec5:	e9 0c ff ff ff       	jmpq   418dd6 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x76>
  418eca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000418ed0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  418ed0:	48 8d 15 f9 ff ff ff 	lea    -0x7(%rip),%rdx        # 418ed0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_>
  418ed7:	49 bb 30 21 21 00 00 	movabs $0x212130,%r11
  418ede:	00 00 00 
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  418ee1:	48 8b 47 08          	mov    0x8(%rdi),%rax
  418ee5:	4c 01 da             	add    %r11,%rdx
  418ee8:	48 3b 47 10          	cmp    0x10(%rdi),%rax
  418eec:	74 22                	je     418f10 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_+0x40>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  418eee:	48 85 c0             	test   %rax,%rax
  418ef1:	74 14                	je     418f07 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_+0x37>
  418ef3:	48 8b 16             	mov    (%rsi),%rdx
  418ef6:	48 89 10             	mov    %rdx,(%rax)
  418ef9:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  418efd:	48 89 50 08          	mov    %rdx,0x8(%rax)
  418f01:	8b 56 10             	mov    0x10(%rsi),%edx
  418f04:	89 50 10             	mov    %edx,0x10(%rax)
	    ++this->_M_impl._M_finish;
  418f07:	48 83 c0 14          	add    $0x14,%rax
  418f0b:	48 89 47 08          	mov    %rax,0x8(%rdi)
  418f0f:	c3                   	retq   
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  418f10:	48 b8 60 dd de ff ff 	movabs $0xffffffffffdedd60,%rax
  418f17:	ff ff ff 
  418f1a:	48 01 d0             	add    %rdx,%rax
  418f1d:	ff e0                	jmpq   *%rax
  418f1f:	90                   	nop

0000000000418f20 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  418f20:	4c 63 0e             	movslq (%rsi),%r9
  418f23:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx
  418f28:	48 63 56 04          	movslq 0x4(%rsi),%rdx
  418f2c:	4c 8b 47 08          	mov    0x8(%rdi),%r8
  418f30:	49 8d 04 09          	lea    (%r9,%rcx,1),%rax
  418f34:	4d 89 ca             	mov    %r9,%r10
  418f37:	49 89 d3             	mov    %rdx,%r11
  418f3a:	48 01 ca             	add    %rcx,%rdx
  418f3d:	49 89 c1             	mov    %rax,%r9
  418f40:	49 c1 e1 06          	shl    $0x6,%r9
  418f44:	49 01 d1             	add    %rdx,%r9
  418f47:	48 89 c2             	mov    %rax,%rdx
  418f4a:	48 c1 ea 02          	shr    $0x2,%rdx
  418f4e:	49 01 d1             	add    %rdx,%r9
    { return __num % __den; }
  418f51:	31 d2                	xor    %edx,%edx
  418f53:	49 31 c1             	xor    %rax,%r9
  418f56:	4c 89 c8             	mov    %r9,%rax
  418f59:	49 f7 f0             	div    %r8
      __node_base* __prev_p = _M_buckets[__n];
  418f5c:	48 8b 07             	mov    (%rdi),%rax
  418f5f:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
      if (!__prev_p)
  418f63:	48 85 c0             	test   %rax,%rax
  418f66:	74 49                	je     418fb1 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x91>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  418f68:	53                   	push   %rbx
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  418f69:	48 8b 08             	mov    (%rax),%rcx
  418f6c:	48 89 d3             	mov    %rdx,%rbx
  418f6f:	48 8b 71 10          	mov    0x10(%rcx),%rsi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  418f73:	49 39 f1             	cmp    %rsi,%r9
  418f76:	74 28                	je     418fa0 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x80>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  418f78:	48 8b 01             	mov    (%rcx),%rax
  418f7b:	48 85 c0             	test   %rax,%rax
  418f7e:	74 14                	je     418f94 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x74>
  418f80:	48 8b 70 10          	mov    0x10(%rax),%rsi
    { return __num % __den; }
  418f84:	31 d2                	xor    %edx,%edx
  418f86:	48 89 c1             	mov    %rax,%rcx
  418f89:	48 89 f0             	mov    %rsi,%rax
  418f8c:	49 f7 f0             	div    %r8
  418f8f:	48 39 d3             	cmp    %rdx,%rbx
  418f92:	74 df                	je     418f73 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x53>
      return __p ? const_iterator(__p) : end();
  418f94:	31 c0                	xor    %eax,%eax
    }
  418f96:	5b                   	pop    %rbx
  418f97:	c3                   	retq   
  418f98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  418f9f:	00 
  418fa0:	44 3b 51 08          	cmp    0x8(%rcx),%r10d
  418fa4:	75 d2                	jne    418f78 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x58>
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  418fa6:	44 3b 59 0c          	cmp    0xc(%rcx),%r11d
  418faa:	75 cc                	jne    418f78 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x58>
      : _M_cur(__p) { }
  418fac:	48 89 c8             	mov    %rcx,%rax
  418faf:	5b                   	pop    %rbx
  418fb0:	c3                   	retq   
      return __p ? const_iterator(__p) : end();
  418fb1:	31 c0                	xor    %eax,%eax
  418fb3:	c3                   	retq   
  418fb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418fbb:	00 00 00 
  418fbe:	66 90                	xchg   %ax,%ax

0000000000418fc0 <_ZNK11Environment10stateValidERK5StatePK11Constraints>:
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
  418fc0:	8b 4e 04             	mov    0x4(%rsi),%ecx
  418fc3:	48 8d 05 f6 ff ff ff 	lea    -0xa(%rip),%rax        # 418fc0 <_ZNK11Environment10stateValidERK5StatePK11Constraints>
  418fca:	49 bb 40 20 21 00 00 	movabs $0x212040,%r11
  418fd1:	00 00 00 
  418fd4:	4c 01 d8             	add    %r11,%rax
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  418fd7:	85 c9                	test   %ecx,%ecx
  418fd9:	78 14                	js     418fef <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x2f>
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
  418fdb:	3b 4f 18             	cmp    0x18(%rdi),%ecx
  418fde:	7d 0f                	jge    418fef <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x2f>
  418fe0:	44 8b 46 08          	mov    0x8(%rsi),%r8d
  418fe4:	45 85 c0             	test   %r8d,%r8d
  418fe7:	78 06                	js     418fef <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x2f>
  418fe9:	44 3b 47 1c          	cmp    0x1c(%rdi),%r8d
  418fed:	7c 09                	jl     418ff8 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x38>
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  418fef:	31 c0                	xor    %eax,%eax
  }
  418ff1:	c3                   	retq   
  418ff2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  bool stateValid(const State& s, const Constraints* m_constraints) const{
  418ff8:	55                   	push   %rbp
  418ff9:	53                   	push   %rbx
  418ffa:	48 89 d5             	mov    %rdx,%rbp
      find(const key_type& __x)
      { return _M_h.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_h.find(__x); }
  418ffd:	48 ba 20 df de ff ff 	movabs $0xffffffffffdedf20,%rdx
  419004:	ff ff ff 
  419007:	48 83 c7 20          	add    $0x20,%rdi
  41900b:	48 89 f3             	mov    %rsi,%rbx
  41900e:	48 83 ec 18          	sub    $0x18,%rsp
  419012:	48 01 d0             	add    %rdx,%rax
  419015:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  419019:	44 89 44 24 0c       	mov    %r8d,0xc(%rsp)
  41901e:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  419023:	ff d0                	callq  *%rax
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
  419025:	48 85 c0             	test   %rax,%rax
  419028:	74 0e                	je     419038 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x78>
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  41902a:	31 c0                	xor    %eax,%eax
  }
  41902c:	48 83 c4 18          	add    $0x18,%rsp
  419030:	5b                   	pop    %rbx
  419031:	5d                   	pop    %rbp
  419032:	c3                   	retq   
  419033:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		for (int i = 0; i < vertexConstraints_size; ++i) {
  419038:	8b 95 40 06 00 00    	mov    0x640(%rbp),%edx
           !m_constraints->isIncluded(VertexConstraint(s.time, s.x, s.y));
  41903e:	8b 7b 08             	mov    0x8(%rbx),%edi
  419041:	8b 73 04             	mov    0x4(%rbx),%esi
  419044:	8b 0b                	mov    (%rbx),%ecx
  419046:	85 d2                	test   %edx,%edx
  419048:	7f 11                	jg     41905b <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x9b>
  41904a:	eb 24                	jmp    419070 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0xb0>
  41904c:	0f 1f 40 00          	nopl   0x0(%rax)
  419050:	83 c0 01             	add    $0x1,%eax
  419053:	48 83 c5 0c          	add    $0xc,%rbp
  419057:	39 c2                	cmp    %eax,%edx
  419059:	7e 15                	jle    419070 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0xb0>
  41905b:	3b 4d 00             	cmp    0x0(%rbp),%ecx
  41905e:	75 f0                	jne    419050 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x90>
  419060:	3b 75 04             	cmp    0x4(%rbp),%esi
  419063:	75 eb                	jne    419050 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x90>
  419065:	3b 7d 08             	cmp    0x8(%rbp),%edi
  419068:	74 c0                	je     41902a <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x6a>
  41906a:	eb e4                	jmp    419050 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x90>
  41906c:	0f 1f 40 00          	nopl   0x0(%rax)
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  419070:	b8 01 00 00 00       	mov    $0x1,%eax
  419075:	eb b5                	jmp    41902c <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x6c>
  419077:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41907e:	00 00 

0000000000419080 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints>:
  void getNeighbors(const State& s,
  419080:	41 57                	push   %r15
  419082:	41 56                	push   %r14
  419084:	49 89 d7             	mov    %rdx,%r15
  419087:	41 55                	push   %r13
  419089:	41 54                	push   %r12
  41908b:	49 bb 80 1f 21 00 00 	movabs $0x211f80,%r11
  419092:	00 00 00 
  419095:	55                   	push   %rbp
  419096:	53                   	push   %rbx
  419097:	48 89 cd             	mov    %rcx,%rbp
  41909a:	48 8d 1d df ff ff ff 	lea    -0x21(%rip),%rbx        # 419080 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints>
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4190a1:	49 be c0 df de ff ff 	movabs $0xffffffffffdedfc0,%r14
  4190a8:	ff ff ff 
  void getNeighbors(const State& s,
  4190ab:	49 89 f5             	mov    %rsi,%r13
  4190ae:	48 83 ec 48          	sub    $0x48,%rsp
	this->_M_impl._M_finish = __pos;
  4190b2:	48 8b 02             	mov    (%rdx),%rax
      State n(s.time + 1, s.x, s.y);
  4190b5:	8b 4e 04             	mov    0x4(%rsi),%ecx
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4190b8:	4c 8d 64 24 14       	lea    0x14(%rsp),%r12
  4190bd:	4c 01 db             	add    %r11,%rbx
  void getNeighbors(const State& s,
  4190c0:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  4190c5:	48 89 42 08          	mov    %rax,0x8(%rdx)
      State n(s.time + 1, s.x, s.y);
  4190c9:	8b 06                	mov    (%rsi),%eax
  4190cb:	8b 56 08             	mov    0x8(%rsi),%edx
  State(int time, int x, int y) : time(time), x(x), y(y) {}
  4190ce:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4190d2:	4c 89 e6             	mov    %r12,%rsi
      State n(s.time + 1, s.x, s.y);
  4190d5:	83 c0 01             	add    $0x1,%eax
  4190d8:	89 44 24 14          	mov    %eax,0x14(%rsp)
  4190dc:	89 54 24 1c          	mov    %edx,0x1c(%rsp)
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4190e0:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  4190e4:	48 89 ea             	mov    %rbp,%rdx
  4190e7:	ff d0                	callq  *%rax
  4190e9:	84 c0                	test   %al,%al
  4190eb:	0f 85 ef 00 00 00    	jne    4191e0 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x160>
      State n(s.time + 1, s.x - 1, s.y);
  4190f1:	41 8b 7d 00          	mov    0x0(%r13),%edi
  4190f5:	41 8b 45 04          	mov    0x4(%r13),%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4190f9:	4c 89 e6             	mov    %r12,%rsi
      State n(s.time + 1, s.x - 1, s.y);
  4190fc:	41 8b 4d 08          	mov    0x8(%r13),%ecx
  419100:	8d 57 01             	lea    0x1(%rdi),%edx
  419103:	83 e8 01             	sub    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419106:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41910b:	89 44 24 18          	mov    %eax,0x18(%rsp)
  41910f:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
  419113:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  419117:	89 54 24 14          	mov    %edx,0x14(%rsp)
  41911b:	48 89 ea             	mov    %rbp,%rdx
  41911e:	ff d0                	callq  *%rax
  419120:	84 c0                	test   %al,%al
  419122:	0f 85 48 02 00 00    	jne    419370 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x2f0>
      State n(s.time + 1, s.x + 1, s.y);
  419128:	41 8b 75 00          	mov    0x0(%r13),%esi
  41912c:	41 8b 45 04          	mov    0x4(%r13),%eax
  419130:	41 8b 4d 08          	mov    0x8(%r13),%ecx
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419134:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
      State n(s.time + 1, s.x + 1, s.y);
  419139:	8d 56 01             	lea    0x1(%rsi),%edx
  41913c:	83 c0 01             	add    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  41913f:	4c 89 e6             	mov    %r12,%rsi
  419142:	89 44 24 18          	mov    %eax,0x18(%rsp)
  419146:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
  41914a:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41914e:	89 54 24 14          	mov    %edx,0x14(%rsp)
  419152:	48 89 ea             	mov    %rbp,%rdx
  419155:	ff d0                	callq  *%rax
  419157:	84 c0                	test   %al,%al
  419159:	0f 85 b1 01 00 00    	jne    419310 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x290>
      State n(s.time + 1, s.x, s.y + 1);
  41915f:	41 8b 7d 00          	mov    0x0(%r13),%edi
  419163:	41 8b 45 08          	mov    0x8(%r13),%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419167:	4c 89 e6             	mov    %r12,%rsi
      State n(s.time + 1, s.x, s.y + 1);
  41916a:	41 8b 4d 04          	mov    0x4(%r13),%ecx
  41916e:	8d 57 01             	lea    0x1(%rdi),%edx
  419171:	83 c0 01             	add    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419174:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  419179:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  41917d:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
  419181:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  419185:	89 54 24 14          	mov    %edx,0x14(%rsp)
  419189:	48 89 ea             	mov    %rbp,%rdx
  41918c:	ff d0                	callq  *%rax
  41918e:	84 c0                	test   %al,%al
  419190:	0f 85 1a 01 00 00    	jne    4192b0 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x230>
      State n(s.time + 1, s.x, s.y - 1);
  419196:	41 8b 75 00          	mov    0x0(%r13),%esi
  41919a:	41 8b 45 08          	mov    0x8(%r13),%eax
  41919e:	41 8b 4d 04          	mov    0x4(%r13),%ecx
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4191a2:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
      State n(s.time + 1, s.x, s.y - 1);
  4191a7:	8d 56 01             	lea    0x1(%rsi),%edx
  4191aa:	83 e8 01             	sub    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4191ad:	4c 89 e6             	mov    %r12,%rsi
  4191b0:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  4191b4:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
  4191b8:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  4191bc:	89 54 24 14          	mov    %edx,0x14(%rsp)
  4191c0:	48 89 ea             	mov    %rbp,%rdx
  4191c3:	ff d0                	callq  *%rax
  4191c5:	84 c0                	test   %al,%al
  4191c7:	75 77                	jne    419240 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x1c0>
  }
  4191c9:	48 83 c4 48          	add    $0x48,%rsp
  4191cd:	5b                   	pop    %rbx
  4191ce:	5d                   	pop    %rbp
  4191cf:	41 5c                	pop    %r12
  4191d1:	41 5d                	pop    %r13
  4191d3:	41 5e                	pop    %r14
  4191d5:	41 5f                	pop    %r15
  4191d7:	c3                   	retq   
  4191d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4191df:	00 
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4191e0:	48 b8 10 93 de ff ff 	movabs $0xffffffffffde9310,%rax
  4191e7:	ff ff ff 
  4191ea:	48 89 ea             	mov    %rbp,%rdx
  4191ed:	4c 89 e6             	mov    %r12,%rsi
  4191f0:	48 01 d8             	add    %rbx,%rax
  4191f3:	4c 89 ef             	mov    %r13,%rdi
  4191f6:	ff d0                	callq  *%rax
  4191f8:	84 c0                	test   %al,%al
  4191fa:	0f 84 f1 fe ff ff    	je     4190f1 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x71>
    \tparam Cost Custom Cost type (integer or floating point types)
*/
template <typename State, typename Action, typename Cost>
struct Neighbor {
  Neighbor(const State& state, const Action& action, Cost cost)
      : state(state), action(action), cost(cost) {}
  419200:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419205:	c7 44 24 2c 04 00 00 	movl   $0x4,0x2c(%rsp)
  41920c:	00 
            Neighbor<State, Action, int>(n, Action::Wait, 1));
  41920d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  419212:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  419219:	00 
  41921a:	4c 89 ff             	mov    %r15,%rdi
  41921d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419222:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  419226:	89 44 24 28          	mov    %eax,0x28(%rsp)
  41922a:	48 b8 d0 de de ff ff 	movabs $0xffffffffffdeded0,%rax
  419231:	ff ff ff 
  419234:	48 01 d8             	add    %rbx,%rax
  419237:	ff d0                	callq  *%rax
  419239:	e9 b3 fe ff ff       	jmpq   4190f1 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x71>
  41923e:	66 90                	xchg   %ax,%ax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419240:	48 b8 10 93 de ff ff 	movabs $0xffffffffffde9310,%rax
  419247:	ff ff ff 
  41924a:	48 89 ea             	mov    %rbp,%rdx
  41924d:	4c 89 e6             	mov    %r12,%rsi
  419250:	48 01 d8             	add    %rbx,%rax
  419253:	4c 89 ef             	mov    %r13,%rdi
  419256:	ff d0                	callq  *%rax
  419258:	84 c0                	test   %al,%al
  41925a:	0f 84 69 ff ff ff    	je     4191c9 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x149>
  419260:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419265:	c7 44 24 2c 01 00 00 	movl   $0x1,0x2c(%rsp)
  41926c:	00 
            Neighbor<State, Action, int>(n, Action::Down, 1));
  41926d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  419272:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  419279:	00 
  41927a:	4c 89 ff             	mov    %r15,%rdi
  41927d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419282:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  419286:	89 44 24 28          	mov    %eax,0x28(%rsp)
  41928a:	48 b8 d0 de de ff ff 	movabs $0xffffffffffdeded0,%rax
  419291:	ff ff ff 
  419294:	48 01 d8             	add    %rbx,%rax
  419297:	ff d0                	callq  *%rax
  }
  419299:	48 83 c4 48          	add    $0x48,%rsp
  41929d:	5b                   	pop    %rbx
  41929e:	5d                   	pop    %rbp
  41929f:	41 5c                	pop    %r12
  4192a1:	41 5d                	pop    %r13
  4192a3:	41 5e                	pop    %r14
  4192a5:	41 5f                	pop    %r15
  4192a7:	c3                   	retq   
  4192a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4192af:	00 
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4192b0:	48 b8 10 93 de ff ff 	movabs $0xffffffffffde9310,%rax
  4192b7:	ff ff ff 
  4192ba:	48 89 ea             	mov    %rbp,%rdx
  4192bd:	4c 89 e6             	mov    %r12,%rsi
  4192c0:	48 01 d8             	add    %rbx,%rax
  4192c3:	4c 89 ef             	mov    %r13,%rdi
  4192c6:	ff d0                	callq  *%rax
  4192c8:	84 c0                	test   %al,%al
  4192ca:	0f 84 c6 fe ff ff    	je     419196 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x116>
  4192d0:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  4192d5:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%rsp)
  4192dc:	00 
        neighbors.emplace_back(Neighbor<State, Action, int>(n, Action::Up, 1));
  4192dd:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4192e2:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  4192e9:	00 
  4192ea:	4c 89 ff             	mov    %r15,%rdi
  4192ed:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4192f2:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  4192f6:	89 44 24 28          	mov    %eax,0x28(%rsp)
  4192fa:	48 b8 d0 de de ff ff 	movabs $0xffffffffffdeded0,%rax
  419301:	ff ff ff 
  419304:	48 01 d8             	add    %rbx,%rax
  419307:	ff d0                	callq  *%rax
  419309:	e9 88 fe ff ff       	jmpq   419196 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x116>
  41930e:	66 90                	xchg   %ax,%ax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419310:	48 b8 10 93 de ff ff 	movabs $0xffffffffffde9310,%rax
  419317:	ff ff ff 
  41931a:	48 89 ea             	mov    %rbp,%rdx
  41931d:	4c 89 e6             	mov    %r12,%rsi
  419320:	48 01 d8             	add    %rbx,%rax
  419323:	4c 89 ef             	mov    %r13,%rdi
  419326:	ff d0                	callq  *%rax
  419328:	84 c0                	test   %al,%al
  41932a:	0f 84 2f fe ff ff    	je     41915f <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xdf>
  419330:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419335:	c7 44 24 2c 03 00 00 	movl   $0x3,0x2c(%rsp)
  41933c:	00 
            Neighbor<State, Action, int>(n, Action::Right, 1));
  41933d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  419342:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  419349:	00 
  41934a:	4c 89 ff             	mov    %r15,%rdi
  41934d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419352:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  419356:	89 44 24 28          	mov    %eax,0x28(%rsp)
  41935a:	48 b8 d0 de de ff ff 	movabs $0xffffffffffdeded0,%rax
  419361:	ff ff ff 
  419364:	48 01 d8             	add    %rbx,%rax
  419367:	ff d0                	callq  *%rax
  419369:	e9 f1 fd ff ff       	jmpq   41915f <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xdf>
  41936e:	66 90                	xchg   %ax,%ax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419370:	48 b8 10 93 de ff ff 	movabs $0xffffffffffde9310,%rax
  419377:	ff ff ff 
  41937a:	48 89 ea             	mov    %rbp,%rdx
  41937d:	4c 89 e6             	mov    %r12,%rsi
  419380:	48 01 d8             	add    %rbx,%rax
  419383:	4c 89 ef             	mov    %r13,%rdi
  419386:	ff d0                	callq  *%rax
  419388:	84 c0                	test   %al,%al
  41938a:	0f 84 98 fd ff ff    	je     419128 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xa8>
  419390:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419395:	c7 44 24 2c 02 00 00 	movl   $0x2,0x2c(%rsp)
  41939c:	00 
            Neighbor<State, Action, int>(n, Action::Left, 1));
  41939d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4193a2:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  4193a9:	00 
  4193aa:	4c 89 ff             	mov    %r15,%rdi
  4193ad:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4193b2:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  4193b6:	89 44 24 28          	mov    %eax,0x28(%rsp)
  4193ba:	48 b8 d0 de de ff ff 	movabs $0xffffffffffdeded0,%rax
  4193c1:	ff ff ff 
  4193c4:	48 01 d8             	add    %rbx,%rax
  4193c7:	ff d0                	callq  *%rax
  4193c9:	e9 5a fd ff ff       	jmpq   419128 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xa8>
  4193ce:	66 90                	xchg   %ax,%ax

00000000004193d0 <_ZN5swarm14memTupleRunnerIFvm9AstarNode7LLNodee19LowLevelEnvironmentP9came_fromEXadL_Z6LL_pllmS1_S2_S3_S5_EEJS1_S2_S3_S5_EEEvmm>:
inline void memTupleRunner(Timestamp ts, uint64_t t0) {
  4193d0:	41 57                	push   %r15
  4193d2:	55                   	push   %rbp
  4193d3:	48 89 f8             	mov    %rdi,%rax
  4193d6:	53                   	push   %rbx
  4193d7:	48 89 f5             	mov    %rsi,%rbp
    callFunc(f, ts, *tup, typename gens<sizeof...(Args)>::type());
  4193da:	b9 13 00 00 00       	mov    $0x13,%ecx
  4193df:	48 8d 1d ea ff ff ff 	lea    -0x16(%rip),%rbx        # 4193d0 <_ZN5swarm14memTupleRunnerIFvm9AstarNode7LLNodee19LowLevelEnvironmentP9came_fromEXadL_Z6LL_pllmS1_S2_S3_S5_EEJS1_S2_S3_S5_EEEvmm>
  4193e6:	49 bb 30 1c 21 00 00 	movabs $0x211c30,%r11
  4193ed:	00 00 00 
inline void memTupleRunner(Timestamp ts, uint64_t t0) {
  4193f0:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    callFunc(f, ts, *tup, typename gens<sizeof...(Args)>::type());
  4193f7:	48 89 e7             	mov    %rsp,%rdi
  4193fa:	4c 01 db             	add    %r11,%rbx
  4193fd:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
template<int N, int... S> struct gens : gens<N-1, N-1, S...> {};
template<int...S> struct gens<0, S...>{ typedef seq<S...> type; };

template<typename F, typename FirstArg, typename Tuple, int... S>
inline void callFunc(F f, FirstArg ts, Tuple tup, seq<S...>) {
    f(ts, std::get<S>(tup)...);
  419400:	48 89 c7             	mov    %rax,%rdi
  419403:	48 b8 50 46 de ff ff 	movabs $0xffffffffffde4650,%rax
  41940a:	ff ff ff 
  41940d:	48 01 d8             	add    %rbx,%rax
  419410:	ff 74 24 28          	pushq  0x28(%rsp)
  419414:	ff 74 24 28          	pushq  0x28(%rsp)
  419418:	ff 74 24 28          	pushq  0x28(%rsp)
  41941c:	ff 74 24 28          	pushq  0x28(%rsp)
  419420:	ff 74 24 28          	pushq  0x28(%rsp)
  419424:	ff b4 24 98 00 00 00 	pushq  0x98(%rsp)
  41942b:	ff b4 24 98 00 00 00 	pushq  0x98(%rsp)
  419432:	ff b4 24 98 00 00 00 	pushq  0x98(%rsp)
  419439:	ff b4 24 98 00 00 00 	pushq  0x98(%rsp)
  419440:	ff b4 24 98 00 00 00 	pushq  0x98(%rsp)
  419447:	ff b4 24 98 00 00 00 	pushq  0x98(%rsp)
  41944e:	ff b4 24 98 00 00 00 	pushq  0x98(%rsp)
  419455:	ff b4 24 98 00 00 00 	pushq  0x98(%rsp)
  41945c:	ff b4 24 98 00 00 00 	pushq  0x98(%rsp)
  419463:	48 83 ec 20          	sub    $0x20,%rsp
  419467:	48 8b 94 24 08 01 00 	mov    0x108(%rsp),%rdx
  41946e:	00 
  41946f:	48 89 14 24          	mov    %rdx,(%rsp)
  419473:	48 8b 94 24 10 01 00 	mov    0x110(%rsp),%rdx
  41947a:	00 
  41947b:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  419480:	48 8b 94 24 18 01 00 	mov    0x118(%rsp),%rdx
  419487:	00 
  419488:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  41948d:	8b 94 24 20 01 00 00 	mov    0x120(%rsp),%edx
  419494:	89 54 24 18          	mov    %edx,0x18(%rsp)
  419498:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  41949c:	ff d0                	callq  *%rax
}
  41949e:	48 81 c4 30 01 00 00 	add    $0x130,%rsp
    delete tup;
  4194a5:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  4194ac:	ff ff ff 
  4194af:	48 89 ef             	mov    %rbp,%rdi
  4194b2:	48 01 d8             	add    %rbx,%rax
  4194b5:	be 98 00 00 00       	mov    $0x98,%esi
}
  4194ba:	5b                   	pop    %rbx
  4194bb:	5d                   	pop    %rbp
  4194bc:	41 5f                	pop    %r15
    delete tup;
  4194be:	ff e0                	jmpq   *%rax

00000000004194c0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
  4194c0:	41 57                	push   %r15
  4194c2:	41 56                	push   %r14
  4194c4:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 4194c0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_>
  4194cb:	41 55                	push   %r13
  4194cd:	41 54                	push   %r12
  4194cf:	49 bb 40 1b 21 00 00 	movabs $0x211b40,%r11
  4194d6:	00 00 00 
  4194d9:	55                   	push   %rbp
  4194da:	53                   	push   %rbx
  4194db:	4d 01 de             	add    %r11,%r14
  4194de:	48 89 fd             	mov    %rdi,%rbp
  4194e1:	48 83 ec 18          	sub    $0x18,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  4194e5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  4194e9:	48 2b 07             	sub    (%rdi),%rax
  4194ec:	48 c1 f8 02          	sar    $0x2,%rax
  4194f0:	48 85 c0             	test   %rax,%rax
  4194f3:	74 2b                	je     419520 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x60>
  4194f5:	48 01 c0             	add    %rax,%rax
  4194f8:	72 13                	jb     41950d <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x4d>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  4194fa:	48 ba ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rdx
  419501:	ff ff 3f 
  419504:	48 39 d0             	cmp    %rdx,%rax
  419507:	0f 86 cf 00 00 00    	jbe    4195dc <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x11c>
  41950d:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  419514:	eb 10                	jmp    419526 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x66>
  419516:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41951d:	00 00 00 
  419520:	41 bd 04 00 00 00    	mov    $0x4,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419526:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41952d:	ff ff ff 
  419530:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  419535:	4c 89 ef             	mov    %r13,%rdi
  419538:	4d 89 f7             	mov    %r14,%r15
  41953b:	4c 01 f0             	add    %r14,%rax
  41953e:	ff d0                	callq  *%rax
  419540:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  419545:	48 89 c3             	mov    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419548:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
  41954c:	4c 8b 65 08          	mov    0x8(%rbp),%r12
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419550:	48 89 da             	mov    %rbx,%rdx
  419553:	8b 36                	mov    (%rsi),%esi
  419555:	49 29 cc             	sub    %rcx,%r12
  419558:	4c 89 e0             	mov    %r12,%rax
  41955b:	48 c1 f8 02          	sar    $0x2,%rax
  41955f:	4c 01 e2             	add    %r12,%rdx
  419562:	74 02                	je     419566 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xa6>
  419564:	89 32                	mov    %esi,(%rdx)
	  if (_Num)
  419566:	48 85 c0             	test   %rax,%rax
  419569:	75 45                	jne    4195b0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xf0>
	if (__p)
  41956b:	48 85 c9             	test   %rcx,%rcx
	    ++__new_finish;
  41956e:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  419573:	74 15                	je     41958a <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xca>
      { ::operator delete(__p); }
  419575:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41957c:	ff ff ff 
  41957f:	48 89 cf             	mov    %rcx,%rdi
  419582:	4d 89 f7             	mov    %r14,%r15
  419585:	4c 01 f0             	add    %r14,%rax
  419588:	ff d0                	callq  *%rax
	this->_M_impl._M_start = __new_start;
  41958a:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41958e:	4c 01 eb             	add    %r13,%rbx
	this->_M_impl._M_finish = __new_finish;
  419591:	4c 89 65 08          	mov    %r12,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  419595:	48 89 5d 10          	mov    %rbx,0x10(%rbp)
      }
  419599:	48 83 c4 18          	add    $0x18,%rsp
  41959d:	5b                   	pop    %rbx
  41959e:	5d                   	pop    %rbp
  41959f:	41 5c                	pop    %r12
  4195a1:	41 5d                	pop    %r13
  4195a3:	41 5e                	pop    %r14
  4195a5:	41 5f                	pop    %r15
  4195a7:	c3                   	retq   
  4195a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4195af:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  4195b0:	48 b8 10 ea dd ff ff 	movabs $0xffffffffffddea10,%rax
  4195b7:	ff ff ff 
  4195ba:	4c 89 e2             	mov    %r12,%rdx
  4195bd:	48 89 ce             	mov    %rcx,%rsi
  4195c0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  4195c5:	48 89 df             	mov    %rbx,%rdi
  4195c8:	4d 89 f7             	mov    %r14,%r15
  4195cb:	4c 01 f0             	add    %r14,%rax
	    ++__new_finish;
  4195ce:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  4195d3:	ff d0                	callq  *%rax
  4195d5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  4195da:	eb 99                	jmp    419575 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xb5>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  4195dc:	45 31 ed             	xor    %r13d,%r13d
  4195df:	31 db                	xor    %ebx,%ebx
  4195e1:	48 85 c0             	test   %rax,%rax
  4195e4:	0f 84 5e ff ff ff    	je     419548 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x88>
  4195ea:	4c 8d 2c 85 00 00 00 	lea    0x0(,%rax,4),%r13
  4195f1:	00 
  4195f2:	e9 2f ff ff ff       	jmpq   419526 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x66>
  4195f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4195fe:	00 00 

0000000000419600 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  419600:	55                   	push   %rbp
  419601:	53                   	push   %rbx
  419602:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx
  419607:	48 63 06             	movslq (%rsi),%rax
  41960a:	4c 63 46 04          	movslq 0x4(%rsi),%r8
  41960e:	4c 8b 4f 08          	mov    0x8(%rdi),%r9
  419612:	49 89 c2             	mov    %rax,%r10
  419615:	48 01 c8             	add    %rcx,%rax
  419618:	4d 89 c3             	mov    %r8,%r11
  41961b:	48 89 c2             	mov    %rax,%rdx
  41961e:	49 01 c8             	add    %rcx,%r8
  419621:	48 c1 e2 06          	shl    $0x6,%rdx
  419625:	4c 01 c2             	add    %r8,%rdx
  419628:	49 89 c0             	mov    %rax,%r8
  41962b:	49 c1 e8 02          	shr    $0x2,%r8
  41962f:	49 01 d0             	add    %rdx,%r8
  419632:	4c 31 c0             	xor    %r8,%rax
  419635:	4c 63 46 08          	movslq 0x8(%rsi),%r8
  419639:	48 89 c2             	mov    %rax,%rdx
  41963c:	48 c1 e2 06          	shl    $0x6,%rdx
  419640:	4c 89 c3             	mov    %r8,%rbx
  419643:	49 01 c8             	add    %rcx,%r8
  419646:	49 01 d0             	add    %rdx,%r8
  419649:	48 89 c2             	mov    %rax,%rdx
  41964c:	48 c1 ea 02          	shr    $0x2,%rdx
  419650:	49 01 d0             	add    %rdx,%r8
    { return __num % __den; }
  419653:	31 d2                	xor    %edx,%edx
  419655:	49 31 c0             	xor    %rax,%r8
  419658:	4c 89 c0             	mov    %r8,%rax
  41965b:	49 f7 f1             	div    %r9
      __node_base* __prev_p = _M_buckets[__n];
  41965e:	48 8b 07             	mov    (%rdi),%rax
  419661:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
      if (!__prev_p)
  419665:	48 85 c0             	test   %rax,%rax
  419668:	74 2b                	je     419695 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x95>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  41966a:	48 8b 08             	mov    (%rax),%rcx
  41966d:	48 89 d5             	mov    %rdx,%rbp
  419670:	48 8b 71 30          	mov    0x30(%rcx),%rsi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  419674:	4c 39 c6             	cmp    %r8,%rsi
  419677:	74 27                	je     4196a0 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0xa0>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  419679:	48 8b 01             	mov    (%rcx),%rax
  41967c:	48 85 c0             	test   %rax,%rax
  41967f:	74 14                	je     419695 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x95>
  419681:	48 8b 70 30          	mov    0x30(%rax),%rsi
    { return __num % __den; }
  419685:	31 d2                	xor    %edx,%edx
  419687:	48 89 c1             	mov    %rax,%rcx
  41968a:	48 89 f0             	mov    %rsi,%rax
  41968d:	49 f7 f1             	div    %r9
  419690:	48 39 d5             	cmp    %rdx,%rbp
  419693:	74 df                	je     419674 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x74>
      return __p ? iterator(__p) : end();
  419695:	31 c0                	xor    %eax,%eax
    }
  419697:	5b                   	pop    %rbx
  419698:	5d                   	pop    %rbp
  419699:	c3                   	retq   
  41969a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    return time == s.time && x == s.x && y == s.y;
  4196a0:	44 3b 51 08          	cmp    0x8(%rcx),%r10d
  4196a4:	75 d3                	jne    419679 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x79>
  4196a6:	44 3b 59 0c          	cmp    0xc(%rcx),%r11d
  4196aa:	75 cd                	jne    419679 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x79>
  4196ac:	3b 59 10             	cmp    0x10(%rcx),%ebx
  4196af:	75 c8                	jne    419679 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x79>
      : _M_cur(__p) { }
  4196b1:	48 89 c8             	mov    %rcx,%rax
  4196b4:	5b                   	pop    %rbx
  4196b5:	5d                   	pop    %rbp
  4196b6:	c3                   	retq   
  4196b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4196be:	00 00 

00000000004196c0 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  4196c0:	41 57                	push   %r15
  4196c2:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  4196c4:	48 b9 b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rcx
  4196cb:	db b6 6d 
  4196ce:	41 55                	push   %r13
  4196d0:	41 54                	push   %r12
  4196d2:	49 bb 40 19 21 00 00 	movabs $0x211940,%r11
  4196d9:	00 00 00 
  4196dc:	55                   	push   %rbp
  4196dd:	53                   	push   %rbx
  4196de:	48 89 fd             	mov    %rdi,%rbp
  4196e1:	48 8d 1d d8 ff ff ff 	lea    -0x28(%rip),%rbx        # 4196c0 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>
  4196e8:	49 89 f6             	mov    %rsi,%r14
  4196eb:	48 83 ec 18          	sub    $0x18,%rsp
  4196ef:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  4196f3:	48 8b 3f             	mov    (%rdi),%rdi
  4196f6:	4c 01 db             	add    %r11,%rbx
  4196f9:	4c 89 c0             	mov    %r8,%rax
  4196fc:	48 29 f8             	sub    %rdi,%rax
  4196ff:	48 89 c2             	mov    %rax,%rdx
  419702:	48 c1 fa 02          	sar    $0x2,%rdx
  419706:	48 0f af d1          	imul   %rcx,%rdx
      if (__a < __b)
  41970a:	48 85 d2             	test   %rdx,%rdx
  41970d:	74 21                	je     419730 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x70>
  41970f:	48 01 d2             	add    %rdx,%rdx
  419712:	72 13                	jb     419727 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  419714:	48 b9 24 49 92 24 49 	movabs $0x924924924924924,%rcx
  41971b:	92 24 09 
  41971e:	48 39 ca             	cmp    %rcx,%rdx
  419721:	0f 86 19 01 00 00    	jbe    419840 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x180>
  419727:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
  41972e:	eb 06                	jmp    419736 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  419730:	41 bd 1c 00 00 00    	mov    $0x1c,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419736:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41973d:	ff ff ff 
  419740:	4c 89 ef             	mov    %r13,%rdi
  419743:	49 89 df             	mov    %rbx,%r15
  419746:	48 01 d8             	add    %rbx,%rax
  419749:	ff d0                	callq  *%rax
  41974b:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  41974f:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  419753:	49 89 c4             	mov    %rax,%r12
  419756:	49 01 c5             	add    %rax,%r13
  419759:	49 8d 54 24 1c       	lea    0x1c(%r12),%rdx
  41975e:	4c 89 c0             	mov    %r8,%rax
  419761:	48 29 f8             	sub    %rdi,%rax
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419764:	4c 01 e0             	add    %r12,%rax
  419767:	74 1d                	je     419786 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xc6>
  419769:	49 8b 0e             	mov    (%r14),%rcx
  41976c:	48 89 08             	mov    %rcx,(%rax)
  41976f:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  419773:	48 89 48 08          	mov    %rcx,0x8(%rax)
  419777:	49 8b 4e 10          	mov    0x10(%r14),%rcx
  41977b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41977f:	41 8b 4e 18          	mov    0x18(%r14),%ecx
  419783:	89 48 18             	mov    %ecx,0x18(%rax)
  419786:	4c 39 c7             	cmp    %r8,%rdi
  419789:	74 75                	je     419800 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x140>
  41978b:	48 89 fa             	mov    %rdi,%rdx
  41978e:	4c 89 e1             	mov    %r12,%rcx
  419791:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  419798:	48 85 c9             	test   %rcx,%rcx
  41979b:	74 1c                	je     4197b9 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xf9>
  41979d:	48 8b 02             	mov    (%rdx),%rax
  4197a0:	48 89 01             	mov    %rax,(%rcx)
  4197a3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4197a7:	48 89 41 08          	mov    %rax,0x8(%rcx)
  4197ab:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  4197af:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  4197b3:	8b 72 18             	mov    0x18(%rdx),%esi
  4197b6:	89 71 18             	mov    %esi,0x18(%rcx)
  4197b9:	48 83 c2 1c          	add    $0x1c,%rdx
  4197bd:	48 83 c1 1c          	add    $0x1c,%rcx
  4197c1:	4c 39 c2             	cmp    %r8,%rdx
  4197c4:	75 d2                	jne    419798 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xd8>
  4197c6:	48 8d 47 1c          	lea    0x1c(%rdi),%rax
  4197ca:	48 29 c2             	sub    %rax,%rdx
  4197cd:	48 b8 b7 6d db b6 6d 	movabs $0x2db6db6db6db6db7,%rax
  4197d4:	db b6 2d 
  4197d7:	48 c1 ea 02          	shr    $0x2,%rdx
  4197db:	48 0f af d0          	imul   %rax,%rdx
  4197df:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
  4197e6:	ff ff 3f 
  4197e9:	48 21 c2             	and    %rax,%rdx
  4197ec:	48 83 c2 01          	add    $0x1,%rdx
  4197f0:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  4197f7:	00 
  4197f8:	48 29 d0             	sub    %rdx,%rax
  4197fb:	49 8d 54 84 1c       	lea    0x1c(%r12,%rax,4),%rdx
	if (__p)
  419800:	48 85 ff             	test   %rdi,%rdi
  419803:	74 1c                	je     419821 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x161>
      { ::operator delete(__p); }
  419805:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41980c:	ff ff ff 
  41980f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  419814:	49 89 df             	mov    %rbx,%r15
  419817:	48 01 d8             	add    %rbx,%rax
  41981a:	ff d0                	callq  *%rax
  41981c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	this->_M_impl._M_start = __new_start;
  419821:	4c 89 65 00          	mov    %r12,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  419825:	48 89 55 08          	mov    %rdx,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  419829:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
      }
  41982d:	48 83 c4 18          	add    $0x18,%rsp
  419831:	5b                   	pop    %rbx
  419832:	5d                   	pop    %rbp
  419833:	41 5c                	pop    %r12
  419835:	41 5d                	pop    %r13
  419837:	41 5e                	pop    %r14
  419839:	41 5f                	pop    %r15
  41983b:	c3                   	retq   
  41983c:	0f 1f 40 00          	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  419840:	48 85 d2             	test   %rdx,%rdx
  419843:	75 10                	jne    419855 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x195>
  419845:	ba 1c 00 00 00       	mov    $0x1c,%edx
  41984a:	45 31 ed             	xor    %r13d,%r13d
  41984d:	45 31 e4             	xor    %r12d,%r12d
  419850:	e9 0f ff ff ff       	jmpq   419764 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xa4>
  419855:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  41985c:	00 
  41985d:	49 29 d5             	sub    %rdx,%r13
  419860:	49 c1 e5 02          	shl    $0x2,%r13
  419864:	e9 cd fe ff ff       	jmpq   419736 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  419869:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000419870 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  419870:	41 57                	push   %r15
  419872:	41 56                	push   %r14
  419874:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 419870 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
  41987b:	41 55                	push   %r13
  41987d:	41 54                	push   %r12
  41987f:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  419886:	ff ff ff 
  419889:	55                   	push   %rbp
  41988a:	53                   	push   %rbx
  41988b:	49 bb 90 17 21 00 00 	movabs $0x211790,%r11
  419892:	00 00 00 
  419895:	4d 01 df             	add    %r11,%r15
  419898:	48 83 ec 58          	sub    $0x58,%rsp
      while (__x != 0)
  41989c:	48 85 f6             	test   %rsi,%rsi
  41989f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  4198a4:	48 b8 70 e8 de ff ff 	movabs $0xffffffffffdee870,%rax
  4198ab:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  4198ae:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
	  _M_erase(_S_right(__x));
  4198b3:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
      while (__x != 0)
  4198b7:	0f 84 d3 01 00 00    	je     419a90 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x220>
  4198bd:	49 89 fd             	mov    %rdi,%r13
  4198c0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  4198c5:	48 8b 40 18          	mov    0x18(%rax),%rax
  4198c9:	48 85 c0             	test   %rax,%rax
  4198cc:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  4198d1:	0f 84 95 01 00 00    	je     419a6c <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1fc>
  4198d7:	48 8b 40 18          	mov    0x18(%rax),%rax
  4198db:	48 85 c0             	test   %rax,%rax
  4198de:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  4198e3:	0f 84 5c 01 00 00    	je     419a45 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1d5>
  4198e9:	48 8b 40 18          	mov    0x18(%rax),%rax
  4198ed:	48 85 c0             	test   %rax,%rax
  4198f0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  4198f5:	0f 84 23 01 00 00    	je     419a1e <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1ae>
  4198fb:	48 8b 40 18          	mov    0x18(%rax),%rax
  4198ff:	48 85 c0             	test   %rax,%rax
  419902:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  419907:	0f 84 ea 00 00 00    	je     4199f7 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x187>
  41990d:	48 8b 40 18          	mov    0x18(%rax),%rax
  419911:	48 85 c0             	test   %rax,%rax
  419914:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419919:	0f 84 b1 00 00 00    	je     4199d0 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x160>
  41991f:	48 8b 40 18          	mov    0x18(%rax),%rax
  419923:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  419928:	48 85 c0             	test   %rax,%rax
  41992b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  419930:	4a 8d 2c 3a          	lea    (%rdx,%r15,1),%rbp
  419934:	74 73                	je     4199a9 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x139>
  419936:	48 8b 40 18          	mov    0x18(%rax),%rax
  41993a:	48 85 c0             	test   %rax,%rax
  41993d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  419942:	74 4a                	je     41998e <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x11e>
  419944:	0f 1f 40 00          	nopl   0x0(%rax)
  419948:	4c 8b 70 18          	mov    0x18(%rax),%r14
  41994c:	4d 85 f6             	test   %r14,%r14
  41994f:	74 27                	je     419978 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x108>
  419951:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  419958:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41995c:	4c 89 ef             	mov    %r13,%rdi
  41995f:	41 ff d4             	callq  *%r12
  419962:	49 8b 5e 10          	mov    0x10(%r14),%rbx
  419966:	4c 89 f7             	mov    %r14,%rdi
  419969:	ff d5                	callq  *%rbp
      while (__x != 0)
  41996b:	48 85 db             	test   %rbx,%rbx
  41996e:	49 89 de             	mov    %rbx,%r14
  419971:	75 e5                	jne    419958 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xe8>
  419973:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  419978:	48 8b 58 10          	mov    0x10(%rax),%rbx
  41997c:	48 89 c7             	mov    %rax,%rdi
  41997f:	ff d5                	callq  *%rbp
  419981:	48 85 db             	test   %rbx,%rbx
  419984:	48 89 d8             	mov    %rbx,%rax
  419987:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  41998c:	75 ba                	jne    419948 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xd8>
  41998e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  419993:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419997:	48 89 c7             	mov    %rax,%rdi
  41999a:	ff d5                	callq  *%rbp
  41999c:	48 85 db             	test   %rbx,%rbx
  41999f:	48 89 d8             	mov    %rbx,%rax
  4199a2:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  4199a7:	75 8d                	jne    419936 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xc6>
  4199a9:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  4199ae:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4199b2:	48 89 c7             	mov    %rax,%rdi
  4199b5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4199ba:	4c 01 f8             	add    %r15,%rax
  4199bd:	ff d0                	callq  *%rax
  4199bf:	48 85 db             	test   %rbx,%rbx
  4199c2:	48 89 d8             	mov    %rbx,%rax
  4199c5:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  4199ca:	0f 85 4f ff ff ff    	jne    41991f <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xaf>
  4199d0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  4199d5:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4199d9:	48 89 c7             	mov    %rax,%rdi
  4199dc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4199e1:	4c 01 f8             	add    %r15,%rax
  4199e4:	ff d0                	callq  *%rax
  4199e6:	48 85 db             	test   %rbx,%rbx
  4199e9:	48 89 d8             	mov    %rbx,%rax
  4199ec:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  4199f1:	0f 85 16 ff ff ff    	jne    41990d <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x9d>
  4199f7:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4199fc:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419a00:	48 89 c7             	mov    %rax,%rdi
  419a03:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419a08:	4c 01 f8             	add    %r15,%rax
  419a0b:	ff d0                	callq  *%rax
  419a0d:	48 85 db             	test   %rbx,%rbx
  419a10:	48 89 d8             	mov    %rbx,%rax
  419a13:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  419a18:	0f 85 dd fe ff ff    	jne    4198fb <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x8b>
  419a1e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  419a23:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419a27:	48 89 c7             	mov    %rax,%rdi
  419a2a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419a2f:	4c 01 f8             	add    %r15,%rax
  419a32:	ff d0                	callq  *%rax
  419a34:	48 85 db             	test   %rbx,%rbx
  419a37:	48 89 d8             	mov    %rbx,%rax
  419a3a:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  419a3f:	0f 85 a4 fe ff ff    	jne    4198e9 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x79>
  419a45:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  419a4a:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419a4e:	48 89 c7             	mov    %rax,%rdi
  419a51:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419a56:	4c 01 f8             	add    %r15,%rax
  419a59:	ff d0                	callq  *%rax
  419a5b:	48 85 db             	test   %rbx,%rbx
  419a5e:	48 89 d8             	mov    %rbx,%rax
  419a61:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  419a66:	0f 85 6b fe ff ff    	jne    4198d7 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x67>
  419a6c:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  419a71:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419a75:	48 89 c7             	mov    %rax,%rdi
  419a78:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419a7d:	4c 01 f8             	add    %r15,%rax
  419a80:	ff d0                	callq  *%rax
  419a82:	48 85 db             	test   %rbx,%rbx
  419a85:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  419a8a:	0f 85 30 fe ff ff    	jne    4198c0 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x50>
    }
  419a90:	48 83 c4 58          	add    $0x58,%rsp
  419a94:	5b                   	pop    %rbx
  419a95:	5d                   	pop    %rbp
  419a96:	41 5c                	pop    %r12
  419a98:	41 5d                	pop    %r13
  419a9a:	41 5e                	pop    %r14
  419a9c:	41 5f                	pop    %r15
  419a9e:	c3                   	retq   
  419a9f:	90                   	nop

0000000000419aa0 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE>:
    basic_command_line_parser<charT>::extra_parser(ext_parser ext)
  419aa0:	41 57                	push   %r15
  419aa2:	41 54                	push   %r12
  419aa4:	49 bb 60 15 21 00 00 	movabs $0x211560,%r11
  419aab:	00 00 00 
  419aae:	55                   	push   %rbp
  419aaf:	53                   	push   %rbx
  419ab0:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 419aa0 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE>
  419ab7:	49 89 fc             	mov    %rdi,%r12
  419aba:	48 83 ec 28          	sub    $0x28,%rsp
  419abe:	48 8b 06             	mov    (%rsi),%rax
  419ac1:	4c 01 db             	add    %r11,%rbx
  419ac4:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  419acb:	00 
#endif

  private:
    void assign_to_own(const BOOST_FUNCTION_FUNCTION& f)
    {
      if (!f.empty()) {
  419acc:	48 85 c0             	test   %rax,%rax
  419acf:	74 23                	je     419af4 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x54>
        this->vtable = f.vtable;
        if (this->has_trivial_copy_and_destroy())
  419ad1:	a8 01                	test   $0x1,%al
        this->vtable = f.vtable;
  419ad3:	48 89 04 24          	mov    %rax,(%rsp)
        if (this->has_trivial_copy_and_destroy())
  419ad7:	74 6f                	je     419b48 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xa8>
          this->functor = f.functor;
  419ad9:	48 8b 46 08          	mov    0x8(%rsi),%rax
  419add:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  419ae2:	48 8b 46 10          	mov    0x10(%rsi),%rax
  419ae6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  419aeb:	48 8b 46 18          	mov    0x18(%rsi),%rax
  419aef:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  419af4:	48 89 e5             	mov    %rsp,%rbp
        detail::cmdline::set_additional_parser(ext);
  419af7:	48 b8 a0 ea dd ff ff 	movabs $0xffffffffffddeaa0,%rax
  419afe:	ff ff ff 
  419b01:	48 89 ee             	mov    %rbp,%rsi
  419b04:	4c 89 e7             	mov    %r12,%rdi
  419b07:	49 89 df             	mov    %rbx,%r15
  419b0a:	48 01 d8             	add    %rbx,%rax
  419b0d:	ff d0                	callq  *%rax
      if (vtable) {
  419b0f:	48 8b 04 24          	mov    (%rsp),%rax
  419b13:	48 85 c0             	test   %rax,%rax
  419b16:	74 1e                	je     419b36 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x96>
        if (!this->has_trivial_copy_and_destroy())
  419b18:	a8 01                	test   $0x1,%al
  419b1a:	75 1a                	jne    419b36 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x96>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  419b1c:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  419b20:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  419b23:	48 85 c0             	test   %rax,%rax
  419b26:	74 0e                	je     419b36 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x96>
            base.manager(functor, functor, destroy_functor_tag);
  419b28:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
  419b2c:	ba 02 00 00 00       	mov    $0x2,%edx
  419b31:	48 89 fe             	mov    %rdi,%rsi
  419b34:	ff d0                	callq  *%rax
    }
  419b36:	48 83 c4 28          	add    $0x28,%rsp
  419b3a:	4c 89 e0             	mov    %r12,%rax
  419b3d:	5b                   	pop    %rbx
  419b3e:	5d                   	pop    %rbp
  419b3f:	41 5c                	pop    %r12
  419b41:	41 5f                	pop    %r15
  419b43:	c3                   	retq   
  419b44:	0f 1f 40 00          	nopl   0x0(%rax)
        else
          get_vtable()->base.manager(f.functor, this->functor,
  419b48:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  419b4d:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
          get_vtable()->base.manager(f.functor, this->functor,
  419b51:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
  419b55:	48 89 e5             	mov    %rsp,%rbp
  419b58:	31 d2                	xor    %edx,%edx
  419b5a:	48 89 ce             	mov    %rcx,%rsi
  419b5d:	ff 10                	callq  *(%rax)
  419b5f:	eb 96                	jmp    419af7 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x57>
      if (vtable) {
  419b61:	48 8b 14 24          	mov    (%rsp),%rdx
  419b65:	49 89 c4             	mov    %rax,%r12
  419b68:	48 85 d2             	test   %rdx,%rdx
  419b6b:	74 1f                	je     419b8c <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xec>
        if (!this->has_trivial_copy_and_destroy())
  419b6d:	f6 c2 01             	test   $0x1,%dl
  419b70:	75 1a                	jne    419b8c <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xec>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  419b72:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
  419b76:	48 8b 0a             	mov    (%rdx),%rcx
          if (base.manager)
  419b79:	48 85 c9             	test   %rcx,%rcx
  419b7c:	74 0e                	je     419b8c <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xec>
            base.manager(functor, functor, destroy_functor_tag);
  419b7e:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
  419b82:	ba 02 00 00 00       	mov    $0x2,%edx
  419b87:	48 89 fe             	mov    %rdi,%rsi
  419b8a:	ff d1                	callq  *%rcx
  419b8c:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  419b93:	ff ff ff 
  419b96:	4c 89 e7             	mov    %r12,%rdi
  419b99:	49 89 df             	mov    %rbx,%r15
  419b9c:	48 01 d8             	add    %rbx,%rax
  419b9f:	ff d0                	callq  *%rax
  419ba1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  419ba8:	00 00 00 
  419bab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000419bb0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  419bb0:	41 57                	push   %r15
  419bb2:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419bb4:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
  419bbb:	aa aa aa 
  419bbe:	41 55                	push   %r13
  419bc0:	41 54                	push   %r12
  419bc2:	49 bb 50 14 21 00 00 	movabs $0x211450,%r11
  419bc9:	00 00 00 
  419bcc:	55                   	push   %rbp
  419bcd:	53                   	push   %rbx
  419bce:	48 89 fb             	mov    %rdi,%rbx
  419bd1:	48 8d 2d d8 ff ff ff 	lea    -0x28(%rip),%rbp        # 419bb0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>
  419bd8:	49 89 f6             	mov    %rsi,%r14
  419bdb:	48 83 ec 18          	sub    $0x18,%rsp
  419bdf:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  419be3:	48 8b 3f             	mov    (%rdi),%rdi
  419be6:	4c 01 dd             	add    %r11,%rbp
  419be9:	4c 89 c2             	mov    %r8,%rdx
  419bec:	48 29 fa             	sub    %rdi,%rdx
  419bef:	48 89 d0             	mov    %rdx,%rax
  419bf2:	48 c1 f8 02          	sar    $0x2,%rax
  419bf6:	48 0f af c1          	imul   %rcx,%rax
  419bfa:	48 85 c0             	test   %rax,%rax
  419bfd:	74 21                	je     419c20 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x70>
  419bff:	48 01 c0             	add    %rax,%rax
  419c02:	72 13                	jb     419c17 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  419c04:	48 b9 55 55 55 55 55 	movabs $0x1555555555555555,%rcx
  419c0b:	55 55 15 
  419c0e:	48 39 c8             	cmp    %rcx,%rax
  419c11:	0f 86 c9 00 00 00    	jbe    419ce0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x130>
  419c17:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  419c1e:	eb 06                	jmp    419c26 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  419c20:	41 bd 0c 00 00 00    	mov    $0xc,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419c26:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  419c2d:	ff ff ff 
  419c30:	4c 89 ef             	mov    %r13,%rdi
  419c33:	49 89 ef             	mov    %rbp,%r15
  419c36:	48 01 e8             	add    %rbp,%rax
  419c39:	ff d0                	callq  *%rax
  419c3b:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  419c3f:	48 8b 3b             	mov    (%rbx),%rdi
  419c42:	48 8d 48 0c          	lea    0xc(%rax),%rcx
  419c46:	49 89 c4             	mov    %rax,%r12
  419c49:	49 01 c5             	add    %rax,%r13
  419c4c:	4c 89 c2             	mov    %r8,%rdx
  419c4f:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419c52:	4c 01 e2             	add    %r12,%rdx
  419c55:	74 0d                	je     419c64 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xb4>
  419c57:	49 8b 06             	mov    (%r14),%rax
  419c5a:	48 89 02             	mov    %rax,(%rdx)
  419c5d:	41 8b 46 08          	mov    0x8(%r14),%eax
  419c61:	89 42 08             	mov    %eax,0x8(%rdx)
  419c64:	4c 39 c7             	cmp    %r8,%rdi
  419c67:	74 35                	je     419c9e <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xee>
  419c69:	48 89 fa             	mov    %rdi,%rdx
  419c6c:	4c 89 e1             	mov    %r12,%rcx
  419c6f:	90                   	nop
  419c70:	48 85 c9             	test   %rcx,%rcx
  419c73:	74 0c                	je     419c81 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xd1>
  419c75:	48 8b 32             	mov    (%rdx),%rsi
  419c78:	48 89 31             	mov    %rsi,(%rcx)
  419c7b:	8b 72 08             	mov    0x8(%rdx),%esi
  419c7e:	89 71 08             	mov    %esi,0x8(%rcx)
  419c81:	48 83 c2 0c          	add    $0xc,%rdx
  419c85:	48 83 c1 0c          	add    $0xc,%rcx
  419c89:	4c 39 c2             	cmp    %r8,%rdx
  419c8c:	75 e2                	jne    419c70 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xc0>
  419c8e:	48 8d 47 0c          	lea    0xc(%rdi),%rax
  419c92:	48 29 c2             	sub    %rax,%rdx
  419c95:	48 c1 ea 02          	shr    $0x2,%rdx
  419c99:	49 8d 4c 94 18       	lea    0x18(%r12,%rdx,4),%rcx
	if (__p)
  419c9e:	48 85 ff             	test   %rdi,%rdi
  419ca1:	74 1c                	je     419cbf <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x10f>
      { ::operator delete(__p); }
  419ca3:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  419caa:	ff ff ff 
  419cad:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  419cb2:	49 89 ef             	mov    %rbp,%r15
  419cb5:	48 01 e8             	add    %rbp,%rax
  419cb8:	ff d0                	callq  *%rax
  419cba:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_start = __new_start;
  419cbf:	4c 89 23             	mov    %r12,(%rbx)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  419cc2:	4c 89 6b 10          	mov    %r13,0x10(%rbx)
	this->_M_impl._M_finish = __new_finish;
  419cc6:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
      }
  419cca:	48 83 c4 18          	add    $0x18,%rsp
  419cce:	5b                   	pop    %rbx
  419ccf:	5d                   	pop    %rbp
  419cd0:	41 5c                	pop    %r12
  419cd2:	41 5d                	pop    %r13
  419cd4:	41 5e                	pop    %r14
  419cd6:	41 5f                	pop    %r15
  419cd8:	c3                   	retq   
  419cd9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  419ce0:	48 85 c0             	test   %rax,%rax
  419ce3:	75 10                	jne    419cf5 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x145>
  419ce5:	b9 0c 00 00 00       	mov    $0xc,%ecx
  419cea:	45 31 ed             	xor    %r13d,%r13d
  419ced:	45 31 e4             	xor    %r12d,%r12d
  419cf0:	e9 5d ff ff ff       	jmpq   419c52 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xa2>
  419cf5:	4c 8d 2c 40          	lea    (%rax,%rax,2),%r13
  419cf9:	49 c1 e5 02          	shl    $0x2,%r13
  419cfd:	e9 24 ff ff ff       	jmpq   419c26 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  419d02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  419d09:	00 00 00 
  419d0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000419d10 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  419d10:	41 57                	push   %r15
  419d12:	41 56                	push   %r14
  419d14:	49 bb f0 12 21 00 00 	movabs $0x2112f0,%r11
  419d1b:	00 00 00 
  419d1e:	41 55                	push   %r13
  419d20:	41 54                	push   %r12
  419d22:	49 89 fc             	mov    %rdi,%r12
  419d25:	55                   	push   %rbp
  419d26:	53                   	push   %rbx
  419d27:	48 8d 2d e2 ff ff ff 	lea    -0x1e(%rip),%rbp        # 419d10 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>
  419d2e:	49 89 f6             	mov    %rsi,%r14
  419d31:	48 83 ec 18          	sub    $0x18,%rsp
  419d35:	4d 8b 44 24 08       	mov    0x8(%r12),%r8
  419d3a:	48 8b 3f             	mov    (%rdi),%rdi
  419d3d:	4c 01 dd             	add    %r11,%rbp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419d40:	4c 89 c2             	mov    %r8,%rdx
  419d43:	48 29 fa             	sub    %rdi,%rdx
  419d46:	48 89 d0             	mov    %rdx,%rax
  419d49:	48 c1 f8 03          	sar    $0x3,%rax
  419d4d:	48 85 c0             	test   %rax,%rax
  419d50:	74 26                	je     419d78 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x68>
  419d52:	48 01 c0             	add    %rax,%rax
  419d55:	72 13                	jb     419d6a <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x5a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  419d57:	48 b9 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rcx
  419d5e:	ff ff 1f 
  419d61:	48 39 c8             	cmp    %rcx,%rax
  419d64:	0f 86 c6 00 00 00    	jbe    419e30 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x120>
  419d6a:	48 c7 c3 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rbx
  419d71:	eb 0a                	jmp    419d7d <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x6d>
  419d73:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  419d78:	bb 08 00 00 00       	mov    $0x8,%ebx
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419d7d:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  419d84:	ff ff ff 
  419d87:	48 89 df             	mov    %rbx,%rdi
  419d8a:	49 89 ef             	mov    %rbp,%r15
  419d8d:	48 01 e8             	add    %rbp,%rax
  419d90:	ff d0                	callq  *%rax
  419d92:	4d 8b 44 24 08       	mov    0x8(%r12),%r8
  419d97:	49 8b 3c 24          	mov    (%r12),%rdi
  419d9b:	48 8d 48 08          	lea    0x8(%rax),%rcx
  419d9f:	49 89 c5             	mov    %rax,%r13
  419da2:	48 01 c3             	add    %rax,%rbx
  419da5:	4c 89 c2             	mov    %r8,%rdx
  419da8:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419dab:	4c 01 ea             	add    %r13,%rdx
  419dae:	74 06                	je     419db6 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xa6>
  419db0:	49 8b 06             	mov    (%r14),%rax
  419db3:	48 89 02             	mov    %rax,(%rdx)
  419db6:	4c 39 c7             	cmp    %r8,%rdi
  419db9:	74 35                	je     419df0 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xe0>
  419dbb:	48 89 fa             	mov    %rdi,%rdx
  419dbe:	4c 89 e9             	mov    %r13,%rcx
  419dc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  419dc8:	48 85 c9             	test   %rcx,%rcx
  419dcb:	74 06                	je     419dd3 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xc3>
  419dcd:	48 8b 32             	mov    (%rdx),%rsi
  419dd0:	48 89 31             	mov    %rsi,(%rcx)
  419dd3:	48 83 c2 08          	add    $0x8,%rdx
  419dd7:	48 83 c1 08          	add    $0x8,%rcx
  419ddb:	4c 39 c2             	cmp    %r8,%rdx
  419dde:	75 e8                	jne    419dc8 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xb8>
  419de0:	48 8d 47 08          	lea    0x8(%rdi),%rax
  419de4:	48 29 c2             	sub    %rax,%rdx
  419de7:	48 c1 ea 03          	shr    $0x3,%rdx
  419deb:	49 8d 4c d5 10       	lea    0x10(%r13,%rdx,8),%rcx
	if (__p)
  419df0:	48 85 ff             	test   %rdi,%rdi
  419df3:	74 1c                	je     419e11 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x101>
      { ::operator delete(__p); }
  419df5:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  419dfc:	ff ff ff 
  419dff:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  419e04:	49 89 ef             	mov    %rbp,%r15
  419e07:	48 01 e8             	add    %rbp,%rax
  419e0a:	ff d0                	callq  *%rax
  419e0c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_start = __new_start;
  419e11:	4d 89 2c 24          	mov    %r13,(%r12)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  419e15:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
	this->_M_impl._M_finish = __new_finish;
  419e1a:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
      }
  419e1f:	48 83 c4 18          	add    $0x18,%rsp
  419e23:	5b                   	pop    %rbx
  419e24:	5d                   	pop    %rbp
  419e25:	41 5c                	pop    %r12
  419e27:	41 5d                	pop    %r13
  419e29:	41 5e                	pop    %r14
  419e2b:	41 5f                	pop    %r15
  419e2d:	c3                   	retq   
  419e2e:	66 90                	xchg   %ax,%ax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  419e30:	48 85 c0             	test   %rax,%rax
  419e33:	75 0f                	jne    419e44 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x134>
  419e35:	b9 08 00 00 00       	mov    $0x8,%ecx
  419e3a:	31 db                	xor    %ebx,%ebx
  419e3c:	45 31 ed             	xor    %r13d,%r13d
  419e3f:	e9 67 ff ff ff       	jmpq   419dab <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x9b>
  419e44:	48 8d 1c c5 00 00 00 	lea    0x0(,%rax,8),%rbx
  419e4b:	00 
  419e4c:	e9 2c ff ff ff       	jmpq   419d7d <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x6d>
  419e51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  419e58:	00 00 00 
  419e5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000419e60 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  419e60:	41 57                	push   %r15
  419e62:	41 56                	push   %r14
  419e64:	49 bb a0 11 21 00 00 	movabs $0x2111a0,%r11
  419e6b:	00 00 00 
  419e6e:	41 55                	push   %r13
  419e70:	4c 8d 2d e9 ff ff ff 	lea    -0x17(%rip),%r13        # 419e60 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_>
  419e77:	41 54                	push   %r12
  419e79:	55                   	push   %rbp
  419e7a:	53                   	push   %rbx
  419e7b:	48 89 fd             	mov    %rdi,%rbp
  419e7e:	4d 01 dd             	add    %r11,%r13
  419e81:	48 83 ec 18          	sub    $0x18,%rsp
	if (!_M_buckets)
  419e85:	48 83 3f 00          	cmpq   $0x0,(%rdi)
	__bucket_type* __buckets = nullptr;
  419e89:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  419e90:	00 
	if (!_M_buckets)
  419e91:	0f 84 ce 00 00 00    	je     419f65 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x105>
	    if (!__ht._M_before_begin._M_nxt)
  419e97:	48 8b 5e 10          	mov    0x10(%rsi),%rbx
  419e9b:	48 85 db             	test   %rbx,%rbx
  419e9e:	0f 84 b2 00 00 00    	je     419f56 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xf6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419ea4:	49 be c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%r14
  419eab:	ff ff ff 
  419eae:	bf 18 00 00 00       	mov    $0x18,%edi
  419eb3:	4d 89 ef             	mov    %r13,%r15
  419eb6:	4b 8d 04 2e          	lea    (%r14,%r13,1),%rax
  419eba:	ff d0                	callq  *%rax
    _Hash_node_base() noexcept : _M_nxt() { }
  419ebc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  419ec3:	49 89 c4             	mov    %rax,%r12
  419ec6:	48 8b 43 08          	mov    0x8(%rbx),%rax
    { return __num % __den; }
  419eca:	31 d2                	xor    %edx,%edx
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  419ecc:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
  419ed0:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  419ed5:	48 8b 43 10          	mov    0x10(%rbx),%rax
	    _M_before_begin._M_nxt = __this_n;
  419ed9:	4c 89 65 10          	mov    %r12,0x10(%rbp)
      { __to->_M_hash_code = __from->_M_hash_code; }
  419edd:	49 89 44 24 10       	mov    %rax,0x10(%r12)
    { return __num % __den; }
  419ee2:	48 f7 75 08          	divq   0x8(%rbp)
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  419ee6:	48 8b 45 00          	mov    0x0(%rbp),%rax
  419eea:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  419eee:	48 8b 1b             	mov    (%rbx),%rbx
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  419ef1:	48 85 db             	test   %rbx,%rbx
  419ef4:	74 60                	je     419f56 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xf6>
  419ef6:	4d 01 ee             	add    %r13,%r14
  419ef9:	eb 10                	jmp    419f0b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xab>
  419efb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  419f00:	48 8b 1b             	mov    (%rbx),%rbx
  419f03:	49 89 cc             	mov    %rcx,%r12
  419f06:	48 85 db             	test   %rbx,%rbx
  419f09:	74 4b                	je     419f56 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xf6>
  419f0b:	bf 18 00 00 00       	mov    $0x18,%edi
  419f10:	4d 89 ef             	mov    %r13,%r15
  419f13:	41 ff d6             	callq  *%r14
    _Hash_node_base() noexcept : _M_nxt() { }
  419f16:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  419f1d:	48 89 c1             	mov    %rax,%rcx
  419f20:	48 8b 43 08          	mov    0x8(%rbx),%rax
    { return __num % __den; }
  419f24:	31 d2                	xor    %edx,%edx
  419f26:	48 89 41 08          	mov    %rax,0x8(%rcx)
  419f2a:	48 8b 43 10          	mov    0x10(%rbx),%rax
		__prev_n->_M_nxt = __this_n;
  419f2e:	49 89 0c 24          	mov    %rcx,(%r12)
      { __to->_M_hash_code = __from->_M_hash_code; }
  419f32:	48 89 41 10          	mov    %rax,0x10(%rcx)
    { return __num % __den; }
  419f36:	48 f7 75 08          	divq   0x8(%rbp)
		if (!_M_buckets[__bkt])
  419f3a:	48 8b 45 00          	mov    0x0(%rbp),%rax
  419f3e:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  419f42:	48 83 38 00          	cmpq   $0x0,(%rax)
  419f46:	75 b8                	jne    419f00 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xa0>
		  _M_buckets[__bkt] = __prev_n;
  419f48:	4c 89 20             	mov    %r12,(%rax)
  419f4b:	48 8b 1b             	mov    (%rbx),%rbx
  419f4e:	49 89 cc             	mov    %rcx,%r12
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  419f51:	48 85 db             	test   %rbx,%rbx
  419f54:	75 b5                	jne    419f0b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xab>
      }
  419f56:	48 83 c4 18          	add    $0x18,%rsp
  419f5a:	5b                   	pop    %rbx
  419f5b:	5d                   	pop    %rbp
  419f5c:	41 5c                	pop    %r12
  419f5e:	41 5d                	pop    %r13
  419f60:	41 5e                	pop    %r14
  419f62:	41 5f                	pop    %r15
  419f64:	c3                   	retq   
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  419f65:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
	if (__builtin_expect(__n == 1, false))
  419f69:	48 83 ff 01          	cmp    $0x1,%rdi
  419f6d:	74 26                	je     419f95 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x135>
	return __hashtable_alloc::_M_allocate_buckets(__n);
  419f6f:	48 b8 80 2d de ff ff 	movabs $0xffffffffffde2d80,%rax
  419f76:	ff ff ff 
  419f79:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  419f7e:	4c 01 e8             	add    %r13,%rax
  419f81:	ff d0                	callq  *%rax
  419f83:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  419f88:	48 89 04 24          	mov    %rax,(%rsp)
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  419f8c:	48 89 45 00          	mov    %rax,0x0(%rbp)
  419f90:	e9 02 ff ff ff       	jmpq   419e97 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x37>
	    return &_M_single_bucket;
  419f95:	48 8d 45 30          	lea    0x30(%rbp),%rax
	    _M_single_bucket = nullptr;
  419f99:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
  419fa0:	00 
	    return &_M_single_bucket;
  419fa1:	48 89 04 24          	mov    %rax,(%rsp)
  419fa5:	eb e5                	jmp    419f8c <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x12c>
	__catch(...)
  419fa7:	48 89 c7             	mov    %rax,%rdi
  419faa:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  419fb1:	ff ff ff 
  419fb4:	4d 89 ef             	mov    %r13,%r15
  419fb7:	4c 01 e8             	add    %r13,%rax
  419fba:	ff d0                	callq  *%rax
	    clear();
  419fbc:	48 b8 90 da de ff ff 	movabs $0xffffffffffdeda90,%rax
  419fc3:	ff ff ff 
  419fc6:	48 89 ef             	mov    %rbp,%rdi
  419fc9:	4c 01 e8             	add    %r13,%rax
  419fcc:	ff d0                	callq  *%rax
	    if (__buckets)
  419fce:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  419fd3:	74 1c                	je     419ff1 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x191>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  419fd5:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  419fd9:	48 83 c5 30          	add    $0x30,%rbp
	if (_M_uses_single_bucket(__bkts))
  419fdd:	48 39 ef             	cmp    %rbp,%rdi
  419fe0:	74 0f                	je     419ff1 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x191>
      { ::operator delete(__p); }
  419fe2:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  419fe9:	ff ff ff 
  419fec:	4c 01 e8             	add    %r13,%rax
  419fef:	ff d0                	callq  *%rax
	    __throw_exception_again;
  419ff1:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  419ff8:	ff ff ff 
  419ffb:	4d 89 ef             	mov    %r13,%r15
  419ffe:	4c 01 e8             	add    %r13,%rax
  41a001:	ff d0                	callq  *%rax
	__catch(...)
  41a003:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  41a00a:	ff ff ff 
  41a00d:	48 89 c3             	mov    %rax,%rbx
  41a010:	4d 89 ef             	mov    %r13,%r15
  41a013:	4c 01 ea             	add    %r13,%rdx
  41a016:	ff d2                	callq  *%rdx
  41a018:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41a01f:	ff ff ff 
  41a022:	48 89 df             	mov    %rbx,%rdi
  41a025:	4c 01 e8             	add    %r13,%rax
  41a028:	ff d0                	callq  *%rax
  41a02a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000041a030 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41a030:	41 57                	push   %r15
  41a032:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a034:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
  41a03b:	aa aa aa 
  41a03e:	41 55                	push   %r13
  41a040:	41 54                	push   %r12
  41a042:	49 bb d0 0f 21 00 00 	movabs $0x210fd0,%r11
  41a049:	00 00 00 
  41a04c:	55                   	push   %rbp
  41a04d:	53                   	push   %rbx
  41a04e:	48 89 fb             	mov    %rdi,%rbx
  41a051:	48 8d 2d d8 ff ff ff 	lea    -0x28(%rip),%rbp        # 41a030 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>
  41a058:	49 89 f6             	mov    %rsi,%r14
  41a05b:	48 83 ec 18          	sub    $0x18,%rsp
  41a05f:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  41a063:	48 8b 3f             	mov    (%rdi),%rdi
  41a066:	4c 01 dd             	add    %r11,%rbp
  41a069:	4c 89 c2             	mov    %r8,%rdx
  41a06c:	48 29 fa             	sub    %rdi,%rdx
  41a06f:	48 89 d0             	mov    %rdx,%rax
  41a072:	48 c1 f8 02          	sar    $0x2,%rax
  41a076:	48 0f af c1          	imul   %rcx,%rax
  41a07a:	48 85 c0             	test   %rax,%rax
  41a07d:	74 21                	je     41a0a0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x70>
  41a07f:	48 01 c0             	add    %rax,%rax
  41a082:	72 13                	jb     41a097 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41a084:	48 b9 55 55 55 55 55 	movabs $0x1555555555555555,%rcx
  41a08b:	55 55 15 
  41a08e:	48 39 c8             	cmp    %rcx,%rax
  41a091:	0f 86 c9 00 00 00    	jbe    41a160 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x130>
  41a097:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  41a09e:	eb 06                	jmp    41a0a6 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  41a0a0:	41 bd 0c 00 00 00    	mov    $0xc,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41a0a6:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41a0ad:	ff ff ff 
  41a0b0:	4c 89 ef             	mov    %r13,%rdi
  41a0b3:	49 89 ef             	mov    %rbp,%r15
  41a0b6:	48 01 e8             	add    %rbp,%rax
  41a0b9:	ff d0                	callq  *%rax
  41a0bb:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  41a0bf:	48 8b 3b             	mov    (%rbx),%rdi
  41a0c2:	48 8d 48 0c          	lea    0xc(%rax),%rcx
  41a0c6:	49 89 c4             	mov    %rax,%r12
  41a0c9:	49 01 c5             	add    %rax,%r13
  41a0cc:	4c 89 c2             	mov    %r8,%rdx
  41a0cf:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41a0d2:	4c 01 e2             	add    %r12,%rdx
  41a0d5:	74 0d                	je     41a0e4 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xb4>
  41a0d7:	49 8b 06             	mov    (%r14),%rax
  41a0da:	48 89 02             	mov    %rax,(%rdx)
  41a0dd:	41 8b 46 08          	mov    0x8(%r14),%eax
  41a0e1:	89 42 08             	mov    %eax,0x8(%rdx)
  41a0e4:	4c 39 c7             	cmp    %r8,%rdi
  41a0e7:	74 35                	je     41a11e <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xee>
  41a0e9:	48 89 fa             	mov    %rdi,%rdx
  41a0ec:	4c 89 e1             	mov    %r12,%rcx
  41a0ef:	90                   	nop
  41a0f0:	48 85 c9             	test   %rcx,%rcx
  41a0f3:	74 0c                	je     41a101 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xd1>
  41a0f5:	48 8b 32             	mov    (%rdx),%rsi
  41a0f8:	48 89 31             	mov    %rsi,(%rcx)
  41a0fb:	8b 72 08             	mov    0x8(%rdx),%esi
  41a0fe:	89 71 08             	mov    %esi,0x8(%rcx)
  41a101:	48 83 c2 0c          	add    $0xc,%rdx
  41a105:	48 83 c1 0c          	add    $0xc,%rcx
  41a109:	4c 39 c2             	cmp    %r8,%rdx
  41a10c:	75 e2                	jne    41a0f0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xc0>
  41a10e:	48 8d 47 0c          	lea    0xc(%rdi),%rax
  41a112:	48 29 c2             	sub    %rax,%rdx
  41a115:	48 c1 ea 02          	shr    $0x2,%rdx
  41a119:	49 8d 4c 94 18       	lea    0x18(%r12,%rdx,4),%rcx
	if (__p)
  41a11e:	48 85 ff             	test   %rdi,%rdi
  41a121:	74 1c                	je     41a13f <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x10f>
      { ::operator delete(__p); }
  41a123:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41a12a:	ff ff ff 
  41a12d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41a132:	49 89 ef             	mov    %rbp,%r15
  41a135:	48 01 e8             	add    %rbp,%rax
  41a138:	ff d0                	callq  *%rax
  41a13a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_start = __new_start;
  41a13f:	4c 89 23             	mov    %r12,(%rbx)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a142:	4c 89 6b 10          	mov    %r13,0x10(%rbx)
	this->_M_impl._M_finish = __new_finish;
  41a146:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
      }
  41a14a:	48 83 c4 18          	add    $0x18,%rsp
  41a14e:	5b                   	pop    %rbx
  41a14f:	5d                   	pop    %rbp
  41a150:	41 5c                	pop    %r12
  41a152:	41 5d                	pop    %r13
  41a154:	41 5e                	pop    %r14
  41a156:	41 5f                	pop    %r15
  41a158:	c3                   	retq   
  41a159:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41a160:	48 85 c0             	test   %rax,%rax
  41a163:	75 10                	jne    41a175 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x145>
  41a165:	b9 0c 00 00 00       	mov    $0xc,%ecx
  41a16a:	45 31 ed             	xor    %r13d,%r13d
  41a16d:	45 31 e4             	xor    %r12d,%r12d
  41a170:	e9 5d ff ff ff       	jmpq   41a0d2 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xa2>
  41a175:	4c 8d 2c 40          	lea    (%rax,%rax,2),%r13
  41a179:	49 c1 e5 02          	shl    $0x2,%r13
  41a17d:	e9 24 ff ff ff       	jmpq   41a0a6 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  41a182:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a189:	00 00 00 
  41a18c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041a190 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41a190:	41 57                	push   %r15
  41a192:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a194:	48 b9 b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rcx
  41a19b:	db b6 6d 
  41a19e:	41 55                	push   %r13
  41a1a0:	41 54                	push   %r12
  41a1a2:	49 bb 70 0e 21 00 00 	movabs $0x210e70,%r11
  41a1a9:	00 00 00 
  41a1ac:	55                   	push   %rbp
  41a1ad:	53                   	push   %rbx
  41a1ae:	48 89 fd             	mov    %rdi,%rbp
  41a1b1:	48 8d 1d d8 ff ff ff 	lea    -0x28(%rip),%rbx        # 41a190 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>
  41a1b8:	49 89 f6             	mov    %rsi,%r14
  41a1bb:	48 83 ec 18          	sub    $0x18,%rsp
  41a1bf:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  41a1c3:	48 8b 3f             	mov    (%rdi),%rdi
  41a1c6:	4c 01 db             	add    %r11,%rbx
  41a1c9:	4c 89 c0             	mov    %r8,%rax
  41a1cc:	48 29 f8             	sub    %rdi,%rax
  41a1cf:	48 89 c2             	mov    %rax,%rdx
  41a1d2:	48 c1 fa 02          	sar    $0x2,%rdx
  41a1d6:	48 0f af d1          	imul   %rcx,%rdx
  41a1da:	48 85 d2             	test   %rdx,%rdx
  41a1dd:	74 21                	je     41a200 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x70>
  41a1df:	48 01 d2             	add    %rdx,%rdx
  41a1e2:	72 13                	jb     41a1f7 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41a1e4:	48 b9 24 49 92 24 49 	movabs $0x924924924924924,%rcx
  41a1eb:	92 24 09 
  41a1ee:	48 39 ca             	cmp    %rcx,%rdx
  41a1f1:	0f 86 19 01 00 00    	jbe    41a310 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x180>
  41a1f7:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
  41a1fe:	eb 06                	jmp    41a206 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  41a200:	41 bd 1c 00 00 00    	mov    $0x1c,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41a206:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41a20d:	ff ff ff 
  41a210:	4c 89 ef             	mov    %r13,%rdi
  41a213:	49 89 df             	mov    %rbx,%r15
  41a216:	48 01 d8             	add    %rbx,%rax
  41a219:	ff d0                	callq  *%rax
  41a21b:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  41a21f:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  41a223:	49 89 c4             	mov    %rax,%r12
  41a226:	49 01 c5             	add    %rax,%r13
  41a229:	49 8d 54 24 1c       	lea    0x1c(%r12),%rdx
  41a22e:	4c 89 c0             	mov    %r8,%rax
  41a231:	48 29 f8             	sub    %rdi,%rax
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41a234:	4c 01 e0             	add    %r12,%rax
  41a237:	74 1d                	je     41a256 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xc6>
  41a239:	49 8b 0e             	mov    (%r14),%rcx
  41a23c:	48 89 08             	mov    %rcx,(%rax)
  41a23f:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  41a243:	48 89 48 08          	mov    %rcx,0x8(%rax)
  41a247:	49 8b 4e 10          	mov    0x10(%r14),%rcx
  41a24b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41a24f:	41 8b 4e 18          	mov    0x18(%r14),%ecx
  41a253:	89 48 18             	mov    %ecx,0x18(%rax)
  41a256:	4c 39 c7             	cmp    %r8,%rdi
  41a259:	74 75                	je     41a2d0 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x140>
  41a25b:	48 89 fa             	mov    %rdi,%rdx
  41a25e:	4c 89 e1             	mov    %r12,%rcx
  41a261:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41a268:	48 85 c9             	test   %rcx,%rcx
  41a26b:	74 1c                	je     41a289 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xf9>
  41a26d:	48 8b 02             	mov    (%rdx),%rax
  41a270:	48 89 01             	mov    %rax,(%rcx)
  41a273:	48 8b 42 08          	mov    0x8(%rdx),%rax
  41a277:	48 89 41 08          	mov    %rax,0x8(%rcx)
  41a27b:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  41a27f:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  41a283:	8b 72 18             	mov    0x18(%rdx),%esi
  41a286:	89 71 18             	mov    %esi,0x18(%rcx)
  41a289:	48 83 c2 1c          	add    $0x1c,%rdx
  41a28d:	48 83 c1 1c          	add    $0x1c,%rcx
  41a291:	4c 39 c2             	cmp    %r8,%rdx
  41a294:	75 d2                	jne    41a268 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xd8>
  41a296:	48 8d 47 1c          	lea    0x1c(%rdi),%rax
  41a29a:	48 29 c2             	sub    %rax,%rdx
  41a29d:	48 b8 b7 6d db b6 6d 	movabs $0x2db6db6db6db6db7,%rax
  41a2a4:	db b6 2d 
  41a2a7:	48 c1 ea 02          	shr    $0x2,%rdx
  41a2ab:	48 0f af d0          	imul   %rax,%rdx
  41a2af:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
  41a2b6:	ff ff 3f 
  41a2b9:	48 21 c2             	and    %rax,%rdx
  41a2bc:	48 83 c2 01          	add    $0x1,%rdx
  41a2c0:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  41a2c7:	00 
  41a2c8:	48 29 d0             	sub    %rdx,%rax
  41a2cb:	49 8d 54 84 1c       	lea    0x1c(%r12,%rax,4),%rdx
	if (__p)
  41a2d0:	48 85 ff             	test   %rdi,%rdi
  41a2d3:	74 1c                	je     41a2f1 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x161>
      { ::operator delete(__p); }
  41a2d5:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41a2dc:	ff ff ff 
  41a2df:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41a2e4:	49 89 df             	mov    %rbx,%r15
  41a2e7:	48 01 d8             	add    %rbx,%rax
  41a2ea:	ff d0                	callq  *%rax
  41a2ec:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	this->_M_impl._M_start = __new_start;
  41a2f1:	4c 89 65 00          	mov    %r12,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  41a2f5:	48 89 55 08          	mov    %rdx,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a2f9:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
      }
  41a2fd:	48 83 c4 18          	add    $0x18,%rsp
  41a301:	5b                   	pop    %rbx
  41a302:	5d                   	pop    %rbp
  41a303:	41 5c                	pop    %r12
  41a305:	41 5d                	pop    %r13
  41a307:	41 5e                	pop    %r14
  41a309:	41 5f                	pop    %r15
  41a30b:	c3                   	retq   
  41a30c:	0f 1f 40 00          	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41a310:	48 85 d2             	test   %rdx,%rdx
  41a313:	75 10                	jne    41a325 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x195>
  41a315:	ba 1c 00 00 00       	mov    $0x1c,%edx
  41a31a:	45 31 ed             	xor    %r13d,%r13d
  41a31d:	45 31 e4             	xor    %r12d,%r12d
  41a320:	e9 0f ff ff ff       	jmpq   41a234 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xa4>
  41a325:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  41a32c:	00 
  41a32d:	49 29 d5             	sub    %rdx,%r13
  41a330:	49 c1 e5 02          	shl    $0x2,%r13
  41a334:	e9 cd fe ff ff       	jmpq   41a206 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  41a339:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041a340 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41a340:	41 57                	push   %r15
  41a342:	41 56                	push   %r14
  41a344:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 41a340 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_>
  41a34b:	41 55                	push   %r13
  41a34d:	41 54                	push   %r12
  41a34f:	49 bb c0 0c 21 00 00 	movabs $0x210cc0,%r11
  41a356:	00 00 00 
  41a359:	55                   	push   %rbp
  41a35a:	53                   	push   %rbx
  41a35b:	4d 01 de             	add    %r11,%r14
  41a35e:	48 89 fd             	mov    %rdi,%rbp
  41a361:	48 83 ec 18          	sub    $0x18,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a365:	48 8b 47 08          	mov    0x8(%rdi),%rax
  41a369:	48 2b 07             	sub    (%rdi),%rax
  41a36c:	48 c1 f8 02          	sar    $0x2,%rax
  41a370:	48 85 c0             	test   %rax,%rax
  41a373:	74 2b                	je     41a3a0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x60>
  41a375:	48 01 c0             	add    %rax,%rax
  41a378:	72 13                	jb     41a38d <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x4d>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41a37a:	48 ba ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rdx
  41a381:	ff ff 3f 
  41a384:	48 39 d0             	cmp    %rdx,%rax
  41a387:	0f 86 cf 00 00 00    	jbe    41a45c <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x11c>
  41a38d:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  41a394:	eb 10                	jmp    41a3a6 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x66>
  41a396:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a39d:	00 00 00 
  41a3a0:	41 bd 04 00 00 00    	mov    $0x4,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41a3a6:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41a3ad:	ff ff ff 
  41a3b0:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41a3b5:	4c 89 ef             	mov    %r13,%rdi
  41a3b8:	4d 89 f7             	mov    %r14,%r15
  41a3bb:	4c 01 f0             	add    %r14,%rax
  41a3be:	ff d0                	callq  *%rax
  41a3c0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41a3c5:	48 89 c3             	mov    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a3c8:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
  41a3cc:	4c 8b 65 08          	mov    0x8(%rbp),%r12
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41a3d0:	48 89 da             	mov    %rbx,%rdx
  41a3d3:	8b 36                	mov    (%rsi),%esi
  41a3d5:	49 29 cc             	sub    %rcx,%r12
  41a3d8:	4c 89 e0             	mov    %r12,%rax
  41a3db:	48 c1 f8 02          	sar    $0x2,%rax
  41a3df:	4c 01 e2             	add    %r12,%rdx
  41a3e2:	74 02                	je     41a3e6 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xa6>
  41a3e4:	89 32                	mov    %esi,(%rdx)
	  if (_Num)
  41a3e6:	48 85 c0             	test   %rax,%rax
  41a3e9:	75 45                	jne    41a430 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xf0>
	if (__p)
  41a3eb:	48 85 c9             	test   %rcx,%rcx
	    ++__new_finish;
  41a3ee:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  41a3f3:	74 15                	je     41a40a <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xca>
      { ::operator delete(__p); }
  41a3f5:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41a3fc:	ff ff ff 
  41a3ff:	48 89 cf             	mov    %rcx,%rdi
  41a402:	4d 89 f7             	mov    %r14,%r15
  41a405:	4c 01 f0             	add    %r14,%rax
  41a408:	ff d0                	callq  *%rax
	this->_M_impl._M_start = __new_start;
  41a40a:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a40e:	4c 01 eb             	add    %r13,%rbx
	this->_M_impl._M_finish = __new_finish;
  41a411:	4c 89 65 08          	mov    %r12,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a415:	48 89 5d 10          	mov    %rbx,0x10(%rbp)
      }
  41a419:	48 83 c4 18          	add    $0x18,%rsp
  41a41d:	5b                   	pop    %rbx
  41a41e:	5d                   	pop    %rbp
  41a41f:	41 5c                	pop    %r12
  41a421:	41 5d                	pop    %r13
  41a423:	41 5e                	pop    %r14
  41a425:	41 5f                	pop    %r15
  41a427:	c3                   	retq   
  41a428:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41a42f:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  41a430:	48 b8 10 ea dd ff ff 	movabs $0xffffffffffddea10,%rax
  41a437:	ff ff ff 
  41a43a:	4c 89 e2             	mov    %r12,%rdx
  41a43d:	48 89 ce             	mov    %rcx,%rsi
  41a440:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41a445:	48 89 df             	mov    %rbx,%rdi
  41a448:	4d 89 f7             	mov    %r14,%r15
  41a44b:	4c 01 f0             	add    %r14,%rax
	    ++__new_finish;
  41a44e:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  41a453:	ff d0                	callq  *%rax
  41a455:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41a45a:	eb 99                	jmp    41a3f5 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xb5>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41a45c:	45 31 ed             	xor    %r13d,%r13d
  41a45f:	31 db                	xor    %ebx,%ebx
  41a461:	48 85 c0             	test   %rax,%rax
  41a464:	0f 84 5e ff ff ff    	je     41a3c8 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x88>
  41a46a:	4c 8d 2c 85 00 00 00 	lea    0x0(,%rax,4),%r13
  41a471:	00 
  41a472:	e9 2f ff ff ff       	jmpq   41a3a6 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x66>
  41a477:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41a47e:	00 00 

000000000041a480 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv>:

  value_type dereference() const {
  41a480:	41 57                	push   %r15
  41a482:	41 56                	push   %r14
  41a484:	49 bb 80 0b 21 00 00 	movabs $0x210b80,%r11
  41a48b:	00 00 00 
  41a48e:	41 55                	push   %r13
  41a490:	41 54                	push   %r12
  41a492:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41a480 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv>
  41a499:	55                   	push   %rbp
  41a49a:	53                   	push   %rbx
  41a49b:	48 89 fb             	mov    %rdi,%rbx
  41a49e:	4d 01 dc             	add    %r11,%r12
  41a4a1:	48 83 ec 08          	sub    $0x8,%rsp
    switch (m_type) {
  41a4a5:	8b 06                	mov    (%rsi),%eax
  41a4a7:	83 f8 01             	cmp    $0x1,%eax
  41a4aa:	0f 84 d8 00 00 00    	je     41a588 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x108>
  41a4b0:	83 f8 02             	cmp    $0x2,%eax
  41a4b3:	0f 85 8f 01 00 00    	jne    41a648 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
  41a4b9:	48 8b 46 10          	mov    0x10(%rsi),%rax
        return value_type(*m_mapIt->first, *m_mapIt->second);
  41a4bd:	48 8b 50 28          	mov    0x28(%rax),%rdx
  41a4c1:	48 8b 40 20          	mov    0x20(%rax),%rax
    const typename base_type::value_type& v = *this->base();
    if (v.pNode)
      return value_type(Node(*v, m_pMemory));
    if (v.first && v.second)
  41a4c5:	48 85 d2             	test   %rdx,%rdx
  41a4c8:	0f 84 7a 01 00 00    	je     41a648 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
  41a4ce:	48 85 c0             	test   %rax,%rax
  41a4d1:	0f 84 71 01 00 00    	je     41a648 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a4d7:	48 8b 6e 28          	mov    0x28(%rsi),%rbp
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a4db:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a4df:	48 85 ed             	test   %rbp,%rbp
  41a4e2:	0f 84 b8 01 00 00    	je     41a6a0 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x220>
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  41a4e8:	48 8d 4d 08          	lea    0x8(%rbp),%rcx
  41a4ec:	f0 83 01 01          	lock addl $0x1,(%rcx)
  41a4f0:	f0 83 01 01          	lock addl $0x1,(%rcx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a4f4:	4c 8b 6e 28          	mov    0x28(%rsi),%r13
  41a4f8:	4c 8b 46 20          	mov    0x20(%rsi),%r8
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a4fc:	4d 85 ed             	test   %r13,%r13
  41a4ff:	0f 84 9e 01 00 00    	je     41a6a3 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x223>
  41a505:	49 8d 75 08          	lea    0x8(%r13),%rsi
  41a509:	f0 83 06 01          	lock addl $0x1,(%rsi)
  41a50d:	f0 83 06 01          	lock addl $0x1,(%rsi)
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  41a511:	c6 03 00             	movb   $0x0,(%rbx)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41a514:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  41a51b:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41a51c:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  41a523:	00 
  41a524:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  41a52b:	00 
      m_pNode(rhs.m_pNode) {}
  41a52c:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a530:	4c 89 43 28          	mov    %r8,0x28(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a534:	4c 89 6b 30          	mov    %r13,0x30(%rbx)
  41a538:	f0 83 06 01          	lock addl $0x1,(%rsi)
  41a53c:	48 89 43 38          	mov    %rax,0x38(%rbx)
  41a540:	c6 43 40 01          	movb   $0x1,0x40(%rbx)
  41a544:	48 89 7b 48          	mov    %rdi,0x48(%rbx)
  41a548:	48 89 6b 50          	mov    %rbp,0x50(%rbx)
  41a54c:	f0 83 01 01          	lock addl $0x1,(%rcx)
        if( pi_ != 0 ) pi_->release();
  41a550:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  41a557:	ff ff ff 
  41a55a:	4c 89 ef             	mov    %r13,%rdi
  41a55d:	48 89 53 58          	mov    %rdx,0x58(%rbx)
  41a561:	4f 8d 3c 26          	lea    (%r14,%r12,1),%r15
  41a565:	41 ff d7             	callq  *%r15
  41a568:	4c 89 ef             	mov    %r13,%rdi
  41a56b:	41 ff d7             	callq  *%r15
  41a56e:	48 89 ef             	mov    %rbp,%rdi
  41a571:	4d 01 f4             	add    %r14,%r12
  41a574:	41 ff d4             	callq  *%r12
  41a577:	48 89 ef             	mov    %rbp,%rdi
  41a57a:	41 ff d4             	callq  *%r12
  41a57d:	e9 9c 00 00 00       	jmpq   41a61e <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
  41a582:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return value_type(**m_seqIt);
  41a588:	48 8b 46 08          	mov    0x8(%rsi),%rax
  41a58c:	48 8b 08             	mov    (%rax),%rcx
    if (v.pNode)
  41a58f:	48 85 c9             	test   %rcx,%rcx
  41a592:	0f 84 b0 00 00 00    	je     41a648 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a598:	48 8b 6e 28          	mov    0x28(%rsi),%rbp
  41a59c:	48 8b 56 20          	mov    0x20(%rsi),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a5a0:	48 85 ed             	test   %rbp,%rbp
  41a5a3:	0f 84 87 00 00 00    	je     41a630 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1b0>
  41a5a9:	48 8d 45 08          	lea    0x8(%rbp),%rax
  41a5ad:	f0 83 00 01          	lock addl $0x1,(%rax)
  41a5b1:	f0 83 00 01          	lock addl $0x1,(%rax)
  41a5b5:	c6 07 01             	movb   $0x1,(%rdi)
  41a5b8:	48 89 57 08          	mov    %rdx,0x8(%rdi)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a5bc:	48 89 6f 10          	mov    %rbp,0x10(%rdi)
  41a5c0:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41a5c4:	48 85 ed             	test   %rbp,%rbp
  41a5c7:	48 89 4b 18          	mov    %rcx,0x18(%rbx)
  41a5cb:	c6 43 20 00          	movb   $0x0,0x20(%rbx)
  41a5cf:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  41a5d6:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a5d7:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  41a5de:	00 
  41a5df:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  41a5e6:	00 
  41a5e7:	c6 43 40 00          	movb   $0x0,0x40(%rbx)
  41a5eb:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
  41a5f2:	00 
  41a5f3:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
  41a5fa:	00 
  41a5fb:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  41a602:	00 
        if( pi_ != 0 ) pi_->release();
  41a603:	74 19                	je     41a61e <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
  41a605:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41a60c:	ff ff ff 
  41a60f:	48 89 ef             	mov    %rbp,%rdi
  41a612:	49 01 c4             	add    %rax,%r12
  41a615:	41 ff d4             	callq  *%r12
  41a618:	48 89 ef             	mov    %rbp,%rdi
  41a61b:	41 ff d4             	callq  *%r12
      return value_type(Node(*v.first, m_pMemory), Node(*v.second, m_pMemory));
    return value_type();
  }
  41a61e:	48 83 c4 08          	add    $0x8,%rsp
  41a622:	48 89 d8             	mov    %rbx,%rax
  41a625:	5b                   	pop    %rbx
  41a626:	5d                   	pop    %rbp
  41a627:	41 5c                	pop    %r12
  41a629:	41 5d                	pop    %r13
  41a62b:	41 5e                	pop    %r14
  41a62d:	41 5f                	pop    %r15
  41a62f:	c3                   	retq   
  41a630:	c6 07 01             	movb   $0x1,(%rdi)
  41a633:	48 89 57 08          	mov    %rdx,0x8(%rdi)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a637:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  41a63e:	00 
  41a63f:	e9 80 ff ff ff       	jmpq   41a5c4 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x144>
  41a644:	0f 1f 40 00          	nopl   0x0(%rax)
inline Node::Node() : m_isValid(true), m_pNode(NULL) {}
  41a648:	c6 03 01             	movb   $0x1,(%rbx)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41a64b:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  41a652:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41a653:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  41a65a:	00 
  41a65b:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  41a662:	00 
  41a663:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
  41a667:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  41a66e:	00 
  41a66f:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  41a676:	00 
  41a677:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  41a67e:	00 
  41a67f:	c6 43 40 01          	movb   $0x1,0x40(%rbx)
  41a683:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
  41a68a:	00 
  41a68b:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
  41a692:	00 
  41a693:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  41a69a:	00 
  41a69b:	e9 7e ff ff ff       	jmpq   41a61e <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a6a0:	49 89 f8             	mov    %rdi,%r8
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a6a3:	48 85 ed             	test   %rbp,%rbp
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  41a6a6:	c6 03 00             	movb   $0x0,(%rbx)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41a6a9:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  41a6b0:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41a6b1:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  41a6b8:	00 
  41a6b9:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  41a6c0:	00 
      m_pNode(rhs.m_pNode) {}
  41a6c1:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a6c5:	4c 89 43 28          	mov    %r8,0x28(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a6c9:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  41a6d0:	00 
  41a6d1:	48 89 43 38          	mov    %rax,0x38(%rbx)
  41a6d5:	c6 43 40 01          	movb   $0x1,0x40(%rbx)
  41a6d9:	48 89 7b 48          	mov    %rdi,0x48(%rbx)
  41a6dd:	48 89 6b 50          	mov    %rbp,0x50(%rbx)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a6e1:	75 09                	jne    41a6ec <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x26c>
  41a6e3:	48 89 53 58          	mov    %rdx,0x58(%rbx)
  41a6e7:	e9 32 ff ff ff       	jmpq   41a61e <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
  41a6ec:	f0 83 45 08 01       	lock addl $0x1,0x8(%rbp)
  41a6f1:	49 be b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%r14
  41a6f8:	ff ff ff 
  41a6fb:	48 89 53 58          	mov    %rdx,0x58(%rbx)
  41a6ff:	e9 6a fe ff ff       	jmpq   41a56e <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0xee>
  41a704:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a70b:	00 00 00 
  41a70e:	66 90                	xchg   %ax,%ax

000000000041a710 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41a710:	41 57                	push   %r15
  41a712:	41 56                	push   %r14
  41a714:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 41a710 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
  41a71b:	41 55                	push   %r13
  41a71d:	41 54                	push   %r12
  41a71f:	49 bb f0 08 21 00 00 	movabs $0x2108f0,%r11
  41a726:	00 00 00 
  41a729:	55                   	push   %rbp
  41a72a:	53                   	push   %rbx
  41a72b:	4d 01 de             	add    %r11,%r14
  41a72e:	48 83 ec 18          	sub    $0x18,%rsp
  41a732:	48 8b 5f 10          	mov    0x10(%rdi),%rbx
  41a736:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  41a73b:	48 89 34 24          	mov    %rsi,(%rsp)
      while (__x != 0)
  41a73f:	48 85 db             	test   %rbx,%rbx
  41a742:	0f 84 b6 00 00 00    	je     41a7fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xee>
  41a748:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
  41a74c:	4c 8b 26             	mov    (%rsi),%r12
  41a74f:	eb 36                	jmp    41a787 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x77>
  41a751:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __builtin_memcmp(__s1, __s2, __n);
  41a758:	48 b8 60 e5 dd ff ff 	movabs $0xffffffffffdde560,%rax
  41a75f:	ff ff ff 
  41a762:	48 8b 73 20          	mov    0x20(%rbx),%rsi
  41a766:	4c 89 e7             	mov    %r12,%rdi
  41a769:	4c 01 f0             	add    %r14,%rax
  41a76c:	4d 89 f7             	mov    %r14,%r15
  41a76f:	ff d0                	callq  *%rax
	if (!__r)
  41a771:	85 c0                	test   %eax,%eax
  41a773:	74 25                	je     41a79a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x8a>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  41a775:	85 c0                	test   %eax,%eax
  41a777:	78 37                	js     41a7b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xa0>
  41a779:	48 8b 43 18          	mov    0x18(%rbx),%rax
  41a77d:	31 f6                	xor    %esi,%esi
      while (__x != 0)
  41a77f:	48 85 c0             	test   %rax,%rax
  41a782:	74 3a                	je     41a7be <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xae>
  41a784:	48 89 c3             	mov    %rax,%rbx
  41a787:	48 8b 6b 28          	mov    0x28(%rbx),%rbp
  41a78b:	4c 89 ea             	mov    %r13,%rdx
  41a78e:	4c 39 ed             	cmp    %r13,%rbp
  41a791:	48 0f 46 d5          	cmovbe %rbp,%rdx
	if (__n == 0)
  41a795:	48 85 d2             	test   %rdx,%rdx
  41a798:	75 be                	jne    41a758 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x48>
	const difference_type __d = difference_type(__n1 - __n2);
  41a79a:	4c 89 e8             	mov    %r13,%rax
  41a79d:	48 29 e8             	sub    %rbp,%rax
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
  41a7a0:	48 3d ff ff ff 7f    	cmp    $0x7fffffff,%rax
  41a7a6:	7f d1                	jg     41a779 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x69>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
  41a7a8:	48 3d 00 00 00 80    	cmp    $0xffffffff80000000,%rax
  41a7ae:	7d c5                	jge    41a775 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x65>
  41a7b0:	48 8b 43 10          	mov    0x10(%rbx),%rax
  41a7b4:	be 01 00 00 00       	mov    $0x1,%esi
  41a7b9:	48 85 c0             	test   %rax,%rax
  41a7bc:	75 c6                	jne    41a784 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x74>
      if (__comp)
  41a7be:	40 84 f6             	test   %sil,%sil
  41a7c1:	48 89 dd             	mov    %rbx,%rbp
  41a7c4:	75 42                	jne    41a808 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xf8>
    { return __lhs.compare(__rhs) < 0; }
  41a7c6:	48 b8 20 e4 dd ff ff 	movabs $0xffffffffffdde420,%rax
  41a7cd:	ff ff ff 
  41a7d0:	48 8d 7d 20          	lea    0x20(%rbp),%rdi
  41a7d4:	48 8b 34 24          	mov    (%rsp),%rsi
  41a7d8:	4c 01 f0             	add    %r14,%rax
  41a7db:	4d 89 f7             	mov    %r14,%r15
  41a7de:	ff d0                	callq  *%rax
	return _Res(__x, __y);
  41a7e0:	31 d2                	xor    %edx,%edx
  41a7e2:	85 c0                	test   %eax,%eax
  41a7e4:	48 0f 48 ea          	cmovs  %rdx,%rbp
  41a7e8:	48 0f 48 d3          	cmovs  %rbx,%rdx
    }
  41a7ec:	48 83 c4 18          	add    $0x18,%rsp
  41a7f0:	48 89 e8             	mov    %rbp,%rax
  41a7f3:	5b                   	pop    %rbx
  41a7f4:	5d                   	pop    %rbp
  41a7f5:	41 5c                	pop    %r12
  41a7f7:	41 5d                	pop    %r13
  41a7f9:	41 5e                	pop    %r14
  41a7fb:	41 5f                	pop    %r15
  41a7fd:	c3                   	retq   
      { return &this->_M_impl._M_header; }
  41a7fe:	48 8d 5f 08          	lea    0x8(%rdi),%rbx
  41a802:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  if (__j == begin())
  41a808:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	    return _Res(__x, __y);
  41a80d:	31 ed                	xor    %ebp,%ebp
  41a80f:	48 89 da             	mov    %rbx,%rdx
	  if (__j == begin())
  41a812:	48 39 58 18          	cmp    %rbx,0x18(%rax)
  41a816:	74 d4                	je     41a7ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xdc>
	_M_node = _Rb_tree_decrement(_M_node);
  41a818:	48 b8 e0 e7 dd ff ff 	movabs $0xffffffffffdde7e0,%rax
  41a81f:	ff ff ff 
  41a822:	48 89 df             	mov    %rbx,%rdi
  41a825:	4d 89 f7             	mov    %r14,%r15
  41a828:	4c 01 f0             	add    %r14,%rax
  41a82b:	ff d0                	callq  *%rax
  41a82d:	48 89 c5             	mov    %rax,%rbp
  41a830:	eb 94                	jmp    41a7c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xb6>
  41a832:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a839:	00 00 00 
  41a83c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041a840 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41a840:	41 57                	push   %r15
      { return &this->_M_impl._M_header; }
  41a842:	48 8d 47 08          	lea    0x8(%rdi),%rax
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41a846:	41 56                	push   %r14
  41a848:	4c 8d 3d f1 ff ff ff 	lea    -0xf(%rip),%r15        # 41a840 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>
  41a84f:	41 55                	push   %r13
  41a851:	41 54                	push   %r12
  41a853:	55                   	push   %rbp
  41a854:	53                   	push   %rbx
  41a855:	49 bb c0 07 21 00 00 	movabs $0x2107c0,%r11
  41a85c:	00 00 00 
  41a85f:	4d 01 df             	add    %r11,%r15
  41a862:	49 89 fd             	mov    %rdi,%r13
  41a865:	49 89 d4             	mov    %rdx,%r12
  41a868:	48 83 ec 08          	sub    $0x8,%rsp
      if (__pos._M_node == _M_end())
  41a86c:	48 39 c6             	cmp    %rax,%rsi
  41a86f:	0f 84 93 00 00 00    	je     41a908 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xc8>
  41a875:	4c 8d 76 20          	lea    0x20(%rsi),%r14
  41a879:	48 bb 20 e4 dd ff ff 	movabs $0xffffffffffdde420,%rbx
  41a880:	ff ff ff 
  41a883:	48 89 f5             	mov    %rsi,%rbp
  41a886:	4c 01 fb             	add    %r15,%rbx
  41a889:	48 89 d7             	mov    %rdx,%rdi
  41a88c:	4c 89 f6             	mov    %r14,%rsi
  41a88f:	ff d3                	callq  *%rbx
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
  41a891:	85 c0                	test   %eax,%eax
  41a893:	78 2b                	js     41a8c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x80>
  41a895:	4c 89 e6             	mov    %r12,%rsi
  41a898:	4c 89 f7             	mov    %r14,%rdi
  41a89b:	ff d3                	callq  *%rbx
  41a89d:	89 c1                	mov    %eax,%ecx
	return _Res(__pos._M_node, 0);
  41a89f:	31 d2                	xor    %edx,%edx
  41a8a1:	48 89 e8             	mov    %rbp,%rax
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
  41a8a4:	85 c9                	test   %ecx,%ecx
  41a8a6:	0f 88 ac 00 00 00    	js     41a958 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x118>
    }
  41a8ac:	48 83 c4 08          	add    $0x8,%rsp
  41a8b0:	5b                   	pop    %rbx
  41a8b1:	5d                   	pop    %rbp
  41a8b2:	41 5c                	pop    %r12
  41a8b4:	41 5d                	pop    %r13
  41a8b6:	41 5e                	pop    %r14
  41a8b8:	41 5f                	pop    %r15
  41a8ba:	c3                   	retq   
  41a8bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  if (__pos._M_node == _M_leftmost()) // begin()
  41a8c0:	49 8b 45 18          	mov    0x18(%r13),%rax
  41a8c4:	48 39 e8             	cmp    %rbp,%rax
	    return _Res(_M_leftmost(), _M_leftmost());
  41a8c7:	48 89 c2             	mov    %rax,%rdx
	  if (__pos._M_node == _M_leftmost()) // begin()
  41a8ca:	74 e0                	je     41a8ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
	_M_node = _Rb_tree_decrement(_M_node);
  41a8cc:	48 b8 e0 e7 dd ff ff 	movabs $0xffffffffffdde7e0,%rax
  41a8d3:	ff ff ff 
  41a8d6:	48 89 ef             	mov    %rbp,%rdi
  41a8d9:	4c 01 f8             	add    %r15,%rax
  41a8dc:	ff d0                	callq  *%rax
  41a8de:	4c 89 e6             	mov    %r12,%rsi
  41a8e1:	49 89 c6             	mov    %rax,%r14
  41a8e4:	48 8d 78 20          	lea    0x20(%rax),%rdi
  41a8e8:	ff d3                	callq  *%rbx
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
  41a8ea:	85 c0                	test   %eax,%eax
  41a8ec:	79 3f                	jns    41a92d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xed>
	      if (_S_right(__before._M_node) == 0)
  41a8ee:	49 83 7e 18 00       	cmpq   $0x0,0x18(%r14)
		return _Res(__pos._M_node, __pos._M_node);
  41a8f3:	48 89 e8             	mov    %rbp,%rax
  41a8f6:	48 89 ea             	mov    %rbp,%rdx
	      if (_S_right(__before._M_node) == 0)
  41a8f9:	75 b1                	jne    41a8ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
		return _Res(0, __before._M_node);
  41a8fb:	31 c0                	xor    %eax,%eax
  41a8fd:	4c 89 f2             	mov    %r14,%rdx
  41a900:	eb aa                	jmp    41a8ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
  41a902:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
  41a908:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
  41a90d:	74 1e                	je     41a92d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xed>
  41a90f:	48 8b 5f 20          	mov    0x20(%rdi),%rbx
  41a913:	48 b8 20 e4 dd ff ff 	movabs $0xffffffffffdde420,%rax
  41a91a:	ff ff ff 
  41a91d:	48 89 d6             	mov    %rdx,%rsi
  41a920:	4c 01 f8             	add    %r15,%rax
  41a923:	48 8d 7b 20          	lea    0x20(%rbx),%rdi
  41a927:	ff d0                	callq  *%rax
  41a929:	85 c0                	test   %eax,%eax
  41a92b:	78 73                	js     41a9a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x160>
	    return _M_get_insert_unique_pos(__k);
  41a92d:	48 b8 10 f7 de ff ff 	movabs $0xffffffffffdef710,%rax
  41a934:	ff ff ff 
  41a937:	4c 89 e6             	mov    %r12,%rsi
  41a93a:	4c 89 ef             	mov    %r13,%rdi
  41a93d:	4c 01 f8             	add    %r15,%rax
  41a940:	ff d0                	callq  *%rax
    }
  41a942:	48 83 c4 08          	add    $0x8,%rsp
  41a946:	5b                   	pop    %rbx
  41a947:	5d                   	pop    %rbp
  41a948:	41 5c                	pop    %r12
  41a94a:	41 5d                	pop    %r13
  41a94c:	41 5e                	pop    %r14
  41a94e:	41 5f                	pop    %r15
  41a950:	c3                   	retq   
  41a951:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  if (__pos._M_node == _M_rightmost())
  41a958:	49 8b 55 20          	mov    0x20(%r13),%rdx
  41a95c:	48 39 ea             	cmp    %rbp,%rdx
  41a95f:	74 57                	je     41a9b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x178>
	_M_node = _Rb_tree_increment(_M_node);
  41a961:	48 b8 c0 e6 dd ff ff 	movabs $0xffffffffffdde6c0,%rax
  41a968:	ff ff ff 
  41a96b:	48 89 ef             	mov    %rbp,%rdi
  41a96e:	4c 01 f8             	add    %r15,%rax
  41a971:	ff d0                	callq  *%rax
  41a973:	4c 89 e7             	mov    %r12,%rdi
  41a976:	49 89 c6             	mov    %rax,%r14
  41a979:	48 8d 70 20          	lea    0x20(%rax),%rsi
  41a97d:	ff d3                	callq  *%rbx
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
  41a97f:	85 c0                	test   %eax,%eax
  41a981:	79 aa                	jns    41a92d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xed>
	      if (_S_right(__pos._M_node) == 0)
  41a983:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
		return _Res(__after._M_node, __after._M_node);
  41a988:	4c 89 f0             	mov    %r14,%rax
  41a98b:	4c 89 f2             	mov    %r14,%rdx
	      if (_S_right(__pos._M_node) == 0)
  41a98e:	0f 85 18 ff ff ff    	jne    41a8ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
		return _Res(0, __pos._M_node);
  41a994:	31 c0                	xor    %eax,%eax
  41a996:	48 89 ea             	mov    %rbp,%rdx
  41a999:	e9 0e ff ff ff       	jmpq   41a8ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
  41a99e:	66 90                	xchg   %ax,%ax
    }
  41a9a0:	48 83 c4 08          	add    $0x8,%rsp
	    return _Res(0, _M_rightmost());
  41a9a4:	48 89 da             	mov    %rbx,%rdx
  41a9a7:	31 c0                	xor    %eax,%eax
    }
  41a9a9:	5b                   	pop    %rbx
  41a9aa:	5d                   	pop    %rbp
  41a9ab:	41 5c                	pop    %r12
  41a9ad:	41 5d                	pop    %r13
  41a9af:	41 5e                	pop    %r14
  41a9b1:	41 5f                	pop    %r15
  41a9b3:	c3                   	retq   
  41a9b4:	0f 1f 40 00          	nopl   0x0(%rax)
	    return _Res(0, _M_rightmost());
  41a9b8:	31 c0                	xor    %eax,%eax
  41a9ba:	e9 ed fe ff ff       	jmpq   41a8ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
  41a9bf:	90                   	nop

000000000041a9c0 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
        virtual void set_option_name(const std::string& option_name)
  41a9c0:	41 57                	push   %r15
  41a9c2:	41 56                	push   %r14
  41a9c4:	49 bb 40 06 21 00 00 	movabs $0x210640,%r11
  41a9cb:	00 00 00 
  41a9ce:	41 55                	push   %r13
  41a9d0:	41 54                	push   %r12
  41a9d2:	49 89 ff             	mov    %rdi,%r15
  41a9d5:	55                   	push   %rbp
  41a9d6:	53                   	push   %rbx
  41a9d7:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41a9c0 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  41a9de:	48 83 ec 58          	sub    $0x58,%rsp
  41a9e2:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  41a9e5:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  41a9ea:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  41a9ef:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41a9f4:	48 89 c8             	mov    %rcx,%rax
  41a9f7:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  41a9fc:	48 89 cf             	mov    %rcx,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41a9ff:	48 83 c0 10          	add    $0x10,%rax
  41aa03:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
          _M_construct(__beg, __end, _Tag());
  41aa08:	48 b8 ce 89 df ff ff 	movabs $0xffffffffffdf89ce,%rax
  41aa0f:	ff ff ff 
  41aa12:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41aa16:	48 b8 c8 89 df ff ff 	movabs $0xffffffffffdf89c8,%rax
  41aa1d:	ff ff ff 
  41aa20:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41aa24:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  41aa2b:	ff ff ff 
  41aa2e:	48 01 d8             	add    %rbx,%rax
  41aa31:	ff d0                	callq  *%rax
      { return &this->_M_impl._M_header; }
  41aa33:	49 8d 4f 20          	lea    0x20(%r15),%rcx
  41aa37:	48 89 cd             	mov    %rcx,%rbp
  41aa3a:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  41aa3f:	49 8b 4f 28          	mov    0x28(%r15),%rcx
      while (__x != 0)
  41aa43:	48 85 c9             	test   %rcx,%rcx
  41aa46:	0f 84 f4 00 00 00    	je     41ab40 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
  41aa4c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41aa51:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  41aa56:	49 89 ce             	mov    %rcx,%r14
  41aa59:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41aa5e:	eb 2f                	jmp    41aa8f <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf>
	return __builtin_memcmp(__s1, __s2, __n);
  41aa60:	48 b8 60 e5 dd ff ff 	movabs $0xffffffffffdde560,%rax
  41aa67:	ff ff ff 
  41aa6a:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  41aa6e:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41aa73:	48 01 d8             	add    %rbx,%rax
  41aa76:	49 89 df             	mov    %rbx,%r15
  41aa79:	ff d0                	callq  *%rax
	if (!__r)
  41aa7b:	85 c0                	test   %eax,%eax
  41aa7d:	74 23                	je     41aaa2 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe2>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41aa7f:	85 c0                	test   %eax,%eax
  41aa81:	78 3e                	js     41aac1 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x101>
	  __x = _S_right(__x);
  41aa83:	4c 89 f5             	mov    %r14,%rbp
	  __y = __x, __x = _S_left(__x);
  41aa86:	4d 8b 76 10          	mov    0x10(%r14),%r14
      while (__x != 0)
  41aa8a:	4d 85 f6             	test   %r14,%r14
  41aa8d:	74 3b                	je     41aaca <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10a>
  41aa8f:	4d 8b 6e 28          	mov    0x28(%r14),%r13
  41aa93:	4c 89 e2             	mov    %r12,%rdx
  41aa96:	4d 39 e5             	cmp    %r12,%r13
  41aa99:	49 0f 46 d5          	cmovbe %r13,%rdx
	if (__n == 0)
  41aa9d:	48 85 d2             	test   %rdx,%rdx
  41aaa0:	75 be                	jne    41aa60 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>
	const difference_type __d = difference_type(__n1 - __n2);
  41aaa2:	4d 89 e8             	mov    %r13,%r8
  41aaa5:	4d 29 e0             	sub    %r12,%r8
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
  41aaa8:	49 81 f8 ff ff ff 7f 	cmp    $0x7fffffff,%r8
  41aaaf:	7f d2                	jg     41aa83 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc3>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
  41aab1:	49 81 f8 00 00 00 80 	cmp    $0xffffffff80000000,%r8
  41aab8:	7c 07                	jl     41aac1 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x101>
	  return int(__d);
  41aaba:	44 89 c0             	mov    %r8d,%eax
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41aabd:	85 c0                	test   %eax,%eax
  41aabf:	79 c2                	jns    41aa83 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc3>
  41aac1:	4d 8b 76 18          	mov    0x18(%r14),%r14
      while (__x != 0)
  41aac5:	4d 85 f6             	test   %r14,%r14
  41aac8:	75 c5                	jne    41aa8f <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf>
	if (__i == end() || key_comp()(__k, (*__i).first))
  41aaca:	48 39 6c 24 18       	cmp    %rbp,0x18(%rsp)
  41aacf:	74 6f                	je     41ab40 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
    { return __lhs.compare(__rhs) < 0; }
  41aad1:	48 b8 20 e4 dd ff ff 	movabs $0xffffffffffdde420,%rax
  41aad8:	ff ff ff 
  41aadb:	48 8d 75 20          	lea    0x20(%rbp),%rsi
  41aadf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41aae4:	48 01 d8             	add    %rbx,%rax
  41aae7:	49 89 df             	mov    %rbx,%r15
  41aaea:	ff d0                	callq  *%rax
  41aaec:	85 c0                	test   %eax,%eax
  41aaee:	78 50                	js     41ab40 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
	this->_M_assign(__str);
  41aaf0:	48 b8 b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%rax
  41aaf7:	ff ff ff 
	return (*__i).second;
  41aafa:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
  41aafe:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  41ab03:	49 89 df             	mov    %rbx,%r15
  41ab06:	48 01 d8             	add    %rbx,%rax
  41ab09:	ff d0                	callq  *%rax
	if (!_M_is_local())
  41ab0b:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  41ab10:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41ab15:	49 83 c4 10          	add    $0x10,%r12
  41ab19:	4c 39 e7             	cmp    %r12,%rdi
  41ab1c:	74 0f                	je     41ab2d <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16d>
  41ab1e:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41ab25:	ff ff ff 
  41ab28:	48 01 d8             	add    %rbx,%rax
  41ab2b:	ff d0                	callq  *%rax
        {           set_substitute("option", option_name);}
  41ab2d:	48 83 c4 58          	add    $0x58,%rsp
  41ab31:	5b                   	pop    %rbx
  41ab32:	5d                   	pop    %rbp
  41ab33:	41 5c                	pop    %r12
  41ab35:	41 5d                	pop    %r13
  41ab37:	41 5e                	pop    %r14
  41ab39:	41 5f                	pop    %r15
  41ab3b:	c3                   	retq   
  41ab3c:	0f 1f 40 00          	nopl   0x0(%rax)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41ab40:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41ab47:	ff ff ff 
  41ab4a:	bf 60 00 00 00       	mov    $0x60,%edi
  41ab4f:	49 89 df             	mov    %rbx,%r15
  41ab52:	48 01 d8             	add    %rbx,%rax
  41ab55:	ff d0                	callq  *%rax
  41ab57:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  41ab5c:	49 89 c5             	mov    %rax,%r13
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
  41ab5f:	4c 8d 78 20          	lea    0x20(%rax),%r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ab63:	48 8d 40 30          	lea    0x30(%rax),%rax
          _M_construct(__beg, __end, _Tag());
  41ab67:	4c 89 ff             	mov    %r15,%rdi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ab6a:	49 89 c4             	mov    %rax,%r12
	: allocator_type(__a), _M_p(__dat) { }
  41ab6d:	49 89 45 20          	mov    %rax,0x20(%r13)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41ab71:	48 89 f2             	mov    %rsi,%rdx
          _M_construct(__beg, __end, _Tag());
  41ab74:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  41ab7b:	ff ff ff 
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41ab7e:	48 03 54 24 38       	add    0x38(%rsp),%rdx
          _M_construct(__beg, __end, _Tag());
  41ab83:	48 01 d8             	add    %rbx,%rax
  41ab86:	ff d0                	callq  *%rax
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
  41ab88:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ab8d:	49 8d 4d 50          	lea    0x50(%r13),%rcx
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
  41ab91:	48 89 ee             	mov    %rbp,%rsi
      { _M_string_length = __length; }
  41ab94:	49 c7 45 48 00 00 00 	movq   $0x0,0x48(%r13)
  41ab9b:	00 
      { __c1 = __c2; }
  41ab9c:	41 c6 45 50 00       	movb   $0x0,0x50(%r13)
  41aba1:	4c 89 fa             	mov    %r15,%rdx
	: allocator_type(__a), _M_p(__dat) { }
  41aba4:	49 89 4d 40          	mov    %rcx,0x40(%r13)
  41aba8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41abad:	48 8d 78 18          	lea    0x18(%rax),%rdi
  41abb1:	48 b8 40 f8 de ff ff 	movabs $0xffffffffffdef840,%rax
  41abb8:	ff ff ff 
  41abbb:	48 01 d8             	add    %rbx,%rax
  41abbe:	ff d0                	callq  *%rax
	    if (__res.second)
  41abc0:	48 85 d2             	test   %rdx,%rdx
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
  41abc3:	48 89 c5             	mov    %rax,%rbp
	    if (__res.second)
  41abc6:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41abcb:	74 6c                	je     41ac39 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x279>
      bool __insert_left = (__x != 0 || __p == _M_end()
  41abcd:	48 39 54 24 18       	cmp    %rdx,0x18(%rsp)
  41abd2:	40 0f 94 c7          	sete   %dil
			    || _M_impl._M_key_compare(_S_key(__z),
  41abd6:	48 85 c0             	test   %rax,%rax
  41abd9:	0f 95 c0             	setne  %al
      bool __insert_left = (__x != 0 || __p == _M_end()
  41abdc:	40 08 c7             	or     %al,%dil
  41abdf:	75 28                	jne    41ac09 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x249>
    { return __lhs.compare(__rhs) < 0; }
  41abe1:	48 b8 20 e4 dd ff ff 	movabs $0xffffffffffdde420,%rax
  41abe8:	ff ff ff 
  41abeb:	4c 89 ff             	mov    %r15,%rdi
  41abee:	48 8d 72 20          	lea    0x20(%rdx),%rsi
  41abf2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41abf7:	49 89 df             	mov    %rbx,%r15
  41abfa:	48 01 d8             	add    %rbx,%rax
  41abfd:	ff d0                	callq  *%rax
			    || _M_impl._M_key_compare(_S_key(__z),
  41abff:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  41ac04:	c1 e8 1f             	shr    $0x1f,%eax
  41ac07:	89 c7                	mov    %eax,%edi
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  41ac09:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  41ac10:	ff ff ff 
  41ac13:	40 0f b6 ff          	movzbl %dil,%edi
  41ac17:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  41ac1c:	48 01 d8             	add    %rbx,%rax
  41ac1f:	4c 89 ee             	mov    %r13,%rsi
  41ac22:	49 89 df             	mov    %rbx,%r15
  41ac25:	ff d0                	callq  *%rax
      ++_M_impl._M_node_count;
  41ac27:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41ac2c:	4c 89 ed             	mov    %r13,%rbp
  41ac2f:	48 83 40 40 01       	addq   $0x1,0x40(%rax)
  41ac34:	e9 b7 fe ff ff       	jmpq   41aaf0 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x130>
  41ac39:	49 8b 7d 40          	mov    0x40(%r13),%rdi
  41ac3d:	49 be a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r14
  41ac44:	ff ff ff 
	if (!_M_is_local())
  41ac47:	48 39 f9             	cmp    %rdi,%rcx
  41ac4a:	74 09                	je     41ac55 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x295>
      { ::operator delete(__p); }
  41ac4c:	49 89 df             	mov    %rbx,%r15
  41ac4f:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41ac53:	ff d0                	callq  *%rax
  41ac55:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  41ac59:	49 39 fc             	cmp    %rdi,%r12
  41ac5c:	74 09                	je     41ac67 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a7>
  41ac5e:	49 89 df             	mov    %rbx,%r15
  41ac61:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41ac65:	ff d0                	callq  *%rax
  41ac67:	4c 89 ef             	mov    %r13,%rdi
  41ac6a:	49 89 df             	mov    %rbx,%r15
  41ac6d:	49 01 de             	add    %rbx,%r14
  41ac70:	41 ff d6             	callq  *%r14
  41ac73:	e9 78 fe ff ff       	jmpq   41aaf0 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x130>
	  __catch(...)
  41ac78:	48 89 c7             	mov    %rax,%rdi
  41ac7b:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41ac82:	ff ff ff 
  41ac85:	49 89 df             	mov    %rbx,%r15
  41ac88:	48 01 d8             	add    %rbx,%rax
  41ac8b:	ff d0                	callq  *%rax
  41ac8d:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41ac94:	ff ff ff 
  41ac97:	4c 89 ef             	mov    %r13,%rdi
  41ac9a:	48 01 d8             	add    %rbx,%rax
  41ac9d:	ff d0                	callq  *%rax
	      __throw_exception_again;
  41ac9f:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  41aca6:	ff ff ff 
  41aca9:	48 01 d8             	add    %rbx,%rax
  41acac:	ff d0                	callq  *%rax
  41acae:	48 89 c5             	mov    %rax,%rbp
  41acb1:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  41acb6:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41acbb:	49 83 c4 10          	add    $0x10,%r12
  41acbf:	4c 39 e7             	cmp    %r12,%rdi
  41acc2:	74 12                	je     41acd6 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x316>
  41acc4:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41accb:	ff ff ff 
  41acce:	49 89 df             	mov    %rbx,%r15
  41acd1:	48 01 d8             	add    %rbx,%rax
  41acd4:	ff d0                	callq  *%rax
  41acd6:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41acdd:	ff ff ff 
  41ace0:	48 89 ef             	mov    %rbp,%rdi
  41ace3:	49 89 df             	mov    %rbx,%r15
  41ace6:	48 01 d8             	add    %rbx,%rax
  41ace9:	ff d0                	callq  *%rax
  41aceb:	48 89 c5             	mov    %rax,%rbp
	  __catch(...)
  41acee:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  41acf5:	ff ff ff 
  41acf8:	49 89 df             	mov    %rbx,%r15
  41acfb:	48 01 d8             	add    %rbx,%rax
  41acfe:	ff d0                	callq  *%rax
  41ad00:	eb af                	jmp    41acb1 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f1>
  41ad02:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ad09:	00 00 00 
  41ad0c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041ad10 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_>:
template<class T> inline void checked_delete(T * x)
  41ad10:	41 57                	push   %r15
  41ad12:	41 56                	push   %r14
  41ad14:	49 bb f0 02 21 00 00 	movabs $0x2102f0,%r11
  41ad1b:	00 00 00 
  41ad1e:	41 55                	push   %r13
  41ad20:	41 54                	push   %r12
  41ad22:	55                   	push   %rbp
  41ad23:	48 8d 2d e6 ff ff ff 	lea    -0x1a(%rip),%rbp        # 41ad10 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_>
  41ad2a:	53                   	push   %rbx
  41ad2b:	4c 01 dd             	add    %r11,%rbp
  41ad2e:	48 83 ec 18          	sub    $0x18,%rsp
    delete x;
  41ad32:	48 85 ff             	test   %rdi,%rdi
  41ad35:	0f 84 d5 00 00 00    	je     41ae10 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x100>
  41ad3b:	4c 8b 7f 10          	mov    0x10(%rdi),%r15
  41ad3f:	49 89 fc             	mov    %rdi,%r12
      while (__x != 0)
  41ad42:	4d 85 ff             	test   %r15,%r15
  41ad45:	0f 84 9d 00 00 00    	je     41ade8 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0xd8>
	  _M_erase(_S_right(__x));
  41ad4b:	48 b8 40 cf de ff ff 	movabs $0xffffffffffdecf40,%rax
  41ad52:	ff ff ff 
  41ad55:	49 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r13
  41ad5c:	ff ff ff 
  41ad5f:	4c 8d 34 28          	lea    (%rax,%rbp,1),%r14
  41ad63:	48 b8 a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rax
  41ad6a:	ff ff ff 
  41ad6d:	49 01 ed             	add    %rbp,%r13
  41ad70:	48 01 e8             	add    %rbp,%rax
  41ad73:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41ad78:	eb 17                	jmp    41ad91 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x81>
  41ad7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41ad80:	4c 89 ff             	mov    %r15,%rdi
  41ad83:	49 89 ef             	mov    %rbp,%r15
  41ad86:	41 ff d5             	callq  *%r13
      while (__x != 0)
  41ad89:	48 85 db             	test   %rbx,%rbx
  41ad8c:	49 89 df             	mov    %rbx,%r15
  41ad8f:	74 57                	je     41ade8 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0xd8>
	  _M_erase(_S_right(__x));
  41ad91:	49 8b 77 18          	mov    0x18(%r15),%rsi
  41ad95:	4c 89 e7             	mov    %r12,%rdi
  41ad98:	41 ff d6             	callq  *%r14
        if( pi_ != 0 ) pi_->release();
  41ad9b:	49 8b 47 28          	mov    0x28(%r15),%rax
  41ad9f:	49 8b 5f 10          	mov    0x10(%r15),%rbx
  41ada3:	48 85 c0             	test   %rax,%rax
  41ada6:	74 d8                	je     41ad80 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
        if( atomic_decrement( &use_count_ ) == 1 )
  41ada8:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  41adad:	75 d1                	jne    41ad80 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
            dispose();
  41adaf:	48 8b 10             	mov    (%rax),%rdx
  41adb2:	48 89 c7             	mov    %rax,%rdi
  41adb5:	48 89 04 24          	mov    %rax,(%rsp)
  41adb9:	ff 52 10             	callq  *0x10(%rdx)
      { return __atomic_fetch_sub(&_M_i, __i, __m); }
  41adbc:	48 8b 04 24          	mov    (%rsp),%rax
  41adc0:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  41adc5:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41adca:	83 fa 01             	cmp    $0x1,%edx
  41adcd:	75 b1                	jne    41ad80 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
            destroy();
  41adcf:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  41add2:	48 89 c7             	mov    %rax,%rdi
            destroy();
  41add5:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  41add9:	48 3b 4c 24 08       	cmp    0x8(%rsp),%rcx
  41adde:	75 3f                	jne    41ae1f <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x10f>
        delete this;
  41ade0:	ff 52 08             	callq  *0x8(%rdx)
  41ade3:	eb 9b                	jmp    41ad80 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
  41ade5:	0f 1f 00             	nopl   (%rax)
}
  41ade8:	48 83 c4 18          	add    $0x18,%rsp
    delete x;
  41adec:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  41adf3:	ff ff ff 
  41adf6:	4c 89 e7             	mov    %r12,%rdi
}
  41adf9:	5b                   	pop    %rbx
    delete x;
  41adfa:	48 01 e8             	add    %rbp,%rax
  41adfd:	be 30 00 00 00       	mov    $0x30,%esi
}
  41ae02:	5d                   	pop    %rbp
  41ae03:	41 5c                	pop    %r12
  41ae05:	41 5d                	pop    %r13
  41ae07:	41 5e                	pop    %r14
  41ae09:	41 5f                	pop    %r15
    delete x;
  41ae0b:	ff e0                	jmpq   *%rax
  41ae0d:	0f 1f 00             	nopl   (%rax)
}
  41ae10:	48 83 c4 18          	add    $0x18,%rsp
  41ae14:	5b                   	pop    %rbx
  41ae15:	5d                   	pop    %rbp
  41ae16:	41 5c                	pop    %r12
  41ae18:	41 5d                	pop    %r13
  41ae1a:	41 5e                	pop    %r14
  41ae1c:	41 5f                	pop    %r15
  41ae1e:	c3                   	retq   
            destroy();
  41ae1f:	ff d1                	callq  *%rcx
  41ae21:	e9 5a ff ff ff       	jmpq   41ad80 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
  41ae26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ae2d:	00 00 00 

000000000041ae30 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_>:
template<class T> inline void checked_delete(T * x)
  41ae30:	41 57                	push   %r15
  41ae32:	55                   	push   %rbp
  41ae33:	48 8d 2d f6 ff ff ff 	lea    -0xa(%rip),%rbp        # 41ae30 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_>
  41ae3a:	49 bb d0 01 21 00 00 	movabs $0x2101d0,%r11
  41ae41:	00 00 00 
  41ae44:	53                   	push   %rbx
  41ae45:	4c 01 dd             	add    %r11,%rbp
    delete x;
  41ae48:	48 85 ff             	test   %rdi,%rdi
  41ae4b:	74 3b                	je     41ae88 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_+0x58>
  41ae4d:	48 89 fb             	mov    %rdi,%rbx
  41ae50:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  41ae54:	48 85 ff             	test   %rdi,%rdi
  41ae57:	74 0f                	je     41ae68 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_+0x38>
  41ae59:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41ae60:	ff ff ff 
  41ae63:	48 01 e8             	add    %rbp,%rax
  41ae66:	ff d0                	callq  *%rax
  41ae68:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  41ae6f:	ff ff ff 
  41ae72:	48 89 df             	mov    %rbx,%rdi
  41ae75:	be 10 00 00 00       	mov    $0x10,%esi
}
  41ae7a:	5b                   	pop    %rbx
    delete x;
  41ae7b:	48 01 e8             	add    %rbp,%rax
}
  41ae7e:	5d                   	pop    %rbp
  41ae7f:	41 5f                	pop    %r15
    delete x;
  41ae81:	ff e0                	jmpq   *%rax
  41ae83:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
}
  41ae88:	5b                   	pop    %rbx
  41ae89:	5d                   	pop    %rbp
  41ae8a:	41 5f                	pop    %r15
  41ae8c:	c3                   	retq   
  41ae8d:	0f 1f 00             	nopl   (%rax)

000000000041ae90 <_ZNK4YAML4Node16EnsureNodeExistsEv>:
inline void Node::EnsureNodeExists() const {
  41ae90:	41 57                	push   %r15
  41ae92:	41 56                	push   %r14
  41ae94:	49 bb 70 01 21 00 00 	movabs $0x210170,%r11
  41ae9b:	00 00 00 
  41ae9e:	41 55                	push   %r13
  41aea0:	41 54                	push   %r12
  41aea2:	55                   	push   %rbp
  41aea3:	53                   	push   %rbx
  41aea4:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41ae90 <_ZNK4YAML4Node16EnsureNodeExistsEv>
  41aeab:	48 83 ec 08          	sub    $0x8,%rsp
  41aeaf:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41aeb2:	80 3f 00             	cmpb   $0x0,(%rdi)
  41aeb5:	0f 84 90 01 00 00    	je     41b04b <_ZNK4YAML4Node16EnsureNodeExistsEv+0x1bb>
  if (!m_pNode) {
  41aebb:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
  41aec0:	48 89 fd             	mov    %rdi,%rbp
  41aec3:	74 13                	je     41aed8 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x48>
}
  41aec5:	48 83 c4 08          	add    $0x8,%rsp
  41aec9:	5b                   	pop    %rbx
  41aeca:	5d                   	pop    %rbp
  41aecb:	41 5c                	pop    %r12
  41aecd:	41 5d                	pop    %r13
  41aecf:	41 5e                	pop    %r14
  41aed1:	41 5f                	pop    %r15
  41aed3:	c3                   	retq   
  41aed4:	0f 1f 40 00          	nopl   0x0(%rax)
    m_pMemory.reset(new detail::memory_holder);
  41aed8:	49 be c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%r14
  41aedf:	ff ff ff 
  41aee2:	bf 10 00 00 00       	mov    $0x10,%edi
  41aee7:	49 89 df             	mov    %rbx,%r15
  41aeea:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  41aeee:	41 ff d5             	callq  *%r13
  Nodes m_nodes;
};

class YAML_CPP_API memory_holder {
 public:
  memory_holder() : m_pMemory(new memory) {}
  41aef1:	bf 30 00 00 00       	mov    $0x30,%edi
  41aef6:	49 89 c4             	mov    %rax,%r12
  41aef9:	41 ff d5             	callq  *%r13
  41aefc:	49 89 c5             	mov    %rax,%r13
	    _M_node_count(0)
  41aeff:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  41af06:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41af0d:	00 
  41af0e:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  41af15:	00 
	    this->_M_header._M_left = &this->_M_header;
  41af16:	48 8d 40 08          	lea    0x8(%rax),%rax
    explicit shared_ptr( Y * p ): px( p ), pn() // Y must be complete
  41af1a:	4d 89 2c 24          	mov    %r13,(%r12)
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41af1e:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
  41af25:	00 00 
            pi_ = new sp_counted_impl_p<Y>( p );
  41af27:	bf 18 00 00 00       	mov    $0x18,%edi
  41af2c:	49 89 45 18          	mov    %rax,0x18(%r13)
	    this->_M_header._M_right = &this->_M_header;
  41af30:	49 89 45 20          	mov    %rax,0x20(%r13)
  41af34:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41af38:	ff d0                	callq  *%rax
        return *this;
    }

    void swap(shared_count & r) // nothrow
    {
        sp_counted_base * tmp = r.pi_;
  41af3a:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    explicit sp_counted_impl_p( X * px ): px_( px )
  41af3f:	48 ba c0 ef ff ff ff 	movabs $0xffffffffffffefc0,%rdx
  41af46:	ff ff ff 
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
  41af49:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41af50:	48 01 da             	add    %rbx,%rdx
  41af53:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41af5a:	4c 89 68 10          	mov    %r13,0x10(%rax)
  41af5e:	48 89 10             	mov    %rdx,(%rax)
        r.pi_ = pi_;
  41af61:	49 89 44 24 08       	mov    %rax,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  41af66:	48 85 ff             	test   %rdi,%rdi
  41af69:	74 0f                	je     41af7a <_ZNK4YAML4Node16EnsureNodeExistsEv+0xea>
  41af6b:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41af72:	ff ff ff 
  41af75:	48 01 d8             	add    %rbx,%rax
  41af78:	ff d0                	callq  *%rax
        BOOST_ASSERT( p == 0 || p != px ); // catch self-reset errors
  41af7a:	4c 3b 65 08          	cmp    0x8(%rbp),%r12
  41af7e:	0f 84 66 01 00 00    	je     41b0ea <_ZNK4YAML4Node16EnsureNodeExistsEv+0x25a>
            pi_ = new sp_counted_impl_p<Y>( p );
  41af84:	bf 18 00 00 00       	mov    $0x18,%edi
  41af89:	49 89 df             	mov    %rbx,%r15
  41af8c:	49 01 de             	add    %rbx,%r14
  41af8f:	41 ff d6             	callq  *%r14
        sp_counted_base * tmp = r.pi_;
  41af92:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41af96:	48 ba 08 f0 ff ff ff 	movabs $0xfffffffffffff008,%rdx
  41af9d:	ff ff ff 
  41afa0:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41afa7:	48 01 da             	add    %rbx,%rdx
  41afaa:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41afb1:	4c 89 60 10          	mov    %r12,0x10(%rax)
  41afb5:	48 89 10             	mov    %rdx,(%rax)
  41afb8:	4c 89 65 08          	mov    %r12,0x8(%rbp)
        if( pi_ != 0 ) pi_->release();
  41afbc:	48 85 ff             	test   %rdi,%rdi
        r.pi_ = pi_;
  41afbf:	48 89 45 10          	mov    %rax,0x10(%rbp)
        if( pi_ != 0 ) pi_->release();
  41afc3:	74 1c                	je     41afe1 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x151>
  41afc5:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41afcc:	ff ff ff 
  41afcf:	48 01 d8             	add    %rbx,%rax
  41afd2:	ff d0                	callq  *%rax
  41afd4:	4c 8b 65 08          	mov    0x8(%rbp),%r12
        BOOST_ASSERT( px != 0 );
  41afd8:	4d 85 e4             	test   %r12,%r12
  41afdb:	0f 84 36 02 00 00    	je     41b217 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x387>
  41afe1:	49 8b 3c 24          	mov    (%r12),%rdi
  41afe5:	48 85 ff             	test   %rdi,%rdi
  41afe8:	0f 84 f9 01 00 00    	je     41b1e7 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x357>

  node& create_node() { return m_pMemory->create_node(); }
  41afee:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41aff5:	ff ff ff 
  41aff8:	49 89 df             	mov    %rbx,%r15
  41affb:	48 01 d8             	add    %rbx,%rax
  41affe:	ff d0                	callq  *%rax
  41b000:	49 89 c4             	mov    %rax,%r12
    m_pNode = &m_pMemory->create_node();
  41b003:	48 89 45 18          	mov    %rax,0x18(%rbp)
    if (type != NodeType::Undefined)
      mark_defined();
    m_pRef->set_type(type);
  }
  void set_null() {
    mark_defined();
  41b007:	48 89 c7             	mov    %rax,%rdi
  41b00a:	48 b8 20 d8 de ff ff 	movabs $0xffffffffffded820,%rax
  41b011:	ff ff ff 
  41b014:	48 01 d8             	add    %rbx,%rax
  41b017:	ff d0                	callq  *%rax
  41b019:	49 8b 04 24          	mov    (%r12),%rax
  41b01d:	48 85 c0             	test   %rax,%rax
  41b020:	0f 84 00 02 00 00    	je     41b226 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x396>
  41b026:	48 8b 38             	mov    (%rax),%rdi
  41b029:	48 85 ff             	test   %rdi,%rdi
  41b02c:	74 77                	je     41b0a5 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x215>
}
  41b02e:	48 83 c4 08          	add    $0x8,%rsp
  void set_null() { m_pData->set_null(); }
  41b032:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  41b039:	ff ff ff 
  41b03c:	48 01 d8             	add    %rbx,%rax
  41b03f:	5b                   	pop    %rbx
  41b040:	5d                   	pop    %rbp
  41b041:	41 5c                	pop    %r12
  41b043:	41 5d                	pop    %r13
  41b045:	41 5e                	pop    %r14
  41b047:	41 5f                	pop    %r15
  41b049:	ff e0                	jmpq   *%rax
    throw InvalidNode();
  41b04b:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41b052:	ff ff ff 
  41b055:	bf 40 00 00 00       	mov    $0x40,%edi
  41b05a:	49 89 df             	mov    %rbx,%r15
  41b05d:	48 01 d8             	add    %rbx,%rax
  41b060:	ff d0                	callq  *%rax
  41b062:	48 89 c5             	mov    %rax,%rbp
  41b065:	48 89 c7             	mov    %rax,%rdi
  41b068:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  41b06f:	ff ff ff 
  41b072:	48 01 d8             	add    %rbx,%rax
  41b075:	ff d0                	callq  *%rax
  41b077:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  41b07e:	ff ff ff 
  41b081:	48 89 ef             	mov    %rbp,%rdi
  41b084:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41b088:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41b08f:	ff ff ff 
  41b092:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41b096:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41b09d:	ff ff ff 
  41b0a0:	48 01 d8             	add    %rbx,%rax
  41b0a3:	ff d0                	callq  *%rax
  41b0a5:	48 b8 c6 eb dd ff ff 	movabs $0xffffffffffddebc6,%rax
  41b0ac:	ff ff ff 
  41b0af:	48 01 d8             	add    %rbx,%rax
  41b0b2:	ff d0                	callq  *%rax
        catch(...)
  41b0b4:	48 89 c7             	mov    %rax,%rdi
  41b0b7:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41b0be:	ff ff ff 
  41b0c1:	49 89 df             	mov    %rbx,%r15
  41b0c4:	48 01 d8             	add    %rbx,%rax
  41b0c7:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41b0c9:	48 b8 30 fe de ff ff 	movabs $0xffffffffffdefe30,%rax
  41b0d0:	ff ff ff 
  41b0d3:	4c 89 e7             	mov    %r12,%rdi
  41b0d6:	48 01 d8             	add    %rbx,%rax
  41b0d9:	ff d0                	callq  *%rax
            throw;
  41b0db:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  41b0e2:	ff ff ff 
  41b0e5:	48 01 d8             	add    %rbx,%rax
  41b0e8:	ff d0                	callq  *%rax
        BOOST_ASSERT( p == 0 || p != px ); // catch self-reset errors
  41b0ea:	48 b8 a0 88 df ff ff 	movabs $0xffffffffffdf88a0,%rax
  41b0f1:	ff ff ff 
  41b0f4:	ba ba 02 00 00       	mov    $0x2ba,%edx
  41b0f9:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  41b0fd:	48 b8 40 7a df ff ff 	movabs $0xffffffffffdf7a40,%rax
  41b104:	ff ff ff 
  41b107:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41b10b:	48 b8 cf 89 df ff ff 	movabs $0xffffffffffdf89cf,%rax
  41b112:	ff ff ff 
        BOOST_ASSERT( px != 0 );
  41b115:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41b119:	48 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%rax
  41b120:	ff ff ff 
  41b123:	49 89 df             	mov    %rbx,%r15
  41b126:	48 01 d8             	add    %rbx,%rax
  41b129:	ff d0                	callq  *%rax
        catch(...)
  41b12b:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  41b132:	ff ff ff 
  41b135:	48 89 c5             	mov    %rax,%rbp
  41b138:	49 89 df             	mov    %rbx,%r15
  41b13b:	48 01 da             	add    %rbx,%rdx
  41b13e:	ff d2                	callq  *%rdx
  41b140:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41b147:	ff ff ff 
  41b14a:	48 89 ef             	mov    %rbp,%rdi
  41b14d:	48 01 d8             	add    %rbx,%rax
  41b150:	ff d0                	callq  *%rax
  41b152:	48 89 c7             	mov    %rax,%rdi
  41b155:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41b15c:	ff ff ff 
  41b15f:	49 89 df             	mov    %rbx,%r15
  41b162:	48 01 d8             	add    %rbx,%rax
  41b165:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41b167:	48 b8 10 fd de ff ff 	movabs $0xffffffffffdefd10,%rax
  41b16e:	ff ff ff 
  41b171:	4c 89 ef             	mov    %r13,%rdi
  41b174:	48 01 d8             	add    %rbx,%rax
  41b177:	ff d0                	callq  *%rax
            throw;
  41b179:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  41b180:	ff ff ff 
  41b183:	48 01 d8             	add    %rbx,%rax
  41b186:	ff d0                	callq  *%rax
  41b188:	48 89 c5             	mov    %rax,%rbp
    m_pMemory.reset(new detail::memory_holder);
  41b18b:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  41b192:	ff ff ff 
  41b195:	4c 89 e7             	mov    %r12,%rdi
  41b198:	be 10 00 00 00       	mov    $0x10,%esi
  41b19d:	48 01 d8             	add    %rbx,%rax
  41b1a0:	49 89 df             	mov    %rbx,%r15
  41b1a3:	ff d0                	callq  *%rax
  41b1a5:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41b1ac:	ff ff ff 
  41b1af:	48 89 ef             	mov    %rbp,%rdi
  41b1b2:	48 01 d8             	add    %rbx,%rax
  41b1b5:	ff d0                	callq  *%rax
  41b1b7:	48 89 c5             	mov    %rax,%rbp
        catch(...)
  41b1ba:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  41b1c1:	ff ff ff 
  41b1c4:	49 89 df             	mov    %rbx,%r15
  41b1c7:	48 01 d8             	add    %rbx,%rax
  41b1ca:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41b1cc:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  41b1d1:	48 85 ff             	test   %rdi,%rdi
  41b1d4:	74 b5                	je     41b18b <_ZNK4YAML4Node16EnsureNodeExistsEv+0x2fb>
  41b1d6:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41b1dd:	ff ff ff 
  41b1e0:	48 01 d8             	add    %rbx,%rax
  41b1e3:	ff d0                	callq  *%rax
  41b1e5:	eb a4                	jmp    41b18b <_ZNK4YAML4Node16EnsureNodeExistsEv+0x2fb>
  41b1e7:	48 b8 e0 86 df ff ff 	movabs $0xffffffffffdf86e0,%rax
  41b1ee:	ff ff ff 
  41b1f1:	ba de 02 00 00       	mov    $0x2de,%edx
  41b1f6:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  41b1fa:	48 b8 40 7a df ff ff 	movabs $0xffffffffffdf7a40,%rax
  41b201:	ff ff ff 
  41b204:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41b208:	48 b8 e9 7d df ff ff 	movabs $0xffffffffffdf7de9,%rax
  41b20f:	ff ff ff 
  41b212:	e9 fe fe ff ff       	jmpq   41b115 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x285>
  41b217:	48 b8 1e ed dd ff ff 	movabs $0xffffffffffdded1e,%rax
  41b21e:	ff ff ff 
  41b221:	48 01 d8             	add    %rbx,%rax
  41b224:	ff d0                	callq  *%rax
  41b226:	48 b8 72 ec dd ff ff 	movabs $0xffffffffffddec72,%rax
  41b22d:	ff ff ff 
  41b230:	48 01 d8             	add    %rbx,%rax
  41b233:	ff d0                	callq  *%rax
    throw InvalidNode();
  41b235:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41b23c:	ff ff ff 
  41b23f:	49 89 c4             	mov    %rax,%r12
  41b242:	48 89 ef             	mov    %rbp,%rdi
  41b245:	49 89 df             	mov    %rbx,%r15
  41b248:	48 01 da             	add    %rbx,%rdx
  41b24b:	ff d2                	callq  *%rdx
  41b24d:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41b254:	ff ff ff 
  41b257:	4c 89 e7             	mov    %r12,%rdi
  41b25a:	48 01 d8             	add    %rbx,%rax
  41b25d:	ff d0                	callq  *%rax
  41b25f:	90                   	nop

000000000041b260 <_ZNK4YAML4NodeixIiEEKS0_RKT_>:
inline const Node Node::operator[](const Key& key) const {
  41b260:	41 57                	push   %r15
  41b262:	41 56                	push   %r14
  41b264:	49 bb a0 fd 20 00 00 	movabs $0x20fda0,%r11
  41b26b:	00 00 00 
  41b26e:	41 55                	push   %r13
  41b270:	4c 8d 2d e9 ff ff ff 	lea    -0x17(%rip),%r13        # 41b260 <_ZNK4YAML4NodeixIiEEKS0_RKT_>
  41b277:	41 54                	push   %r12
  41b279:	55                   	push   %rbp
  41b27a:	53                   	push   %rbx
  41b27b:	4d 01 dd             	add    %r11,%r13
  41b27e:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  if (!m_isValid)
  41b285:	80 3e 00             	cmpb   $0x0,(%rsi)
inline const Node Node::operator[](const Key& key) const {
  41b288:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  41b28d:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  41b292:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  if (!m_isValid)
  41b297:	0f 84 3f 04 00 00    	je     41b6dc <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x47c>
  41b29d:	48 89 f3             	mov    %rsi,%rbx
  EnsureNodeExists();
  41b2a0:	48 b8 90 fe de ff ff 	movabs $0xffffffffffdefe90,%rax
  41b2a7:	ff ff ff 
  41b2aa:	48 89 f7             	mov    %rsi,%rdi
  41b2ad:	4c 01 e8             	add    %r13,%rax
  41b2b0:	ff d0                	callq  *%rax
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41b2b2:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  41b2b6:	48 89 de             	mov    %rbx,%rsi
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b2b9:	48 8b 5b 10          	mov    0x10(%rbx),%rbx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41b2bd:	48 85 db             	test   %rbx,%rbx
  41b2c0:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41b2c5:	0f 84 55 01 00 00    	je     41b420 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1c0>
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  41b2cb:	48 8d 43 08          	lea    0x8(%rbx),%rax
  41b2cf:	f0 83 00 01          	lock addl $0x1,(%rax)
  detail::node* value = static_cast<const detail::node&>(*m_pNode)
  41b2d3:	48 8b 56 18          	mov    0x18(%rsi),%rdx
  41b2d7:	f0 83 00 01          	lock addl $0x1,(%rax)
  41b2db:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  41b2de:	48 85 d2             	test   %rdx,%rdx
  41b2e1:	0f 84 60 04 00 00    	je     41b747 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x4e7>
  41b2e7:	f0 83 00 01          	lock addl $0x1,(%rax)
  41b2eb:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  41b2f0:	48 8b 02             	mov    (%rdx),%rax
  41b2f3:	48 85 c0             	test   %rax,%rax
  41b2f6:	0f 84 3c 04 00 00    	je     41b738 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x4d8>
  switch (m_type) {
  41b2fc:	8b 50 04             	mov    0x4(%rax),%edx
  41b2ff:	83 fa 02             	cmp    $0x2,%edx
  41b302:	0f 84 40 01 00 00    	je     41b448 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1e8>
  41b308:	0f 82 82 00 00 00    	jb     41b390 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x130>
  41b30e:	83 fa 03             	cmp    $0x3,%edx
  41b311:	0f 85 91 01 00 00    	jne    41b4a8 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x248>
  41b317:	48 85 db             	test   %rbx,%rbx
  41b31a:	0f 84 00 03 00 00    	je     41b620 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3c0>
  41b320:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  41b324:	f0 83 02 01          	lock addl $0x1,(%rdx)
    return key >= 0 ? get_idx<std::size_t>::get(
  41b328:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  41b32d:	45 31 e4             	xor    %r12d,%r12d
  41b330:	48 bd b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rbp
  41b337:	ff ff ff 
  41b33a:	8b 0e                	mov    (%rsi),%ecx
  41b33c:	85 c9                	test   %ecx,%ecx
  41b33e:	78 41                	js     41b381 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x121>
  41b340:	f0 83 02 01          	lock addl $0x1,(%rdx)
  41b344:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  41b349:	48 8b 48 50          	mov    0x50(%rax),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41b34d:	48 8b 40 58          	mov    0x58(%rax),%rax
  41b351:	48 63 12             	movslq (%rdx),%rdx
  41b354:	48 29 c8             	sub    %rcx,%rax
  41b357:	48 c1 f8 03          	sar    $0x3,%rax
    return key < sequence.size() ? sequence[key] : 0;
  41b35b:	48 39 d0             	cmp    %rdx,%rax
  41b35e:	0f 86 1c 04 00 00    	jbe    41b780 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x520>
        if( pi_ != 0 ) pi_->release();
  41b364:	48 85 db             	test   %rbx,%rbx
  41b367:	4c 8b 24 d1          	mov    (%rcx,%rdx,8),%r12
  41b36b:	74 49                	je     41b3b6 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x156>
  41b36d:	48 bd b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rbp
  41b374:	ff ff ff 
  41b377:	48 89 df             	mov    %rbx,%rdi
  41b37a:	4a 8d 44 2d 00       	lea    0x0(%rbp,%r13,1),%rax
  41b37f:	ff d0                	callq  *%rax
  41b381:	48 89 df             	mov    %rbx,%rdi
  41b384:	4a 8d 44 2d 00       	lea    0x0(%rbp,%r13,1),%rax
  41b389:	ff d0                	callq  *%rax
  41b38b:	eb 06                	jmp    41b393 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x133>
  41b38d:	0f 1f 00             	nopl   (%rax)
      return NULL;
  41b390:	45 31 e4             	xor    %r12d,%r12d
  41b393:	48 85 db             	test   %rbx,%rbx
  41b396:	74 1e                	je     41b3b6 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x156>
  41b398:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41b39f:	ff ff ff 
  41b3a2:	48 89 df             	mov    %rbx,%rdi
  41b3a5:	49 8d 6c 05 00       	lea    0x0(%r13,%rax,1),%rbp
  41b3aa:	ff d5                	callq  *%rbp
  41b3ac:	48 89 df             	mov    %rbx,%rdi
  41b3af:	ff d5                	callq  *%rbp
  41b3b1:	48 89 df             	mov    %rbx,%rdi
  41b3b4:	ff d5                	callq  *%rbp
  if (!value) {
  41b3b6:	4d 85 e4             	test   %r12,%r12
  41b3b9:	0f 84 85 02 00 00    	je     41b644 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3e4>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41b3bf:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b3c4:	48 8b 78 10          	mov    0x10(%rax),%rdi
  41b3c8:	48 8b 50 08          	mov    0x8(%rax),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41b3cc:	48 85 ff             	test   %rdi,%rdi
  41b3cf:	0f 84 2b 02 00 00    	je     41b600 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3a0>
  41b3d5:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41b3d9:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41b3dd:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  41b3e2:	c6 01 01             	movb   $0x1,(%rcx)
  41b3e5:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b3e9:	48 89 79 10          	mov    %rdi,0x10(%rcx)
  41b3ed:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41b3f1:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41b3f8:	ff ff ff 
  41b3fb:	4c 01 e8             	add    %r13,%rax
  41b3fe:	4c 89 61 18          	mov    %r12,0x18(%rcx)
  41b402:	ff d0                	callq  *%rax
  41b404:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    return Node(ZombieNode);
  }
  return Node(*value, m_pMemory);
}
  41b409:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  41b410:	5b                   	pop    %rbx
  41b411:	5d                   	pop    %rbp
  41b412:	41 5c                	pop    %r12
  41b414:	41 5d                	pop    %r13
  41b416:	41 5e                	pop    %r14
  41b418:	41 5f                	pop    %r15
  41b41a:	c3                   	retq   
  41b41b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  41b420:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41b425:	48 8b 40 18          	mov    0x18(%rax),%rax
  41b429:	48 8b 10             	mov    (%rax),%rdx
        BOOST_ASSERT( px != 0 );
  41b42c:	48 85 d2             	test   %rdx,%rdx
  41b42f:	0f 84 12 03 00 00    	je     41b747 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x4e7>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b435:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  41b43c:	00 00 
  41b43e:	e9 ad fe ff ff       	jmpq   41b2f0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x90>
  41b443:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      throw BadSubscript();
  41b448:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41b44f:	ff ff ff 
  41b452:	bf 40 00 00 00       	mov    $0x40,%edi
  41b457:	4d 89 ef             	mov    %r13,%r15
  41b45a:	4c 01 e8             	add    %r13,%rax
  41b45d:	ff d0                	callq  *%rax
  41b45f:	48 89 c5             	mov    %rax,%rbp
  41b462:	48 89 c7             	mov    %rax,%rdi
  41b465:	48 b8 a0 af de ff ff 	movabs $0xffffffffffdeafa0,%rax
  41b46c:	ff ff ff 
  41b46f:	4c 01 e8             	add    %r13,%rax
  41b472:	ff d0                	callq  *%rax
  41b474:	48 b8 f0 94 de ff ff 	movabs $0xffffffffffde94f0,%rax
  41b47b:	ff ff ff 
  41b47e:	48 89 ef             	mov    %rbp,%rdi
  41b481:	49 8d 54 05 00       	lea    0x0(%r13,%rax,1),%rdx
  41b486:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  41b48d:	ff ff ff 
  41b490:	49 8d 74 05 00       	lea    0x0(%r13,%rax,1),%rsi
  41b495:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41b49c:	ff ff ff 
  41b49f:	4c 01 e8             	add    %r13,%rax
  41b4a2:	ff d0                	callq  *%rax
  41b4a4:	0f 1f 40 00          	nopl   0x0(%rax)
  41b4a8:	4c 8b a0 88 00 00 00 	mov    0x88(%rax),%r12
      { return const_iterator(&this->_M_impl._M_header); }
  41b4af:	48 83 c0 78          	add    $0x78,%rax
  41b4b3:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41b4b8:	49 39 c4             	cmp    %rax,%r12
  41b4bb:	0f 84 cf fe ff ff    	je     41b390 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x130>
  41b4c1:	48 8d 44 24 5c       	lea    0x5c(%rsp),%rax
  41b4c6:	48 8d 6b 08          	lea    0x8(%rbx),%rbp
  41b4ca:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41b4cf:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  41b4d4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  41b4d9:	48 b8 a0 b3 de ff ff 	movabs $0xffffffffffdeb3a0,%rax
  41b4e0:	ff ff ff 
  41b4e3:	4c 01 e8             	add    %r13,%rax
  41b4e6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        if( pi_ != 0 ) pi_->release();
  41b4eb:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41b4f2:	ff ff ff 
  41b4f5:	4d 8d 74 05 00       	lea    0x0(%r13,%rax,1),%r14
  41b4fa:	e9 a4 00 00 00       	jmpq   41b5a3 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x343>
  41b4ff:	90                   	nop
  41b500:	f0 83 45 00 01       	lock addl $0x1,0x0(%rbp)
    if (it->first->equals(key, pMemory)) {
  41b505:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  41b50a:	f0 83 45 00 01       	lock addl $0x1,0x0(%rbp)
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41b50f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41b514:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b519:	48 89 5c 24 70       	mov    %rbx,0x70(%rsp)
  41b51e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  41b523:	f0 83 45 00 01       	lock addl $0x1,0x0(%rbp)
  41b528:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  41b52d:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  41b532:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41b537:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41b53c:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41b53e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41b543:	41 89 c7             	mov    %eax,%r15d
  41b546:	48 85 ff             	test   %rdi,%rdi
  41b549:	74 03                	je     41b54e <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x2ee>
  41b54b:	41 ff d6             	callq  *%r14
  41b54e:	48 85 db             	test   %rbx,%rbx
  41b551:	0f 84 89 00 00 00    	je     41b5e0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x380>
  41b557:	48 89 df             	mov    %rbx,%rdi
  41b55a:	41 ff d6             	callq  *%r14
  41b55d:	45 84 ff             	test   %r15b,%r15b
  41b560:	74 6e                	je     41b5d0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x370>
    return lhs == rhs;
  41b562:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41b567:	8b 4c 24 5c          	mov    0x5c(%rsp),%ecx
  41b56b:	48 89 df             	mov    %rbx,%rdi
  41b56e:	39 08                	cmp    %ecx,(%rax)
  41b570:	41 0f 94 c7          	sete   %r15b
  41b574:	41 ff d6             	callq  *%r14
    if (it->first->equals(key, pMemory)) {
  41b577:	45 84 ff             	test   %r15b,%r15b
  41b57a:	0f 85 f0 00 00 00    	jne    41b670 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x410>
	_M_node = _Rb_tree_increment(_M_node);
  41b580:	48 b8 40 e8 dd ff ff 	movabs $0xffffffffffdde840,%rax
  41b587:	ff ff ff 
  41b58a:	4c 89 e7             	mov    %r12,%rdi
  41b58d:	4d 89 ef             	mov    %r13,%r15
  41b590:	4c 01 e8             	add    %r13,%rax
  41b593:	ff d0                	callq  *%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41b595:	48 3b 44 24 28       	cmp    0x28(%rsp),%rax
  41b59a:	49 89 c4             	mov    %rax,%r12
  41b59d:	0f 84 ed fd ff ff    	je     41b390 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x130>
        if( pi_ != 0 ) pi_->add_ref_copy();
  41b5a3:	48 85 db             	test   %rbx,%rbx
  41b5a6:	0f 85 54 ff ff ff    	jne    41b500 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x2a0>
  41b5ac:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    if (it->first->equals(key, pMemory)) {
  41b5b1:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  41b5b6:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b5bb:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  41b5c2:	00 00 
  41b5c4:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  41b5c9:	e9 5a ff ff ff       	jmpq   41b528 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x2c8>
  41b5ce:	66 90                	xchg   %ax,%ax
        if( pi_ != 0 ) pi_->release();
  41b5d0:	48 89 df             	mov    %rbx,%rdi
  41b5d3:	41 ff d6             	callq  *%r14
  41b5d6:	eb a8                	jmp    41b580 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x320>
  41b5d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41b5df:	00 
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  41b5e0:	45 84 ff             	test   %r15b,%r15b
  41b5e3:	74 9b                	je     41b580 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x320>
    return lhs == rhs;
  41b5e5:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41b5ea:	8b 74 24 5c          	mov    0x5c(%rsp),%esi
  41b5ee:	39 30                	cmp    %esi,(%rax)
  41b5f0:	41 0f 94 c7          	sete   %r15b
  41b5f4:	e9 7e ff ff ff       	jmpq   41b577 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x317>
  41b5f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41b600:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41b605:	c6 00 01             	movb   $0x1,(%rax)
  41b608:	48 89 50 08          	mov    %rdx,0x8(%rax)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b60c:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41b613:	00 
  41b614:	4c 89 60 18          	mov    %r12,0x18(%rax)
  41b618:	e9 ec fd ff ff       	jmpq   41b409 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1a9>
  41b61d:	0f 1f 00             	nopl   (%rax)
    return key >= 0 ? get_idx<std::size_t>::get(
  41b620:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  41b625:	48 63 12             	movslq (%rdx),%rdx
  41b628:	85 d2                	test   %edx,%edx
  41b62a:	78 18                	js     41b644 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3e4>
  41b62c:	48 8b 48 50          	mov    0x50(%rax),%rcx
  41b630:	48 8b 40 58          	mov    0x58(%rax),%rax
  41b634:	48 29 c8             	sub    %rcx,%rax
  41b637:	48 c1 f8 03          	sar    $0x3,%rax
    return key < sequence.size() ? sequence[key] : 0;
  41b63b:	48 39 d0             	cmp    %rdx,%rax
  41b63e:	0f 87 20 fd ff ff    	ja     41b364 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x104>
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  41b644:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41b649:	c6 00 00             	movb   $0x0,(%rax)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41b64c:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41b653:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41b654:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41b65b:	00 
  41b65c:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  41b663:	00 
  41b664:	e9 a0 fd ff ff       	jmpq   41b409 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1a9>
  41b669:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      return it->second;
  41b670:	4d 8b 64 24 28       	mov    0x28(%r12),%r12
  41b675:	e9 19 fd ff ff       	jmpq   41b393 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x133>
  41b67a:	49 89 c4             	mov    %rax,%r12
        if( pi_ != 0 ) pi_->release();
  41b67d:	48 85 db             	test   %rbx,%rbx
  41b680:	74 12                	je     41b694 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x434>
  41b682:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41b689:	ff ff ff 
  41b68c:	48 89 df             	mov    %rbx,%rdi
  41b68f:	4c 01 e8             	add    %r13,%rax
  41b692:	ff d0                	callq  *%rax
  41b694:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  41b699:	48 85 c0             	test   %rax,%rax
  41b69c:	74 12                	je     41b6b0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x450>
  41b69e:	48 89 c7             	mov    %rax,%rdi
  41b6a1:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41b6a8:	ff ff ff 
  41b6ab:	4c 01 e8             	add    %r13,%rax
  41b6ae:	ff d0                	callq  *%rax
  41b6b0:	48 85 db             	test   %rbx,%rbx
  41b6b3:	74 12                	je     41b6c7 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x467>
  41b6b5:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41b6bc:	ff ff ff 
  41b6bf:	48 89 df             	mov    %rbx,%rdi
  41b6c2:	4c 01 e8             	add    %r13,%rax
  41b6c5:	ff d0                	callq  *%rax
  41b6c7:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41b6ce:	ff ff ff 
  41b6d1:	4c 89 e7             	mov    %r12,%rdi
  41b6d4:	4d 89 ef             	mov    %r13,%r15
  41b6d7:	4c 01 e8             	add    %r13,%rax
  41b6da:	ff d0                	callq  *%rax
    throw InvalidNode();
  41b6dc:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41b6e3:	ff ff ff 
  41b6e6:	bf 40 00 00 00       	mov    $0x40,%edi
  41b6eb:	4d 89 ef             	mov    %r13,%r15
  41b6ee:	4c 01 e8             	add    %r13,%rax
  41b6f1:	ff d0                	callq  *%rax
  41b6f3:	48 89 c3             	mov    %rax,%rbx
  41b6f6:	48 89 c7             	mov    %rax,%rdi
  41b6f9:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  41b700:	ff ff ff 
  41b703:	4c 01 e8             	add    %r13,%rax
  41b706:	ff d0                	callq  *%rax
  41b708:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  41b70f:	ff ff ff 
  41b712:	48 89 df             	mov    %rbx,%rdi
  41b715:	49 8d 54 05 00       	lea    0x0(%r13,%rax,1),%rdx
  41b71a:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41b721:	ff ff ff 
  41b724:	49 8d 74 05 00       	lea    0x0(%r13,%rax,1),%rsi
  41b729:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41b730:	ff ff ff 
  41b733:	4c 01 e8             	add    %r13,%rax
  41b736:	ff d0                	callq  *%rax
  41b738:	48 b8 1c ec dd ff ff 	movabs $0xffffffffffddec1c,%rax
  41b73f:	ff ff ff 
  41b742:	4c 01 e8             	add    %r13,%rax
  41b745:	ff d0                	callq  *%rax
  41b747:	48 b8 c8 ec dd ff ff 	movabs $0xffffffffffddecc8,%rax
  41b74e:	ff ff ff 
  41b751:	4c 01 e8             	add    %r13,%rax
  41b754:	ff d0                	callq  *%rax
  41b756:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41b75d:	ff ff ff 
  41b760:	48 89 c5             	mov    %rax,%rbp
  41b763:	48 89 df             	mov    %rbx,%rdi
  41b766:	4d 89 ef             	mov    %r13,%r15
  41b769:	4c 01 ea             	add    %r13,%rdx
  41b76c:	ff d2                	callq  *%rdx
  41b76e:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41b775:	ff ff ff 
  41b778:	48 89 ef             	mov    %rbp,%rdi
  41b77b:	4c 01 e8             	add    %r13,%rax
  41b77e:	ff d0                	callq  *%rax
    return key < sequence.size() ? sequence[key] : 0;
  41b780:	45 31 e4             	xor    %r12d,%r12d
  41b783:	e9 e5 fb ff ff       	jmpq   41b36d <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x10d>
      throw BadSubscript();
  41b788:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41b78f:	ff ff ff 
  41b792:	49 89 c4             	mov    %rax,%r12
  41b795:	48 89 ef             	mov    %rbp,%rdi
  41b798:	4d 89 ef             	mov    %r13,%r15
  41b79b:	4c 01 ea             	add    %r13,%rdx
  41b79e:	ff d2                	callq  *%rdx
  41b7a0:	e9 d8 fe ff ff       	jmpq   41b67d <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x41d>
  41b7a5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41b7aa:	49 89 c4             	mov    %rax,%r12
  41b7ad:	48 85 ff             	test   %rdi,%rdi
  41b7b0:	74 0f                	je     41b7c1 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x561>
  41b7b2:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41b7b9:	ff ff ff 
  41b7bc:	4c 01 e8             	add    %r13,%rax
  41b7bf:	ff d0                	callq  *%rax
  41b7c1:	48 85 db             	test   %rbx,%rbx
  41b7c4:	0f 84 b3 fe ff ff    	je     41b67d <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x41d>
  41b7ca:	48 bd b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rbp
  41b7d1:	ff ff ff 
  41b7d4:	48 89 df             	mov    %rbx,%rdi
  41b7d7:	4c 01 ed             	add    %r13,%rbp
  41b7da:	ff d5                	callq  *%rbp
  41b7dc:	48 89 df             	mov    %rbx,%rdi
  41b7df:	ff d5                	callq  *%rbp
  41b7e1:	e9 97 fe ff ff       	jmpq   41b67d <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x41d>
  41b7e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41b7ed:	00 00 00 

000000000041b7f0 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41b7f0:	41 57                	push   %r15
  41b7f2:	55                   	push   %rbp
  41b7f3:	4c 8d 15 f6 ff ff ff 	lea    -0xa(%rip),%r10        # 41b7f0 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_>
  41b7fa:	53                   	push   %rbx
  41b7fb:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  41b7ff:	49 bb 10 f8 20 00 00 	movabs $0x20f810,%r11
  41b806:	00 00 00 
  41b809:	4d 01 da             	add    %r11,%r10
      { return &this->_M_impl._M_header; }
  41b80c:	48 8d 5f 08          	lea    0x8(%rdi),%rbx
      while (__x != 0)
  41b810:	48 85 d2             	test   %rdx,%rdx
  41b813:	74 53                	je     41b868 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x78>
  41b815:	4c 8b 06             	mov    (%rsi),%r8
  41b818:	eb 18                	jmp    41b832 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x42>
  41b81a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41b820:	48 8b 42 10          	mov    0x10(%rdx),%rax
  41b824:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  41b82a:	48 85 c0             	test   %rax,%rax
  41b82d:	74 18                	je     41b847 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x57>
  41b82f:	48 89 c2             	mov    %rax,%rdx
  41b832:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  41b836:	49 39 c8             	cmp    %rcx,%r8
  41b839:	72 e5                	jb     41b820 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x30>
  41b83b:	48 8b 42 18          	mov    0x18(%rdx),%rax
  41b83f:	45 31 c9             	xor    %r9d,%r9d
      while (__x != 0)
  41b842:	48 85 c0             	test   %rax,%rax
  41b845:	75 e8                	jne    41b82f <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x3f>
      if (__comp)
  41b847:	45 84 c9             	test   %r9b,%r9b
  41b84a:	48 89 d3             	mov    %rdx,%rbx
  41b84d:	48 89 d0             	mov    %rdx,%rax
  41b850:	75 16                	jne    41b868 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x78>
	return _Res(__x, __y);
  41b852:	31 d2                	xor    %edx,%edx
  41b854:	4c 39 c1             	cmp    %r8,%rcx
  41b857:	48 0f 42 c2          	cmovb  %rdx,%rax
  41b85b:	48 0f 42 d3          	cmovb  %rbx,%rdx
    }
  41b85f:	5b                   	pop    %rbx
  41b860:	5d                   	pop    %rbp
  41b861:	41 5f                	pop    %r15
  41b863:	c3                   	retq   
  41b864:	0f 1f 40 00          	nopl   0x0(%rax)
	    return _Res(__x, __y);
  41b868:	31 c0                	xor    %eax,%eax
	  if (__j == begin())
  41b86a:	48 3b 5f 18          	cmp    0x18(%rdi),%rbx
	    return _Res(__x, __y);
  41b86e:	48 89 da             	mov    %rbx,%rdx
	  if (__j == begin())
  41b871:	74 ec                	je     41b85f <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x6f>
  41b873:	48 89 f5             	mov    %rsi,%rbp
	_M_node = _Rb_tree_decrement(_M_node);
  41b876:	48 b8 e0 e7 dd ff ff 	movabs $0xffffffffffdde7e0,%rax
  41b87d:	ff ff ff 
  41b880:	48 89 df             	mov    %rbx,%rdi
  41b883:	4d 89 d7             	mov    %r10,%r15
  41b886:	4c 01 d0             	add    %r10,%rax
  41b889:	ff d0                	callq  *%rax
  41b88b:	4c 8b 45 00          	mov    0x0(%rbp),%r8
  41b88f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  41b893:	eb bd                	jmp    41b852 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x62>
  41b895:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41b89c:	00 00 00 
  41b89f:	90                   	nop

000000000041b8a0 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_>:
      operator[](const key_type& __k)
  41b8a0:	41 57                	push   %r15
  41b8a2:	41 56                	push   %r14
  41b8a4:	49 bb 60 f7 20 00 00 	movabs $0x20f760,%r11
  41b8ab:	00 00 00 
  41b8ae:	41 55                	push   %r13
  41b8b0:	41 54                	push   %r12
      { return &this->_M_impl._M_header; }
  41b8b2:	4c 8d 77 08          	lea    0x8(%rdi),%r14
  41b8b6:	55                   	push   %rbp
  41b8b7:	53                   	push   %rbx
  41b8b8:	48 8d 2d e1 ff ff ff 	lea    -0x1f(%rip),%rbp        # 41b8a0 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_>
  41b8bf:	49 89 fc             	mov    %rdi,%r12
  41b8c2:	48 83 ec 28          	sub    $0x28,%rsp
  41b8c6:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  41b8ca:	4c 01 dd             	add    %r11,%rbp
      while (__x != 0)
  41b8cd:	48 85 d2             	test   %rdx,%rdx
  41b8d0:	0f 84 92 01 00 00    	je     41ba68 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x1c8>
  41b8d6:	48 8b 06             	mov    (%rsi),%rax
      { return &this->_M_impl._M_header; }
  41b8d9:	4c 89 f3             	mov    %r14,%rbx
  41b8dc:	eb 0e                	jmp    41b8ec <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x4c>
  41b8de:	66 90                	xchg   %ax,%ax
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41b8e0:	48 89 d3             	mov    %rdx,%rbx
	  __y = __x, __x = _S_left(__x);
  41b8e3:	48 8b 52 10          	mov    0x10(%rdx),%rdx
      while (__x != 0)
  41b8e7:	48 85 d2             	test   %rdx,%rdx
  41b8ea:	74 0f                	je     41b8fb <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x5b>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41b8ec:	48 39 42 20          	cmp    %rax,0x20(%rdx)
  41b8f0:	73 ee                	jae    41b8e0 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x40>
  41b8f2:	48 8b 52 18          	mov    0x18(%rdx),%rdx
      while (__x != 0)
  41b8f6:	48 85 d2             	test   %rdx,%rdx
  41b8f9:	75 f1                	jne    41b8ec <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x4c>
	if (__i == end() || key_comp()(__k, (*__i).first))
  41b8fb:	49 39 de             	cmp    %rbx,%r14
  41b8fe:	0f 84 64 01 00 00    	je     41ba68 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x1c8>
  41b904:	48 39 43 20          	cmp    %rax,0x20(%rbx)
  41b908:	0f 86 df 00 00 00    	jbe    41b9ed <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x14d>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41b90e:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41b915:	ff ff ff 
  41b918:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41b91d:	bf a8 06 00 00       	mov    $0x6a8,%edi
  41b922:	48 01 e8             	add    %rbp,%rax
  41b925:	49 89 ef             	mov    %rbp,%r15
  41b928:	ff d0                	callq  *%rax
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
  41b92a:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41b92f:	49 89 c5             	mov    %rax,%r13
  41b932:	4c 8d 40 20          	lea    0x20(%rax),%r8
		vertexConstraints_size = 0;
  41b936:	c7 80 68 06 00 00 00 	movl   $0x0,0x668(%rax)
  41b93d:	00 00 00 
		edgeConstraints_size = 0;
  41b940:	c7 80 6c 06 00 00 00 	movl   $0x0,0x66c(%rax)
  41b947:	00 00 00 
  41b94a:	48 8b 0e             	mov    (%rsi),%rcx
  41b94d:	48 89 48 20          	mov    %rcx,0x20(%rax)
  41b951:	48 8b 53 20          	mov    0x20(%rbx),%rdx
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
  41b955:	48 39 ca             	cmp    %rcx,%rdx
  41b958:	0f 86 a2 00 00 00    	jbe    41ba00 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x160>
	  if (__pos._M_node == _M_leftmost()) // begin()
  41b95e:	49 39 5c 24 18       	cmp    %rbx,0x18(%r12)
  41b963:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  41b968:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  41b96d:	74 34                	je     41b9a3 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x103>
	_M_node = _Rb_tree_decrement(_M_node);
  41b96f:	48 b8 e0 e7 dd ff ff 	movabs $0xffffffffffdde7e0,%rax
  41b976:	ff ff ff 
  41b979:	48 89 df             	mov    %rbx,%rdi
  41b97c:	49 89 ef             	mov    %rbp,%r15
  41b97f:	48 01 e8             	add    %rbp,%rax
  41b982:	ff d0                	callq  *%rax
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
  41b984:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  41b989:	48 39 48 20          	cmp    %rcx,0x20(%rax)
  41b98d:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  41b992:	0f 83 75 01 00 00    	jae    41bb0d <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x26d>
	      if (_S_right(__before._M_node) == 0)
  41b998:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
  41b99d:	0f 84 59 01 00 00    	je     41bafc <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x25c>
	  if (__pos._M_node == _M_leftmost()) // begin()
  41b9a3:	48 89 d8             	mov    %rbx,%rax
      bool __insert_left = (__x != 0 || __p == _M_end()
  41b9a6:	49 39 c6             	cmp    %rax,%r14
  41b9a9:	0f 84 54 01 00 00    	je     41bb03 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x263>
  41b9af:	48 85 db             	test   %rbx,%rbx
  41b9b2:	0f 85 4b 01 00 00    	jne    41bb03 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x263>
  41b9b8:	49 8b 4d 20          	mov    0x20(%r13),%rcx
  41b9bc:	48 8b 50 20          	mov    0x20(%rax),%rdx
			    || _M_impl._M_key_compare(_S_key(__z),
  41b9c0:	31 ff                	xor    %edi,%edi
  41b9c2:	48 39 d1             	cmp    %rdx,%rcx
  41b9c5:	40 0f 92 c7          	setb   %dil
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  41b9c9:	48 89 c2             	mov    %rax,%rdx
  41b9cc:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  41b9d3:	ff ff ff 
  41b9d6:	4c 89 f1             	mov    %r14,%rcx
  41b9d9:	4c 89 ee             	mov    %r13,%rsi
  41b9dc:	49 89 ef             	mov    %rbp,%r15
  41b9df:	48 01 e8             	add    %rbp,%rax
  41b9e2:	ff d0                	callq  *%rax
      ++_M_impl._M_node_count;
  41b9e4:	49 83 44 24 28 01    	addq   $0x1,0x28(%r12)
  41b9ea:	4c 89 eb             	mov    %r13,%rbx
      }
  41b9ed:	48 83 c4 28          	add    $0x28,%rsp
	return (*__i).second;
  41b9f1:	48 8d 43 28          	lea    0x28(%rbx),%rax
      }
  41b9f5:	5b                   	pop    %rbx
  41b9f6:	5d                   	pop    %rbp
  41b9f7:	41 5c                	pop    %r12
  41b9f9:	41 5d                	pop    %r13
  41b9fb:	41 5e                	pop    %r14
  41b9fd:	41 5f                	pop    %r15
  41b9ff:	c3                   	retq   
  41ba00:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
  41ba05:	0f 83 d7 00 00 00    	jae    41bae2 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x242>
	  if (__pos._M_node == _M_rightmost())
  41ba0b:	49 39 5c 24 20       	cmp    %rbx,0x20(%r12)
  41ba10:	0f 84 fc 00 00 00    	je     41bb12 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x272>
	_M_node = _Rb_tree_increment(_M_node);
  41ba16:	48 b8 c0 e6 dd ff ff 	movabs $0xffffffffffdde6c0,%rax
  41ba1d:	ff ff ff 
  41ba20:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  41ba25:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  41ba2a:	48 01 e8             	add    %rbp,%rax
  41ba2d:	48 89 df             	mov    %rbx,%rdi
  41ba30:	49 89 ef             	mov    %rbp,%r15
  41ba33:	ff d0                	callq  *%rax
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
  41ba35:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  41ba3a:	48 39 48 20          	cmp    %rcx,0x20(%rax)
  41ba3e:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  41ba43:	0f 86 c4 00 00 00    	jbe    41bb0d <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x26d>
	      if (_S_right(__pos._M_node) == 0)
  41ba49:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
  41ba4e:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  41ba53:	0f 84 b9 00 00 00    	je     41bb12 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x272>
  41ba59:	48 89 c3             	mov    %rax,%rbx
  41ba5c:	e9 45 ff ff ff       	jmpq   41b9a6 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x106>
  41ba61:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41ba68:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41ba6f:	ff ff ff 
  41ba72:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41ba77:	bf a8 06 00 00       	mov    $0x6a8,%edi
  41ba7c:	48 01 e8             	add    %rbp,%rax
  41ba7f:	49 89 ef             	mov    %rbp,%r15
  41ba82:	ff d0                	callq  *%rax
  41ba84:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41ba89:	49 89 c5             	mov    %rax,%r13
  41ba8c:	48 8d 48 20          	lea    0x20(%rax),%rcx
  41ba90:	48 8b 16             	mov    (%rsi),%rdx
		vertexConstraints_size = 0;
  41ba93:	c7 80 68 06 00 00 00 	movl   $0x0,0x668(%rax)
  41ba9a:	00 00 00 
		edgeConstraints_size = 0;
  41ba9d:	c7 80 6c 06 00 00 00 	movl   $0x0,0x66c(%rax)
  41baa4:	00 00 00 
  41baa7:	48 89 50 20          	mov    %rdx,0x20(%rax)
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
  41baab:	49 83 7c 24 28 00    	cmpq   $0x0,0x28(%r12)
  41bab1:	74 0b                	je     41babe <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x21e>
  41bab3:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  41bab8:	48 39 50 20          	cmp    %rdx,0x20(%rax)
  41babc:	72 3e                	jb     41bafc <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x25c>
	    return _M_get_insert_unique_pos(__k);
  41babe:	48 89 ce             	mov    %rcx,%rsi
	    return _M_get_insert_unique_pos(__k);
  41bac1:	48 b8 f0 07 df ff ff 	movabs $0xffffffffffdf07f0,%rax
  41bac8:	ff ff ff 
  41bacb:	4c 89 e7             	mov    %r12,%rdi
  41bace:	48 01 e8             	add    %rbp,%rax
  41bad1:	ff d0                	callq  *%rax
	    if (__res.second)
  41bad3:	48 85 d2             	test   %rdx,%rdx
	    return _M_get_insert_unique_pos(__k);
  41bad6:	48 89 c3             	mov    %rax,%rbx
  41bad9:	48 89 d0             	mov    %rdx,%rax
	    if (__res.second)
  41badc:	0f 85 c4 fe ff ff    	jne    41b9a6 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x106>
      { ::operator delete(__p); }
  41bae2:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41bae9:	ff ff ff 
  41baec:	4c 89 ef             	mov    %r13,%rdi
  41baef:	49 89 ef             	mov    %rbp,%r15
  41baf2:	48 01 e8             	add    %rbp,%rax
  41baf5:	ff d0                	callq  *%rax
  41baf7:	e9 f1 fe ff ff       	jmpq   41b9ed <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x14d>
		return _Res(0, __before._M_node);
  41bafc:	31 db                	xor    %ebx,%ebx
  41bafe:	e9 a3 fe ff ff       	jmpq   41b9a6 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x106>
      bool __insert_left = (__x != 0 || __p == _M_end()
  41bb03:	bf 01 00 00 00       	mov    $0x1,%edi
  41bb08:	e9 bc fe ff ff       	jmpq   41b9c9 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x129>
	    return _M_get_insert_unique_pos(__k);
  41bb0d:	4c 89 c6             	mov    %r8,%rsi
  41bb10:	eb af                	jmp    41bac1 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x221>
	      if (_S_right(__pos._M_node) == 0)
  41bb12:	48 89 d8             	mov    %rbx,%rax
  41bb15:	e9 a6 fe ff ff       	jmpq   41b9c0 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x120>
  41bb1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000041bb20 <_ZN5swarm10bareRunnerIFvmiP13HighLevelNodeEXadL_Z19main_loop_task_paramiS2_EEiS2_EEvmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1) {
  41bb20:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 41bb20 <_ZN5swarm10bareRunnerIFvmiP13HighLevelNodeEXadL_Z19main_loop_task_paramiS2_EEiS2_EEvmmm>
  41bb27:	49 bb e0 f4 20 00 00 	movabs $0x20f4e0,%r11
  41bb2e:	00 00 00 
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1));
  41bb31:	48 b9 50 50 de ff ff 	movabs $0xffffffffffde5050,%rcx
  41bb38:	ff ff ff 
  41bb3b:	4c 01 d8             	add    %r11,%rax
  41bb3e:	48 01 c8             	add    %rcx,%rax
  41bb41:	ff e0                	jmpq   *%rax
  41bb43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41bb4a:	00 00 00 
  41bb4d:	0f 1f 00             	nopl   (%rax)

000000000041bb50 <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m>:
      __node_base* __prev_p = _M_buckets[__n];
  41bb50:	48 8b 07             	mov    (%rdi),%rax
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41bb53:	49 89 d3             	mov    %rdx,%r11
      __node_base* __prev_p = _M_buckets[__n];
  41bb56:	4c 8b 14 f0          	mov    (%rax,%rsi,8),%r10
      if (!__prev_p)
  41bb5a:	4d 85 d2             	test   %r10,%r10
  41bb5d:	74 2f                	je     41bb8e <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  41bb5f:	4d 8b 0a             	mov    (%r10),%r9
  41bb62:	4d 8b 41 18          	mov    0x18(%r9),%r8
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  41bb66:	49 39 c8             	cmp    %rcx,%r8
  41bb69:	74 2d                	je     41bb98 <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x48>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  41bb6b:	49 8b 01             	mov    (%r9),%rax
  41bb6e:	48 85 c0             	test   %rax,%rax
  41bb71:	74 18                	je     41bb8b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3b>
  41bb73:	4c 8b 40 18          	mov    0x18(%rax),%r8
    { return __num % __den; }
  41bb77:	31 d2                	xor    %edx,%edx
  41bb79:	4d 89 ca             	mov    %r9,%r10
  41bb7c:	49 89 c1             	mov    %rax,%r9
  41bb7f:	4c 89 c0             	mov    %r8,%rax
  41bb82:	48 f7 77 08          	divq   0x8(%rdi)
  41bb86:	48 39 d6             	cmp    %rdx,%rsi
  41bb89:	74 db                	je     41bb66 <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x16>
	return nullptr;
  41bb8b:	45 31 d2             	xor    %r10d,%r10d
    }
  41bb8e:	4c 89 d0             	mov    %r10,%rax
  41bb91:	c3                   	retq   
  41bb92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41bb98:	41 8b 03             	mov    (%r11),%eax
  41bb9b:	41 39 41 08          	cmp    %eax,0x8(%r9)
  41bb9f:	75 ca                	jne    41bb6b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bba1:	41 8b 41 0c          	mov    0xc(%r9),%eax
  41bba5:	41 39 43 04          	cmp    %eax,0x4(%r11)
  41bba9:	75 c0                	jne    41bb6b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bbab:	41 8b 41 10          	mov    0x10(%r9),%eax
  41bbaf:	41 39 43 08          	cmp    %eax,0x8(%r11)
  41bbb3:	75 b6                	jne    41bb6b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bbb5:	eb d7                	jmp    41bb8e <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3e>
  41bbb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41bbbe:	00 00 

000000000041bbc0 <_ZN5boost15throw_exceptionINS_16bad_lexical_castEEEvRKT_>:

#else

inline void throw_exception_assert_compatibility( std::exception const & ) { }

template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  41bbc0:	41 57                	push   %r15
  41bbc2:	41 55                	push   %r13
  41bbc4:	49 bb 40 f4 20 00 00 	movabs $0x20f440,%r11
  41bbcb:	00 00 00 
  41bbce:	41 54                	push   %r12
  41bbd0:	55                   	push   %rbp
  41bbd1:	49 89 fc             	mov    %rdi,%r12
  41bbd4:	53                   	push   %rbx
  41bbd5:	48 8d 1d e4 ff ff ff 	lea    -0x1c(%rip),%rbx        # 41bbc0 <_ZN5boost15throw_exceptionINS_16bad_lexical_castEEEvRKT_>
    //All boost exceptions are required to derive from std::exception,
    //to ensure compatibility with BOOST_NO_EXCEPTIONS.
    throw_exception_assert_compatibility(e);

#ifndef BOOST_EXCEPTION_DISABLE
    throw enable_current_exception(enable_error_info(e));
  41bbdc:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41bbe3:	ff ff ff 
  41bbe6:	bf 48 00 00 00       	mov    $0x48,%edi
  41bbeb:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  41bbee:	48 83 ec 40          	sub    $0x40,%rsp
    throw enable_current_exception(enable_error_info(e));
  41bbf2:	49 89 df             	mov    %rbx,%r15
  41bbf5:	48 01 d8             	add    %rbx,%rax
  41bbf8:	ff d0                	callq  *%rax
  41bbfa:	48 89 c5             	mov    %rax,%rbp
  41bbfd:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  41bc02:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
                T(x)
  41bc07:	48 b9 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rcx
  41bc0e:	ff ff ff 
                px_(0)
  41bc11:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  41bc18:	00 00 
            throw_line_(-1)
  41bc1a:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  41bc21:	00 00 
                T(x)
  41bc23:	48 01 d9             	add    %rbx,%rcx
            throw_line_(-1)
  41bc26:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41bc2d:	00 00 
  41bc2f:	c7 44 24 38 ff ff ff 	movl   $0xffffffff,0x38(%rsp)
  41bc36:	ff 
    class BOOST_SYMBOL_VISIBLE bad_lexical_cast :
  41bc37:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41bc3c:	48 89 45 10          	mov    %rax,0x10(%rbp)
                T(x)
  41bc40:	48 b8 b0 f0 ff ff ff 	movabs $0xfffffffffffff0b0,%rax
  41bc47:	ff ff ff 
  41bc4a:	48 01 d8             	add    %rbx,%rax
  41bc4d:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41bc52:	48 89 55 08          	mov    %rdx,0x8(%rbp)
  41bc56:	48 89 45 00          	mov    %rax,0x0(%rbp)
  41bc5a:	48 8d 50 38          	lea    0x38(%rax),%rdx
  41bc5e:	48 83 c0 70          	add    $0x70,%rax
                T(x)
  41bc62:	48 89 0c 24          	mov    %rcx,(%rsp)
                T(x)
  41bc66:	48 89 45 40          	mov    %rax,0x40(%rbp)
                T(x)
  41bc6a:	48 83 c1 28          	add    $0x28,%rcx
                copy_boost_exception(this,&x);
  41bc6e:	48 b8 70 a3 de ff ff 	movabs $0xffffffffffdea370,%rax
  41bc75:	ff ff ff 
                T(x)
  41bc78:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
                px_(x.px_)
  41bc7d:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
  41bc84:	00 
    exception
  41bc85:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
  41bc8c:	00 
  41bc8d:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
  41bc94:	00 
                copy_boost_exception(this,&x);
  41bc95:	49 89 e4             	mov    %rsp,%r12
    exception
  41bc98:	c7 45 38 ff ff ff ff 	movl   $0xffffffff,0x38(%rbp)
                T(x)
  41bc9f:	48 89 55 18          	mov    %rdx,0x18(%rbp)
                copy_boost_exception(this,&x);
  41bca3:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  41bca8:	48 8d 7d 18          	lea    0x18(%rbp),%rdi
  41bcac:	48 01 d8             	add    %rbx,%rax
  41bcaf:	ff d0                	callq  *%rax
  41bcb1:	48 b8 60 8a de ff ff 	movabs $0xffffffffffde8a60,%rax
  41bcb8:	ff ff ff 
  41bcbb:	48 89 e7             	mov    %rsp,%rdi
  41bcbe:	49 89 df             	mov    %rbx,%r15
  41bcc1:	48 01 d8             	add    %rbx,%rax
  41bcc4:	ff d0                	callq  *%rax
  41bcc6:	48 b8 c0 9b de ff ff 	movabs $0xffffffffffde9bc0,%rax
  41bccd:	ff ff ff 
  41bcd0:	48 89 ef             	mov    %rbp,%rdi
  41bcd3:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41bcd7:	48 b8 d8 f8 ff ff ff 	movabs $0xfffffffffffff8d8,%rax
  41bcde:	ff ff ff 
  41bce1:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41bce5:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41bcec:	ff ff ff 
  41bcef:	48 01 d8             	add    %rbx,%rax
  41bcf2:	ff d0                	callq  *%rax
                T(x)
  41bcf4:	48 ba 60 8a de ff ff 	movabs $0xffffffffffde8a60,%rdx
  41bcfb:	ff ff ff 
  41bcfe:	49 89 c5             	mov    %rax,%r13
  41bd01:	48 89 ef             	mov    %rbp,%rdi
  41bd04:	48 01 da             	add    %rbx,%rdx
  41bd07:	49 89 df             	mov    %rbx,%r15
  41bd0a:	ff d2                	callq  *%rdx
  41bd0c:	48 ba 60 8a de ff ff 	movabs $0xffffffffffde8a60,%rdx
  41bd13:	ff ff ff 
  41bd16:	4c 89 e7             	mov    %r12,%rdi
  41bd19:	48 01 da             	add    %rbx,%rdx
  41bd1c:	ff d2                	callq  *%rdx
  41bd1e:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41bd25:	ff ff ff 
  41bd28:	48 89 ef             	mov    %rbp,%rdi
  41bd2b:	48 01 da             	add    %rbx,%rdx
  41bd2e:	ff d2                	callq  *%rdx
  41bd30:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41bd37:	ff ff ff 
  41bd3a:	4c 89 ef             	mov    %r13,%rdi
  41bd3d:	48 01 d8             	add    %rbx,%rax
  41bd40:	ff d0                	callq  *%rax
  41bd42:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41bd49:	00 00 00 
  41bd4c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041bd50 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE>:

  return NULL;
}

template <typename Key>
inline node& node_data::get(const Key& key, shared_memory_holder pMemory) {
  41bd50:	41 57                	push   %r15
  41bd52:	41 56                	push   %r14
  41bd54:	49 bb b0 f2 20 00 00 	movabs $0x20f2b0,%r11
  41bd5b:	00 00 00 
  41bd5e:	41 55                	push   %r13
  41bd60:	41 54                	push   %r12
  41bd62:	55                   	push   %rbp
  41bd63:	53                   	push   %rbx
  41bd64:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41bd50 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE>
  41bd6b:	48 83 ec 48          	sub    $0x48,%rsp
  switch (m_type) {
  41bd6f:	8b 47 04             	mov    0x4(%rdi),%eax
  41bd72:	4c 01 db             	add    %r11,%rbx
inline node& node_data::get(const Key& key, shared_memory_holder pMemory) {
  41bd75:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  switch (m_type) {
  41bd7a:	83 f8 02             	cmp    $0x2,%eax
  41bd7d:	0f 84 05 04 00 00    	je     41c188 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x438>
  41bd83:	49 89 f5             	mov    %rsi,%r13
  41bd86:	48 89 d5             	mov    %rdx,%rbp
  41bd89:	0f 82 d9 00 00 00    	jb     41be68 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x118>
  41bd8f:	83 f8 03             	cmp    $0x3,%eax
  41bd92:	0f 84 d0 00 00 00    	je     41be68 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x118>
      { return iterator(&this->_M_impl._M_header); }
  41bd98:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  41bd9d:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
  41bda2:	48 89 f0             	mov    %rsi,%rax
      break;
    case NodeType::Scalar:
      throw BadSubscript();
  }

  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41bda5:	4c 8b be 88 00 00 00 	mov    0x88(%rsi),%r15
  41bdac:	48 83 c0 78          	add    $0x78,%rax
  41bdb0:	48 89 c1             	mov    %rax,%rcx
  41bdb3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41bdb8:	48 b8 50 ba de ff ff 	movabs $0xffffffffffdeba50,%rax
  41bdbf:	ff ff ff 
    if (it->first->equals(key, pMemory)) {
  41bdc2:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  41bdc6:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41bdcd:	ff ff ff 
  41bdd0:	48 01 d8             	add    %rbx,%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41bdd3:	49 39 cf             	cmp    %rcx,%r15
  41bdd6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41bddb:	75 2e                	jne    41be0b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xbb>
  41bddd:	e9 0e 01 00 00       	jmpq   41bef0 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x1a0>
  41bde2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	_M_node = _Rb_tree_increment(_M_node);
  41bde8:	48 b8 40 e8 dd ff ff 	movabs $0xffffffffffdde840,%rax
  41bdef:	ff ff ff 
  41bdf2:	4c 89 ff             	mov    %r15,%rdi
  41bdf5:	49 89 df             	mov    %rbx,%r15
  41bdf8:	48 01 d8             	add    %rbx,%rax
  41bdfb:	ff d0                	callq  *%rax
  41bdfd:	48 3b 44 24 08       	cmp    0x8(%rsp),%rax
  41be02:	49 89 c7             	mov    %rax,%r15
  41be05:	0f 84 e5 00 00 00    	je     41bef0 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x1a0>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41be0b:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41be0f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41be14:	48 8b 45 08          	mov    0x8(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41be18:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41be1b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41be20:	74 05                	je     41be27 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xd7>
  41be22:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
    if (it->first->equals(key, pMemory)) {
  41be27:	49 8b 7f 20          	mov    0x20(%r15),%rdi
  41be2b:	4c 89 e2             	mov    %r12,%rdx
  41be2e:	4c 89 ee             	mov    %r13,%rsi
  41be31:	41 ff d6             	callq  *%r14
        if( pi_ != 0 ) pi_->release();
  41be34:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41be39:	48 85 ff             	test   %rdi,%rdi
  41be3c:	74 0e                	je     41be4c <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xfc>
  41be3e:	88 04 24             	mov    %al,(%rsp)
  41be41:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41be46:	ff d0                	callq  *%rax
  41be48:	0f b6 04 24          	movzbl (%rsp),%eax
  41be4c:	84 c0                	test   %al,%al
  41be4e:	74 98                	je     41bde8 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x98>
      return *it->second;
  41be50:	49 8b 47 28          	mov    0x28(%r15),%rax

  node& k = convert_to_node(key, pMemory);
  node& v = pMemory->create_node();
  insert_map_pair(k, v);
  return v;
}
  41be54:	48 83 c4 48          	add    $0x48,%rsp
  41be58:	5b                   	pop    %rbx
  41be59:	5d                   	pop    %rbp
  41be5a:	41 5c                	pop    %r12
  41be5c:	41 5d                	pop    %r13
  41be5e:	41 5e                	pop    %r14
  41be60:	41 5f                	pop    %r15
  41be62:	c3                   	retq   
  41be63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41be68:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
        if( pi_ != 0 ) pi_->add_ref_copy();
  41be6c:	48 85 ff             	test   %rdi,%rdi
  41be6f:	0f 84 6d 03 00 00    	je     41c1e2 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x492>
  41be75:	f0 83 47 08 01       	lock addl $0x1,0x8(%rdi)
        if( pi_ != 0 ) pi_->release();
  41be7a:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41be81:	ff ff ff 
  41be84:	48 01 d8             	add    %rbx,%rax
  41be87:	ff d0                	callq  *%rax
  41be89:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41be8d:	48 8b 55 00          	mov    0x0(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41be91:	48 85 c0             	test   %rax,%rax
  41be94:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41be99:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41be9e:	74 05                	je     41bea5 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x155>
  41bea0:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
      convert_to_map(pMemory);
  41bea5:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
  41beaa:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41beb1:	ff ff ff 
  41beb4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41beb9:	49 89 df             	mov    %rbx,%r15
  41bebc:	48 01 d8             	add    %rbx,%rax
  41bebf:	4c 89 e6             	mov    %r12,%rsi
  41bec2:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41bec4:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41bec9:	48 85 ff             	test   %rdi,%rdi
  41becc:	0f 84 c6 fe ff ff    	je     41bd98 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x48>
  41bed2:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41bed9:	ff ff ff 
  41bedc:	48 01 d8             	add    %rbx,%rax
  41bedf:	ff d0                	callq  *%rax
      break;
  41bee1:	e9 b2 fe ff ff       	jmpq   41bd98 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x48>
  41bee6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41beed:	00 00 00 
  41bef0:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41bef4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41bef9:	48 8b 45 08          	mov    0x8(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41befd:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41bf00:	48 89 04 24          	mov    %rax,(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41bf04:	74 05                	je     41bf0b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x1bb>
  41bf06:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
      m_pMemory(new detail::memory_holder),
  41bf0b:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41bf12:	ff ff ff 
      m_pNode(&m_pMemory->create_node()) {
  41bf15:	c6 44 24 20 01       	movb   $0x1,0x20(%rsp)
      m_pMemory(new detail::memory_holder),
  41bf1a:	bf 10 00 00 00       	mov    $0x10,%edi
  41bf1f:	49 89 c4             	mov    %rax,%r12
  41bf22:	49 89 df             	mov    %rbx,%r15
  41bf25:	48 01 d8             	add    %rbx,%rax
  41bf28:	ff d0                	callq  *%rax
  41bf2a:	49 89 c6             	mov    %rax,%r14
  memory_holder() : m_pMemory(new memory) {}
  41bf2d:	4c 89 e0             	mov    %r12,%rax
  41bf30:	bf 30 00 00 00       	mov    $0x30,%edi
  41bf35:	4c 89 64 24 08       	mov    %r12,0x8(%rsp)
  41bf3a:	48 01 d8             	add    %rbx,%rax
  41bf3d:	ff d0                	callq  *%rax
  41bf3f:	49 89 c4             	mov    %rax,%r12
	    _M_node_count(0)
  41bf42:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  41bf49:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41bf50:	00 
  41bf51:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  41bf58:	00 
	    this->_M_header._M_left = &this->_M_header;
  41bf59:	48 8d 40 08          	lea    0x8(%rax),%rax
    explicit shared_ptr( Y * p ): px( p ), pn() // Y must be complete
  41bf5d:	4d 89 26             	mov    %r12,(%r14)
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41bf60:	49 c7 46 08 00 00 00 	movq   $0x0,0x8(%r14)
  41bf67:	00 
            pi_ = new sp_counted_impl_p<Y>( p );
  41bf68:	bf 18 00 00 00       	mov    $0x18,%edi
  41bf6d:	49 89 44 24 18       	mov    %rax,0x18(%r12)
	    this->_M_header._M_right = &this->_M_header;
  41bf72:	49 89 44 24 20       	mov    %rax,0x20(%r12)
  41bf77:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41bf7c:	48 01 d8             	add    %rbx,%rax
  41bf7f:	ff d0                	callq  *%rax
        sp_counted_base * tmp = r.pi_;
  41bf81:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  41bf85:	48 ba c0 ef ff ff ff 	movabs $0xffffffffffffefc0,%rdx
  41bf8c:	ff ff ff 
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
  41bf8f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41bf96:	48 01 da             	add    %rbx,%rdx
  41bf99:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41bfa0:	4c 89 60 10          	mov    %r12,0x10(%rax)
  41bfa4:	48 89 10             	mov    %rdx,(%rax)
        r.pi_ = pi_;
  41bfa7:	49 89 46 08          	mov    %rax,0x8(%r14)
        if( pi_ != 0 ) pi_->release();
  41bfab:	48 85 ff             	test   %rdi,%rdi
  41bfae:	74 0f                	je     41bfbf <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x26f>
  41bfb0:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41bfb7:	ff ff ff 
  41bfba:	48 01 d8             	add    %rbx,%rax
  41bfbd:	ff d0                	callq  *%rax
            pi_ = new sp_counted_impl_p<Y>( p );
  41bfbf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41bfc4:	4c 89 74 24 28       	mov    %r14,0x28(%rsp)
  41bfc9:	bf 18 00 00 00       	mov    $0x18,%edi
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41bfce:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41bfd5:	00 00 
            pi_ = new sp_counted_impl_p<Y>( p );
  41bfd7:	49 89 df             	mov    %rbx,%r15
  41bfda:	48 01 d8             	add    %rbx,%rax
  41bfdd:	ff d0                	callq  *%rax
        sp_counted_base * tmp = r.pi_;
  41bfdf:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41bfe4:	48 ba 08 f0 ff ff ff 	movabs $0xfffffffffffff008,%rdx
  41bfeb:	ff ff ff 
  41bfee:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41bff5:	48 01 da             	add    %rbx,%rdx
  41bff8:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41bfff:	4c 89 70 10          	mov    %r14,0x10(%rax)
  41c003:	48 89 10             	mov    %rdx,(%rax)
        r.pi_ = pi_;
  41c006:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        if( pi_ != 0 ) pi_->release();
  41c00b:	48 85 ff             	test   %rdi,%rdi
  41c00e:	74 0f                	je     41c01f <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x2cf>
  41c010:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c017:	ff ff ff 
  41c01a:	48 01 d8             	add    %rbx,%rax
  41c01d:	ff d0                	callq  *%rax
  41c01f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        BOOST_ASSERT( px != 0 );
  41c024:	48 85 c0             	test   %rax,%rax
  41c027:	0f 84 c6 02 00 00    	je     41c2f3 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x5a3>
  41c02d:	48 8b 38             	mov    (%rax),%rdi
  41c030:	48 85 ff             	test   %rdi,%rdi
  41c033:	0f 84 36 03 00 00    	je     41c36f <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x61f>
  node& create_node() { return m_pMemory->create_node(); }
  41c039:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41c040:	ff ff ff 
  41c043:	49 89 df             	mov    %rbx,%r15
  41c046:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41c04b:	48 01 d8             	add    %rbx,%rax
  41c04e:	ff d0                	callq  *%rax
  if (!m_isValid)
  41c050:	80 7c 24 20 00       	cmpb   $0x0,0x20(%rsp)
      m_pNode(&m_pMemory->create_node()) {
  41c055:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  if (!m_isValid)
  41c05a:	0f 84 75 03 00 00    	je     41c3d5 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x685>
  EnsureNodeExists();
  41c060:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
  41c065:	49 be 90 fe de ff ff 	movabs $0xffffffffffdefe90,%r14
  41c06c:	ff ff ff 
  41c06f:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41c073:	4c 89 e7             	mov    %r12,%rdi
  41c076:	ff d0                	callq  *%rax
  m_pNode->set_scalar(rhs);
  41c078:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
    m_pRef->set_null();
  }
  void set_scalar(const std::string& scalar) {
    mark_defined();
  41c07d:	48 b8 20 d8 de ff ff 	movabs $0xffffffffffded820,%rax
  41c084:	ff ff ff 
  41c087:	48 01 d8             	add    %rbx,%rax
  41c08a:	4c 89 ff             	mov    %r15,%rdi
  41c08d:	ff d0                	callq  *%rax
  41c08f:	49 8b 07             	mov    (%r15),%rax
  41c092:	48 85 c0             	test   %rax,%rax
  41c095:	0f 84 91 03 00 00    	je     41c42c <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x6dc>
  41c09b:	48 8b 38             	mov    (%rax),%rdi
  41c09e:	48 85 ff             	test   %rdi,%rdi
  41c0a1:	0f 84 b1 03 00 00    	je     41c458 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x708>
  void set_scalar(const std::string& scalar) { m_pData->set_scalar(scalar); }
  41c0a7:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  41c0ae:	ff ff ff 
  41c0b1:	4c 89 ee             	mov    %r13,%rsi
  41c0b4:	49 89 df             	mov    %rbx,%r15
  41c0b7:	48 01 d8             	add    %rbx,%rax
  41c0ba:	ff d0                	callq  *%rax

template <typename T>
inline node& node_data::convert_to_node(const T& rhs,
                                        shared_memory_holder pMemory) {
  Node value = convert<T>::encode(rhs);
  value.EnsureNodeExists();
  41c0bc:	4c 89 e7             	mov    %r12,%rdi
  41c0bf:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41c0c3:	ff d0                	callq  *%rax
  41c0c5:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
        BOOST_ASSERT( px != 0 );
  41c0ca:	48 85 f6             	test   %rsi,%rsi
  41c0cd:	0f 84 b9 03 00 00    	je     41c48c <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x73c>
        BOOST_ASSERT( px != 0 );
  41c0d3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41c0d8:	48 85 c0             	test   %rax,%rax
  41c0db:	0f 84 12 02 00 00    	je     41c2f3 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x5a3>
  pMemory->merge(*value.m_pMemory);
  41c0e1:	48 89 c7             	mov    %rax,%rdi
  41c0e4:	48 b8 a0 e9 dd ff ff 	movabs $0xffffffffffdde9a0,%rax
  41c0eb:	ff ff ff 
  41c0ee:	49 89 df             	mov    %rbx,%r15
  41c0f1:	48 01 d8             	add    %rbx,%rax
  41c0f4:	ff d0                	callq  *%rax
  41c0f6:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  return *value.m_pNode;
  41c0fb:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  41c100:	48 85 ff             	test   %rdi,%rdi
  41c103:	74 0f                	je     41c114 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x3c4>
  41c105:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c10c:	ff ff ff 
  41c10f:	48 01 d8             	add    %rbx,%rax
  41c112:	ff d0                	callq  *%rax
  41c114:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  41c119:	74 13                	je     41c12e <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x3de>
  41c11b:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c122:	ff ff ff 
  41c125:	48 8b 3c 24          	mov    (%rsp),%rdi
  41c129:	48 01 d8             	add    %rbx,%rax
  41c12c:	ff d0                	callq  *%rax
  41c12e:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41c132:	48 85 c0             	test   %rax,%rax
  41c135:	0f 84 b8 01 00 00    	je     41c2f3 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x5a3>
  41c13b:	48 8b 38             	mov    (%rax),%rdi
  41c13e:	48 85 ff             	test   %rdi,%rdi
  41c141:	0f 84 28 02 00 00    	je     41c36f <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x61f>
  41c147:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41c14c:	49 89 df             	mov    %rbx,%r15
  41c14f:	48 01 d8             	add    %rbx,%rax
  41c152:	ff d0                	callq  *%rax
  insert_map_pair(k, v);
  41c154:	48 b9 f0 e7 dd ff ff 	movabs $0xffffffffffdde7f0,%rcx
  41c15b:	ff ff ff 
  41c15e:	48 89 04 24          	mov    %rax,(%rsp)
  41c162:	48 89 c2             	mov    %rax,%rdx
  41c165:	4c 89 e6             	mov    %r12,%rsi
  41c168:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41c16d:	48 01 d9             	add    %rbx,%rcx
  41c170:	ff d1                	callq  *%rcx
  return v;
  41c172:	48 8b 04 24          	mov    (%rsp),%rax
}
  41c176:	48 83 c4 48          	add    $0x48,%rsp
  41c17a:	5b                   	pop    %rbx
  41c17b:	5d                   	pop    %rbp
  41c17c:	41 5c                	pop    %r12
  41c17e:	41 5d                	pop    %r13
  41c180:	41 5e                	pop    %r14
  41c182:	41 5f                	pop    %r15
  41c184:	c3                   	retq   
  41c185:	0f 1f 00             	nopl   (%rax)
      throw BadSubscript();
  41c188:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41c18f:	ff ff ff 
  41c192:	bf 40 00 00 00       	mov    $0x40,%edi
  41c197:	49 89 df             	mov    %rbx,%r15
  41c19a:	48 01 d8             	add    %rbx,%rax
  41c19d:	ff d0                	callq  *%rax
  41c19f:	48 89 c5             	mov    %rax,%rbp
  41c1a2:	48 89 c7             	mov    %rax,%rdi
  41c1a5:	48 b8 a0 af de ff ff 	movabs $0xffffffffffdeafa0,%rax
  41c1ac:	ff ff ff 
  41c1af:	48 01 d8             	add    %rbx,%rax
  41c1b2:	ff d0                	callq  *%rax
  41c1b4:	48 b8 f0 94 de ff ff 	movabs $0xffffffffffde94f0,%rax
  41c1bb:	ff ff ff 
  41c1be:	48 89 ef             	mov    %rbp,%rdi
  41c1c1:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41c1c5:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  41c1cc:	ff ff ff 
  41c1cf:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c1d3:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41c1da:	ff ff ff 
  41c1dd:	48 01 d8             	add    %rbx,%rax
  41c1e0:	ff d0                	callq  *%rax
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c1e2:	48 8b 45 00          	mov    0x0(%rbp),%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c1e6:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  41c1ed:	00 00 
  41c1ef:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41c1f4:	e9 ac fc ff ff       	jmpq   41bea5 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x155>
        if( pi_ != 0 ) pi_->release();
  41c1f9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41c1fe:	48 89 c5             	mov    %rax,%rbp
  41c201:	48 85 ff             	test   %rdi,%rdi
  41c204:	74 0f                	je     41c215 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c206:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c20d:	ff ff ff 
  41c210:	48 01 d8             	add    %rbx,%rax
  41c213:	ff d0                	callq  *%rax
  41c215:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41c21c:	ff ff ff 
  41c21f:	48 89 ef             	mov    %rbp,%rdi
  41c222:	49 89 df             	mov    %rbx,%r15
  41c225:	48 01 d8             	add    %rbx,%rax
  41c228:	ff d0                	callq  *%rax
  41c22a:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41c22f:	48 89 c5             	mov    %rax,%rbp
  41c232:	48 85 ff             	test   %rdi,%rdi
  41c235:	74 de                	je     41c215 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c237:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c23e:	ff ff ff 
  41c241:	48 01 d8             	add    %rbx,%rax
  41c244:	ff d0                	callq  *%rax
  41c246:	eb cd                	jmp    41c215 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c248:	48 89 c5             	mov    %rax,%rbp
  41c24b:	48 8b 04 24          	mov    (%rsp),%rax
  41c24f:	48 85 c0             	test   %rax,%rax
  41c252:	74 c1                	je     41c215 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c254:	48 89 c7             	mov    %rax,%rdi
  41c257:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c25e:	ff ff ff 
  41c261:	48 01 d8             	add    %rbx,%rax
  41c264:	ff d0                	callq  *%rax
  41c266:	eb ad                	jmp    41c215 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c268:	48 89 c5             	mov    %rax,%rbp
      m_pMemory(new detail::memory_holder),
  41c26b:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  41c272:	ff ff ff 
  41c275:	be 10 00 00 00       	mov    $0x10,%esi
  41c27a:	4c 89 f7             	mov    %r14,%rdi
  41c27d:	49 89 df             	mov    %rbx,%r15
  41c280:	48 01 d8             	add    %rbx,%rax
  41c283:	ff d0                	callq  *%rax
  41c285:	eb c4                	jmp    41c24b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
        catch(...)
  41c287:	48 89 c7             	mov    %rax,%rdi
  41c28a:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41c291:	ff ff ff 
  41c294:	49 89 df             	mov    %rbx,%r15
  41c297:	48 01 d8             	add    %rbx,%rax
  41c29a:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41c29c:	48 b8 10 fd de ff ff 	movabs $0xffffffffffdefd10,%rax
  41c2a3:	ff ff ff 
  41c2a6:	4c 89 e7             	mov    %r12,%rdi
  41c2a9:	48 01 d8             	add    %rbx,%rax
  41c2ac:	ff d0                	callq  *%rax
            throw;
  41c2ae:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  41c2b5:	ff ff ff 
  41c2b8:	48 01 d8             	add    %rbx,%rax
  41c2bb:	ff d0                	callq  *%rax
        catch(...)
  41c2bd:	48 89 c7             	mov    %rax,%rdi
  41c2c0:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41c2c7:	ff ff ff 
  41c2ca:	49 89 df             	mov    %rbx,%r15
  41c2cd:	48 01 d8             	add    %rbx,%rax
  41c2d0:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41c2d2:	48 b8 30 fe de ff ff 	movabs $0xffffffffffdefe30,%rax
  41c2d9:	ff ff ff 
  41c2dc:	4c 89 f7             	mov    %r14,%rdi
  41c2df:	48 01 d8             	add    %rbx,%rax
  41c2e2:	ff d0                	callq  *%rax
            throw;
  41c2e4:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  41c2eb:	ff ff ff 
  41c2ee:	48 01 d8             	add    %rbx,%rax
  41c2f1:	ff d0                	callq  *%rax
  41c2f3:	48 b8 1e ed dd ff ff 	movabs $0xffffffffffdded1e,%rax
  41c2fa:	ff ff ff 
  41c2fd:	48 01 d8             	add    %rbx,%rax
  41c300:	ff d0                	callq  *%rax
  41c302:	48 89 c5             	mov    %rax,%rbp
        catch(...)
  41c305:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  41c30c:	ff ff ff 
  41c30f:	49 89 df             	mov    %rbx,%r15
  41c312:	48 01 d8             	add    %rbx,%rax
  41c315:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c317:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  41c31b:	48 85 ff             	test   %rdi,%rdi
  41c31e:	0f 84 47 ff ff ff    	je     41c26b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x51b>
  41c324:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c32b:	ff ff ff 
  41c32e:	48 01 d8             	add    %rbx,%rax
  41c331:	ff d0                	callq  *%rax
  41c333:	e9 33 ff ff ff       	jmpq   41c26b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x51b>
  41c338:	48 89 c5             	mov    %rax,%rbp
        catch(...)
  41c33b:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  41c342:	ff ff ff 
  41c345:	49 89 df             	mov    %rbx,%r15
  41c348:	48 01 d8             	add    %rbx,%rax
  41c34b:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c34d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c352:	48 85 ff             	test   %rdi,%rdi
  41c355:	0f 84 f0 fe ff ff    	je     41c24b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c35b:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c362:	ff ff ff 
  41c365:	48 01 d8             	add    %rbx,%rax
  41c368:	ff d0                	callq  *%rax
  41c36a:	e9 dc fe ff ff       	jmpq   41c24b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
        BOOST_ASSERT( px != 0 );
  41c36f:	48 b8 e0 86 df ff ff 	movabs $0xffffffffffdf86e0,%rax
  41c376:	ff ff ff 
  41c379:	ba de 02 00 00       	mov    $0x2de,%edx
  41c37e:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
        BOOST_ASSERT( px != 0 );
  41c382:	48 b8 40 7a df ff ff 	movabs $0xffffffffffdf7a40,%rax
  41c389:	ff ff ff 
  41c38c:	49 89 df             	mov    %rbx,%r15
  41c38f:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c393:	48 b8 e9 7d df ff ff 	movabs $0xffffffffffdf7de9,%rax
  41c39a:	ff ff ff 
  41c39d:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41c3a1:	48 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%rax
  41c3a8:	ff ff ff 
  41c3ab:	48 01 d8             	add    %rbx,%rax
  41c3ae:	ff d0                	callq  *%rax
  41c3b0:	48 89 c5             	mov    %rax,%rbp
  41c3b3:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c3b8:	48 85 ff             	test   %rdi,%rdi
  41c3bb:	0f 84 8a fe ff ff    	je     41c24b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c3c1:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c3c8:	ff ff ff 
  41c3cb:	48 01 d8             	add    %rbx,%rax
  41c3ce:	ff d0                	callq  *%rax
  41c3d0:	e9 76 fe ff ff       	jmpq   41c24b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
    throw InvalidNode();
  41c3d5:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41c3dc:	ff ff ff 
  41c3df:	bf 40 00 00 00       	mov    $0x40,%edi
  41c3e4:	48 01 d8             	add    %rbx,%rax
  41c3e7:	ff d0                	callq  *%rax
  41c3e9:	49 89 c4             	mov    %rax,%r12
  41c3ec:	48 89 c7             	mov    %rax,%rdi
  41c3ef:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  41c3f6:	ff ff ff 
  41c3f9:	48 01 d8             	add    %rbx,%rax
  41c3fc:	ff d0                	callq  *%rax
  41c3fe:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  41c405:	ff ff ff 
  41c408:	4c 89 e7             	mov    %r12,%rdi
  41c40b:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41c40f:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41c416:	ff ff ff 
  41c419:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c41d:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41c424:	ff ff ff 
  41c427:	48 01 d8             	add    %rbx,%rax
  41c42a:	ff d0                	callq  *%rax
  41c42c:	48 b8 72 ec dd ff ff 	movabs $0xffffffffffddec72,%rax
  41c433:	ff ff ff 
  41c436:	48 01 d8             	add    %rbx,%rax
  41c439:	ff d0                	callq  *%rax
  41c43b:	48 89 c5             	mov    %rax,%rbp
  41c43e:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  41c445:	ff ff ff 
  41c448:	4c 89 e7             	mov    %r12,%rdi
  41c44b:	49 89 df             	mov    %rbx,%r15
  41c44e:	48 01 d8             	add    %rbx,%rax
  41c451:	ff d0                	callq  *%rax
  41c453:	e9 5b ff ff ff       	jmpq   41c3b3 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x663>
  41c458:	48 b8 c6 eb dd ff ff 	movabs $0xffffffffffddebc6,%rax
  41c45f:	ff ff ff 
  41c462:	48 01 d8             	add    %rbx,%rax
  41c465:	ff d0                	callq  *%rax
  41c467:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c46c:	48 89 c5             	mov    %rax,%rbp
  41c46f:	48 85 ff             	test   %rdi,%rdi
  41c472:	0f 84 d3 fd ff ff    	je     41c24b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c478:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c47f:	ff ff ff 
  41c482:	48 01 d8             	add    %rbx,%rax
  41c485:	ff d0                	callq  *%rax
  41c487:	e9 bf fd ff ff       	jmpq   41c24b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c48c:	48 b8 40 84 df ff ff 	movabs $0xffffffffffdf8440,%rax
  41c493:	ff ff ff 
  41c496:	ba d8 02 00 00       	mov    $0x2d8,%edx
  41c49b:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  41c49f:	e9 de fe ff ff       	jmpq   41c382 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x632>
  41c4a4:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41c4ab:	ff ff ff 
  41c4ae:	49 89 c4             	mov    %rax,%r12
  41c4b1:	48 89 ef             	mov    %rbp,%rdi
  41c4b4:	49 89 df             	mov    %rbx,%r15
  41c4b7:	48 01 da             	add    %rbx,%rdx
  41c4ba:	ff d2                	callq  *%rdx
  41c4bc:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41c4c3:	ff ff ff 
  41c4c6:	4c 89 e7             	mov    %r12,%rdi
  41c4c9:	48 01 d8             	add    %rbx,%rax
  41c4cc:	ff d0                	callq  *%rax
  41c4ce:	66 90                	xchg   %ax,%ax

000000000041c4d0 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE>:
    // it, and returns a pointer so that it can be NULL (if there is no such
    // key).
    return static_cast<const node_ref&>(*m_pRef).get(key, pMemory);
  }
  template <typename Key>
  node& get(const Key& key, shared_memory_holder pMemory) {
  41c4d0:	41 57                	push   %r15
  41c4d2:	41 56                	push   %r14
  41c4d4:	49 bb 30 eb 20 00 00 	movabs $0x20eb30,%r11
  41c4db:	00 00 00 
  41c4de:	41 55                	push   %r13
  41c4e0:	41 54                	push   %r12
  41c4e2:	49 89 fd             	mov    %rdi,%r13
  41c4e5:	55                   	push   %rbp
  41c4e6:	53                   	push   %rbx
  41c4e7:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41c4d0 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE>
  41c4ee:	48 83 ec 18          	sub    $0x18,%rsp
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c4f2:	48 8b 6a 08          	mov    0x8(%rdx),%rbp
  41c4f6:	4c 01 db             	add    %r11,%rbx
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c4f9:	48 8b 0a             	mov    (%rdx),%rcx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c4fc:	48 85 ed             	test   %rbp,%rbp
  41c4ff:	0f 84 d3 00 00 00    	je     41c5d8 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x108>
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  41c505:	48 8d 45 08          	lea    0x8(%rbp),%rax
  41c509:	f0 83 00 01          	lock addl $0x1,(%rax)
  41c50d:	48 8b 17             	mov    (%rdi),%rdx
        BOOST_ASSERT( px != 0 );
  41c510:	48 85 d2             	test   %rdx,%rdx
  41c513:	0f 84 d9 00 00 00    	je     41c5f2 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x122>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c519:	48 89 0c 24          	mov    %rcx,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c51d:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  41c522:	f0 83 00 01          	lock addl $0x1,(%rax)
  41c526:	48 8b 3a             	mov    (%rdx),%rdi
        BOOST_ASSERT( px != 0 );
  41c529:	48 85 ff             	test   %rdi,%rdi
  41c52c:	0f 84 cf 00 00 00    	je     41c601 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x131>
  node* get(const Key& key, shared_memory_holder pMemory) const {
    return static_cast<const node_data&>(*m_pData).get(key, pMemory);
  }
  template <typename Key>
  node& get(const Key& key, shared_memory_holder pMemory) {
    return m_pData->get(key, pMemory);
  41c532:	48 b8 50 0d df ff ff 	movabs $0xffffffffffdf0d50,%rax
  41c539:	ff ff ff 
  41c53c:	49 89 e6             	mov    %rsp,%r14
  41c53f:	48 89 e2             	mov    %rsp,%rdx
  41c542:	48 01 d8             	add    %rbx,%rax
  41c545:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c547:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c54c:	49 89 c4             	mov    %rax,%r12
  41c54f:	48 85 ff             	test   %rdi,%rdi
  41c552:	74 0f                	je     41c563 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x93>
  41c554:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c55b:	ff ff ff 
  41c55e:	48 01 d8             	add    %rbx,%rax
  41c561:	ff d0                	callq  *%rax
  41c563:	48 85 ed             	test   %rbp,%rbp
  41c566:	74 12                	je     41c57a <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xaa>
  41c568:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c56f:	ff ff ff 
  41c572:	48 89 ef             	mov    %rbp,%rdi
  41c575:	48 01 d8             	add    %rbx,%rax
  41c578:	ff d0                	callq  *%rax
  41c57a:	49 8b 04 24          	mov    (%r12),%rax
  41c57e:	48 85 c0             	test   %rax,%rax
  41c581:	74 6f                	je     41c5f2 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x122>
  41c583:	48 8b 00             	mov    (%rax),%rax
  41c586:	48 85 c0             	test   %rax,%rax
  41c589:	74 76                	je     41c601 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x131>
    if (is_defined())
  41c58b:	80 38 00             	cmpb   $0x0,(%rax)
  41c58e:	75 30                	jne    41c5c0 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xf0>
	  _M_t._M_insert_unique(std::move(__x));
  41c590:	48 b8 60 d9 de ff ff 	movabs $0xffffffffffded960,%rax
  41c597:	ff ff ff 
      m_dependencies.insert(&rhs);
  41c59a:	4c 89 2c 24          	mov    %r13,(%rsp)
  41c59e:	49 8d 7c 24 10       	lea    0x10(%r12),%rdi
  41c5a3:	4c 89 f6             	mov    %r14,%rsi
  41c5a6:	48 01 d8             	add    %rbx,%rax
  41c5a9:	ff d0                	callq  *%rax
    node& value = m_pRef->get(key, pMemory);
    value.add_dependency(*this);
    return value;
  }
  41c5ab:	48 83 c4 18          	add    $0x18,%rsp
  41c5af:	4c 89 e0             	mov    %r12,%rax
  41c5b2:	5b                   	pop    %rbx
  41c5b3:	5d                   	pop    %rbp
  41c5b4:	41 5c                	pop    %r12
  41c5b6:	41 5d                	pop    %r13
  41c5b8:	41 5e                	pop    %r14
  41c5ba:	41 5f                	pop    %r15
  41c5bc:	c3                   	retq   
  41c5bd:	0f 1f 00             	nopl   (%rax)
      rhs.mark_defined();
  41c5c0:	48 b8 20 d8 de ff ff 	movabs $0xffffffffffded820,%rax
  41c5c7:	ff ff ff 
  41c5ca:	4c 89 ef             	mov    %r13,%rdi
  41c5cd:	48 01 d8             	add    %rbx,%rax
  41c5d0:	ff d0                	callq  *%rax
  41c5d2:	eb d7                	jmp    41c5ab <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xdb>
  41c5d4:	0f 1f 40 00          	nopl   0x0(%rax)
  41c5d8:	48 8b 17             	mov    (%rdi),%rdx
  41c5db:	48 85 d2             	test   %rdx,%rdx
  41c5de:	74 12                	je     41c5f2 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x122>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c5e0:	48 89 0c 24          	mov    %rcx,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c5e4:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  41c5eb:	00 00 
  41c5ed:	e9 34 ff ff ff       	jmpq   41c526 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x56>
  41c5f2:	48 b8 72 ec dd ff ff 	movabs $0xffffffffffddec72,%rax
  41c5f9:	ff ff ff 
  41c5fc:	48 01 d8             	add    %rbx,%rax
  41c5ff:	ff d0                	callq  *%rax
  41c601:	48 b8 c6 eb dd ff ff 	movabs $0xffffffffffddebc6,%rax
  41c608:	ff ff ff 
  41c60b:	48 01 d8             	add    %rbx,%rax
  41c60e:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c610:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c615:	49 89 c4             	mov    %rax,%r12
  41c618:	48 85 ff             	test   %rdi,%rdi
  41c61b:	74 0f                	je     41c62c <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x15c>
  41c61d:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c624:	ff ff ff 
  41c627:	48 01 d8             	add    %rbx,%rax
  41c62a:	ff d0                	callq  *%rax
  41c62c:	48 85 ed             	test   %rbp,%rbp
  41c62f:	74 12                	je     41c643 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x173>
  41c631:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c638:	ff ff ff 
  41c63b:	48 89 ef             	mov    %rbp,%rdi
  41c63e:	48 01 d8             	add    %rbx,%rax
  41c641:	ff d0                	callq  *%rax
  41c643:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41c64a:	ff ff ff 
  41c64d:	4c 89 e7             	mov    %r12,%rdi
  41c650:	49 89 df             	mov    %rbx,%r15
  41c653:	48 01 d8             	add    %rbx,%rax
  41c656:	ff d0                	callq  *%rax
  41c658:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41c65f:	00 

000000000041c660 <_ZN4YAML4NodeixIA11_cEES0_RKT_>:

template <typename Key>
inline Node Node::operator[](const Key& key) {
  41c660:	41 57                	push   %r15
  41c662:	41 56                	push   %r14
  41c664:	49 bb a0 e9 20 00 00 	movabs $0x20e9a0,%r11
  41c66b:	00 00 00 
  41c66e:	41 55                	push   %r13
  41c670:	41 54                	push   %r12
  41c672:	55                   	push   %rbp
  41c673:	53                   	push   %rbx
  41c674:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41c660 <_ZN4YAML4NodeixIA11_cEES0_RKT_>
  41c67b:	48 83 ec 38          	sub    $0x38,%rsp
  41c67f:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41c682:	80 3e 00             	cmpb   $0x0,(%rsi)
  41c685:	0f 84 0f 01 00 00    	je     41c79a <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x13a>
  41c68b:	48 89 f5             	mov    %rsi,%rbp
    throw InvalidNode();
  EnsureNodeExists();
  41c68e:	48 b8 90 fe de ff ff 	movabs $0xffffffffffdefe90,%rax
  41c695:	ff ff ff 
  41c698:	49 89 fc             	mov    %rdi,%r12
  41c69b:	48 01 d8             	add    %rbx,%rax
  41c69e:	49 89 d6             	mov    %rdx,%r14
  41c6a1:	48 89 f7             	mov    %rsi,%rdi
  41c6a4:	ff d0                	callq  *%rax
  41c6a6:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41c6aa:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c6ae:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c6b2:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c6b5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c6ba:	74 05                	je     41c6c1 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x61>
  41c6bc:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41c6c1:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41c6c6:	48 b8 20 2d de ff ff 	movabs $0xffffffffffde2d20,%rax
  41c6cd:	ff ff ff 
  41c6d0:	4c 89 f6             	mov    %r14,%rsi
  41c6d3:	48 01 d8             	add    %rbx,%rax
  41c6d6:	4c 89 ef             	mov    %r13,%rdi
  41c6d9:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41c6db:	48 b8 d0 14 df ff ff 	movabs $0xffffffffffdf14d0,%rax
  41c6e2:	ff ff ff 
  41c6e5:	48 89 e2             	mov    %rsp,%rdx
  41c6e8:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41c6ec:	4c 89 ee             	mov    %r13,%rsi
  41c6ef:	48 01 d8             	add    %rbx,%rax
  41c6f2:	ff d0                	callq  *%rax
  41c6f4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41c6f9:	49 83 c5 10          	add    $0x10,%r13
  41c6fd:	49 89 c6             	mov    %rax,%r14
  41c700:	4c 39 ef             	cmp    %r13,%rdi
  41c703:	74 12                	je     41c717 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0xb7>
  41c705:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41c70c:	ff ff ff 
  41c70f:	49 89 df             	mov    %rbx,%r15
  41c712:	48 01 d8             	add    %rbx,%rax
  41c715:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c717:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c71c:	48 85 ff             	test   %rdi,%rdi
  41c71f:	74 0f                	je     41c730 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0xd0>
  41c721:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c728:	ff ff ff 
  41c72b:	48 01 d8             	add    %rbx,%rax
  41c72e:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c730:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41c734:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c738:	48 85 ff             	test   %rdi,%rdi
  41c73b:	74 43                	je     41c780 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x120>
  41c73d:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41c741:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41c745:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41c74a:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c74f:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41c754:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41c758:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c75f:	ff ff ff 
  41c762:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41c767:	48 01 d8             	add    %rbx,%rax
  41c76a:	ff d0                	callq  *%rax
  return Node(value, m_pMemory);
}
  41c76c:	48 83 c4 38          	add    $0x38,%rsp
  41c770:	4c 89 e0             	mov    %r12,%rax
  41c773:	5b                   	pop    %rbx
  41c774:	5d                   	pop    %rbp
  41c775:	41 5c                	pop    %r12
  41c777:	41 5d                	pop    %r13
  41c779:	41 5e                	pop    %r14
  41c77b:	41 5f                	pop    %r15
  41c77d:	c3                   	retq   
  41c77e:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41c780:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41c785:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c78a:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41c791:	00 00 
  41c793:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41c798:	eb d2                	jmp    41c76c <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41c79a:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41c7a1:	ff ff ff 
  41c7a4:	bf 40 00 00 00       	mov    $0x40,%edi
  41c7a9:	49 89 df             	mov    %rbx,%r15
  41c7ac:	48 01 d8             	add    %rbx,%rax
  41c7af:	ff d0                	callq  *%rax
  41c7b1:	48 89 c5             	mov    %rax,%rbp
  41c7b4:	48 89 c7             	mov    %rax,%rdi
  41c7b7:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  41c7be:	ff ff ff 
  41c7c1:	48 01 d8             	add    %rbx,%rax
  41c7c4:	ff d0                	callq  *%rax
  41c7c6:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  41c7cd:	ff ff ff 
  41c7d0:	48 89 ef             	mov    %rbp,%rdi
  41c7d3:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41c7d7:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41c7de:	ff ff ff 
  41c7e1:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c7e5:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41c7ec:	ff ff ff 
  41c7ef:	48 01 d8             	add    %rbx,%rax
  41c7f2:	ff d0                	callq  *%rax
  41c7f4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41c7f9:	49 83 c5 10          	add    $0x10,%r13
  41c7fd:	48 89 c5             	mov    %rax,%rbp
  41c800:	4c 39 ef             	cmp    %r13,%rdi
  41c803:	74 12                	je     41c817 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x1b7>
  41c805:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41c80c:	ff ff ff 
  41c80f:	49 89 df             	mov    %rbx,%r15
  41c812:	48 01 d8             	add    %rbx,%rax
  41c815:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c817:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c81c:	48 85 ff             	test   %rdi,%rdi
  41c81f:	74 0f                	je     41c830 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x1d0>
  41c821:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c828:	ff ff ff 
  41c82b:	48 01 d8             	add    %rbx,%rax
  41c82e:	ff d0                	callq  *%rax
  41c830:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41c837:	ff ff ff 
  41c83a:	48 89 ef             	mov    %rbp,%rdi
  41c83d:	49 89 df             	mov    %rbx,%r15
  41c840:	48 01 d8             	add    %rbx,%rax
  41c843:	ff d0                	callq  *%rax
  41c845:	48 89 c5             	mov    %rax,%rbp
  41c848:	eb cd                	jmp    41c817 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x1b7>
  41c84a:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41c851:	ff ff ff 
  41c854:	49 89 c4             	mov    %rax,%r12
  41c857:	48 89 ef             	mov    %rbp,%rdi
  41c85a:	49 89 df             	mov    %rbx,%r15
  41c85d:	48 01 da             	add    %rbx,%rdx
  41c860:	ff d2                	callq  *%rdx
  41c862:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41c869:	ff ff ff 
  41c86c:	4c 89 e7             	mov    %r12,%rdi
  41c86f:	48 01 d8             	add    %rbx,%rax
  41c872:	ff d0                	callq  *%rax
  41c874:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41c87b:	00 00 00 
  41c87e:	66 90                	xchg   %ax,%ax

000000000041c880 <_ZN4YAML4NodeixIA4_cEES0_RKT_>:
inline Node Node::operator[](const Key& key) {
  41c880:	41 57                	push   %r15
  41c882:	41 56                	push   %r14
  41c884:	49 bb 80 e7 20 00 00 	movabs $0x20e780,%r11
  41c88b:	00 00 00 
  41c88e:	41 55                	push   %r13
  41c890:	41 54                	push   %r12
  41c892:	55                   	push   %rbp
  41c893:	53                   	push   %rbx
  41c894:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41c880 <_ZN4YAML4NodeixIA4_cEES0_RKT_>
  41c89b:	48 83 ec 38          	sub    $0x38,%rsp
  41c89f:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41c8a2:	80 3e 00             	cmpb   $0x0,(%rsi)
  41c8a5:	0f 84 0f 01 00 00    	je     41c9ba <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x13a>
  41c8ab:	48 89 f5             	mov    %rsi,%rbp
  EnsureNodeExists();
  41c8ae:	48 b8 90 fe de ff ff 	movabs $0xffffffffffdefe90,%rax
  41c8b5:	ff ff ff 
  41c8b8:	49 89 fc             	mov    %rdi,%r12
  41c8bb:	48 01 d8             	add    %rbx,%rax
  41c8be:	49 89 d6             	mov    %rdx,%r14
  41c8c1:	48 89 f7             	mov    %rsi,%rdi
  41c8c4:	ff d0                	callq  *%rax
  41c8c6:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41c8ca:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c8ce:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c8d2:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c8d5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c8da:	74 05                	je     41c8e1 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x61>
  41c8dc:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41c8e1:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41c8e6:	48 b8 20 2d de ff ff 	movabs $0xffffffffffde2d20,%rax
  41c8ed:	ff ff ff 
  41c8f0:	4c 89 f6             	mov    %r14,%rsi
  41c8f3:	48 01 d8             	add    %rbx,%rax
  41c8f6:	4c 89 ef             	mov    %r13,%rdi
  41c8f9:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41c8fb:	48 b8 d0 14 df ff ff 	movabs $0xffffffffffdf14d0,%rax
  41c902:	ff ff ff 
  41c905:	48 89 e2             	mov    %rsp,%rdx
  41c908:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41c90c:	4c 89 ee             	mov    %r13,%rsi
  41c90f:	48 01 d8             	add    %rbx,%rax
  41c912:	ff d0                	callq  *%rax
  41c914:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41c919:	49 83 c5 10          	add    $0x10,%r13
  41c91d:	49 89 c6             	mov    %rax,%r14
  41c920:	4c 39 ef             	cmp    %r13,%rdi
  41c923:	74 12                	je     41c937 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0xb7>
  41c925:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41c92c:	ff ff ff 
  41c92f:	49 89 df             	mov    %rbx,%r15
  41c932:	48 01 d8             	add    %rbx,%rax
  41c935:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c937:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c93c:	48 85 ff             	test   %rdi,%rdi
  41c93f:	74 0f                	je     41c950 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0xd0>
  41c941:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c948:	ff ff ff 
  41c94b:	48 01 d8             	add    %rbx,%rax
  41c94e:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c950:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41c954:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c958:	48 85 ff             	test   %rdi,%rdi
  41c95b:	74 43                	je     41c9a0 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x120>
  41c95d:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41c961:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41c965:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41c96a:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c96f:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41c974:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41c978:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41c97f:	ff ff ff 
  41c982:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41c987:	48 01 d8             	add    %rbx,%rax
  41c98a:	ff d0                	callq  *%rax
}
  41c98c:	48 83 c4 38          	add    $0x38,%rsp
  41c990:	4c 89 e0             	mov    %r12,%rax
  41c993:	5b                   	pop    %rbx
  41c994:	5d                   	pop    %rbp
  41c995:	41 5c                	pop    %r12
  41c997:	41 5d                	pop    %r13
  41c999:	41 5e                	pop    %r14
  41c99b:	41 5f                	pop    %r15
  41c99d:	c3                   	retq   
  41c99e:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41c9a0:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41c9a5:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c9aa:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41c9b1:	00 00 
  41c9b3:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41c9b8:	eb d2                	jmp    41c98c <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41c9ba:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41c9c1:	ff ff ff 
  41c9c4:	bf 40 00 00 00       	mov    $0x40,%edi
  41c9c9:	49 89 df             	mov    %rbx,%r15
  41c9cc:	48 01 d8             	add    %rbx,%rax
  41c9cf:	ff d0                	callq  *%rax
  41c9d1:	48 89 c5             	mov    %rax,%rbp
  41c9d4:	48 89 c7             	mov    %rax,%rdi
  41c9d7:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  41c9de:	ff ff ff 
  41c9e1:	48 01 d8             	add    %rbx,%rax
  41c9e4:	ff d0                	callq  *%rax
  41c9e6:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  41c9ed:	ff ff ff 
  41c9f0:	48 89 ef             	mov    %rbp,%rdi
  41c9f3:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41c9f7:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41c9fe:	ff ff ff 
  41ca01:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41ca05:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41ca0c:	ff ff ff 
  41ca0f:	48 01 d8             	add    %rbx,%rax
  41ca12:	ff d0                	callq  *%rax
  41ca14:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41ca19:	49 83 c5 10          	add    $0x10,%r13
  41ca1d:	48 89 c5             	mov    %rax,%rbp
  41ca20:	4c 39 ef             	cmp    %r13,%rdi
  41ca23:	74 12                	je     41ca37 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x1b7>
  41ca25:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41ca2c:	ff ff ff 
  41ca2f:	49 89 df             	mov    %rbx,%r15
  41ca32:	48 01 d8             	add    %rbx,%rax
  41ca35:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41ca37:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41ca3c:	48 85 ff             	test   %rdi,%rdi
  41ca3f:	74 0f                	je     41ca50 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x1d0>
  41ca41:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41ca48:	ff ff ff 
  41ca4b:	48 01 d8             	add    %rbx,%rax
  41ca4e:	ff d0                	callq  *%rax
  41ca50:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41ca57:	ff ff ff 
  41ca5a:	48 89 ef             	mov    %rbp,%rdi
  41ca5d:	49 89 df             	mov    %rbx,%r15
  41ca60:	48 01 d8             	add    %rbx,%rax
  41ca63:	ff d0                	callq  *%rax
  41ca65:	48 89 c5             	mov    %rax,%rbp
  41ca68:	eb cd                	jmp    41ca37 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x1b7>
  41ca6a:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41ca71:	ff ff ff 
  41ca74:	49 89 c4             	mov    %rax,%r12
  41ca77:	48 89 ef             	mov    %rbp,%rdi
  41ca7a:	49 89 df             	mov    %rbx,%r15
  41ca7d:	48 01 da             	add    %rbx,%rdx
  41ca80:	ff d2                	callq  *%rdx
  41ca82:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41ca89:	ff ff ff 
  41ca8c:	4c 89 e7             	mov    %r12,%rdi
  41ca8f:	48 01 d8             	add    %rbx,%rax
  41ca92:	ff d0                	callq  *%rax
  41ca94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ca9b:	00 00 00 
  41ca9e:	66 90                	xchg   %ax,%ax

000000000041caa0 <_ZN4YAML4NodeixIA10_cEES0_RKT_>:
inline Node Node::operator[](const Key& key) {
  41caa0:	41 57                	push   %r15
  41caa2:	41 56                	push   %r14
  41caa4:	49 bb 60 e5 20 00 00 	movabs $0x20e560,%r11
  41caab:	00 00 00 
  41caae:	41 55                	push   %r13
  41cab0:	41 54                	push   %r12
  41cab2:	55                   	push   %rbp
  41cab3:	53                   	push   %rbx
  41cab4:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41caa0 <_ZN4YAML4NodeixIA10_cEES0_RKT_>
  41cabb:	48 83 ec 38          	sub    $0x38,%rsp
  41cabf:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41cac2:	80 3e 00             	cmpb   $0x0,(%rsi)
  41cac5:	0f 84 0f 01 00 00    	je     41cbda <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x13a>
  41cacb:	48 89 f5             	mov    %rsi,%rbp
  EnsureNodeExists();
  41cace:	48 b8 90 fe de ff ff 	movabs $0xffffffffffdefe90,%rax
  41cad5:	ff ff ff 
  41cad8:	49 89 fc             	mov    %rdi,%r12
  41cadb:	48 01 d8             	add    %rbx,%rax
  41cade:	49 89 d6             	mov    %rdx,%r14
  41cae1:	48 89 f7             	mov    %rsi,%rdi
  41cae4:	ff d0                	callq  *%rax
  41cae6:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41caea:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41caee:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41caf2:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41caf5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cafa:	74 05                	je     41cb01 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x61>
  41cafc:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41cb01:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41cb06:	48 b8 20 2d de ff ff 	movabs $0xffffffffffde2d20,%rax
  41cb0d:	ff ff ff 
  41cb10:	4c 89 f6             	mov    %r14,%rsi
  41cb13:	48 01 d8             	add    %rbx,%rax
  41cb16:	4c 89 ef             	mov    %r13,%rdi
  41cb19:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41cb1b:	48 b8 d0 14 df ff ff 	movabs $0xffffffffffdf14d0,%rax
  41cb22:	ff ff ff 
  41cb25:	48 89 e2             	mov    %rsp,%rdx
  41cb28:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41cb2c:	4c 89 ee             	mov    %r13,%rsi
  41cb2f:	48 01 d8             	add    %rbx,%rax
  41cb32:	ff d0                	callq  *%rax
  41cb34:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cb39:	49 83 c5 10          	add    $0x10,%r13
  41cb3d:	49 89 c6             	mov    %rax,%r14
  41cb40:	4c 39 ef             	cmp    %r13,%rdi
  41cb43:	74 12                	je     41cb57 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0xb7>
  41cb45:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41cb4c:	ff ff ff 
  41cb4f:	49 89 df             	mov    %rbx,%r15
  41cb52:	48 01 d8             	add    %rbx,%rax
  41cb55:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cb57:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cb5c:	48 85 ff             	test   %rdi,%rdi
  41cb5f:	74 0f                	je     41cb70 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0xd0>
  41cb61:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41cb68:	ff ff ff 
  41cb6b:	48 01 d8             	add    %rbx,%rax
  41cb6e:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cb70:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41cb74:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cb78:	48 85 ff             	test   %rdi,%rdi
  41cb7b:	74 43                	je     41cbc0 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x120>
  41cb7d:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41cb81:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cb85:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cb8a:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cb8f:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41cb94:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41cb98:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41cb9f:	ff ff ff 
  41cba2:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cba7:	48 01 d8             	add    %rbx,%rax
  41cbaa:	ff d0                	callq  *%rax
}
  41cbac:	48 83 c4 38          	add    $0x38,%rsp
  41cbb0:	4c 89 e0             	mov    %r12,%rax
  41cbb3:	5b                   	pop    %rbx
  41cbb4:	5d                   	pop    %rbp
  41cbb5:	41 5c                	pop    %r12
  41cbb7:	41 5d                	pop    %r13
  41cbb9:	41 5e                	pop    %r14
  41cbbb:	41 5f                	pop    %r15
  41cbbd:	c3                   	retq   
  41cbbe:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cbc0:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cbc5:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cbca:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41cbd1:	00 00 
  41cbd3:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cbd8:	eb d2                	jmp    41cbac <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41cbda:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41cbe1:	ff ff ff 
  41cbe4:	bf 40 00 00 00       	mov    $0x40,%edi
  41cbe9:	49 89 df             	mov    %rbx,%r15
  41cbec:	48 01 d8             	add    %rbx,%rax
  41cbef:	ff d0                	callq  *%rax
  41cbf1:	48 89 c5             	mov    %rax,%rbp
  41cbf4:	48 89 c7             	mov    %rax,%rdi
  41cbf7:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  41cbfe:	ff ff ff 
  41cc01:	48 01 d8             	add    %rbx,%rax
  41cc04:	ff d0                	callq  *%rax
  41cc06:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  41cc0d:	ff ff ff 
  41cc10:	48 89 ef             	mov    %rbp,%rdi
  41cc13:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41cc17:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41cc1e:	ff ff ff 
  41cc21:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41cc25:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41cc2c:	ff ff ff 
  41cc2f:	48 01 d8             	add    %rbx,%rax
  41cc32:	ff d0                	callq  *%rax
  41cc34:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cc39:	49 83 c5 10          	add    $0x10,%r13
  41cc3d:	48 89 c5             	mov    %rax,%rbp
  41cc40:	4c 39 ef             	cmp    %r13,%rdi
  41cc43:	74 12                	je     41cc57 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x1b7>
  41cc45:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41cc4c:	ff ff ff 
  41cc4f:	49 89 df             	mov    %rbx,%r15
  41cc52:	48 01 d8             	add    %rbx,%rax
  41cc55:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cc57:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cc5c:	48 85 ff             	test   %rdi,%rdi
  41cc5f:	74 0f                	je     41cc70 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x1d0>
  41cc61:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41cc68:	ff ff ff 
  41cc6b:	48 01 d8             	add    %rbx,%rax
  41cc6e:	ff d0                	callq  *%rax
  41cc70:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41cc77:	ff ff ff 
  41cc7a:	48 89 ef             	mov    %rbp,%rdi
  41cc7d:	49 89 df             	mov    %rbx,%r15
  41cc80:	48 01 d8             	add    %rbx,%rax
  41cc83:	ff d0                	callq  *%rax
  41cc85:	48 89 c5             	mov    %rax,%rbp
  41cc88:	eb cd                	jmp    41cc57 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x1b7>
  41cc8a:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41cc91:	ff ff ff 
  41cc94:	49 89 c4             	mov    %rax,%r12
  41cc97:	48 89 ef             	mov    %rbp,%rdi
  41cc9a:	49 89 df             	mov    %rbx,%r15
  41cc9d:	48 01 da             	add    %rbx,%rdx
  41cca0:	ff d2                	callq  *%rdx
  41cca2:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41cca9:	ff ff ff 
  41ccac:	4c 89 e7             	mov    %r12,%rdi
  41ccaf:	48 01 d8             	add    %rbx,%rax
  41ccb2:	ff d0                	callq  *%rax
  41ccb4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ccbb:	00 00 00 
  41ccbe:	66 90                	xchg   %ax,%ax

000000000041ccc0 <_ZN4YAML4NodeixIA7_cEES0_RKT_>:
inline Node Node::operator[](const Key& key) {
  41ccc0:	41 57                	push   %r15
  41ccc2:	41 56                	push   %r14
  41ccc4:	49 bb 40 e3 20 00 00 	movabs $0x20e340,%r11
  41cccb:	00 00 00 
  41ccce:	41 55                	push   %r13
  41ccd0:	41 54                	push   %r12
  41ccd2:	55                   	push   %rbp
  41ccd3:	53                   	push   %rbx
  41ccd4:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41ccc0 <_ZN4YAML4NodeixIA7_cEES0_RKT_>
  41ccdb:	48 83 ec 38          	sub    $0x38,%rsp
  41ccdf:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41cce2:	80 3e 00             	cmpb   $0x0,(%rsi)
  41cce5:	0f 84 0f 01 00 00    	je     41cdfa <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x13a>
  41cceb:	48 89 f5             	mov    %rsi,%rbp
  EnsureNodeExists();
  41ccee:	48 b8 90 fe de ff ff 	movabs $0xffffffffffdefe90,%rax
  41ccf5:	ff ff ff 
  41ccf8:	49 89 fc             	mov    %rdi,%r12
  41ccfb:	48 01 d8             	add    %rbx,%rax
  41ccfe:	49 89 d6             	mov    %rdx,%r14
  41cd01:	48 89 f7             	mov    %rsi,%rdi
  41cd04:	ff d0                	callq  *%rax
  41cd06:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41cd0a:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cd0e:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cd12:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cd15:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cd1a:	74 05                	je     41cd21 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x61>
  41cd1c:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41cd21:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41cd26:	48 b8 20 2d de ff ff 	movabs $0xffffffffffde2d20,%rax
  41cd2d:	ff ff ff 
  41cd30:	4c 89 f6             	mov    %r14,%rsi
  41cd33:	48 01 d8             	add    %rbx,%rax
  41cd36:	4c 89 ef             	mov    %r13,%rdi
  41cd39:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41cd3b:	48 b8 d0 14 df ff ff 	movabs $0xffffffffffdf14d0,%rax
  41cd42:	ff ff ff 
  41cd45:	48 89 e2             	mov    %rsp,%rdx
  41cd48:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41cd4c:	4c 89 ee             	mov    %r13,%rsi
  41cd4f:	48 01 d8             	add    %rbx,%rax
  41cd52:	ff d0                	callq  *%rax
  41cd54:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cd59:	49 83 c5 10          	add    $0x10,%r13
  41cd5d:	49 89 c6             	mov    %rax,%r14
  41cd60:	4c 39 ef             	cmp    %r13,%rdi
  41cd63:	74 12                	je     41cd77 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0xb7>
  41cd65:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41cd6c:	ff ff ff 
  41cd6f:	49 89 df             	mov    %rbx,%r15
  41cd72:	48 01 d8             	add    %rbx,%rax
  41cd75:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cd77:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cd7c:	48 85 ff             	test   %rdi,%rdi
  41cd7f:	74 0f                	je     41cd90 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0xd0>
  41cd81:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41cd88:	ff ff ff 
  41cd8b:	48 01 d8             	add    %rbx,%rax
  41cd8e:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cd90:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41cd94:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cd98:	48 85 ff             	test   %rdi,%rdi
  41cd9b:	74 43                	je     41cde0 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x120>
  41cd9d:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41cda1:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cda5:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cdaa:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cdaf:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41cdb4:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41cdb8:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41cdbf:	ff ff ff 
  41cdc2:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cdc7:	48 01 d8             	add    %rbx,%rax
  41cdca:	ff d0                	callq  *%rax
}
  41cdcc:	48 83 c4 38          	add    $0x38,%rsp
  41cdd0:	4c 89 e0             	mov    %r12,%rax
  41cdd3:	5b                   	pop    %rbx
  41cdd4:	5d                   	pop    %rbp
  41cdd5:	41 5c                	pop    %r12
  41cdd7:	41 5d                	pop    %r13
  41cdd9:	41 5e                	pop    %r14
  41cddb:	41 5f                	pop    %r15
  41cddd:	c3                   	retq   
  41cdde:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cde0:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cde5:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cdea:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41cdf1:	00 00 
  41cdf3:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cdf8:	eb d2                	jmp    41cdcc <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41cdfa:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41ce01:	ff ff ff 
  41ce04:	bf 40 00 00 00       	mov    $0x40,%edi
  41ce09:	49 89 df             	mov    %rbx,%r15
  41ce0c:	48 01 d8             	add    %rbx,%rax
  41ce0f:	ff d0                	callq  *%rax
  41ce11:	48 89 c5             	mov    %rax,%rbp
  41ce14:	48 89 c7             	mov    %rax,%rdi
  41ce17:	48 b8 60 ad de ff ff 	movabs $0xffffffffffdead60,%rax
  41ce1e:	ff ff ff 
  41ce21:	48 01 d8             	add    %rbx,%rax
  41ce24:	ff d0                	callq  *%rax
  41ce26:	48 b8 90 94 de ff ff 	movabs $0xffffffffffde9490,%rax
  41ce2d:	ff ff ff 
  41ce30:	48 89 ef             	mov    %rbp,%rdi
  41ce33:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41ce37:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41ce3e:	ff ff ff 
  41ce41:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41ce45:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  41ce4c:	ff ff ff 
  41ce4f:	48 01 d8             	add    %rbx,%rax
  41ce52:	ff d0                	callq  *%rax
  41ce54:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41ce59:	49 83 c5 10          	add    $0x10,%r13
  41ce5d:	48 89 c5             	mov    %rax,%rbp
  41ce60:	4c 39 ef             	cmp    %r13,%rdi
  41ce63:	74 12                	je     41ce77 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x1b7>
  41ce65:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41ce6c:	ff ff ff 
  41ce6f:	49 89 df             	mov    %rbx,%r15
  41ce72:	48 01 d8             	add    %rbx,%rax
  41ce75:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41ce77:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41ce7c:	48 85 ff             	test   %rdi,%rdi
  41ce7f:	74 0f                	je     41ce90 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x1d0>
  41ce81:	48 b8 b0 a8 de ff ff 	movabs $0xffffffffffdea8b0,%rax
  41ce88:	ff ff ff 
  41ce8b:	48 01 d8             	add    %rbx,%rax
  41ce8e:	ff d0                	callq  *%rax
  41ce90:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41ce97:	ff ff ff 
  41ce9a:	48 89 ef             	mov    %rbp,%rdi
  41ce9d:	49 89 df             	mov    %rbx,%r15
  41cea0:	48 01 d8             	add    %rbx,%rax
  41cea3:	ff d0                	callq  *%rax
  41cea5:	48 89 c5             	mov    %rax,%rbp
  41cea8:	eb cd                	jmp    41ce77 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x1b7>
  41ceaa:	48 ba e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rdx
  41ceb1:	ff ff ff 
  41ceb4:	49 89 c4             	mov    %rax,%r12
  41ceb7:	48 89 ef             	mov    %rbp,%rdi
  41ceba:	49 89 df             	mov    %rbx,%r15
  41cebd:	48 01 da             	add    %rbx,%rdx
  41cec0:	ff d2                	callq  *%rdx
  41cec2:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41cec9:	ff ff ff 
  41cecc:	4c 89 e7             	mov    %r12,%rdi
  41cecf:	48 01 d8             	add    %rbx,%rax
  41ced2:	ff d0                	callq  *%rax
  41ced4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41cedb:	00 00 00 
  41cede:	66 90                	xchg   %ax,%ax

000000000041cee0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41cee0:	41 57                	push   %r15
  41cee2:	41 56                	push   %r14
  41cee4:	49 bb 20 e1 20 00 00 	movabs $0x20e120,%r11
  41ceeb:	00 00 00 
  41ceee:	41 55                	push   %r13
  41cef0:	41 54                	push   %r12
  41cef2:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41cee0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>
  41cef9:	55                   	push   %rbp
  41cefa:	53                   	push   %rbx
  41cefb:	48 89 fd             	mov    %rdi,%rbp
  41cefe:	4d 01 dc             	add    %r11,%r12
  41cf01:	48 89 f3             	mov    %rsi,%rbx
  41cf04:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41cf08:	48 83 fe 01          	cmp    $0x1,%rsi
  41cf0c:	0f 84 06 01 00 00    	je     41d018 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41cf12:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41cf19:	ff ff 1f 
  41cf1c:	49 89 d5             	mov    %rdx,%r13
  41cf1f:	48 39 c6             	cmp    %rax,%rsi
  41cf22:	0f 87 04 01 00 00    	ja     41d02c <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41cf28:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41cf2f:	00 
  41cf30:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41cf37:	ff ff ff 
  41cf3a:	4d 89 e7             	mov    %r12,%r15
  41cf3d:	4c 01 e0             	add    %r12,%rax
  41cf40:	4c 89 f7             	mov    %r14,%rdi
  41cf43:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41cf45:	48 89 c7             	mov    %rax,%rdi
  41cf48:	49 89 c5             	mov    %rax,%r13
  41cf4b:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  41cf52:	ff ff ff 
  41cf55:	4c 89 f2             	mov    %r14,%rdx
  41cf58:	31 f6                	xor    %esi,%esi
  41cf5a:	4c 01 e0             	add    %r12,%rax
  41cf5d:	ff d0                	callq  *%rax
  41cf5f:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41cf63:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __n, std::true_type)
    {
      __bucket_type* __new_buckets = _M_allocate_buckets(__n);
      __node_type* __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
  41cf67:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41cf6e:	00 
      std::size_t __bbegin_bkt = 0;
      while (__p)
  41cf6f:	48 85 c9             	test   %rcx,%rcx
  41cf72:	74 64                	je     41cfd8 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
  41cf74:	45 31 c0             	xor    %r8d,%r8d
	  std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);
	  if (!__new_buckets[__bkt])
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
	      _M_before_begin._M_nxt = __p;
	      __new_buckets[__bkt] = &_M_before_begin;
  41cf77:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41cf7b:	eb 17                	jmp    41cf94 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41cf7d:	0f 1f 00             	nopl   (%rax)
		__new_buckets[__bbegin_bkt] = __p;
	      __bbegin_bkt = __bkt;
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41cf80:	48 8b 16             	mov    (%rsi),%rdx
  41cf83:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41cf86:	48 8b 00             	mov    (%rax),%rax
  41cf89:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41cf8c:	48 85 ff             	test   %rdi,%rdi
  41cf8f:	48 89 f9             	mov    %rdi,%rcx
  41cf92:	74 44                	je     41cfd8 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41cf94:	48 8b 41 18          	mov    0x18(%rcx),%rax
  41cf98:	31 d2                	xor    %edx,%edx
  41cf9a:	48 8b 39             	mov    (%rcx),%rdi
  41cf9d:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41cfa0:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41cfa5:	48 8b 30             	mov    (%rax),%rsi
  41cfa8:	48 85 f6             	test   %rsi,%rsi
  41cfab:	75 d3                	jne    41cf80 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41cfad:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41cfb1:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41cfb4:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41cfb8:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41cfbb:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41cfbf:	74 4f                	je     41d010 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41cfc1:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41cfc4:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41cfc9:	49 89 d0             	mov    %rdx,%r8
  41cfcc:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41cfcf:	75 c3                	jne    41cf94 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41cfd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41cfd8:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41cfdc:	4c 39 d7             	cmp    %r10,%rdi
  41cfdf:	74 12                	je     41cff3 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41cfe1:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41cfe8:	ff ff ff 
  41cfeb:	4d 89 e7             	mov    %r12,%r15
  41cfee:	4c 01 e0             	add    %r12,%rax
  41cff1:	ff d0                	callq  *%rax
	    }
	  __p = __next;
	}

      _M_deallocate_buckets();
      _M_bucket_count = __n;
  41cff3:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41cff7:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41cffb:	48 83 c4 08          	add    $0x8,%rsp
  41cfff:	5b                   	pop    %rbx
  41d000:	5d                   	pop    %rbp
  41d001:	41 5c                	pop    %r12
  41d003:	41 5d                	pop    %r13
  41d005:	41 5e                	pop    %r14
  41d007:	41 5f                	pop    %r15
  41d009:	c3                   	retq   
  41d00a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41d010:	49 89 d0             	mov    %rdx,%r8
  41d013:	e9 74 ff ff ff       	jmpq   41cf8c <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41d018:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41d01c:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41d023:	00 
	    return &_M_single_bucket;
  41d024:	4d 89 ea             	mov    %r13,%r10
  41d027:	e9 37 ff ff ff       	jmpq   41cf63 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41d02c:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  41d033:	ff ff ff 
  41d036:	4d 89 e7             	mov    %r12,%r15
  41d039:	4c 01 e0             	add    %r12,%rax
  41d03c:	ff d0                	callq  *%rax
      __catch(...)
  41d03e:	48 89 c7             	mov    %rax,%rdi
  41d041:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41d048:	ff ff ff 
  41d04b:	4d 89 e7             	mov    %r12,%r15
  41d04e:	4c 01 e0             	add    %r12,%rax
  41d051:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41d053:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41d057:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41d05b:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  41d062:	ff ff ff 
  41d065:	4c 01 e0             	add    %r12,%rax
  41d068:	ff d0                	callq  *%rax
      __catch(...)
  41d06a:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  41d071:	ff ff ff 
  41d074:	48 89 c3             	mov    %rax,%rbx
  41d077:	4d 89 e7             	mov    %r12,%r15
  41d07a:	4c 01 e2             	add    %r12,%rdx
  41d07d:	ff d2                	callq  *%rdx
  41d07f:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41d086:	ff ff ff 
  41d089:	48 89 df             	mov    %rbx,%rdi
  41d08c:	4c 01 e0             	add    %r12,%rax
  41d08f:	ff d0                	callq  *%rax
  41d091:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d098:	00 00 00 
  41d09b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d0a0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d0a0:	41 57                	push   %r15
  41d0a2:	41 56                	push   %r14
  41d0a4:	49 bb 60 df 20 00 00 	movabs $0x20df60,%r11
  41d0ab:	00 00 00 
  41d0ae:	41 55                	push   %r13
  41d0b0:	41 54                	push   %r12
  41d0b2:	49 89 f6             	mov    %rsi,%r14
  41d0b5:	55                   	push   %rbp
  41d0b6:	53                   	push   %rbx
  41d0b7:	48 8d 2d e2 ff ff ff 	lea    -0x1e(%rip),%rbp        # 41d0a0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE>
  41d0be:	48 89 fb             	mov    %rdi,%rbx
  41d0c1:	49 89 d5             	mov    %rdx,%r13
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d0c4:	48 83 c7 20          	add    $0x20,%rdi
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d0c8:	48 83 ec 18          	sub    $0x18,%rsp
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  41d0cc:	48 8b 47 08          	mov    0x8(%rdi),%rax
  41d0d0:	4c 01 dd             	add    %r11,%rbp
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d0d3:	48 8b 57 f8          	mov    -0x8(%rdi),%rdx
  41d0d7:	48 8b 77 e8          	mov    -0x18(%rdi),%rsi
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d0db:	49 89 cc             	mov    %rcx,%r12
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d0de:	49 89 ef             	mov    %rbp,%r15
  41d0e1:	b9 01 00 00 00       	mov    $0x1,%ecx
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  41d0e6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d0eb:	48 b8 20 e9 dd ff ff 	movabs $0xffffffffffdde920,%rax
  41d0f2:	ff ff ff 
  41d0f5:	48 01 e8             	add    %rbp,%rax
  41d0f8:	ff d0                	callq  *%rax
	  if (__do_rehash.first)
  41d0fa:	84 c0                	test   %al,%al
  41d0fc:	74 26                	je     41d124 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0x84>
	      _M_rehash(__do_rehash.second, __saved_state);
  41d0fe:	48 b8 e0 1e df ff ff 	movabs $0xffffffffffdf1ee0,%rax
  41d105:	ff ff ff 
  41d108:	48 89 d6             	mov    %rdx,%rsi
  41d10b:	48 89 df             	mov    %rbx,%rdi
  41d10e:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  41d113:	48 01 e8             	add    %rbp,%rax
  41d116:	ff d0                	callq  *%rax
    { return __num % __den; }
  41d118:	4c 89 e8             	mov    %r13,%rax
  41d11b:	31 d2                	xor    %edx,%edx
  41d11d:	48 f7 73 08          	divq   0x8(%rbx)
  41d121:	49 89 d6             	mov    %rdx,%r14
      if (_M_buckets[__bkt])
  41d124:	48 8b 33             	mov    (%rbx),%rsi
      { __n->_M_hash_code = __c; }
  41d127:	4d 89 6c 24 18       	mov    %r13,0x18(%r12)
  41d12c:	4a 8d 0c f6          	lea    (%rsi,%r14,8),%rcx
  41d130:	48 8b 01             	mov    (%rcx),%rax
  41d133:	48 85 c0             	test   %rax,%rax
  41d136:	74 28                	je     41d160 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0xc0>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  41d138:	48 8b 00             	mov    (%rax),%rax
  41d13b:	49 89 04 24          	mov    %rax,(%r12)
	  _M_buckets[__bkt]->_M_nxt = __node;
  41d13f:	48 8b 01             	mov    (%rcx),%rax
  41d142:	4c 89 20             	mov    %r12,(%rax)
	  ++_M_element_count;
  41d145:	48 83 43 18 01       	addq   $0x1,0x18(%rbx)
    }
  41d14a:	48 83 c4 18          	add    $0x18,%rsp
  41d14e:	4c 89 e0             	mov    %r12,%rax
  41d151:	5b                   	pop    %rbx
  41d152:	5d                   	pop    %rbp
  41d153:	41 5c                	pop    %r12
  41d155:	41 5d                	pop    %r13
  41d157:	41 5e                	pop    %r14
  41d159:	41 5f                	pop    %r15
  41d15b:	c3                   	retq   
  41d15c:	0f 1f 40 00          	nopl   0x0(%rax)
	  __node->_M_nxt = _M_before_begin._M_nxt;
  41d160:	48 8b 43 10          	mov    0x10(%rbx),%rax
	  if (__node->_M_nxt)
  41d164:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  41d167:	49 89 04 24          	mov    %rax,(%r12)
	  _M_before_begin._M_nxt = __node;
  41d16b:	4c 89 63 10          	mov    %r12,0x10(%rbx)
	  if (__node->_M_nxt)
  41d16f:	74 12                	je     41d183 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0xe3>
    { return __num % __den; }
  41d171:	49 8b 04 24          	mov    (%r12),%rax
  41d175:	31 d2                	xor    %edx,%edx
  41d177:	48 8b 40 18          	mov    0x18(%rax),%rax
  41d17b:	48 f7 73 08          	divq   0x8(%rbx)
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  41d17f:	4c 89 24 d6          	mov    %r12,(%rsi,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  41d183:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41d187:	48 89 01             	mov    %rax,(%rcx)
  41d18a:	eb b9                	jmp    41d145 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0xa5>
      __catch(...)
  41d18c:	48 89 c7             	mov    %rax,%rdi
  41d18f:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41d196:	ff ff ff 
  41d199:	49 89 ef             	mov    %rbp,%r15
  41d19c:	48 01 e8             	add    %rbp,%rax
  41d19f:	ff d0                	callq  *%rax
      { ::operator delete(__p); }
  41d1a1:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41d1a8:	ff ff ff 
  41d1ab:	4c 89 e7             	mov    %r12,%rdi
  41d1ae:	48 01 e8             	add    %rbp,%rax
  41d1b1:	ff d0                	callq  *%rax
	  __throw_exception_again;
  41d1b3:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  41d1ba:	ff ff ff 
  41d1bd:	48 01 e8             	add    %rbp,%rax
  41d1c0:	ff d0                	callq  *%rax
      __catch(...)
  41d1c2:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  41d1c9:	ff ff ff 
  41d1cc:	48 89 c3             	mov    %rax,%rbx
  41d1cf:	49 89 ef             	mov    %rbp,%r15
  41d1d2:	48 01 ea             	add    %rbp,%rdx
  41d1d5:	ff d2                	callq  *%rdx
  41d1d7:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41d1de:	ff ff ff 
  41d1e1:	48 89 df             	mov    %rbx,%rdi
  41d1e4:	48 01 e8             	add    %rbp,%rax
  41d1e7:	ff d0                	callq  *%rax
  41d1e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041d1f0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d1f0:	41 57                	push   %r15
  41d1f2:	41 56                	push   %r14
  41d1f4:	49 bb 10 de 20 00 00 	movabs $0x20de10,%r11
  41d1fb:	00 00 00 
  41d1fe:	41 55                	push   %r13
  41d200:	41 54                	push   %r12
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d202:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41d209:	ff ff ff 
  41d20c:	55                   	push   %rbp
  41d20d:	48 8d 2d dc ff ff ff 	lea    -0x24(%rip),%rbp        # 41d1f0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>
  41d214:	53                   	push   %rbx
  41d215:	49 89 f4             	mov    %rsi,%r12
  41d218:	48 89 fb             	mov    %rdi,%rbx
  41d21b:	bf 20 00 00 00       	mov    $0x20,%edi
  41d220:	4c 01 dd             	add    %r11,%rbp
  41d223:	48 83 ec 08          	sub    $0x8,%rsp
  41d227:	49 89 ef             	mov    %rbp,%r15
  41d22a:	48 01 e8             	add    %rbp,%rax
  41d22d:	ff d0                	callq  *%rax
	  second(std::forward<_U2>(__p.second)) { }
  41d22f:	49 8b 14 24          	mov    (%r12),%rdx
  41d233:	41 8b 4c 24 08       	mov    0x8(%r12),%ecx
  41d238:	49 89 c5             	mov    %rax,%r13
    _Hash_node_base() noexcept : _M_nxt() { }
  41d23b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  41d242:	bf b9 79 37 9e       	mov    $0x9e3779b9,%edi
  41d247:	48 89 50 08          	mov    %rdx,0x8(%rax)
  41d24b:	89 48 10             	mov    %ecx,0x10(%rax)
  41d24e:	41 8b 44 24 0c       	mov    0xc(%r12),%eax
  41d253:	4c 63 e1             	movslq %ecx,%r12
  41d256:	49 01 fc             	add    %rdi,%r12
  41d259:	41 89 45 14          	mov    %eax,0x14(%r13)
  41d25d:	48 63 c2             	movslq %edx,%rax
  41d260:	48 c1 fa 20          	sar    $0x20,%rdx
  41d264:	48 8d 34 38          	lea    (%rax,%rdi,1),%rsi
  41d268:	48 01 fa             	add    %rdi,%rdx
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  41d26b:	48 89 df             	mov    %rbx,%rdi
  41d26e:	48 89 f0             	mov    %rsi,%rax
  41d271:	48 c1 e0 06          	shl    $0x6,%rax
  41d275:	48 01 c2             	add    %rax,%rdx
  41d278:	48 89 f0             	mov    %rsi,%rax
  41d27b:	48 c1 e8 02          	shr    $0x2,%rax
  41d27f:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  41d282:	31 d2                	xor    %edx,%edx
  41d284:	48 31 f0             	xor    %rsi,%rax
  41d287:	48 89 c1             	mov    %rax,%rcx
  41d28a:	48 c1 e1 06          	shl    $0x6,%rcx
  41d28e:	49 01 cc             	add    %rcx,%r12
  41d291:	48 89 c1             	mov    %rax,%rcx
  41d294:	48 c1 e9 02          	shr    $0x2,%rcx
  41d298:	49 01 cc             	add    %rcx,%r12
  41d29b:	49 31 c4             	xor    %rax,%r12
  41d29e:	4c 89 e0             	mov    %r12,%rax
  41d2a1:	4c 89 e1             	mov    %r12,%rcx
  41d2a4:	48 f7 73 08          	divq   0x8(%rbx)
  41d2a8:	48 b8 50 0b df ff ff 	movabs $0xffffffffffdf0b50,%rax
  41d2af:	ff ff ff 
  41d2b2:	48 01 e8             	add    %rbp,%rax
  41d2b5:	49 89 d7             	mov    %rdx,%r15
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
  41d2b8:	49 8d 55 08          	lea    0x8(%r13),%rdx
  41d2bc:	4c 89 fe             	mov    %r15,%rsi
  41d2bf:	ff d0                	callq  *%rax
	if (__before_n)
  41d2c1:	48 85 c0             	test   %rax,%rax
  41d2c4:	74 3a                	je     41d300 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  41d2c6:	4c 8b 30             	mov    (%rax),%r14
	if (__node_type* __p = _M_find_node(__bkt, __k, __code))
  41d2c9:	4d 85 f6             	test   %r14,%r14
  41d2cc:	74 32                	je     41d300 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
      { ::operator delete(__p); }
  41d2ce:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41d2d5:	ff ff ff 
  41d2d8:	49 89 ef             	mov    %rbp,%r15
  41d2db:	4c 89 ef             	mov    %r13,%rdi
  41d2de:	48 01 e8             	add    %rbp,%rax
  41d2e1:	ff d0                	callq  *%rax
      }
  41d2e3:	48 83 c4 08          	add    $0x8,%rsp
  41d2e7:	4c 89 f0             	mov    %r14,%rax
  41d2ea:	31 d2                	xor    %edx,%edx
  41d2ec:	5b                   	pop    %rbx
  41d2ed:	5d                   	pop    %rbp
  41d2ee:	41 5c                	pop    %r12
  41d2f0:	41 5d                	pop    %r13
  41d2f2:	41 5e                	pop    %r14
  41d2f4:	41 5f                	pop    %r15
  41d2f6:	c3                   	retq   
  41d2f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41d2fe:	00 00 
	return std::make_pair(_M_insert_unique_node(__bkt, __code, __node),
  41d300:	48 b8 a0 20 df ff ff 	movabs $0xffffffffffdf20a0,%rax
  41d307:	ff ff ff 
  41d30a:	4c 89 e2             	mov    %r12,%rdx
  41d30d:	4c 89 e9             	mov    %r13,%rcx
  41d310:	4c 89 fe             	mov    %r15,%rsi
  41d313:	48 89 df             	mov    %rbx,%rdi
  41d316:	48 01 e8             	add    %rbp,%rax
  41d319:	ff d0                	callq  *%rax
      }
  41d31b:	48 83 c4 08          	add    $0x8,%rsp
  41d31f:	ba 01 00 00 00       	mov    $0x1,%edx
  41d324:	5b                   	pop    %rbx
  41d325:	5d                   	pop    %rbp
  41d326:	41 5c                	pop    %r12
  41d328:	41 5d                	pop    %r13
  41d32a:	41 5e                	pop    %r14
  41d32c:	41 5f                	pop    %r15
  41d32e:	c3                   	retq   
  41d32f:	90                   	nop

000000000041d330 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d330:	41 57                	push   %r15
  41d332:	41 56                	push   %r14
  41d334:	49 bb d0 dc 20 00 00 	movabs $0x20dcd0,%r11
  41d33b:	00 00 00 
  41d33e:	41 55                	push   %r13
  41d340:	41 54                	push   %r12
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d342:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41d349:	ff ff ff 
  41d34c:	55                   	push   %rbp
  41d34d:	48 8d 2d dc ff ff ff 	lea    -0x24(%rip),%rbp        # 41d330 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>
  41d354:	53                   	push   %rbx
  41d355:	49 89 f4             	mov    %rsi,%r12
  41d358:	48 89 fb             	mov    %rdi,%rbx
  41d35b:	bf 20 00 00 00       	mov    $0x20,%edi
  41d360:	4c 01 dd             	add    %r11,%rbp
  41d363:	48 83 ec 08          	sub    $0x8,%rsp
  41d367:	49 89 ef             	mov    %rbp,%r15
  41d36a:	48 01 e8             	add    %rbp,%rax
  41d36d:	ff d0                	callq  *%rax
  41d36f:	49 8b 14 24          	mov    (%r12),%rdx
  41d373:	41 8b 4c 24 08       	mov    0x8(%r12),%ecx
  41d378:	49 89 c5             	mov    %rax,%r13
    _Hash_node_base() noexcept : _M_nxt() { }
  41d37b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  41d382:	bf b9 79 37 9e       	mov    $0x9e3779b9,%edi
  41d387:	48 89 50 08          	mov    %rdx,0x8(%rax)
  41d38b:	89 48 10             	mov    %ecx,0x10(%rax)
  41d38e:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  41d393:	4c 63 e1             	movslq %ecx,%r12
  41d396:	49 01 fc             	add    %rdi,%r12
  41d399:	41 89 45 14          	mov    %eax,0x14(%r13)
  41d39d:	48 63 c2             	movslq %edx,%rax
  41d3a0:	48 c1 fa 20          	sar    $0x20,%rdx
  41d3a4:	48 8d 34 38          	lea    (%rax,%rdi,1),%rsi
  41d3a8:	48 01 fa             	add    %rdi,%rdx
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  41d3ab:	48 89 df             	mov    %rbx,%rdi
  41d3ae:	48 89 f0             	mov    %rsi,%rax
  41d3b1:	48 c1 e0 06          	shl    $0x6,%rax
  41d3b5:	48 01 c2             	add    %rax,%rdx
  41d3b8:	48 89 f0             	mov    %rsi,%rax
  41d3bb:	48 c1 e8 02          	shr    $0x2,%rax
  41d3bf:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  41d3c2:	31 d2                	xor    %edx,%edx
  41d3c4:	48 31 f0             	xor    %rsi,%rax
  41d3c7:	48 89 c1             	mov    %rax,%rcx
  41d3ca:	48 c1 e1 06          	shl    $0x6,%rcx
  41d3ce:	49 01 cc             	add    %rcx,%r12
  41d3d1:	48 89 c1             	mov    %rax,%rcx
  41d3d4:	48 c1 e9 02          	shr    $0x2,%rcx
  41d3d8:	49 01 cc             	add    %rcx,%r12
  41d3db:	49 31 c4             	xor    %rax,%r12
  41d3de:	4c 89 e0             	mov    %r12,%rax
  41d3e1:	4c 89 e1             	mov    %r12,%rcx
  41d3e4:	48 f7 73 08          	divq   0x8(%rbx)
  41d3e8:	48 b8 50 0b df ff ff 	movabs $0xffffffffffdf0b50,%rax
  41d3ef:	ff ff ff 
  41d3f2:	48 01 e8             	add    %rbp,%rax
  41d3f5:	49 89 d7             	mov    %rdx,%r15
  41d3f8:	49 8d 55 08          	lea    0x8(%r13),%rdx
  41d3fc:	4c 89 fe             	mov    %r15,%rsi
  41d3ff:	ff d0                	callq  *%rax
	if (__before_n)
  41d401:	48 85 c0             	test   %rax,%rax
  41d404:	74 3a                	je     41d440 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  41d406:	4c 8b 30             	mov    (%rax),%r14
	if (__node_type* __p = _M_find_node(__bkt, __k, __code))
  41d409:	4d 85 f6             	test   %r14,%r14
  41d40c:	74 32                	je     41d440 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
      { ::operator delete(__p); }
  41d40e:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41d415:	ff ff ff 
  41d418:	49 89 ef             	mov    %rbp,%r15
  41d41b:	4c 89 ef             	mov    %r13,%rdi
  41d41e:	48 01 e8             	add    %rbp,%rax
  41d421:	ff d0                	callq  *%rax
      }
  41d423:	48 83 c4 08          	add    $0x8,%rsp
  41d427:	4c 89 f0             	mov    %r14,%rax
  41d42a:	31 d2                	xor    %edx,%edx
  41d42c:	5b                   	pop    %rbx
  41d42d:	5d                   	pop    %rbp
  41d42e:	41 5c                	pop    %r12
  41d430:	41 5d                	pop    %r13
  41d432:	41 5e                	pop    %r14
  41d434:	41 5f                	pop    %r15
  41d436:	c3                   	retq   
  41d437:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41d43e:	00 00 
	return std::make_pair(_M_insert_unique_node(__bkt, __code, __node),
  41d440:	48 b8 a0 20 df ff ff 	movabs $0xffffffffffdf20a0,%rax
  41d447:	ff ff ff 
  41d44a:	4c 89 e2             	mov    %r12,%rdx
  41d44d:	4c 89 e9             	mov    %r13,%rcx
  41d450:	4c 89 fe             	mov    %r15,%rsi
  41d453:	48 89 df             	mov    %rbx,%rdi
  41d456:	48 01 e8             	add    %rbp,%rax
  41d459:	ff d0                	callq  *%rax
      }
  41d45b:	48 83 c4 08          	add    $0x8,%rsp
  41d45f:	ba 01 00 00 00       	mov    $0x1,%edx
  41d464:	5b                   	pop    %rbx
  41d465:	5d                   	pop    %rbp
  41d466:	41 5c                	pop    %r12
  41d468:	41 5d                	pop    %r13
  41d46a:	41 5e                	pop    %r14
  41d46c:	41 5f                	pop    %r15
  41d46e:	c3                   	retq   
  41d46f:	90                   	nop

000000000041d470 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d470:	41 57                	push   %r15
  41d472:	41 56                	push   %r14
  41d474:	49 bb 90 db 20 00 00 	movabs $0x20db90,%r11
  41d47b:	00 00 00 
  41d47e:	41 55                	push   %r13
  41d480:	41 54                	push   %r12
  41d482:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41d470 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>
  41d489:	55                   	push   %rbp
  41d48a:	53                   	push   %rbx
  41d48b:	48 89 fd             	mov    %rdi,%rbp
  41d48e:	4d 01 dc             	add    %r11,%r12
  41d491:	48 89 f3             	mov    %rsi,%rbx
  41d494:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41d498:	48 83 fe 01          	cmp    $0x1,%rsi
  41d49c:	0f 84 06 01 00 00    	je     41d5a8 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41d4a2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41d4a9:	ff ff 1f 
  41d4ac:	49 89 d5             	mov    %rdx,%r13
  41d4af:	48 39 c6             	cmp    %rax,%rsi
  41d4b2:	0f 87 04 01 00 00    	ja     41d5bc <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d4b8:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41d4bf:	00 
  41d4c0:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41d4c7:	ff ff ff 
  41d4ca:	4d 89 e7             	mov    %r12,%r15
  41d4cd:	4c 01 e0             	add    %r12,%rax
  41d4d0:	4c 89 f7             	mov    %r14,%rdi
  41d4d3:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41d4d5:	48 89 c7             	mov    %rax,%rdi
  41d4d8:	49 89 c5             	mov    %rax,%r13
  41d4db:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  41d4e2:	ff ff ff 
  41d4e5:	4c 89 f2             	mov    %r14,%rdx
  41d4e8:	31 f6                	xor    %esi,%esi
  41d4ea:	4c 01 e0             	add    %r12,%rax
  41d4ed:	ff d0                	callq  *%rax
  41d4ef:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41d4f3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
      _M_before_begin._M_nxt = nullptr;
  41d4f7:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41d4fe:	00 
      while (__p)
  41d4ff:	48 85 c9             	test   %rcx,%rcx
  41d502:	74 64                	je     41d568 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
  41d504:	45 31 c0             	xor    %r8d,%r8d
	      __new_buckets[__bkt] = &_M_before_begin;
  41d507:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41d50b:	eb 17                	jmp    41d524 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d50d:	0f 1f 00             	nopl   (%rax)
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41d510:	48 8b 16             	mov    (%rsi),%rdx
  41d513:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41d516:	48 8b 00             	mov    (%rax),%rax
  41d519:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41d51c:	48 85 ff             	test   %rdi,%rdi
  41d51f:	48 89 f9             	mov    %rdi,%rcx
  41d522:	74 44                	je     41d568 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41d524:	48 8b 41 18          	mov    0x18(%rcx),%rax
  41d528:	31 d2                	xor    %edx,%edx
  41d52a:	48 8b 39             	mov    (%rcx),%rdi
  41d52d:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41d530:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41d535:	48 8b 30             	mov    (%rax),%rsi
  41d538:	48 85 f6             	test   %rsi,%rsi
  41d53b:	75 d3                	jne    41d510 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41d53d:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41d541:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41d544:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41d548:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41d54b:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41d54f:	74 4f                	je     41d5a0 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41d551:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41d554:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41d559:	49 89 d0             	mov    %rdx,%r8
  41d55c:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41d55f:	75 c3                	jne    41d524 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d561:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41d568:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41d56c:	4c 39 d7             	cmp    %r10,%rdi
  41d56f:	74 12                	je     41d583 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41d571:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41d578:	ff ff ff 
  41d57b:	4d 89 e7             	mov    %r12,%r15
  41d57e:	4c 01 e0             	add    %r12,%rax
  41d581:	ff d0                	callq  *%rax
      _M_bucket_count = __n;
  41d583:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41d587:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41d58b:	48 83 c4 08          	add    $0x8,%rsp
  41d58f:	5b                   	pop    %rbx
  41d590:	5d                   	pop    %rbp
  41d591:	41 5c                	pop    %r12
  41d593:	41 5d                	pop    %r13
  41d595:	41 5e                	pop    %r14
  41d597:	41 5f                	pop    %r15
  41d599:	c3                   	retq   
  41d59a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41d5a0:	49 89 d0             	mov    %rdx,%r8
  41d5a3:	e9 74 ff ff ff       	jmpq   41d51c <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41d5a8:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41d5ac:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41d5b3:	00 
	    return &_M_single_bucket;
  41d5b4:	4d 89 ea             	mov    %r13,%r10
  41d5b7:	e9 37 ff ff ff       	jmpq   41d4f3 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41d5bc:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  41d5c3:	ff ff ff 
  41d5c6:	4d 89 e7             	mov    %r12,%r15
  41d5c9:	4c 01 e0             	add    %r12,%rax
  41d5cc:	ff d0                	callq  *%rax
      __catch(...)
  41d5ce:	48 89 c7             	mov    %rax,%rdi
  41d5d1:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41d5d8:	ff ff ff 
  41d5db:	4d 89 e7             	mov    %r12,%r15
  41d5de:	4c 01 e0             	add    %r12,%rax
  41d5e1:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41d5e3:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41d5e7:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41d5eb:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  41d5f2:	ff ff ff 
  41d5f5:	4c 01 e0             	add    %r12,%rax
  41d5f8:	ff d0                	callq  *%rax
      __catch(...)
  41d5fa:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  41d601:	ff ff ff 
  41d604:	48 89 c3             	mov    %rax,%rbx
  41d607:	4d 89 e7             	mov    %r12,%r15
  41d60a:	4c 01 e2             	add    %r12,%rdx
  41d60d:	ff d2                	callq  *%rdx
  41d60f:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41d616:	ff ff ff 
  41d619:	48 89 df             	mov    %rbx,%rdi
  41d61c:	4c 01 e0             	add    %r12,%rax
  41d61f:	ff d0                	callq  *%rax
  41d621:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d628:	00 00 00 
  41d62b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d630 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d630:	41 57                	push   %r15
  41d632:	41 56                	push   %r14
  41d634:	49 bb d0 d9 20 00 00 	movabs $0x20d9d0,%r11
  41d63b:	00 00 00 
  41d63e:	41 55                	push   %r13
  41d640:	41 54                	push   %r12
  41d642:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41d630 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>
  41d649:	55                   	push   %rbp
  41d64a:	53                   	push   %rbx
  41d64b:	48 89 fd             	mov    %rdi,%rbp
  41d64e:	4d 01 dc             	add    %r11,%r12
  41d651:	48 89 f3             	mov    %rsi,%rbx
  41d654:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41d658:	48 83 fe 01          	cmp    $0x1,%rsi
  41d65c:	0f 84 06 01 00 00    	je     41d768 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41d662:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41d669:	ff ff 1f 
  41d66c:	49 89 d5             	mov    %rdx,%r13
  41d66f:	48 39 c6             	cmp    %rax,%rsi
  41d672:	0f 87 04 01 00 00    	ja     41d77c <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d678:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41d67f:	00 
  41d680:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41d687:	ff ff ff 
  41d68a:	4d 89 e7             	mov    %r12,%r15
  41d68d:	4c 01 e0             	add    %r12,%rax
  41d690:	4c 89 f7             	mov    %r14,%rdi
  41d693:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41d695:	48 89 c7             	mov    %rax,%rdi
  41d698:	49 89 c5             	mov    %rax,%r13
  41d69b:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  41d6a2:	ff ff ff 
  41d6a5:	4c 89 f2             	mov    %r14,%rdx
  41d6a8:	31 f6                	xor    %esi,%esi
  41d6aa:	4c 01 e0             	add    %r12,%rax
  41d6ad:	ff d0                	callq  *%rax
  41d6af:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41d6b3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
      _M_before_begin._M_nxt = nullptr;
  41d6b7:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41d6be:	00 
      while (__p)
  41d6bf:	48 85 c9             	test   %rcx,%rcx
  41d6c2:	74 64                	je     41d728 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
  41d6c4:	45 31 c0             	xor    %r8d,%r8d
	      __new_buckets[__bkt] = &_M_before_begin;
  41d6c7:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41d6cb:	eb 17                	jmp    41d6e4 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d6cd:	0f 1f 00             	nopl   (%rax)
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41d6d0:	48 8b 16             	mov    (%rsi),%rdx
  41d6d3:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41d6d6:	48 8b 00             	mov    (%rax),%rax
  41d6d9:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41d6dc:	48 85 ff             	test   %rdi,%rdi
  41d6df:	48 89 f9             	mov    %rdi,%rcx
  41d6e2:	74 44                	je     41d728 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41d6e4:	48 8b 41 30          	mov    0x30(%rcx),%rax
  41d6e8:	31 d2                	xor    %edx,%edx
  41d6ea:	48 8b 39             	mov    (%rcx),%rdi
  41d6ed:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41d6f0:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41d6f5:	48 8b 30             	mov    (%rax),%rsi
  41d6f8:	48 85 f6             	test   %rsi,%rsi
  41d6fb:	75 d3                	jne    41d6d0 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41d6fd:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41d701:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41d704:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41d708:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41d70b:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41d70f:	74 4f                	je     41d760 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41d711:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41d714:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41d719:	49 89 d0             	mov    %rdx,%r8
  41d71c:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41d71f:	75 c3                	jne    41d6e4 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d721:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41d728:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41d72c:	4c 39 d7             	cmp    %r10,%rdi
  41d72f:	74 12                	je     41d743 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41d731:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41d738:	ff ff ff 
  41d73b:	4d 89 e7             	mov    %r12,%r15
  41d73e:	4c 01 e0             	add    %r12,%rax
  41d741:	ff d0                	callq  *%rax
      _M_bucket_count = __n;
  41d743:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41d747:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41d74b:	48 83 c4 08          	add    $0x8,%rsp
  41d74f:	5b                   	pop    %rbx
  41d750:	5d                   	pop    %rbp
  41d751:	41 5c                	pop    %r12
  41d753:	41 5d                	pop    %r13
  41d755:	41 5e                	pop    %r14
  41d757:	41 5f                	pop    %r15
  41d759:	c3                   	retq   
  41d75a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41d760:	49 89 d0             	mov    %rdx,%r8
  41d763:	e9 74 ff ff ff       	jmpq   41d6dc <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41d768:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41d76c:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41d773:	00 
	    return &_M_single_bucket;
  41d774:	4d 89 ea             	mov    %r13,%r10
  41d777:	e9 37 ff ff ff       	jmpq   41d6b3 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41d77c:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  41d783:	ff ff ff 
  41d786:	4d 89 e7             	mov    %r12,%r15
  41d789:	4c 01 e0             	add    %r12,%rax
  41d78c:	ff d0                	callq  *%rax
      __catch(...)
  41d78e:	48 89 c7             	mov    %rax,%rdi
  41d791:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41d798:	ff ff ff 
  41d79b:	4d 89 e7             	mov    %r12,%r15
  41d79e:	4c 01 e0             	add    %r12,%rax
  41d7a1:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41d7a3:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41d7a7:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41d7ab:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  41d7b2:	ff ff ff 
  41d7b5:	4c 01 e0             	add    %r12,%rax
  41d7b8:	ff d0                	callq  *%rax
      __catch(...)
  41d7ba:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  41d7c1:	ff ff ff 
  41d7c4:	48 89 c3             	mov    %rax,%rbx
  41d7c7:	4d 89 e7             	mov    %r12,%r15
  41d7ca:	4c 01 e2             	add    %r12,%rdx
  41d7cd:	ff d2                	callq  *%rdx
  41d7cf:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41d7d6:	ff ff ff 
  41d7d9:	48 89 df             	mov    %rbx,%rdi
  41d7dc:	4c 01 e0             	add    %r12,%rax
  41d7df:	ff d0                	callq  *%rax
  41d7e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d7e8:	00 00 00 
  41d7eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d7f0 <_ZN5boost15program_options12basic_optionIcED1Ev>:
        is specified. The latter is only possible for command line.
        The template parameter specifies the type of char used for storing the
        option's value.
    */
    template<class charT>
    class basic_option {
  41d7f0:	41 57                	push   %r15
  41d7f2:	41 55                	push   %r13
  41d7f4:	49 bb 10 d8 20 00 00 	movabs $0x20d810,%r11
  41d7fb:	00 00 00 
  41d7fe:	41 54                	push   %r12
  41d800:	55                   	push   %rbp
  41d801:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 41d7f0 <_ZN5boost15program_options12basic_optionIcED1Ev>
  41d808:	53                   	push   %rbx
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41d809:	4c 8b 6f 48          	mov    0x48(%rdi),%r13
  41d80d:	49 89 fc             	mov    %rdi,%r12
  41d810:	48 8b 5f 40          	mov    0x40(%rdi),%rbx
  41d814:	4c 01 dd             	add    %r11,%rbp
	  for (; __first != __last; ++__first)
  41d817:	49 39 dd             	cmp    %rbx,%r13
  41d81a:	74 30                	je     41d84c <_ZN5boost15program_options12basic_optionIcED1Ev+0x5c>
  41d81c:	0f 1f 40 00          	nopl   0x0(%rax)
  41d820:	48 8b 3b             	mov    (%rbx),%rdi
  41d823:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41d827:	48 39 c7             	cmp    %rax,%rdi
  41d82a:	74 12                	je     41d83e <_ZN5boost15program_options12basic_optionIcED1Ev+0x4e>
      { ::operator delete(__p); }
  41d82c:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41d833:	ff ff ff 
  41d836:	49 89 ef             	mov    %rbp,%r15
  41d839:	48 01 e8             	add    %rbp,%rax
  41d83c:	ff d0                	callq  *%rax
  41d83e:	48 83 c3 20          	add    $0x20,%rbx
  41d842:	49 39 dd             	cmp    %rbx,%r13
  41d845:	75 d9                	jne    41d820 <_ZN5boost15program_options12basic_optionIcED1Ev+0x30>
  41d847:	49 8b 5c 24 40       	mov    0x40(%r12),%rbx
	if (__p)
  41d84c:	48 85 db             	test   %rbx,%rbx
  41d84f:	74 15                	je     41d866 <_ZN5boost15program_options12basic_optionIcED1Ev+0x76>
  41d851:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41d858:	ff ff ff 
  41d85b:	48 89 df             	mov    %rbx,%rdi
  41d85e:	49 89 ef             	mov    %rbp,%r15
  41d861:	48 01 e8             	add    %rbp,%rax
  41d864:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41d866:	4d 8b 6c 24 30       	mov    0x30(%r12),%r13
  41d86b:	49 8b 5c 24 28       	mov    0x28(%r12),%rbx
  41d870:	49 39 dd             	cmp    %rbx,%r13
  41d873:	74 2f                	je     41d8a4 <_ZN5boost15program_options12basic_optionIcED1Ev+0xb4>
  41d875:	0f 1f 00             	nopl   (%rax)
  41d878:	48 8b 3b             	mov    (%rbx),%rdi
  41d87b:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41d87f:	48 39 c7             	cmp    %rax,%rdi
  41d882:	74 12                	je     41d896 <_ZN5boost15program_options12basic_optionIcED1Ev+0xa6>
  41d884:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41d88b:	ff ff ff 
  41d88e:	49 89 ef             	mov    %rbp,%r15
  41d891:	48 01 e8             	add    %rbp,%rax
  41d894:	ff d0                	callq  *%rax
  41d896:	48 83 c3 20          	add    $0x20,%rbx
  41d89a:	49 39 dd             	cmp    %rbx,%r13
  41d89d:	75 d9                	jne    41d878 <_ZN5boost15program_options12basic_optionIcED1Ev+0x88>
  41d89f:	49 8b 5c 24 28       	mov    0x28(%r12),%rbx
	if (__p)
  41d8a4:	48 85 db             	test   %rbx,%rbx
  41d8a7:	74 15                	je     41d8be <_ZN5boost15program_options12basic_optionIcED1Ev+0xce>
  41d8a9:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41d8b0:	ff ff ff 
  41d8b3:	48 89 df             	mov    %rbx,%rdi
  41d8b6:	49 89 ef             	mov    %rbp,%r15
  41d8b9:	48 01 e8             	add    %rbp,%rax
  41d8bc:	ff d0                	callq  *%rax
  41d8be:	49 8b 3c 24          	mov    (%r12),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41d8c2:	49 83 c4 10          	add    $0x10,%r12
	if (!_M_is_local())
  41d8c6:	4c 39 e7             	cmp    %r12,%rdi
  41d8c9:	74 1d                	je     41d8e8 <_ZN5boost15program_options12basic_optionIcED1Ev+0xf8>
  41d8cb:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41d8d2:	ff ff ff 
  41d8d5:	5b                   	pop    %rbx
  41d8d6:	48 01 e8             	add    %rbp,%rax
  41d8d9:	5d                   	pop    %rbp
  41d8da:	41 5c                	pop    %r12
  41d8dc:	41 5d                	pop    %r13
  41d8de:	41 5f                	pop    %r15
  41d8e0:	ff e0                	jmpq   *%rax
  41d8e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41d8e8:	5b                   	pop    %rbx
  41d8e9:	5d                   	pop    %rbp
  41d8ea:	41 5c                	pop    %r12
  41d8ec:	41 5d                	pop    %r13
  41d8ee:	41 5f                	pop    %r15
  41d8f0:	c3                   	retq   
  41d8f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d8f8:	00 00 00 
  41d8fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d900 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv>:
    basic_command_line_parser<charT>::run()
  41d900:	41 57                	push   %r15
  41d902:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 41d900 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv>
  41d909:	41 56                	push   %r14
  41d90b:	41 55                	push   %r13
  41d90d:	41 54                	push   %r12
  41d90f:	49 bb 00 d7 20 00 00 	movabs $0x20d700,%r11
  41d916:	00 00 00 
  41d919:	55                   	push   %rbp
  41d91a:	53                   	push   %rbx
  41d91b:	4c 01 d8             	add    %r11,%rax
  41d91e:	49 89 c6             	mov    %rax,%r14
  41d921:	48 89 f5             	mov    %rsi,%rbp
        parsed_options result(m_desc, detail::cmdline::get_canonical_option_prefix());
  41d924:	49 89 c7             	mov    %rax,%r15
    basic_command_line_parser<charT>::run()
  41d927:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  41d92e:	49 89 fd             	mov    %rdi,%r13
  41d931:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        parsed_options result(m_desc, detail::cmdline::get_canonical_option_prefix());
  41d936:	48 b8 b0 e8 dd ff ff 	movabs $0xffffffffffdde8b0,%rax
  41d93d:	ff ff ff 
    basic_command_line_parser<charT>::run()
  41d940:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        parsed_options result(m_desc, detail::cmdline::get_canonical_option_prefix());
  41d945:	4c 01 f0             	add    %r14,%rax
  41d948:	48 89 f7             	mov    %rsi,%rdi
        result.options = detail::cmdline::run();
  41d94b:	48 8d 5c 24 40       	lea    0x40(%rsp),%rbx
        parsed_options result(m_desc, detail::cmdline::get_canonical_option_prefix());
  41d950:	ff d0                	callq  *%rax
  41d952:	48 8b 55 70          	mov    0x70(%rbp),%rdx
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  41d956:	66 0f ef c0          	pxor   %xmm0,%xmm0
        : description(xdescription), m_options_prefix(options_prefix) {}
  41d95a:	89 84 24 a0 00 00 00 	mov    %eax,0xa0(%rsp)
  41d961:	48 b9 f0 c0 de ff ff 	movabs $0xffffffffffdec0f0,%rcx
  41d968:	ff ff ff 
        result.options = detail::cmdline::run();
  41d96b:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41d972:	ff ff ff 
  41d975:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
  41d97c:	00 00 00 00 00 
  41d981:	48 89 ee             	mov    %rbp,%rsi
  41d984:	48 89 df             	mov    %rbx,%rdi
  41d987:	0f 29 84 24 80 00 00 	movaps %xmm0,0x80(%rsp)
  41d98e:	00 
  41d98f:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  41d996:	00 
  41d997:	4c 01 f0             	add    %r14,%rax
  41d99a:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  41d99f:	ff d0                	callq  *%rax
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
      {
	vector __tmp(get_allocator());
  41d9a1:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  41d9a6:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  41d9ad:	00 
  41d9ae:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  41d9b3:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  41d9ba:	00 
  41d9bb:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  41d9c0:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  41d9c7:	00 
  41d9c8:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      __a = _GLIBCXX_MOVE(__b);
  41d9cd:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
      __b = _GLIBCXX_MOVE(__tmp);
  41d9d2:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  41d9d9:	00 00 
      __a = _GLIBCXX_MOVE(__b);
  41d9db:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  41d9e2:	00 
  41d9e3:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
      __b = _GLIBCXX_MOVE(__tmp);
  41d9e8:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  41d9ef:	00 00 
      __a = _GLIBCXX_MOVE(__b);
  41d9f1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  41d9f8:	00 
  41d9f9:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
      __b = _GLIBCXX_MOVE(__tmp);
  41d9fe:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  41da05:	00 00 
      __a = _GLIBCXX_MOVE(__b);
  41da07:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  41da0e:	00 
  41da0f:	48 b8 f0 c0 de ff ff 	movabs $0xffffffffffdec0f0,%rax
  41da16:	ff ff ff 
  41da19:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  41da1e:	4a 8d 2c 30          	lea    (%rax,%r14,1),%rbp
  41da22:	ff d5                	callq  *%rbp
  41da24:	48 89 df             	mov    %rbx,%rdi
  41da27:	ff d5                	callq  *%rbp
  41da29:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  41da30:	00 
  41da31:	4c 8b a4 24 80 00 00 	mov    0x80(%rsp),%r12
  41da38:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41da39:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
  41da40:	aa aa aa 
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41da43:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
  41da4a:	00 
  41da4b:	49 c7 45 08 00 00 00 	movq   $0x0,0x8(%r13)
  41da52:	00 
  41da53:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
  41da5a:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41da5b:	48 89 c3             	mov    %rax,%rbx
  41da5e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41da63:	4c 29 e3             	sub    %r12,%rbx
  41da66:	48 89 d8             	mov    %rbx,%rax
  41da69:	48 c1 f8 05          	sar    $0x5,%rax
  41da6d:	48 0f af c2          	imul   %rdx,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41da71:	48 85 c0             	test   %rax,%rax
  41da74:	0f 84 dd 03 00 00    	je     41de57 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x557>
	if (__n > this->max_size())
  41da7a:	48 ba aa aa aa aa aa 	movabs $0x2aaaaaaaaaaaaaa,%rdx
  41da81:	aa aa 02 
  41da84:	48 39 d0             	cmp    %rdx,%rax
  41da87:	0f 87 fa 03 00 00    	ja     41de87 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x587>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41da8d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41da92:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41da99:	ff ff ff 
  41da9c:	48 89 df             	mov    %rbx,%rdi
  41da9f:	49 89 cf             	mov    %rcx,%r15
  41daa2:	48 01 c8             	add    %rcx,%rax
  41daa5:	ff d0                	callq  *%rax
  41daa7:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  41daac:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  41dab3:	00 
  41dab4:	4c 8b a4 24 80 00 00 	mov    0x80(%rsp),%r12
  41dabb:	00 
  41dabc:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
	this->_M_impl._M_start = this->_M_allocate(__n);
  41dac1:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41dac6:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dacb:	48 01 c3             	add    %rax,%rbx
  41dace:	4c 39 64 24 18       	cmp    %r12,0x18(%rsp)
	this->_M_impl._M_start = this->_M_allocate(__n);
  41dad3:	48 89 01             	mov    %rax,(%rcx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  41dad6:	48 89 41 08          	mov    %rax,0x8(%rcx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dada:	48 89 59 10          	mov    %rbx,0x10(%rcx)
  41dade:	0f 84 81 03 00 00    	je     41de65 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x565>
          _M_construct(__beg, __end, _Tag());
  41dae4:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dae9:	49 89 c5             	mov    %rax,%r13
  41daec:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  41daf3:	ff ff ff 
  41daf6:	48 8d 2c 08          	lea    (%rax,%rcx,1),%rbp
  41dafa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  41db00:	4d 85 ed             	test   %r13,%r13
  41db03:	0f 84 a7 01 00 00    	je     41dcb0 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x3b0>
  41db09:	49 8d 45 10          	lea    0x10(%r13),%rax
  41db0d:	4c 89 ef             	mov    %r13,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41db10:	49 89 45 00          	mov    %rax,0x0(%r13)
  41db14:	49 8b 34 24          	mov    (%r12),%rsi
  41db18:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41db1d:	48 89 f2             	mov    %rsi,%rdx
  41db20:	49 03 54 24 08       	add    0x8(%r12),%rdx
          _M_construct(__beg, __end, _Tag());
  41db25:	ff d5                	callq  *%rbp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41db27:	49 8b 5c 24 30       	mov    0x30(%r12),%rbx
  41db2c:	49 2b 5c 24 28       	sub    0x28(%r12),%rbx
  41db31:	41 8b 44 24 20       	mov    0x20(%r12),%eax
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41db36:	49 c7 45 28 00 00 00 	movq   $0x0,0x28(%r13)
  41db3d:	00 
  41db3e:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
  41db45:	00 
  41db46:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
  41db4d:	00 
  41db4e:	41 89 45 20          	mov    %eax,0x20(%r13)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41db52:	48 89 d8             	mov    %rbx,%rax
  41db55:	48 c1 f8 05          	sar    $0x5,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41db59:	48 85 c0             	test   %rax,%rax
  41db5c:	0f 84 e2 02 00 00    	je     41de44 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x544>
	if (__n > this->max_size())
  41db62:	48 b9 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rcx
  41db69:	ff ff 07 
  41db6c:	48 39 c8             	cmp    %rcx,%rax
  41db6f:	0f 87 29 03 00 00    	ja     41de9e <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x59e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41db75:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41db7a:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41db81:	ff ff ff 
  41db84:	48 89 df             	mov    %rbx,%rdi
  41db87:	49 89 cf             	mov    %rcx,%r15
  41db8a:	48 01 c8             	add    %rcx,%rax
  41db8d:	ff d0                	callq  *%rax
  41db8f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41db94:	48 01 c3             	add    %rax,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
  41db97:	49 89 45 28          	mov    %rax,0x28(%r13)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  41db9b:	49 89 45 30          	mov    %rax,0x30(%r13)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41db9f:	49 89 5d 38          	mov    %rbx,0x38(%r13)
  41dba3:	4d 8b 7c 24 30       	mov    0x30(%r12),%r15
  41dba8:	48 89 c3             	mov    %rax,%rbx
  41dbab:	4d 8b 74 24 28       	mov    0x28(%r12),%r14
  41dbb0:	4d 39 f7             	cmp    %r14,%r15
  41dbb3:	74 2b                	je     41dbe0 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x2e0>
  41dbb5:	0f 1f 00             	nopl   (%rax)
  41dbb8:	48 85 db             	test   %rbx,%rbx
  41dbbb:	74 16                	je     41dbd3 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x2d3>
	: allocator_type(__a), _M_p(__dat) { }
  41dbbd:	48 8d 43 10          	lea    0x10(%rbx),%rax
          _M_construct(__beg, __end, _Tag());
  41dbc1:	48 89 df             	mov    %rbx,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41dbc4:	48 89 03             	mov    %rax,(%rbx)
  41dbc7:	49 8b 36             	mov    (%r14),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41dbca:	48 89 f2             	mov    %rsi,%rdx
  41dbcd:	49 03 56 08          	add    0x8(%r14),%rdx
          _M_construct(__beg, __end, _Tag());
  41dbd1:	ff d5                	callq  *%rbp
  41dbd3:	49 83 c6 20          	add    $0x20,%r14
  41dbd7:	48 83 c3 20          	add    $0x20,%rbx
  41dbdb:	4d 39 f7             	cmp    %r14,%r15
  41dbde:	75 d8                	jne    41dbb8 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x2b8>
      { this->_M_impl._M_finish =
  41dbe0:	49 89 5d 30          	mov    %rbx,0x30(%r13)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41dbe4:	49 8b 5c 24 48       	mov    0x48(%r12),%rbx
  41dbe9:	49 2b 5c 24 40       	sub    0x40(%r12),%rbx
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41dbee:	49 c7 45 40 00 00 00 	movq   $0x0,0x40(%r13)
  41dbf5:	00 
  41dbf6:	49 c7 45 48 00 00 00 	movq   $0x0,0x48(%r13)
  41dbfd:	00 
  41dbfe:	49 c7 45 50 00 00 00 	movq   $0x0,0x50(%r13)
  41dc05:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41dc06:	48 89 d8             	mov    %rbx,%rax
  41dc09:	48 c1 f8 05          	sar    $0x5,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41dc0d:	48 85 c0             	test   %rax,%rax
  41dc10:	0f 84 1b 02 00 00    	je     41de31 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x531>
	if (__n > this->max_size())
  41dc16:	48 b9 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rcx
  41dc1d:	ff ff 07 
  41dc20:	48 39 c8             	cmp    %rcx,%rax
  41dc23:	0f 87 53 03 00 00    	ja     41df7c <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x67c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41dc29:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dc2e:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41dc35:	ff ff ff 
  41dc38:	48 89 df             	mov    %rbx,%rdi
  41dc3b:	49 89 cf             	mov    %rcx,%r15
  41dc3e:	48 01 c8             	add    %rcx,%rax
  41dc41:	ff d0                	callq  *%rax
  41dc43:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dc48:	48 01 c3             	add    %rax,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
  41dc4b:	49 89 45 40          	mov    %rax,0x40(%r13)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  41dc4f:	49 89 45 48          	mov    %rax,0x48(%r13)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dc53:	49 89 5d 50          	mov    %rbx,0x50(%r13)
  41dc57:	4d 8b 7c 24 48       	mov    0x48(%r12),%r15
  41dc5c:	48 89 c3             	mov    %rax,%rbx
  41dc5f:	4d 8b 74 24 40       	mov    0x40(%r12),%r14
  41dc64:	4d 39 f7             	cmp    %r14,%r15
  41dc67:	74 2f                	je     41dc98 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x398>
  41dc69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41dc70:	48 85 db             	test   %rbx,%rbx
  41dc73:	74 16                	je     41dc8b <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x38b>
	: allocator_type(__a), _M_p(__dat) { }
  41dc75:	48 8d 43 10          	lea    0x10(%rbx),%rax
          _M_construct(__beg, __end, _Tag());
  41dc79:	48 89 df             	mov    %rbx,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41dc7c:	48 89 03             	mov    %rax,(%rbx)
  41dc7f:	49 8b 36             	mov    (%r14),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41dc82:	48 89 f2             	mov    %rsi,%rdx
  41dc85:	49 03 56 08          	add    0x8(%r14),%rdx
          _M_construct(__beg, __end, _Tag());
  41dc89:	ff d5                	callq  *%rbp
  41dc8b:	49 83 c6 20          	add    $0x20,%r14
  41dc8f:	48 83 c3 20          	add    $0x20,%rbx
  41dc93:	4d 39 f7             	cmp    %r14,%r15
  41dc96:	75 d8                	jne    41dc70 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x370>
  41dc98:	41 0f b6 44 24 58    	movzbl 0x58(%r12),%eax
      { this->_M_impl._M_finish =
  41dc9e:	49 89 5d 48          	mov    %rbx,0x48(%r13)
  41dca2:	41 88 45 58          	mov    %al,0x58(%r13)
  41dca6:	41 0f b6 44 24 59    	movzbl 0x59(%r12),%eax
  41dcac:	41 88 45 59          	mov    %al,0x59(%r13)
  41dcb0:	49 83 c5 60          	add    $0x60,%r13
  41dcb4:	49 83 c4 60          	add    $0x60,%r12
  41dcb8:	4c 39 64 24 18       	cmp    %r12,0x18(%rsp)
  41dcbd:	0f 85 3d fe ff ff    	jne    41db00 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x200>
  41dcc3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
    class basic_parsed_options {
  41dcc8:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  41dccf:	00 
  41dcd0:	48 8b 9c 24 88 00 00 	mov    0x88(%rsp),%rbx
  41dcd7:	00 
  41dcd8:	4c 8b a4 24 80 00 00 	mov    0x80(%rsp),%r12
  41dcdf:	00 
  41dce0:	48 89 41 18          	mov    %rax,0x18(%rcx)
  41dce4:	8b 84 24 a0 00 00 00 	mov    0xa0(%rsp),%eax
	  for (; __first != __last; ++__first)
  41dceb:	4c 39 e3             	cmp    %r12,%rbx
  41dcee:	4c 89 69 08          	mov    %r13,0x8(%rcx)
  41dcf2:	89 41 20             	mov    %eax,0x20(%rcx)
  41dcf5:	0f 84 00 01 00 00    	je     41ddfb <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x4fb>
  41dcfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41dd00:	4d 8b 6c 24 48       	mov    0x48(%r12),%r13
  41dd05:	49 8b 6c 24 40       	mov    0x40(%r12),%rbp
  41dd0a:	49 39 ed             	cmp    %rbp,%r13
  41dd0d:	74 33                	je     41dd42 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x442>
  41dd0f:	90                   	nop
  41dd10:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (!_M_is_local())
  41dd14:	48 8d 45 10          	lea    0x10(%rbp),%rax
  41dd18:	48 39 c7             	cmp    %rax,%rdi
  41dd1b:	74 17                	je     41dd34 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x434>
      { ::operator delete(__p); }
  41dd1d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dd22:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41dd29:	ff ff ff 
  41dd2c:	49 89 cf             	mov    %rcx,%r15
  41dd2f:	48 01 c8             	add    %rcx,%rax
  41dd32:	ff d0                	callq  *%rax
  41dd34:	48 83 c5 20          	add    $0x20,%rbp
  41dd38:	49 39 ed             	cmp    %rbp,%r13
  41dd3b:	75 d3                	jne    41dd10 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x410>
  41dd3d:	49 8b 6c 24 40       	mov    0x40(%r12),%rbp
	if (__p)
  41dd42:	48 85 ed             	test   %rbp,%rbp
  41dd45:	74 1a                	je     41dd61 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x461>
  41dd47:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dd4c:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41dd53:	ff ff ff 
  41dd56:	48 89 ef             	mov    %rbp,%rdi
  41dd59:	49 89 cf             	mov    %rcx,%r15
  41dd5c:	48 01 c8             	add    %rcx,%rax
  41dd5f:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41dd61:	4d 8b 6c 24 30       	mov    0x30(%r12),%r13
  41dd66:	49 8b 6c 24 28       	mov    0x28(%r12),%rbp
  41dd6b:	49 39 ed             	cmp    %rbp,%r13
  41dd6e:	74 32                	je     41dda2 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x4a2>
  41dd70:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  41dd74:	48 8d 45 10          	lea    0x10(%rbp),%rax
  41dd78:	48 39 c7             	cmp    %rax,%rdi
  41dd7b:	74 17                	je     41dd94 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x494>
  41dd7d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dd82:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41dd89:	ff ff ff 
  41dd8c:	49 89 cf             	mov    %rcx,%r15
  41dd8f:	48 01 c8             	add    %rcx,%rax
  41dd92:	ff d0                	callq  *%rax
  41dd94:	48 83 c5 20          	add    $0x20,%rbp
  41dd98:	49 39 ed             	cmp    %rbp,%r13
  41dd9b:	75 d3                	jne    41dd70 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x470>
  41dd9d:	49 8b 6c 24 28       	mov    0x28(%r12),%rbp
	if (__p)
  41dda2:	48 85 ed             	test   %rbp,%rbp
  41dda5:	74 1a                	je     41ddc1 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x4c1>
  41dda7:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41ddac:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41ddb3:	ff ff ff 
  41ddb6:	48 89 ef             	mov    %rbp,%rdi
  41ddb9:	49 89 cf             	mov    %rcx,%r15
  41ddbc:	48 01 c8             	add    %rcx,%rax
  41ddbf:	ff d0                	callq  *%rax
  41ddc1:	49 8b 3c 24          	mov    (%r12),%rdi
  41ddc5:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  41ddca:	48 39 c7             	cmp    %rax,%rdi
  41ddcd:	74 17                	je     41dde6 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x4e6>
  41ddcf:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41ddd4:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41dddb:	ff ff ff 
  41ddde:	49 89 cf             	mov    %rcx,%r15
  41dde1:	48 01 c8             	add    %rcx,%rax
  41dde4:	ff d0                	callq  *%rax
  41dde6:	49 83 c4 60          	add    $0x60,%r12
  41ddea:	4c 39 e3             	cmp    %r12,%rbx
  41dded:	0f 85 0d ff ff ff    	jne    41dd00 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x400>
  41ddf3:	4c 8b a4 24 80 00 00 	mov    0x80(%rsp),%r12
  41ddfa:	00 
  41ddfb:	4d 85 e4             	test   %r12,%r12
  41ddfe:	74 1a                	je     41de1a <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x51a>
  41de00:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41de05:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41de0c:	ff ff ff 
  41de0f:	4c 89 e7             	mov    %r12,%rdi
  41de12:	49 89 cf             	mov    %rcx,%r15
  41de15:	48 01 c8             	add    %rcx,%rax
  41de18:	ff d0                	callq  *%rax
    }
  41de1a:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41de1f:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  41de26:	5b                   	pop    %rbx
  41de27:	5d                   	pop    %rbp
  41de28:	41 5c                	pop    %r12
  41de2a:	41 5d                	pop    %r13
  41de2c:	41 5e                	pop    %r14
  41de2e:	41 5f                	pop    %r15
  41de30:	c3                   	retq   
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41de31:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  41de38:	00 00 
  41de3a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41de3f:	e9 04 fe ff ff       	jmpq   41dc48 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x348>
  41de44:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  41de4b:	00 00 
  41de4d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41de52:	e9 3d fd ff ff       	jmpq   41db94 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x294>
  41de57:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41de5e:	00 00 
  41de60:	e9 5c fc ff ff       	jmpq   41dac1 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x1c1>
  41de65:	48 89 c7             	mov    %rax,%rdi
  41de68:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  41de6f:	00 
      { this->_M_impl._M_finish =
  41de70:	48 89 79 08          	mov    %rdi,0x8(%rcx)
  41de74:	48 89 41 18          	mov    %rax,0x18(%rcx)
  41de78:	8b 84 24 a0 00 00 00 	mov    0xa0(%rsp),%eax
  41de7f:	89 41 20             	mov    %eax,0x20(%rcx)
  41de82:	e9 74 ff ff ff       	jmpq   41ddfb <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x4fb>
	  std::__throw_bad_alloc();
  41de87:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41de8c:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  41de93:	ff ff ff 
  41de96:	49 89 cf             	mov    %rcx,%r15
  41de99:	48 01 c8             	add    %rcx,%rax
  41de9c:	ff d0                	callq  *%rax
  41de9e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dea3:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  41deaa:	ff ff ff 
  41dead:	49 89 cf             	mov    %rcx,%r15
  41deb0:	48 01 c8             	add    %rcx,%rax
  41deb3:	ff d0                	callq  *%rax
  41deb5:	48 bd 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rbp
  41debc:	ff ff ff 
  41debf:	49 bc 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%r12
  41dec6:	ff ff ff 
  41dec9:	48 bb 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rbx
  41ded0:	ff ff ff 
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
	    }
	  __catch(...)
  41ded3:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  41ded8:	48 89 c7             	mov    %rax,%rdi
  41dedb:	4c 01 f5             	add    %r14,%rbp
  41dede:	4d 89 f7             	mov    %r14,%r15
  41dee1:	ff d5                	callq  *%rbp
  41dee3:	4c 39 6c 24 30       	cmp    %r13,0x30(%rsp)
  41dee8:	48 b8 f0 27 df ff ff 	movabs $0xffffffffffdf27f0,%rax
  41deef:	ff ff ff 
    { __pointer->~_Tp(); }
  41def2:	4a 8d 2c 30          	lea    (%rax,%r14,1),%rbp
  41def6:	4c 8b 74 24 30       	mov    0x30(%rsp),%r14
	  for (; __first != __last; ++__first)
  41defb:	74 0e                	je     41df0b <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x60b>
    { __pointer->~_Tp(); }
  41defd:	4c 89 f7             	mov    %r14,%rdi
	  for (; __first != __last; ++__first)
  41df00:	49 83 c6 60          	add    $0x60,%r14
    { __pointer->~_Tp(); }
  41df04:	ff d5                	callq  *%rbp
	  for (; __first != __last; ++__first)
  41df06:	4d 39 ee             	cmp    %r13,%r14
  41df09:	75 f2                	jne    41defd <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x5fd>
	    {
	      std::_Destroy(__result, __cur);
	      __throw_exception_again;
  41df0b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41df10:	49 89 c7             	mov    %rax,%r15
  41df13:	49 01 c4             	add    %rax,%r12
  41df16:	41 ff d4             	callq  *%r12
  41df19:	49 89 c6             	mov    %rax,%r14
  41df1c:	48 bd 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rbp
  41df23:	ff ff ff 
  41df26:	49 bc 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%r12
  41df2d:	ff ff ff 
  41df30:	48 bb 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rbx
  41df37:	ff ff ff 
  41df3a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41df3f:	48 b8 a0 b8 de ff ff 	movabs $0xffffffffffdeb8a0,%rax
  41df46:	ff ff ff 
  41df49:	49 8d 7d 28          	lea    0x28(%r13),%rdi
  41df4d:	48 01 c8             	add    %rcx,%rax
  41df50:	ff d0                	callq  *%rax
  41df52:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  41df56:	48 3b 7c 24 20       	cmp    0x20(%rsp),%rdi
  41df5b:	74 17                	je     41df74 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x674>
      { ::operator delete(__p); }
  41df5d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41df62:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41df69:	ff ff ff 
  41df6c:	49 89 cf             	mov    %rcx,%r15
  41df6f:	48 01 c8             	add    %rcx,%rax
  41df72:	ff d0                	callq  *%rax
  41df74:	4c 89 f0             	mov    %r14,%rax
  41df77:	e9 57 ff ff ff       	jmpq   41ded3 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x5d3>
	  std::__throw_bad_alloc();
  41df7c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41df81:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  41df88:	ff ff ff 
  41df8b:	49 89 cf             	mov    %rcx,%r15
  41df8e:	48 01 c8             	add    %rcx,%rax
  41df91:	ff d0                	callq  *%rax
  41df93:	48 89 c5             	mov    %rax,%rbp
  41df96:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  41df9b:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  41dfa0:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  41dfa7:	00 
  41dfa8:	48 89 d8             	mov    %rbx,%rax
  41dfab:	49 89 df             	mov    %rbx,%r15
  41dfae:	48 01 c8             	add    %rcx,%rax
  41dfb1:	ff d0                	callq  *%rax
  41dfb3:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41dfba:	ff ff ff 
  41dfbd:	48 89 ef             	mov    %rbp,%rdi
  41dfc0:	48 01 d8             	add    %rbx,%rax
  41dfc3:	ff d0                	callq  *%rax
	  __catch(...)
  41dfc5:	48 89 c7             	mov    %rax,%rdi
  41dfc8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41dfcd:	48 bd 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rbp
  41dfd4:	ff ff ff 
  41dfd7:	49 89 c7             	mov    %rax,%r15
  41dfda:	48 01 e8             	add    %rbp,%rax
  41dfdd:	ff d0                	callq  *%rax
  41dfdf:	48 39 5c 24 10       	cmp    %rbx,0x10(%rsp)
  41dfe4:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  41dfe9:	74 2e                	je     41e019 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x719>
  41dfeb:	49 8b 3c 24          	mov    (%r12),%rdi
  41dfef:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  41dff4:	48 39 c7             	cmp    %rax,%rdi
  41dff7:	74 17                	je     41e010 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x710>
      { ::operator delete(__p); }
  41dff9:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dffe:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e005:	ff ff ff 
  41e008:	49 89 cf             	mov    %rcx,%r15
  41e00b:	48 01 c8             	add    %rcx,%rax
  41e00e:	ff d0                	callq  *%rax
  41e010:	49 83 c4 20          	add    $0x20,%r12
  41e014:	49 39 dc             	cmp    %rbx,%r12
  41e017:	75 d2                	jne    41dfeb <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x6eb>
	      __throw_exception_again;
  41e019:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41e01e:	49 bc 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%r12
  41e025:	ff ff ff 
  41e028:	49 89 c7             	mov    %rax,%r15
  41e02b:	4c 01 e0             	add    %r12,%rax
  41e02e:	ff d0                	callq  *%rax
  41e030:	49 89 c6             	mov    %rax,%r14
  41e033:	48 bd 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rbp
  41e03a:	ff ff ff 
  41e03d:	49 bc 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%r12
  41e044:	ff ff ff 
  41e047:	48 bb 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rbx
  41e04e:	ff ff ff 
  41e051:	e9 fc fe ff ff       	jmpq   41df52 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x652>
	  __catch(...)
  41e056:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e05b:	49 89 c6             	mov    %rax,%r14
  41e05e:	48 bb 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rbx
  41e065:	ff ff ff 
  41e068:	48 89 c8             	mov    %rcx,%rax
  41e06b:	49 89 cf             	mov    %rcx,%r15
  41e06e:	48 01 d8             	add    %rbx,%rax
  41e071:	ff d0                	callq  *%rax
		      - this->_M_impl._M_start); }
  41e073:	49 8b 7d 28          	mov    0x28(%r13),%rdi
	if (__p)
  41e077:	48 85 ff             	test   %rdi,%rdi
  41e07a:	0f 84 d2 fe ff ff    	je     41df52 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x652>
  41e080:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e085:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e08c:	ff ff ff 
  41e08f:	49 89 cf             	mov    %rcx,%r15
  41e092:	48 01 c8             	add    %rcx,%rax
  41e095:	ff d0                	callq  *%rax
  41e097:	e9 b6 fe ff ff       	jmpq   41df52 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x652>
  41e09c:	48 89 c7             	mov    %rax,%rdi
  41e09f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41e0a4:	48 bd 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rbp
  41e0ab:	ff ff ff 
  41e0ae:	49 89 c7             	mov    %rax,%r15
  41e0b1:	48 01 e8             	add    %rbp,%rax
  41e0b4:	ff d0                	callq  *%rax
  41e0b6:	48 39 5c 24 10       	cmp    %rbx,0x10(%rsp)
  41e0bb:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  41e0c0:	74 2e                	je     41e0f0 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x7f0>
  41e0c2:	49 8b 3c 24          	mov    (%r12),%rdi
  41e0c6:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  41e0cb:	48 39 c7             	cmp    %rax,%rdi
  41e0ce:	74 17                	je     41e0e7 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x7e7>
  41e0d0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e0d5:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e0dc:	ff ff ff 
  41e0df:	49 89 cf             	mov    %rcx,%r15
  41e0e2:	48 01 c8             	add    %rcx,%rax
  41e0e5:	ff d0                	callq  *%rax
  41e0e7:	49 83 c4 20          	add    $0x20,%r12
  41e0eb:	49 39 dc             	cmp    %rbx,%r12
  41e0ee:	75 d2                	jne    41e0c2 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x7c2>
	      __throw_exception_again;
  41e0f0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41e0f5:	49 bc 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%r12
  41e0fc:	ff ff ff 
  41e0ff:	49 89 c7             	mov    %rax,%r15
  41e102:	4c 01 e0             	add    %r12,%rax
  41e105:	ff d0                	callq  *%rax
	  __catch(...)
  41e107:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  41e10c:	48 89 c5             	mov    %rax,%rbp
  41e10f:	4c 01 f3             	add    %r14,%rbx
  41e112:	4d 89 f7             	mov    %r14,%r15
  41e115:	ff d3                	callq  *%rbx
		      - this->_M_impl._M_start); }
  41e117:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41e11c:	48 8b 38             	mov    (%rax),%rdi
	if (__p)
  41e11f:	48 85 ff             	test   %rdi,%rdi
  41e122:	0f 84 6e fe ff ff    	je     41df96 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x696>
  41e128:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e12f:	ff ff ff 
  41e132:	4c 01 f0             	add    %r14,%rax
  41e135:	ff d0                	callq  *%rax
  41e137:	e9 5a fe ff ff       	jmpq   41df96 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x696>
  41e13c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e141:	49 89 c6             	mov    %rax,%r14
  41e144:	48 bb 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rbx
  41e14b:	ff ff ff 
  41e14e:	48 89 c8             	mov    %rcx,%rax
  41e151:	49 89 cf             	mov    %rcx,%r15
  41e154:	48 01 d8             	add    %rbx,%rax
  41e157:	ff d0                	callq  *%rax
		      - this->_M_impl._M_start); }
  41e159:	49 8b 7d 40          	mov    0x40(%r13),%rdi
	if (__p)
  41e15d:	48 85 ff             	test   %rdi,%rdi
  41e160:	0f 84 d4 fd ff ff    	je     41df3a <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x63a>
  41e166:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e16b:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e172:	ff ff ff 
  41e175:	49 89 cf             	mov    %rcx,%r15
  41e178:	48 01 c8             	add    %rcx,%rax
  41e17b:	ff d0                	callq  *%rax
  41e17d:	e9 b8 fd ff ff       	jmpq   41df3a <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x63a>
  41e182:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41e189:	00 00 00 
  41e18c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041e190 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41e190:	41 57                	push   %r15
  41e192:	41 56                	push   %r14
  41e194:	49 bb 70 ce 20 00 00 	movabs $0x20ce70,%r11
  41e19b:	00 00 00 
  41e19e:	41 55                	push   %r13
  41e1a0:	41 54                	push   %r12
  41e1a2:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41e190 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>
  41e1a9:	55                   	push   %rbp
  41e1aa:	53                   	push   %rbx
  41e1ab:	48 89 fd             	mov    %rdi,%rbp
  41e1ae:	4d 01 dc             	add    %r11,%r12
  41e1b1:	48 89 f3             	mov    %rsi,%rbx
  41e1b4:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41e1b8:	48 83 fe 01          	cmp    $0x1,%rsi
  41e1bc:	0f 84 06 01 00 00    	je     41e2c8 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41e1c2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41e1c9:	ff ff 1f 
  41e1cc:	49 89 d5             	mov    %rdx,%r13
  41e1cf:	48 39 c6             	cmp    %rax,%rsi
  41e1d2:	0f 87 04 01 00 00    	ja     41e2dc <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41e1d8:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41e1df:	00 
  41e1e0:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41e1e7:	ff ff ff 
  41e1ea:	4d 89 e7             	mov    %r12,%r15
  41e1ed:	4c 01 e0             	add    %r12,%rax
  41e1f0:	4c 89 f7             	mov    %r14,%rdi
  41e1f3:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41e1f5:	48 89 c7             	mov    %rax,%rdi
  41e1f8:	49 89 c5             	mov    %rax,%r13
  41e1fb:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  41e202:	ff ff ff 
  41e205:	4c 89 f2             	mov    %r14,%rdx
  41e208:	31 f6                	xor    %esi,%esi
  41e20a:	4c 01 e0             	add    %r12,%rax
  41e20d:	ff d0                	callq  *%rax
  41e20f:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41e213:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
      _M_before_begin._M_nxt = nullptr;
  41e217:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41e21e:	00 
      while (__p)
  41e21f:	48 85 c9             	test   %rcx,%rcx
  41e222:	74 64                	je     41e288 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
  41e224:	45 31 c0             	xor    %r8d,%r8d
	      __new_buckets[__bkt] = &_M_before_begin;
  41e227:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41e22b:	eb 17                	jmp    41e244 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41e22d:	0f 1f 00             	nopl   (%rax)
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41e230:	48 8b 16             	mov    (%rsi),%rdx
  41e233:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41e236:	48 8b 00             	mov    (%rax),%rax
  41e239:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41e23c:	48 85 ff             	test   %rdi,%rdi
  41e23f:	48 89 f9             	mov    %rdi,%rcx
  41e242:	74 44                	je     41e288 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41e244:	48 8b 41 10          	mov    0x10(%rcx),%rax
  41e248:	31 d2                	xor    %edx,%edx
  41e24a:	48 8b 39             	mov    (%rcx),%rdi
  41e24d:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41e250:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41e255:	48 8b 30             	mov    (%rax),%rsi
  41e258:	48 85 f6             	test   %rsi,%rsi
  41e25b:	75 d3                	jne    41e230 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41e25d:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41e261:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41e264:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41e268:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41e26b:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41e26f:	74 4f                	je     41e2c0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41e271:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41e274:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41e279:	49 89 d0             	mov    %rdx,%r8
  41e27c:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41e27f:	75 c3                	jne    41e244 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41e281:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41e288:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41e28c:	4c 39 d7             	cmp    %r10,%rdi
  41e28f:	74 12                	je     41e2a3 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41e291:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e298:	ff ff ff 
  41e29b:	4d 89 e7             	mov    %r12,%r15
  41e29e:	4c 01 e0             	add    %r12,%rax
  41e2a1:	ff d0                	callq  *%rax
      _M_bucket_count = __n;
  41e2a3:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41e2a7:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41e2ab:	48 83 c4 08          	add    $0x8,%rsp
  41e2af:	5b                   	pop    %rbx
  41e2b0:	5d                   	pop    %rbp
  41e2b1:	41 5c                	pop    %r12
  41e2b3:	41 5d                	pop    %r13
  41e2b5:	41 5e                	pop    %r14
  41e2b7:	41 5f                	pop    %r15
  41e2b9:	c3                   	retq   
  41e2ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41e2c0:	49 89 d0             	mov    %rdx,%r8
  41e2c3:	e9 74 ff ff ff       	jmpq   41e23c <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41e2c8:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41e2cc:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41e2d3:	00 
	    return &_M_single_bucket;
  41e2d4:	4d 89 ea             	mov    %r13,%r10
  41e2d7:	e9 37 ff ff ff       	jmpq   41e213 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41e2dc:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  41e2e3:	ff ff ff 
  41e2e6:	4d 89 e7             	mov    %r12,%r15
  41e2e9:	4c 01 e0             	add    %r12,%rax
  41e2ec:	ff d0                	callq  *%rax
      __catch(...)
  41e2ee:	48 89 c7             	mov    %rax,%rdi
  41e2f1:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41e2f8:	ff ff ff 
  41e2fb:	4d 89 e7             	mov    %r12,%r15
  41e2fe:	4c 01 e0             	add    %r12,%rax
  41e301:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41e303:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41e307:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41e30b:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  41e312:	ff ff ff 
  41e315:	4c 01 e0             	add    %r12,%rax
  41e318:	ff d0                	callq  *%rax
      __catch(...)
  41e31a:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  41e321:	ff ff ff 
  41e324:	48 89 c3             	mov    %rax,%rbx
  41e327:	4d 89 e7             	mov    %r12,%r15
  41e32a:	4c 01 e2             	add    %r12,%rdx
  41e32d:	ff d2                	callq  *%rdx
  41e32f:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41e336:	ff ff ff 
  41e339:	48 89 df             	mov    %rbx,%rdi
  41e33c:	4c 01 e0             	add    %r12,%rax
  41e33f:	ff d0                	callq  *%rax
  41e341:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41e348:	00 00 00 
  41e34b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041e350 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41e350:	41 57                	push   %r15
  41e352:	41 56                	push   %r14
  41e354:	49 bb b0 cc 20 00 00 	movabs $0x20ccb0,%r11
  41e35b:	00 00 00 
  41e35e:	41 55                	push   %r13
  41e360:	41 54                	push   %r12
  41e362:	55                   	push   %rbp
  41e363:	53                   	push   %rbx
  41e364:	48 89 fd             	mov    %rdi,%rbp
  41e367:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41e350 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_>
  41e36e:	48 83 ec 28          	sub    $0x28,%rsp
  41e372:	4c 8b 37             	mov    (%rdi),%r14
  41e375:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  41e379:	4c 01 db             	add    %r11,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41e37c:	48 89 f8             	mov    %rdi,%rax
  41e37f:	4c 29 f0             	sub    %r14,%rax
  41e382:	48 89 c1             	mov    %rax,%rcx
  41e385:	48 c1 f9 05          	sar    $0x5,%rcx
      if (__a < __b)
  41e389:	48 85 c9             	test   %rcx,%rcx
  41e38c:	74 22                	je     41e3b0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x60>
  41e38e:	48 01 c9             	add    %rcx,%rcx
  41e391:	72 13                	jb     41e3a6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41e393:	49 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%r8
  41e39a:	ff ff 07 
  41e39d:	4c 39 c1             	cmp    %r8,%rcx
  41e3a0:	0f 86 b2 01 00 00    	jbe    41e558 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x208>
  41e3a6:	49 c7 c4 e0 ff ff ff 	mov    $0xffffffffffffffe0,%r12
  41e3ad:	eb 07                	jmp    41e3b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x66>
  41e3af:	90                   	nop
  41e3b0:	41 bc 20 00 00 00    	mov    $0x20,%r12d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41e3b6:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41e3bd:	ff ff ff 
  41e3c0:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  41e3c5:	4c 89 e7             	mov    %r12,%rdi
  41e3c8:	49 89 df             	mov    %rbx,%r15
  41e3cb:	48 01 d8             	add    %rbx,%rax
  41e3ce:	ff d0                	callq  *%rax
  41e3d0:	49 89 c5             	mov    %rax,%r13
  41e3d3:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  41e3d7:	4a 8d 04 20          	lea    (%rax,%r12,1),%rax
  41e3db:	49 8d 75 20          	lea    0x20(%r13),%rsi
  41e3df:	4c 8b 75 00          	mov    0x0(%rbp),%r14
  41e3e3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41e3e8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41e3ed:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  41e3f2:	48 89 f8             	mov    %rdi,%rax
  41e3f5:	4c 29 f0             	sub    %r14,%rax
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41e3f8:	4c 01 e8             	add    %r13,%rax
  41e3fb:	74 41                	je     41e43e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0xee>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41e3fd:	48 8d 50 10          	lea    0x10(%rax),%rdx
  41e401:	48 8b 0e             	mov    (%rsi),%rcx
  41e404:	48 89 10             	mov    %rdx,(%rax)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41e407:	48 8d 56 10          	lea    0x10(%rsi),%rdx
	if (__str._M_is_local())
  41e40b:	48 39 d1             	cmp    %rdx,%rcx
  41e40e:	0f 84 2c 01 00 00    	je     41e540 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1f0>
      { _M_dataplus._M_p = __p; }
  41e414:	48 89 08             	mov    %rcx,(%rax)
      { _M_allocated_capacity = __capacity; }
  41e417:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  41e41b:	48 89 48 10          	mov    %rcx,0x10(%rax)
      { _M_string_length = __length; }
  41e41f:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  41e423:	c6 46 10 00          	movb   $0x0,0x10(%rsi)
  41e427:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  41e42b:	4c 8b 75 00          	mov    0x0(%rbp),%r14
      { _M_dataplus._M_p = __p; }
  41e42f:	48 89 16             	mov    %rdx,(%rsi)
      { _M_string_length = __length; }
  41e432:	48 c7 46 08 00 00 00 	movq   $0x0,0x8(%rsi)
  41e439:	00 
  41e43a:	48 89 48 08          	mov    %rcx,0x8(%rax)
	      for (; __first != __last; ++__first, (void)++__cur)
  41e43e:	4c 39 f7             	cmp    %r14,%rdi
  41e441:	0f 84 b4 00 00 00    	je     41e4fb <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1ab>
  41e447:	49 8d 4e 20          	lea    0x20(%r14),%rcx
  41e44b:	49 8d 46 10          	lea    0x10(%r14),%rax
  41e44f:	4c 89 ea             	mov    %r13,%rdx
  41e452:	48 29 cf             	sub    %rcx,%rdi
  41e455:	49 8d 74 3e 30       	lea    0x30(%r14,%rdi,1),%rsi
  41e45a:	eb 32                	jmp    41e48e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x13e>
  41e45c:	0f 1f 40 00          	nopl   0x0(%rax)
      { _M_dataplus._M_p = __p; }
  41e460:	48 89 0a             	mov    %rcx,(%rdx)
	    _M_capacity(__str._M_allocated_capacity);
  41e463:	48 8b 08             	mov    (%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41e466:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  41e46a:	48 8b 48 f8          	mov    -0x8(%rax),%rcx
      { _M_string_length = __length; }
  41e46e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
      { _M_dataplus._M_p = __p; }
  41e472:	48 89 40 f0          	mov    %rax,-0x10(%rax)
      { _M_string_length = __length; }
  41e476:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
  41e47d:	00 
  41e47e:	c6 00 00             	movb   $0x0,(%rax)
  41e481:	48 83 c0 20          	add    $0x20,%rax
  41e485:	48 83 c2 20          	add    $0x20,%rdx
  41e489:	48 39 f0             	cmp    %rsi,%rax
  41e48c:	74 2a                	je     41e4b8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x168>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  41e48e:	48 85 d2             	test   %rdx,%rdx
  41e491:	74 ee                	je     41e481 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x131>
	: allocator_type(__a), _M_p(__dat) { }
  41e493:	48 8d 4a 10          	lea    0x10(%rdx),%rcx
  41e497:	48 89 0a             	mov    %rcx,(%rdx)
  41e49a:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
	if (__str._M_is_local())
  41e49e:	48 39 c1             	cmp    %rax,%rcx
  41e4a1:	75 bd                	jne    41e460 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x110>
  41e4a3:	4c 8b 08             	mov    (%rax),%r9
  41e4a6:	4c 8b 50 08          	mov    0x8(%rax),%r10
  41e4aa:	4c 89 4a 10          	mov    %r9,0x10(%rdx)
  41e4ae:	4c 89 52 18          	mov    %r10,0x18(%rdx)
  41e4b2:	eb b6                	jmp    41e46a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x11a>
  41e4b4:	0f 1f 40 00          	nopl   0x0(%rax)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41e4b8:	4c 8b 65 08          	mov    0x8(%rbp),%r12
  41e4bc:	4c 8b 75 00          	mov    0x0(%rbp),%r14
	    ++__new_finish;
  41e4c0:	49 8d 44 3d 40       	lea    0x40(%r13,%rdi,1),%rax
  41e4c5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	  for (; __first != __last; ++__first)
  41e4ca:	4d 39 f4             	cmp    %r14,%r12
  41e4cd:	74 2c                	je     41e4fb <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1ab>
  41e4cf:	90                   	nop
  41e4d0:	49 8b 3e             	mov    (%r14),%rdi
	if (!_M_is_local())
  41e4d3:	49 8d 46 10          	lea    0x10(%r14),%rax
  41e4d7:	48 39 c7             	cmp    %rax,%rdi
  41e4da:	74 12                	je     41e4ee <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x19e>
      { ::operator delete(__p); }
  41e4dc:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e4e3:	ff ff ff 
  41e4e6:	49 89 df             	mov    %rbx,%r15
  41e4e9:	48 01 d8             	add    %rbx,%rax
  41e4ec:	ff d0                	callq  *%rax
  41e4ee:	49 83 c6 20          	add    $0x20,%r14
  41e4f2:	4d 39 e6             	cmp    %r12,%r14
  41e4f5:	75 d9                	jne    41e4d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x180>
  41e4f7:	4c 8b 75 00          	mov    0x0(%rbp),%r14
	if (__p)
  41e4fb:	4d 85 f6             	test   %r14,%r14
  41e4fe:	74 15                	je     41e515 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1c5>
  41e500:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e507:	ff ff ff 
  41e50a:	4c 89 f7             	mov    %r14,%rdi
  41e50d:	49 89 df             	mov    %rbx,%r15
  41e510:	48 01 d8             	add    %rbx,%rax
  41e513:	ff d0                	callq  *%rax
	this->_M_impl._M_finish = __new_finish;
  41e515:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	this->_M_impl._M_start = __new_start;
  41e51a:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  41e51e:	48 89 45 08          	mov    %rax,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41e522:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41e527:	48 89 45 10          	mov    %rax,0x10(%rbp)
      }
  41e52b:	48 83 c4 28          	add    $0x28,%rsp
  41e52f:	5b                   	pop    %rbx
  41e530:	5d                   	pop    %rbp
  41e531:	41 5c                	pop    %r12
  41e533:	41 5d                	pop    %r13
  41e535:	41 5e                	pop    %r14
  41e537:	41 5f                	pop    %r15
  41e539:	c3                   	retq   
  41e53a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41e540:	4c 8b 4e 10          	mov    0x10(%rsi),%r9
  41e544:	4c 8b 56 18          	mov    0x18(%rsi),%r10
  41e548:	4c 89 48 10          	mov    %r9,0x10(%rax)
  41e54c:	4c 89 50 18          	mov    %r10,0x18(%rax)
  41e550:	e9 ca fe ff ff       	jmpq   41e41f <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0xcf>
  41e555:	0f 1f 00             	nopl   (%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41e558:	48 85 c9             	test   %rcx,%rcx
  41e55b:	75 1a                	jne    41e577 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x227>
  41e55d:	48 c7 44 24 08 20 00 	movq   $0x20,0x8(%rsp)
  41e564:	00 00 
  41e566:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  41e56d:	00 00 
  41e56f:	45 31 ed             	xor    %r13d,%r13d
  41e572:	e9 81 fe ff ff       	jmpq   41e3f8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0xa8>
  41e577:	48 c1 e1 05          	shl    $0x5,%rcx
  41e57b:	49 89 cc             	mov    %rcx,%r12
  41e57e:	e9 33 fe ff ff       	jmpq   41e3b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x66>
  41e583:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41e58a:	00 00 00 
  41e58d:	0f 1f 00             	nopl   (%rax)

000000000041e590 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc>:
    basic_command_line_parser<charT>::
  41e590:	41 57                	push   %r15
  41e592:	41 56                	push   %r14
  41e594:	49 bb 70 ca 20 00 00 	movabs $0x20ca70,%r11
  41e59b:	00 00 00 
  41e59e:	41 55                	push   %r13
  41e5a0:	41 54                	push   %r12
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e5a2:	31 c0                	xor    %eax,%eax
    basic_command_line_parser<charT>::
  41e5a4:	55                   	push   %rbp
  41e5a5:	53                   	push   %rbx
  41e5a6:	48 8d 1d e3 ff ff ff 	lea    -0x1d(%rip),%rbx        # 41e590 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc>
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e5ad:	48 63 ce             	movslq %esi,%rcx
        m_desc()
  41e5b0:	4c 8d 62 08          	lea    0x8(%rdx),%r12
    basic_command_line_parser<charT>::
  41e5b4:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  41e5bb:	4c 01 db             	add    %r11,%rbx
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e5be:	85 f6                	test   %esi,%esi
  41e5c0:	0f 94 c0             	sete   %al
    basic_command_line_parser<charT>::
  41e5c3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  41e5c8:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  41e5cf:	00 00 
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e5d1:	48 c1 e0 03          	shl    $0x3,%rax
  41e5d5:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  41e5dc:	00 00 
  41e5de:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
  41e5e5:	00 00 
  41e5e7:	48 8d 04 c8          	lea    (%rax,%rcx,8),%rax
        m_desc()
  41e5eb:	48 01 d0             	add    %rdx,%rax
            for(; i != e; ++i)
  41e5ee:	4c 39 e0             	cmp    %r12,%rax
        m_desc()
  41e5f1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            for(; i != e; ++i)
  41e5f6:	0f 84 f9 02 00 00    	je     41e8f5 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x365>
  41e5fc:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  41e601:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41e606:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
          _M_construct(__beg, __end, _Tag());
  41e60b:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  41e612:	ff ff ff 
	: allocator_type(__a), _M_p(__dat) { }
  41e615:	49 8d 6d 10          	lea    0x10(%r13),%rbp
          _M_construct(__beg, __end, _Tag());
  41e619:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  41e61d:	48 b8 50 33 df ff ff 	movabs $0xffffffffffdf3350,%rax
  41e624:	ff ff ff 
  41e627:	48 01 d8             	add    %rbx,%rax
  41e62a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41e62f:	eb 67                	jmp    41e698 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x108>
  41e631:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_dataplus._M_p = __p; }
  41e638:	48 89 10             	mov    %rdx,(%rax)
	    _M_capacity(__str._M_allocated_capacity);
  41e63b:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  41e642:	00 
      { _M_allocated_capacity = __capacity; }
  41e643:	48 89 50 10          	mov    %rdx,0x10(%rax)
  41e647:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  41e64c:	48 89 ef             	mov    %rbp,%rdi
      { _M_string_length = __length; }
  41e64f:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { _M_dataplus._M_p = __p; }
  41e653:	48 89 6c 24 70       	mov    %rbp,0x70(%rsp)
      { _M_string_length = __length; }
  41e658:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  41e65f:	00 00 
  41e661:	c6 84 24 80 00 00 00 	movb   $0x0,0x80(%rsp)
  41e668:	00 
	    ++this->_M_impl._M_finish;
  41e669:	48 83 c0 20          	add    $0x20,%rax
  41e66d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
	if (!_M_is_local())
  41e672:	48 39 ef             	cmp    %rbp,%rdi
  41e675:	74 12                	je     41e689 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xf9>
  41e677:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e67e:	ff ff ff 
  41e681:	49 89 df             	mov    %rbx,%r15
  41e684:	48 01 d8             	add    %rbx,%rax
  41e687:	ff d0                	callq  *%rax
  41e689:	49 83 c4 08          	add    $0x8,%r12
  41e68d:	4c 39 64 24 10       	cmp    %r12,0x10(%rsp)
  41e692:	0f 84 b0 00 00 00    	je     41e748 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x1b8>
                result.push_back(*i);
  41e698:	49 8b 34 24          	mov    (%r12),%rsi
	: allocator_type(__a), _M_p(__dat) { }
  41e69c:	48 89 6c 24 70       	mov    %rbp,0x70(%rsp)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  41e6a1:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  41e6a8:	48 85 f6             	test   %rsi,%rsi
  41e6ab:	74 23                	je     41e6d0 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x140>
      { return __builtin_strlen(__s); }
  41e6ad:	48 b8 50 e5 dd ff ff 	movabs $0xffffffffffdde550,%rax
  41e6b4:	ff ff ff 
  41e6b7:	48 89 f7             	mov    %rsi,%rdi
  41e6ba:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41e6bf:	49 89 df             	mov    %rbx,%r15
  41e6c2:	48 01 d8             	add    %rbx,%rax
  41e6c5:	ff d0                	callq  *%rax
  41e6c7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41e6cc:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
          _M_construct(__beg, __end, _Tag());
  41e6d0:	4c 89 ef             	mov    %r13,%rdi
  41e6d3:	41 ff d6             	callq  *%r14
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  41e6d6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  41e6db:	48 3b 44 24 60       	cmp    0x60(%rsp),%rax
  41e6e0:	74 46                	je     41e728 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x198>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41e6e2:	48 85 c0             	test   %rax,%rax
  41e6e5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e6ea:	0f 84 79 ff ff ff    	je     41e669 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xd9>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41e6f0:	48 8d 50 10          	lea    0x10(%rax),%rdx
  41e6f4:	48 89 10             	mov    %rdx,(%rax)
  41e6f7:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
	if (__str._M_is_local())
  41e6fc:	48 39 ea             	cmp    %rbp,%rdx
  41e6ff:	0f 85 33 ff ff ff    	jne    41e638 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xa8>
  41e705:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  41e70c:	00 
  41e70d:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  41e714:	00 
  41e715:	48 89 70 10          	mov    %rsi,0x10(%rax)
  41e719:	48 89 78 18          	mov    %rdi,0x18(%rax)
  41e71d:	e9 25 ff ff ff       	jmpq   41e647 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xb7>
  41e722:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  41e728:	4c 89 ee             	mov    %r13,%rsi
  41e72b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41e730:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41e735:	ff d0                	callq  *%rax
  41e737:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e73c:	e9 31 ff ff ff       	jmpq   41e672 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xe2>
  41e741:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41e748:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  41e74d:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  41e752:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41e759:	00 00 
  41e75b:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  41e762:	00 00 
  41e764:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  41e76b:	00 00 
  41e76d:	48 29 f0             	sub    %rsi,%rax
  41e770:	48 c1 f8 05          	sar    $0x5,%rax

        template<class T>
        std::vector<std::string> to_internal(const std::vector<T>& s)
        {
            std::vector<std::string> result;
            for (unsigned i = 0; i < s.size(); ++i)
  41e774:	48 85 c0             	test   %rax,%rax
  41e777:	0f 84 11 02 00 00    	je     41e98e <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3fe>
  41e77d:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
                result.push_back(to_internal(s[i]));            
  41e782:	49 be 90 e7 dd ff ff 	movabs $0xffffffffffdde790,%r14
  41e789:	ff ff ff 
            for (unsigned i = 0; i < s.size(); ++i)
  41e78c:	31 d2                	xor    %edx,%edx
  41e78e:	45 31 e4             	xor    %r12d,%r12d
                result.push_back(to_internal(s[i]));            
  41e791:	49 01 de             	add    %rbx,%r14
  41e794:	49 8d 6d 10          	lea    0x10(%r13),%rbp
  41e798:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41e79d:	48 b8 50 33 df ff ff 	movabs $0xffffffffffdf3350,%rax
  41e7a4:	ff ff ff 
  41e7a7:	48 01 d8             	add    %rbx,%rax
  41e7aa:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41e7af:	eb 76                	jmp    41e827 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x297>
  41e7b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_dataplus._M_p = __p; }
  41e7b8:	48 89 10             	mov    %rdx,(%rax)
	    _M_capacity(__str._M_allocated_capacity);
  41e7bb:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  41e7c2:	00 
      { _M_allocated_capacity = __capacity; }
  41e7c3:	48 89 50 10          	mov    %rdx,0x10(%rax)
  41e7c7:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
      { __c1 = __c2; }
  41e7cc:	48 89 ef             	mov    %rbp,%rdi
      { _M_string_length = __length; }
  41e7cf:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { _M_dataplus._M_p = __p; }
  41e7d3:	48 89 6c 24 70       	mov    %rbp,0x70(%rsp)
      { _M_string_length = __length; }
  41e7d8:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  41e7df:	00 00 
  41e7e1:	c6 84 24 80 00 00 00 	movb   $0x0,0x80(%rsp)
  41e7e8:	00 
	    ++this->_M_impl._M_finish;
  41e7e9:	48 83 c0 20          	add    $0x20,%rax
  41e7ed:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
	if (!_M_is_local())
  41e7f2:	48 39 ef             	cmp    %rbp,%rdi
  41e7f5:	74 12                	je     41e809 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x279>
      { ::operator delete(__p); }
  41e7f7:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e7fe:	ff ff ff 
  41e801:	49 89 df             	mov    %rbx,%r15
  41e804:	48 01 d8             	add    %rbx,%rax
  41e807:	ff d0                	callq  *%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41e809:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  41e80e:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
            for (unsigned i = 0; i < s.size(); ++i)
  41e813:	41 8d 54 24 01       	lea    0x1(%r12),%edx
  41e818:	49 89 d4             	mov    %rdx,%r12
  41e81b:	48 29 f0             	sub    %rsi,%rax
  41e81e:	48 c1 f8 05          	sar    $0x5,%rax
  41e822:	48 39 c2             	cmp    %rax,%rdx
  41e825:	73 79                	jae    41e8a0 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x310>
      { return *(this->_M_impl._M_start + __n); }
  41e827:	48 c1 e2 05          	shl    $0x5,%rdx
                result.push_back(to_internal(s[i]));            
  41e82b:	4c 89 ef             	mov    %r13,%rdi
  41e82e:	49 89 df             	mov    %rbx,%r15
  41e831:	48 01 d6             	add    %rdx,%rsi
  41e834:	41 ff d6             	callq  *%r14
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  41e837:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41e83c:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  41e841:	74 3d                	je     41e880 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x2f0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41e843:	48 85 c0             	test   %rax,%rax
  41e846:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e84b:	74 9c                	je     41e7e9 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x259>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41e84d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  41e851:	48 89 10             	mov    %rdx,(%rax)
  41e854:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
	if (__str._M_is_local())
  41e859:	48 39 ea             	cmp    %rbp,%rdx
  41e85c:	0f 85 56 ff ff ff    	jne    41e7b8 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x228>
  41e862:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  41e869:	00 
  41e86a:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  41e871:	00 
  41e872:	48 89 70 10          	mov    %rsi,0x10(%rax)
  41e876:	48 89 78 18          	mov    %rdi,0x18(%rax)
  41e87a:	e9 48 ff ff ff       	jmpq   41e7c7 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x237>
  41e87f:	90                   	nop
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  41e880:	4c 89 ee             	mov    %r13,%rsi
  41e883:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41e888:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41e88d:	ff d0                	callq  *%rax
  41e88f:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e894:	e9 59 ff ff ff       	jmpq   41e7f2 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x262>
  41e899:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41e8a0:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  41e8a5:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
        m_desc()
  41e8aa:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  41e8b1:	ff ff ff 
  41e8b4:	48 89 ee             	mov    %rbp,%rsi
  41e8b7:	4c 89 f7             	mov    %r14,%rdi
  41e8ba:	49 89 df             	mov    %rbx,%r15
  41e8bd:	48 01 d8             	add    %rbx,%rax
  41e8c0:	ff d0                	callq  *%rax
  41e8c2:	48 b8 a0 b8 de ff ff 	movabs $0xffffffffffdeb8a0,%rax
  41e8c9:	ff ff ff 
  41e8cc:	48 89 ef             	mov    %rbp,%rdi
  41e8cf:	48 01 c3             	add    %rax,%rbx
  41e8d2:	ff d3                	callq  *%rbx
  41e8d4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41e8d9:	ff d3                	callq  *%rbx
  41e8db:	49 c7 46 70 00 00 00 	movq   $0x0,0x70(%r14)
  41e8e2:	00 
    {}
  41e8e3:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  41e8ea:	5b                   	pop    %rbx
  41e8eb:	5d                   	pop    %rbp
  41e8ec:	41 5c                	pop    %r12
  41e8ee:	41 5d                	pop    %r13
  41e8f0:	41 5e                	pop    %r14
  41e8f2:	41 5f                	pop    %r15
  41e8f4:	c3                   	retq   
  41e8f5:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  41e8fa:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41e901:	00 00 
  41e903:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  41e90a:	00 00 
  41e90c:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  41e913:	00 00 
  41e915:	49 89 fe             	mov    %rdi,%r14
  41e918:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41e91d:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  41e922:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41e927:	48 89 c5             	mov    %rax,%rbp
  41e92a:	e9 7b ff ff ff       	jmpq   41e8aa <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x31a>
  41e92f:	48 89 c5             	mov    %rax,%rbp
        m_desc()
  41e932:	49 bc a0 b8 de ff ff 	movabs $0xffffffffffdeb8a0,%r12
  41e939:	ff ff ff 
  41e93c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41e941:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  41e945:	ff d0                	callq  *%rax
  41e947:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41e94c:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  41e950:	ff d0                	callq  *%rax
  41e952:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41e959:	ff ff ff 
  41e95c:	48 89 ef             	mov    %rbp,%rdi
  41e95f:	49 89 df             	mov    %rbx,%r15
  41e962:	48 01 d8             	add    %rbx,%rax
  41e965:	ff d0                	callq  *%rax
  41e967:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
  41e96c:	49 83 c5 10          	add    $0x10,%r13
  41e970:	48 89 c5             	mov    %rax,%rbp
  41e973:	4c 39 ef             	cmp    %r13,%rdi
  41e976:	74 ba                	je     41e932 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3a2>
      { ::operator delete(__p); }
  41e978:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e97f:	ff ff ff 
  41e982:	49 89 df             	mov    %rbx,%r15
  41e985:	48 01 d8             	add    %rbx,%rax
  41e988:	ff d0                	callq  *%rax
  41e98a:	eb a6                	jmp    41e932 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3a2>
  41e98c:	eb a1                	jmp    41e92f <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x39f>
  41e98e:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  41e993:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
  41e998:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41e99d:	48 89 c5             	mov    %rax,%rbp
  41e9a0:	e9 05 ff ff ff       	jmpq   41e8aa <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x31a>
  41e9a5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e9aa:	49 83 c5 10          	add    $0x10,%r13
  41e9ae:	48 89 c5             	mov    %rax,%rbp
  41e9b1:	4c 39 ef             	cmp    %r13,%rdi
  41e9b4:	74 12                	je     41e9c8 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x438>
  41e9b6:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41e9bd:	ff ff ff 
  41e9c0:	49 89 df             	mov    %rbx,%r15
  41e9c3:	48 01 d8             	add    %rbx,%rax
  41e9c6:	ff d0                	callq  *%rax
  41e9c8:	48 b8 a0 b8 de ff ff 	movabs $0xffffffffffdeb8a0,%rax
  41e9cf:	ff ff ff 
  41e9d2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41e9d7:	48 01 d8             	add    %rbx,%rax
  41e9da:	e9 71 ff ff ff       	jmpq   41e950 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3c0>
  41e9df:	48 89 c5             	mov    %rax,%rbp
  41e9e2:	eb e4                	jmp    41e9c8 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x438>
  41e9e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41e9eb:	00 00 00 
  41e9ee:	66 90                	xchg   %ax,%ax

000000000041e9f0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
  41e9f0:	41 57                	push   %r15
  41e9f2:	41 55                	push   %r13
  41e9f4:	49 bb 10 c6 20 00 00 	movabs $0x20c610,%r11
  41e9fb:	00 00 00 
  41e9fe:	41 54                	push   %r12
  41ea00:	55                   	push   %rbp
  41ea01:	49 89 f4             	mov    %rsi,%r12
  41ea04:	53                   	push   %rbx
  41ea05:	48 8d 1d e4 ff ff ff 	lea    -0x1c(%rip),%rbx        # 41e9f0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
      { return __builtin_strlen(__s); }
  41ea0c:	48 b8 50 e5 dd ff ff 	movabs $0xffffffffffdde550,%rax
  41ea13:	ff ff ff 
  41ea16:	48 89 fd             	mov    %rdi,%rbp
  41ea19:	49 89 d5             	mov    %rdx,%r13
  41ea1c:	48 89 d7             	mov    %rdx,%rdi
  41ea1f:	4c 01 db             	add    %r11,%rbx
  41ea22:	48 01 d8             	add    %rbx,%rax
  41ea25:	49 89 df             	mov    %rbx,%r15
  41ea28:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41ea2a:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
  41ea31:	ff ff 7f 
  41ea34:	49 2b 4c 24 08       	sub    0x8(%r12),%rcx
  41ea39:	48 39 c8             	cmp    %rcx,%rax
  41ea3c:	77 74                	ja     41eab2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_+0xc2>
	return _M_append(__s, __n);
  41ea3e:	48 89 c2             	mov    %rax,%rdx
  41ea41:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41ea48:	ff ff ff 
  41ea4b:	4c 89 ee             	mov    %r13,%rsi
  41ea4e:	48 01 d8             	add    %rbx,%rax
  41ea51:	4c 89 e7             	mov    %r12,%rdi
  41ea54:	49 89 df             	mov    %rbx,%r15
  41ea57:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ea59:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  41ea5d:	48 89 55 00          	mov    %rdx,0x0(%rbp)
  41ea61:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ea64:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41ea68:	48 39 d1             	cmp    %rdx,%rcx
  41ea6b:	74 33                	je     41eaa0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_+0xb0>
      { _M_dataplus._M_p = __p; }
  41ea6d:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
	    _M_capacity(__str._M_allocated_capacity);
  41ea71:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41ea75:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
  41ea79:	48 8b 48 08          	mov    0x8(%rax),%rcx
      { _M_string_length = __length; }
  41ea7d:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
      { _M_dataplus._M_p = __p; }
  41ea81:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41ea84:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41ea8b:	00 
      { __c1 = __c2; }
  41ea8c:	c6 40 10 00          	movb   $0x0,0x10(%rax)
    { return std::move(__lhs.append(__rhs)); }
  41ea90:	48 89 e8             	mov    %rbp,%rax
  41ea93:	5b                   	pop    %rbx
  41ea94:	5d                   	pop    %rbp
  41ea95:	41 5c                	pop    %r12
  41ea97:	41 5d                	pop    %r13
  41ea99:	41 5f                	pop    %r15
  41ea9b:	c3                   	retq   
  41ea9c:	0f 1f 40 00          	nopl   0x0(%rax)
  41eaa0:	48 8b 48 10          	mov    0x10(%rax),%rcx
  41eaa4:	48 8b 58 18          	mov    0x18(%rax),%rbx
  41eaa8:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
  41eaac:	48 89 5d 18          	mov    %rbx,0x18(%rbp)
  41eab0:	eb c7                	jmp    41ea79 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_+0x89>
	  __throw_length_error(__N(__s));
  41eab2:	48 b8 e1 89 df ff ff 	movabs $0xffffffffffdf89e1,%rax
  41eab9:	ff ff ff 
  41eabc:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41eac0:	48 b8 a0 e5 dd ff ff 	movabs $0xffffffffffdde5a0,%rax
  41eac7:	ff ff ff 
  41eaca:	48 01 d8             	add    %rbx,%rax
  41eacd:	ff d0                	callq  *%rax
  41eacf:	90                   	nop

000000000041ead0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
  41ead0:	41 57                	push   %r15
  41ead2:	41 56                	push   %r14
  41ead4:	49 bb 30 c5 20 00 00 	movabs $0x20c530,%r11
  41eadb:	00 00 00 
  41eade:	41 55                	push   %r13
  41eae0:	41 54                	push   %r12
      { return __builtin_strlen(__s); }
  41eae2:	48 b8 50 e5 dd ff ff 	movabs $0xffffffffffdde550,%rax
  41eae9:	ff ff ff 
  41eaec:	55                   	push   %rbp
  41eaed:	53                   	push   %rbx
  41eaee:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 41ead0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
  41eaf5:	48 89 fd             	mov    %rdi,%rbp
  41eaf8:	49 89 f6             	mov    %rsi,%r14
  41eafb:	48 89 f7             	mov    %rsi,%rdi
  41eafe:	4c 01 db             	add    %r11,%rbx
  41eb01:	48 83 ec 18          	sub    $0x18,%rsp
  41eb05:	49 89 d5             	mov    %rdx,%r13
  41eb08:	49 89 df             	mov    %rbx,%r15
  41eb0b:	48 01 d8             	add    %rbx,%rax
  41eb0e:	ff d0                	callq  *%rax
  41eb10:	49 89 c4             	mov    %rax,%r12
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41eb13:	48 8d 45 10          	lea    0x10(%rbp),%rax
      { _M_string_length = __length; }
  41eb17:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
  41eb1e:	00 
      { __c1 = __c2; }
  41eb1f:	c6 45 10 00          	movb   $0x0,0x10(%rbp)
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
  41eb23:	4c 89 e6             	mov    %r12,%rsi
  41eb26:	49 03 75 08          	add    0x8(%r13),%rsi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41eb2a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	: allocator_type(__a), _M_p(__dat) { }
  41eb2f:	48 89 45 00          	mov    %rax,0x0(%rbp)
  41eb33:	48 b8 c0 e9 dd ff ff 	movabs $0xffffffffffdde9c0,%rax
  41eb3a:	ff ff ff 
  41eb3d:	48 89 ef             	mov    %rbp,%rdi
  41eb40:	48 01 d8             	add    %rbx,%rax
  41eb43:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41eb45:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  41eb4c:	ff ff 7f 
  41eb4f:	48 2b 45 08          	sub    0x8(%rbp),%rax
  41eb53:	49 39 c4             	cmp    %rax,%r12
  41eb56:	77 3f                	ja     41eb97 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_+0xc7>
	return _M_append(__s, __n);
  41eb58:	4c 89 e2             	mov    %r12,%rdx
  41eb5b:	49 bc d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%r12
  41eb62:	ff ff ff 
  41eb65:	4c 89 f6             	mov    %r14,%rsi
  41eb68:	48 89 ef             	mov    %rbp,%rdi
  41eb6b:	49 89 df             	mov    %rbx,%r15
  41eb6e:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  41eb72:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41eb74:	49 8b 55 08          	mov    0x8(%r13),%rdx
  41eb78:	49 8b 75 00          	mov    0x0(%r13),%rsi
  41eb7c:	48 89 ef             	mov    %rbp,%rdi
  41eb7f:	49 01 dc             	add    %rbx,%r12
  41eb82:	41 ff d4             	callq  *%r12
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }
  41eb85:	48 83 c4 18          	add    $0x18,%rsp
  41eb89:	48 89 e8             	mov    %rbp,%rax
  41eb8c:	5b                   	pop    %rbx
  41eb8d:	5d                   	pop    %rbp
  41eb8e:	41 5c                	pop    %r12
  41eb90:	41 5d                	pop    %r13
  41eb92:	41 5e                	pop    %r14
  41eb94:	41 5f                	pop    %r15
  41eb96:	c3                   	retq   
	  __throw_length_error(__N(__s));
  41eb97:	48 b8 e1 89 df ff ff 	movabs $0xffffffffffdf89e1,%rax
  41eb9e:	ff ff ff 
  41eba1:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41eba5:	48 b8 a0 e5 dd ff ff 	movabs $0xffffffffffdde5a0,%rax
  41ebac:	ff ff ff 
  41ebaf:	48 01 d8             	add    %rbx,%rax
  41ebb2:	ff d0                	callq  *%rax
  41ebb4:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (!_M_is_local())
  41ebb8:	48 39 7c 24 08       	cmp    %rdi,0x8(%rsp)
  41ebbd:	49 89 c4             	mov    %rax,%r12
  41ebc0:	74 12                	je     41ebd4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_+0x104>
  41ebc2:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  41ebc9:	ff ff ff 
  41ebcc:	49 89 df             	mov    %rbx,%r15
  41ebcf:	48 01 da             	add    %rbx,%rdx
  41ebd2:	ff d2                	callq  *%rdx
  41ebd4:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41ebdb:	ff ff ff 
  41ebde:	4c 89 e7             	mov    %r12,%rdi
  41ebe1:	49 89 df             	mov    %rbx,%r15
  41ebe4:	48 01 d8             	add    %rbx,%rax
  41ebe7:	ff d0                	callq  *%rax
  41ebe9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041ebf0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev>:
    typed_value<T, charT>::name() const
  41ebf0:	41 57                	push   %r15
  41ebf2:	41 56                	push   %r14
  41ebf4:	49 bb 10 c4 20 00 00 	movabs $0x20c410,%r11
  41ebfb:	00 00 00 
  41ebfe:	41 55                	push   %r13
  41ec00:	41 54                	push   %r12
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41ec02:	48 8d 56 18          	lea    0x18(%rsi),%rdx
    typed_value<T, charT>::name() const
  41ec06:	55                   	push   %rbp
  41ec07:	53                   	push   %rbx
  41ec08:	48 8d 1d e1 ff ff ff 	lea    -0x1f(%rip),%rbx        # 41ebf0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev>
  41ec0f:	49 89 fc             	mov    %rdi,%r12
  41ec12:	48 89 f5             	mov    %rsi,%rbp
  41ec15:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  41ec1c:	4c 01 db             	add    %r11,%rbx
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41ec1f:	48 83 7e 20 00       	cmpq   $0x0,0x20(%rsi)
  41ec24:	75 0e                	jne    41ec34 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x44>
  41ec26:	48 b8 98 ff ff ff ff 	movabs $0xffffffffffffff98,%rax
  41ec2d:	ff ff ff 
  41ec30:	48 8b 14 03          	mov    (%rbx,%rax,1),%rdx
        if (!m_implicit_value.empty() && !m_implicit_value_as_text.empty()) {
  41ec34:	48 83 7d 60 00       	cmpq   $0x0,0x60(%rbp)
  41ec39:	0f 84 61 02 00 00    	je     41eea0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x2b0>
  41ec3f:	48 83 7d 70 00       	cmpq   $0x0,0x70(%rbp)
  41ec44:	0f 84 56 02 00 00    	je     41eea0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x2b0>
            std::string msg = "[=" + var + "(=" + m_implicit_value_as_text + ")]";
  41ec4a:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  41ec4f:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41ec54:	49 89 c7             	mov    %rax,%r15
  41ec57:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41ec5c:	48 b8 fd 89 df ff ff 	movabs $0xffffffffffdf89fd,%rax
  41ec63:	ff ff ff 
  41ec66:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41ec6a:	48 b8 d0 3a df ff ff 	movabs $0xffffffffffdf3ad0,%rax
  41ec71:	ff ff ff 
  41ec74:	4c 89 ff             	mov    %r15,%rdi
  41ec77:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41ec7c:	48 01 d8             	add    %rbx,%rax
  41ec7f:	ff d0                	callq  *%rax
  41ec81:	48 b8 fa 89 df ff ff 	movabs $0xffffffffffdf89fa,%rax
  41ec88:	ff ff ff 
  41ec8b:	4c 89 fe             	mov    %r15,%rsi
  41ec8e:	4c 89 ef             	mov    %r13,%rdi
  41ec91:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41ec95:	48 b8 f0 39 df ff ff 	movabs $0xffffffffffdf39f0,%rax
  41ec9c:	ff ff ff 
  41ec9f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41eca4:	48 01 d8             	add    %rbx,%rax
  41eca7:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41eca9:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41ecb0:	ff ff ff 
  41ecb3:	48 8b 55 70          	mov    0x70(%rbp),%rdx
  41ecb7:	48 8b 75 68          	mov    0x68(%rbp),%rsi
  41ecbb:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  41ecc0:	4c 89 ef             	mov    %r13,%rdi
  41ecc3:	49 89 df             	mov    %rbx,%r15
  41ecc6:	48 01 d8             	add    %rbx,%rax
  41ecc9:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41eccb:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41ecd2:	00 
  41ecd3:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41ecd7:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41ecde:	00 
  41ecdf:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ece2:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41ece6:	48 39 d1             	cmp    %rdx,%rcx
  41ece9:	0f 84 89 03 00 00    	je     41f078 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x488>
      { _M_dataplus._M_p = __p; }
  41ecef:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41ecf6:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41ecf7:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41ecfb:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41ed02:	00 
  41ed03:	48 8b 48 08          	mov    0x8(%rax),%rcx
  41ed07:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  41ed0c:	4c 89 f6             	mov    %r14,%rsi
  41ed0f:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
      { _M_string_length = __length; }
  41ed14:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41ed1b:	00 
      { _M_dataplus._M_p = __p; }
  41ed1c:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41ed1f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41ed26:	00 
  41ed27:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41ed2b:	48 b8 f6 89 df ff ff 	movabs $0xffffffffffdf89f6,%rax
  41ed32:	ff ff ff 
  41ed35:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41ed39:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41ed3e:	48 01 d8             	add    %rbx,%rax
  41ed41:	ff d0                	callq  *%rax
  41ed43:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41ed4a:	00 
	if (!_M_is_local())
  41ed4b:	49 8d 46 10          	lea    0x10(%r14),%rax
  41ed4f:	48 39 c7             	cmp    %rax,%rdi
  41ed52:	74 12                	je     41ed66 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x176>
  41ed54:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41ed5b:	ff ff ff 
  41ed5e:	49 89 df             	mov    %rbx,%r15
  41ed61:	48 01 d8             	add    %rbx,%rax
  41ed64:	ff d0                	callq  *%rax
  41ed66:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41ed6b:	49 8d 45 10          	lea    0x10(%r13),%rax
  41ed6f:	48 39 c7             	cmp    %rax,%rdi
  41ed72:	74 12                	je     41ed86 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x196>
  41ed74:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41ed7b:	ff ff ff 
  41ed7e:	49 89 df             	mov    %rbx,%r15
  41ed81:	48 01 d8             	add    %rbx,%rax
  41ed84:	ff d0                	callq  *%rax
  41ed86:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41ed8b:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41ed90:	48 83 c0 10          	add    $0x10,%rax
  41ed94:	48 39 c7             	cmp    %rax,%rdi
  41ed97:	74 12                	je     41edab <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x1bb>
  41ed99:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41eda0:	ff ff ff 
  41eda3:	49 89 df             	mov    %rbx,%r15
  41eda6:	48 01 d8             	add    %rbx,%rax
  41eda9:	ff d0                	callq  *%rax
            if (!m_default_value.empty() && !m_default_value_as_text.empty())
  41edab:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41edb0:	0f 84 aa 00 00 00    	je     41ee60 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x270>
  41edb6:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41edbb:	0f 84 9f 00 00 00    	je     41ee60 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x270>
                msg += " (=" + m_default_value_as_text + ")";
  41edc1:	48 b8 f9 89 df ff ff 	movabs $0xffffffffffdf89f9,%rax
  41edc8:	ff ff ff 
  41edcb:	48 8d 55 40          	lea    0x40(%rbp),%rdx
  41edcf:	4c 89 ef             	mov    %r13,%rdi
  41edd2:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41edd6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41eddb:	48 01 d8             	add    %rbx,%rax
  41edde:	ff d0                	callq  *%rax
  41ede0:	48 b8 f7 7e df ff ff 	movabs $0xffffffffffdf7ef7,%rax
  41ede7:	ff ff ff 
  41edea:	4c 89 ee             	mov    %r13,%rsi
  41eded:	4c 89 f7             	mov    %r14,%rdi
  41edf0:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41edf4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41edf9:	48 01 d8             	add    %rbx,%rax
  41edfc:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41edfe:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41ee03:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  41ee0a:	00 
  41ee0b:	49 89 df             	mov    %rbx,%r15
  41ee0e:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  41ee15:	00 
  41ee16:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41ee1b:	48 01 d8             	add    %rbx,%rax
  41ee1e:	ff d0                	callq  *%rax
  41ee20:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41ee27:	00 
	if (!_M_is_local())
  41ee28:	49 83 c6 10          	add    $0x10,%r14
  41ee2c:	4c 39 f7             	cmp    %r14,%rdi
  41ee2f:	74 0f                	je     41ee40 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x250>
  41ee31:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41ee38:	ff ff ff 
  41ee3b:	48 01 d8             	add    %rbx,%rax
  41ee3e:	ff d0                	callq  *%rax
  41ee40:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41ee45:	49 83 c5 10          	add    $0x10,%r13
  41ee49:	4c 39 ef             	cmp    %r13,%rdi
  41ee4c:	74 12                	je     41ee60 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x270>
  41ee4e:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41ee55:	ff ff ff 
  41ee58:	49 89 df             	mov    %rbx,%r15
  41ee5b:	48 01 d8             	add    %rbx,%rax
  41ee5e:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ee60:	49 8d 44 24 10       	lea    0x10(%r12),%rax
	if (__str._M_is_local())
  41ee65:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ee6a:	49 89 04 24          	mov    %rax,(%r12)
  41ee6e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
	if (__str._M_is_local())
  41ee73:	48 83 c2 10          	add    $0x10,%rdx
  41ee77:	48 39 d0             	cmp    %rdx,%rax
  41ee7a:	0f 84 b8 01 00 00    	je     41f038 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x448>
      { _M_dataplus._M_p = __p; }
  41ee80:	49 89 04 24          	mov    %rax,(%r12)
      { _M_allocated_capacity = __capacity; }
  41ee84:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41ee89:	49 89 44 24 10       	mov    %rax,0x10(%r12)
      { _M_string_length = __length; }
  41ee8e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41ee93:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  41ee98:	e9 83 01 00 00       	jmpq   41f020 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x430>
  41ee9d:	0f 1f 00             	nopl   (%rax)
        else if (!m_default_value.empty() && !m_default_value_as_text.empty()) {
  41eea0:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41eea5:	0f 84 4d 01 00 00    	je     41eff8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x408>
  41eeab:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41eeb0:	0f 84 42 01 00 00    	je     41eff8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x408>
	: allocator_type(__a), _M_p(__dat) { }
  41eeb6:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41eebb:	48 8b 32             	mov    (%rdx),%rsi
  41eebe:	49 8d 45 10          	lea    0x10(%r13),%rax
          _M_construct(__beg, __end, _Tag());
  41eec2:	4c 89 ef             	mov    %r13,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41eec5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41eeca:	48 89 f0             	mov    %rsi,%rax
  41eecd:	48 03 42 08          	add    0x8(%rdx),%rax
  41eed1:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41eed4:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  41eedb:	ff ff ff 
  41eede:	48 01 d8             	add    %rbx,%rax
  41eee1:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41eee3:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  41eeea:	ff ff 7f 
  41eeed:	48 2b 44 24 78       	sub    0x78(%rsp),%rax
  41eef2:	48 83 f8 02          	cmp    $0x2,%rax
  41eef6:	0f 86 99 01 00 00    	jbe    41f095 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4a5>
	return _M_append(__s, __n);
  41eefc:	48 b8 f9 89 df ff ff 	movabs $0xffffffffffdf89f9,%rax
  41ef03:	ff ff ff 
  41ef06:	ba 03 00 00 00       	mov    $0x3,%edx
  41ef0b:	4c 89 ef             	mov    %r13,%rdi
  41ef0e:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41ef12:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41ef19:	ff ff ff 
  41ef1c:	49 89 df             	mov    %rbx,%r15
  41ef1f:	49 89 c6             	mov    %rax,%r14
  41ef22:	48 01 d8             	add    %rbx,%rax
  41ef25:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41ef27:	4c 89 f0             	mov    %r14,%rax
  41ef2a:	48 8b 55 48          	mov    0x48(%rbp),%rdx
  41ef2e:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  41ef32:	4c 89 ef             	mov    %r13,%rdi
  41ef35:	48 01 d8             	add    %rbx,%rax
  41ef38:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41ef3a:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41ef41:	00 
  41ef42:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41ef46:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41ef4d:	00 
  41ef4e:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ef51:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41ef55:	48 39 d1             	cmp    %rdx,%rcx
  41ef58:	0f 84 fa 00 00 00    	je     41f058 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x468>
      { _M_dataplus._M_p = __p; }
  41ef5e:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41ef65:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41ef66:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41ef6a:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41ef71:	00 
  41ef72:	48 8b 48 08          	mov    0x8(%rax),%rcx
            return var + " (=" + m_default_value_as_text + ")";
  41ef76:	4c 89 f6             	mov    %r14,%rsi
  41ef79:	4c 89 e7             	mov    %r12,%rdi
      { _M_string_length = __length; }
  41ef7c:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41ef83:	00 
      { _M_dataplus._M_p = __p; }
  41ef84:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41ef87:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41ef8e:	00 
  41ef8f:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41ef93:	48 b8 f7 7e df ff ff 	movabs $0xffffffffffdf7ef7,%rax
  41ef9a:	ff ff ff 
  41ef9d:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41efa1:	48 b8 f0 39 df ff ff 	movabs $0xffffffffffdf39f0,%rax
  41efa8:	ff ff ff 
  41efab:	48 01 d8             	add    %rbx,%rax
  41efae:	ff d0                	callq  *%rax
  41efb0:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41efb7:	00 
	if (!_M_is_local())
  41efb8:	49 83 c6 10          	add    $0x10,%r14
  41efbc:	4c 39 f7             	cmp    %r14,%rdi
  41efbf:	74 12                	je     41efd3 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x3e3>
  41efc1:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41efc8:	ff ff ff 
  41efcb:	49 89 df             	mov    %rbx,%r15
  41efce:	48 01 d8             	add    %rbx,%rax
  41efd1:	ff d0                	callq  *%rax
  41efd3:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41efd8:	49 83 c5 10          	add    $0x10,%r13
  41efdc:	4c 39 ef             	cmp    %r13,%rdi
  41efdf:	74 3f                	je     41f020 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x430>
  41efe1:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41efe8:	ff ff ff 
  41efeb:	49 89 df             	mov    %rbx,%r15
  41efee:	48 01 d8             	add    %rbx,%rax
  41eff1:	ff d0                	callq  *%rax
  41eff3:	eb 2b                	jmp    41f020 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x430>
  41eff5:	0f 1f 00             	nopl   (%rax)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41eff8:	49 8d 44 24 10       	lea    0x10(%r12),%rax
          _M_construct(__beg, __end, _Tag());
  41effd:	4c 89 e7             	mov    %r12,%rdi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f000:	49 89 04 24          	mov    %rax,(%r12)
  41f004:	48 8b 32             	mov    (%rdx),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41f007:	48 89 f0             	mov    %rsi,%rax
  41f00a:	48 03 42 08          	add    0x8(%rdx),%rax
  41f00e:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41f011:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  41f018:	ff ff ff 
  41f01b:	48 01 d8             	add    %rbx,%rax
  41f01e:	ff d0                	callq  *%rax
    }
  41f020:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  41f027:	4c 89 e0             	mov    %r12,%rax
  41f02a:	5b                   	pop    %rbx
  41f02b:	5d                   	pop    %rbp
  41f02c:	41 5c                	pop    %r12
  41f02e:	41 5d                	pop    %r13
  41f030:	41 5e                	pop    %r14
  41f032:	41 5f                	pop    %r15
  41f034:	c3                   	retq   
  41f035:	0f 1f 00             	nopl   (%rax)
  41f038:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41f03d:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  41f042:	49 89 44 24 10       	mov    %rax,0x10(%r12)
  41f047:	49 89 54 24 18       	mov    %rdx,0x18(%r12)
  41f04c:	e9 3d fe ff ff       	jmpq   41ee8e <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x29e>
  41f051:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41f058:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f05c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f060:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f067:	00 
  41f068:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f06f:	00 
  41f070:	e9 fd fe ff ff       	jmpq   41ef72 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x382>
  41f075:	0f 1f 00             	nopl   (%rax)
  41f078:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f07c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f080:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f087:	00 
  41f088:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f08f:	00 
  41f090:	e9 6e fc ff ff       	jmpq   41ed03 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x113>
	  __throw_length_error(__N(__s));
  41f095:	48 b8 e1 89 df ff ff 	movabs $0xffffffffffdf89e1,%rax
  41f09c:	ff ff ff 
  41f09f:	49 89 df             	mov    %rbx,%r15
  41f0a2:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41f0a6:	48 b8 a0 e5 dd ff ff 	movabs $0xffffffffffdde5a0,%rax
  41f0ad:	ff ff ff 
  41f0b0:	48 01 d8             	add    %rbx,%rax
  41f0b3:	ff d0                	callq  *%rax
  41f0b5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
  41f0ba:	49 83 c5 10          	add    $0x10,%r13
  41f0be:	48 89 c5             	mov    %rax,%rbp
  41f0c1:	4c 39 ef             	cmp    %r13,%rdi
  41f0c4:	74 12                	je     41f0d8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f0c6:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  41f0cd:	ff ff ff 
  41f0d0:	49 89 df             	mov    %rbx,%r15
  41f0d3:	48 01 da             	add    %rbx,%rdx
  41f0d6:	ff d2                	callq  *%rdx
  41f0d8:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41f0df:	ff ff ff 
  41f0e2:	48 89 ef             	mov    %rbp,%rdi
  41f0e5:	49 89 df             	mov    %rbx,%r15
  41f0e8:	48 01 d8             	add    %rbx,%rax
  41f0eb:	ff d0                	callq  *%rax
  41f0ed:	48 89 c5             	mov    %rax,%rbp
  41f0f0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f0f5:	49 83 c5 10          	add    $0x10,%r13
  41f0f9:	4c 39 ef             	cmp    %r13,%rdi
  41f0fc:	74 12                	je     41f110 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x520>
  41f0fe:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f105:	ff ff ff 
  41f108:	49 89 df             	mov    %rbx,%r15
  41f10b:	48 01 d8             	add    %rbx,%rax
  41f10e:	ff d0                	callq  *%rax
  41f110:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41f115:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41f11a:	48 83 c0 10          	add    $0x10,%rax
  41f11e:	48 39 c7             	cmp    %rax,%rdi
  41f121:	74 b5                	je     41f0d8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f123:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f12a:	ff ff ff 
  41f12d:	49 89 df             	mov    %rbx,%r15
  41f130:	48 01 d8             	add    %rbx,%rax
  41f133:	ff d0                	callq  *%rax
  41f135:	eb a1                	jmp    41f0d8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f137:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f13e:	00 
  41f13f:	49 83 c6 10          	add    $0x10,%r14
  41f143:	48 89 c5             	mov    %rax,%rbp
  41f146:	4c 39 f7             	cmp    %r14,%rdi
  41f149:	74 12                	je     41f15d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x56d>
  41f14b:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f152:	ff ff ff 
  41f155:	49 89 df             	mov    %rbx,%r15
  41f158:	48 01 d8             	add    %rbx,%rax
  41f15b:	ff d0                	callq  *%rax
  41f15d:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f162:	49 83 c5 10          	add    $0x10,%r13
  41f166:	4c 39 ef             	cmp    %r13,%rdi
  41f169:	74 12                	je     41f17d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x58d>
  41f16b:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f172:	ff ff ff 
  41f175:	49 89 df             	mov    %rbx,%r15
  41f178:	48 01 d8             	add    %rbx,%rax
  41f17b:	ff d0                	callq  *%rax
  41f17d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41f182:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41f187:	48 83 c0 10          	add    $0x10,%rax
  41f18b:	48 39 c7             	cmp    %rax,%rdi
  41f18e:	75 93                	jne    41f123 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x533>
  41f190:	e9 43 ff ff ff       	jmpq   41f0d8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f195:	48 89 c5             	mov    %rax,%rbp
  41f198:	eb c3                	jmp    41f15d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x56d>
  41f19a:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f1a1:	00 
  41f1a2:	49 83 c6 10          	add    $0x10,%r14
  41f1a6:	48 89 c5             	mov    %rax,%rbp
  41f1a9:	4c 39 f7             	cmp    %r14,%rdi
  41f1ac:	74 12                	je     41f1c0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x5d0>
  41f1ae:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f1b5:	ff ff ff 
  41f1b8:	49 89 df             	mov    %rbx,%r15
  41f1bb:	48 01 d8             	add    %rbx,%rax
  41f1be:	ff d0                	callq  *%rax
  41f1c0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f1c5:	49 83 c5 10          	add    $0x10,%r13
  41f1c9:	4c 39 ef             	cmp    %r13,%rdi
  41f1cc:	0f 85 51 ff ff ff    	jne    41f123 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x533>
  41f1d2:	e9 01 ff ff ff       	jmpq   41f0d8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f1d7:	48 89 c5             	mov    %rax,%rbp
  41f1da:	eb a1                	jmp    41f17d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x58d>
  41f1dc:	48 89 c5             	mov    %rax,%rbp
  41f1df:	eb df                	jmp    41f1c0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x5d0>
  41f1e1:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f1e8:	00 
  41f1e9:	49 83 c6 10          	add    $0x10,%r14
  41f1ed:	48 89 c5             	mov    %rax,%rbp
  41f1f0:	4c 39 f7             	cmp    %r14,%rdi
  41f1f3:	0f 84 f7 fe ff ff    	je     41f0f0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x500>
  41f1f9:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f200:	ff ff ff 
  41f203:	49 89 df             	mov    %rbx,%r15
  41f206:	48 01 d8             	add    %rbx,%rax
  41f209:	ff d0                	callq  *%rax
  41f20b:	e9 e0 fe ff ff       	jmpq   41f0f0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x500>
  41f210:	48 89 c5             	mov    %rax,%rbp
  41f213:	e9 f8 fe ff ff       	jmpq   41f110 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x520>
  41f218:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41f21f:	00 

000000000041f220 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev>:
    typed_value<T, charT>::name() const
  41f220:	41 57                	push   %r15
  41f222:	41 56                	push   %r14
  41f224:	49 bb e0 bd 20 00 00 	movabs $0x20bde0,%r11
  41f22b:	00 00 00 
  41f22e:	41 55                	push   %r13
  41f230:	41 54                	push   %r12
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41f232:	48 8d 56 18          	lea    0x18(%rsi),%rdx
    typed_value<T, charT>::name() const
  41f236:	55                   	push   %rbp
  41f237:	53                   	push   %rbx
  41f238:	48 8d 1d e1 ff ff ff 	lea    -0x1f(%rip),%rbx        # 41f220 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev>
  41f23f:	49 89 fc             	mov    %rdi,%r12
  41f242:	48 89 f5             	mov    %rsi,%rbp
  41f245:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  41f24c:	4c 01 db             	add    %r11,%rbx
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41f24f:	48 83 7e 20 00       	cmpq   $0x0,0x20(%rsi)
  41f254:	75 0e                	jne    41f264 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x44>
  41f256:	48 b8 98 ff ff ff ff 	movabs $0xffffffffffffff98,%rax
  41f25d:	ff ff ff 
  41f260:	48 8b 14 03          	mov    (%rbx,%rax,1),%rdx
        if (!m_implicit_value.empty() && !m_implicit_value_as_text.empty()) {
  41f264:	48 83 7d 60 00       	cmpq   $0x0,0x60(%rbp)
  41f269:	0f 84 61 02 00 00    	je     41f4d0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x2b0>
  41f26f:	48 83 7d 70 00       	cmpq   $0x0,0x70(%rbp)
  41f274:	0f 84 56 02 00 00    	je     41f4d0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x2b0>
            std::string msg = "[=" + var + "(=" + m_implicit_value_as_text + ")]";
  41f27a:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  41f27f:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41f284:	49 89 c7             	mov    %rax,%r15
  41f287:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41f28c:	48 b8 fd 89 df ff ff 	movabs $0xffffffffffdf89fd,%rax
  41f293:	ff ff ff 
  41f296:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f29a:	48 b8 d0 3a df ff ff 	movabs $0xffffffffffdf3ad0,%rax
  41f2a1:	ff ff ff 
  41f2a4:	4c 89 ff             	mov    %r15,%rdi
  41f2a7:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41f2ac:	48 01 d8             	add    %rbx,%rax
  41f2af:	ff d0                	callq  *%rax
  41f2b1:	48 b8 fa 89 df ff ff 	movabs $0xffffffffffdf89fa,%rax
  41f2b8:	ff ff ff 
  41f2bb:	4c 89 fe             	mov    %r15,%rsi
  41f2be:	4c 89 ef             	mov    %r13,%rdi
  41f2c1:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f2c5:	48 b8 f0 39 df ff ff 	movabs $0xffffffffffdf39f0,%rax
  41f2cc:	ff ff ff 
  41f2cf:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41f2d4:	48 01 d8             	add    %rbx,%rax
  41f2d7:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f2d9:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41f2e0:	ff ff ff 
  41f2e3:	48 8b 55 70          	mov    0x70(%rbp),%rdx
  41f2e7:	48 8b 75 68          	mov    0x68(%rbp),%rsi
  41f2eb:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  41f2f0:	4c 89 ef             	mov    %r13,%rdi
  41f2f3:	49 89 df             	mov    %rbx,%r15
  41f2f6:	48 01 d8             	add    %rbx,%rax
  41f2f9:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41f2fb:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41f302:	00 
  41f303:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41f307:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41f30e:	00 
  41f30f:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41f312:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41f316:	48 39 d1             	cmp    %rdx,%rcx
  41f319:	0f 84 89 03 00 00    	je     41f6a8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x488>
      { _M_dataplus._M_p = __p; }
  41f31f:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41f326:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41f327:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41f32b:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41f332:	00 
  41f333:	48 8b 48 08          	mov    0x8(%rax),%rcx
  41f337:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  41f33c:	4c 89 f6             	mov    %r14,%rsi
  41f33f:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
      { _M_string_length = __length; }
  41f344:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41f34b:	00 
      { _M_dataplus._M_p = __p; }
  41f34c:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41f34f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41f356:	00 
  41f357:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41f35b:	48 b8 f6 89 df ff ff 	movabs $0xffffffffffdf89f6,%rax
  41f362:	ff ff ff 
  41f365:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f369:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41f36e:	48 01 d8             	add    %rbx,%rax
  41f371:	ff d0                	callq  *%rax
  41f373:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f37a:	00 
	if (!_M_is_local())
  41f37b:	49 8d 46 10          	lea    0x10(%r14),%rax
  41f37f:	48 39 c7             	cmp    %rax,%rdi
  41f382:	74 12                	je     41f396 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x176>
  41f384:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f38b:	ff ff ff 
  41f38e:	49 89 df             	mov    %rbx,%r15
  41f391:	48 01 d8             	add    %rbx,%rax
  41f394:	ff d0                	callq  *%rax
  41f396:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f39b:	49 8d 45 10          	lea    0x10(%r13),%rax
  41f39f:	48 39 c7             	cmp    %rax,%rdi
  41f3a2:	74 12                	je     41f3b6 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x196>
  41f3a4:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f3ab:	ff ff ff 
  41f3ae:	49 89 df             	mov    %rbx,%r15
  41f3b1:	48 01 d8             	add    %rbx,%rax
  41f3b4:	ff d0                	callq  *%rax
  41f3b6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41f3bb:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41f3c0:	48 83 c0 10          	add    $0x10,%rax
  41f3c4:	48 39 c7             	cmp    %rax,%rdi
  41f3c7:	74 12                	je     41f3db <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x1bb>
  41f3c9:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f3d0:	ff ff ff 
  41f3d3:	49 89 df             	mov    %rbx,%r15
  41f3d6:	48 01 d8             	add    %rbx,%rax
  41f3d9:	ff d0                	callq  *%rax
            if (!m_default_value.empty() && !m_default_value_as_text.empty())
  41f3db:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41f3e0:	0f 84 aa 00 00 00    	je     41f490 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x270>
  41f3e6:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41f3eb:	0f 84 9f 00 00 00    	je     41f490 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x270>
                msg += " (=" + m_default_value_as_text + ")";
  41f3f1:	48 b8 f9 89 df ff ff 	movabs $0xffffffffffdf89f9,%rax
  41f3f8:	ff ff ff 
  41f3fb:	48 8d 55 40          	lea    0x40(%rbp),%rdx
  41f3ff:	4c 89 ef             	mov    %r13,%rdi
  41f402:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f406:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41f40b:	48 01 d8             	add    %rbx,%rax
  41f40e:	ff d0                	callq  *%rax
  41f410:	48 b8 f7 7e df ff ff 	movabs $0xffffffffffdf7ef7,%rax
  41f417:	ff ff ff 
  41f41a:	4c 89 ee             	mov    %r13,%rsi
  41f41d:	4c 89 f7             	mov    %r14,%rdi
  41f420:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f424:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41f429:	48 01 d8             	add    %rbx,%rax
  41f42c:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f42e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41f433:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  41f43a:	00 
  41f43b:	49 89 df             	mov    %rbx,%r15
  41f43e:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  41f445:	00 
  41f446:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41f44b:	48 01 d8             	add    %rbx,%rax
  41f44e:	ff d0                	callq  *%rax
  41f450:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f457:	00 
	if (!_M_is_local())
  41f458:	49 83 c6 10          	add    $0x10,%r14
  41f45c:	4c 39 f7             	cmp    %r14,%rdi
  41f45f:	74 0f                	je     41f470 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x250>
  41f461:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f468:	ff ff ff 
  41f46b:	48 01 d8             	add    %rbx,%rax
  41f46e:	ff d0                	callq  *%rax
  41f470:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f475:	49 83 c5 10          	add    $0x10,%r13
  41f479:	4c 39 ef             	cmp    %r13,%rdi
  41f47c:	74 12                	je     41f490 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x270>
  41f47e:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f485:	ff ff ff 
  41f488:	49 89 df             	mov    %rbx,%r15
  41f48b:	48 01 d8             	add    %rbx,%rax
  41f48e:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f490:	49 8d 44 24 10       	lea    0x10(%r12),%rax
	if (__str._M_is_local())
  41f495:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f49a:	49 89 04 24          	mov    %rax,(%r12)
  41f49e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
	if (__str._M_is_local())
  41f4a3:	48 83 c2 10          	add    $0x10,%rdx
  41f4a7:	48 39 d0             	cmp    %rdx,%rax
  41f4aa:	0f 84 b8 01 00 00    	je     41f668 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x448>
      { _M_dataplus._M_p = __p; }
  41f4b0:	49 89 04 24          	mov    %rax,(%r12)
      { _M_allocated_capacity = __capacity; }
  41f4b4:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41f4b9:	49 89 44 24 10       	mov    %rax,0x10(%r12)
      { _M_string_length = __length; }
  41f4be:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41f4c3:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  41f4c8:	e9 83 01 00 00       	jmpq   41f650 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x430>
  41f4cd:	0f 1f 00             	nopl   (%rax)
        else if (!m_default_value.empty() && !m_default_value_as_text.empty()) {
  41f4d0:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41f4d5:	0f 84 4d 01 00 00    	je     41f628 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x408>
  41f4db:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41f4e0:	0f 84 42 01 00 00    	je     41f628 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x408>
	: allocator_type(__a), _M_p(__dat) { }
  41f4e6:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41f4eb:	48 8b 32             	mov    (%rdx),%rsi
  41f4ee:	49 8d 45 10          	lea    0x10(%r13),%rax
          _M_construct(__beg, __end, _Tag());
  41f4f2:	4c 89 ef             	mov    %r13,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41f4f5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41f4fa:	48 89 f0             	mov    %rsi,%rax
  41f4fd:	48 03 42 08          	add    0x8(%rdx),%rax
  41f501:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41f504:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  41f50b:	ff ff ff 
  41f50e:	48 01 d8             	add    %rbx,%rax
  41f511:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41f513:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  41f51a:	ff ff 7f 
  41f51d:	48 2b 44 24 78       	sub    0x78(%rsp),%rax
  41f522:	48 83 f8 02          	cmp    $0x2,%rax
  41f526:	0f 86 99 01 00 00    	jbe    41f6c5 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4a5>
	return _M_append(__s, __n);
  41f52c:	48 b8 f9 89 df ff ff 	movabs $0xffffffffffdf89f9,%rax
  41f533:	ff ff ff 
  41f536:	ba 03 00 00 00       	mov    $0x3,%edx
  41f53b:	4c 89 ef             	mov    %r13,%rdi
  41f53e:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f542:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41f549:	ff ff ff 
  41f54c:	49 89 df             	mov    %rbx,%r15
  41f54f:	49 89 c6             	mov    %rax,%r14
  41f552:	48 01 d8             	add    %rbx,%rax
  41f555:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f557:	4c 89 f0             	mov    %r14,%rax
  41f55a:	48 8b 55 48          	mov    0x48(%rbp),%rdx
  41f55e:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  41f562:	4c 89 ef             	mov    %r13,%rdi
  41f565:	48 01 d8             	add    %rbx,%rax
  41f568:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41f56a:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41f571:	00 
  41f572:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41f576:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41f57d:	00 
  41f57e:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41f581:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41f585:	48 39 d1             	cmp    %rdx,%rcx
  41f588:	0f 84 fa 00 00 00    	je     41f688 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x468>
      { _M_dataplus._M_p = __p; }
  41f58e:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41f595:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41f596:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41f59a:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41f5a1:	00 
  41f5a2:	48 8b 48 08          	mov    0x8(%rax),%rcx
            return var + " (=" + m_default_value_as_text + ")";
  41f5a6:	4c 89 f6             	mov    %r14,%rsi
  41f5a9:	4c 89 e7             	mov    %r12,%rdi
      { _M_string_length = __length; }
  41f5ac:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41f5b3:	00 
      { _M_dataplus._M_p = __p; }
  41f5b4:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41f5b7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41f5be:	00 
  41f5bf:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41f5c3:	48 b8 f7 7e df ff ff 	movabs $0xffffffffffdf7ef7,%rax
  41f5ca:	ff ff ff 
  41f5cd:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f5d1:	48 b8 f0 39 df ff ff 	movabs $0xffffffffffdf39f0,%rax
  41f5d8:	ff ff ff 
  41f5db:	48 01 d8             	add    %rbx,%rax
  41f5de:	ff d0                	callq  *%rax
  41f5e0:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f5e7:	00 
	if (!_M_is_local())
  41f5e8:	49 83 c6 10          	add    $0x10,%r14
  41f5ec:	4c 39 f7             	cmp    %r14,%rdi
  41f5ef:	74 12                	je     41f603 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x3e3>
  41f5f1:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f5f8:	ff ff ff 
  41f5fb:	49 89 df             	mov    %rbx,%r15
  41f5fe:	48 01 d8             	add    %rbx,%rax
  41f601:	ff d0                	callq  *%rax
  41f603:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f608:	49 83 c5 10          	add    $0x10,%r13
  41f60c:	4c 39 ef             	cmp    %r13,%rdi
  41f60f:	74 3f                	je     41f650 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x430>
  41f611:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f618:	ff ff ff 
  41f61b:	49 89 df             	mov    %rbx,%r15
  41f61e:	48 01 d8             	add    %rbx,%rax
  41f621:	ff d0                	callq  *%rax
  41f623:	eb 2b                	jmp    41f650 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x430>
  41f625:	0f 1f 00             	nopl   (%rax)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f628:	49 8d 44 24 10       	lea    0x10(%r12),%rax
          _M_construct(__beg, __end, _Tag());
  41f62d:	4c 89 e7             	mov    %r12,%rdi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f630:	49 89 04 24          	mov    %rax,(%r12)
  41f634:	48 8b 32             	mov    (%rdx),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41f637:	48 89 f0             	mov    %rsi,%rax
  41f63a:	48 03 42 08          	add    0x8(%rdx),%rax
  41f63e:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41f641:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  41f648:	ff ff ff 
  41f64b:	48 01 d8             	add    %rbx,%rax
  41f64e:	ff d0                	callq  *%rax
    }
  41f650:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  41f657:	4c 89 e0             	mov    %r12,%rax
  41f65a:	5b                   	pop    %rbx
  41f65b:	5d                   	pop    %rbp
  41f65c:	41 5c                	pop    %r12
  41f65e:	41 5d                	pop    %r13
  41f660:	41 5e                	pop    %r14
  41f662:	41 5f                	pop    %r15
  41f664:	c3                   	retq   
  41f665:	0f 1f 00             	nopl   (%rax)
  41f668:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41f66d:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  41f672:	49 89 44 24 10       	mov    %rax,0x10(%r12)
  41f677:	49 89 54 24 18       	mov    %rdx,0x18(%r12)
  41f67c:	e9 3d fe ff ff       	jmpq   41f4be <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x29e>
  41f681:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41f688:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f68c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f690:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f697:	00 
  41f698:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f69f:	00 
  41f6a0:	e9 fd fe ff ff       	jmpq   41f5a2 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x382>
  41f6a5:	0f 1f 00             	nopl   (%rax)
  41f6a8:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f6ac:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f6b0:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f6b7:	00 
  41f6b8:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f6bf:	00 
  41f6c0:	e9 6e fc ff ff       	jmpq   41f333 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x113>
	  __throw_length_error(__N(__s));
  41f6c5:	48 b8 e1 89 df ff ff 	movabs $0xffffffffffdf89e1,%rax
  41f6cc:	ff ff ff 
  41f6cf:	49 89 df             	mov    %rbx,%r15
  41f6d2:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41f6d6:	48 b8 a0 e5 dd ff ff 	movabs $0xffffffffffdde5a0,%rax
  41f6dd:	ff ff ff 
  41f6e0:	48 01 d8             	add    %rbx,%rax
  41f6e3:	ff d0                	callq  *%rax
  41f6e5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
  41f6ea:	49 83 c5 10          	add    $0x10,%r13
  41f6ee:	48 89 c5             	mov    %rax,%rbp
  41f6f1:	4c 39 ef             	cmp    %r13,%rdi
  41f6f4:	74 12                	je     41f708 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f6f6:	48 ba a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rdx
  41f6fd:	ff ff ff 
  41f700:	49 89 df             	mov    %rbx,%r15
  41f703:	48 01 da             	add    %rbx,%rdx
  41f706:	ff d2                	callq  *%rdx
  41f708:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  41f70f:	ff ff ff 
  41f712:	48 89 ef             	mov    %rbp,%rdi
  41f715:	49 89 df             	mov    %rbx,%r15
  41f718:	48 01 d8             	add    %rbx,%rax
  41f71b:	ff d0                	callq  *%rax
  41f71d:	48 89 c5             	mov    %rax,%rbp
  41f720:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f725:	49 83 c5 10          	add    $0x10,%r13
  41f729:	4c 39 ef             	cmp    %r13,%rdi
  41f72c:	74 12                	je     41f740 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x520>
  41f72e:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f735:	ff ff ff 
  41f738:	49 89 df             	mov    %rbx,%r15
  41f73b:	48 01 d8             	add    %rbx,%rax
  41f73e:	ff d0                	callq  *%rax
  41f740:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41f745:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41f74a:	48 83 c0 10          	add    $0x10,%rax
  41f74e:	48 39 c7             	cmp    %rax,%rdi
  41f751:	74 b5                	je     41f708 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f753:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f75a:	ff ff ff 
  41f75d:	49 89 df             	mov    %rbx,%r15
  41f760:	48 01 d8             	add    %rbx,%rax
  41f763:	ff d0                	callq  *%rax
  41f765:	eb a1                	jmp    41f708 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f767:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f76e:	00 
  41f76f:	49 83 c6 10          	add    $0x10,%r14
  41f773:	48 89 c5             	mov    %rax,%rbp
  41f776:	4c 39 f7             	cmp    %r14,%rdi
  41f779:	74 12                	je     41f78d <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x56d>
  41f77b:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f782:	ff ff ff 
  41f785:	49 89 df             	mov    %rbx,%r15
  41f788:	48 01 d8             	add    %rbx,%rax
  41f78b:	ff d0                	callq  *%rax
  41f78d:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f792:	49 83 c5 10          	add    $0x10,%r13
  41f796:	4c 39 ef             	cmp    %r13,%rdi
  41f799:	74 12                	je     41f7ad <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x58d>
  41f79b:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f7a2:	ff ff ff 
  41f7a5:	49 89 df             	mov    %rbx,%r15
  41f7a8:	48 01 d8             	add    %rbx,%rax
  41f7ab:	ff d0                	callq  *%rax
  41f7ad:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41f7b2:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41f7b7:	48 83 c0 10          	add    $0x10,%rax
  41f7bb:	48 39 c7             	cmp    %rax,%rdi
  41f7be:	75 93                	jne    41f753 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x533>
  41f7c0:	e9 43 ff ff ff       	jmpq   41f708 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f7c5:	48 89 c5             	mov    %rax,%rbp
  41f7c8:	eb c3                	jmp    41f78d <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x56d>
  41f7ca:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f7d1:	00 
  41f7d2:	49 83 c6 10          	add    $0x10,%r14
  41f7d6:	48 89 c5             	mov    %rax,%rbp
  41f7d9:	4c 39 f7             	cmp    %r14,%rdi
  41f7dc:	74 12                	je     41f7f0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x5d0>
  41f7de:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f7e5:	ff ff ff 
  41f7e8:	49 89 df             	mov    %rbx,%r15
  41f7eb:	48 01 d8             	add    %rbx,%rax
  41f7ee:	ff d0                	callq  *%rax
  41f7f0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f7f5:	49 83 c5 10          	add    $0x10,%r13
  41f7f9:	4c 39 ef             	cmp    %r13,%rdi
  41f7fc:	0f 85 51 ff ff ff    	jne    41f753 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x533>
  41f802:	e9 01 ff ff ff       	jmpq   41f708 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f807:	48 89 c5             	mov    %rax,%rbp
  41f80a:	eb a1                	jmp    41f7ad <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x58d>
  41f80c:	48 89 c5             	mov    %rax,%rbp
  41f80f:	eb df                	jmp    41f7f0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x5d0>
  41f811:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f818:	00 
  41f819:	49 83 c6 10          	add    $0x10,%r14
  41f81d:	48 89 c5             	mov    %rax,%rbp
  41f820:	4c 39 f7             	cmp    %r14,%rdi
  41f823:	0f 84 f7 fe ff ff    	je     41f720 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x500>
  41f829:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f830:	ff ff ff 
  41f833:	49 89 df             	mov    %rbx,%r15
  41f836:	48 01 d8             	add    %rbx,%rax
  41f839:	ff d0                	callq  *%rax
  41f83b:	e9 e0 fe ff ff       	jmpq   41f720 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x500>
  41f840:	48 89 c5             	mov    %rax,%rbp
  41f843:	e9 f8 fe ff ff       	jmpq   41f740 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x520>
  41f848:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41f84f:	00 

000000000041f850 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41f850:	41 57                	push   %r15
  41f852:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 41f850 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
  41f859:	41 56                	push   %r14
  41f85b:	41 55                	push   %r13
  41f85d:	41 54                	push   %r12
  41f85f:	49 bb b0 b7 20 00 00 	movabs $0x20b7b0,%r11
  41f866:	00 00 00 
  41f869:	55                   	push   %rbp
  41f86a:	53                   	push   %rbx
  41f86b:	4d 01 df             	add    %r11,%r15
  41f86e:	48 83 ec 18          	sub    $0x18,%rsp
      while (__x != 0)
  41f872:	48 85 f6             	test   %rsi,%rsi
  41f875:	0f 84 c5 00 00 00    	je     41f940 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xf0>
	  _M_erase(_S_right(__x));
  41f87b:	48 ba 50 48 df ff ff 	movabs $0xffffffffffdf4850,%rdx
  41f882:	ff ff ff 
  41f885:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  41f88c:	ff ff ff 
  41f88f:	49 89 fc             	mov    %rdi,%r12
  41f892:	4e 8d 2c 3a          	lea    (%rdx,%r15,1),%r13
  41f896:	48 ba a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rdx
  41f89d:	ff ff ff 
  41f8a0:	49 89 f6             	mov    %rsi,%r14
  41f8a3:	49 8d 04 17          	lea    (%r15,%rdx,1),%rax
  41f8a7:	4c 01 fb             	add    %r15,%rbx
  41f8aa:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41f8af:	eb 32                	jmp    41f8e3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x93>
  41f8b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            delete content;
  41f8b8:	49 8b 7e 40          	mov    0x40(%r14),%rdi
  41f8bc:	48 85 ff             	test   %rdi,%rdi
  41f8bf:	74 06                	je     41f8c7 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x77>
  41f8c1:	48 8b 17             	mov    (%rdi),%rdx
  41f8c4:	ff 52 08             	callq  *0x8(%rdx)
  41f8c7:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41f8cb:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  41f8cf:	48 39 d7             	cmp    %rdx,%rdi
  41f8d2:	74 02                	je     41f8d6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x86>
  41f8d4:	ff d3                	callq  *%rbx
  41f8d6:	4c 89 f7             	mov    %r14,%rdi
  41f8d9:	49 89 ee             	mov    %rbp,%r14
  41f8dc:	ff d3                	callq  *%rbx
      while (__x != 0)
  41f8de:	48 85 ed             	test   %rbp,%rbp
  41f8e1:	74 5d                	je     41f940 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xf0>
	  _M_erase(_S_right(__x));
  41f8e3:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41f8e7:	4c 89 e7             	mov    %r12,%rdi
  41f8ea:	41 ff d5             	callq  *%r13
  41f8ed:	49 8b 56 58          	mov    0x58(%r14),%rdx
  41f8f1:	49 8b 6e 10          	mov    0x10(%r14),%rbp
  41f8f5:	48 85 d2             	test   %rdx,%rdx
  41f8f8:	74 be                	je     41f8b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
        if( atomic_decrement( &use_count_ ) == 1 )
  41f8fa:	f0 83 6a 08 01       	lock subl $0x1,0x8(%rdx)
  41f8ff:	75 b7                	jne    41f8b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
            dispose();
  41f901:	48 8b 0a             	mov    (%rdx),%rcx
  41f904:	48 89 d7             	mov    %rdx,%rdi
  41f907:	48 89 14 24          	mov    %rdx,(%rsp)
  41f90b:	ff 51 10             	callq  *0x10(%rcx)
      { return __atomic_fetch_sub(&_M_i, __i, __m); }
  41f90e:	48 8b 14 24          	mov    (%rsp),%rdx
  41f912:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  41f917:	f0 0f c1 4a 0c       	lock xadd %ecx,0xc(%rdx)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41f91c:	83 f9 01             	cmp    $0x1,%ecx
  41f91f:	75 97                	jne    41f8b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
            destroy();
  41f921:	48 8b 0a             	mov    (%rdx),%rcx
        delete this;
  41f924:	48 89 d7             	mov    %rdx,%rdi
            destroy();
  41f927:	48 8b 71 18          	mov    0x18(%rcx),%rsi
  41f92b:	48 3b 74 24 08       	cmp    0x8(%rsp),%rsi
  41f930:	75 1d                	jne    41f94f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xff>
        delete this;
  41f932:	ff 51 08             	callq  *0x8(%rcx)
  41f935:	eb 81                	jmp    41f8b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
  41f937:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41f93e:	00 00 
    }
  41f940:	48 83 c4 18          	add    $0x18,%rsp
  41f944:	5b                   	pop    %rbx
  41f945:	5d                   	pop    %rbp
  41f946:	41 5c                	pop    %r12
  41f948:	41 5d                	pop    %r13
  41f94a:	41 5e                	pop    %r14
  41f94c:	41 5f                	pop    %r15
  41f94e:	c3                   	retq   
            destroy();
  41f94f:	ff d6                	callq  *%rsi
  41f951:	e9 62 ff ff ff       	jmpq   41f8b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
  41f956:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41f95d:	00 00 00 

000000000041f960 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41f960:	41 57                	push   %r15
  41f962:	41 56                	push   %r14
  41f964:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 41f960 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
  41f96b:	41 55                	push   %r13
  41f96d:	41 54                	push   %r12
  41f96f:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41f976:	ff ff ff 
  41f979:	55                   	push   %rbp
  41f97a:	53                   	push   %rbx
  41f97b:	49 bb a0 b6 20 00 00 	movabs $0x20b6a0,%r11
  41f982:	00 00 00 
  41f985:	4d 01 df             	add    %r11,%r15
  41f988:	48 83 ec 58          	sub    $0x58,%rsp
      while (__x != 0)
  41f98c:	48 85 f6             	test   %rsi,%rsi
  41f98f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41f994:	48 b8 60 49 df ff ff 	movabs $0xffffffffffdf4960,%rax
  41f99b:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41f99e:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
	  _M_erase(_S_right(__x));
  41f9a3:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
      while (__x != 0)
  41f9a7:	0f 84 a6 02 00 00    	je     41fc53 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2f3>
  41f9ad:	49 89 fe             	mov    %rdi,%r14
  41f9b0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  41f9b5:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f9b9:	48 85 c0             	test   %rax,%rax
  41f9bc:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  41f9c1:	0f 84 4f 02 00 00    	je     41fc16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2b6>
  41f9c7:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f9cb:	48 85 c0             	test   %rax,%rax
  41f9ce:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  41f9d3:	0f 84 fd 01 00 00    	je     41fbd6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x276>
  41f9d9:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f9dd:	48 85 c0             	test   %rax,%rax
  41f9e0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  41f9e5:	0f 84 ab 01 00 00    	je     41fb96 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x236>
  41f9eb:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f9ef:	48 85 c0             	test   %rax,%rax
  41f9f2:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  41f9f7:	0f 84 59 01 00 00    	je     41fb56 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1f6>
  41f9fd:	48 8b 40 18          	mov    0x18(%rax),%rax
  41fa01:	48 85 c0             	test   %rax,%rax
  41fa04:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41fa09:	0f 84 07 01 00 00    	je     41fb16 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1b6>
  41fa0f:	48 8b 40 18          	mov    0x18(%rax),%rax
  41fa13:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  41fa18:	48 85 c0             	test   %rax,%rax
  41fa1b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41fa20:	4a 8d 2c 3a          	lea    (%rdx,%r15,1),%rbp
  41fa24:	0f 84 ac 00 00 00    	je     41fad6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x176>
  41fa2a:	48 8b 40 18          	mov    0x18(%rax),%rax
  41fa2e:	48 85 c0             	test   %rax,%rax
  41fa31:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41fa36:	74 6e                	je     41faa6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x146>
  41fa38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41fa3f:	00 
  41fa40:	4c 8b 68 18          	mov    0x18(%rax),%r13
  41fa44:	4d 85 ed             	test   %r13,%r13
  41fa47:	74 36                	je     41fa7f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x11f>
  41fa49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  41fa50:	4c 89 f7             	mov    %r14,%rdi
  41fa53:	49 8b 75 18          	mov    0x18(%r13),%rsi
  41fa57:	41 ff d4             	callq  *%r12
  41fa5a:	49 8b 7d 20          	mov    0x20(%r13),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fa5e:	49 8d 45 30          	lea    0x30(%r13),%rax
  41fa62:	49 8b 5d 10          	mov    0x10(%r13),%rbx
	if (!_M_is_local())
  41fa66:	48 39 c7             	cmp    %rax,%rdi
  41fa69:	74 02                	je     41fa6d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x10d>
  41fa6b:	ff d5                	callq  *%rbp
  41fa6d:	4c 89 ef             	mov    %r13,%rdi
  41fa70:	49 89 dd             	mov    %rbx,%r13
  41fa73:	ff d5                	callq  *%rbp
      while (__x != 0)
  41fa75:	48 85 db             	test   %rbx,%rbx
  41fa78:	75 d6                	jne    41fa50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xf0>
  41fa7a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41fa7f:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fa83:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fa87:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fa8b:	48 39 c7             	cmp    %rax,%rdi
  41fa8e:	74 02                	je     41fa92 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x132>
  41fa90:	ff d5                	callq  *%rbp
  41fa92:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41fa97:	ff d5                	callq  *%rbp
  41fa99:	48 85 db             	test   %rbx,%rbx
  41fa9c:	48 89 d8             	mov    %rbx,%rax
  41fa9f:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  41faa4:	75 9a                	jne    41fa40 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xe0>
  41faa6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41faab:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41faaf:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fab3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fab7:	48 39 c7             	cmp    %rax,%rdi
  41faba:	74 02                	je     41fabe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x15e>
  41fabc:	ff d5                	callq  *%rbp
  41fabe:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41fac3:	ff d5                	callq  *%rbp
  41fac5:	48 85 db             	test   %rbx,%rbx
  41fac8:	48 89 d8             	mov    %rbx,%rax
  41facb:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  41fad0:	0f 85 54 ff ff ff    	jne    41fa2a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xca>
  41fad6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41fadb:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fadf:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fae3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fae7:	48 39 c7             	cmp    %rax,%rdi
  41faea:	74 0a                	je     41faf6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x196>
  41faec:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41faf1:	4c 01 f8             	add    %r15,%rax
  41faf4:	ff d0                	callq  *%rax
  41faf6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fafb:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41fb00:	4c 01 f8             	add    %r15,%rax
  41fb03:	ff d0                	callq  *%rax
  41fb05:	48 85 db             	test   %rbx,%rbx
  41fb08:	48 89 d8             	mov    %rbx,%rax
  41fb0b:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  41fb10:	0f 85 f9 fe ff ff    	jne    41fa0f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xaf>
  41fb16:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41fb1b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fb1f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fb23:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fb27:	48 39 c7             	cmp    %rax,%rdi
  41fb2a:	74 0a                	je     41fb36 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d6>
  41fb2c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fb31:	4c 01 f8             	add    %r15,%rax
  41fb34:	ff d0                	callq  *%rax
  41fb36:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fb3b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41fb40:	4c 01 f8             	add    %r15,%rax
  41fb43:	ff d0                	callq  *%rax
  41fb45:	48 85 db             	test   %rbx,%rbx
  41fb48:	48 89 d8             	mov    %rbx,%rax
  41fb4b:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  41fb50:	0f 85 a7 fe ff ff    	jne    41f9fd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x9d>
  41fb56:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41fb5b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fb5f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fb63:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fb67:	48 39 c7             	cmp    %rax,%rdi
  41fb6a:	74 0a                	je     41fb76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x216>
  41fb6c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fb71:	4c 01 f8             	add    %r15,%rax
  41fb74:	ff d0                	callq  *%rax
  41fb76:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fb7b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41fb80:	4c 01 f8             	add    %r15,%rax
  41fb83:	ff d0                	callq  *%rax
  41fb85:	48 85 db             	test   %rbx,%rbx
  41fb88:	48 89 d8             	mov    %rbx,%rax
  41fb8b:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  41fb90:	0f 85 55 fe ff ff    	jne    41f9eb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x8b>
  41fb96:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41fb9b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fb9f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fba3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fba7:	48 39 c7             	cmp    %rax,%rdi
  41fbaa:	74 0a                	je     41fbb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x256>
  41fbac:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fbb1:	4c 01 f8             	add    %r15,%rax
  41fbb4:	ff d0                	callq  *%rax
  41fbb6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fbbb:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  41fbc0:	4c 01 f8             	add    %r15,%rax
  41fbc3:	ff d0                	callq  *%rax
  41fbc5:	48 85 db             	test   %rbx,%rbx
  41fbc8:	48 89 d8             	mov    %rbx,%rax
  41fbcb:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  41fbd0:	0f 85 03 fe ff ff    	jne    41f9d9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x79>
  41fbd6:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41fbdb:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fbdf:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fbe3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fbe7:	48 39 c7             	cmp    %rax,%rdi
  41fbea:	74 0a                	je     41fbf6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x296>
  41fbec:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fbf1:	4c 01 f8             	add    %r15,%rax
  41fbf4:	ff d0                	callq  *%rax
  41fbf6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fbfb:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  41fc00:	4c 01 f8             	add    %r15,%rax
  41fc03:	ff d0                	callq  *%rax
  41fc05:	48 85 db             	test   %rbx,%rbx
  41fc08:	48 89 d8             	mov    %rbx,%rax
  41fc0b:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  41fc10:	0f 85 b1 fd ff ff    	jne    41f9c7 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x67>
  41fc16:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  41fc1b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fc1f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fc23:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fc27:	48 39 c7             	cmp    %rax,%rdi
  41fc2a:	74 0a                	je     41fc36 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2d6>
  41fc2c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fc31:	4c 01 f8             	add    %r15,%rax
  41fc34:	ff d0                	callq  *%rax
  41fc36:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fc3b:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  41fc40:	4c 01 f8             	add    %r15,%rax
  41fc43:	ff d0                	callq  *%rax
  41fc45:	48 85 db             	test   %rbx,%rbx
  41fc48:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  41fc4d:	0f 85 5d fd ff ff    	jne    41f9b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x50>
    }
  41fc53:	48 83 c4 58          	add    $0x58,%rsp
  41fc57:	5b                   	pop    %rbx
  41fc58:	5d                   	pop    %rbp
  41fc59:	41 5c                	pop    %r12
  41fc5b:	41 5d                	pop    %r13
  41fc5d:	41 5e                	pop    %r14
  41fc5f:	41 5f                	pop    %r15
  41fc61:	c3                   	retq   
  41fc62:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41fc69:	00 00 00 
  41fc6c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041fc70 <_ZN5boost15program_options13variables_mapD0Ev>:
    /** Concrete variables map which store variables in real map.

        This class is derived from std::map<std::string, variable_value>,
        so you can use all map operators to examine its content.
    */
    class BOOST_PROGRAM_OPTIONS_DECL variables_map : public abstract_variables_map,
  41fc70:	41 57                	push   %r15
  41fc72:	41 56                	push   %r14
  41fc74:	49 bb 90 b3 20 00 00 	movabs $0x20b390,%r11
  41fc7b:	00 00 00 
  41fc7e:	41 55                	push   %r13
  41fc80:	41 54                	push   %r12
  41fc82:	48 b8 d0 ff ff ff ff 	movabs $0xffffffffffffffd0,%rax
  41fc89:	ff ff ff 
  41fc8c:	55                   	push   %rbp
  41fc8d:	53                   	push   %rbx
  41fc8e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 41fc70 <_ZN5boost15program_options13variables_mapD0Ev>
  41fc95:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  41fc9c:	ff ff ff 
	  _M_erase(_S_right(__x));
  41fc9f:	48 ba c0 c3 de ff ff 	movabs $0xffffffffffdec3c0,%rdx
  41fca6:	ff ff ff 
  41fca9:	4c 01 db             	add    %r11,%rbx
  41fcac:	48 83 ec 28          	sub    $0x28,%rsp
  41fcb0:	4c 8b b7 80 00 00 00 	mov    0x80(%rdi),%r14
  41fcb7:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  41fcbb:	48 01 dd             	add    %rbx,%rbp
  41fcbe:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  41fcc3:	4c 8d 2c 1a          	lea    (%rdx,%rbx,1),%r13
  41fcc7:	48 83 c0 10          	add    $0x10,%rax
      while (__x != 0)
  41fccb:	4d 85 f6             	test   %r14,%r14
  41fcce:	48 89 07             	mov    %rax,(%rdi)
    class map
  41fcd1:	48 8d 47 70          	lea    0x70(%rdi),%rax
  41fcd5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41fcda:	74 48                	je     41fd24 <_ZN5boost15program_options13variables_mapD0Ev+0xb4>
  41fcdc:	0f 1f 40 00          	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  41fce0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41fce5:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41fce9:	41 ff d5             	callq  *%r13
  41fcec:	49 8b 7e 40          	mov    0x40(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fcf0:	49 8d 56 50          	lea    0x50(%r14),%rdx
  41fcf4:	4d 8b 66 10          	mov    0x10(%r14),%r12
	if (!_M_is_local())
  41fcf8:	48 39 d7             	cmp    %rdx,%rdi
  41fcfb:	74 05                	je     41fd02 <_ZN5boost15program_options13variables_mapD0Ev+0x92>
  41fcfd:	49 89 df             	mov    %rbx,%r15
  41fd00:	ff d5                	callq  *%rbp
  41fd02:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fd06:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  41fd0a:	48 39 d7             	cmp    %rdx,%rdi
  41fd0d:	74 05                	je     41fd14 <_ZN5boost15program_options13variables_mapD0Ev+0xa4>
  41fd0f:	49 89 df             	mov    %rbx,%r15
  41fd12:	ff d5                	callq  *%rbp
  41fd14:	4c 89 f7             	mov    %r14,%rdi
  41fd17:	49 89 df             	mov    %rbx,%r15
  41fd1a:	4d 89 e6             	mov    %r12,%r14
  41fd1d:	ff d5                	callq  *%rbp
      while (__x != 0)
  41fd1f:	4d 85 e4             	test   %r12,%r12
  41fd22:	75 bc                	jne    41fce0 <_ZN5boost15program_options13variables_mapD0Ev+0x70>
    class set
  41fd24:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41fd29:	48 8d 48 40          	lea    0x40(%rax),%rcx
  41fd2d:	48 8b 40 50          	mov    0x50(%rax),%rax
  41fd31:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41fd36:	48 85 c0             	test   %rax,%rax
  41fd39:	74 57                	je     41fd92 <_ZN5boost15program_options13variables_mapD0Ev+0x122>
  41fd3b:	48 ba 60 49 df ff ff 	movabs $0xffffffffffdf4960,%rdx
  41fd42:	ff ff ff 
  41fd45:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  41fd4c:	ff ff ff 
  41fd4f:	49 89 c6             	mov    %rax,%r14
	  _M_erase(_S_right(__x));
  41fd52:	4c 8d 2c 1a          	lea    (%rdx,%rbx,1),%r13
  41fd56:	48 01 dd             	add    %rbx,%rbp
  41fd59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41fd60:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41fd65:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41fd69:	41 ff d5             	callq  *%r13
  41fd6c:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fd70:	49 8d 56 30          	lea    0x30(%r14),%rdx
  41fd74:	4d 8b 66 10          	mov    0x10(%r14),%r12
	if (!_M_is_local())
  41fd78:	48 39 d7             	cmp    %rdx,%rdi
  41fd7b:	74 05                	je     41fd82 <_ZN5boost15program_options13variables_mapD0Ev+0x112>
  41fd7d:	49 89 df             	mov    %rbx,%r15
  41fd80:	ff d5                	callq  *%rbp
  41fd82:	4c 89 f7             	mov    %r14,%rdi
  41fd85:	49 89 df             	mov    %rbx,%r15
  41fd88:	4d 89 e6             	mov    %r12,%r14
  41fd8b:	ff d5                	callq  *%rbp
      while (__x != 0)
  41fd8d:	4d 85 e4             	test   %r12,%r12
  41fd90:	75 ce                	jne    41fd60 <_ZN5boost15program_options13variables_mapD0Ev+0xf0>
  41fd92:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41fd97:	48 8d 48 10          	lea    0x10(%rax),%rcx
  41fd9b:	48 8b 40 20          	mov    0x20(%rax),%rax
  41fd9f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41fda4:	48 85 c0             	test   %rax,%rax
  41fda7:	0f 84 b3 00 00 00    	je     41fe60 <_ZN5boost15program_options13variables_mapD0Ev+0x1f0>
  41fdad:	48 ba 50 48 df ff ff 	movabs $0xffffffffffdf4850,%rdx
  41fdb4:	ff ff ff 
  41fdb7:	49 89 c6             	mov    %rax,%r14
  41fdba:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  41fdc1:	ff ff ff 
	  _M_erase(_S_right(__x));
  41fdc4:	4c 8d 2c 1a          	lea    (%rdx,%rbx,1),%r13
  41fdc8:	48 ba a0 7f de ff ff 	movabs $0xffffffffffde7fa0,%rdx
  41fdcf:	ff ff ff 
  41fdd2:	48 01 dd             	add    %rbx,%rbp
  41fdd5:	48 8d 04 13          	lea    (%rbx,%rdx,1),%rax
  41fdd9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41fdde:	eb 31                	jmp    41fe11 <_ZN5boost15program_options13variables_mapD0Ev+0x1a1>
  41fde0:	49 8b 7e 40          	mov    0x40(%r14),%rdi
  41fde4:	48 85 ff             	test   %rdi,%rdi
  41fde7:	74 06                	je     41fdef <_ZN5boost15program_options13variables_mapD0Ev+0x17f>
  41fde9:	48 8b 17             	mov    (%rdi),%rdx
  41fdec:	ff 52 08             	callq  *0x8(%rdx)
  41fdef:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fdf3:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  41fdf7:	48 39 d7             	cmp    %rdx,%rdi
  41fdfa:	74 05                	je     41fe01 <_ZN5boost15program_options13variables_mapD0Ev+0x191>
  41fdfc:	49 89 df             	mov    %rbx,%r15
  41fdff:	ff d5                	callq  *%rbp
  41fe01:	4c 89 f7             	mov    %r14,%rdi
  41fe04:	49 89 df             	mov    %rbx,%r15
  41fe07:	4d 89 e6             	mov    %r12,%r14
  41fe0a:	ff d5                	callq  *%rbp
      while (__x != 0)
  41fe0c:	4d 85 e4             	test   %r12,%r12
  41fe0f:	74 4f                	je     41fe60 <_ZN5boost15program_options13variables_mapD0Ev+0x1f0>
	  _M_erase(_S_right(__x));
  41fe11:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41fe15:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41fe1a:	41 ff d5             	callq  *%r13
  41fe1d:	4d 8b 7e 58          	mov    0x58(%r14),%r15
  41fe21:	4d 8b 66 10          	mov    0x10(%r14),%r12
  41fe25:	4d 85 ff             	test   %r15,%r15
  41fe28:	74 b6                	je     41fde0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
        if( atomic_decrement( &use_count_ ) == 1 )
  41fe2a:	f0 41 83 6f 08 01    	lock subl $0x1,0x8(%r15)
  41fe30:	75 ae                	jne    41fde0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
            dispose();
  41fe32:	49 8b 17             	mov    (%r15),%rdx
  41fe35:	4c 89 ff             	mov    %r15,%rdi
  41fe38:	ff 52 10             	callq  *0x10(%rdx)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41fe3b:	f0 41 83 6f 0c 01    	lock subl $0x1,0xc(%r15)
  41fe41:	75 9d                	jne    41fde0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
            destroy();
  41fe43:	49 8b 17             	mov    (%r15),%rdx
        delete this;
  41fe46:	4c 89 ff             	mov    %r15,%rdi
            destroy();
  41fe49:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  41fe4d:	48 3b 4c 24 18       	cmp    0x18(%rsp),%rcx
  41fe52:	75 33                	jne    41fe87 <_ZN5boost15program_options13variables_mapD0Ev+0x217>
        delete this;
  41fe54:	ff 52 08             	callq  *0x8(%rdx)
  41fe57:	eb 87                	jmp    41fde0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
  41fe59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41fe60:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41fe65:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  41fe6c:	ff ff ff 
  41fe6f:	48 83 c4 28          	add    $0x28,%rsp
  41fe73:	48 01 d8             	add    %rbx,%rax
  41fe76:	be a0 00 00 00       	mov    $0xa0,%esi
  41fe7b:	5b                   	pop    %rbx
  41fe7c:	5d                   	pop    %rbp
  41fe7d:	41 5c                	pop    %r12
  41fe7f:	41 5d                	pop    %r13
  41fe81:	41 5e                	pop    %r14
  41fe83:	41 5f                	pop    %r15
  41fe85:	ff e0                	jmpq   *%rax
            destroy();
  41fe87:	ff d1                	callq  *%rcx
  41fe89:	e9 52 ff ff ff       	jmpq   41fde0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
  41fe8e:	66 90                	xchg   %ax,%ax

000000000041fe90 <_ZN5boost15program_options13variables_mapD1Ev>:
  41fe90:	41 57                	push   %r15
  41fe92:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 41fe90 <_ZN5boost15program_options13variables_mapD1Ev>
  41fe99:	41 56                	push   %r14
  41fe9b:	49 bb 70 b1 20 00 00 	movabs $0x20b170,%r11
  41fea2:	00 00 00 
  41fea5:	41 55                	push   %r13
  41fea7:	41 54                	push   %r12
  41fea9:	55                   	push   %rbp
  41feaa:	53                   	push   %rbx
  41feab:	4d 01 df             	add    %r11,%r15
  41feae:	48 b8 d0 ff ff ff ff 	movabs $0xffffffffffffffd0,%rax
  41feb5:	ff ff ff 
  41feb8:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  41febf:	ff ff ff 
  41fec2:	48 ba c0 c3 de ff ff 	movabs $0xffffffffffdec3c0,%rdx
  41fec9:	ff ff ff 
  41fecc:	48 83 ec 18          	sub    $0x18,%rsp
  41fed0:	49 8b 04 07          	mov    (%r15,%rax,1),%rax
  41fed4:	4c 8b b7 80 00 00 00 	mov    0x80(%rdi),%r14
  41fedb:	4c 01 fb             	add    %r15,%rbx
  41fede:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  41fee3:	4e 8d 24 3a          	lea    (%rdx,%r15,1),%r12
  41fee7:	4c 8d 6f 70          	lea    0x70(%rdi),%r13
  41feeb:	48 83 c0 10          	add    $0x10,%rax
      while (__x != 0)
  41feef:	4d 85 f6             	test   %r14,%r14
  41fef2:	48 89 07             	mov    %rax,(%rdi)
  41fef5:	74 42                	je     41ff39 <_ZN5boost15program_options13variables_mapD1Ev+0xa9>
  41fef7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41fefe:	00 00 
	  _M_erase(_S_right(__x));
  41ff00:	4c 89 ef             	mov    %r13,%rdi
  41ff03:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41ff07:	41 ff d4             	callq  *%r12
  41ff0a:	49 8b 7e 40          	mov    0x40(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ff0e:	49 8d 56 50          	lea    0x50(%r14),%rdx
  41ff12:	49 8b 6e 10          	mov    0x10(%r14),%rbp
	if (!_M_is_local())
  41ff16:	48 39 d7             	cmp    %rdx,%rdi
  41ff19:	74 02                	je     41ff1d <_ZN5boost15program_options13variables_mapD1Ev+0x8d>
  41ff1b:	ff d3                	callq  *%rbx
  41ff1d:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ff21:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  41ff25:	48 39 d7             	cmp    %rdx,%rdi
  41ff28:	74 02                	je     41ff2c <_ZN5boost15program_options13variables_mapD1Ev+0x9c>
  41ff2a:	ff d3                	callq  *%rbx
  41ff2c:	4c 89 f7             	mov    %r14,%rdi
  41ff2f:	49 89 ee             	mov    %rbp,%r14
  41ff32:	ff d3                	callq  *%rbx
      while (__x != 0)
  41ff34:	48 85 ed             	test   %rbp,%rbp
  41ff37:	75 c7                	jne    41ff00 <_ZN5boost15program_options13variables_mapD1Ev+0x70>
  41ff39:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41ff3e:	4c 8d 60 40          	lea    0x40(%rax),%r12
  41ff42:	48 8b 40 50          	mov    0x50(%rax),%rax
  41ff46:	48 85 c0             	test   %rax,%rax
  41ff49:	74 4f                	je     41ff9a <_ZN5boost15program_options13variables_mapD1Ev+0x10a>
  41ff4b:	48 ba 60 49 df ff ff 	movabs $0xffffffffffdf4960,%rdx
  41ff52:	ff ff ff 
  41ff55:	48 bb a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbx
  41ff5c:	ff ff ff 
  41ff5f:	49 89 c6             	mov    %rax,%r14
	  _M_erase(_S_right(__x));
  41ff62:	4e 8d 2c 3a          	lea    (%rdx,%r15,1),%r13
  41ff66:	4c 01 fb             	add    %r15,%rbx
  41ff69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41ff70:	4c 89 e7             	mov    %r12,%rdi
  41ff73:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41ff77:	41 ff d5             	callq  *%r13
  41ff7a:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ff7e:	49 8d 56 30          	lea    0x30(%r14),%rdx
  41ff82:	49 8b 6e 10          	mov    0x10(%r14),%rbp
	if (!_M_is_local())
  41ff86:	48 39 d7             	cmp    %rdx,%rdi
  41ff89:	74 02                	je     41ff8d <_ZN5boost15program_options13variables_mapD1Ev+0xfd>
  41ff8b:	ff d3                	callq  *%rbx
  41ff8d:	4c 89 f7             	mov    %r14,%rdi
  41ff90:	49 89 ee             	mov    %rbp,%r14
  41ff93:	ff d3                	callq  *%rbx
      while (__x != 0)
  41ff95:	48 85 ed             	test   %rbp,%rbp
  41ff98:	75 d6                	jne    41ff70 <_ZN5boost15program_options13variables_mapD1Ev+0xe0>
      { _M_erase(_M_begin()); }
  41ff9a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41ff9f:	48 8b 70 20          	mov    0x20(%rax),%rsi
  41ffa3:	48 8d 78 10          	lea    0x10(%rax),%rdi
  41ffa7:	48 83 c4 18          	add    $0x18,%rsp
  41ffab:	48 b8 50 48 df ff ff 	movabs $0xffffffffffdf4850,%rax
  41ffb2:	ff ff ff 
  41ffb5:	5b                   	pop    %rbx
  41ffb6:	4c 01 f8             	add    %r15,%rax
  41ffb9:	5d                   	pop    %rbp
  41ffba:	41 5c                	pop    %r12
  41ffbc:	41 5d                	pop    %r13
  41ffbe:	41 5e                	pop    %r14
  41ffc0:	41 5f                	pop    %r15
  41ffc2:	ff e0                	jmpq   *%rax
  41ffc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ffcb:	00 00 00 
  41ffce:	66 90                	xchg   %ax,%ax

000000000041ffd0 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_>:
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  41ffd0:	41 57                	push   %r15
  41ffd2:	41 56                	push   %r14
  41ffd4:	49 bb 30 b0 20 00 00 	movabs $0x20b030,%r11
  41ffdb:	00 00 00 
  41ffde:	41 55                	push   %r13
  41ffe0:	41 54                	push   %r12
  41ffe2:	49 89 fd             	mov    %rdi,%r13
  41ffe5:	55                   	push   %rbp
  41ffe6:	53                   	push   %rbx
  41ffe7:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41ffd0 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_>
    throw enable_current_exception(enable_error_info(e));
  41ffee:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41fff5:	ff ff ff 
  41fff8:	bf 40 00 00 00       	mov    $0x40,%edi
  41fffd:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  420000:	48 83 ec 48          	sub    $0x48,%rsp
    throw enable_current_exception(enable_error_info(e));
  420004:	49 89 df             	mov    %rbx,%r15
  420007:	48 01 d8             	add    %rbx,%rax
class bad_function_call : public std::runtime_error
  42000a:	49 89 e4             	mov    %rsp,%r12
  42000d:	ff d0                	callq  *%rax
  42000f:	4c 89 ee             	mov    %r13,%rsi
  420012:	49 bd f0 e8 dd ff ff 	movabs $0xffffffffffdde8f0,%r13
  420019:	ff ff ff 
  42001c:	48 89 c5             	mov    %rax,%rbp
  42001f:	49 01 dd             	add    %rbx,%r13
  420022:	48 89 e7             	mov    %rsp,%rdi
  420025:	41 ff d5             	callq  *%r13
                T(x)
  420028:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  42002f:	ff ff ff 
  420032:	48 89 ef             	mov    %rbp,%rdi
                px_(0)
  420035:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  42003c:	00 00 
                T(x)
  42003e:	48 01 d8             	add    %rbx,%rax
            throw_line_(-1)
  420041:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  420048:	00 00 
  42004a:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  420051:	00 00 
                T(x)
  420053:	48 89 04 24          	mov    %rax,(%rsp)
  420057:	48 83 c0 28          	add    $0x28,%rax
            throw_line_(-1)
  42005b:	c7 44 24 30 ff ff ff 	movl   $0xffffffff,0x30(%rsp)
  420062:	ff 
                T(x)
  420063:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        clone_base
  420068:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  42006f:	ff ff ff 
  420072:	48 89 e6             	mov    %rsp,%rsi
  420075:	48 01 d8             	add    %rbx,%rax
  420078:	48 89 45 38          	mov    %rax,0x38(%rbp)
  42007c:	41 ff d5             	callq  *%r13
  42007f:	49 bd 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%r13
  420086:	ff ff ff 
                px_(x.px_)
  420089:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  42008e:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  420093:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  420097:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  42009e:	ff ff ff 
                px_(x.px_)
  4200a1:	48 89 7d 18          	mov    %rdi,0x18(%rbp)
    exception
  4200a5:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  4200a8:	48 85 ff             	test   %rdi,%rdi
    exception
  4200ab:	48 89 45 10          	mov    %rax,0x10(%rbp)
                if( px_ )
  4200af:	74 06                	je     4200b7 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_+0xe7>
                    px_->add_ref();
  4200b1:	48 8b 07             	mov    (%rdi),%rax
  4200b4:	ff 50 18             	callq  *0x18(%rax)
    exception
  4200b7:	8b 44 24 30          	mov    0x30(%rsp),%eax
                copy_boost_exception(this,&x);
  4200bb:	49 8d 74 24 10       	lea    0x10(%r12),%rsi
  4200c0:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
    exception
  4200c4:	66 0f 6f 44 24 20    	movdqa 0x20(%rsp),%xmm0
  4200ca:	89 45 30             	mov    %eax,0x30(%rbp)
                T(x)
  4200cd:	48 b8 20 f3 ff ff ff 	movabs $0xfffffffffffff320,%rax
  4200d4:	ff ff ff 
  4200d7:	48 01 d8             	add    %rbx,%rax
  4200da:	48 8d 50 38          	lea    0x38(%rax),%rdx
  4200de:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4200e2:	48 83 c0 70          	add    $0x70,%rax
  4200e6:	48 89 45 38          	mov    %rax,0x38(%rbp)
                copy_boost_exception(this,&x);
  4200ea:	48 b8 70 a3 de ff ff 	movabs $0xffffffffffdea370,%rax
  4200f1:	ff ff ff 
    exception
  4200f4:	0f 11 45 20          	movups %xmm0,0x20(%rbp)
                T(x)
  4200f8:	48 89 55 10          	mov    %rdx,0x10(%rbp)
                copy_boost_exception(this,&x);
  4200fc:	48 01 d8             	add    %rbx,%rax
  4200ff:	ff d0                	callq  *%rax
  420101:	48 b8 20 8d de ff ff 	movabs $0xffffffffffde8d20,%rax
  420108:	ff ff ff 
  42010b:	4c 89 e7             	mov    %r12,%rdi
  42010e:	49 89 df             	mov    %rbx,%r15
  420111:	48 01 d8             	add    %rbx,%rax
  420114:	ff d0                	callq  *%rax
  420116:	48 b8 b0 9c de ff ff 	movabs $0xffffffffffde9cb0,%rax
  42011d:	ff ff ff 
  420120:	48 89 ef             	mov    %rbp,%rdi
  420123:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  420127:	48 b8 78 f1 ff ff ff 	movabs $0xfffffffffffff178,%rax
  42012e:	ff ff ff 
  420131:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  420135:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  42013c:	ff ff ff 
  42013f:	48 01 d8             	add    %rbx,%rax
  420142:	ff d0                	callq  *%rax
  420144:	49 8d 54 1d 00       	lea    0x0(%r13,%rbx,1),%rdx
  420149:	49 89 c6             	mov    %rax,%r14
  42014c:	48 89 ef             	mov    %rbp,%rdi
  42014f:	4d 89 f5             	mov    %r14,%r13
  420152:	49 89 df             	mov    %rbx,%r15
  420155:	48 89 55 00          	mov    %rdx,0x0(%rbp)
  420159:	48 ba 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rdx
  420160:	ff ff ff 
  420163:	48 01 da             	add    %rbx,%rdx
  420166:	ff d2                	callq  *%rdx
  420168:	48 b8 20 8d de ff ff 	movabs $0xffffffffffde8d20,%rax
  42016f:	ff ff ff 
  420172:	4c 89 e7             	mov    %r12,%rdi
  420175:	49 89 df             	mov    %rbx,%r15
  420178:	48 01 d8             	add    %rbx,%rax
  42017b:	ff d0                	callq  *%rax
  42017d:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  420184:	ff ff ff 
  420187:	48 89 ef             	mov    %rbp,%rdi
  42018a:	48 01 d8             	add    %rbx,%rax
  42018d:	ff d0                	callq  *%rax
  42018f:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  420196:	ff ff ff 
  420199:	4c 89 ef             	mov    %r13,%rdi
  42019c:	48 01 d8             	add    %rbx,%rax
  42019f:	ff d0                	callq  *%rax
  4201a1:	49 89 c5             	mov    %rax,%r13
                T(x)
  4201a4:	48 b8 20 8d de ff ff 	movabs $0xffffffffffde8d20,%rax
  4201ab:	ff ff ff 
  4201ae:	48 89 ef             	mov    %rbp,%rdi
  4201b1:	48 01 d8             	add    %rbx,%rax
  4201b4:	ff d0                	callq  *%rax
  4201b6:	eb b0                	jmp    420168 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_+0x198>
  4201b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4201bf:	00 

00000000004201c0 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE>:
    typed_value<T, charT>::notify(const boost::any& value_store) const
  4201c0:	41 57                	push   %r15
  4201c2:	41 54                	push   %r12
  4201c4:	49 bb 40 ae 20 00 00 	movabs $0x20ae40,%r11
  4201cb:	00 00 00 
  4201ce:	55                   	push   %rbp
  4201cf:	53                   	push   %rbx
  4201d0:	48 89 fd             	mov    %rdi,%rbp
  4201d3:	48 8d 1d e6 ff ff ff 	lea    -0x1a(%rip),%rbx        # 4201c0 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE>
  4201da:	49 89 f4             	mov    %rsi,%r12
  4201dd:	48 83 ec 08          	sub    $0x8,%rsp
            return content ? content->type() : boost::typeindex::type_id<void>().type_info();
  4201e1:	48 8b 3e             	mov    (%rsi),%rdi
  4201e4:	4c 01 db             	add    %r11,%rbx
  4201e7:	48 85 ff             	test   %rdi,%rdi
  4201ea:	0f 84 a8 00 00 00    	je     420298 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xd8>
  4201f0:	48 8b 07             	mov    (%rdi),%rax
  4201f3:	48 ba 20 81 de ff ff 	movabs $0xffffffffffde8120,%rdx
  4201fa:	ff ff ff 
  4201fd:	48 01 da             	add    %rbx,%rdx
  420200:	48 8b 40 10          	mov    0x10(%rax),%rax
  420204:	48 39 d0             	cmp    %rdx,%rax
  420207:	0f 85 bb 00 00 00    	jne    4202c8 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x108>
  42020d:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  420214:	ff ff ff 
  420217:	48 8b 04 1a          	mov    (%rdx,%rbx,1),%rax
  42021b:	48 8b 78 08          	mov    0x8(%rax),%rdi
  42021f:	48 8b 04 1a          	mov    (%rdx,%rbx,1),%rax
  420223:	48 8b 70 08          	mov    0x8(%rax),%rsi
	: __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    {
      return ((__name == __arg.__name)
	      || (__name[0] != '*' &&
  420227:	48 39 f7             	cmp    %rsi,%rdi
  42022a:	74 5c                	je     420288 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xc8>
  42022c:	80 3f 2a             	cmpb   $0x2a,(%rdi)
  42022f:	74 16                	je     420247 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x87>
		  __builtin_strcmp (__name, __arg.__name) == 0));
  420231:	48 b8 50 e9 dd ff ff 	movabs $0xffffffffffdde950,%rax
  420238:	ff ff ff 
  42023b:	49 89 df             	mov    %rbx,%r15
  42023e:	48 01 d8             	add    %rbx,%rax
  420241:	ff d0                	callq  *%rax
	      || (__name[0] != '*' &&
  420243:	85 c0                	test   %eax,%eax
  420245:	74 41                	je     420288 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xc8>

    template<typename ValueType>
    ValueType * any_cast(any * operand) BOOST_NOEXCEPT
    {
        return operand && operand->type() == boost::typeindex::type_id<ValueType>()
            ? boost::addressof(
  420247:	31 f6                	xor    %esi,%esi
        if (m_store_to) {
  420249:	48 8b 45 10          	mov    0x10(%rbp),%rax
  42024d:	48 85 c0             	test   %rax,%rax
  420250:	74 08                	je     42025a <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x9a>
            *m_store_to = *value;
  420252:	f3 0f 10 06          	movss  (%rsi),%xmm0
  420256:	f3 0f 11 00          	movss  %xmm0,(%rax)
  42025a:	48 8b 85 90 00 00 00 	mov    0x90(%rbp),%rax
      { return (this->empty())? 0 : &dummy::nonnull; }
  420261:	48 85 c0             	test   %rax,%rax
  420264:	74 52                	je     4202b8 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xf8>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  420266:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
      return get_vtable()->invoker
  42026a:	48 8d bd 98 00 00 00 	lea    0x98(%rbp),%rdi
               (this->functor BOOST_FUNCTION_COMMA BOOST_FUNCTION_ARGS);
  420271:	48 8b 40 08          	mov    0x8(%rax),%rax
    }
  420275:	48 83 c4 08          	add    $0x8,%rsp
  420279:	5b                   	pop    %rbx
  42027a:	5d                   	pop    %rbp
  42027b:	41 5c                	pop    %r12
  42027d:	41 5f                	pop    %r15
  42027f:	ff e0                	jmpq   *%rax
  420281:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  420288:	49 8b 34 24          	mov    (%r12),%rsi
  42028c:	48 83 c6 08          	add    $0x8,%rsi
  420290:	eb b7                	jmp    420249 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x89>
  420292:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            return content ? content->type() : boost::typeindex::type_id<void>().type_info();
  420298:	48 b8 a0 ff ff ff ff 	movabs $0xffffffffffffffa0,%rax
  42029f:	ff ff ff 
  4202a2:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  4202a9:	ff ff ff 
  4202ac:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4202b0:	e9 66 ff ff ff       	jmpq   42021b <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x5b>
  4202b5:	0f 1f 00             	nopl   (%rax)
  4202b8:	48 83 c4 08          	add    $0x8,%rsp
  4202bc:	5b                   	pop    %rbx
  4202bd:	5d                   	pop    %rbp
  4202be:	41 5c                	pop    %r12
  4202c0:	41 5f                	pop    %r15
  4202c2:	c3                   	retq   
  4202c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4202c8:	ff d0                	callq  *%rax
  4202ca:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  4202d1:	ff ff ff 
  4202d4:	e9 42 ff ff ff       	jmpq   42021b <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x5b>
  4202d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004202e0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE>:
    typed_value<T, charT>::notify(const boost::any& value_store) const
  4202e0:	41 57                	push   %r15
  4202e2:	41 54                	push   %r12
  4202e4:	49 bb 20 ad 20 00 00 	movabs $0x20ad20,%r11
  4202eb:	00 00 00 
  4202ee:	55                   	push   %rbp
  4202ef:	53                   	push   %rbx
  4202f0:	48 89 fd             	mov    %rdi,%rbp
  4202f3:	48 8d 1d e6 ff ff ff 	lea    -0x1a(%rip),%rbx        # 4202e0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE>
  4202fa:	49 89 f4             	mov    %rsi,%r12
  4202fd:	48 83 ec 08          	sub    $0x8,%rsp
  420301:	48 8b 3e             	mov    (%rsi),%rdi
  420304:	4c 01 db             	add    %r11,%rbx
  420307:	48 85 ff             	test   %rdi,%rdi
  42030a:	0f 84 b0 00 00 00    	je     4203c0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xe0>
  420310:	48 8b 07             	mov    (%rdi),%rax
  420313:	48 ba 20 81 de ff ff 	movabs $0xffffffffffde8120,%rdx
  42031a:	ff ff ff 
  42031d:	48 01 da             	add    %rbx,%rdx
  420320:	48 8b 40 10          	mov    0x10(%rax),%rax
  420324:	48 39 d0             	cmp    %rdx,%rax
  420327:	0f 85 bb 00 00 00    	jne    4203e8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x108>
  42032d:	48 b8 b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rax
  420334:	ff ff ff 
  420337:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  42033b:	48 8b 70 08          	mov    0x8(%rax),%rsi
  42033f:	48 b8 60 91 df ff ff 	movabs $0xffffffffffdf9160,%rax
  420346:	ff ff ff 
  420349:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  42034d:	48 39 fe             	cmp    %rdi,%rsi
  420350:	74 5e                	je     4203b0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xd0>
  420352:	80 3e 2a             	cmpb   $0x2a,(%rsi)
  420355:	74 09                	je     420360 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x80>
		  __builtin_strcmp (__name, __arg.__name) == 0));
  420357:	b9 35 00 00 00       	mov    $0x35,%ecx
	      || (__name[0] != '*' &&
  42035c:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  42035e:	74 50                	je     4203b0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xd0>
            ? boost::addressof(
  420360:	45 31 e4             	xor    %r12d,%r12d
        if (m_store_to) {
  420363:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  420367:	48 85 ff             	test   %rdi,%rdi
  42036a:	74 15                	je     420381 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xa1>
	this->_M_assign(__str);
  42036c:	48 b8 b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%rax
  420373:	ff ff ff 
  420376:	4c 89 e6             	mov    %r12,%rsi
  420379:	49 89 df             	mov    %rbx,%r15
  42037c:	48 01 d8             	add    %rbx,%rax
  42037f:	ff d0                	callq  *%rax
  420381:	48 8b 85 90 00 00 00 	mov    0x90(%rbp),%rax
      { return (this->empty())? 0 : &dummy::nonnull; }
  420388:	48 85 c0             	test   %rax,%rax
  42038b:	74 4b                	je     4203d8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xf8>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  42038d:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
      return get_vtable()->invoker
  420391:	48 8d bd 98 00 00 00 	lea    0x98(%rbp),%rdi
               (this->functor BOOST_FUNCTION_COMMA BOOST_FUNCTION_ARGS);
  420398:	4c 89 e6             	mov    %r12,%rsi
  42039b:	48 8b 40 08          	mov    0x8(%rax),%rax
    }
  42039f:	48 83 c4 08          	add    $0x8,%rsp
  4203a3:	5b                   	pop    %rbx
  4203a4:	5d                   	pop    %rbp
  4203a5:	41 5c                	pop    %r12
  4203a7:	41 5f                	pop    %r15
  4203a9:	ff e0                	jmpq   *%rax
  4203ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4203b0:	4d 8b 24 24          	mov    (%r12),%r12
  4203b4:	49 83 c4 08          	add    $0x8,%r12
  4203b8:	eb a9                	jmp    420363 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x83>
  4203ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            return content ? content->type() : boost::typeindex::type_id<void>().type_info();
  4203c0:	48 b8 a0 ff ff ff ff 	movabs $0xffffffffffffffa0,%rax
  4203c7:	ff ff ff 
  4203ca:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4203ce:	e9 68 ff ff ff       	jmpq   42033b <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x5b>
  4203d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4203d8:	48 83 c4 08          	add    $0x8,%rsp
  4203dc:	5b                   	pop    %rbx
  4203dd:	5d                   	pop    %rbp
  4203de:	41 5c                	pop    %r12
  4203e0:	41 5f                	pop    %r15
  4203e2:	c3                   	retq   
  4203e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4203e8:	ff d0                	callq  *%rax
  4203ea:	e9 4c ff ff ff       	jmpq   42033b <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x5b>
  4203ef:	90                   	nop

00000000004203f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_>:
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
  4203f0:	41 57                	push   %r15
  4203f2:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 4203f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_>
  4203f9:	41 56                	push   %r14
  4203fb:	41 55                	push   %r13
  4203fd:	41 54                	push   %r12
  4203ff:	49 bb 10 ac 20 00 00 	movabs $0x20ac10,%r11
  420406:	00 00 00 
  420409:	55                   	push   %rbp
  42040a:	53                   	push   %rbx
  42040b:	4c 01 d8             	add    %r11,%rax
  42040e:	48 89 f3             	mov    %rsi,%rbx
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  420411:	49 bd c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%r13
  420418:	ff ff ff 
  42041b:	49 89 c7             	mov    %rax,%r15
  42041e:	48 83 ec 38          	sub    $0x38,%rsp
  420422:	49 89 d4             	mov    %rdx,%r12
          _M_construct(__beg, __end, _Tag());
  420425:	49 be 20 2c de ff ff 	movabs $0xffffffffffde2c20,%r14
  42042c:	ff ff ff 
  42042f:	48 89 04 24          	mov    %rax,(%rsp)
  420433:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  420438:	4c 01 e8             	add    %r13,%rax
  42043b:	bf 60 00 00 00       	mov    $0x60,%edi
  420440:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  420445:	ff d0                	callq  *%rax
  420447:	48 8b 73 20          	mov    0x20(%rbx),%rsi
  42044b:	4c 8b 3c 24          	mov    (%rsp),%r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  42044f:	48 8d 68 30          	lea    0x30(%rax),%rbp
  420453:	48 8d 78 20          	lea    0x20(%rax),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420457:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  42045c:	48 89 68 20          	mov    %rbp,0x20(%rax)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420460:	48 89 f2             	mov    %rsi,%rdx
          _M_construct(__beg, __end, _Tag());
  420463:	4c 89 f8             	mov    %r15,%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420466:	48 03 53 28          	add    0x28(%rbx),%rdx
          _M_construct(__beg, __end, _Tag());
  42046a:	4c 01 f0             	add    %r14,%rax
  42046d:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  42046f:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  420474:	48 8b 73 40          	mov    0x40(%rbx),%rsi
  420478:	48 8d 41 50          	lea    0x50(%rcx),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  42047c:	48 89 f2             	mov    %rsi,%rdx
  42047f:	48 03 53 48          	add    0x48(%rbx),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420483:	48 8d 79 40          	lea    0x40(%rcx),%rdi
  420487:	48 89 41 40          	mov    %rax,0x40(%rcx)
          _M_construct(__beg, __end, _Tag());
  42048b:	4c 89 f8             	mov    %r15,%rax
  42048e:	4c 01 f0             	add    %r14,%rax
  420491:	ff d0                	callq  *%rax
	    if (__x->_M_right)
  420493:	48 8b 73 18          	mov    0x18(%rbx),%rsi
	  __tmp->_M_color = __x->_M_color;
  420497:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  42049c:	8b 03                	mov    (%rbx),%eax
	    if (__x->_M_right)
  42049e:	48 85 f6             	test   %rsi,%rsi
	  __tmp->_M_left = 0;
  4204a1:	48 c7 41 10 00 00 00 	movq   $0x0,0x10(%rcx)
  4204a8:	00 
	  __tmp->_M_right = 0;
  4204a9:	49 89 cf             	mov    %rcx,%r15
	  __tmp->_M_color = __x->_M_color;
  4204ac:	89 01                	mov    %eax,(%rcx)
	  __tmp->_M_right = 0;
  4204ae:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
  4204b5:	00 
	__top->_M_parent = __p;
  4204b6:	4c 89 61 08          	mov    %r12,0x8(%rcx)
	    if (__x->_M_right)
  4204ba:	74 24                	je     4204e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0xf0>
	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
  4204bc:	4c 8b 04 24          	mov    (%rsp),%r8
  4204c0:	48 b8 f0 53 df ff ff 	movabs $0xffffffffffdf53f0,%rax
  4204c7:	ff ff ff 
  4204ca:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  4204cf:	4c 89 fa             	mov    %r15,%rdx
  4204d2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4204d7:	4c 01 c0             	add    %r8,%rax
  4204da:	ff d0                	callq  *%rax
  4204dc:	49 89 47 18          	mov    %rax,0x18(%r15)
	    while (__x != 0)
  4204e0:	48 8b 6b 10          	mov    0x10(%rbx),%rbp
  4204e4:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
  4204e9:	48 85 ed             	test   %rbp,%rbp
  4204ec:	0f 84 bc 00 00 00    	je     4205ae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x1be>
  4204f2:	48 8b 0c 24          	mov    (%rsp),%rcx
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  4204f6:	48 b8 f0 53 df ff ff 	movabs $0xffffffffffdf53f0,%rax
  4204fd:	ff ff ff 
  420500:	49 01 cd             	add    %rcx,%r13
  420503:	48 01 c8             	add    %rcx,%rax
  420506:	49 01 ce             	add    %rcx,%r14
  420509:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  42050e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  420513:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  420518:	bf 60 00 00 00       	mov    $0x60,%edi
  42051d:	4c 8b 3c 24          	mov    (%rsp),%r15
  420521:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420526:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420528:	4c 8d 68 30          	lea    0x30(%rax),%r13
  42052c:	48 89 c3             	mov    %rax,%rbx
  42052f:	48 8d 78 20          	lea    0x20(%rax),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420533:	4c 89 68 20          	mov    %r13,0x20(%rax)
  420537:	48 8b 75 20          	mov    0x20(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  42053b:	48 89 f2             	mov    %rsi,%rdx
  42053e:	48 03 55 28          	add    0x28(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420542:	41 ff d6             	callq  *%r14
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420545:	48 8d 43 50          	lea    0x50(%rbx),%rax
  420549:	48 8d 7b 40          	lea    0x40(%rbx),%rdi
  42054d:	48 89 43 40          	mov    %rax,0x40(%rbx)
  420551:	48 8b 75 40          	mov    0x40(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420555:	48 89 f2             	mov    %rsi,%rdx
  420558:	48 03 55 48          	add    0x48(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  42055c:	41 ff d6             	callq  *%r14
	  __tmp->_M_color = __x->_M_color;
  42055f:	8b 45 00             	mov    0x0(%rbp),%eax
	  __tmp->_M_right = 0;
  420562:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  420569:	00 
		if (__x->_M_right)
  42056a:	48 8b 75 18          	mov    0x18(%rbp),%rsi
	  __tmp->_M_left = 0;
  42056e:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  420575:	00 
	  __tmp->_M_color = __x->_M_color;
  420576:	89 03                	mov    %eax,(%rbx)
		__p->_M_left = __y;
  420578:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
		if (__x->_M_right)
  42057d:	48 85 f6             	test   %rsi,%rsi
		__y->_M_parent = __p;
  420580:	4c 89 63 08          	mov    %r12,0x8(%rbx)
		if (__x->_M_right)
  420584:	74 18                	je     42059e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x1ae>
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  420586:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  42058b:	48 89 da             	mov    %rbx,%rdx
  42058e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  420593:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  420598:	ff d0                	callq  *%rax
  42059a:	48 89 43 18          	mov    %rax,0x18(%rbx)
  42059e:	48 8b 6d 10          	mov    0x10(%rbp),%rbp
  4205a2:	49 89 dc             	mov    %rbx,%r12
	    while (__x != 0)
  4205a5:	48 85 ed             	test   %rbp,%rbp
  4205a8:	0f 85 6a ff ff ff    	jne    420518 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x128>
      }
  4205ae:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4205b3:	48 83 c4 38          	add    $0x38,%rsp
  4205b7:	5b                   	pop    %rbx
  4205b8:	5d                   	pop    %rbp
  4205b9:	41 5c                	pop    %r12
  4205bb:	41 5d                	pop    %r13
  4205bd:	41 5e                	pop    %r14
  4205bf:	41 5f                	pop    %r15
  4205c1:	c3                   	retq   
  4205c2:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  4205c9:	ff ff ff 
	  __catch(...)
  4205cc:	48 8b 1c 24          	mov    (%rsp),%rbx
  4205d0:	48 89 c7             	mov    %rax,%rdi
  4205d3:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  4205da:	ff ff ff 
  4205dd:	49 89 df             	mov    %rbx,%r15
  4205e0:	48 01 d8             	add    %rbx,%rax
      { ::operator delete(__p); }
  4205e3:	49 01 dc             	add    %rbx,%r12
  4205e6:	ff d0                	callq  *%rax
  4205e8:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  4205ed:	41 ff d4             	callq  *%r12
	      __throw_exception_again;
  4205f0:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  4205f7:	ff ff ff 
  4205fa:	48 01 d8             	add    %rbx,%rax
  4205fd:	ff d0                	callq  *%rax
  4205ff:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  420603:	48 89 c5             	mov    %rax,%rbp
  420606:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  42060d:	ff ff ff 
	if (!_M_is_local())
  420610:	49 39 fd             	cmp    %rdi,%r13
  420613:	74 0c                	je     420621 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x231>
  420615:	48 8b 04 24          	mov    (%rsp),%rax
  420619:	49 89 c7             	mov    %rax,%r15
  42061c:	4c 01 e0             	add    %r12,%rax
  42061f:	ff d0                	callq  *%rax
  420621:	48 89 e8             	mov    %rbp,%rax
	  __catch(...)
  420624:	4c 8b 34 24          	mov    (%rsp),%r14
  420628:	48 89 c7             	mov    %rax,%rdi
  42062b:	48 bd 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rbp
  420632:	ff ff ff 
  420635:	4c 89 f0             	mov    %r14,%rax
  420638:	4d 89 f7             	mov    %r14,%r15
  42063b:	4d 01 f4             	add    %r14,%r12
  42063e:	48 01 e8             	add    %rbp,%rax
  420641:	ff d0                	callq  *%rax
  420643:	48 89 df             	mov    %rbx,%rdi
	      __throw_exception_again;
  420646:	48 bb 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rbx
  42064d:	ff ff ff 
  420650:	41 ff d4             	callq  *%r12
  420653:	4c 89 f0             	mov    %r14,%rax
  420656:	48 01 d8             	add    %rbx,%rax
  420659:	ff d0                	callq  *%rax
  42065b:	48 bd 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rbp
  420662:	ff ff ff 
  420665:	48 bb 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rbx
  42066c:	ff ff ff 
  42066f:	49 bc 20 ea dd ff ff 	movabs $0xffffffffffddea20,%r12
  420676:	ff ff ff 
	__catch(...)
  420679:	4c 8b 34 24          	mov    (%rsp),%r14
  42067d:	48 89 c7             	mov    %rax,%rdi
  420680:	4d 89 f7             	mov    %r14,%r15
  420683:	4c 01 f5             	add    %r14,%rbp
	    __throw_exception_again;
  420686:	4c 01 f3             	add    %r14,%rbx
	__catch(...)
  420689:	ff d5                	callq  *%rbp
	    _M_erase(__top);
  42068b:	48 b8 c0 c3 de ff ff 	movabs $0xffffffffffdec3c0,%rax
  420692:	ff ff ff 
  420695:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  42069a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  42069f:	4c 01 f0             	add    %r14,%rax
  4206a2:	ff d0                	callq  *%rax
	    __throw_exception_again;
  4206a4:	ff d3                	callq  *%rbx
  4206a6:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  4206ad:	ff ff ff 
  4206b0:	e9 6f ff ff ff       	jmpq   420624 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x234>
  4206b5:	48 89 c3             	mov    %rax,%rbx
  4206b8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4206bd:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  4206c4:	ff ff ff 
  4206c7:	48 8b 78 20          	mov    0x20(%rax),%rdi
  4206cb:	48 39 fd             	cmp    %rdi,%rbp
  4206ce:	74 0c                	je     4206dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x2ec>
  4206d0:	48 8b 04 24          	mov    (%rsp),%rax
  4206d4:	49 89 c7             	mov    %rax,%r15
  4206d7:	4c 01 e0             	add    %r12,%rax
  4206da:	ff d0                	callq  *%rax
  4206dc:	48 89 d8             	mov    %rbx,%rax
  4206df:	e9 e8 fe ff ff       	jmpq   4205cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x1dc>
  4206e4:	49 89 c5             	mov    %rax,%r13
	  __catch(...)
  4206e7:	48 8b 04 24          	mov    (%rsp),%rax
  4206eb:	49 bc 20 ea dd ff ff 	movabs $0xffffffffffddea20,%r12
  4206f2:	ff ff ff 
  4206f5:	49 89 c7             	mov    %rax,%r15
  4206f8:	4c 01 e0             	add    %r12,%rax
  4206fb:	ff d0                	callq  *%rax
  4206fd:	4c 89 e8             	mov    %r13,%rax
  420700:	e9 74 ff ff ff       	jmpq   420679 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x289>
  420705:	4c 8b 34 24          	mov    (%rsp),%r14
  420709:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  420710:	ff ff ff 
  420713:	48 89 c3             	mov    %rax,%rbx
  420716:	4d 89 f7             	mov    %r14,%r15
  420719:	4c 01 f2             	add    %r14,%rdx
  42071c:	ff d2                	callq  *%rdx
  42071e:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  420725:	ff ff ff 
  420728:	48 89 df             	mov    %rbx,%rdi
  42072b:	4c 01 f0             	add    %r14,%rax
  42072e:	ff d0                	callq  *%rax
	__catch(...)
  420730:	4c 8b 34 24          	mov    (%rsp),%r14
  420734:	48 89 c3             	mov    %rax,%rbx
  420737:	4d 89 f7             	mov    %r14,%r15
  42073a:	4d 01 f4             	add    %r14,%r12
  42073d:	41 ff d4             	callq  *%r12
  420740:	eb dc                	jmp    42071e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x32e>
  420742:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  420749:	00 00 00 
  42074c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000420750 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_>:
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
  420750:	41 57                	push   %r15
  420752:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 420750 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_>
  420759:	41 56                	push   %r14
  42075b:	41 55                	push   %r13
  42075d:	41 54                	push   %r12
  42075f:	49 bb b0 a8 20 00 00 	movabs $0x20a8b0,%r11
  420766:	00 00 00 
  420769:	55                   	push   %rbp
  42076a:	53                   	push   %rbx
  42076b:	4c 01 d8             	add    %r11,%rax
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  42076e:	49 bd c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%r13
  420775:	ff ff ff 
  420778:	48 89 f3             	mov    %rsi,%rbx
  42077b:	49 89 c7             	mov    %rax,%r15
  42077e:	48 83 ec 48          	sub    $0x48,%rsp
  420782:	49 89 d4             	mov    %rdx,%r12
  420785:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42078a:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  42078f:	4c 01 e8             	add    %r13,%rax
  420792:	bf 80 00 00 00       	mov    $0x80,%edi
  420797:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  42079c:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  42079e:	48 8d 68 30          	lea    0x30(%rax),%rbp
  4207a2:	48 8b 73 20          	mov    0x20(%rbx),%rsi
  4207a6:	49 89 c6             	mov    %rax,%r14
  4207a9:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  4207ae:	48 8d 78 20          	lea    0x20(%rax),%rdi
          _M_construct(__beg, __end, _Tag());
  4207b2:	49 bf 20 2c de ff ff 	movabs $0xffffffffffde2c20,%r15
  4207b9:	ff ff ff 
	: allocator_type(__a), _M_p(__dat) { }
  4207bc:	48 89 68 20          	mov    %rbp,0x20(%rax)
          _M_construct(__beg, __end, _Tag());
  4207c0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  4207c5:	48 89 f2             	mov    %rsi,%rdx
  4207c8:	48 03 53 28          	add    0x28(%rbx),%rdx
          _M_construct(__beg, __end, _Tag());
  4207cc:	4c 01 f8             	add    %r15,%rax
  4207cf:	ff d0                	callq  *%rax
  4207d1:	48 8b 73 40          	mov    0x40(%rbx),%rsi
  4207d5:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4207da:	4c 89 f0             	mov    %r14,%rax
  4207dd:	49 8d 7e 40          	lea    0x40(%r14),%rdi
  4207e1:	4d 8d 76 50          	lea    0x50(%r14),%r14
	: allocator_type(__a), _M_p(__dat) { }
  4207e5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  4207ea:	48 89 f2             	mov    %rsi,%rdx
  4207ed:	48 03 53 48          	add    0x48(%rbx),%rdx
	: allocator_type(__a), _M_p(__dat) { }
  4207f1:	4c 89 70 40          	mov    %r14,0x40(%rax)
          _M_construct(__beg, __end, _Tag());
  4207f5:	4b 8d 04 07          	lea    (%r15,%r8,1),%rax
  4207f9:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4207fb:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  420800:	48 8b 73 60          	mov    0x60(%rbx),%rsi
          _M_construct(__beg, __end, _Tag());
  420804:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420809:	48 89 c8             	mov    %rcx,%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  42080c:	48 89 f2             	mov    %rsi,%rdx
  42080f:	48 03 53 68          	add    0x68(%rbx),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420813:	48 83 c0 70          	add    $0x70,%rax
  420817:	48 8d 79 60          	lea    0x60(%rcx),%rdi
  42081b:	48 89 41 60          	mov    %rax,0x60(%rcx)
          _M_construct(__beg, __end, _Tag());
  42081f:	4b 8d 04 07          	lea    (%r15,%r8,1),%rax
  420823:	ff d0                	callq  *%rax
	    if (__x->_M_right)
  420825:	48 8b 73 18          	mov    0x18(%rbx),%rsi
	  __tmp->_M_color = __x->_M_color;
  420829:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
  42082e:	8b 03                	mov    (%rbx),%eax
	    if (__x->_M_right)
  420830:	48 85 f6             	test   %rsi,%rsi
	  __tmp->_M_left = 0;
  420833:	49 c7 46 10 00 00 00 	movq   $0x0,0x10(%r14)
  42083a:	00 
	  __tmp->_M_right = 0;
  42083b:	49 c7 46 18 00 00 00 	movq   $0x0,0x18(%r14)
  420842:	00 
	  __tmp->_M_color = __x->_M_color;
  420843:	41 89 06             	mov    %eax,(%r14)
	__top->_M_parent = __p;
  420846:	4d 89 66 08          	mov    %r12,0x8(%r14)
	    if (__x->_M_right)
  42084a:	74 25                	je     420871 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x121>
	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
  42084c:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  420851:	48 b8 50 57 df ff ff 	movabs $0xffffffffffdf5750,%rax
  420858:	ff ff ff 
  42085b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  420860:	4c 89 f2             	mov    %r14,%rdx
  420863:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  420868:	4c 01 c8             	add    %r9,%rax
  42086b:	ff d0                	callq  *%rax
  42086d:	49 89 46 18          	mov    %rax,0x18(%r14)
	    while (__x != 0)
  420871:	48 8b 6b 10          	mov    0x10(%rbx),%rbp
  420875:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  42087a:	48 85 ed             	test   %rbp,%rbp
  42087d:	0f 84 e3 00 00 00    	je     420966 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x216>
  420883:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  420888:	48 b8 50 57 df ff ff 	movabs $0xffffffffffdf5750,%rax
  42088f:	ff ff ff 
  420892:	49 01 cd             	add    %rcx,%r13
  420895:	48 01 c8             	add    %rcx,%rax
  420898:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  42089d:	4d 8d 2c 0f          	lea    (%r15,%rcx,1),%r13
  4208a1:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  4208a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4208ad:	00 00 00 
  4208b0:	bf 80 00 00 00       	mov    $0x80,%edi
  4208b5:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
  4208ba:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4208bf:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4208c1:	4c 8d 70 30          	lea    0x30(%rax),%r14
  4208c5:	48 89 c3             	mov    %rax,%rbx
  4208c8:	48 8d 78 20          	lea    0x20(%rax),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  4208cc:	4c 89 70 20          	mov    %r14,0x20(%rax)
  4208d0:	48 8b 75 20          	mov    0x20(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  4208d4:	48 89 f2             	mov    %rsi,%rdx
  4208d7:	48 03 55 28          	add    0x28(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  4208db:	41 ff d5             	callq  *%r13
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4208de:	48 8d 43 50          	lea    0x50(%rbx),%rax
  4208e2:	48 8d 7b 40          	lea    0x40(%rbx),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  4208e6:	48 89 43 40          	mov    %rax,0x40(%rbx)
  4208ea:	48 8b 75 40          	mov    0x40(%rbp),%rsi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4208ee:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  4208f3:	48 89 f2             	mov    %rsi,%rdx
  4208f6:	48 03 55 48          	add    0x48(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  4208fa:	41 ff d5             	callq  *%r13
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4208fd:	48 8d 43 70          	lea    0x70(%rbx),%rax
  420901:	48 8d 7b 60          	lea    0x60(%rbx),%rdi
  420905:	48 89 43 60          	mov    %rax,0x60(%rbx)
  420909:	48 8b 75 60          	mov    0x60(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  42090d:	48 89 f2             	mov    %rsi,%rdx
  420910:	48 03 55 68          	add    0x68(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420914:	41 ff d5             	callq  *%r13
	  __tmp->_M_color = __x->_M_color;
  420917:	8b 45 00             	mov    0x0(%rbp),%eax
	  __tmp->_M_right = 0;
  42091a:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  420921:	00 
		if (__x->_M_right)
  420922:	48 8b 75 18          	mov    0x18(%rbp),%rsi
	  __tmp->_M_left = 0;
  420926:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  42092d:	00 
	  __tmp->_M_color = __x->_M_color;
  42092e:	89 03                	mov    %eax,(%rbx)
		__p->_M_left = __y;
  420930:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
		if (__x->_M_right)
  420935:	48 85 f6             	test   %rsi,%rsi
		__y->_M_parent = __p;
  420938:	4c 89 63 08          	mov    %r12,0x8(%rbx)
		if (__x->_M_right)
  42093c:	74 18                	je     420956 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x206>
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  42093e:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  420943:	48 89 da             	mov    %rbx,%rdx
  420946:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  42094b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  420950:	ff d0                	callq  *%rax
  420952:	48 89 43 18          	mov    %rax,0x18(%rbx)
  420956:	48 8b 6d 10          	mov    0x10(%rbp),%rbp
  42095a:	49 89 dc             	mov    %rbx,%r12
	    while (__x != 0)
  42095d:	48 85 ed             	test   %rbp,%rbp
  420960:	0f 85 4a ff ff ff    	jne    4208b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x160>
      }
  420966:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  42096b:	48 83 c4 48          	add    $0x48,%rsp
  42096f:	5b                   	pop    %rbx
  420970:	5d                   	pop    %rbp
  420971:	41 5c                	pop    %r12
  420973:	41 5d                	pop    %r13
  420975:	41 5e                	pop    %r14
  420977:	41 5f                	pop    %r15
  420979:	c3                   	retq   
  42097a:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  420981:	ff ff ff 
	  __catch(...)
  420984:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  420989:	48 89 c7             	mov    %rax,%rdi
  42098c:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  420993:	ff ff ff 
  420996:	49 89 df             	mov    %rbx,%r15
  420999:	48 01 d8             	add    %rbx,%rax
      { ::operator delete(__p); }
  42099c:	49 01 dc             	add    %rbx,%r12
  42099f:	ff d0                	callq  *%rax
  4209a1:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  4209a6:	41 ff d4             	callq  *%r12
	      __throw_exception_again;
  4209a9:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  4209b0:	ff ff ff 
  4209b3:	48 01 d8             	add    %rbx,%rax
  4209b6:	ff d0                	callq  *%rax
  4209b8:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	if (!_M_is_local())
  4209bc:	48 39 7c 24 18       	cmp    %rdi,0x18(%rsp)
  4209c1:	48 89 c5             	mov    %rax,%rbp
  4209c4:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  4209cb:	ff ff ff 
  4209ce:	74 0d                	je     4209dd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x28d>
  4209d0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4209d5:	49 89 c7             	mov    %rax,%r15
  4209d8:	4c 01 e0             	add    %r12,%rax
  4209db:	ff d0                	callq  *%rax
  4209dd:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  4209e1:	49 39 fe             	cmp    %rdi,%r14
  4209e4:	74 0d                	je     4209f3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x2a3>
  4209e6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4209eb:	49 89 c7             	mov    %rax,%r15
  4209ee:	4c 01 e0             	add    %r12,%rax
  4209f1:	ff d0                	callq  *%rax
  4209f3:	48 89 e8             	mov    %rbp,%rax
	  __catch(...)
  4209f6:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  4209fb:	48 89 c7             	mov    %rax,%rdi
  4209fe:	48 bd 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rbp
  420a05:	ff ff ff 
  420a08:	4c 89 f0             	mov    %r14,%rax
  420a0b:	4d 89 f7             	mov    %r14,%r15
  420a0e:	4d 01 f4             	add    %r14,%r12
  420a11:	48 01 e8             	add    %rbp,%rax
  420a14:	ff d0                	callq  *%rax
  420a16:	48 89 df             	mov    %rbx,%rdi
	      __throw_exception_again;
  420a19:	48 bb 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rbx
  420a20:	ff ff ff 
  420a23:	41 ff d4             	callq  *%r12
  420a26:	4c 89 f0             	mov    %r14,%rax
  420a29:	48 01 d8             	add    %rbx,%rax
  420a2c:	ff d0                	callq  *%rax
  420a2e:	48 89 c5             	mov    %rax,%rbp
  420a31:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  420a38:	ff ff ff 
  420a3b:	eb a0                	jmp    4209dd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x28d>
	  __catch(...)
  420a3d:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  420a42:	48 ba 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rdx
  420a49:	ff ff ff 
  420a4c:	48 89 c3             	mov    %rax,%rbx
  420a4f:	4d 89 f7             	mov    %r14,%r15
  420a52:	4c 01 f2             	add    %r14,%rdx
  420a55:	ff d2                	callq  *%rdx
  420a57:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  420a5e:	ff ff ff 
  420a61:	48 89 df             	mov    %rbx,%rdi
  420a64:	4c 01 f0             	add    %r14,%rax
  420a67:	ff d0                	callq  *%rax
  420a69:	49 89 c5             	mov    %rax,%r13
  420a6c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420a71:	49 bc 20 ea dd ff ff 	movabs $0xffffffffffddea20,%r12
  420a78:	ff ff ff 
  420a7b:	49 89 c7             	mov    %rax,%r15
  420a7e:	4c 01 e0             	add    %r12,%rax
  420a81:	ff d0                	callq  *%rax
  420a83:	4c 89 e8             	mov    %r13,%rax
	__catch(...)
  420a86:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  420a8b:	48 89 c7             	mov    %rax,%rdi
  420a8e:	4d 89 f7             	mov    %r14,%r15
  420a91:	4c 01 f5             	add    %r14,%rbp
	    __throw_exception_again;
  420a94:	4c 01 f3             	add    %r14,%rbx
	__catch(...)
  420a97:	ff d5                	callq  *%rbp
	    _M_erase(__top);
  420a99:	48 b8 60 c4 de ff ff 	movabs $0xffffffffffdec460,%rax
  420aa0:	ff ff ff 
  420aa3:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  420aa8:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  420aad:	4c 01 f0             	add    %r14,%rax
  420ab0:	ff d0                	callq  *%rax
	    __throw_exception_again;
  420ab2:	ff d3                	callq  *%rbx
  420ab4:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  420abb:	ff ff ff 
  420abe:	e9 33 ff ff ff       	jmpq   4209f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x2a6>
  420ac3:	48 89 c3             	mov    %rax,%rbx
  420ac6:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  420acb:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  420ad2:	ff ff ff 
  420ad5:	48 8b 78 40          	mov    0x40(%rax),%rdi
  420ad9:	49 39 fe             	cmp    %rdi,%r14
  420adc:	74 12                	je     420af0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x3a0>
  420ade:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420ae3:	49 89 c7             	mov    %rax,%r15
  420ae6:	4c 01 e0             	add    %r12,%rax
  420ae9:	ff d0                	callq  *%rax
  420aeb:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  420af0:	48 8b 78 20          	mov    0x20(%rax),%rdi
  420af4:	48 39 fd             	cmp    %rdi,%rbp
  420af7:	74 0d                	je     420b06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x3b6>
  420af9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420afe:	49 89 c7             	mov    %rax,%r15
  420b01:	4c 01 e0             	add    %r12,%rax
  420b04:	ff d0                	callq  *%rax
  420b06:	48 89 d8             	mov    %rbx,%rax
  420b09:	e9 76 fe ff ff       	jmpq   420984 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x234>
  420b0e:	48 89 c3             	mov    %rax,%rbx
  420b11:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  420b18:	ff ff ff 
  420b1b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  420b20:	eb ce                	jmp    420af0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x3a0>
  420b22:	48 bd 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rbp
  420b29:	ff ff ff 
  420b2c:	48 bb 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rbx
  420b33:	ff ff ff 
  420b36:	49 bc 20 ea dd ff ff 	movabs $0xffffffffffddea20,%r12
  420b3d:	ff ff ff 
  420b40:	e9 41 ff ff ff       	jmpq   420a86 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x336>
	__catch(...)
  420b45:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  420b4a:	48 89 c3             	mov    %rax,%rbx
  420b4d:	4d 89 f7             	mov    %r14,%r15
  420b50:	4d 01 f4             	add    %r14,%r12
  420b53:	41 ff d4             	callq  *%r12
  420b56:	e9 fc fe ff ff       	jmpq   420a57 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x307>
  420b5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000420b60 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_>:
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420b60:	41 57                	push   %r15
  420b62:	41 56                	push   %r14
  420b64:	49 bb a0 a4 20 00 00 	movabs $0x20a4a0,%r11
  420b6b:	00 00 00 
  420b6e:	41 55                	push   %r13
  420b70:	41 54                	push   %r12
  420b72:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 420b60 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_>
  420b79:	55                   	push   %rbp
  420b7a:	53                   	push   %rbx
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420b7b:	48 b8 60 ea dd ff ff 	movabs $0xffffffffffddea60,%rax
  420b82:	ff ff ff 
  420b85:	4d 01 dc             	add    %r11,%r12
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420b88:	48 89 fb             	mov    %rdi,%rbx
  420b8b:	48 89 f5             	mov    %rsi,%rbp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420b8e:	4c 01 e0             	add    %r12,%rax
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420b91:	48 83 ec 28          	sub    $0x28,%rsp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420b95:	4d 89 e7             	mov    %r12,%r15
  420b98:	ff d0                	callq  *%rax
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420b9a:	48 b8 c0 ff ff ff ff 	movabs $0xffffffffffffffc0,%rax
  420ba1:	ff ff ff 
	    this->_M_header._M_left = &this->_M_header;
  420ba4:	48 8d 53 20          	lea    0x20(%rbx),%rdx
      : _M_t(__x._M_t) { }
  420ba8:	4c 8d 6b 18          	lea    0x18(%rbx),%r13
  420bac:	49 8b 04 04          	mov    (%r12,%rax,1),%rax
  420bb0:	48 83 c0 10          	add    $0x10,%rax
  420bb4:	48 89 03             	mov    %rax,(%rbx)
  420bb7:	8b 45 10             	mov    0x10(%rbp),%eax
	    _M_header(), _M_node_count(0)
  420bba:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  420bc1:	00 
	    this->_M_header._M_left = &this->_M_header;
  420bc2:	48 89 53 30          	mov    %rdx,0x30(%rbx)
	    this->_M_header._M_right = &this->_M_header;
  420bc6:	48 89 53 38          	mov    %rdx,0x38(%rbx)
  420bca:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  420bce:	89 43 10             	mov    %eax,0x10(%rbx)
	    _M_header(), _M_node_count(0)
  420bd1:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  420bd8:	48 c7 43 40 00 00 00 	movq   $0x0,0x40(%rbx)
  420bdf:	00 
	if (__x._M_root() != 0)
  420be0:	48 85 f6             	test   %rsi,%rsi
  420be3:	74 5b                	je     420c40 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xe0>
	return _M_copy(__x, __p, __an);
  420be5:	48 b8 f0 53 df ff ff 	movabs $0xffffffffffdf53f0,%rax
  420bec:	ff ff ff 
	  : _M_t(__t) { }
  420bef:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
	return _M_copy(__x, __p, __an);
  420bf4:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  420bf9:	4c 89 ef             	mov    %r13,%rdi
  420bfc:	4c 01 e0             	add    %r12,%rax
  420bff:	ff d0                	callq  *%rax
	    _M_root() = _M_copy(__x._M_begin(), _M_end());
  420c01:	48 89 43 28          	mov    %rax,0x28(%rbx)
  420c05:	48 89 c1             	mov    %rax,%rcx
  420c08:	eb 09                	jmp    420c13 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xb3>
  420c0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      while (__x->_M_left != 0) __x = __x->_M_left;
  420c10:	48 89 d1             	mov    %rdx,%rcx
  420c13:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  420c17:	48 85 d2             	test   %rdx,%rdx
  420c1a:	75 f4                	jne    420c10 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xb0>
	    _M_leftmost() = _S_minimum(_M_root());
  420c1c:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
  420c20:	eb 09                	jmp    420c2b <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xcb>
  420c22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      while (__x->_M_right != 0) __x = __x->_M_right;
  420c28:	48 89 d0             	mov    %rdx,%rax
  420c2b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  420c2f:	48 85 d2             	test   %rdx,%rdx
  420c32:	75 f4                	jne    420c28 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xc8>
	    _M_rightmost() = _S_maximum(_M_root());
  420c34:	48 89 43 38          	mov    %rax,0x38(%rbx)
	    _M_impl._M_node_count = __x._M_impl._M_node_count;
  420c38:	48 8b 45 40          	mov    0x40(%rbp),%rax
  420c3c:	48 89 43 40          	mov    %rax,0x40(%rbx)
	    this->_M_header._M_left = &this->_M_header;
  420c40:	48 8d 53 50          	lea    0x50(%rbx),%rdx
	    _M_header(), _M_node_count(0)
  420c44:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  420c4b:	00 
  420c4c:	4c 8d 73 48          	lea    0x48(%rbx),%r14
  420c50:	c7 43 50 00 00 00 00 	movl   $0x0,0x50(%rbx)
  420c57:	48 c7 43 70 00 00 00 	movq   $0x0,0x70(%rbx)
  420c5e:	00 
	    this->_M_header._M_left = &this->_M_header;
  420c5f:	48 89 53 60          	mov    %rdx,0x60(%rbx)
	    this->_M_header._M_right = &this->_M_header;
  420c63:	48 89 53 68          	mov    %rdx,0x68(%rbx)
  420c67:	48 8b 75 58          	mov    0x58(%rbp),%rsi
	if (__x._M_root() != 0)
  420c6b:	48 85 f6             	test   %rsi,%rsi
  420c6e:	74 58                	je     420cc8 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x168>
	return _M_copy(__x, __p, __an);
  420c70:	48 b8 50 57 df ff ff 	movabs $0xffffffffffdf5750,%rax
  420c77:	ff ff ff 
	  : _M_t(__t) { }
  420c7a:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
	return _M_copy(__x, __p, __an);
  420c7f:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  420c84:	4c 89 f7             	mov    %r14,%rdi
  420c87:	4c 01 e0             	add    %r12,%rax
  420c8a:	ff d0                	callq  *%rax
	    _M_root() = _M_copy(__x._M_begin(), _M_end());
  420c8c:	48 89 43 58          	mov    %rax,0x58(%rbx)
  420c90:	48 89 c1             	mov    %rax,%rcx
  420c93:	eb 06                	jmp    420c9b <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x13b>
  420c95:	0f 1f 00             	nopl   (%rax)
      while (__x->_M_left != 0) __x = __x->_M_left;
  420c98:	48 89 d1             	mov    %rdx,%rcx
  420c9b:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  420c9f:	48 85 d2             	test   %rdx,%rdx
  420ca2:	75 f4                	jne    420c98 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x138>
	    _M_leftmost() = _S_minimum(_M_root());
  420ca4:	48 89 4b 60          	mov    %rcx,0x60(%rbx)
  420ca8:	eb 09                	jmp    420cb3 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x153>
  420caa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      while (__x->_M_right != 0) __x = __x->_M_right;
  420cb0:	48 89 d0             	mov    %rdx,%rax
  420cb3:	48 8b 50 18          	mov    0x18(%rax),%rdx
  420cb7:	48 85 d2             	test   %rdx,%rdx
  420cba:	75 f4                	jne    420cb0 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x150>
	    _M_rightmost() = _S_maximum(_M_root());
  420cbc:	48 89 43 68          	mov    %rax,0x68(%rbx)
	    _M_impl._M_node_count = __x._M_impl._M_node_count;
  420cc0:	48 8b 45 70          	mov    0x70(%rbp),%rax
  420cc4:	48 89 43 70          	mov    %rax,0x70(%rbx)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420cc8:	48 8d 83 88 00 00 00 	lea    0x88(%rbx),%rax
          _M_construct(__beg, __end, _Tag());
  420ccf:	49 bf 20 2c de ff ff 	movabs $0xffffffffffde2c20,%r15
  420cd6:	ff ff ff 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420cd9:	48 8d 7b 78          	lea    0x78(%rbx),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420cdd:	48 89 43 78          	mov    %rax,0x78(%rbx)
  420ce1:	48 8b 75 78          	mov    0x78(%rbp),%rsi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420ce5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
          _M_construct(__beg, __end, _Tag());
  420cea:	4b 8d 04 27          	lea    (%r15,%r12,1),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420cee:	48 89 f2             	mov    %rsi,%rdx
  420cf1:	48 03 95 80 00 00 00 	add    0x80(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420cf8:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420cfa:	48 8d 83 a8 00 00 00 	lea    0xa8(%rbx),%rax
  420d01:	48 8d bb 98 00 00 00 	lea    0x98(%rbx),%rdi
  420d08:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  420d0f:	48 8b b5 98 00 00 00 	mov    0x98(%rbp),%rsi
          _M_construct(__beg, __end, _Tag());
  420d16:	4b 8d 04 27          	lea    (%r15,%r12,1),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420d1a:	48 89 f2             	mov    %rsi,%rdx
  420d1d:	48 03 95 a0 00 00 00 	add    0xa0(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420d24:	ff d0                	callq  *%rax
  420d26:	48 83 c4 28          	add    $0x28,%rsp
  420d2a:	5b                   	pop    %rbx
  420d2b:	5d                   	pop    %rbp
  420d2c:	41 5c                	pop    %r12
  420d2e:	41 5d                	pop    %r13
  420d30:	41 5e                	pop    %r14
  420d32:	41 5f                	pop    %r15
  420d34:	c3                   	retq   
  420d35:	48 89 c5             	mov    %rax,%rbp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420d38:	48 b8 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rax
  420d3f:	ff ff ff 
  420d42:	48 89 df             	mov    %rbx,%rdi
  420d45:	4d 89 e7             	mov    %r12,%r15
  420d48:	4c 01 e0             	add    %r12,%rax
  420d4b:	48 89 03             	mov    %rax,(%rbx)
  420d4e:	48 b8 d0 ea dd ff ff 	movabs $0xffffffffffddead0,%rax
  420d55:	ff ff ff 
  420d58:	4c 01 e0             	add    %r12,%rax
  420d5b:	ff d0                	callq  *%rax
  420d5d:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  420d64:	ff ff ff 
  420d67:	48 89 ef             	mov    %rbp,%rdi
  420d6a:	4c 01 e0             	add    %r12,%rax
  420d6d:	ff d0                	callq  *%rax
  420d6f:	48 8b 7b 78          	mov    0x78(%rbx),%rdi
	if (!_M_is_local())
  420d73:	48 39 7c 24 08       	cmp    %rdi,0x8(%rsp)
  420d78:	48 89 c5             	mov    %rax,%rbp
  420d7b:	74 12                	je     420d8f <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x22f>
  420d7d:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  420d84:	ff ff ff 
  420d87:	4d 89 e7             	mov    %r12,%r15
  420d8a:	4c 01 e0             	add    %r12,%rax
  420d8d:	ff d0                	callq  *%rax
      { _M_erase(_M_begin()); }
  420d8f:	48 b8 60 c4 de ff ff 	movabs $0xffffffffffdec460,%rax
  420d96:	ff ff ff 
  420d99:	48 8b 73 58          	mov    0x58(%rbx),%rsi
  420d9d:	4c 89 f7             	mov    %r14,%rdi
  420da0:	4c 01 e0             	add    %r12,%rax
  420da3:	ff d0                	callq  *%rax
  420da5:	48 b8 c0 c3 de ff ff 	movabs $0xffffffffffdec3c0,%rax
  420dac:	ff ff ff 
  420daf:	48 8b 73 28          	mov    0x28(%rbx),%rsi
  420db3:	4c 89 ef             	mov    %r13,%rdi
  420db6:	4c 01 e0             	add    %r12,%rax
  420db9:	ff d0                	callq  *%rax
  420dbb:	e9 78 ff ff ff       	jmpq   420d38 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x1d8>
  420dc0:	48 89 c5             	mov    %rax,%rbp
  420dc3:	eb ca                	jmp    420d8f <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x22f>
  420dc5:	48 89 c5             	mov    %rax,%rbp
  420dc8:	eb db                	jmp    420da5 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x245>
  420dca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000420dd0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv>:
            rethrow() const
  420dd0:	41 57                	push   %r15
  420dd2:	41 55                	push   %r13
  420dd4:	49 bb 30 a2 20 00 00 	movabs $0x20a230,%r11
  420ddb:	00 00 00 
  420dde:	41 54                	push   %r12
  420de0:	55                   	push   %rbp
                throw*this;
  420de1:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  420de8:	ff ff ff 
            rethrow() const
  420deb:	53                   	push   %rbx
  420dec:	48 8d 1d dd ff ff ff 	lea    -0x23(%rip),%rbx        # 420dd0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv>
  420df3:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  420df6:	bf f0 00 00 00       	mov    $0xf0,%edi
  420dfb:	4c 01 db             	add    %r11,%rbx
  420dfe:	49 89 df             	mov    %rbx,%r15
  420e01:	48 01 d8             	add    %rbx,%rax
  420e04:	ff d0                	callq  *%rax
  420e06:	48 89 c5             	mov    %rax,%rbp
        clone_base
  420e09:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  420e10:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  420e13:	4c 89 e6             	mov    %r12,%rsi
  420e16:	48 01 d8             	add    %rbx,%rax
  420e19:	48 89 ef             	mov    %rbp,%rdi
  420e1c:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  420e23:	48 b8 60 5b df ff ff 	movabs $0xffffffffffdf5b60,%rax
  420e2a:	ff ff ff 
  420e2d:	48 01 d8             	add    %rbx,%rax
  420e30:	ff d0                	callq  *%rax
  420e32:	49 bd 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%r13
  420e39:	ff ff ff 
                px_(x.px_)
  420e3c:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  420e43:	00 
  420e44:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  420e49:	48 89 45 00          	mov    %rax,0x0(%rbp)
  420e4d:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  420e54:	00 
  420e55:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  420e5c:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    exception
  420e62:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  420e69:	ff ff ff 
  420e6c:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  420e6f:	48 85 ff             	test   %rdi,%rdi
    exception
  420e72:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  420e79:	74 06                	je     420e81 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv+0xb1>
                    px_->add_ref();
  420e7b:	48 8b 07             	mov    (%rdi),%rax
  420e7e:	ff 50 18             	callq  *0x18(%rax)
    exception
  420e81:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  420e88:	00 
                throw*this;
  420e89:	48 89 ef             	mov    %rbp,%rdi
  420e8c:	49 89 df             	mov    %rbx,%r15
    exception
  420e8f:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  420e96:	00 00 00 
  420e99:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
        clone_impl:
  420e9f:	48 b8 30 f5 ff ff ff 	movabs $0xfffffffffffff530,%rax
  420ea6:	ff ff ff 
  420ea9:	48 01 d8             	add    %rbx,%rax
  420eac:	48 8d 50 48          	lea    0x48(%rax),%rdx
  420eb0:	48 89 45 00          	mov    %rax,0x0(%rbp)
  420eb4:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  420eb8:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                throw*this;
  420ebf:	48 b8 40 cb de ff ff 	movabs $0xffffffffffdecb40,%rax
  420ec6:	ff ff ff 
        clone_impl:
  420ec9:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                throw*this;
  420ed0:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  420ed4:	48 b8 58 f2 ff ff ff 	movabs $0xfffffffffffff258,%rax
  420edb:	ff ff ff 
  420ede:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  420ee2:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  420ee9:	ff ff ff 
    exception
  420eec:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                throw*this;
  420ef3:	48 01 d8             	add    %rbx,%rax
  420ef6:	ff d0                	callq  *%rax
  420ef8:	49 89 c4             	mov    %rax,%r12
  420efb:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  420f02:	ff ff ff 
  420f05:	48 89 ef             	mov    %rbp,%rdi
  420f08:	49 89 df             	mov    %rbx,%r15
  420f0b:	48 01 d8             	add    %rbx,%rax
  420f0e:	ff d0                	callq  *%rax
  420f10:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  420f17:	ff ff ff 
  420f1a:	4c 89 e7             	mov    %r12,%rdi
  420f1d:	48 01 d8             	add    %rbx,%rax
  420f20:	ff d0                	callq  *%rax
  420f22:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  420f25:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  420f2a:	48 89 ef             	mov    %rbp,%rdi
  420f2d:	48 89 45 00          	mov    %rax,0x0(%rbp)
  420f31:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  420f38:	ff ff ff 
  420f3b:	48 01 d8             	add    %rbx,%rax
  420f3e:	ff d0                	callq  *%rax
  420f40:	eb b9                	jmp    420efb <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv+0x12b>
  420f42:	0f 1f 40 00          	nopl   0x0(%rax)
  420f46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  420f4d:	00 00 00 

0000000000420f50 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv>:
            rethrow() const
  420f50:	4c 8b 17             	mov    (%rdi),%r10
  420f53:	49 03 7a e0          	add    -0x20(%r10),%rdi
  420f57:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 420f57 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv+0x7>
  420f5e:	49 ba a9 a0 20 00 00 	movabs $0x20a0a9,%r10
  420f65:	00 00 00 
  420f68:	4d 01 d3             	add    %r10,%r11
  420f6b:	49 ba d0 5d df ff ff 	movabs $0xffffffffffdf5dd0,%r10
  420f72:	ff ff ff 
  420f75:	4d 01 da             	add    %r11,%r10
  420f78:	41 ff e2             	jmpq   *%r10
  420f7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000420f80 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv>:
  420f80:	41 57                	push   %r15
  420f82:	41 54                	push   %r12
  420f84:	49 bb 80 a0 20 00 00 	movabs $0x20a080,%r11
  420f8b:	00 00 00 
  420f8e:	55                   	push   %rbp
  420f8f:	53                   	push   %rbx
  420f90:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 420f80 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv>
                throw*this;
  420f97:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  420f9e:	ff ff ff 
            rethrow() const
  420fa1:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  420fa4:	bf f0 00 00 00       	mov    $0xf0,%edi
  420fa9:	4c 01 db             	add    %r11,%rbx
            rethrow() const
  420fac:	48 83 ec 08          	sub    $0x8,%rsp
                throw*this;
  420fb0:	49 89 df             	mov    %rbx,%r15
  420fb3:	48 01 d8             	add    %rbx,%rax
  420fb6:	ff d0                	callq  *%rax
  420fb8:	48 89 c5             	mov    %rax,%rbp
        clone_base
  420fbb:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  420fc2:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  420fc5:	4c 89 e6             	mov    %r12,%rsi
  420fc8:	48 01 d8             	add    %rbx,%rax
  420fcb:	48 89 ef             	mov    %rbp,%rdi
  420fce:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  420fd5:	48 b8 60 5b df ff ff 	movabs $0xffffffffffdf5b60,%rax
  420fdc:	ff ff ff 
  420fdf:	48 01 d8             	add    %rbx,%rax
  420fe2:	ff d0                	callq  *%rax
  420fe4:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  420feb:	00 
                px_(x.px_)
  420fec:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  420ff3:	00 
  420ff4:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  420ffa:	48 b8 80 f9 ff ff ff 	movabs $0xfffffffffffff980,%rax
  421001:	ff ff ff 
  421004:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  42100b:	48 01 d8             	add    %rbx,%rax
  42100e:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  421012:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  421019:	ff ff ff 
  42101c:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  42101f:	48 85 ff             	test   %rdi,%rdi
    exception
  421022:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  421029:	74 06                	je     421031 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv+0xb1>
                    px_->add_ref();
  42102b:	48 8b 07             	mov    (%rdi),%rax
  42102e:	ff 50 18             	callq  *0x18(%rax)
    exception
  421031:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  421038:	00 
                throw*this;
  421039:	48 89 ef             	mov    %rbp,%rdi
  42103c:	49 89 df             	mov    %rbx,%r15
    exception
  42103f:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  421046:	00 00 00 
  421049:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
        clone_impl:
  42104f:	48 b8 20 f4 ff ff ff 	movabs $0xfffffffffffff420,%rax
  421056:	ff ff ff 
  421059:	48 01 d8             	add    %rbx,%rax
  42105c:	48 8d 50 48          	lea    0x48(%rax),%rdx
  421060:	48 89 45 00          	mov    %rax,0x0(%rbp)
  421064:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  421068:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                throw*this;
  42106f:	48 b8 30 cc de ff ff 	movabs $0xffffffffffdecc30,%rax
  421076:	ff ff ff 
        clone_impl:
  421079:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                throw*this;
  421080:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  421084:	48 b8 e8 f1 ff ff ff 	movabs $0xfffffffffffff1e8,%rax
  42108b:	ff ff ff 
  42108e:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  421092:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  421099:	ff ff ff 
    exception
  42109c:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                throw*this;
  4210a3:	48 01 d8             	add    %rbx,%rax
  4210a6:	ff d0                	callq  *%rax
  4210a8:	49 89 c4             	mov    %rax,%r12
  4210ab:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  4210b2:	ff ff ff 
  4210b5:	48 89 ef             	mov    %rbp,%rdi
  4210b8:	49 89 df             	mov    %rbx,%r15
  4210bb:	48 01 d8             	add    %rbx,%rax
  4210be:	ff d0                	callq  *%rax
  4210c0:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  4210c7:	ff ff ff 
  4210ca:	4c 89 e7             	mov    %r12,%rdi
  4210cd:	48 01 d8             	add    %rbx,%rax
  4210d0:	ff d0                	callq  *%rax
  4210d2:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  4210d5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4210dc:	ff ff ff 
  4210df:	48 89 ef             	mov    %rbp,%rdi
  4210e2:	48 01 d8             	add    %rbx,%rax
  4210e5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4210e9:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  4210f0:	ff ff ff 
  4210f3:	48 01 d8             	add    %rbx,%rax
  4210f6:	ff d0                	callq  *%rax
  4210f8:	eb b1                	jmp    4210ab <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv+0x12b>
  4210fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000421100 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv>:
            rethrow() const
  421100:	4c 8b 17             	mov    (%rdi),%r10
  421103:	49 03 7a e0          	add    -0x20(%r10),%rdi
  421107:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 421107 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv+0x7>
  42110e:	49 ba f9 9e 20 00 00 	movabs $0x209ef9,%r10
  421115:	00 00 00 
  421118:	4d 01 d3             	add    %r10,%r11
  42111b:	49 ba 80 5f df ff ff 	movabs $0xffffffffffdf5f80,%r10
  421122:	ff ff ff 
  421125:	4d 01 da             	add    %r11,%r10
  421128:	41 ff e2             	jmpq   *%r10
  42112b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000421130 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv>:
            clone() const
  421130:	41 57                	push   %r15
  421132:	41 54                	push   %r12
  421134:	49 bb d0 9e 20 00 00 	movabs $0x209ed0,%r11
  42113b:	00 00 00 
  42113e:	55                   	push   %rbp
  42113f:	48 8d 2d ea ff ff ff 	lea    -0x16(%rip),%rbp        # 421130 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv>
  421146:	53                   	push   %rbx
                return new clone_impl(*this,clone_tag());
  421147:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  42114e:	ff ff ff 
            clone() const
  421151:	49 89 fc             	mov    %rdi,%r12
                return new clone_impl(*this,clone_tag());
  421154:	bf f0 00 00 00       	mov    $0xf0,%edi
  421159:	4c 01 dd             	add    %r11,%rbp
            clone() const
  42115c:	48 83 ec 08          	sub    $0x8,%rsp
                return new clone_impl(*this,clone_tag());
  421160:	49 89 ef             	mov    %rbp,%r15
  421163:	48 01 e8             	add    %rbp,%rax
  421166:	ff d0                	callq  *%rax
  421168:	48 89 c3             	mov    %rax,%rbx
        clone_base
  42116b:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421172:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  421175:	4c 89 e6             	mov    %r12,%rsi
  421178:	48 01 e8             	add    %rbp,%rax
  42117b:	48 89 df             	mov    %rbx,%rdi
  42117e:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
  421185:	48 b8 60 5b df ff ff 	movabs $0xffffffffffdf5b60,%rax
  42118c:	ff ff ff 
  42118f:	48 01 e8             	add    %rbp,%rax
  421192:	ff d0                	callq  *%rax
  421194:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  42119b:	00 
                px_(x.px_)
  42119c:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  4211a3:	00 
  4211a4:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  4211aa:	48 b8 80 f9 ff ff ff 	movabs $0xfffffffffffff980,%rax
  4211b1:	ff ff ff 
  4211b4:	48 89 bb c8 00 00 00 	mov    %rdi,0xc8(%rbx)
  4211bb:	48 01 e8             	add    %rbp,%rax
  4211be:	48 89 03             	mov    %rax,(%rbx)
    exception
  4211c1:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  4211c8:	ff ff ff 
  4211cb:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  4211ce:	48 85 ff             	test   %rdi,%rdi
    exception
  4211d1:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
                if( px_ )
  4211d8:	74 06                	je     4211e0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0xb0>
                    px_->add_ref();
  4211da:	48 8b 07             	mov    (%rdi),%rax
  4211dd:	ff 50 18             	callq  *0x18(%rax)
    exception
  4211e0:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  4211e7:	00 
                copy_boost_exception(this,&x);
  4211e8:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  4211ef:	00 
  4211f0:	48 8d bb c0 00 00 00 	lea    0xc0(%rbx),%rdi
    exception
  4211f7:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  4211fe:	00 00 00 
  421201:	89 83 e0 00 00 00    	mov    %eax,0xe0(%rbx)
                T(x)
  421207:	48 b8 20 f4 ff ff ff 	movabs $0xfffffffffffff420,%rax
  42120e:	ff ff ff 
  421211:	48 01 e8             	add    %rbp,%rax
  421214:	48 8d 50 48          	lea    0x48(%rax),%rdx
  421218:	48 89 03             	mov    %rax,(%rbx)
  42121b:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  42121f:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
                copy_boost_exception(this,&x);
  421226:	48 b8 70 a3 de ff ff 	movabs $0xffffffffffdea370,%rax
  42122d:	ff ff ff 
    exception
  421230:	0f 11 83 d0 00 00 00 	movups %xmm0,0xd0(%rbx)
                T(x)
  421237:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
                copy_boost_exception(this,&x);
  42123e:	48 01 e8             	add    %rbp,%rax
  421241:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  421243:	48 8b 03             	mov    (%rbx),%rax
  421246:	48 03 58 e8          	add    -0x18(%rax),%rbx
                }
  42124a:	48 83 c4 08          	add    $0x8,%rsp
                return new clone_impl(*this,clone_tag());
  42124e:	48 89 d8             	mov    %rbx,%rax
                }
  421251:	5b                   	pop    %rbx
  421252:	5d                   	pop    %rbp
  421253:	41 5c                	pop    %r12
  421255:	41 5f                	pop    %r15
  421257:	c3                   	retq   
  421258:	49 89 c4             	mov    %rax,%r12
                return new clone_impl(*this,clone_tag());
  42125b:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  421262:	ff ff ff 
  421265:	48 89 df             	mov    %rbx,%rdi
  421268:	be f0 00 00 00       	mov    $0xf0,%esi
  42126d:	48 01 e8             	add    %rbp,%rax
  421270:	49 89 ef             	mov    %rbp,%r15
  421273:	ff d0                	callq  *%rax
  421275:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  42127c:	ff ff ff 
  42127f:	4c 89 e7             	mov    %r12,%rdi
  421282:	48 01 e8             	add    %rbp,%rax
  421285:	ff d0                	callq  *%rax
  421287:	49 89 c4             	mov    %rax,%r12
                T(x)
  42128a:	48 b8 10 c9 de ff ff 	movabs $0xffffffffffdec910,%rax
  421291:	ff ff ff 
  421294:	48 89 df             	mov    %rbx,%rdi
  421297:	48 01 e8             	add    %rbp,%rax
  42129a:	ff d0                	callq  *%rax
  42129c:	eb bd                	jmp    42125b <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0x12b>
  42129e:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  4212a1:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4212a8:	ff ff ff 
  4212ab:	48 89 df             	mov    %rbx,%rdi
  4212ae:	48 01 e8             	add    %rbp,%rax
  4212b1:	48 89 03             	mov    %rax,(%rbx)
  4212b4:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  4212bb:	ff ff ff 
  4212be:	48 01 e8             	add    %rbp,%rax
  4212c1:	ff d0                	callq  *%rax
  4212c3:	eb 96                	jmp    42125b <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0x12b>
  4212c5:	90                   	nop
  4212c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4212cd:	00 00 00 

00000000004212d0 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv>:
            clone() const
  4212d0:	4c 8b 17             	mov    (%rdi),%r10
  4212d3:	49 03 7a e8          	add    -0x18(%r10),%rdi
  4212d7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4212d7 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0x7>
  4212de:	49 ba 29 9d 20 00 00 	movabs $0x209d29,%r10
  4212e5:	00 00 00 
  4212e8:	4d 01 d3             	add    %r10,%r11
  4212eb:	49 ba 30 61 df ff ff 	movabs $0xffffffffffdf6130,%r10
  4212f2:	ff ff ff 
  4212f5:	4d 01 da             	add    %r11,%r10
  4212f8:	41 ff e2             	jmpq   *%r10
  4212fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000421300 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv>:
  421300:	41 57                	push   %r15
  421302:	41 55                	push   %r13
  421304:	49 bb 00 9d 20 00 00 	movabs $0x209d00,%r11
  42130b:	00 00 00 
  42130e:	41 54                	push   %r12
  421310:	55                   	push   %rbp
  421311:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 421300 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv>
                return new clone_impl(*this,clone_tag());
  421318:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  42131f:	ff ff ff 
            clone() const
  421322:	53                   	push   %rbx
  421323:	49 89 fc             	mov    %rdi,%r12
  421326:	4c 01 dd             	add    %r11,%rbp
                return new clone_impl(*this,clone_tag());
  421329:	bf f0 00 00 00       	mov    $0xf0,%edi
  42132e:	49 89 ef             	mov    %rbp,%r15
  421331:	48 01 e8             	add    %rbp,%rax
  421334:	ff d0                	callq  *%rax
  421336:	48 89 c3             	mov    %rax,%rbx
        clone_base
  421339:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421340:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  421343:	4c 89 e6             	mov    %r12,%rsi
  421346:	48 01 e8             	add    %rbp,%rax
  421349:	48 89 df             	mov    %rbx,%rdi
  42134c:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
  421353:	48 b8 60 5b df ff ff 	movabs $0xffffffffffdf5b60,%rax
  42135a:	ff ff ff 
  42135d:	48 01 e8             	add    %rbp,%rax
  421360:	ff d0                	callq  *%rax
  421362:	49 bd 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%r13
  421369:	ff ff ff 
                px_(x.px_)
  42136c:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  421373:	00 
  421374:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  421379:	48 89 03             	mov    %rax,(%rbx)
  42137c:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  421383:	00 
  421384:	48 89 bb c8 00 00 00 	mov    %rdi,0xc8(%rbx)
  42138b:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
    exception
  421391:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  421398:	ff ff ff 
  42139b:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  42139e:	48 85 ff             	test   %rdi,%rdi
    exception
  4213a1:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
                if( px_ )
  4213a8:	74 06                	je     4213b0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0xb0>
                    px_->add_ref();
  4213aa:	48 8b 07             	mov    (%rdi),%rax
  4213ad:	ff 50 18             	callq  *0x18(%rax)
    exception
  4213b0:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  4213b7:	00 
                copy_boost_exception(this,&x);
  4213b8:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  4213bf:	00 
  4213c0:	48 8d bb c0 00 00 00 	lea    0xc0(%rbx),%rdi
    exception
  4213c7:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  4213ce:	00 00 00 
  4213d1:	89 83 e0 00 00 00    	mov    %eax,0xe0(%rbx)
                T(x)
  4213d7:	48 b8 30 f5 ff ff ff 	movabs $0xfffffffffffff530,%rax
  4213de:	ff ff ff 
  4213e1:	48 01 e8             	add    %rbp,%rax
  4213e4:	48 8d 50 48          	lea    0x48(%rax),%rdx
  4213e8:	48 89 03             	mov    %rax,(%rbx)
  4213eb:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  4213ef:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
                copy_boost_exception(this,&x);
  4213f6:	48 b8 70 a3 de ff ff 	movabs $0xffffffffffdea370,%rax
  4213fd:	ff ff ff 
    exception
  421400:	0f 11 83 d0 00 00 00 	movups %xmm0,0xd0(%rbx)
                T(x)
  421407:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
                copy_boost_exception(this,&x);
  42140e:	48 01 e8             	add    %rbp,%rax
  421411:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  421413:	48 8b 03             	mov    (%rbx),%rax
  421416:	48 03 58 e8          	add    -0x18(%rax),%rbx
  42141a:	48 89 d8             	mov    %rbx,%rax
                }
  42141d:	5b                   	pop    %rbx
  42141e:	5d                   	pop    %rbp
  42141f:	41 5c                	pop    %r12
  421421:	41 5d                	pop    %r13
  421423:	41 5f                	pop    %r15
  421425:	c3                   	retq   
  421426:	49 89 c4             	mov    %rax,%r12
                return new clone_impl(*this,clone_tag());
  421429:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  421430:	ff ff ff 
  421433:	48 89 df             	mov    %rbx,%rdi
  421436:	be f0 00 00 00       	mov    $0xf0,%esi
  42143b:	48 01 e8             	add    %rbp,%rax
  42143e:	49 89 ef             	mov    %rbp,%r15
  421441:	ff d0                	callq  *%rax
  421443:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  42144a:	ff ff ff 
  42144d:	4c 89 e7             	mov    %r12,%rdi
  421450:	48 01 e8             	add    %rbp,%rax
  421453:	ff d0                	callq  *%rax
  421455:	49 89 c4             	mov    %rax,%r12
                T(x)
  421458:	48 b8 c0 c7 de ff ff 	movabs $0xffffffffffdec7c0,%rax
  42145f:	ff ff ff 
  421462:	48 89 df             	mov    %rbx,%rdi
  421465:	48 01 e8             	add    %rbp,%rax
  421468:	ff d0                	callq  *%rax
  42146a:	eb bd                	jmp    421429 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0x129>
  42146c:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  42146f:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  421474:	48 89 df             	mov    %rbx,%rdi
  421477:	48 89 03             	mov    %rax,(%rbx)
  42147a:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  421481:	ff ff ff 
  421484:	48 01 e8             	add    %rbp,%rax
  421487:	ff d0                	callq  *%rax
  421489:	eb 9e                	jmp    421429 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0x129>
  42148b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000421490 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv>:
            clone() const
  421490:	4c 8b 17             	mov    (%rdi),%r10
  421493:	49 03 7a e8          	add    -0x18(%r10),%rdi
  421497:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 421497 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0x7>
  42149e:	49 ba 69 9b 20 00 00 	movabs $0x209b69,%r10
  4214a5:	00 00 00 
  4214a8:	4d 01 d3             	add    %r10,%r11
  4214ab:	49 ba 00 63 df ff ff 	movabs $0xffffffffffdf6300,%r10
  4214b2:	ff ff ff 
  4214b5:	4d 01 da             	add    %r11,%r10
  4214b8:	41 ff e2             	jmpq   *%r10
  4214bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004214c0 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_>:
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  4214c0:	41 57                	push   %r15
  4214c2:	41 56                	push   %r14
  4214c4:	49 bb 40 9b 20 00 00 	movabs $0x209b40,%r11
  4214cb:	00 00 00 
  4214ce:	41 55                	push   %r13
  4214d0:	41 54                	push   %r12
  4214d2:	49 89 fd             	mov    %rdi,%r13
  4214d5:	55                   	push   %rbp
  4214d6:	53                   	push   %rbx
  4214d7:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 4214c0 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_>
    throw enable_current_exception(enable_error_info(e));
  4214de:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  4214e5:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  4214e8:	49 be 60 5b df ff ff 	movabs $0xffffffffffdf5b60,%r14
  4214ef:	ff ff ff 
  4214f2:	bf f0 00 00 00       	mov    $0xf0,%edi
  4214f7:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  4214fa:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    throw enable_current_exception(enable_error_info(e));
  421501:	49 89 df             	mov    %rbx,%r15
  421504:	48 01 d8             	add    %rbx,%rax
  421507:	49 89 e4             	mov    %rsp,%r12
  42150a:	ff d0                	callq  *%rax
  42150c:	4c 89 ee             	mov    %r13,%rsi
  42150f:	48 89 c5             	mov    %rax,%rbp
  421512:	48 89 e7             	mov    %rsp,%rdi
  421515:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  421519:	ff d0                	callq  *%rax
  42151b:	41 8b 85 b8 00 00 00 	mov    0xb8(%r13),%eax
                px_(0)
  421522:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  421529:	00 00 00 00 00 
  42152e:	48 89 e6             	mov    %rsp,%rsi
            throw_line_(-1)
  421531:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  421538:	00 00 00 00 00 
  42153d:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
  421544:	00 00 00 00 00 
  421549:	48 89 ef             	mov    %rbp,%rdi
  42154c:	c7 84 24 e0 00 00 00 	movl   $0xffffffff,0xe0(%rsp)
  421553:	ff ff ff ff 
  421557:	89 84 24 b8 00 00 00 	mov    %eax,0xb8(%rsp)
                T(x)
  42155e:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  421565:	ff ff ff 
  421568:	48 01 d8             	add    %rbx,%rax
  42156b:	48 89 04 24          	mov    %rax,(%rsp)
  42156f:	48 83 c0 38          	add    $0x38,%rax
  421573:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  42157a:	00 
        clone_base
  42157b:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421582:	ff ff ff 
  421585:	48 01 d8             	add    %rbx,%rax
  421588:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  42158f:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  421593:	ff d0                	callq  *%rax
  421595:	8b 84 24 b8 00 00 00 	mov    0xb8(%rsp),%eax
                px_(x.px_)
  42159c:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  4215a3:	00 
  4215a4:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  4215aa:	48 b8 80 f9 ff ff ff 	movabs $0xfffffffffffff980,%rax
  4215b1:	ff ff ff 
  4215b4:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  4215bb:	48 01 d8             	add    %rbx,%rax
  4215be:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  4215c2:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  4215c9:	ff ff ff 
  4215cc:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  4215cf:	48 85 ff             	test   %rdi,%rdi
    exception
  4215d2:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  4215d9:	74 06                	je     4215e1 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x121>
                    px_->add_ref();
  4215db:	48 8b 07             	mov    (%rdi),%rax
  4215de:	ff 50 18             	callq  *0x18(%rax)
    exception
  4215e1:	8b 84 24 e0 00 00 00 	mov    0xe0(%rsp),%eax
                copy_boost_exception(this,&x);
  4215e8:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  4215ef:	00 
  4215f0:	48 8d bd c0 00 00 00 	lea    0xc0(%rbp),%rdi
    exception
  4215f7:	66 0f 6f 84 24 d0 00 	movdqa 0xd0(%rsp),%xmm0
  4215fe:	00 00 
  421600:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
                T(x)
  421606:	48 b8 20 f4 ff ff ff 	movabs $0xfffffffffffff420,%rax
  42160d:	ff ff ff 
  421610:	48 01 d8             	add    %rbx,%rax
  421613:	48 8d 50 48          	lea    0x48(%rax),%rdx
  421617:	48 89 45 00          	mov    %rax,0x0(%rbp)
  42161b:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  42161f:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                copy_boost_exception(this,&x);
  421626:	48 b8 70 a3 de ff ff 	movabs $0xffffffffffdea370,%rax
  42162d:	ff ff ff 
    exception
  421630:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                T(x)
  421637:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                copy_boost_exception(this,&x);
  42163e:	48 01 d8             	add    %rbx,%rax
  421641:	ff d0                	callq  *%rax
  421643:	48 b8 10 c9 de ff ff 	movabs $0xffffffffffdec910,%rax
  42164a:	ff ff ff 
  42164d:	4c 89 e7             	mov    %r12,%rdi
  421650:	49 89 df             	mov    %rbx,%r15
  421653:	48 01 d8             	add    %rbx,%rax
  421656:	ff d0                	callq  *%rax
  421658:	48 b8 30 cc de ff ff 	movabs $0xffffffffffdecc30,%rax
  42165f:	ff ff ff 
  421662:	48 89 ef             	mov    %rbp,%rdi
  421665:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  421669:	48 b8 e8 f1 ff ff ff 	movabs $0xfffffffffffff1e8,%rax
  421670:	ff ff ff 
  421673:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  421677:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  42167e:	ff ff ff 
  421681:	48 01 d8             	add    %rbx,%rax
  421684:	ff d0                	callq  *%rax
  421686:	49 89 c5             	mov    %rax,%r13
  421689:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  421690:	ff ff ff 
  421693:	48 89 ef             	mov    %rbp,%rdi
  421696:	49 89 df             	mov    %rbx,%r15
  421699:	48 01 d8             	add    %rbx,%rax
  42169c:	ff d0                	callq  *%rax
  42169e:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  4216a5:	ff ff ff 
  4216a8:	4c 89 ef             	mov    %r13,%rdi
  4216ab:	48 01 d8             	add    %rbx,%rax
  4216ae:	ff d0                	callq  *%rax
  4216b0:	49 89 c5             	mov    %rax,%r13
                T(x)
  4216b3:	48 b8 10 c9 de ff ff 	movabs $0xffffffffffdec910,%rax
  4216ba:	ff ff ff 
  4216bd:	48 89 ef             	mov    %rbp,%rdi
  4216c0:	48 01 d8             	add    %rbx,%rax
  4216c3:	ff d0                	callq  *%rax
  4216c5:	48 b8 10 c9 de ff ff 	movabs $0xffffffffffdec910,%rax
  4216cc:	ff ff ff 
  4216cf:	4c 89 e7             	mov    %r12,%rdi
  4216d2:	48 01 d8             	add    %rbx,%rax
  4216d5:	ff d0                	callq  *%rax
  4216d7:	eb b0                	jmp    421689 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x1c9>
  4216d9:	49 89 c5             	mov    %rax,%r13
        ~validation_error() throw() {}
  4216dc:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4216e3:	ff ff ff 
  4216e6:	48 89 ef             	mov    %rbp,%rdi
  4216e9:	48 01 d8             	add    %rbx,%rax
  4216ec:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4216f0:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  4216f7:	ff ff ff 
  4216fa:	48 01 d8             	add    %rbx,%rax
  4216fd:	ff d0                	callq  *%rax
  4216ff:	eb c4                	jmp    4216c5 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x205>
  421701:	49 89 c5             	mov    %rax,%r13
  421704:	eb bf                	jmp    4216c5 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x205>
  421706:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42170d:	00 00 00 

0000000000421710 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_>:
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  421710:	41 57                	push   %r15
  421712:	41 56                	push   %r14
  421714:	49 bb f0 98 20 00 00 	movabs $0x2098f0,%r11
  42171b:	00 00 00 
  42171e:	41 55                	push   %r13
  421720:	41 54                	push   %r12
  421722:	49 89 fd             	mov    %rdi,%r13
  421725:	55                   	push   %rbp
  421726:	53                   	push   %rbx
  421727:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 421710 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_>
    throw enable_current_exception(enable_error_info(e));
  42172e:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  421735:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  421738:	49 be 60 5b df ff ff 	movabs $0xffffffffffdf5b60,%r14
  42173f:	ff ff ff 
  421742:	bf f0 00 00 00       	mov    $0xf0,%edi
  421747:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  42174a:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    throw enable_current_exception(enable_error_info(e));
  421751:	49 89 df             	mov    %rbx,%r15
  421754:	48 01 d8             	add    %rbx,%rax
  421757:	49 89 e4             	mov    %rsp,%r12
  42175a:	ff d0                	callq  *%rax
  42175c:	4c 89 ee             	mov    %r13,%rsi
  42175f:	48 89 c5             	mov    %rax,%rbp
  421762:	48 89 e7             	mov    %rsp,%rdi
  421765:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  421769:	ff d0                	callq  *%rax
  42176b:	41 8b 85 b8 00 00 00 	mov    0xb8(%r13),%eax
                px_(0)
  421772:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  421779:	00 00 00 00 00 
  42177e:	48 89 e6             	mov    %rsp,%rsi
            throw_line_(-1)
  421781:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  421788:	00 00 00 00 00 
  42178d:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
  421794:	00 00 00 00 00 
  421799:	48 89 ef             	mov    %rbp,%rdi
  42179c:	c7 84 24 e0 00 00 00 	movl   $0xffffffff,0xe0(%rsp)
  4217a3:	ff ff ff ff 
  4217a7:	89 84 24 b8 00 00 00 	mov    %eax,0xb8(%rsp)
                T(x)
  4217ae:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  4217b5:	ff ff ff 
  4217b8:	48 01 d8             	add    %rbx,%rax
  4217bb:	48 89 04 24          	mov    %rax,(%rsp)
  4217bf:	48 83 c0 38          	add    $0x38,%rax
  4217c3:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  4217ca:	00 
        clone_base
  4217cb:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  4217d2:	ff ff ff 
  4217d5:	48 01 d8             	add    %rbx,%rax
  4217d8:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  4217df:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  4217e3:	ff d0                	callq  *%rax
  4217e5:	49 bd 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%r13
  4217ec:	ff ff ff 
                px_(x.px_)
  4217ef:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  4217f6:	00 
  4217f7:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  4217fc:	48 89 45 00          	mov    %rax,0x0(%rbp)
  421800:	8b 84 24 b8 00 00 00 	mov    0xb8(%rsp),%eax
  421807:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  42180e:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    exception
  421814:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  42181b:	ff ff ff 
  42181e:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  421821:	48 85 ff             	test   %rdi,%rdi
    exception
  421824:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  42182b:	74 06                	je     421833 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x123>
                    px_->add_ref();
  42182d:	48 8b 07             	mov    (%rdi),%rax
  421830:	ff 50 18             	callq  *0x18(%rax)
    exception
  421833:	8b 84 24 e0 00 00 00 	mov    0xe0(%rsp),%eax
                copy_boost_exception(this,&x);
  42183a:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  421841:	00 
  421842:	48 8d bd c0 00 00 00 	lea    0xc0(%rbp),%rdi
    exception
  421849:	66 0f 6f 84 24 d0 00 	movdqa 0xd0(%rsp),%xmm0
  421850:	00 00 
  421852:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
                T(x)
  421858:	48 b8 30 f5 ff ff ff 	movabs $0xfffffffffffff530,%rax
  42185f:	ff ff ff 
  421862:	48 01 d8             	add    %rbx,%rax
  421865:	48 8d 50 48          	lea    0x48(%rax),%rdx
  421869:	48 89 45 00          	mov    %rax,0x0(%rbp)
  42186d:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  421871:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                copy_boost_exception(this,&x);
  421878:	48 b8 70 a3 de ff ff 	movabs $0xffffffffffdea370,%rax
  42187f:	ff ff ff 
    exception
  421882:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                T(x)
  421889:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                copy_boost_exception(this,&x);
  421890:	48 01 d8             	add    %rbx,%rax
  421893:	ff d0                	callq  *%rax
  421895:	48 b8 c0 c7 de ff ff 	movabs $0xffffffffffdec7c0,%rax
  42189c:	ff ff ff 
  42189f:	4c 89 e7             	mov    %r12,%rdi
  4218a2:	49 89 df             	mov    %rbx,%r15
  4218a5:	48 01 d8             	add    %rbx,%rax
  4218a8:	ff d0                	callq  *%rax
  4218aa:	48 b8 40 cb de ff ff 	movabs $0xffffffffffdecb40,%rax
  4218b1:	ff ff ff 
  4218b4:	48 89 ef             	mov    %rbp,%rdi
  4218b7:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4218bb:	48 b8 58 f2 ff ff ff 	movabs $0xfffffffffffff258,%rax
  4218c2:	ff ff ff 
  4218c5:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  4218c9:	48 b8 80 ea dd ff ff 	movabs $0xffffffffffddea80,%rax
  4218d0:	ff ff ff 
  4218d3:	48 01 d8             	add    %rbx,%rax
  4218d6:	ff d0                	callq  *%rax
  4218d8:	49 89 c5             	mov    %rax,%r13
  4218db:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  4218e2:	ff ff ff 
  4218e5:	48 89 ef             	mov    %rbp,%rdi
  4218e8:	49 89 df             	mov    %rbx,%r15
  4218eb:	48 01 d8             	add    %rbx,%rax
  4218ee:	ff d0                	callq  *%rax
  4218f0:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  4218f7:	ff ff ff 
  4218fa:	4c 89 ef             	mov    %r13,%rdi
  4218fd:	48 01 d8             	add    %rbx,%rax
  421900:	ff d0                	callq  *%rax
  421902:	49 89 c5             	mov    %rax,%r13
                T(x)
  421905:	48 b8 c0 c7 de ff ff 	movabs $0xffffffffffdec7c0,%rax
  42190c:	ff ff ff 
  42190f:	48 89 ef             	mov    %rbp,%rdi
  421912:	48 01 d8             	add    %rbx,%rax
  421915:	ff d0                	callq  *%rax
  421917:	48 b8 c0 c7 de ff ff 	movabs $0xffffffffffdec7c0,%rax
  42191e:	ff ff ff 
  421921:	4c 89 e7             	mov    %r12,%rdi
  421924:	48 01 d8             	add    %rbx,%rax
  421927:	ff d0                	callq  *%rax
  421929:	eb b0                	jmp    4218db <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x1cb>
  42192b:	49 89 c6             	mov    %rax,%r14
        ~validation_error() throw() {}
  42192e:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  421933:	48 89 ef             	mov    %rbp,%rdi
  421936:	4d 89 f5             	mov    %r14,%r13
  421939:	48 89 45 00          	mov    %rax,0x0(%rbp)
  42193d:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  421944:	ff ff ff 
  421947:	48 01 d8             	add    %rbx,%rax
  42194a:	ff d0                	callq  *%rax
  42194c:	eb c9                	jmp    421917 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x207>
  42194e:	49 89 c5             	mov    %rax,%r13
  421951:	eb c4                	jmp    421917 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x207>
  421953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42195a:	00 00 00 
  42195d:	0f 1f 00             	nopl   (%rax)

0000000000421960 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb>:
        const std::basic_string<charT>& get_single_string(
  421960:	41 57                	push   %r15
  421962:	41 56                	push   %r14
  421964:	49 bb a0 96 20 00 00 	movabs $0x2096a0,%r11
  42196b:	00 00 00 
  42196e:	41 55                	push   %r13
  421970:	41 54                	push   %r12
            static std::basic_string<charT> empty;
  421972:	49 bc e0 50 9c 3b 00 	movabs $0x3b9c50e0,%r12
  421979:	00 00 00 
        const std::basic_string<charT>& get_single_string(
  42197c:	55                   	push   %rbp
  42197d:	53                   	push   %rbx
  42197e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 421960 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb>
  421985:	48 89 fd             	mov    %rdi,%rbp
  421988:	41 89 f5             	mov    %esi,%r13d
  42198b:	4c 01 db             	add    %r11,%rbx
  42198e:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
            static std::basic_string<charT> empty;
  421995:	42 0f b6 04 23       	movzbl (%rbx,%r12,1),%eax
  42199a:	84 c0                	test   %al,%al
  42199c:	74 4a                	je     4219e8 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x88>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  42199e:	48 8b 45 00          	mov    0x0(%rbp),%rax
  4219a2:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  4219a6:	48 29 c2             	sub    %rax,%rdx
  4219a9:	48 c1 fa 05          	sar    $0x5,%rdx
            if (v.size() > 1)
  4219ad:	48 83 fa 01          	cmp    $0x1,%rdx
  4219b1:	0f 87 bc 00 00 00    	ja     421a73 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x113>
            else if (v.size() == 1)
  4219b7:	74 16                	je     4219cf <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x6f>
            else if (!allow_empty)
  4219b9:	45 84 ed             	test   %r13b,%r13b
  4219bc:	0f 84 97 01 00 00    	je     421b59 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1f9>
            return empty;
  4219c2:	48 b8 00 51 9c 3b 00 	movabs $0x3b9c5100,%rax
  4219c9:	00 00 00 
  4219cc:	48 01 d8             	add    %rbx,%rax
        }
  4219cf:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  4219d6:	5b                   	pop    %rbx
  4219d7:	5d                   	pop    %rbp
  4219d8:	41 5c                	pop    %r12
  4219da:	41 5d                	pop    %r13
  4219dc:	41 5e                	pop    %r14
  4219de:	41 5f                	pop    %r15
  4219e0:	c3                   	retq   
  4219e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            static std::basic_string<charT> empty;
  4219e8:	48 b8 f0 ea dd ff ff 	movabs $0xffffffffffddeaf0,%rax
  4219ef:	ff ff ff 
  4219f2:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
  4219f6:	49 89 df             	mov    %rbx,%r15
  4219f9:	48 01 d8             	add    %rbx,%rax
  4219fc:	ff d0                	callq  *%rax
  4219fe:	85 c0                	test   %eax,%eax
  421a00:	74 9c                	je     42199e <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x3e>
	: allocator_type(__a), _M_p(__dat) { }
  421a02:	48 b8 10 51 9c 3b 00 	movabs $0x3b9c5110,%rax
  421a09:	00 00 00 
  421a0c:	49 be 00 51 9c 3b 00 	movabs $0x3b9c5100,%r14
  421a13:	00 00 00 
  421a16:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
  421a1a:	48 01 d8             	add    %rbx,%rax
      { _M_string_length = __length; }
  421a1d:	4a c7 44 33 08 00 00 	movq   $0x0,0x8(%rbx,%r14,1)
  421a24:	00 00 
  421a26:	42 c6 44 33 10 00    	movb   $0x0,0x10(%rbx,%r14,1)
	: allocator_type(__a), _M_p(__dat) { }
  421a2c:	4a 89 04 33          	mov    %rax,(%rbx,%r14,1)
  421a30:	48 b8 50 e6 dd ff ff 	movabs $0xffffffffffdde650,%rax
  421a37:	ff ff ff 
  421a3a:	48 01 d8             	add    %rbx,%rax
  421a3d:	ff d0                	callq  *%rax
  421a3f:	48 b8 e0 03 00 00 00 	movabs $0x3e0,%rax
  421a46:	00 00 00 
  421a49:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421a4d:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  421a51:	48 b8 88 ff ff ff ff 	movabs $0xffffffffffffff88,%rax
  421a58:	ff ff ff 
  421a5b:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  421a5f:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  421a66:	ff ff ff 
  421a69:	48 01 d8             	add    %rbx,%rax
  421a6c:	ff d0                	callq  *%rax
  421a6e:	e9 2b ff ff ff       	jmpq   42199e <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x3e>
                boost::throw_exception(validation_error(validation_error::multiple_values_not_allowed));
  421a73:	48 8d 6c 24 20       	lea    0x20(%rsp),%rbp
  421a78:	49 be c2 7d df ff ff 	movabs $0xffffffffffdf7dc2,%r14
  421a7f:	ff ff ff 
  421a82:	48 b8 20 2d de ff ff 	movabs $0xffffffffffde2d20,%rax
  421a89:	ff ff ff 
  421a8c:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421a90:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  421a94:	49 89 e4             	mov    %rsp,%r12
  421a97:	48 89 ef             	mov    %rbp,%rdi
  421a9a:	41 ff d5             	callq  *%r13
  421a9d:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421aa1:	48 89 e7             	mov    %rsp,%rdi
  421aa4:	41 ff d5             	callq  *%r13
  421aa7:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
  421aac:	48 b8 80 a2 de ff ff 	movabs $0xffffffffffdea280,%rax
  421ab3:	ff ff ff 
  421ab6:	45 31 c0             	xor    %r8d,%r8d
  421ab9:	48 89 e9             	mov    %rbp,%rcx
  421abc:	48 89 e2             	mov    %rsp,%rdx
  421abf:	be 1e 00 00 00       	mov    $0x1e,%esi
  421ac4:	4c 89 f7             	mov    %r14,%rdi
  421ac7:	48 01 d8             	add    %rbx,%rax
  421aca:	ff d0                	callq  *%rax
  421acc:	48 b8 10 67 df ff ff 	movabs $0xffffffffffdf6710,%rax
  421ad3:	ff ff ff 
  421ad6:	4c 89 f7             	mov    %r14,%rdi
  421ad9:	48 01 d8             	add    %rbx,%rax
  421adc:	ff d0                	callq  *%rax
  421ade:	49 89 c5             	mov    %rax,%r13
  421ae1:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  421ae8:	ff ff ff 
  421aeb:	4c 89 f7             	mov    %r14,%rdi
  421aee:	48 01 d8             	add    %rbx,%rax
  421af1:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  421af6:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  421afd:	ff ff ff 
  421b00:	48 01 d8             	add    %rbx,%rax
  421b03:	ff d0                	callq  *%rax
  421b05:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  421b09:	49 83 c4 10          	add    $0x10,%r12
  421b0d:	4c 39 e7             	cmp    %r12,%rdi
  421b10:	74 12                	je     421b24 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1c4>
  421b12:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  421b19:	ff ff ff 
  421b1c:	49 89 df             	mov    %rbx,%r15
  421b1f:	48 01 d8             	add    %rbx,%rax
  421b22:	ff d0                	callq  *%rax
  421b24:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  421b29:	48 83 c5 10          	add    $0x10,%rbp
  421b2d:	48 39 ef             	cmp    %rbp,%rdi
  421b30:	74 12                	je     421b44 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1e4>
  421b32:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  421b39:	ff ff ff 
  421b3c:	49 89 df             	mov    %rbx,%r15
  421b3f:	48 01 d8             	add    %rbx,%rax
  421b42:	ff d0                	callq  *%rax
  421b44:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  421b4b:	ff ff ff 
  421b4e:	4c 89 ef             	mov    %r13,%rdi
  421b51:	49 89 df             	mov    %rbx,%r15
  421b54:	48 01 d8             	add    %rbx,%rax
  421b57:	ff d0                	callq  *%rax
                boost::throw_exception(validation_error(validation_error::at_least_one_value_required));
  421b59:	48 8d 6c 24 20       	lea    0x20(%rsp),%rbp
  421b5e:	49 be c2 7d df ff ff 	movabs $0xffffffffffdf7dc2,%r14
  421b65:	ff ff ff 
  421b68:	48 b8 20 2d de ff ff 	movabs $0xffffffffffde2d20,%rax
  421b6f:	ff ff ff 
  421b72:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421b76:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  421b7a:	49 89 e4             	mov    %rsp,%r12
  421b7d:	48 89 ef             	mov    %rbp,%rdi
  421b80:	41 ff d5             	callq  *%r13
  421b83:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421b87:	48 89 e7             	mov    %rsp,%rdi
  421b8a:	41 ff d5             	callq  *%r13
  421b8d:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
  421b92:	48 b8 80 a2 de ff ff 	movabs $0xffffffffffdea280,%rax
  421b99:	ff ff ff 
  421b9c:	45 31 c0             	xor    %r8d,%r8d
  421b9f:	48 89 e9             	mov    %rbp,%rcx
  421ba2:	48 89 e2             	mov    %rsp,%rdx
  421ba5:	be 1f 00 00 00       	mov    $0x1f,%esi
  421baa:	4c 89 f7             	mov    %r14,%rdi
  421bad:	48 01 d8             	add    %rbx,%rax
  421bb0:	ff d0                	callq  *%rax
  421bb2:	48 b8 10 67 df ff ff 	movabs $0xffffffffffdf6710,%rax
  421bb9:	ff ff ff 
  421bbc:	4c 89 f7             	mov    %r14,%rdi
  421bbf:	48 01 d8             	add    %rbx,%rax
  421bc2:	ff d0                	callq  *%rax
  421bc4:	e9 15 ff ff ff       	jmpq   421ade <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x17e>
  421bc9:	49 89 c5             	mov    %rax,%r13
  421bcc:	e9 34 ff ff ff       	jmpq   421b05 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1a5>
  421bd1:	49 89 c5             	mov    %rax,%r13
  421bd4:	e9 4b ff ff ff       	jmpq   421b24 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1c4>
  421bd9:	eb ee                	jmp    421bc9 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x269>
  421bdb:	eb f4                	jmp    421bd1 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x271>
  421bdd:	0f 1f 00             	nopl   (%rax)

0000000000421be0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l>:
    void validate(boost::any& v, 
  421be0:	41 57                	push   %r15
  421be2:	41 56                	push   %r14
  421be4:	49 bb 20 94 20 00 00 	movabs $0x209420,%r11
  421beb:	00 00 00 
  421bee:	41 55                	push   %r13
  421bf0:	41 54                	push   %r12
        validators::check_first_occurrence(v);
  421bf2:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  421bf9:	ff ff ff 
    void validate(boost::any& v, 
  421bfc:	55                   	push   %rbp
  421bfd:	53                   	push   %rbx
  421bfe:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 421be0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l>
  421c05:	48 89 f5             	mov    %rsi,%rbp
  421c08:	49 89 fd             	mov    %rdi,%r13
  421c0b:	48 81 ec 98 02 00 00 	sub    $0x298,%rsp
  421c12:	4c 01 db             	add    %r11,%rbx
        validators::check_first_occurrence(v);
  421c15:	48 01 d8             	add    %rbx,%rax
  421c18:	49 89 df             	mov    %rbx,%r15
  421c1b:	ff d0                	callq  *%rax
        std::basic_string<charT> s(validators::get_single_string(xs));
  421c1d:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  421c20:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  421c25:	48 b8 60 69 df ff ff 	movabs $0xffffffffffdf6960,%rax
  421c2c:	ff ff ff 
  421c2f:	31 f6                	xor    %esi,%esi
  421c31:	48 01 d8             	add    %rbx,%rax
  421c34:	ff d0                	callq  *%rax
  421c36:	48 8d 55 10          	lea    0x10(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  421c3a:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  421c3d:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  421c42:	48 8b 30             	mov    (%rax),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  421c45:	48 89 f2             	mov    %rsi,%rdx
  421c48:	48 03 50 08          	add    0x8(%rax),%rdx
          _M_construct(__beg, __end, _Tag());
  421c4c:	48 b8 20 2c de ff ff 	movabs $0xffffffffffde2c20,%rax
  421c53:	ff ff ff 
  421c56:	48 01 d8             	add    %rbx,%rax
  421c59:	ff d0                	callq  *%rax
  421c5b:	4c 8b 74 24 50       	mov    0x50(%rsp),%r14
namespace boost 
{
    template <typename Target, typename Source>
    inline Target lexical_cast(const Source &arg)
    {
        Target result = Target();
  421c60:	48 b8 4c 93 df ff ff 	movabs $0xffffffffffdf934c,%rax
  421c67:	ff ff ff 
  421c6a:	f3 0f 10 04 03       	movss  (%rbx,%rax,1),%xmm0
  421c6f:	f3 0f 11 44 24 2c    	movss  %xmm0,0x2c(%rsp)
/************************************ OPERATORS << ( ... ) ********************************/
        public:
            template<class Alloc>
            bool operator<<(std::basic_string<CharT,Traits,Alloc> const& str) BOOST_NOEXCEPT {
                start = str.data();
                finish = start + str.length();
  421c75:	4d 89 f4             	mov    %r14,%r12
  421c78:	4c 03 64 24 58       	add    0x58(%rsp),%r12
            , const CharT* lc_NAN, const CharT* lc_nan
            , const CharT* lc_INFINITY, const CharT* lc_infinity
            , const CharT opening_brace, const CharT closing_brace) BOOST_NOEXCEPT
        {
            using namespace std;
            if (begin == end) return false;
  421c7d:	4d 39 e6             	cmp    %r12,%r14
  421c80:	0f 84 8a 00 00 00    	je     421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
            const CharT minus = lcast_char_constants<CharT>::minus;
            const CharT plus = lcast_char_constants<CharT>::plus;
            const int inifinity_size = 8; // == sizeof("infinity") - 1

            /* Parsing +/- */
            bool const has_minus = (*begin == minus);
  421c86:	41 0f b6 0e          	movzbl (%r14),%ecx
            if (has_minus || *begin == plus) {
                ++ begin;
            }

            if (end - begin < 3) return false;
  421c8a:	4c 89 e2             	mov    %r12,%rdx
            if (has_minus || *begin == plus) {
  421c8d:	8d 41 d5             	lea    -0x2b(%rcx),%eax
  421c90:	83 e0 fd             	and    $0xfffffffd,%eax
                ++ begin;
  421c93:	3c 01                	cmp    $0x1,%al
  421c95:	4c 89 f0             	mov    %r14,%rax
  421c98:	48 83 d0 00          	adc    $0x0,%rax
            if (end - begin < 3) return false;
  421c9c:	48 29 c2             	sub    %rax,%rdx
  421c9f:	48 83 fa 02          	cmp    $0x2,%rdx
  421ca3:	7e 6b                	jle    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                if ( val[i] != lcase[i] && val[i] != ucase[i] ) return false;
  421ca5:	0f b6 30             	movzbl (%rax),%esi
  421ca8:	40 80 fe 6e          	cmp    $0x6e,%sil
  421cac:	74 0a                	je     421cb8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0xd8>
  421cae:	40 80 fe 4e          	cmp    $0x4e,%sil
  421cb2:	0f 85 f8 02 00 00    	jne    421fb0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3d0>
  421cb8:	0f b6 78 01          	movzbl 0x1(%rax),%edi
  421cbc:	40 80 ff 61          	cmp    $0x61,%dil
  421cc0:	74 0a                	je     421ccc <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0xec>
  421cc2:	40 80 ff 41          	cmp    $0x41,%dil
  421cc6:	0f 85 e4 02 00 00    	jne    421fb0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3d0>
  421ccc:	0f b6 78 02          	movzbl 0x2(%rax),%edi
  421cd0:	40 80 ff 6e          	cmp    $0x6e,%dil
  421cd4:	74 0a                	je     421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x100>
  421cd6:	40 80 ff 4e          	cmp    $0x4e,%dil
  421cda:	0f 85 d0 02 00 00    	jne    421fb0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3d0>
            if (lc_iequal(begin, lc_nan, lc_NAN, 3)) {
                begin += 3;
  421ce0:	48 8d 50 03          	lea    0x3(%rax),%rdx
                if (end != begin) {
  421ce4:	49 39 d4             	cmp    %rdx,%r12
  421ce7:	0f 84 3b 04 00 00    	je     422128 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x548>
                    /* It is 'nan(...)' or some bad input*/
                    
                    if (end - begin < 2) return false; // bad input
  421ced:	4c 89 e6             	mov    %r12,%rsi
  421cf0:	48 29 d6             	sub    %rdx,%rsi
  421cf3:	48 83 fe 01          	cmp    $0x1,%rsi
  421cf7:	7e 17                	jle    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                    -- end;
                    if (*begin != opening_brace || *end != closing_brace) return false; // bad input
  421cf9:	80 78 03 28          	cmpb   $0x28,0x3(%rax)
  421cfd:	75 11                	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421cff:	41 80 7c 24 ff 29    	cmpb   $0x29,-0x1(%r12)
  421d05:	0f 84 1d 04 00 00    	je     422128 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x548>
  421d0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      _M_buf_locale(locale())
  421d10:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  421d17:	ff ff ff 
  421d1a:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  421d21:	00 
  421d22:	49 89 df             	mov    %rbx,%r15
  421d25:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  421d2a:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  421d2e:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  421d35:	00 00 
  421d37:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  421d3e:	00 00 00 00 00 
  421d43:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  421d4a:	00 00 00 00 00 
  421d4f:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
  421d56:	00 00 00 00 00 
  421d5b:	48 83 c0 10          	add    $0x10,%rax
  421d5f:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
  421d66:	00 00 00 00 00 
  421d6b:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
  421d72:	00 00 00 00 00 
  421d77:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  421d7c:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
  421d81:	48 89 04 24          	mov    %rax,(%rsp)
  421d85:	48 b8 60 eb dd ff ff 	movabs $0xffffffffffddeb60,%rax
  421d8c:	ff ff ff 
  421d8f:	48 01 d8             	add    %rbx,%rax
  421d92:	ff d0                	callq  *%rax
	_M_in_beg = __gbeg;
  421d94:	4c 89 74 24 78       	mov    %r14,0x78(%rsp)
	_M_in_cur = __gnext;
  421d99:	4c 89 b4 24 80 00 00 	mov    %r14,0x80(%rsp)
  421da0:	00 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
  421da1:	4c 8d b4 24 70 01 00 	lea    0x170(%rsp),%r14
  421da8:	00 
        class basic_unlockedbuf : public basic_pointerbuf<CharT, BufferType> {
  421da9:	48 b8 e0 f5 ff ff ff 	movabs $0xfffffffffffff5e0,%rax
  421db0:	ff ff ff 
	_M_in_end = __gend;
  421db3:	4c 89 a4 24 88 00 00 	mov    %r12,0x88(%rsp)
  421dba:	00 
  421dbb:	49 8d 56 10          	lea    0x10(%r14),%rdx
  421dbf:	48 01 d8             	add    %rbx,%rax
  421dc2:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  421dc7:	48 b8 c0 e4 dd ff ff 	movabs $0xffffffffffdde4c0,%rax
  421dce:	ff ff ff 
  421dd1:	48 89 d7             	mov    %rdx,%rdi
  421dd4:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  421dd9:	48 01 d8             	add    %rbx,%rax
  421ddc:	ff d0                	callq  *%rax
      : _M_gcount(streamsize(0))
  421dde:	48 b9 c8 ff ff ff ff 	movabs $0xffffffffffffffc8,%rcx
  421de5:	ff ff ff 
      { this->init(__sb); }
  421de8:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  421ded:	48 c7 84 24 58 02 00 	movq   $0x0,0x258(%rsp)
  421df4:	00 00 00 00 00 
      : _M_gcount(streamsize(0))
  421df9:	48 8b 04 19          	mov    (%rcx,%rbx,1),%rax
  421dfd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  421e02:	c6 84 24 60 02 00 00 	movb   $0x0,0x260(%rsp)
  421e09:	00 
  421e0a:	c6 84 24 61 02 00 00 	movb   $0x0,0x261(%rsp)
  421e11:	00 
  421e12:	48 c7 84 24 68 02 00 	movq   $0x0,0x268(%rsp)
  421e19:	00 00 00 00 00 
  421e1e:	48 c7 84 24 70 02 00 	movq   $0x0,0x270(%rsp)
  421e25:	00 00 00 00 00 
      { this->init(__sb); }
  421e2a:	48 89 d7             	mov    %rdx,%rdi
      : _M_gcount(streamsize(0))
  421e2d:	48 8d 48 18          	lea    0x18(%rax),%rcx
  421e31:	48 83 c0 40          	add    $0x40,%rax
  421e35:	48 c7 84 24 78 02 00 	movq   $0x0,0x278(%rsp)
  421e3c:	00 00 00 00 00 
  421e41:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  421e48:	00 
      { this->init(__sb); }
  421e49:	48 b8 30 e9 dd ff ff 	movabs $0xffffffffffdde930,%rax
  421e50:	ff ff ff 
  421e53:	48 c7 84 24 80 02 00 	movq   $0x0,0x280(%rsp)
  421e5a:	00 00 00 00 00 
      : _M_gcount(streamsize(0))
  421e5f:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
  421e66:	00 
  421e67:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  421e6e:	00 00 00 00 00 
      { this->init(__sb); }
  421e73:	48 01 d8             	add    %rbx,%rax
  421e76:	48 8b 34 24          	mov    (%rsp),%rsi
  421e7a:	ff d0                	callq  *%rax
        this->clear(_M_streambuf_state);
  421e7c:	48 b8 70 ea dd ff ff 	movabs $0xffffffffffddea70,%rax
  421e83:	ff ff ff 
        _M_exception = __except;
  421e86:	c7 84 24 9c 01 00 00 	movl   $0x1,0x19c(%rsp)
  421e8d:	01 00 00 00 
        this->clear(_M_streambuf_state);
  421e91:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  421e95:	8b b4 24 a0 01 00 00 	mov    0x1a0(%rsp),%esi
  421e9c:	49 89 df             	mov    %rbx,%r15
  421e9f:	48 01 d8             	add    %rbx,%rax
  421ea2:	ff d0                	callq  *%rax
       *  These functions use the stream's current locale (specifically, the
       *  @c num_get facet) to parse the input data.
      */
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }
  421ea4:	48 b8 50 eb dd ff ff 	movabs $0xffffffffffddeb50,%rax
  421eab:	ff ff ff 
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
  421eae:	81 a4 24 98 01 00 00 	andl   $0xffffefff,0x198(%rsp)
  421eb5:	ff ef ff ff 
    */
    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
  421eb9:	48 c7 84 24 88 01 00 	movq   $0x9,0x188(%rsp)
  421ec0:	00 09 00 00 00 
  421ec5:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  421eca:	4c 89 f7             	mov    %r14,%rdi
  421ecd:	48 01 d8             	add    %rbx,%rax
  421ed0:	ff d0                	callq  *%rax
#endif
                stream.unsetf(std::ios::skipws);
                lcast_set_precision(stream, static_cast<InputStreamable*>(0));

                return (stream >> output) 
                    && (stream.get() == Traits::eof());
  421ed2:	48 8b 10             	mov    (%rax),%rdx
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
  421ed5:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  421ed9:	f6 44 10 20 05       	testb  $0x5,0x20(%rax,%rdx,1)
  421ede:	0f 84 6c 02 00 00    	je     422150 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x570>
      { _M_gcount = streamsize(0); }
  421ee4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      ~basic_ios() { }
  421ee9:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  421eed:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  421ef4:	00 00 00 00 00 
  421ef9:	49 89 df             	mov    %rbx,%r15
  421efc:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  421f00:	48 83 c0 18          	add    $0x18,%rax
  421f04:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  421f0b:	00 
  421f0c:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  421f13:	ff ff ff 
  421f16:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  421f1a:	48 83 c0 10          	add    $0x10,%rax
  421f1e:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  421f25:	00 
  421f26:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  421f2d:	ff ff ff 
  421f30:	48 01 d8             	add    %rbx,%rax
  421f33:	ff d0                	callq  *%rax
      { }
  421f35:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  421f3a:	48 8b 3c 24          	mov    (%rsp),%rdi
  421f3e:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  421f42:	48 83 c7 38          	add    $0x38,%rdi
  421f46:	48 83 c0 10          	add    $0x10,%rax
  421f4a:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  421f4f:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  421f56:	ff ff ff 
  421f59:	48 01 d8             	add    %rbx,%rax
  421f5c:	ff d0                	callq  *%rax
            : source(&source_type_arg), target(&target_type_arg)
  421f5e:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  421f65:	ff ff ff 
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  421f68:	4c 8d 64 24 30       	lea    0x30(%rsp),%r12
            : source(&source_type_arg), target(&target_type_arg)
  421f6d:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  421f71:	48 b8 60 f8 ff ff ff 	movabs $0xfffffffffffff860,%rax
  421f78:	ff ff ff 
  421f7b:	48 01 d8             	add    %rbx,%rax
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  421f7e:	4c 89 e7             	mov    %r12,%rdi
            : source(&source_type_arg), target(&target_type_arg)
  421f81:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  421f86:	48 b8 b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rax
  421f8d:	ff ff ff 
  421f90:	4c 89 6c 24 30       	mov    %r13,0x30(%rsp)
  421f95:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  421f99:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  421f9e:	48 b8 c0 0b df ff ff 	movabs $0xffffffffffdf0bc0,%rax
  421fa5:	ff ff ff 
  421fa8:	48 01 d8             	add    %rbx,%rax
  421fab:	ff d0                	callq  *%rax
  421fad:	0f 1f 00             	nopl   (%rax)
            } else if (
                ( /* 'INF' or 'inf' */
                  end - begin == 3      // 3 == sizeof('inf') - 1
                  && lc_iequal(begin, lc_infinity, lc_INFINITY, 3)
                )
                ||
  421fb0:	48 83 fa 03          	cmp    $0x3,%rdx
  421fb4:	0f 84 2e 01 00 00    	je     4220e8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x508>
  421fba:	48 83 fa 08          	cmp    $0x8,%rdx
  421fbe:	0f 85 4c fd ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                if ( val[i] != lcase[i] && val[i] != ucase[i] ) return false;
  421fc4:	40 80 fe 69          	cmp    $0x69,%sil
  421fc8:	74 0a                	je     421fd4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3f4>
  421fca:	40 80 fe 49          	cmp    $0x49,%sil
  421fce:	0f 85 3c fd ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421fd4:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  421fd8:	80 fa 6e             	cmp    $0x6e,%dl
  421fdb:	74 09                	je     421fe6 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x406>
  421fdd:	80 fa 4e             	cmp    $0x4e,%dl
  421fe0:	0f 85 2a fd ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421fe6:	0f b6 50 02          	movzbl 0x2(%rax),%edx
  421fea:	80 fa 66             	cmp    $0x66,%dl
  421fed:	74 09                	je     421ff8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x418>
  421fef:	80 fa 46             	cmp    $0x46,%dl
  421ff2:	0f 85 18 fd ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421ff8:	0f b6 50 03          	movzbl 0x3(%rax),%edx
  421ffc:	80 fa 69             	cmp    $0x69,%dl
  421fff:	74 09                	je     42200a <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x42a>
  422001:	80 fa 49             	cmp    $0x49,%dl
  422004:	0f 85 06 fd ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  42200a:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  42200e:	80 fa 6e             	cmp    $0x6e,%dl
  422011:	74 09                	je     42201c <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x43c>
  422013:	80 fa 4e             	cmp    $0x4e,%dl
  422016:	0f 85 f4 fc ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  42201c:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  422020:	80 fa 69             	cmp    $0x69,%dl
  422023:	74 09                	je     42202e <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x44e>
  422025:	80 fa 49             	cmp    $0x49,%dl
  422028:	0f 85 e2 fc ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  42202e:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  422032:	80 fa 74             	cmp    $0x74,%dl
  422035:	74 09                	je     422040 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x460>
  422037:	80 fa 54             	cmp    $0x54,%dl
  42203a:	0f 85 d0 fc ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  422040:	0f b6 40 07          	movzbl 0x7(%rax),%eax
  422044:	3c 79                	cmp    $0x79,%al
  422046:	74 08                	je     422050 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x470>
  422048:	3c 59                	cmp    $0x59,%al
  42204a:	0f 85 c0 fc ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                  end - begin == inifinity_size
                  && lc_iequal(begin, lc_infinity, lc_INFINITY, inifinity_size)
                )
             )
            {
                if( !has_minus ) value = std::numeric_limits<T>::infinity();
  422050:	80 f9 2d             	cmp    $0x2d,%cl
  422053:	0f 84 bf 01 00 00    	je     422218 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x638>
  422059:	48 b8 48 93 df ff ff 	movabs $0xffffffffffdf9348,%rax
  422060:	ff ff ff 
  422063:	f3 0f 10 1c 03       	movss  (%rbx,%rax,1),%xmm3
  422068:	f3 0f 11 1c 24       	movss  %xmm3,(%rsp)
          : content(new holder< typename decay<ValueType>::type >(static_cast<ValueType&&>(value)))
  42206d:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  422074:	ff ff ff 
  422077:	bf 10 00 00 00       	mov    $0x10,%edi
  42207c:	49 89 df             	mov    %rbx,%r15
  42207f:	48 01 d8             	add    %rbx,%rax
  422082:	ff d0                	callq  *%rax
  422084:	49 8b 7d 00          	mov    0x0(%r13),%rdi
              : held(static_cast< ValueType&& >(value))
  422088:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  42208f:	ff ff ff 
      __b = _GLIBCXX_MOVE(__tmp);
  422092:	49 89 45 00          	mov    %rax,0x0(%r13)
  422096:	48 01 da             	add    %rbx,%rdx
  422099:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
  42209e:	48 89 10             	mov    %rdx,(%rax)
  4220a1:	f3 0f 11 48 08       	movss  %xmm1,0x8(%rax)
            delete content;
  4220a6:	48 85 ff             	test   %rdi,%rdi
  4220a9:	74 06                	je     4220b1 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x4d1>
  4220ab:	48 8b 07             	mov    (%rdi),%rax
  4220ae:	ff 50 08             	callq  *0x8(%rax)
  4220b1:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
	if (!_M_is_local())
  4220b6:	48 83 c5 10          	add    $0x10,%rbp
  4220ba:	48 39 ef             	cmp    %rbp,%rdi
  4220bd:	74 12                	je     4220d1 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x4f1>
  4220bf:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  4220c6:	ff ff ff 
  4220c9:	49 89 df             	mov    %rbx,%r15
  4220cc:	48 01 d8             	add    %rbx,%rax
  4220cf:	ff d0                	callq  *%rax
    }
  4220d1:	48 81 c4 98 02 00 00 	add    $0x298,%rsp
  4220d8:	5b                   	pop    %rbx
  4220d9:	5d                   	pop    %rbp
  4220da:	41 5c                	pop    %r12
  4220dc:	41 5d                	pop    %r13
  4220de:	41 5e                	pop    %r14
  4220e0:	41 5f                	pop    %r15
  4220e2:	c3                   	retq   
  4220e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                if ( val[i] != lcase[i] && val[i] != ucase[i] ) return false;
  4220e8:	40 80 fe 69          	cmp    $0x69,%sil
  4220ec:	74 0a                	je     4220f8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x518>
  4220ee:	40 80 fe 49          	cmp    $0x49,%sil
  4220f2:	0f 85 18 fc ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  4220f8:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  4220fc:	80 fa 6e             	cmp    $0x6e,%dl
  4220ff:	74 09                	je     42210a <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x52a>
  422101:	80 fa 4e             	cmp    $0x4e,%dl
  422104:	0f 85 06 fc ff ff    	jne    421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  42210a:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  42210e:	3c 66                	cmp    $0x66,%al
  422110:	0f 84 3a ff ff ff    	je     422050 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x470>
  422116:	3c 46                	cmp    $0x46,%al
  422118:	0f 84 32 ff ff ff    	je     422050 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x470>
  42211e:	e9 ed fb ff ff       	jmpq   421d10 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  422123:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                if( !has_minus ) value = std::numeric_limits<T>::quiet_NaN();
  422128:	80 f9 2d             	cmp    $0x2d,%cl
  42212b:	0f 84 7f 01 00 00    	je     4222b0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x6d0>
  422131:	48 b8 3c 93 df ff ff 	movabs $0xffffffffffdf933c,%rax
  422138:	ff ff ff 
  42213b:	f3 0f 10 2c 03       	movss  (%rbx,%rax,1),%xmm5
  422140:	f3 0f 11 2c 24       	movss  %xmm5,(%rsp)
  422145:	e9 23 ff ff ff       	jmpq   42206d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  42214a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  422150:	48 b8 80 e8 dd ff ff 	movabs $0xffffffffffdde880,%rax
  422157:	ff ff ff 
  42215a:	4c 89 f7             	mov    %r14,%rdi
  42215d:	48 01 d8             	add    %rbx,%rax
  422160:	ff d0                	callq  *%rax
  422162:	83 f8 ff             	cmp    $0xffffffff,%eax
  422165:	0f 85 79 fd ff ff    	jne    421ee4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x304>
  42216b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  422170:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  422174:	49 89 df             	mov    %rbx,%r15
  422177:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  42217e:	00 00 00 00 00 
  422183:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  422187:	48 83 c0 18          	add    $0x18,%rax
  42218b:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  422192:	00 
  422193:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  42219a:	ff ff ff 
  42219d:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4221a1:	48 83 c0 10          	add    $0x10,%rax
  4221a5:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  4221ac:	00 
  4221ad:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  4221b4:	ff ff ff 
  4221b7:	48 01 d8             	add    %rbx,%rax
  4221ba:	ff d0                	callq  *%rax
  4221bc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4221c1:	48 8b 3c 24          	mov    (%rsp),%rdi
  4221c5:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  4221c9:	48 83 c7 38          	add    $0x38,%rdi
  4221cd:	48 83 c0 10          	add    $0x10,%rax
  4221d1:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  4221d6:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  4221dd:	ff ff ff 
  4221e0:	48 01 d8             	add    %rbx,%rax
  4221e3:	ff d0                	callq  *%rax
  4221e5:	41 0f b6 44 24 ff    	movzbl -0x1(%r12),%eax
                if ( return_value &&
                     (
                        Traits::eq(*(finish-1), lowercase_e)                   // 1.0e
                        || Traits::eq(*(finish-1), capital_e)                  // 1.0E
                        || Traits::eq(*(finish-1), minus)                      // 1.0e- or 1.0E-
                        || Traits::eq(*(finish-1), plus)                       // 1.0e+ or 1.0E+
  4221eb:	8d 50 d5             	lea    -0x2b(%rax),%edx
                    return false;

                o_interpreter_type out(i_interpreter.cbegin(), i_interpreter.cend());

                // Disabling ADL, by directly specifying operators.
                if(!(out.operator >>(result)))
  4221ee:	81 e2 fd 00 00 00    	and    $0xfd,%edx
  4221f4:	0f 84 64 fd ff ff    	je     421f5e <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x37e>
                        || Traits::eq(*(finish-1), capital_e)                  // 1.0E
  4221fa:	83 e0 df             	and    $0xffffffdf,%eax
  4221fd:	3c 45                	cmp    $0x45,%al
  4221ff:	0f 84 59 fd ff ff    	je     421f5e <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x37e>
  422205:	f3 0f 10 54 24 2c    	movss  0x2c(%rsp),%xmm2
  42220b:	f3 0f 11 14 24       	movss  %xmm2,(%rsp)
  422210:	e9 58 fe ff ff       	jmpq   42206d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  422215:	0f 1f 00             	nopl   (%rax)
                if( !has_minus ) value = std::numeric_limits<T>::infinity();
  422218:	48 b8 40 93 df ff ff 	movabs $0xffffffffffdf9340,%rax
  42221f:	ff ff ff 
  422222:	f3 0f 10 24 03       	movss  (%rbx,%rax,1),%xmm4
  422227:	f3 0f 11 24 24       	movss  %xmm4,(%rsp)
  42222c:	e9 3c fe ff ff       	jmpq   42206d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  422231:	49 89 d6             	mov    %rdx,%r14
        {}
  422234:	48 ba d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rdx
  42223b:	ff ff ff 
  42223e:	48 89 04 24          	mov    %rax,(%rsp)
  422242:	48 01 da             	add    %rbx,%rdx
  422245:	4c 89 6c 24 30       	mov    %r13,0x30(%rsp)
  42224a:	4c 89 e7             	mov    %r12,%rdi
  42224d:	49 89 df             	mov    %rbx,%r15
  422250:	ff d2                	callq  *%rdx
  422252:	48 8b 04 24          	mov    (%rsp),%rax
  422256:	4c 89 f2             	mov    %r14,%rdx
  422259:	48 83 ea 01          	sub    $0x1,%rdx
  42225d:	49 89 c4             	mov    %rax,%r12
  422260:	0f 85 9f 00 00 00    	jne    422305 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x725>
        catch(const bad_lexical_cast&) {
  422266:	48 89 c7             	mov    %rax,%rdi
            boost::throw_exception(invalid_option_value(s));
  422269:	4c 8d ac 24 b0 00 00 	lea    0xb0(%rsp),%r13
  422270:	00 
        catch(const bad_lexical_cast&) {
  422271:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  422278:	ff ff ff 
  42227b:	49 89 df             	mov    %rbx,%r15
  42227e:	48 01 d8             	add    %rbx,%rax
  422281:	ff d0                	callq  *%rax
            boost::throw_exception(invalid_option_value(s));
  422283:	48 b8 10 e6 dd ff ff 	movabs $0xffffffffffdde610,%rax
  42228a:	ff ff ff 
  42228d:	48 89 ee             	mov    %rbp,%rsi
  422290:	4c 89 ef             	mov    %r13,%rdi
  422293:	48 01 d8             	add    %rbx,%rax
  422296:	ff d0                	callq  *%rax
  422298:	48 b8 c0 64 df ff ff 	movabs $0xffffffffffdf64c0,%rax
  42229f:	ff ff ff 
  4222a2:	4c 89 ef             	mov    %r13,%rdi
  4222a5:	48 01 d8             	add    %rbx,%rax
  4222a8:	ff d0                	callq  *%rax
  4222aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                if( !has_minus ) value = std::numeric_limits<T>::quiet_NaN();
  4222b0:	48 b8 44 93 df ff ff 	movabs $0xffffffffffdf9344,%rax
  4222b7:	ff ff ff 
  4222ba:	f3 0f 10 34 03       	movss  (%rbx,%rax,1),%xmm6
  4222bf:	f3 0f 11 34 24       	movss  %xmm6,(%rsp)
  4222c4:	e9 a4 fd ff ff       	jmpq   42206d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  4222c9:	49 89 c4             	mov    %rax,%r12
  4222cc:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4222d3:	ff ff ff 
  4222d6:	4c 89 ef             	mov    %r13,%rdi
  4222d9:	48 01 d8             	add    %rbx,%rax
  4222dc:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  4222e3:	00 
  4222e4:	48 b8 10 c5 de ff ff 	movabs $0xffffffffffdec510,%rax
  4222eb:	ff ff ff 
  4222ee:	48 01 d8             	add    %rbx,%rax
  4222f1:	ff d0                	callq  *%rax
        catch(const bad_lexical_cast&) {
  4222f3:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  4222fa:	ff ff ff 
  4222fd:	49 89 df             	mov    %rbx,%r15
  422300:	48 01 d8             	add    %rbx,%rax
  422303:	ff d0                	callq  *%rax
  422305:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  42230a:	48 83 c5 10          	add    $0x10,%rbp
  42230e:	48 39 ef             	cmp    %rbp,%rdi
  422311:	74 12                	je     422325 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x745>
  422313:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  42231a:	ff ff ff 
  42231d:	49 89 df             	mov    %rbx,%r15
  422320:	48 01 d8             	add    %rbx,%rax
  422323:	ff d0                	callq  *%rax
  422325:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  42232c:	ff ff ff 
  42232f:	4c 89 e7             	mov    %r12,%rdi
  422332:	49 89 df             	mov    %rbx,%r15
  422335:	48 01 d8             	add    %rbx,%rax
  422338:	ff d0                	callq  *%rax
  42233a:	49 89 c4             	mov    %rax,%r12
  42233d:	eb b4                	jmp    4222f3 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x713>
  42233f:	e9 15 ff ff ff       	jmpq   422259 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x679>
  422344:	48 83 fa 02          	cmp    $0x2,%rdx
  422348:	0f 85 96 00 00 00    	jne    4223e4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x804>
                } catch (const ::std::ios_base::failure& /*f*/) {
  42234e:	48 89 c7             	mov    %rax,%rdi
  422351:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  422358:	ff ff ff 
  42235b:	49 89 df             	mov    %rbx,%r15
  42235e:	48 01 d8             	add    %rbx,%rax
  422361:	ff d0                	callq  *%rax
  422363:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  42236a:	ff ff ff 
  42236d:	48 01 d8             	add    %rbx,%rax
  422370:	ff d0                	callq  *%rax
  422372:	e9 6d fb ff ff       	jmpq   421ee4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x304>
  422377:	49 89 c4             	mov    %rax,%r12
  42237a:	49 89 d5             	mov    %rdx,%r13
  42237d:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  422384:	ff ff ff 
  422387:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  42238b:	49 89 df             	mov    %rbx,%r15
  42238e:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  422392:	48 83 c0 10          	add    $0x10,%rax
  422396:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  42239d:	00 
  42239e:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  4223a5:	ff ff ff 
  4223a8:	48 01 d8             	add    %rbx,%rax
  4223ab:	ff d0                	callq  *%rax
  4223ad:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4223b2:	48 8b 3c 24          	mov    (%rsp),%rdi
  4223b6:	49 89 df             	mov    %rbx,%r15
  4223b9:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  4223bd:	48 83 c7 38          	add    $0x38,%rdi
  4223c1:	48 83 c0 10          	add    $0x10,%rax
  4223c5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  4223ca:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  4223d1:	ff ff ff 
  4223d4:	48 01 d8             	add    %rbx,%rax
  4223d7:	ff d0                	callq  *%rax
  4223d9:	4c 89 e0             	mov    %r12,%rax
  4223dc:	4c 89 ea             	mov    %r13,%rdx
  4223df:	e9 75 fe ff ff       	jmpq   422259 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x679>
  4223e4:	49 89 c4             	mov    %rax,%r12
  4223e7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4223ec:	49 89 d5             	mov    %rdx,%r13
  4223ef:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  4223f6:	00 00 00 00 00 
  4223fb:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  4223ff:	48 83 c0 18          	add    $0x18,%rax
  422403:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  42240a:	00 
  42240b:	e9 6d ff ff ff       	jmpq   42237d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x79d>

0000000000422410 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE>:
    typed_value<T, charT>::
  422410:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 422410 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE>
  422417:	49 bb f0 8b 20 00 00 	movabs $0x208bf0,%r11
  42241e:	00 00 00 
  422421:	48 89 f9             	mov    %rdi,%rcx
  422424:	48 89 f7             	mov    %rsi,%rdi
  422427:	48 89 d6             	mov    %rdx,%rsi
        if (new_tokens.empty() && !m_implicit_value.empty())
  42242a:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  42242e:	4c 01 d8             	add    %r11,%rax
  422431:	48 39 16             	cmp    %rdx,(%rsi)
  422434:	74 1a                	je     422450 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE+0x40>
            validate(value_store, new_tokens, (T*)0, 0);
  422436:	49 b8 e0 6b df ff ff 	movabs $0xffffffffffdf6be0,%r8
  42243d:	ff ff ff 
  422440:	31 c9                	xor    %ecx,%ecx
  422442:	31 d2                	xor    %edx,%edx
  422444:	4c 01 c0             	add    %r8,%rax
  422447:	ff e0                	jmpq   *%rax
  422449:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if (new_tokens.empty() && !m_implicit_value.empty())
  422450:	48 83 79 60 00       	cmpq   $0x0,0x60(%rcx)
  422455:	74 df                	je     422436 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE+0x26>
            value_store = m_implicit_value;
  422457:	48 ba b0 a7 de ff ff 	movabs $0xffffffffffdea7b0,%rdx
  42245e:	ff ff ff 
  422461:	48 8d 71 60          	lea    0x60(%rcx),%rsi
  422465:	48 01 d0             	add    %rdx,%rax
  422468:	ff e0                	jmpq   *%rax
  42246a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000422470 <_ZL19abort_unimplementedPKc>:
}

/* Unimplemented functions below. Programs rarely use these, so rather than
 * implementing the library in full, we do these on demand */

static void abort_unimplemented(const char* fn) {
  422470:	53                   	push   %rbx
				   __bos (__s), __fmt, __va_arg_pack ());
  422471:	4c 8d 05 d8 1e 00 00 	lea    0x1ed8(%rip),%r8        # 424350 <_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEEE+0x90>
  422478:	49 89 f9             	mov    %rdi,%r9
  42247b:	b9 00 04 00 00       	mov    $0x400,%ecx
  422480:	ba 01 00 00 00       	mov    $0x1,%edx
  422485:	be 00 04 00 00       	mov    $0x400,%esi
  42248a:	48 81 ec 10 04 00 00 	sub    $0x410,%rsp
  422491:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  422498:	00 00 
  42249a:	48 89 84 24 08 04 00 	mov    %rax,0x408(%rsp)
  4224a1:	00 
  4224a2:	31 c0                	xor    %eax,%eax
  4224a4:	48 89 e7             	mov    %rsp,%rdi
  4224a7:	e8 84 71 fe ff       	callq  409630 <__snprintf_chk@plt>
    COMPILER_BARRIER();
}

static inline void sim_magic_op_1(uint64_t op, uint64_t arg0) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4224ac:	b9 05 04 00 00       	mov    $0x405,%ecx
  4224b1:	48 89 e7             	mov    %rsp,%rdi
  4224b4:	48 87 c9             	xchg   %rcx,%rcx
    char buf[1024];
    snprintf(buf, sizeof(buf), "Aborting: sim-alloc function unimplemented: %s", fn);
    sim_magic_op_1(MAGIC_OP_WRITE_STD_OUT, reinterpret_cast<uint64_t>(&buf[0]));
    std::abort();
  4224b7:	e8 14 71 fe ff       	callq  4095d0 <abort@plt>
  4224bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004224c0 <malloc>:
void* malloc(size_t size) {
  4224c0:	48 83 ec 18          	sub    $0x18,%rsp
  4224c4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4224cb:	00 00 
  4224cd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4224d2:	31 c0                	xor    %eax,%eax
    if (size > 0) {
  4224d4:	48 85 ff             	test   %rdi,%rdi
  4224d7:	74 27                	je     422500 <malloc+0x40>
  4224d9:	48 89 fe             	mov    %rdi,%rsi
    COMPILER_BARRIER();
}

static inline void sim_magic_op_2(uint64_t op, uint64_t arg0, uint64_t arg1) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  4224dc:	b9 00 20 00 00       	mov    $0x2000,%ecx
        sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), size);
  4224e1:	48 89 e7             	mov    %rsp,%rdi
  4224e4:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  4224e7:	48 8b 04 24          	mov    (%rsp),%rax
}
  4224eb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  4224f0:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  4224f7:	00 00 
  4224f9:	75 09                	jne    422504 <malloc+0x44>
  4224fb:	48 83 c4 18          	add    $0x18,%rsp
  4224ff:	c3                   	retq   
        return nullptr;
  422500:	31 c0                	xor    %eax,%eax
  422502:	eb e7                	jmp    4224eb <malloc+0x2b>
}
  422504:	e8 07 73 fe ff       	callq  409810 <__stack_chk_fail@plt>
  422509:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000422510 <calloc>:
void* calloc(size_t nmemb, size_t size) {
  422510:	48 83 ec 18          	sub    $0x18,%rsp
  422514:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42251b:	00 00 
  42251d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422522:	31 c0                	xor    %eax,%eax
    const size_t total = nmemb * size;
  422524:	48 0f af f7          	imul   %rdi,%rsi
  422528:	b9 00 20 00 00       	mov    $0x2000,%ecx
    sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), total);
  42252d:	48 89 e7             	mov    %rsp,%rdi
  422530:	48 87 c9             	xchg   %rcx,%rcx
    {
      __warn_memset_zero_len ();
      return __dest;
    }
#endif
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
  422533:	48 8b 3c 24          	mov    (%rsp),%rdi
  422537:	48 89 f2             	mov    %rsi,%rdx
  42253a:	31 f6                	xor    %esi,%esi
  42253c:	e8 7f 70 fe ff       	callq  4095c0 <memset@plt>
}
  422541:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  422546:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  42254d:	00 00 
  42254f:	48 8b 04 24          	mov    (%rsp),%rax
  422553:	75 05                	jne    42255a <calloc+0x4a>
  422555:	48 83 c4 18          	add    $0x18,%rsp
  422559:	c3                   	retq   
  42255a:	e8 b1 72 fe ff       	callq  409810 <__stack_chk_fail@plt>
  42255f:	90                   	nop

0000000000422560 <realloc>:
void* realloc(void* ptr, size_t size) {
  422560:	53                   	push   %rbx
  422561:	48 89 f0             	mov    %rsi,%rax
  422564:	48 83 ec 10          	sub    $0x10,%rsp
  422568:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  42256f:	00 00 
  422571:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  422576:	31 d2                	xor    %edx,%edx
    if (!ptr) {
  422578:	48 85 ff             	test   %rdi,%rdi
  42257b:	74 73                	je     4225f0 <realloc+0x90>
    } else if (size == 0) {
  42257d:	48 85 f6             	test   %rsi,%rsi
  422580:	48 89 fb             	mov    %rdi,%rbx
  422583:	0f 84 87 00 00 00    	je     422610 <realloc+0xb0>
  422589:	b9 04 20 00 00       	mov    $0x2004,%ecx
    sim_magic_op_2(MAGIC_OP_MALLOC_USABLE_SIZE, reinterpret_cast<uint64_t>(&usableSize), reinterpret_cast<uint64_t>(ptr));
  42258e:	48 89 e7             	mov    %rsp,%rdi
  422591:	48 89 de             	mov    %rbx,%rsi
  422594:	48 87 c9             	xchg   %rcx,%rcx
    return usableSize;
  422597:	48 8b 14 24          	mov    (%rsp),%rdx
  42259b:	49 89 d8             	mov    %rbx,%r8
        if (oldSize >= size) {
  42259e:	48 39 d0             	cmp    %rdx,%rax
  4225a1:	77 1d                	ja     4225c0 <realloc+0x60>
}
  4225a3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  4225a8:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  4225af:	00 00 
  4225b1:	4c 89 c0             	mov    %r8,%rax
  4225b4:	75 72                	jne    422628 <realloc+0xc8>
  4225b6:	48 83 c4 10          	add    $0x10,%rsp
  4225ba:	5b                   	pop    %rbx
  4225bb:	c3                   	retq   
  4225bc:	0f 1f 40 00          	nopl   0x0(%rax)
  4225c0:	b9 00 20 00 00       	mov    $0x2000,%ecx
  4225c5:	48 89 c6             	mov    %rax,%rsi
  4225c8:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  4225cb:	4c 8b 04 24          	mov    (%rsp),%r8
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  4225cf:	48 89 de             	mov    %rbx,%rsi
  4225d2:	4c 89 c7             	mov    %r8,%rdi
  4225d5:	e8 56 71 fe ff       	callq  409730 <memcpy@plt>
  4225da:	49 89 c0             	mov    %rax,%r8
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4225dd:	b9 03 20 00 00       	mov    $0x2003,%ecx
  4225e2:	48 89 df             	mov    %rbx,%rdi
  4225e5:	48 87 c9             	xchg   %rcx,%rcx
            return newPtr;
  4225e8:	eb b9                	jmp    4225a3 <realloc+0x43>
  4225ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    if (size > 0) {
  4225f0:	48 85 f6             	test   %rsi,%rsi
  4225f3:	74 2b                	je     422620 <realloc+0xc0>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  4225f5:	b9 00 20 00 00       	mov    $0x2000,%ecx
        sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), size);
  4225fa:	48 89 e7             	mov    %rsp,%rdi
  4225fd:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  422600:	4c 8b 04 24          	mov    (%rsp),%r8
  422604:	eb 9d                	jmp    4225a3 <realloc+0x43>
  422606:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42260d:	00 00 00 
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  422610:	b9 03 20 00 00       	mov    $0x2003,%ecx
  422615:	48 87 c9             	xchg   %rcx,%rcx
        return nullptr;
  422618:	45 31 c0             	xor    %r8d,%r8d
  42261b:	eb 86                	jmp    4225a3 <realloc+0x43>
  42261d:	0f 1f 00             	nopl   (%rax)
        return nullptr;
  422620:	45 31 c0             	xor    %r8d,%r8d
  422623:	e9 7b ff ff ff       	jmpq   4225a3 <realloc+0x43>
}
  422628:	e8 e3 71 fe ff       	callq  409810 <__stack_chk_fail@plt>
  42262d:	0f 1f 00             	nopl   (%rax)

0000000000422630 <free>:
    if (ptr) sim_magic_op_1(MAGIC_OP_FREE, reinterpret_cast<uint64_t>(ptr));
  422630:	48 85 ff             	test   %rdi,%rdi
  422633:	74 08                	je     42263d <free+0xd>
  422635:	b9 03 20 00 00       	mov    $0x2003,%ecx
  42263a:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  42263d:	f3 c3                	repz retq 
  42263f:	90                   	nop

0000000000422640 <_Z5cfreePv>:
  422640:	48 85 ff             	test   %rdi,%rdi
  422643:	74 08                	je     42264d <_Z5cfreePv+0xd>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  422645:	b9 03 20 00 00       	mov    $0x2003,%ecx
  42264a:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  42264d:	f3 c3                	repz retq 
  42264f:	90                   	nop

0000000000422650 <posix_memalign>:
int posix_memalign(void **memptr, size_t alignment, size_t size) {
  422650:	48 83 ec 18          	sub    $0x18,%rsp
  422654:	49 89 f8             	mov    %rdi,%r8
  422657:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42265e:	00 00 
  422660:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422665:	31 c0                	xor    %eax,%eax
    if (size == 0) {
  422667:	48 85 d2             	test   %rdx,%rdx
  42266a:	74 54                	je     4226c0 <posix_memalign+0x70>
    } else if (!alignment || (alignment & (alignment - 1))
  42266c:	48 85 f6             	test   %rsi,%rsi
        return EINVAL;
  42266f:	b8 16 00 00 00       	mov    $0x16,%eax
    } else if (!alignment || (alignment & (alignment - 1))
  422674:	75 1a                	jne    422690 <posix_memalign+0x40>
}
  422676:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  42267b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  422682:	00 00 
  422684:	75 4a                	jne    4226d0 <posix_memalign+0x80>
  422686:	48 83 c4 18          	add    $0x18,%rsp
  42268a:	c3                   	retq   
  42268b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    } else if (!alignment || (alignment & (alignment - 1))
  422690:	48 8d 4e ff          	lea    -0x1(%rsi),%rcx
               || (alignment % sizeof(void*))) {
  422694:	48 83 c9 07          	or     $0x7,%rcx
  422698:	48 85 f1             	test   %rsi,%rcx
  42269b:	75 d9                	jne    422676 <posix_memalign+0x26>
    COMPILER_BARRIER();
}

static inline void sim_magic_op_3(uint64_t op, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  42269d:	b9 01 20 00 00       	mov    $0x2001,%ecx
        sim_magic_op_3(MAGIC_OP_POSIX_MEMALIGN,
  4226a2:	48 89 e7             	mov    %rsp,%rdi
  4226a5:	48 87 c9             	xchg   %rcx,%rcx
        if (ptr == nullptr) return ENOMEM;
  4226a8:	48 8b 04 24          	mov    (%rsp),%rax
  4226ac:	48 85 c0             	test   %rax,%rax
  4226af:	74 18                	je     4226c9 <posix_memalign+0x79>
        *memptr = ptr;
  4226b1:	49 89 00             	mov    %rax,(%r8)
    return 0;
  4226b4:	31 c0                	xor    %eax,%eax
  4226b6:	eb be                	jmp    422676 <posix_memalign+0x26>
  4226b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4226bf:	00 
        *memptr = nullptr;
  4226c0:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  4226c7:	eb ad                	jmp    422676 <posix_memalign+0x26>
        if (ptr == nullptr) return ENOMEM;
  4226c9:	b8 0c 00 00 00       	mov    $0xc,%eax
  4226ce:	eb a6                	jmp    422676 <posix_memalign+0x26>
}
  4226d0:	e8 3b 71 fe ff       	callq  409810 <__stack_chk_fail@plt>
  4226d5:	90                   	nop
  4226d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4226dd:	00 00 00 

00000000004226e0 <aligned_alloc>:
  4226e0:	48 83 ec 18          	sub    $0x18,%rsp
  4226e4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4226eb:	00 00 
  4226ed:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4226f2:	31 c0                	xor    %eax,%eax
  4226f4:	48 85 f6             	test   %rsi,%rsi
  4226f7:	74 08                	je     422701 <aligned_alloc+0x21>
  4226f9:	48 85 ff             	test   %rdi,%rdi
  4226fc:	49 89 f8             	mov    %rdi,%r8
  4226ff:	75 1f                	jne    422720 <aligned_alloc+0x40>
  422701:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  422706:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42270d:	00 00 
  42270f:	75 33                	jne    422744 <aligned_alloc+0x64>
  422711:	48 83 c4 18          	add    $0x18,%rsp
  422715:	c3                   	retq   
  422716:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42271d:	00 00 00 
  422720:	48 8d 4f ff          	lea    -0x1(%rdi),%rcx
  422724:	48 83 c9 07          	or     $0x7,%rcx
  422728:	48 85 f9             	test   %rdi,%rcx
  42272b:	75 d4                	jne    422701 <aligned_alloc+0x21>
  42272d:	48 89 f2             	mov    %rsi,%rdx
  422730:	b9 01 20 00 00       	mov    $0x2001,%ecx
  422735:	48 89 e7             	mov    %rsp,%rdi
  422738:	4c 89 c6             	mov    %r8,%rsi
  42273b:	48 87 c9             	xchg   %rcx,%rcx
  42273e:	48 8b 04 24          	mov    (%rsp),%rax
  422742:	eb bd                	jmp    422701 <aligned_alloc+0x21>
  422744:	e8 c7 70 fe ff       	callq  409810 <__stack_chk_fail@plt>
  422749:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000422750 <memalign>:
void* memalign(size_t alignment, size_t size) {
  422750:	48 83 ec 18          	sub    $0x18,%rsp
  422754:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42275b:	00 00 
  42275d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422762:	31 c0                	xor    %eax,%eax
    if (size == 0) {
  422764:	48 85 f6             	test   %rsi,%rsi
  422767:	74 08                	je     422771 <memalign+0x21>
    } else if (!alignment || (alignment & (alignment - 1))
  422769:	48 85 ff             	test   %rdi,%rdi
  42276c:	49 89 f8             	mov    %rdi,%r8
  42276f:	75 1f                	jne    422790 <memalign+0x40>
}
  422771:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  422776:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42277d:	00 00 
  42277f:	75 33                	jne    4227b4 <memalign+0x64>
  422781:	48 83 c4 18          	add    $0x18,%rsp
  422785:	c3                   	retq   
  422786:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42278d:	00 00 00 
    } else if (!alignment || (alignment & (alignment - 1))
  422790:	48 8d 4f ff          	lea    -0x1(%rdi),%rcx
               || (alignment % sizeof(void*))) {
  422794:	48 83 c9 07          	or     $0x7,%rcx
  422798:	48 85 f9             	test   %rdi,%rcx
  42279b:	75 d4                	jne    422771 <memalign+0x21>
  42279d:	48 89 f2             	mov    %rsi,%rdx
  4227a0:	b9 01 20 00 00       	mov    $0x2001,%ecx
        sim_magic_op_3(MAGIC_OP_POSIX_MEMALIGN,
  4227a5:	48 89 e7             	mov    %rsp,%rdi
  4227a8:	4c 89 c6             	mov    %r8,%rsi
  4227ab:	48 87 c9             	xchg   %rcx,%rcx
        if (ptr == nullptr) return ENOMEM;
  4227ae:	48 8b 04 24          	mov    (%rsp),%rax
  4227b2:	eb bd                	jmp    422771 <memalign+0x21>
}
  4227b4:	e8 57 70 fe ff       	callq  409810 <__stack_chk_fail@plt>
  4227b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004227c0 <strdup>:
char* strdup(const char* src) {
  4227c0:	53                   	push   %rbx
  4227c1:	48 89 fb             	mov    %rdi,%rbx
  4227c4:	48 83 ec 10          	sub    $0x10,%rsp
  4227c8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4227cf:	00 00 
  4227d1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4227d6:	31 c0                	xor    %eax,%eax
    size_t len = strlen(src);
  4227d8:	e8 73 6d fe ff       	callq  409550 <strlen@plt>
  4227dd:	31 c9                	xor    %ecx,%ecx
    if (size > 0) {
  4227df:	48 85 c0             	test   %rax,%rax
  4227e2:	74 12                	je     4227f6 <strdup+0x36>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  4227e4:	b9 00 20 00 00       	mov    $0x2000,%ecx
        sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), size);
  4227e9:	48 89 e7             	mov    %rsp,%rdi
  4227ec:	48 89 c6             	mov    %rax,%rsi
  4227ef:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  4227f2:	48 8b 0c 24          	mov    (%rsp),%rcx
  4227f6:	48 89 c2             	mov    %rax,%rdx
  4227f9:	48 89 de             	mov    %rbx,%rsi
  4227fc:	48 89 cf             	mov    %rcx,%rdi
  4227ff:	e8 2c 6f fe ff       	callq  409730 <memcpy@plt>
}
  422804:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  422809:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  422810:	00 00 
  422812:	75 06                	jne    42281a <strdup+0x5a>
  422814:	48 83 c4 10          	add    $0x10,%rsp
  422818:	5b                   	pop    %rbx
  422819:	c3                   	retq   
  42281a:	e8 f1 6f fe ff       	callq  409810 <__stack_chk_fail@plt>
  42281f:	90                   	nop

0000000000422820 <malloc_usable_size>:
size_t malloc_usable_size(void* ptr) {
  422820:	48 83 ec 18          	sub    $0x18,%rsp
  422824:	48 89 fe             	mov    %rdi,%rsi
  422827:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42282e:	00 00 
  422830:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422835:	31 c0                	xor    %eax,%eax
  422837:	b9 04 20 00 00       	mov    $0x2004,%ecx
    sim_magic_op_2(MAGIC_OP_MALLOC_USABLE_SIZE, reinterpret_cast<uint64_t>(&usableSize), reinterpret_cast<uint64_t>(ptr));
  42283c:	48 89 e7             	mov    %rsp,%rdi
  42283f:	48 87 c9             	xchg   %rcx,%rcx
}
  422842:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  422847:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  42284e:	00 00 
  422850:	48 8b 04 24          	mov    (%rsp),%rax
  422854:	75 05                	jne    42285b <malloc_usable_size+0x3b>
  422856:	48 83 c4 18          	add    $0x18,%rsp
  42285a:	c3                   	retq   
  42285b:	e8 b0 6f fe ff       	callq  409810 <__stack_chk_fail@plt>

0000000000422860 <valloc>:
}

void* valloc(size_t size) {
    abort_unimplemented(__FUNCTION__);
  422860:	48 8d 3d 89 1b 00 00 	lea    0x1b89(%rip),%rdi        # 4243f0 <_ZZ6vallocE12__FUNCTION__>
void* valloc(size_t size) {
  422867:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42286b:	e8 00 fc ff ff       	callq  422470 <_ZL19abort_unimplementedPKc>

0000000000422870 <pvalloc>:
    return nullptr;
}

void* pvalloc(size_t size) {
    abort_unimplemented(__FUNCTION__);
  422870:	48 8d 3d 71 1b 00 00 	lea    0x1b71(%rip),%rdi        # 4243e8 <_ZZ7pvallocE12__FUNCTION__>
void* pvalloc(size_t size) {
  422877:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42287b:	e8 f0 fb ff ff       	callq  422470 <_ZL19abort_unimplementedPKc>

0000000000422880 <_Z16malloc_get_statev>:
    return nullptr;
}

void* malloc_get_state(void) {
    abort_unimplemented(__FUNCTION__);
  422880:	48 8d 3d 49 1b 00 00 	lea    0x1b49(%rip),%rdi        # 4243d0 <_ZZ16malloc_get_statevE12__FUNCTION__>
void* malloc_get_state(void) {
  422887:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42288b:	e8 e0 fb ff ff       	callq  422470 <_ZL19abort_unimplementedPKc>

0000000000422890 <_Z16malloc_set_statePv>:
    return nullptr;
}

int malloc_set_state(void*) {
    abort_unimplemented(__FUNCTION__);
  422890:	48 8d 3d 19 1b 00 00 	lea    0x1b19(%rip),%rdi        # 4243b0 <_ZZ16malloc_set_statePvE12__FUNCTION__>
int malloc_set_state(void*) {
  422897:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42289b:	e8 d0 fb ff ff       	callq  422470 <_ZL19abort_unimplementedPKc>

00000000004228a0 <malloc_info>:
    return -1;
}

int malloc_info(int, FILE*) {
    abort_unimplemented(__FUNCTION__);
  4228a0:	48 8d 3d f9 1a 00 00 	lea    0x1af9(%rip),%rdi        # 4243a0 <_ZZ11malloc_infoE12__FUNCTION__>
int malloc_info(int, FILE*) {
  4228a7:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  4228ab:	e8 c0 fb ff ff       	callq  422470 <_ZL19abort_unimplementedPKc>

00000000004228b0 <malloc_stats>:
    return -1;
}

void malloc_stats(void) {
    abort_unimplemented(__FUNCTION__);
  4228b0:	48 8d 3d d9 1a 00 00 	lea    0x1ad9(%rip),%rdi        # 424390 <_ZZ12malloc_statsE12__FUNCTION__>
void malloc_stats(void) {
  4228b7:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  4228bb:	e8 b0 fb ff ff       	callq  422470 <_ZL19abort_unimplementedPKc>

00000000004228c0 <malloc_trim>:
}

int malloc_trim(size_t) {
    abort_unimplemented(__FUNCTION__);
  4228c0:	48 8d 3d b9 1a 00 00 	lea    0x1ab9(%rip),%rdi        # 424380 <_ZZ11malloc_trimE12__FUNCTION__>
int malloc_trim(size_t) {
  4228c7:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  4228cb:	e8 a0 fb ff ff       	callq  422470 <_ZL19abort_unimplementedPKc>

00000000004228d0 <__libc_csu_init>:
  4228d0:	41 57                	push   %r15
  4228d2:	41 56                	push   %r14
  4228d4:	49 89 d7             	mov    %rdx,%r15
  4228d7:	41 55                	push   %r13
  4228d9:	41 54                	push   %r12
  4228db:	4c 8d 25 26 76 20 00 	lea    0x207626(%rip),%r12        # 629f08 <__frame_dummy_init_array_entry>
  4228e2:	55                   	push   %rbp
  4228e3:	48 8d 2d 2e 76 20 00 	lea    0x20762e(%rip),%rbp        # 629f18 <__init_array_end>
  4228ea:	53                   	push   %rbx
  4228eb:	41 89 fd             	mov    %edi,%r13d
  4228ee:	49 89 f6             	mov    %rsi,%r14
  4228f1:	4c 29 e5             	sub    %r12,%rbp
  4228f4:	48 83 ec 08          	sub    $0x8,%rsp
  4228f8:	48 c1 fd 03          	sar    $0x3,%rbp
  4228fc:	e8 c7 6a fe ff       	callq  4093c8 <_init>
  422901:	48 85 ed             	test   %rbp,%rbp
  422904:	74 20                	je     422926 <__libc_csu_init+0x56>
  422906:	31 db                	xor    %ebx,%ebx
  422908:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42290f:	00 
  422910:	4c 89 fa             	mov    %r15,%rdx
  422913:	4c 89 f6             	mov    %r14,%rsi
  422916:	44 89 ef             	mov    %r13d,%edi
  422919:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  42291d:	48 83 c3 01          	add    $0x1,%rbx
  422921:	48 39 dd             	cmp    %rbx,%rbp
  422924:	75 ea                	jne    422910 <__libc_csu_init+0x40>
  422926:	48 83 c4 08          	add    $0x8,%rsp
  42292a:	5b                   	pop    %rbx
  42292b:	5d                   	pop    %rbp
  42292c:	41 5c                	pop    %r12
  42292e:	41 5d                	pop    %r13
  422930:	41 5e                	pop    %r14
  422932:	41 5f                	pop    %r15
  422934:	c3                   	retq   
  422935:	90                   	nop
  422936:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42293d:	00 00 00 

0000000000422940 <__libc_csu_fini>:
  422940:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000422944 <_fini>:
  422944:	48 83 ec 08          	sub    $0x8,%rsp
  422948:	48 83 c4 08          	add    $0x8,%rsp
  42294c:	c3                   	retq   
