
ecbs_simple_swarm:     file format elf64-x86-64


Disassembly of section .init:

0000000000409350 <_init>:
  409350:	48 83 ec 08          	sub    $0x8,%rsp
  409354:	48 8b 05 85 1c 22 00 	mov    0x221c85(%rip),%rax        # 62afe0 <__gmon_start__>
  40935b:	48 85 c0             	test   %rax,%rax
  40935e:	74 02                	je     409362 <_init+0x12>
  409360:	ff d0                	callq  *%rax
  409362:	48 83 c4 08          	add    $0x8,%rsp
  409366:	c3                   	retq   

Disassembly of section .plt:

0000000000409370 <.plt>:
  409370:	ff 35 92 1c 22 00    	pushq  0x221c92(%rip)        # 62b008 <_GLOBAL_OFFSET_TABLE_+0x8>
  409376:	ff 25 94 1c 22 00    	jmpq   *0x221c94(%rip)        # 62b010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40937c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000409380 <__printf_chk@plt>:
  409380:	ff 25 92 1c 22 00    	jmpq   *0x221c92(%rip)        # 62b018 <__printf_chk@GLIBC_2.3.4>
  409386:	68 00 00 00 00       	pushq  $0x0
  40938b:	e9 e0 ff ff ff       	jmpq   409370 <.plt>

0000000000409390 <_ZNSo3putEc@plt>:
  409390:	ff 25 8a 1c 22 00    	jmpq   *0x221c8a(%rip)        # 62b020 <_ZNSo3putEc@GLIBCXX_3.4>
  409396:	68 01 00 00 00       	pushq  $0x1
  40939b:	e9 d0 ff ff ff       	jmpq   409370 <.plt>

00000000004093a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@plt>:
  4093a0:	ff 25 82 1c 22 00    	jmpq   *0x221c82(%rip)        # 62b028 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@GLIBCXX_3.4.21>
  4093a6:	68 02 00 00 00       	pushq  $0x2
  4093ab:	e9 c0 ff ff ff       	jmpq   409370 <.plt>

00000000004093b0 <_ZNSt6chrono3_V212system_clock3nowEv@plt>:
  4093b0:	ff 25 7a 1c 22 00    	jmpq   *0x221c7a(%rip)        # 62b030 <_ZNSt6chrono3_V212system_clock3nowEv@GLIBCXX_3.4.19>
  4093b6:	68 03 00 00 00       	pushq  $0x3
  4093bb:	e9 b0 ff ff ff       	jmpq   409370 <.plt>

00000000004093c0 <_ZN4YAML6detail9node_data3endEv@plt>:
  4093c0:	ff 25 72 1c 22 00    	jmpq   *0x221c72(%rip)        # 62b038 <_ZN4YAML6detail9node_data3endEv>
  4093c6:	68 04 00 00 00       	pushq  $0x4
  4093cb:	e9 a0 ff ff ff       	jmpq   409370 <.plt>

00000000004093d0 <syscall@plt>:
  4093d0:	ff 25 6a 1c 22 00    	jmpq   *0x221c6a(%rip)        # 62b040 <syscall@GLIBC_2.2.5>
  4093d6:	68 05 00 00 00       	pushq  $0x5
  4093db:	e9 90 ff ff ff       	jmpq   409370 <.plt>

00000000004093e0 <_ZN5boost15program_options16validation_error12get_templateB5cxx11ENS1_6kind_tE@plt>:
  4093e0:	ff 25 62 1c 22 00    	jmpq   *0x221c62(%rip)        # 62b048 <_ZN5boost15program_options16validation_error12get_templateB5cxx11ENS1_6kind_tE>
  4093e6:	68 06 00 00 00       	pushq  $0x6
  4093eb:	e9 80 ff ff ff       	jmpq   409370 <.plt>

00000000004093f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>:
  4093f0:	ff 25 5a 1c 22 00    	jmpq   *0x221c5a(%rip)        # 62b050 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@GLIBCXX_3.4>
  4093f6:	68 07 00 00 00       	pushq  $0x7
  4093fb:	e9 70 ff ff ff       	jmpq   409370 <.plt>

0000000000409400 <_ZN5boost15program_optionslsERSoRKNS0_19options_descriptionE@plt>:
  409400:	ff 25 52 1c 22 00    	jmpq   *0x221c52(%rip)        # 62b058 <_ZN5boost15program_optionslsERSoRKNS0_19options_descriptionE>
  409406:	68 08 00 00 00       	pushq  $0x8
  40940b:	e9 60 ff ff ff       	jmpq   409370 <.plt>

0000000000409410 <_ZN5boost15program_options6detail7cmdline3runEv@plt>:
  409410:	ff 25 4a 1c 22 00    	jmpq   *0x221c4a(%rip)        # 62b060 <_ZN5boost15program_options6detail7cmdline3runEv>
  409416:	68 09 00 00 00       	pushq  $0x9
  40941b:	e9 50 ff ff ff       	jmpq   409370 <.plt>

0000000000409420 <swapcontext@plt>:
  409420:	ff 25 42 1c 22 00    	jmpq   *0x221c42(%rip)        # 62b068 <swapcontext@GLIBC_2.2.5>
  409426:	68 0a 00 00 00       	pushq  $0xa
  40942b:	e9 40 ff ff ff       	jmpq   409370 <.plt>

0000000000409430 <_ZSt9terminatev@plt>:
  409430:	ff 25 3a 1c 22 00    	jmpq   *0x221c3a(%rip)        # 62b070 <_ZSt9terminatev@GLIBCXX_3.4>
  409436:	68 0b 00 00 00       	pushq  $0xb
  40943b:	e9 30 ff ff ff       	jmpq   409370 <.plt>

0000000000409440 <_ZNSt8ios_baseC2Ev@plt>:
  409440:	ff 25 32 1c 22 00    	jmpq   *0x221c32(%rip)        # 62b078 <_ZNSt8ios_baseC2Ev@GLIBCXX_3.4>
  409446:	68 0c 00 00 00       	pushq  $0xc
  40944b:	e9 20 ff ff ff       	jmpq   409370 <.plt>

0000000000409450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>:
  409450:	ff 25 2a 1c 22 00    	jmpq   *0x221c2a(%rip)        # 62b080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@GLIBCXX_3.4.21>
  409456:	68 0d 00 00 00       	pushq  $0xd
  40945b:	e9 10 ff ff ff       	jmpq   409370 <.plt>

0000000000409460 <_ZN4YAML6detail9node_data8set_nullEv@plt>:
  409460:	ff 25 22 1c 22 00    	jmpq   *0x221c22(%rip)        # 62b088 <_ZN4YAML6detail9node_data8set_nullEv>
  409466:	68 0e 00 00 00       	pushq  $0xe
  40946b:	e9 00 ff ff ff       	jmpq   409370 <.plt>

0000000000409470 <_ZNSt8ios_baseD2Ev@plt>:
  409470:	ff 25 1a 1c 22 00    	jmpq   *0x221c1a(%rip)        # 62b090 <_ZNSt8ios_baseD2Ev@GLIBCXX_3.4>
  409476:	68 0f 00 00 00       	pushq  $0xf
  40947b:	e9 f0 fe ff ff       	jmpq   409370 <.plt>

0000000000409480 <makecontext@plt>:
  409480:	ff 25 12 1c 22 00    	jmpq   *0x221c12(%rip)        # 62b098 <makecontext@GLIBC_2.2.5>
  409486:	68 10 00 00 00       	pushq  $0x10
  40948b:	e9 e0 fe ff ff       	jmpq   409370 <.plt>

0000000000409490 <_ZSt17__throw_bad_allocv@plt>:
  409490:	ff 25 0a 1c 22 00    	jmpq   *0x221c0a(%rip)        # 62b0a0 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
  409496:	68 11 00 00 00       	pushq  $0x11
  40949b:	e9 d0 fe ff ff       	jmpq   409370 <.plt>

00000000004094a0 <_ZN4YAML6detail6memory11create_nodeEv@plt>:
  4094a0:	ff 25 02 1c 22 00    	jmpq   *0x221c02(%rip)        # 62b0a8 <_ZN4YAML6detail6memory11create_nodeEv>
  4094a6:	68 12 00 00 00       	pushq  $0x12
  4094ab:	e9 c0 fe ff ff       	jmpq   409370 <.plt>

00000000004094b0 <__cxa_begin_catch@plt>:
  4094b0:	ff 25 fa 1b 22 00    	jmpq   *0x221bfa(%rip)        # 62b0b0 <__cxa_begin_catch@CXXABI_1.3>
  4094b6:	68 13 00 00 00       	pushq  $0x13
  4094bb:	e9 b0 fe ff ff       	jmpq   409370 <.plt>

00000000004094c0 <_ZN5boost15program_options13variables_mapC1Ev@plt>:
  4094c0:	ff 25 f2 1b 22 00    	jmpq   *0x221bf2(%rip)        # 62b0b8 <_ZN5boost15program_options13variables_mapC1Ev>
  4094c6:	68 14 00 00 00       	pushq  $0x14
  4094cb:	e9 a0 fe ff ff       	jmpq   409370 <.plt>

00000000004094d0 <strlen@plt>:
  4094d0:	ff 25 ea 1b 22 00    	jmpq   *0x221bea(%rip)        # 62b0c0 <strlen@GLIBC_2.2.5>
  4094d6:	68 15 00 00 00       	pushq  $0x15
  4094db:	e9 90 fe ff ff       	jmpq   409370 <.plt>

00000000004094e0 <memcmp@plt>:
  4094e0:	ff 25 e2 1b 22 00    	jmpq   *0x221be2(%rip)        # 62b0c8 <memcmp@GLIBC_2.2.5>
  4094e6:	68 16 00 00 00       	pushq  $0x16
  4094eb:	e9 80 fe ff ff       	jmpq   409370 <.plt>

00000000004094f0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@plt>:
  4094f0:	ff 25 da 1b 22 00    	jmpq   *0x221bda(%rip)        # 62b0d0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
  4094f6:	68 17 00 00 00       	pushq  $0x17
  4094fb:	e9 70 fe ff ff       	jmpq   409370 <.plt>

0000000000409500 <__cxa_allocate_exception@plt>:
  409500:	ff 25 d2 1b 22 00    	jmpq   *0x221bd2(%rip)        # 62b0d8 <__cxa_allocate_exception@CXXABI_1.3>
  409506:	68 18 00 00 00       	pushq  $0x18
  40950b:	e9 60 fe ff ff       	jmpq   409370 <.plt>

0000000000409510 <pthread_join@plt>:
  409510:	ff 25 ca 1b 22 00    	jmpq   *0x221bca(%rip)        # 62b0e0 <pthread_join@GLIBC_2.2.5>
  409516:	68 19 00 00 00       	pushq  $0x19
  40951b:	e9 50 fe ff ff       	jmpq   409370 <.plt>

0000000000409520 <_ZSt20__throw_length_errorPKc@plt>:
  409520:	ff 25 c2 1b 22 00    	jmpq   *0x221bc2(%rip)        # 62b0e8 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
  409526:	68 1a 00 00 00       	pushq  $0x1a
  40952b:	e9 40 fe ff ff       	jmpq   409370 <.plt>

0000000000409530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@plt>:
  409530:	ff 25 ba 1b 22 00    	jmpq   *0x221bba(%rip)        # 62b0f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@GLIBCXX_3.4.21>
  409536:	68 1b 00 00 00       	pushq  $0x1b
  40953b:	e9 30 fe ff ff       	jmpq   409370 <.plt>

0000000000409540 <memset@plt>:
  409540:	ff 25 b2 1b 22 00    	jmpq   *0x221bb2(%rip)        # 62b0f8 <memset@GLIBC_2.2.5>
  409546:	68 1c 00 00 00       	pushq  $0x1c
  40954b:	e9 20 fe ff ff       	jmpq   409370 <.plt>

0000000000409550 <abort@plt>:
  409550:	ff 25 aa 1b 22 00    	jmpq   *0x221baa(%rip)        # 62b100 <abort@GLIBC_2.2.5>
  409556:	68 1d 00 00 00       	pushq  $0x1d
  40955b:	e9 10 fe ff ff       	jmpq   409370 <.plt>

0000000000409560 <_ZN5boost15program_options6notifyERNS0_13variables_mapE@plt>:
  409560:	ff 25 a2 1b 22 00    	jmpq   *0x221ba2(%rip)        # 62b108 <_ZN5boost15program_options6notifyERNS0_13variables_mapE>
  409566:	68 1e 00 00 00       	pushq  $0x1e
  40956b:	e9 00 fe ff ff       	jmpq   409370 <.plt>

0000000000409570 <pthread_create@plt>:
  409570:	ff 25 9a 1b 22 00    	jmpq   *0x221b9a(%rip)        # 62b110 <pthread_create@GLIBC_2.2.5>
  409576:	68 1f 00 00 00       	pushq  $0x1f
  40957b:	e9 f0 fd ff ff       	jmpq   409370 <.plt>

0000000000409580 <_ZN4YAML6detail9node_data12mark_definedEv@plt>:
  409580:	ff 25 92 1b 22 00    	jmpq   *0x221b92(%rip)        # 62b118 <_ZN4YAML6detail9node_data12mark_definedEv>
  409586:	68 20 00 00 00       	pushq  $0x20
  40958b:	e9 e0 fd ff ff       	jmpq   409370 <.plt>

0000000000409590 <_ZN5boost15program_options20invalid_option_valueC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409590:	ff 25 8a 1b 22 00    	jmpq   *0x221b8a(%rip)        # 62b120 <_ZN5boost15program_options20invalid_option_valueC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  409596:	68 21 00 00 00       	pushq  $0x21
  40959b:	e9 d0 fd ff ff       	jmpq   409370 <.plt>

00000000004095a0 <__sprintf_chk@plt>:
  4095a0:	ff 25 82 1b 22 00    	jmpq   *0x221b82(%rip)        # 62b128 <__sprintf_chk@GLIBC_2.3.4>
  4095a6:	68 22 00 00 00       	pushq  $0x22
  4095ab:	e9 c0 fd ff ff       	jmpq   409370 <.plt>

00000000004095b0 <__snprintf_chk@plt>:
  4095b0:	ff 25 7a 1b 22 00    	jmpq   *0x221b7a(%rip)        # 62b130 <__snprintf_chk@GLIBC_2.3.4>
  4095b6:	68 23 00 00 00       	pushq  $0x23
  4095bb:	e9 b0 fd ff ff       	jmpq   409370 <.plt>

00000000004095c0 <_ZNSirsERi@plt>:
  4095c0:	ff 25 72 1b 22 00    	jmpq   *0x221b72(%rip)        # 62b138 <_ZNSirsERi@GLIBCXX_3.4>
  4095c6:	68 24 00 00 00       	pushq  $0x24
  4095cb:	e9 a0 fd ff ff       	jmpq   409370 <.plt>

00000000004095d0 <__cxa_guard_release@plt>:
  4095d0:	ff 25 6a 1b 22 00    	jmpq   *0x221b6a(%rip)        # 62b140 <__cxa_guard_release@CXXABI_1.3>
  4095d6:	68 25 00 00 00       	pushq  $0x25
  4095db:	e9 90 fd ff ff       	jmpq   409370 <.plt>

00000000004095e0 <_ZN5boost15program_options6detail7cmdlineC2ERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EE@plt>:
  4095e0:	ff 25 62 1b 22 00    	jmpq   *0x221b62(%rip)        # 62b148 <_ZN5boost15program_options6detail7cmdlineC2ERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EE>
  4095e6:	68 26 00 00 00       	pushq  $0x26
  4095eb:	e9 80 fd ff ff       	jmpq   409370 <.plt>

00000000004095f0 <__assert_fail@plt>:
  4095f0:	ff 25 5a 1b 22 00    	jmpq   *0x221b5a(%rip)        # 62b150 <__assert_fail@GLIBC_2.2.5>
  4095f6:	68 27 00 00 00       	pushq  $0x27
  4095fb:	e9 70 fd ff ff       	jmpq   409370 <.plt>

0000000000409600 <getcontext@plt>:
  409600:	ff 25 52 1b 22 00    	jmpq   *0x221b52(%rip)        # 62b158 <getcontext@GLIBC_2.2.5>
  409606:	68 28 00 00 00       	pushq  $0x28
  40960b:	e9 60 fd ff ff       	jmpq   409370 <.plt>

0000000000409610 <_ZNSo9_M_insertImEERSoT_@plt>:
  409610:	ff 25 4a 1b 22 00    	jmpq   *0x221b4a(%rip)        # 62b160 <_ZNSo9_M_insertImEERSoT_@GLIBCXX_3.4.9>
  409616:	68 29 00 00 00       	pushq  $0x29
  40961b:	e9 50 fd ff ff       	jmpq   409370 <.plt>

0000000000409620 <_ZNSo5flushEv@plt>:
  409620:	ff 25 42 1b 22 00    	jmpq   *0x221b42(%rip)        # 62b168 <_ZNSo5flushEv@GLIBCXX_3.4>
  409626:	68 2a 00 00 00       	pushq  $0x2a
  40962b:	e9 40 fd ff ff       	jmpq   409370 <.plt>

0000000000409630 <_ZN4YAML6detail9node_data10set_scalarERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409630:	ff 25 3a 1b 22 00    	jmpq   *0x221b3a(%rip)        # 62b170 <_ZN4YAML6detail9node_data10set_scalarERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  409636:	68 2b 00 00 00       	pushq  $0x2b
  40963b:	e9 30 fd ff ff       	jmpq   409370 <.plt>

0000000000409640 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>:
  409640:	ff 25 32 1b 22 00    	jmpq   *0x221b32(%rip)        # 62b178 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
  409646:	68 2c 00 00 00       	pushq  $0x2c
  40964b:	e9 20 fd ff ff       	jmpq   409370 <.plt>

0000000000409650 <_ZSt19__throw_logic_errorPKc@plt>:
  409650:	ff 25 2a 1b 22 00    	jmpq   *0x221b2a(%rip)        # 62b180 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
  409656:	68 2d 00 00 00       	pushq  $0x2d
  40965b:	e9 10 fd ff ff       	jmpq   409370 <.plt>

0000000000409660 <__cxa_free_exception@plt>:
  409660:	ff 25 22 1b 22 00    	jmpq   *0x221b22(%rip)        # 62b188 <__cxa_free_exception@CXXABI_1.3>
  409666:	68 2e 00 00 00       	pushq  $0x2e
  40966b:	e9 00 fd ff ff       	jmpq   409370 <.plt>

0000000000409670 <pthread_attr_getstack@plt>:
  409670:	ff 25 1a 1b 22 00    	jmpq   *0x221b1a(%rip)        # 62b190 <pthread_attr_getstack@GLIBC_2.2.5>
  409676:	68 2f 00 00 00       	pushq  $0x2f
  40967b:	e9 f0 fc ff ff       	jmpq   409370 <.plt>

0000000000409680 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>:
  409680:	ff 25 12 1b 22 00    	jmpq   *0x221b12(%rip)        # 62b198 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
  409686:	68 30 00 00 00       	pushq  $0x30
  40968b:	e9 e0 fc ff ff       	jmpq   409370 <.plt>

0000000000409690 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@plt>:
  409690:	ff 25 0a 1b 22 00    	jmpq   *0x221b0a(%rip)        # 62b1a0 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@GLIBCXX_3.4.21>
  409696:	68 31 00 00 00       	pushq  $0x31
  40969b:	e9 d0 fc ff ff       	jmpq   409370 <.plt>

00000000004096a0 <_ZN5boost15program_options22error_with_option_nameC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_i@plt>:
  4096a0:	ff 25 02 1b 22 00    	jmpq   *0x221b02(%rip)        # 62b1a8 <_ZN5boost15program_options22error_with_option_nameC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_i>
  4096a6:	68 32 00 00 00       	pushq  $0x32
  4096ab:	e9 c0 fc ff ff       	jmpq   409370 <.plt>

00000000004096b0 <memcpy@plt>:
  4096b0:	ff 25 fa 1a 22 00    	jmpq   *0x221afa(%rip)        # 62b1b0 <memcpy@GLIBC_2.14>
  4096b6:	68 33 00 00 00       	pushq  $0x33
  4096bb:	e9 b0 fc ff ff       	jmpq   409370 <.plt>

00000000004096c0 <_ZSt2wsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_@plt>:
  4096c0:	ff 25 f2 1a 22 00    	jmpq   *0x221af2(%rip)        # 62b1b8 <_ZSt2wsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_@GLIBCXX_3.4>
  4096c6:	68 34 00 00 00       	pushq  $0x34
  4096cb:	e9 a0 fc ff ff       	jmpq   409370 <.plt>

00000000004096d0 <_ZN5boost15program_options6detail7cmdline23set_options_descriptionERKNS0_19options_descriptionE@plt>:
  4096d0:	ff 25 ea 1a 22 00    	jmpq   *0x221aea(%rip)        # 62b1c0 <_ZN5boost15program_options6detail7cmdline23set_options_descriptionERKNS0_19options_descriptionE>
  4096d6:	68 35 00 00 00       	pushq  $0x35
  4096db:	e9 90 fc ff ff       	jmpq   409370 <.plt>

00000000004096e0 <__cxa_atexit@plt>:
  4096e0:	ff 25 e2 1a 22 00    	jmpq   *0x221ae2(%rip)        # 62b1c8 <__cxa_atexit@GLIBC_2.2.5>
  4096e6:	68 36 00 00 00       	pushq  $0x36
  4096eb:	e9 80 fc ff ff       	jmpq   409370 <.plt>

00000000004096f0 <pthread_self@plt>:
  4096f0:	ff 25 da 1a 22 00    	jmpq   *0x221ada(%rip)        # 62b1d0 <pthread_self@GLIBC_2.2.5>
  4096f6:	68 37 00 00 00       	pushq  $0x37
  4096fb:	e9 70 fc ff ff       	jmpq   409370 <.plt>

0000000000409700 <pow@plt>:
  409700:	ff 25 d2 1a 22 00    	jmpq   *0x221ad2(%rip)        # 62b1d8 <pow@GLIBC_2.2.5>
  409706:	68 38 00 00 00       	pushq  $0x38
  40970b:	e9 60 fc ff ff       	jmpq   409370 <.plt>

0000000000409710 <_ZN5boost15program_options11to_internalERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409710:	ff 25 ca 1a 22 00    	jmpq   *0x221aca(%rip)        # 62b1e0 <_ZN5boost15program_options11to_internalERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  409716:	68 39 00 00 00       	pushq  $0x39
  40971b:	e9 50 fc ff ff       	jmpq   409370 <.plt>

0000000000409720 <_ZdlPv@plt>:
  409720:	ff 25 c2 1a 22 00    	jmpq   *0x221ac2(%rip)        # 62b1e8 <_ZdlPv@GLIBCXX_3.4>
  409726:	68 3a 00 00 00       	pushq  $0x3a
  40972b:	e9 40 fc ff ff       	jmpq   409370 <.plt>

0000000000409730 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
  409730:	ff 25 ba 1a 22 00    	jmpq   *0x221aba(%rip)        # 62b1f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
  409736:	68 3b 00 00 00       	pushq  $0x3b
  40973b:	e9 30 fc ff ff       	jmpq   409370 <.plt>

0000000000409740 <_Znwm@plt>:
  409740:	ff 25 b2 1a 22 00    	jmpq   *0x221ab2(%rip)        # 62b1f8 <_Znwm@GLIBCXX_3.4>
  409746:	68 3c 00 00 00       	pushq  $0x3c
  40974b:	e9 20 fc ff ff       	jmpq   409370 <.plt>

0000000000409750 <_ZdlPvm@plt>:
  409750:	ff 25 aa 1a 22 00    	jmpq   *0x221aaa(%rip)        # 62b200 <_ZdlPvm@CXXABI_1.3.9>
  409756:	68 3d 00 00 00       	pushq  $0x3d
  40975b:	e9 10 fc ff ff       	jmpq   409370 <.plt>

0000000000409760 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>:
  409760:	ff 25 a2 1a 22 00    	jmpq   *0x221aa2(%rip)        # 62b208 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
  409766:	68 3e 00 00 00       	pushq  $0x3e
  40976b:	e9 00 fc ff ff       	jmpq   409370 <.plt>

0000000000409770 <_ZN4YAML6detail9node_data15insert_map_pairERNS0_4nodeES3_@plt>:
  409770:	ff 25 9a 1a 22 00    	jmpq   *0x221a9a(%rip)        # 62b210 <_ZN4YAML6detail9node_data15insert_map_pairERNS0_4nodeES3_>
  409776:	68 3f 00 00 00       	pushq  $0x3f
  40977b:	e9 f0 fb ff ff       	jmpq   409370 <.plt>

0000000000409780 <_ZNSt13runtime_errorD2Ev@plt>:
  409780:	ff 25 92 1a 22 00    	jmpq   *0x221a92(%rip)        # 62b218 <_ZNSt13runtime_errorD2Ev@GLIBCXX_3.4>
  409786:	68 40 00 00 00       	pushq  $0x40
  40978b:	e9 e0 fb ff ff       	jmpq   409370 <.plt>

0000000000409790 <__stack_chk_fail@plt>:
  409790:	ff 25 8a 1a 22 00    	jmpq   *0x221a8a(%rip)        # 62b220 <__stack_chk_fail@GLIBC_2.4>
  409796:	68 41 00 00 00       	pushq  $0x41
  40979b:	e9 d0 fb ff ff       	jmpq   409370 <.plt>

00000000004097a0 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>:
  4097a0:	ff 25 82 1a 22 00    	jmpq   *0x221a82(%rip)        # 62b228 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@GLIBCXX_3.4.9>
  4097a6:	68 42 00 00 00       	pushq  $0x42
  4097ab:	e9 c0 fb ff ff       	jmpq   409370 <.plt>

00000000004097b0 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>:
  4097b0:	ff 25 7a 1a 22 00    	jmpq   *0x221a7a(%rip)        # 62b230 <_ZNKSt5ctypeIcE13_M_widen_initEv@GLIBCXX_3.4.11>
  4097b6:	68 43 00 00 00       	pushq  $0x43
  4097bb:	e9 b0 fb ff ff       	jmpq   409370 <.plt>

00000000004097c0 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@plt>:
  4097c0:	ff 25 72 1a 22 00    	jmpq   *0x221a72(%rip)        # 62b238 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@GLIBCXX_3.4>
  4097c6:	68 44 00 00 00       	pushq  $0x44
  4097cb:	e9 a0 fb ff ff       	jmpq   409370 <.plt>

00000000004097d0 <_ZN5boost15program_options19options_description11add_optionsEv@plt>:
  4097d0:	ff 25 6a 1a 22 00    	jmpq   *0x221a6a(%rip)        # 62b240 <_ZN5boost15program_options19options_description11add_optionsEv>
  4097d6:	68 45 00 00 00       	pushq  $0x45
  4097db:	e9 90 fb ff ff       	jmpq   409370 <.plt>

00000000004097e0 <fflush@plt>:
  4097e0:	ff 25 62 1a 22 00    	jmpq   *0x221a62(%rip)        # 62b248 <fflush@GLIBC_2.2.5>
  4097e6:	68 46 00 00 00       	pushq  $0x46
  4097eb:	e9 80 fb ff ff       	jmpq   409370 <.plt>

00000000004097f0 <_ZN4YAML6detail9node_data5beginEv@plt>:
  4097f0:	ff 25 5a 1a 22 00    	jmpq   *0x221a5a(%rip)        # 62b250 <_ZN4YAML6detail9node_data5beginEv>
  4097f6:	68 47 00 00 00       	pushq  $0x47
  4097fb:	e9 70 fb ff ff       	jmpq   409370 <.plt>

0000000000409800 <_ZNSi3getEv@plt>:
  409800:	ff 25 52 1a 22 00    	jmpq   *0x221a52(%rip)        # 62b258 <_ZNSi3getEv@GLIBCXX_3.4>
  409806:	68 48 00 00 00       	pushq  $0x48
  40980b:	e9 60 fb ff ff       	jmpq   409370 <.plt>

0000000000409810 <pthread_attr_init@plt>:
  409810:	ff 25 4a 1a 22 00    	jmpq   *0x221a4a(%rip)        # 62b260 <pthread_attr_init@GLIBC_2.2.5>
  409816:	68 49 00 00 00       	pushq  $0x49
  40981b:	e9 50 fb ff ff       	jmpq   409370 <.plt>

0000000000409820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@plt>:
  409820:	ff 25 42 1a 22 00    	jmpq   *0x221a42(%rip)        # 62b268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@GLIBCXX_3.4.21>
  409826:	68 4a 00 00 00       	pushq  $0x4a
  40982b:	e9 40 fb ff ff       	jmpq   409370 <.plt>

0000000000409830 <_ZN5boost15program_options6detail7cmdline27get_canonical_option_prefixEv@plt>:
  409830:	ff 25 3a 1a 22 00    	jmpq   *0x221a3a(%rip)        # 62b270 <_ZN5boost15program_options6detail7cmdline27get_canonical_option_prefixEv>
  409836:	68 4b 00 00 00       	pushq  $0x4b
  40983b:	e9 30 fb ff ff       	jmpq   409370 <.plt>

0000000000409840 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409840:	ff 25 32 1a 22 00    	jmpq   *0x221a32(%rip)        # 62b278 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
  409846:	68 4c 00 00 00       	pushq  $0x4c
  40984b:	e9 20 fb ff ff       	jmpq   409370 <.plt>

0000000000409850 <_ZSt16__throw_bad_castv@plt>:
  409850:	ff 25 2a 1a 22 00    	jmpq   *0x221a2a(%rip)        # 62b280 <_ZSt16__throw_bad_castv@GLIBCXX_3.4>
  409856:	68 4d 00 00 00       	pushq  $0x4d
  40985b:	e9 10 fb ff ff       	jmpq   409370 <.plt>

0000000000409860 <_ZNSt13runtime_errorC2ERKS_@plt>:
  409860:	ff 25 22 1a 22 00    	jmpq   *0x221a22(%rip)        # 62b288 <_ZNSt13runtime_errorC2ERKS_@GLIBCXX_3.4.21>
  409866:	68 4e 00 00 00       	pushq  $0x4e
  40986b:	e9 00 fb ff ff       	jmpq   409370 <.plt>

0000000000409870 <pthread_getattr_np@plt>:
  409870:	ff 25 1a 1a 22 00    	jmpq   *0x221a1a(%rip)        # 62b290 <pthread_getattr_np@GLIBC_2.2.5>
  409876:	68 4f 00 00 00       	pushq  $0x4f
  40987b:	e9 f0 fa ff ff       	jmpq   409370 <.plt>

0000000000409880 <_ZN5boost15program_options8validateERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEPS9_i@plt>:
  409880:	ff 25 12 1a 22 00    	jmpq   *0x221a12(%rip)        # 62b298 <_ZN5boost15program_options8validateERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEPS9_i>
  409886:	68 50 00 00 00       	pushq  $0x50
  40988b:	e9 e0 fa ff ff       	jmpq   409370 <.plt>

0000000000409890 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm@plt>:
  409890:	ff 25 0a 1a 22 00    	jmpq   *0x221a0a(%rip)        # 62b2a0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm@GLIBCXX_3.4.18>
  409896:	68 51 00 00 00       	pushq  $0x51
  40989b:	e9 d0 fa ff ff       	jmpq   409370 <.plt>

00000000004098a0 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>:
  4098a0:	ff 25 02 1a 22 00    	jmpq   *0x221a02(%rip)        # 62b2a8 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@GLIBCXX_3.4>
  4098a6:	68 52 00 00 00       	pushq  $0x52
  4098ab:	e9 c0 fa ff ff       	jmpq   409370 <.plt>

00000000004098b0 <_ZN5boost15program_options19options_descriptionC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjj@plt>:
  4098b0:	ff 25 fa 19 22 00    	jmpq   *0x2219fa(%rip)        # 62b2b0 <_ZN5boost15program_options19options_descriptionC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjj>
  4098b6:	68 53 00 00 00       	pushq  $0x53
  4098bb:	e9 b0 fa ff ff       	jmpq   409370 <.plt>

00000000004098c0 <strcmp@plt>:
  4098c0:	ff 25 f2 19 22 00    	jmpq   *0x2219f2(%rip)        # 62b2b8 <strcmp@GLIBC_2.2.5>
  4098c6:	68 54 00 00 00       	pushq  $0x54
  4098cb:	e9 a0 fa ff ff       	jmpq   409370 <.plt>

00000000004098d0 <_ZNSt6localeD1Ev@plt>:
  4098d0:	ff 25 ea 19 22 00    	jmpq   *0x2219ea(%rip)        # 62b2c0 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
  4098d6:	68 55 00 00 00       	pushq  $0x55
  4098db:	e9 90 fa ff ff       	jmpq   409370 <.plt>

00000000004098e0 <__cxa_rethrow@plt>:
  4098e0:	ff 25 e2 19 22 00    	jmpq   *0x2219e2(%rip)        # 62b2c8 <__cxa_rethrow@CXXABI_1.3>
  4098e6:	68 56 00 00 00       	pushq  $0x56
  4098eb:	e9 80 fa ff ff       	jmpq   409370 <.plt>

00000000004098f0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@plt>:
  4098f0:	ff 25 da 19 22 00    	jmpq   *0x2219da(%rip)        # 62b2d0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@GLIBCXX_3.4>
  4098f6:	68 57 00 00 00       	pushq  $0x57
  4098fb:	e9 70 fa ff ff       	jmpq   409370 <.plt>

0000000000409900 <_ZNSt8ios_base4InitC1Ev@plt>:
  409900:	ff 25 d2 19 22 00    	jmpq   *0x2219d2(%rip)        # 62b2d8 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
  409906:	68 58 00 00 00       	pushq  $0x58
  40990b:	e9 60 fa ff ff       	jmpq   409370 <.plt>

0000000000409910 <_ZN4YAML6detail13memory_holder5mergeERS1_@plt>:
  409910:	ff 25 ca 19 22 00    	jmpq   *0x2219ca(%rip)        # 62b2e0 <_ZN4YAML6detail13memory_holder5mergeERS1_>
  409916:	68 59 00 00 00       	pushq  $0x59
  40991b:	e9 50 fa ff ff       	jmpq   409370 <.plt>

0000000000409920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>:
  409920:	ff 25 c2 19 22 00    	jmpq   *0x2219c2(%rip)        # 62b2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@GLIBCXX_3.4.21>
  409926:	68 5a 00 00 00       	pushq  $0x5a
  40992b:	e9 40 fa ff ff       	jmpq   409370 <.plt>

0000000000409930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>:
  409930:	ff 25 ba 19 22 00    	jmpq   *0x2219ba(%rip)        # 62b2f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@GLIBCXX_3.4.21>
  409936:	68 5b 00 00 00       	pushq  $0x5b
  40993b:	e9 30 fa ff ff       	jmpq   409370 <.plt>

0000000000409940 <_ZNSt8bad_castD2Ev@plt>:
  409940:	ff 25 b2 19 22 00    	jmpq   *0x2219b2(%rip)        # 62b2f8 <_ZNSt8bad_castD2Ev@GLIBCXX_3.4>
  409946:	68 5c 00 00 00       	pushq  $0x5c
  40994b:	e9 20 fa ff ff       	jmpq   409370 <.plt>

0000000000409950 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode@plt>:
  409950:	ff 25 aa 19 22 00    	jmpq   *0x2219aa(%rip)        # 62b300 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode@GLIBCXX_3.4.21>
  409956:	68 5d 00 00 00       	pushq  $0x5d
  40995b:	e9 10 fa ff ff       	jmpq   409370 <.plt>

0000000000409960 <_ZN4YAML6detail9node_data14convert_to_mapEN5boost10shared_ptrINS0_13memory_holderEEE@plt>:
  409960:	ff 25 a2 19 22 00    	jmpq   *0x2219a2(%rip)        # 62b308 <_ZN4YAML6detail9node_data14convert_to_mapEN5boost10shared_ptrINS0_13memory_holderEEE>
  409966:	68 5e 00 00 00       	pushq  $0x5e
  40996b:	e9 00 fa ff ff       	jmpq   409370 <.plt>

0000000000409970 <_ZNSo9_M_insertIdEERSoT_@plt>:
  409970:	ff 25 9a 19 22 00    	jmpq   *0x22199a(%rip)        # 62b310 <_ZNSo9_M_insertIdEERSoT_@GLIBCXX_3.4.9>
  409976:	68 5f 00 00 00       	pushq  $0x5f
  40997b:	e9 f0 f9 ff ff       	jmpq   409370 <.plt>

0000000000409980 <memmove@plt>:
  409980:	ff 25 92 19 22 00    	jmpq   *0x221992(%rip)        # 62b318 <memmove@GLIBC_2.2.5>
  409986:	68 60 00 00 00       	pushq  $0x60
  40998b:	e9 e0 f9 ff ff       	jmpq   409370 <.plt>

0000000000409990 <__cxa_end_catch@plt>:
  409990:	ff 25 8a 19 22 00    	jmpq   *0x22198a(%rip)        # 62b320 <__cxa_end_catch@CXXABI_1.3>
  409996:	68 61 00 00 00       	pushq  $0x61
  40999b:	e9 d0 f9 ff ff       	jmpq   409370 <.plt>

00000000004099a0 <_ZN5boost15program_options10validators22check_first_occurrenceERKNS_3anyE@plt>:
  4099a0:	ff 25 82 19 22 00    	jmpq   *0x221982(%rip)        # 62b328 <_ZN5boost15program_options10validators22check_first_occurrenceERKNS_3anyE>
  4099a6:	68 62 00 00 00       	pushq  $0x62
  4099ab:	e9 c0 f9 ff ff       	jmpq   409370 <.plt>

00000000004099b0 <pthread_attr_destroy@plt>:
  4099b0:	ff 25 7a 19 22 00    	jmpq   *0x22197a(%rip)        # 62b330 <pthread_attr_destroy@GLIBC_2.2.5>
  4099b6:	68 63 00 00 00       	pushq  $0x63
  4099bb:	e9 b0 f9 ff ff       	jmpq   409370 <.plt>

00000000004099c0 <_ZN4YAML8LoadFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  4099c0:	ff 25 72 19 22 00    	jmpq   *0x221972(%rip)        # 62b338 <_ZN4YAML8LoadFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  4099c6:	68 64 00 00 00       	pushq  $0x64
  4099cb:	e9 a0 f9 ff ff       	jmpq   409370 <.plt>

00000000004099d0 <_ZNSt11logic_errorC2ERKS_@plt>:
  4099d0:	ff 25 6a 19 22 00    	jmpq   *0x22196a(%rip)        # 62b340 <_ZNSt11logic_errorC2ERKS_@GLIBCXX_3.4.21>
  4099d6:	68 65 00 00 00       	pushq  $0x65
  4099db:	e9 90 f9 ff ff       	jmpq   409370 <.plt>

00000000004099e0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>:
  4099e0:	ff 25 62 19 22 00    	jmpq   *0x221962(%rip)        # 62b348 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@GLIBCXX_3.4>
  4099e6:	68 66 00 00 00       	pushq  $0x66
  4099eb:	e9 80 f9 ff ff       	jmpq   409370 <.plt>

00000000004099f0 <__cxa_throw@plt>:
  4099f0:	ff 25 5a 19 22 00    	jmpq   *0x22195a(%rip)        # 62b350 <__cxa_throw@CXXABI_1.3>
  4099f6:	68 67 00 00 00       	pushq  $0x67
  4099fb:	e9 70 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a00 <_ZNSolsEi@plt>:
  409a00:	ff 25 52 19 22 00    	jmpq   *0x221952(%rip)        # 62b358 <_ZNSolsEi@GLIBCXX_3.4>
  409a06:	68 68 00 00 00       	pushq  $0x68
  409a0b:	e9 60 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a10 <_ZN5boost15program_options6detail7cmdline21set_additional_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE@plt>:
  409a10:	ff 25 4a 19 22 00    	jmpq   *0x22194a(%rip)        # 62b360 <_ZN5boost15program_options6detail7cmdline21set_additional_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE>
  409a16:	68 69 00 00 00       	pushq  $0x69
  409a1b:	e9 50 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a20 <_ZN5boost15program_options5storeERKNS0_20basic_parsed_optionsIcEERNS0_13variables_mapEb@plt>:
  409a20:	ff 25 42 19 22 00    	jmpq   *0x221942(%rip)        # 62b368 <_ZN5boost15program_options5storeERKNS0_20basic_parsed_optionsIcEERNS0_13variables_mapEb>
  409a26:	68 6a 00 00 00       	pushq  $0x6a
  409a2b:	e9 40 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a30 <_Unwind_Resume@plt>:
  409a30:	ff 25 3a 19 22 00    	jmpq   *0x22193a(%rip)        # 62b370 <_Unwind_Resume@GCC_3.0>
  409a36:	68 6b 00 00 00       	pushq  $0x6b
  409a3b:	e9 30 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a40 <_ZNSt11logic_errorD2Ev@plt>:
  409a40:	ff 25 32 19 22 00    	jmpq   *0x221932(%rip)        # 62b378 <_ZNSt11logic_errorD2Ev@GLIBCXX_3.4>
  409a46:	68 6c 00 00 00       	pushq  $0x6c
  409a4b:	e9 20 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>:
  409a50:	ff 25 2a 19 22 00    	jmpq   *0x22192a(%rip)        # 62b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@GLIBCXX_3.4.21>
  409a56:	68 6d 00 00 00       	pushq  $0x6d
  409a5b:	e9 10 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a60 <__cxa_guard_acquire@plt>:
  409a60:	ff 25 22 19 22 00    	jmpq   *0x221922(%rip)        # 62b388 <__cxa_guard_acquire@CXXABI_1.3>
  409a66:	68 6e 00 00 00       	pushq  $0x6e
  409a6b:	e9 00 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a70 <_ZN5boost15program_options29options_description_easy_initclEPKcS3_@plt>:
  409a70:	ff 25 1a 19 22 00    	jmpq   *0x22191a(%rip)        # 62b390 <_ZN5boost15program_options29options_description_easy_initclEPKcS3_>
  409a76:	68 6f 00 00 00       	pushq  $0x6f
  409a7b:	e9 f0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409a80 <_ZN5boost15program_options29options_description_easy_initclEPKcPKNS0_14value_semanticES3_@plt>:
  409a80:	ff 25 12 19 22 00    	jmpq   *0x221912(%rip)        # 62b398 <_ZN5boost15program_options29options_description_easy_initclEPKcPKNS0_14value_semanticES3_>
  409a86:	68 70 00 00 00       	pushq  $0x70
  409a8b:	e9 e0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409a90 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>:
  409a90:	ff 25 0a 19 22 00    	jmpq   *0x22190a(%rip)        # 62b3a0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@GLIBCXX_3.4.21>
  409a96:	68 71 00 00 00       	pushq  $0x71
  409a9b:	e9 d0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409aa0 <_ZN5boost15program_options6detail7cmdline5styleEi@plt>:
  409aa0:	ff 25 02 19 22 00    	jmpq   *0x221902(%rip)        # 62b3a8 <_ZN5boost15program_options6detail7cmdline5styleEi>
  409aa6:	68 72 00 00 00       	pushq  $0x72
  409aab:	e9 c0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409ab0 <pthread_attr_setstack@plt>:
  409ab0:	ff 25 fa 18 22 00    	jmpq   *0x2218fa(%rip)        # 62b3b0 <pthread_attr_setstack@GLIBC_2.2.5>
  409ab6:	68 73 00 00 00       	pushq  $0x73
  409abb:	e9 b0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409ac0 <_ZNSi10_M_extractIfEERSiRT_@plt>:
  409ac0:	ff 25 f2 18 22 00    	jmpq   *0x2218f2(%rip)        # 62b3b8 <_ZNSi10_M_extractIfEERSiRT_@GLIBCXX_3.4.9>
  409ac6:	68 74 00 00 00       	pushq  $0x74
  409acb:	e9 a0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409ad0 <_ZNSt6localeC1Ev@plt>:
  409ad0:	ff 25 ea 18 22 00    	jmpq   *0x2218ea(%rip)        # 62b3c0 <_ZNSt6localeC1Ev@GLIBCXX_3.4>
  409ad6:	68 75 00 00 00       	pushq  $0x75
  409adb:	e9 90 f8 ff ff       	jmpq   409370 <.plt>

Disassembly of section .text:

0000000000409ae0 <_ZL8getStatemPK10PlanResultm.part.13>:
#include "neighbor.hpp"

using libMultiRobotPlanning::Neighbor;
#include "planresult_fixed_size.hpp"

static inline State getState(const size_t agentIdx,
  409ae0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409ae0 <_ZL8getStatemPK10PlanResultm.part.13>
  409ae7:	49 bb 20 15 22 00 00 	movabs $0x221520,%r11
  409aee:	00 00 00 
		const PlanResult* solution, const size_t t) {
	//const size_t t) const {
	assert(agentIdx < ROBOT_NUMS); // [TEST-removed]
  409af1:	48 ba 20 8c df ff ff 	movabs $0xffffffffffdf8c20,%rdx
  409af8:	ff ff ff 
  409afb:	48 be c3 80 df ff ff 	movabs $0xffffffffffdf80c3,%rsi
  409b02:	ff ff ff 
  409b05:	48 bf d3 80 df ff ff 	movabs $0xffffffffffdf80d3,%rdi
  409b0c:	ff ff ff 
  409b0f:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409b16:	ff ff ff 
  409b19:	4c 01 d8             	add    %r11,%rax
static inline State getState(const size_t agentIdx,
  409b1c:	41 57                	push   %r15
	assert(agentIdx < ROBOT_NUMS); // [TEST-removed]
  409b1e:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409b22:	48 01 c6             	add    %rax,%rsi
  409b25:	ba 11 00 00 00       	mov    $0x11,%edx
  409b2a:	48 01 c7             	add    %rax,%rdi
  409b2d:	49 89 c7             	mov    %rax,%r15
  409b30:	49 01 c0             	add    %rax,%r8
  409b33:	41 ff d0             	callq  *%r8

0000000000409b36 <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEptEv.isra.54.part.55>:
    {
        BOOST_ASSERT( px != 0 );
        return *px;
    }
    
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409b36:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409b36 <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEptEv.isra.54.part.55>
  409b3d:	49 bb ca 14 22 00 00 	movabs $0x2214ca,%r11
  409b44:	00 00 00 
    {
        BOOST_ASSERT( px != 0 );
  409b47:	48 ba 00 89 df ff ff 	movabs $0xffffffffffdf8900,%rdx
  409b4e:	ff ff ff 
  409b51:	48 be 20 7d df ff ff 	movabs $0xffffffffffdf7d20,%rsi
  409b58:	ff ff ff 
  409b5b:	48 bf e9 80 df ff ff 	movabs $0xffffffffffdf80e9,%rdi
  409b62:	ff ff ff 
  409b65:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409b6c:	ff ff ff 
  409b6f:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409b72:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409b74:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409b78:	48 01 c6             	add    %rax,%rsi
  409b7b:	ba de 02 00 00       	mov    $0x2de,%edx
  409b80:	48 01 c7             	add    %rax,%rdi
  409b83:	49 89 c7             	mov    %rax,%r15
  409b86:	49 01 c0             	add    %rax,%r8
  409b89:	41 ff d0             	callq  *%r8

0000000000409b8c <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEdeEv.isra.56.part.57>:
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409b8c:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409b8c <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEdeEv.isra.56.part.57>
  409b93:	49 bb 74 14 22 00 00 	movabs $0x221474,%r11
  409b9a:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409b9d:	48 ba 80 85 df ff ff 	movabs $0xffffffffffdf8580,%rdx
  409ba4:	ff ff ff 
  409ba7:	48 be 20 7d df ff ff 	movabs $0xffffffffffdf7d20,%rsi
  409bae:	ff ff ff 
  409bb1:	48 bf e9 80 df ff ff 	movabs $0xffffffffffdf80e9,%rdi
  409bb8:	ff ff ff 
  409bbb:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409bc2:	ff ff ff 
  409bc5:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409bc8:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409bca:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409bce:	48 01 c6             	add    %rax,%rsi
  409bd1:	ba d8 02 00 00       	mov    $0x2d8,%edx
  409bd6:	48 01 c7             	add    %rax,%rdi
  409bd9:	49 89 c7             	mov    %rax,%r15
  409bdc:	49 01 c0             	add    %rax,%r8
  409bdf:	41 ff d0             	callq  *%r8

0000000000409be2 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEptEv.isra.58.part.59>:
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409be2:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409be2 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEptEv.isra.58.part.59>
  409be9:	49 bb 1e 14 22 00 00 	movabs $0x22141e,%r11
  409bf0:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409bf3:	48 ba 20 88 df ff ff 	movabs $0xffffffffffdf8820,%rdx
  409bfa:	ff ff ff 
  409bfd:	48 be 20 7d df ff ff 	movabs $0xffffffffffdf7d20,%rsi
  409c04:	ff ff ff 
  409c07:	48 bf e9 80 df ff ff 	movabs $0xffffffffffdf80e9,%rdi
  409c0e:	ff ff ff 
  409c11:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409c18:	ff ff ff 
  409c1b:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c1e:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409c20:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409c24:	48 01 c6             	add    %rax,%rsi
  409c27:	ba de 02 00 00       	mov    $0x2de,%edx
  409c2c:	48 01 c7             	add    %rax,%rdi
  409c2f:	49 89 c7             	mov    %rax,%r15
  409c32:	49 01 c0             	add    %rax,%r8
  409c35:	41 ff d0             	callq  *%r8

0000000000409c38 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEdeEv.isra.60.part.61>:
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c38:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409c38 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEdeEv.isra.60.part.61>
  409c3f:	49 bb c8 13 22 00 00 	movabs $0x2213c8,%r11
  409c46:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409c49:	48 ba 60 86 df ff ff 	movabs $0xffffffffffdf8660,%rdx
  409c50:	ff ff ff 
  409c53:	48 be 20 7d df ff ff 	movabs $0xffffffffffdf7d20,%rsi
  409c5a:	ff ff ff 
  409c5d:	48 bf e9 80 df ff ff 	movabs $0xffffffffffdf80e9,%rdi
  409c64:	ff ff ff 
  409c67:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409c6e:	ff ff ff 
  409c71:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c74:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409c76:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409c7a:	48 01 c6             	add    %rax,%rsi
  409c7d:	ba d8 02 00 00       	mov    $0x2d8,%edx
  409c82:	48 01 c7             	add    %rax,%rdi
  409c85:	49 89 c7             	mov    %rax,%r15
  409c88:	49 01 c0             	add    %rax,%r8
  409c8b:	41 ff d0             	callq  *%r8

0000000000409c8e <_ZNK5boost10shared_ptrIN4YAML6detail13memory_holderEEptEv.isra.62.part.63>:
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c8e:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409c8e <_ZNK5boost10shared_ptrIN4YAML6detail13memory_holderEEptEv.isra.62.part.63>
  409c95:	49 bb 72 13 22 00 00 	movabs $0x221372,%r11
  409c9c:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409c9f:	48 ba c0 8a df ff ff 	movabs $0xffffffffffdf8ac0,%rdx
  409ca6:	ff ff ff 
  409ca9:	48 be 20 7d df ff ff 	movabs $0xffffffffffdf7d20,%rsi
  409cb0:	ff ff ff 
  409cb3:	48 bf e9 80 df ff ff 	movabs $0xffffffffffdf80e9,%rdi
  409cba:	ff ff ff 
  409cbd:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409cc4:	ff ff ff 
  409cc7:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409cca:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409ccc:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409cd0:	48 01 c6             	add    %rax,%rsi
  409cd3:	ba de 02 00 00       	mov    $0x2de,%edx
  409cd8:	48 01 c7             	add    %rax,%rdi
  409cdb:	49 89 c7             	mov    %rax,%r15
  409cde:	49 01 c0             	add    %rax,%r8
  409ce1:	41 ff d0             	callq  *%r8
  409ce4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  409ceb:	00 00 00 
  409cee:	66 90                	xchg   %ax,%ax

0000000000409cf0 <main>:

#include "macro.hpp"
#include "ecbs_without_boost.hpp"


int main(int argc, char* argv[]) {
  409cf0:	41 57                	push   %r15
  409cf2:	41 56                	push   %r14
  409cf4:	49 bb 10 13 22 00 00 	movabs $0x221310,%r11
  409cfb:	00 00 00 
  409cfe:	41 55                	push   %r13
  409d00:	41 54                	push   %r12
  namespace po = boost::program_options;
  // Declare the supported options.
  po::options_description desc("Allowed options");
  409d02:	48 b8 80 ff ff ff ff 	movabs $0xffffffffffffff80,%rax
  409d09:	ff ff ff 
int main(int argc, char* argv[]) {
  409d0c:	55                   	push   %rbp
  409d0d:	53                   	push   %rbx
  409d0e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 409cf0 <main>
  409d15:	4c 01 db             	add    %r11,%rbx
  409d18:	48 81 ec b8 06 00 00 	sub    $0x6b8,%rsp
  po::options_description desc("Allowed options");
  409d1f:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
int main(int argc, char* argv[]) {
  409d23:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  po::options_description desc("Allowed options");
  409d28:	49 89 df             	mov    %rbx,%r15
int main(int argc, char* argv[]) {
  409d2b:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  po::options_description desc("Allowed options");
  409d2f:	8b 28                	mov    (%rax),%ebp
  409d31:	48 8d 84 24 b0 04 00 	lea    0x4b0(%rsp),%rax
  409d38:	00 
  409d39:	49 89 c6             	mov    %rax,%r14
  409d3c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  409d41:	48 b8 c4 81 df ff ff 	movabs $0xffffffffffdf81c4,%rax
  409d48:	ff ff ff 
  409d4b:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  409d4f:	48 b8 10 2d de ff ff 	movabs $0xffffffffffde2d10,%rax
  409d56:	ff ff ff 
  409d59:	4c 89 f7             	mov    %r14,%rdi
  409d5c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  409d61:	48 01 d8             	add    %rbx,%rax
  409d64:	ff d0                	callq  *%rax
  409d66:	48 8d 84 24 30 04 00 	lea    0x430(%rsp),%rax
  409d6d:	00 
  409d6e:	89 e9                	mov    %ebp,%ecx
  409d70:	89 ea                	mov    %ebp,%edx
  409d72:	d1 e9                	shr    %ecx
  409d74:	4c 89 f6             	mov    %r14,%rsi
  409d77:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  409d7c:	48 89 c7             	mov    %rax,%rdi
  409d7f:	48 b8 b0 e8 dd ff ff 	movabs $0xffffffffffdde8b0,%rax
  409d86:	ff ff ff 
  409d89:	48 01 d8             	add    %rbx,%rax
  409d8c:	ff d0                	callq  *%rax
  409d8e:	48 8b bc 24 b0 04 00 	mov    0x4b0(%rsp),%rdi
  409d95:	00 
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
	if (!_M_is_local())
  409d96:	4c 89 f0             	mov    %r14,%rax
  409d99:	48 83 c0 10          	add    $0x10,%rax
  409d9d:	48 39 c7             	cmp    %rax,%rdi
  409da0:	74 0f                	je     409db1 <main+0xc1>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
  409da2:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  409da9:	ff ff ff 
  409dac:	48 01 d8             	add    %rbx,%rax
  409daf:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  409db1:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
  409db8:	00 
      { _M_string_length = __length; }
  409db9:	48 c7 84 24 08 01 00 	movq   $0x0,0x108(%rsp)
  409dc0:	00 00 00 00 00 
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
  409dc5:	c6 84 24 10 01 00 00 	movb   $0x0,0x110(%rsp)
  409dcc:	00 
  409dcd:	48 c7 84 24 28 01 00 	movq   $0x0,0x128(%rsp)
  409dd4:	00 00 00 00 00 
  409dd9:	c6 84 24 30 01 00 00 	movb   $0x0,0x130(%rsp)
  409de0:	00 

    template<class T>
    typed_value<T>*
    value(T* v)
    {
        typed_value<T>* r = new typed_value<T>(v);
  409de1:	bf b0 00 00 00       	mov    $0xb0,%edi
	: allocator_type(__a), _M_p(__dat) { }
  409de6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  409deb:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  409df2:	00 
  409df3:	49 89 df             	mov    %rbx,%r15
  409df6:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  409dfd:	00 
  409dfe:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  409e05:	00 
  409e06:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  409e0b:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
  409e12:	00 
  409e13:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  409e1a:	00 
  409e1b:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  409e22:	ff ff ff 
  409e25:	49 89 c6             	mov    %rax,%r14
  409e28:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  409e2d:	48 01 d8             	add    %rbx,%rax
  409e30:	ff d0                	callq  *%rax
  409e32:	48 89 c5             	mov    %rax,%rbp
        /** Ctor. The 'store_to' parameter tells where to store
            the value when it's known. The parameter can be NULL. */
        typed_value(T* store_to) 
        : m_store_to(store_to), m_composing(false),
          m_implicit(false), m_multitoken(false),
          m_zero_tokens(false), m_required(false)
  409e35:	48 b8 90 fb ff ff ff 	movabs $0xfffffffffffffb90,%rax
  409e3c:	ff ff ff 
        {
        }

        template<typename ValueType>
        any(const ValueType & value)
          : content(new holder<
  409e3f:	bf 10 00 00 00       	mov    $0x10,%edi
  409e44:	48 01 d8             	add    %rbx,%rax
      { _M_string_length = __length; }
  409e47:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
  409e4e:	00 
  409e4f:	c6 45 28 00          	movb   $0x0,0x28(%rbp)
  409e53:	48 89 45 00          	mov    %rax,0x0(%rbp)
  409e57:	48 83 c0 70          	add    $0x70,%rax
          : content(0)
  409e5b:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
  409e62:	00 
  409e63:	48 89 45 08          	mov    %rax,0x8(%rbp)
  409e67:	48 8d 84 24 b4 00 00 	lea    0xb4(%rsp),%rax
  409e6e:	00 
  409e6f:	48 c7 45 48 00 00 00 	movq   $0x0,0x48(%rbp)
  409e76:	00 
  409e77:	c6 45 50 00          	movb   $0x0,0x50(%rbp)
  409e7b:	48 c7 45 60 00 00 00 	movq   $0x0,0x60(%rbp)
  409e82:	00 
  409e83:	48 89 45 10          	mov    %rax,0x10(%rbp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  409e87:	48 8d 45 28          	lea    0x28(%rbp),%rax
      { _M_string_length = __length; }
  409e8b:	48 c7 45 70 00 00 00 	movq   $0x0,0x70(%rbp)
  409e92:	00 
  409e93:	c6 45 78 00          	movb   $0x0,0x78(%rbp)
  409e97:	c6 85 88 00 00 00 00 	movb   $0x0,0x88(%rbp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  409e9e:	48 89 45 18          	mov    %rax,0x18(%rbp)
  409ea2:	48 8d 45 50          	lea    0x50(%rbp),%rax
  409ea6:	c6 85 89 00 00 00 00 	movb   $0x0,0x89(%rbp)
  409ead:	c6 85 8a 00 00 00 00 	movb   $0x0,0x8a(%rbp)
  409eb4:	c6 85 8b 00 00 00 00 	movb   $0x0,0x8b(%rbp)
  409ebb:	48 89 45 40          	mov    %rax,0x40(%rbp)
  409ebf:	48 8d 45 78          	lea    0x78(%rbp),%rax
  409ec3:	c6 85 8c 00 00 00 00 	movb   $0x0,0x8c(%rbp)
 * functionN objects).
 */
class function_base
{
public:
  function_base() : vtable(0) { }
  409eca:	48 c7 85 90 00 00 00 	movq   $0x0,0x90(%rbp)
  409ed1:	00 00 00 00 
  409ed5:	48 89 45 68          	mov    %rax,0x68(%rbp)
          : content(new holder<
  409ed9:	4c 89 f0             	mov    %r14,%rax
  409edc:	48 01 d8             	add    %rbx,%rax
  409edf:	ff d0                	callq  *%rax
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
  409ee1:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
        class holder : public placeholder
        {
        public: // structors

            holder(const ValueType & value)
              : held(value)
  409ee5:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  409eec:	ff ff ff 
  409eef:	49 bd 38 96 df ff ff 	movabs $0xffffffffffdf9638,%r13
  409ef6:	ff ff ff 
  409ef9:	48 01 da             	add    %rbx,%rdx
  409efc:	f3 41 0f 10 44 1d 00 	movss  0x0(%r13,%rbx,1),%xmm0
  409f03:	48 89 10             	mov    %rdx,(%rax)
  409f06:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  409f0b:	48 89 45 38          	mov    %rax,0x38(%rbp)
            delete content;
  409f0f:	48 85 ff             	test   %rdi,%rdi
  409f12:	74 06                	je     409f1a <main+0x22a>
  409f14:	48 8b 07             	mov    (%rdi),%rax
  409f17:	ff 50 08             	callq  *0x8(%rax)
	: allocator_type(__a), _M_p(__dat) { }
  409f1a:	48 8d 84 24 b0 02 00 	lea    0x2b0(%rsp),%rax
  409f21:	00 
       *  - this is not an error
      */
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
  409f22:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  409f27:	49 89 df             	mov    %rbx,%r15
      { _M_string_length = __length; }
  409f2a:	48 c7 84 24 b8 02 00 	movq   $0x0,0x2b8(%rsp)
  409f31:	00 00 00 00 00 
  409f36:	c6 84 24 c0 02 00 00 	movb   $0x0,0x2c0(%rsp)
  409f3d:	00 
       *  derived classes' initialization lists, which pass a pointer to
       *  their own stream buffer.
      */
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }
  409f3e:	49 bc a8 ff ff ff ff 	movabs $0xffffffffffffffa8,%r12
  409f45:	ff ff ff 
	: allocator_type(__a), _M_p(__dat) { }
  409f48:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  409f4d:	48 8d 84 24 c0 02 00 	lea    0x2c0(%rsp),%rax
  409f54:	00 
  409f55:	48 c7 84 24 b8 04 00 	movq   $0x0,0x4b8(%rsp)
  409f5c:	00 00 00 00 00 
  409f61:	49 8d 7e 38          	lea    0x38(%r14),%rdi
  409f65:	48 c7 84 24 c0 04 00 	movq   $0x0,0x4c0(%rsp)
  409f6c:	00 00 00 00 00 
  409f71:	48 c7 84 24 c8 04 00 	movq   $0x0,0x4c8(%rsp)
  409f78:	00 00 00 00 00 
  409f7d:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  409f84:	00 
  409f85:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  409f8c:	ff ff ff 
  409f8f:	48 c7 84 24 d0 04 00 	movq   $0x0,0x4d0(%rsp)
  409f96:	00 00 00 00 00 
  409f9b:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  409f9f:	48 c7 84 24 d8 04 00 	movq   $0x0,0x4d8(%rsp)
  409fa6:	00 00 00 00 00 
  409fab:	48 c7 84 24 e0 04 00 	movq   $0x0,0x4e0(%rsp)
  409fb2:	00 00 00 00 00 
  409fb7:	48 83 c0 10          	add    $0x10,%rax
  409fbb:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  409fc2:	00 
  409fc3:	48 b8 d0 ea dd ff ff 	movabs $0xffffffffffddead0,%rax
  409fca:	ff ff ff 
  409fcd:	48 01 d8             	add    %rbx,%rax
  409fd0:	ff d0                	callq  *%rax
  409fd2:	4c 89 f0             	mov    %r14,%rax
       *  The default constructor does nothing and is not normally
       *  accessible to users.
      */
      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
  409fd5:	4c 89 74 24 10       	mov    %r14,0x10(%rsp)
  409fda:	4d 8d 76 70          	lea    0x70(%r14),%r14
  409fde:	48 83 c0 58          	add    $0x58,%rax
       *  The default constructor initializes the parent class using its
       *  own default ctor.
      */
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
  409fe2:	c7 84 24 f0 04 00 00 	movl   $0x18,0x4f0(%rsp)
  409fe9:	18 00 00 00 
      { _M_string_length = __length; }
  409fed:	48 c7 84 24 00 05 00 	movq   $0x0,0x500(%rsp)
  409ff4:	00 00 00 00 00 
	: allocator_type(__a), _M_p(__dat) { }
  409ff9:	48 89 84 24 f8 04 00 	mov    %rax,0x4f8(%rsp)
  40a000:	00 
    namespace detail // basic_unlockedbuf
    {
        // acts as a stream buffer which wraps around a pair of pointers
        // and gives acces to internals
        template <class BufferType, class CharT>
        class basic_unlockedbuf : public basic_pointerbuf<CharT, BufferType> {
  40a001:	48 b8 d0 fc ff ff ff 	movabs $0xfffffffffffffcd0,%rax
  40a008:	ff ff ff 
  40a00b:	4c 89 f7             	mov    %r14,%rdi
  40a00e:	48 01 d8             	add    %rbx,%rax
  40a011:	c6 84 24 08 05 00 00 	movb   $0x0,0x508(%rsp)
  40a018:	00 
       *         @a __gend == @c egptr()
      */
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
	_M_in_beg = __gbeg;
  40a019:	48 c7 84 24 b8 04 00 	movq   $0x0,0x4b8(%rsp)
  40a020:	00 00 00 00 00 
  40a025:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40a02c:	00 
  40a02d:	48 b8 40 e4 dd ff ff 	movabs $0xffffffffffdde440,%rax
  40a034:	ff ff ff 
	_M_in_cur = __gnext;
  40a037:	48 c7 84 24 c0 04 00 	movq   $0x0,0x4c0(%rsp)
  40a03e:	00 00 00 00 00 
  40a043:	48 01 d8             	add    %rbx,%rax
	_M_in_end = __gend;
  40a046:	48 c7 84 24 c8 04 00 	movq   $0x0,0x4c8(%rsp)
  40a04d:	00 00 00 00 00 
  40a052:	ff d0                	callq  *%rax
  40a054:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40a058:	48 c7 84 24 f8 05 00 	movq   $0x0,0x5f8(%rsp)
  40a05f:	00 00 00 00 00 
  40a064:	4c 89 f7             	mov    %r14,%rdi
  40a067:	c6 84 24 00 06 00 00 	movb   $0x0,0x600(%rsp)
  40a06e:	00 
  40a06f:	c6 84 24 01 06 00 00 	movb   $0x0,0x601(%rsp)
  40a076:	00 
  40a077:	48 c7 84 24 08 06 00 	movq   $0x0,0x608(%rsp)
  40a07e:	00 00 00 00 00 
  40a083:	48 c7 84 24 10 06 00 	movq   $0x0,0x610(%rsp)
  40a08a:	00 00 00 00 00 
  40a08f:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40a093:	48 83 c0 40          	add    $0x40,%rax
  40a097:	48 c7 84 24 18 06 00 	movq   $0x0,0x618(%rsp)
  40a09e:	00 00 00 00 00 
  40a0a3:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40a0aa:	00 
  40a0ab:	48 b8 a0 e8 dd ff ff 	movabs $0xffffffffffdde8a0,%rax
  40a0b2:	ff ff ff 
  40a0b5:	48 c7 84 24 20 06 00 	movq   $0x0,0x620(%rsp)
  40a0bc:	00 00 00 00 00 
  40a0c1:	48 89 94 24 18 05 00 	mov    %rdx,0x518(%rsp)
  40a0c8:	00 
  40a0c9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  40a0ce:	48 01 d8             	add    %rbx,%rax
  40a0d1:	ff d0                	callq  *%rax
        public:
            lexical_istream_limited_src() BOOST_NOEXCEPT
              : out_buffer()
              , out_stream(&out_buffer)
              , start(buffer)
              , finish(buffer + CharacterBufferSize)
  40a0d3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
#ifdef __va_arg_pack
__fortify_function int
__NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
{
  return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
				  __bos (__s), __fmt, __va_arg_pack ());
  40a0d8:	49 b9 a0 e5 dd ff ff 	movabs $0xffffffffffdde5a0,%r9
  40a0df:	ff ff ff 
  40a0e2:	41 b8 09 00 00 00    	mov    $0x9,%r8d
  40a0e8:	49 01 d9             	add    %rbx,%r9
  40a0eb:	ba 15 00 00 00       	mov    $0x15,%edx
  40a0f0:	be 01 00 00 00       	mov    $0x1,%esi
  40a0f5:	49 89 df             	mov    %rbx,%r15
  40a0f8:	4c 8d b0 78 01 00 00 	lea    0x178(%rax),%r14
  40a0ff:	48 05 8d 01 00 00    	add    $0x18d,%rax
  40a105:	48 89 84 24 48 06 00 	mov    %rax,0x648(%rsp)
  40a10c:	00 
  40a10d:	48 b8 28 96 df ff ff 	movabs $0xffffffffffdf9628,%rax
  40a114:	ff ff ff 
  40a117:	f2 0f 10 04 03       	movsd  (%rbx,%rax,1),%xmm0
  40a11c:	48 b8 d4 81 df ff ff 	movabs $0xffffffffffdf81d4,%rax
  40a123:	ff ff ff 
  40a126:	4c 89 b4 24 40 06 00 	mov    %r14,0x640(%rsp)
  40a12d:	00 
  40a12e:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40a132:	4c 89 f7             	mov    %r14,%rdi
  40a135:	b8 01 00 00 00       	mov    $0x1,%eax
  40a13a:	41 ff d1             	callq  *%r9
                    sprintf_s(begin, CharacterBufferSize,
#else
                    sprintf(begin, 
#endif
                    "%.*g", static_cast<int>(boost::detail::lcast_get_precision<float>()), val_as_double);
                return finish > start;
  40a13d:	48 8b 8c 24 40 06 00 	mov    0x640(%rsp),%rcx
  40a144:	00 
                    sprintf(begin, 
  40a145:	4c 63 c0             	movslq %eax,%r8
                finish = start +
  40a148:	4d 01 f0             	add    %r14,%r8
  40a14b:	4c 89 84 24 48 06 00 	mov    %r8,0x648(%rsp)
  40a152:	00 

            static inline bool try_convert(const Source& arg, Target& result) {
                i_interpreter_type i_interpreter;

                // Disabling ADL, by directly specifying operators.
                if (!(i_interpreter.operator <<(arg)))
  40a153:	49 39 c8             	cmp    %rcx,%r8
  40a156:	0f 86 2b 10 00 00    	jbe    40b187 <main+0x1497>
      replace(size_type __pos, size_type __n1, const _CharT* __s,
	      size_type __n2)
      {
	__glibcxx_requires_string_len(__s, __n2);
	return _M_replace(_M_check(__pos, "basic_string::replace"),
			  _M_limit(__pos, __n1), __s, __n2);
  40a15c:	48 b8 20 e9 dd ff ff 	movabs $0xffffffffffdde920,%rax
  40a163:	ff ff ff 
  40a166:	49 29 c8             	sub    %rcx,%r8
  40a169:	48 8b 94 24 b8 02 00 	mov    0x2b8(%rsp),%rdx
  40a170:	00 
  40a171:	31 f6                	xor    %esi,%esi
  40a173:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  40a178:	48 01 d8             	add    %rbx,%rax
  40a17b:	ff d0                	callq  *%rax
       *  @brief  Base destructor.
       *
       *  This does very little apart from providing a virtual base dtor.
      */
      virtual
      ~basic_ostream() { }
  40a17d:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
      ~basic_ios() { }
  40a181:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40a186:	49 89 df             	mov    %rbx,%r15
  40a189:	48 83 c0 18          	add    $0x18,%rax
  40a18d:	49 8d 7e 70          	lea    0x70(%r14),%rdi
  40a191:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  40a198:	00 
  40a199:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40a1a0:	ff ff ff 
  40a1a3:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40a1a7:	48 83 c0 10          	add    $0x10,%rax
  40a1ab:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40a1b2:	00 
  40a1b3:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  40a1ba:	ff ff ff 
  40a1bd:	48 01 d8             	add    %rbx,%rax
  40a1c0:	ff d0                	callq  *%rax
//
// class basic_pointerbuf:
// acts as a stream buffer which wraps around a pair of pointers:
//
template <class charT, class BufferT >
class basic_pointerbuf : public BufferT {
  40a1c2:	48 b8 50 fc ff ff ff 	movabs $0xfffffffffffffc50,%rax
  40a1c9:	ff ff ff 
  40a1cc:	4c 89 f7             	mov    %r14,%rdi
  40a1cf:	48 01 d8             	add    %rbx,%rax
  40a1d2:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40a1d9:	00 
  40a1da:	48 b8 d0 bb de ff ff 	movabs $0xffffffffffdebbd0,%rax
  40a1e1:	ff ff ff 
  40a1e4:	48 01 d8             	add    %rbx,%rax
  40a1e7:	ff d0                	callq  *%rax
            provide operator<< for ostream.
        */
        typed_value* default_value(const T& v)
        {
            m_default_value = boost::any(v);
            m_default_value_as_text = boost::lexical_cast<std::string>(v);
  40a1e9:	4c 8b 74 24 68       	mov    0x68(%rsp),%r14
  40a1ee:	48 b8 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rax
  40a1f5:	ff ff ff 
  40a1f8:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
  40a1fc:	48 01 d8             	add    %rbx,%rax
  40a1ff:	4c 89 f6             	mov    %r14,%rsi
  40a202:	ff d0                	callq  *%rax
  40a204:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40a20b:	00 
	if (!_M_is_local())
  40a20c:	4c 89 f0             	mov    %r14,%rax
  40a20f:	48 83 c0 10          	add    $0x10,%rax
  40a213:	48 39 c7             	cmp    %rax,%rdi
  40a216:	74 12                	je     40a22a <main+0x53a>
  40a218:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40a21f:	ff ff ff 
  40a222:	49 89 df             	mov    %rbx,%r15
  40a225:	48 01 d8             	add    %rbx,%rax
  40a228:	ff d0                	callq  *%rax
  std::string outputFile;
  float w;
  desc.add_options()("help", "produce help message")(
      "input,i", po::value<std::string>(&inputFile)->required(),
      "input file (YAML)")("output,o",
                           po::value<std::string>(&outputFile)->required(),
  40a22a:	49 bc 30 c2 de ff ff 	movabs $0xffffffffffdec230,%r12
  40a231:	ff ff ff 
  40a234:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  40a239:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a23d:	ff d0                	callq  *%rax
        }
            
        /** Specifies that the value must occur. */
        typed_value* required()
        {
            m_required = true;
  40a23f:	48 89 04 24          	mov    %rax,(%rsp)
  40a243:	c6 80 8c 00 00 00 01 	movb   $0x1,0x8c(%rax)
      "input,i", po::value<std::string>(&inputFile)->required(),
  40a24a:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a24e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  40a253:	ff d0                	callq  *%rax
  40a255:	49 89 c4             	mov    %rax,%r12
  40a258:	c6 80 8c 00 00 00 01 	movb   $0x1,0x8c(%rax)
  desc.add_options()("help", "produce help message")(
  40a25f:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  40a266:	ff ff ff 
  40a269:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40a26e:	49 89 df             	mov    %rbx,%r15
  40a271:	48 01 d8             	add    %rbx,%rax
  40a274:	ff d0                	callq  *%rax
  40a276:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40a27d:	00 
  40a27e:	48 b8 d9 81 df ff ff 	movabs $0xffffffffffdf81d9,%rax
  40a285:	ff ff ff 
  40a288:	49 be ee 81 df ff ff 	movabs $0xffffffffffdf81ee,%r14
  40a28f:	ff ff ff 
  40a292:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40a296:	48 b8 70 ea dd ff ff 	movabs $0xffffffffffddea70,%rax
  40a29d:	ff ff ff 
  40a2a0:	49 8d 34 1e          	lea    (%r14,%rbx,1),%rsi
  40a2a4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40a2a9:	48 01 d8             	add    %rbx,%rax
  40a2ac:	ff d0                	callq  *%rax
      "input file (YAML)")("output,o",
  40a2ae:	48 ba f3 81 df ff ff 	movabs $0xffffffffffdf81f3,%rdx
  40a2b5:	ff ff ff 
  40a2b8:	48 be 05 82 df ff ff 	movabs $0xffffffffffdf8205,%rsi
  40a2bf:	ff ff ff 
  40a2c2:	48 89 c7             	mov    %rax,%rdi
  40a2c5:	48 8d 0c 13          	lea    (%rbx,%rdx,1),%rcx
  40a2c9:	4c 89 e2             	mov    %r12,%rdx
  40a2cc:	49 bc 80 ea dd ff ff 	movabs $0xffffffffffddea80,%r12
  40a2d3:	ff ff ff 
  40a2d6:	48 01 de             	add    %rbx,%rsi
  40a2d9:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a2dd:	ff d0                	callq  *%rax
                           "output file (YAML)")(
  40a2df:	48 ba 0d 82 df ff ff 	movabs $0xffffffffffdf820d,%rdx
  40a2e6:	ff ff ff 
  40a2e9:	48 be 20 82 df ff ff 	movabs $0xffffffffffdf8220,%rsi
  40a2f0:	ff ff ff 
  40a2f3:	48 89 c7             	mov    %rax,%rdi
  40a2f6:	48 8d 0c 13          	lea    (%rbx,%rdx,1),%rcx
  40a2fa:	48 01 de             	add    %rbx,%rsi
  40a2fd:	48 8b 14 24          	mov    (%rsp),%rdx
  40a301:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a305:	ff d0                	callq  *%rax
      "suboptimality,w", po::value<float>(&w)->default_value(1.0),
      "suboptimality bound");
  40a307:	48 ba 29 82 df ff ff 	movabs $0xffffffffffdf8229,%rdx
  40a30e:	ff ff ff 
  40a311:	48 be 3d 82 df ff ff 	movabs $0xffffffffffdf823d,%rsi
  40a318:	ff ff ff 
  40a31b:	48 89 c7             	mov    %rax,%rdi
  40a31e:	48 8d 0c 13          	lea    (%rbx,%rdx,1),%rcx
  40a322:	48 01 de             	add    %rbx,%rsi
  40a325:	48 89 ea             	mov    %rbp,%rdx
  40a328:	49 01 dc             	add    %rbx,%r12
  40a32b:	41 ff d4             	callq  *%r12

  try {
    po::variables_map vm;
  40a32e:	48 b8 c0 e4 dd ff ff 	movabs $0xffffffffffdde4c0,%rax
  40a335:	ff ff ff 
  40a338:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40a33d:	48 01 d8             	add    %rbx,%rax
  40a340:	ff d0                	callq  *%rax
                       int style,
                       function1<std::pair<std::string, std::string>, 
                                 const std::string&> ext)
    {
        return basic_command_line_parser<charT>(argc, argv).options(desc).
            style(style).extra_parser(ext).run();
  40a342:	48 8d 84 24 b0 03 00 	lea    0x3b0(%rsp),%rax
  40a349:	00 
  40a34a:	48 c7 84 24 10 03 00 	movq   $0x0,0x310(%rsp)
  40a351:	00 00 00 00 00 
  40a356:	48 c7 84 24 e0 02 00 	movq   $0x0,0x2e0(%rsp)
  40a35d:	00 00 00 00 00 
  40a362:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  40a367:	8b 74 24 18          	mov    0x18(%rsp),%esi
  40a36b:	48 89 c5             	mov    %rax,%rbp
  40a36e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  40a373:	48 89 c7             	mov    %rax,%rdi
  40a376:	48 b8 80 38 df ff ff 	movabs $0xffffffffffdf3880,%rax
  40a37d:	ff ff ff 
  40a380:	48 01 d8             	add    %rbx,%rax
  40a383:	ff d0                	callq  *%rax
       detail::cmdline::set_options_description(desc);
  40a385:	4c 8b 64 24 60       	mov    0x60(%rsp),%r12
  40a38a:	48 b8 d0 e6 dd ff ff 	movabs $0xffffffffffdde6d0,%rax
  40a391:	ff ff ff 
  40a394:	48 89 ef             	mov    %rbp,%rdi
  40a397:	48 01 d8             	add    %rbx,%rax
  40a39a:	4c 89 e6             	mov    %r12,%rsi
  40a39d:	ff d0                	callq  *%rax
        detail::cmdline::style(xstyle);
  40a39f:	48 b8 a0 ea dd ff ff 	movabs $0xffffffffffddeaa0,%rax
  40a3a6:	ff ff ff 
        m_desc = &desc;
  40a3a9:	4c 89 a4 24 20 04 00 	mov    %r12,0x420(%rsp)
  40a3b0:	00 
        detail::cmdline::style(xstyle);
  40a3b1:	31 f6                	xor    %esi,%esi
  40a3b3:	48 89 ef             	mov    %rbp,%rdi
  40a3b6:	48 01 d8             	add    %rbx,%rax
  40a3b9:	ff d0                	callq  *%rax
            style(style).extra_parser(ext).run();
  40a3bb:	48 8d 84 24 e0 02 00 	lea    0x2e0(%rsp),%rax
  40a3c2:	00 
  40a3c3:	48 89 ef             	mov    %rbp,%rdi
  40a3c6:	49 89 c4             	mov    %rax,%r12
  40a3c9:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  40a3ce:	48 89 c6             	mov    %rax,%rsi
  40a3d1:	48 b8 30 eb de ff ff 	movabs $0xffffffffffdeeb30,%rax
  40a3d8:	ff ff ff 
  40a3db:	48 01 d8             	add    %rbx,%rax
  40a3de:	ff d0                	callq  *%rax
  40a3e0:	48 8d b4 24 50 03 00 	lea    0x350(%rsp),%rsi
  40a3e7:	00 
  40a3e8:	48 89 f7             	mov    %rsi,%rdi
  40a3eb:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  40a3f0:	48 89 c6             	mov    %rax,%rsi
  40a3f3:	48 b8 90 2b df ff ff 	movabs $0xffffffffffdf2b90,%rax
  40a3fa:	ff ff ff 
  40a3fd:	48 01 d8             	add    %rbx,%rax
  40a400:	ff d0                	callq  *%rax

        There are two typedefs \-- command_line_parser and wcommand_line_parser,
        for charT == char and charT == wchar_t cases.
    */
    template<class charT>
    class basic_command_line_parser : private detail::cmdline {
  40a402:	48 b8 00 c3 de ff ff 	movabs $0xffffffffffdec300,%rax
  40a409:	ff ff ff 
  40a40c:	48 89 ef             	mov    %rbp,%rdi
  40a40f:	48 01 d8             	add    %rbx,%rax
  40a412:	ff d0                	callq  *%rax
    }

    // Clear out a target, if there is one
    void clear()
    {
      if (vtable) {
  40a414:	48 8b 84 24 e0 02 00 	mov    0x2e0(%rsp),%rax
  40a41b:	00 
  40a41c:	48 85 c0             	test   %rax,%rax
  40a41f:	74 1f                	je     40a440 <main+0x750>
        if (!this->has_trivial_copy_and_destroy())
  40a421:	a8 01                	test   $0x1,%al
  40a423:	75 1b                	jne    40a440 <main+0x750>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40a425:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  40a429:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  40a42c:	48 85 c0             	test   %rax,%rax
  40a42f:	74 0f                	je     40a440 <main+0x750>
            base.manager(functor, functor, destroy_functor_tag);
  40a431:	49 8d 7c 24 08       	lea    0x8(%r12),%rdi
  40a436:	ba 02 00 00 00       	mov    $0x2,%edx
  40a43b:	48 89 fe             	mov    %rdi,%rsi
  40a43e:	ff d0                	callq  *%rax
    po::store(po::parse_command_line(argc, argv, desc), vm);
  40a440:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  40a447:	ff ff ff 
  40a44a:	31 d2                	xor    %edx,%edx
  40a44c:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  40a451:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40a456:	49 89 df             	mov    %rbx,%r15
  40a459:	48 01 d8             	add    %rbx,%rax
  40a45c:	ff d0                	callq  *%rax
    class basic_parsed_options {
  40a45e:	48 b8 90 c3 de ff ff 	movabs $0xffffffffffdec390,%rax
  40a465:	ff ff ff 
  40a468:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40a46d:	48 01 d8             	add    %rbx,%rax
  40a470:	ff d0                	callq  *%rax
      if (vtable) {
  40a472:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  40a479:	00 
  40a47a:	48 85 c0             	test   %rax,%rax
  40a47d:	74 08                	je     40a487 <main+0x797>
        if (!this->has_trivial_copy_and_destroy())
  40a47f:	a8 01                	test   $0x1,%al
  40a481:	0f 84 9e 0c 00 00    	je     40b125 <main+0x1435>
    po::notify(vm);
  40a487:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40a48c:	48 b8 60 e5 dd ff ff 	movabs $0xffffffffffdde560,%rax
  40a493:	ff ff ff 
  40a496:	49 89 df             	mov    %rbx,%r15
  40a499:	48 01 d8             	add    %rbx,%rax
  40a49c:	48 89 ef             	mov    %rbp,%rdi
  40a49f:	ff d0                	callq  *%rax

    if (vm.count("help") != 0u) {
  40a4a1:	48 8d 84 24 80 02 00 	lea    0x280(%rsp),%rax
  40a4a8:	00 
  40a4a9:	49 8d 34 1e          	lea    (%r14,%rbx,1),%rsi
  40a4ad:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  40a4b2:	48 89 c7             	mov    %rax,%rdi
  40a4b5:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40a4ba:	48 01 d8             	add    %rbx,%rax
  40a4bd:	ff d0                	callq  *%rax
  40a4bf:	48 8b 94 24 d0 04 00 	mov    0x4d0(%rsp),%rdx
  40a4c6:	00 
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
		   const _Key& __k) const
    {
      while (__x != 0)
  40a4c7:	48 85 d2             	test   %rdx,%rdx
  40a4ca:	0f 84 d8 20 00 00    	je     40c5a8 <main+0x28b8>
  40a4d0:	48 b8 a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rax
  40a4d7:	ff ff ff 
  40a4da:	49 89 d6             	mov    %rdx,%r14
  40a4dd:	48 8d 6d 18          	lea    0x18(%rbp),%rbp
  40a4e1:	48 89 04 24          	mov    %rax,(%rsp)
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
  40a4e5:	4c 8d 24 18          	lea    (%rax,%rbx,1),%r12
  40a4e9:	eb 11                	jmp    40a4fc <main+0x80c>
  40a4eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  40a4f0:	4c 89 f5             	mov    %r14,%rbp
	  __y = __x, __x = _S_left(__x);
  40a4f3:	4d 8b 76 10          	mov    0x10(%r14),%r14
      while (__x != 0)
  40a4f7:	4d 85 f6             	test   %r14,%r14
  40a4fa:	74 1c                	je     40a518 <main+0x828>
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
  40a4fc:	49 8d 7e 20          	lea    0x20(%r14),%rdi
  40a500:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  40a505:	49 89 df             	mov    %rbx,%r15
  40a508:	41 ff d4             	callq  *%r12
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  40a50b:	85 c0                	test   %eax,%eax
  40a50d:	79 e1                	jns    40a4f0 <main+0x800>
  40a50f:	4d 8b 76 18          	mov    0x18(%r14),%r14
      while (__x != 0)
  40a513:	4d 85 f6             	test   %r14,%r14
  40a516:	75 e4                	jne    40a4fc <main+0x80c>
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k, 
					_S_key(__j._M_node))) ? end() : __j;
  40a518:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40a51d:	48 83 c0 18          	add    $0x18,%rax
  40a521:	48 39 c5             	cmp    %rax,%rbp
  40a524:	0f 84 2b 20 00 00    	je     40c555 <main+0x2865>
  40a52a:	4c 8b 34 24          	mov    (%rsp),%r14
  40a52e:	48 8d 75 20          	lea    0x20(%rbp),%rsi
  40a532:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  40a537:	49 89 df             	mov    %rbx,%r15
  40a53a:	49 01 de             	add    %rbx,%r14
  40a53d:	41 ff d6             	callq  *%r14
	      || _M_impl._M_key_compare(__k, 
  40a540:	85 c0                	test   %eax,%eax
  40a542:	0f 88 0d 20 00 00    	js     40c555 <main+0x2865>
	if (!_M_is_local())
  40a548:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40a54d:	48 8b bc 24 80 02 00 	mov    0x280(%rsp),%rdi
  40a554:	00 
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
  40a555:	bd 01 00 00 00       	mov    $0x1,%ebp
  40a55a:	48 83 c0 10          	add    $0x10,%rax
  40a55e:	48 39 c7             	cmp    %rax,%rdi
  40a561:	0f 84 4e 0a 00 00    	je     40afb5 <main+0x12c5>
  40a567:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40a56e:	ff ff ff 
  40a571:	49 89 df             	mov    %rbx,%r15
  40a574:	48 01 d8             	add    %rbx,%rax
  40a577:	ff d0                	callq  *%rax
  40a579:	48 85 ed             	test   %rbp,%rbp
  40a57c:	0f 85 33 0a 00 00    	jne    40afb5 <main+0x12c5>
    po::variables_map vm;
  40a582:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40a587:	48 b8 80 51 df ff ff 	movabs $0xffffffffffdf5180,%rax
  40a58e:	ff ff ff 
    std::cerr << e.what() << std::endl << std::endl;
    std::cerr << desc << std::endl;
    return 1;
  }

  YAML::Node config = YAML::LoadFile(inputFile);
  40a591:	49 89 df             	mov    %rbx,%r15
    po::variables_map vm;
  40a594:	48 01 d8             	add    %rbx,%rax
  40a597:	48 89 ef             	mov    %rbp,%rdi
  40a59a:	ff d0                	callq  *%rax
  YAML::Node config = YAML::LoadFile(inputFile);
  40a59c:	48 8d 84 24 40 01 00 	lea    0x140(%rsp),%rax
  40a5a3:	00 
  40a5a4:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  40a5a9:	49 89 c6             	mov    %rax,%r14
  40a5ac:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40a5b3:	00 
  40a5b4:	48 89 c7             	mov    %rax,%rdi
  40a5b7:	48 b8 c0 e9 dd ff ff 	movabs $0xffffffffffdde9c0,%rax
  40a5be:	ff ff ff 
  40a5c1:	48 01 d8             	add    %rbx,%rax
  40a5c4:	ff d0                	callq  *%rax
	  __hashtable_alloc(__node_alloc_type(__a))
      { }

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
  40a5c6:	48 8d 84 24 10 03 00 	lea    0x310(%rsp),%rax
  40a5cd:	00 
  /// Default value for rehash policy.  Bucket size is (usually) the
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    _Prime_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40a5ce:	f3 41 0f 10 44 1d 00 	movss  0x0(%r13,%rbx,1),%xmm0

   std::unordered_set<Location> obstacles;
  std::vector<Location> goals;
  std::vector<State> startStates;

  const auto& dim = config["map"]["dimensions"];
  40a5d5:	49 bc 4d 82 df ff ff 	movabs $0xffffffffffdf824d,%r12
  40a5dc:	ff ff ff 
  40a5df:	49 bd 20 1a df ff ff 	movabs $0xffffffffffdf1a20,%r13
  40a5e6:	ff ff ff 
  40a5e9:	48 c7 84 24 18 03 00 	movq   $0x1,0x318(%rsp)
  40a5f0:	00 01 00 00 00 
  40a5f5:	48 89 04 24          	mov    %rax,(%rsp)
  40a5f9:	48 8d 84 24 40 03 00 	lea    0x340(%rsp),%rax
  40a600:	00 
    _Hash_node_base() noexcept : _M_nxt() { }
  40a601:	48 c7 84 24 20 03 00 	movq   $0x0,0x320(%rsp)
  40a608:	00 00 00 00 00 
  40a60d:	48 c7 84 24 28 03 00 	movq   $0x0,0x328(%rsp)
  40a614:	00 00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40a619:	f3 0f 11 84 24 30 03 	movss  %xmm0,0x330(%rsp)
  40a620:	00 00 
  40a622:	48 c7 84 24 38 03 00 	movq   $0x0,0x338(%rsp)
  40a629:	00 00 00 00 00 
  40a62e:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  40a635:	00 
  40a636:	48 c7 84 24 40 03 00 	movq   $0x0,0x340(%rsp)
  40a63d:	00 00 00 00 00 
  40a642:	49 8d 14 1c          	lea    (%r12,%rbx,1),%rdx
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  40a646:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  40a64d:	00 00 00 00 00 
  40a652:	4c 89 f6             	mov    %r14,%rsi
  40a655:	49 89 ef             	mov    %rbp,%r15
  40a658:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  40a65f:	00 00 00 00 00 
  40a664:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  40a66b:	00 00 00 00 00 
  40a670:	48 89 ef             	mov    %rbp,%rdi
  40a673:	48 c7 84 24 e0 00 00 	movq   $0x0,0xe0(%rsp)
  40a67a:	00 00 00 00 00 
  40a67f:	48 c7 84 24 e8 00 00 	movq   $0x0,0xe8(%rsp)
  40a686:	00 00 00 00 00 
  40a68b:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  40a690:	48 c7 84 24 f0 00 00 	movq   $0x0,0xf0(%rsp)
  40a697:	00 00 00 00 00 
  40a69c:	ff d0                	callq  *%rax
  40a69e:	48 b8 51 82 df ff ff 	movabs $0xffffffffffdf8251,%rax
  40a6a5:	ff ff ff 
  40a6a8:	48 8d ac 24 60 01 00 	lea    0x160(%rsp),%rbp
  40a6af:	00 
  40a6b0:	4c 89 fe             	mov    %r15,%rsi
  40a6b3:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40a6b7:	48 b8 00 18 df ff ff 	movabs $0xffffffffffdf1800,%rax
  40a6be:	ff ff ff 
  40a6c1:	48 89 ef             	mov    %rbp,%rdi
  40a6c4:	48 01 d8             	add    %rbx,%rax
  40a6c7:	ff d0                	callq  *%rax
        r.release();
    }

    ~shared_count() // nothrow
    {
        if( pi_ != 0 ) pi_->release();
  40a6c9:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a6d0:	00 
  40a6d1:	48 85 ff             	test   %rdi,%rdi
  40a6d4:	74 10                	je     40a6e6 <main+0x9f6>
  40a6d6:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40a6dd:	ff ff ff 
  40a6e0:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40a6e4:	ff d0                	callq  *%rax
  int dimx = dim[0].as<int>();
  40a6e6:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
  40a6eb:	48 b8 f0 02 df ff ff 	movabs $0xffffffffffdf02f0,%rax
  40a6f2:	ff ff ff 
  40a6f5:	48 b9 a0 be de ff ff 	movabs $0xffffffffffdebea0,%rcx
  40a6fc:	ff ff ff 
  40a6ff:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40a704:	c7 84 24 b0 03 00 00 	movl   $0x0,0x3b0(%rsp)
  40a70b:	00 00 00 00 
  40a70f:	48 89 ee             	mov    %rbp,%rsi
  40a712:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  40a717:	48 01 d8             	add    %rbx,%rax
  40a71a:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  40a71f:	4c 89 ff             	mov    %r15,%rdi
  40a722:	ff d0                	callq  *%rax
  40a724:	48 b8 f0 c4 de ff ff 	movabs $0xffffffffffdec4f0,%rax
  40a72b:	ff ff ff 
  40a72e:	4c 89 ff             	mov    %r15,%rdi
  40a731:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40a736:	48 01 d8             	add    %rbx,%rax
  40a739:	ff d0                	callq  *%rax
  40a73b:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a742:	00 
  40a743:	89 84 24 a8 00 00 00 	mov    %eax,0xa8(%rsp)
  40a74a:	48 85 ff             	test   %rdi,%rdi
  40a74d:	74 10                	je     40a75f <main+0xa6f>
  40a74f:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40a756:	ff ff ff 
  40a759:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40a75d:	ff d0                	callq  *%rax
  int dimy = dim[1].as<int>();
  40a75f:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
  40a764:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40a769:	48 b9 a0 be de ff ff 	movabs $0xffffffffffdebea0,%rcx
  40a770:	ff ff ff 
  40a773:	c7 84 24 b0 03 00 00 	movl   $0x1,0x3b0(%rsp)
  40a77a:	01 00 00 00 
  40a77e:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  40a783:	48 89 ee             	mov    %rbp,%rsi
  40a786:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  40a78b:	4c 89 ff             	mov    %r15,%rdi
  40a78e:	48 01 d8             	add    %rbx,%rax
  40a791:	ff d0                	callq  *%rax
  40a793:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  40a798:	4c 89 ff             	mov    %r15,%rdi
  40a79b:	48 01 d8             	add    %rbx,%rax
  40a79e:	ff d0                	callq  *%rax
  40a7a0:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a7a7:	00 
  40a7a8:	89 84 24 ac 00 00 00 	mov    %eax,0xac(%rsp)
  40a7af:	48 85 ff             	test   %rdi,%rdi
  40a7b2:	74 10                	je     40a7c4 <main+0xad4>
  40a7b4:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40a7bb:	ff ff ff 
  40a7be:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40a7c2:	ff d0                	callq  *%rax

  for (const auto& node : config["map"]["obstacles"]) {
  40a7c4:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
  40a7c9:	48 b9 a0 be de ff ff 	movabs $0xffffffffffdebea0,%rcx
  40a7d0:	ff ff ff 
  40a7d3:	49 8d 14 1c          	lea    (%r12,%rbx,1),%rdx
  40a7d7:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  40a7de:	00 
  40a7df:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  40a7e4:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  40a7e9:	4c 89 ff             	mov    %r15,%rdi
  40a7ec:	ff d0                	callq  *%rax
  40a7ee:	48 b8 5c 82 df ff ff 	movabs $0xffffffffffdf825c,%rax
  40a7f5:	ff ff ff 
  40a7f8:	48 8d ac 24 80 01 00 	lea    0x180(%rsp),%rbp
  40a7ff:	00 
  40a800:	4c 89 fe             	mov    %r15,%rsi
  40a803:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40a807:	48 b8 40 1c df ff ff 	movabs $0xffffffffffdf1c40,%rax
  40a80e:	ff ff ff 
  40a811:	48 89 ef             	mov    %rbp,%rdi
  40a814:	48 01 d8             	add    %rbx,%rax
  40a817:	ff d0                	callq  *%rax
  40a819:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a820:	00 
  40a821:	48 85 ff             	test   %rdi,%rdi
  40a824:	74 10                	je     40a836 <main+0xb46>
  40a826:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40a82d:	ff ff ff 
  40a830:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40a834:	ff d0                	callq  *%rax
  40a836:	48 b8 90 b3 de ff ff 	movabs $0xffffffffffdeb390,%rax
  40a83d:	ff ff ff 
  40a840:	48 89 ee             	mov    %rbp,%rsi
  40a843:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  40a848:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40a84f:	00 
  40a850:	48 01 d8             	add    %rbx,%rax
  40a853:	ff d0                	callq  *%rax
  40a855:	48 b8 00 b5 de ff ff 	movabs $0xffffffffffdeb500,%rax
  40a85c:	ff ff ff 
  40a85f:	48 89 ee             	mov    %rbp,%rsi
  40a862:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  40a867:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  40a86e:	00 
  40a86f:	48 01 d8             	add    %rbx,%rax
  40a872:	ff d0                	callq  *%rax
    obstacles.insert(Location(node[0].as<int>(), node[1].as<int>()));
  40a874:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  40a87b:	00 
  40a87c:	8b ac 24 80 02 00 00 	mov    0x280(%rsp),%ebp
  40a883:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
	_M_node = _Rb_tree_increment(_M_node);
  40a888:	48 b8 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%rax
  40a88f:	ff ff ff 
  40a892:	48 01 d8             	add    %rbx,%rax
  template <typename>
  friend class node_iterator_base;

  template <typename W>
  bool equal(const node_iterator_base<W>& rhs) const {
    if (m_type != rhs.m_type)
  40a895:	39 ac 24 b0 02 00 00 	cmp    %ebp,0x2b0(%rsp)
  40a89c:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40a8a1:	0f 84 2c 03 00 00    	je     40abd3 <main+0xee3>
  40a8a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40a8ae:	00 00 
# endif

      template <class Facade>
      static typename Facade::reference dereference(Facade const& f)
      {
          return f.dereference();
  40a8b0:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  40a8b5:	48 b8 10 f5 de ff ff 	movabs $0xffffffffffdef510,%rax
  40a8bc:	ff ff ff 
  40a8bf:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  40a8c4:	48 01 d8             	add    %rbx,%rax
  40a8c7:	4c 89 ff             	mov    %r15,%rdi
  40a8ca:	ff d0                	callq  *%rax
  40a8cc:	48 8b 6c 24 40       	mov    0x40(%rsp),%rbp
  40a8d1:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40a8d6:	4c 89 fe             	mov    %r15,%rsi
  40a8d9:	c7 84 24 e0 02 00 00 	movl   $0x1,0x2e0(%rsp)
  40a8e0:	01 00 00 00 
  40a8e4:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  40a8e9:	48 89 e8             	mov    %rbp,%rax
  40a8ec:	4c 89 f7             	mov    %r14,%rdi
  40a8ef:	48 01 d8             	add    %rbx,%rax
  40a8f2:	ff d0                	callq  *%rax
  40a8f4:	4c 8b 6c 24 48       	mov    0x48(%rsp),%r13
  40a8f9:	4c 89 f7             	mov    %r14,%rdi
  40a8fc:	4c 89 e8             	mov    %r13,%rax
  40a8ff:	48 01 d8             	add    %rbx,%rax
  40a902:	ff d0                	callq  *%rax
  40a904:	4c 89 fe             	mov    %r15,%rsi
  40a907:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
  40a90c:	41 89 c6             	mov    %eax,%r14d
  40a90f:	48 89 e8             	mov    %rbp,%rax
  40a912:	c7 84 24 60 02 00 00 	movl   $0x0,0x260(%rsp)
  40a919:	00 00 00 00 
  40a91d:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  40a922:	48 01 d8             	add    %rbx,%rax
  40a925:	4c 89 ff             	mov    %r15,%rdi
  40a928:	ff d0                	callq  *%rax
  40a92a:	4c 89 e8             	mov    %r13,%rax
  40a92d:	4c 89 ff             	mov    %r15,%rdi
  40a930:	48 01 d8             	add    %rbx,%rax
  40a933:	ff d0                	callq  *%rax
  40a935:	4c 63 e0             	movslq %eax,%r12
#pragma once

template<typename T>
void hash_combine(size_t & seed, T const& v) {
	std::hash<T> primitive_type_hash;
	seed ^= primitive_type_hash(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
  40a938:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx

  /// Explicit specialization for short.
  _Cxx_hashtable_define_trivial_hash(short)

  /// Explicit specialization for int.
  _Cxx_hashtable_define_trivial_hash(int)
  40a93d:	49 63 c6             	movslq %r14d,%rax
  40a940:	49 8d 14 0c          	lea    (%r12,%rcx,1),%rdx
  40a944:	4d 89 e5             	mov    %r12,%r13
  40a947:	48 01 c8             	add    %rcx,%rax
  40a94a:	48 8b bc 24 18 03 00 	mov    0x318(%rsp),%rdi
  40a951:	00 
  40a952:	49 89 d4             	mov    %rdx,%r12
  40a955:	49 c1 e4 06          	shl    $0x6,%r12
  40a959:	4c 01 e0             	add    %r12,%rax
  40a95c:	49 89 d4             	mov    %rdx,%r12
  40a95f:	49 c1 ec 02          	shr    $0x2,%r12
  40a963:	49 01 c4             	add    %rax,%r12
  40a966:	49 31 d4             	xor    %rdx,%r12
    { return __num % __den; }
  40a969:	31 d2                	xor    %edx,%edx
  40a96b:	4c 89 e0             	mov    %r12,%rax
  40a96e:	48 f7 f7             	div    %rdi
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_find_before_node(size_type __n, const key_type& __k,
			__hash_code __code) const
    -> __node_base*
    {
      __node_base* __prev_p = _M_buckets[__n];
  40a971:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40a978:	00 
  40a979:	49 89 d0             	mov    %rdx,%r8
  40a97c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40a981:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  40a988:	00 
  40a989:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
      if (!__prev_p)
  40a98d:	48 85 c0             	test   %rax,%rax
  40a990:	74 29                	je     40a9bb <main+0xccb>
	return nullptr;

      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  40a992:	48 8b 08             	mov    (%rax),%rcx
  40a995:	48 8b 71 10          	mov    0x10(%rcx),%rsi
  struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>
  {
    static bool
    _S_equals(const _Equal& __eq, const _ExtractKey& __extract,
	      const _Key& __k, _HashCodeType __c, _Hash_node<_Value, true>* __n)
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  40a999:	49 39 f4             	cmp    %rsi,%r12
  40a99c:	0f 84 ee 06 00 00    	je     40b090 <main+0x13a0>
	   __p = __p->_M_next())
	{
	  if (this->_M_equals(__k, __code, __p))
	    return __prev_p;

	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  40a9a2:	48 8b 09             	mov    (%rcx),%rcx
  40a9a5:	48 85 c9             	test   %rcx,%rcx
  40a9a8:	74 11                	je     40a9bb <main+0xccb>
  40a9aa:	48 8b 71 10          	mov    0x10(%rcx),%rsi
    { return __num % __den; }
  40a9ae:	31 d2                	xor    %edx,%edx
  40a9b0:	48 89 f0             	mov    %rsi,%rax
  40a9b3:	48 f7 f7             	div    %rdi
  40a9b6:	49 39 d0             	cmp    %rdx,%r8
  40a9b9:	74 de                	je     40a999 <main+0xca9>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40a9bb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40a9c0:	bf 18 00 00 00       	mov    $0x18,%edi
  40a9c5:	49 89 df             	mov    %rbx,%r15
  40a9c8:	48 01 d8             	add    %rbx,%rax
  40a9cb:	ff d0                	callq  *%rax
  40a9cd:	48 89 c5             	mov    %rax,%rbp
    _Hash_node_base() noexcept : _M_nxt() { }
  40a9d0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  40a9d7:	44 89 68 08          	mov    %r13d,0x8(%rax)
  40a9db:	44 89 70 0c          	mov    %r14d,0xc(%rax)
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_insert_unique_node(size_type __bkt, __hash_code __code,
			  __node_type* __node)
    -> iterator
    {
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  40a9df:	48 8b 84 24 38 03 00 	mov    0x338(%rsp),%rax
  40a9e6:	00 
      std::pair<bool, std::size_t> __do_rehash
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  40a9e7:	b9 01 00 00 00       	mov    $0x1,%ecx
  40a9ec:	48 8b 94 24 28 03 00 	mov    0x328(%rsp),%rdx
  40a9f3:	00 
  40a9f4:	48 8b b4 24 18 03 00 	mov    0x318(%rsp),%rsi
  40a9fb:	00 
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  40a9fc:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  40aa03:	00 
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  40aa04:	48 8b 04 24          	mov    (%rsp),%rax
  40aa08:	48 8d 78 20          	lea    0x20(%rax),%rdi
  40aa0c:	48 b8 90 e8 dd ff ff 	movabs $0xffffffffffdde890,%rax
  40aa13:	ff ff ff 
  40aa16:	48 01 d8             	add    %rbx,%rax
  40aa19:	ff d0                	callq  *%rax

      __try
	{
	  if (__do_rehash.first)
  40aa1b:	84 c0                	test   %al,%al
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  40aa1d:	48 89 d6             	mov    %rdx,%rsi
	  if (__do_rehash.first)
  40aa20:	74 35                	je     40aa57 <main+0xd67>
	    {
	      _M_rehash(__do_rehash.second, __saved_state);
  40aa22:	48 b8 80 34 df ff ff 	movabs $0xffffffffffdf3480,%rax
  40aa29:	ff ff ff 
  40aa2c:	48 8d 94 24 b8 00 00 	lea    0xb8(%rsp),%rdx
  40aa33:	00 
  40aa34:	48 8b 3c 24          	mov    (%rsp),%rdi
  40aa38:	48 01 d8             	add    %rbx,%rax
  40aa3b:	ff d0                	callq  *%rax
    { return __num % __den; }
  40aa3d:	4c 89 e0             	mov    %r12,%rax
  40aa40:	31 d2                	xor    %edx,%edx
  40aa42:	48 f7 b4 24 18 03 00 	divq   0x318(%rsp)
  40aa49:	00 
  40aa4a:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40aa51:	00 
  40aa52:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
      if (_M_buckets[__bkt])
  40aa57:	48 8b b4 24 10 03 00 	mov    0x310(%rsp),%rsi
  40aa5e:	00 
  40aa5f:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
      { __n->_M_hash_code = __c; }
  40aa64:	4c 89 65 10          	mov    %r12,0x10(%rbp)
  40aa68:	48 01 f1             	add    %rsi,%rcx
  40aa6b:	48 8b 01             	mov    (%rcx),%rax
  40aa6e:	48 85 c0             	test   %rax,%rax
  40aa71:	0f 84 d5 06 00 00    	je     40b14c <main+0x145c>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  40aa77:	48 8b 00             	mov    (%rax),%rax
  40aa7a:	48 89 45 00          	mov    %rax,0x0(%rbp)
	  _M_buckets[__bkt]->_M_nxt = __node;
  40aa7e:	48 8b 01             	mov    (%rcx),%rax
  40aa81:	48 89 28             	mov    %rbp,(%rax)

	  this->_M_store_code(__node, __code);

	  // Always insert at the beginning of the bucket.
	  _M_insert_bucket_begin(__bkt, __node);
	  ++_M_element_count;
  40aa84:	48 83 84 24 28 03 00 	addq   $0x1,0x328(%rsp)
  40aa8b:	00 01 
  40aa8d:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40aa94:	00 
  40aa95:	48 85 ff             	test   %rdi,%rdi
  40aa98:	74 10                	je     40aaaa <main+0xdba>
  40aa9a:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40aaa1:	ff ff ff 
  40aaa4:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40aaa8:	ff d0                	callq  *%rax
  40aaaa:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40aab1:	00 
  40aab2:	48 85 ff             	test   %rdi,%rdi
  40aab5:	74 10                	je     40aac7 <main+0xdd7>
  40aab7:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40aabe:	ff ff ff 
  40aac1:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40aac5:	ff d0                	callq  *%rax
  40aac7:	48 8b bc 24 a0 03 00 	mov    0x3a0(%rsp),%rdi
  40aace:	00 
  40aacf:	48 85 ff             	test   %rdi,%rdi
  40aad2:	74 10                	je     40aae4 <main+0xdf4>
  40aad4:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40aadb:	ff ff ff 
  40aade:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40aae2:	ff d0                	callq  *%rax
  40aae4:	48 8b bc 24 80 03 00 	mov    0x380(%rsp),%rdi
  40aaeb:	00 
  40aaec:	48 85 ff             	test   %rdi,%rdi
  40aaef:	74 10                	je     40ab01 <main+0xe11>
  40aaf1:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40aaf8:	ff ff ff 
  40aafb:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40aaff:	ff d0                	callq  *%rax
  40ab01:	48 8b bc 24 60 03 00 	mov    0x360(%rsp),%rdi
  40ab08:	00 
  40ab09:	48 85 ff             	test   %rdi,%rdi
  40ab0c:	74 10                	je     40ab1e <main+0xe2e>
  40ab0e:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40ab15:	ff ff ff 
  40ab18:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ab1c:	ff d0                	callq  *%rax
  40ab1e:	8b ac 24 80 02 00 00 	mov    0x280(%rsp),%ebp
  40ab25:	4c 8b ac 24 88 02 00 	mov    0x288(%rsp),%r13
  40ab2c:	00 
  40ab2d:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40ab34:	00 
    }
    return true;
  }

  void increment() {
    switch (m_type) {
  40ab35:	83 fd 01             	cmp    $0x1,%ebp
  40ab38:	0f 84 a2 05 00 00    	je     40b0e0 <main+0x13f0>
  40ab3e:	83 fd 02             	cmp    $0x2,%ebp
  40ab41:	75 73                	jne    40abb6 <main+0xec6>
  40ab43:	4c 8b a4 24 98 02 00 	mov    0x298(%rsp),%r12
  40ab4a:	00 
  40ab4b:	49 89 df             	mov    %rbx,%r15
  40ab4e:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40ab53:	ff d0                	callq  *%rax
    }
    return value_type();
  }

  MapIter increment_until_defined(MapIter it) {
    while (it != m_mapEnd && !is_defined(it))
  40ab55:	4c 39 e0             	cmp    %r12,%rax
  40ab58:	74 59                	je     40abb3 <main+0xec3>
  40ab5a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40ab5e:	48 8b 12             	mov    (%rdx),%rdx
  40ab61:	48 85 d2             	test   %rdx,%rdx
  40ab64:	0f 84 0c 1e 00 00    	je     40c976 <main+0x2c86>
  40ab6a:	48 8b 12             	mov    (%rdx),%rdx
  40ab6d:	48 85 d2             	test   %rdx,%rdx
  40ab70:	0f 84 f1 1d 00 00    	je     40c967 <main+0x2c77>
  40ab76:	48 89 c7             	mov    %rax,%rdi
  40ab79:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
  40ab7e:	eb 1f                	jmp    40ab9f <main+0xeaf>
  40ab80:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40ab84:	48 8b 12             	mov    (%rdx),%rdx
  40ab87:	48 85 d2             	test   %rdx,%rdx
  40ab8a:	0f 84 e6 1d 00 00    	je     40c976 <main+0x2c86>
  40ab90:	48 8b 12             	mov    (%rdx),%rdx
  40ab93:	48 89 c7             	mov    %rax,%rdi
  40ab96:	48 85 d2             	test   %rdx,%rdx
  40ab99:	0f 84 c8 1d 00 00    	je     40c967 <main+0x2c77>
      ++it;
    return it;
  }

  bool is_defined(MapIter it) const {
    return it->first->is_defined() && it->second->is_defined();
  40ab9f:	80 3a 00             	cmpb   $0x0,(%rdx)
  40aba2:	0f 85 08 05 00 00    	jne    40b0b0 <main+0x13c0>
  40aba8:	49 89 df             	mov    %rbx,%r15
  40abab:	41 ff d6             	callq  *%r14
    while (it != m_mapEnd && !is_defined(it))
  40abae:	4c 39 e0             	cmp    %r12,%rax
  40abb1:	75 cd                	jne    40ab80 <main+0xe90>
        m_mapIt = increment_until_defined(m_mapIt);
  40abb3:	4c 89 e7             	mov    %r12,%rdi
    if (m_type != rhs.m_type)
  40abb6:	39 ac 24 b0 02 00 00 	cmp    %ebp,0x2b0(%rsp)
        m_pMemory(rhs.m_pMemory) {}

 private:
  friend class boost::iterator_core_access;

  void increment() { this->base_reference() = boost::next(this->base()); }
  40abbd:	4c 89 ac 24 88 02 00 	mov    %r13,0x288(%rsp)
  40abc4:	00 
  40abc5:	48 89 bc 24 90 02 00 	mov    %rdi,0x290(%rsp)
  40abcc:	00 
  40abcd:	0f 85 dd fc ff ff    	jne    40a8b0 <main+0xbc0>
    switch (m_type) {
  40abd3:	83 fd 01             	cmp    $0x1,%ebp
  40abd6:	0f 84 0d 05 00 00    	je     40b0e9 <main+0x13f9>
  40abdc:	83 fd 02             	cmp    $0x2,%ebp
  40abdf:	0f 84 2b 05 00 00    	je     40b110 <main+0x1420>
  40abe5:	48 8b bc 24 d8 02 00 	mov    0x2d8(%rsp),%rdi
  40abec:	00 
  40abed:	48 85 ff             	test   %rdi,%rdi
  40abf0:	74 10                	je     40ac02 <main+0xf12>
  40abf2:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40abf9:	ff ff ff 
  40abfc:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ac00:	ff d0                	callq  *%rax
  40ac02:	48 8b bc 24 a8 02 00 	mov    0x2a8(%rsp),%rdi
  40ac09:	00 
  40ac0a:	48 85 ff             	test   %rdi,%rdi
  40ac0d:	74 10                	je     40ac1f <main+0xf2f>
  40ac0f:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40ac16:	ff ff ff 
  40ac19:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ac1d:	ff d0                	callq  *%rax
  40ac1f:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  40ac26:	00 
  40ac27:	48 85 ff             	test   %rdi,%rdi
  40ac2a:	74 10                	je     40ac3c <main+0xf4c>
  40ac2c:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40ac33:	ff ff ff 
  40ac36:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ac3a:	ff d0                	callq  *%rax
  }

  for (const auto& node : config["agents"]) {
  40ac3c:	48 b8 66 82 df ff ff 	movabs $0xffffffffffdf8266,%rax
  40ac43:	ff ff ff 
  40ac46:	48 8d ac 24 a0 01 00 	lea    0x1a0(%rsp),%rbp
  40ac4d:	00 
  40ac4e:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  40ac55:	00 
  40ac56:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40ac5a:	48 b8 a0 be de ff ff 	movabs $0xffffffffffdebea0,%rax
  40ac61:	ff ff ff 
  40ac64:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40ac69:	48 b8 60 1e df ff ff 	movabs $0xffffffffffdf1e60,%rax
  40ac70:	ff ff ff 
  40ac73:	48 89 ef             	mov    %rbp,%rdi
  40ac76:	48 01 d8             	add    %rbx,%rax
  40ac79:	ff d0                	callq  *%rax
  40ac7b:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40ac82:	00 
  40ac83:	48 89 ee             	mov    %rbp,%rsi
  40ac86:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  40ac8b:	48 01 d8             	add    %rbx,%rax
  40ac8e:	ff d0                	callq  *%rax
  40ac90:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  40ac97:	00 
  40ac98:	48 89 ee             	mov    %rbp,%rsi
  40ac9b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40aca0:	48 01 d8             	add    %rbx,%rax
  40aca3:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  40aca5:	48 8d 84 24 00 02 00 	lea    0x200(%rsp),%rax
  40acac:	00 
  40acad:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40acb4:	00 
  40acb5:	48 8d 84 24 20 02 00 	lea    0x220(%rsp),%rax
  40acbc:	00 
  40acbd:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  40acc4:	00 
  40acc5:	48 8d 84 24 30 02 00 	lea    0x230(%rsp),%rax
  40accc:	00 
  40accd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    if (m_type != rhs.m_type)
  40acd2:	8b 84 24 e0 02 00 00 	mov    0x2e0(%rsp),%eax
  40acd9:	3b 84 24 b0 04 00 00 	cmp    0x4b0(%rsp),%eax
  40ace0:	0f 84 9d 05 00 00    	je     40b283 <main+0x1593>
  40ace6:	48 b8 10 f5 de ff ff 	movabs $0xffffffffffdef510,%rax
  40aced:	ff ff ff 
  40acf0:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40acf5:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40acfa:	48 01 d8             	add    %rbx,%rax
  40acfd:	ff d0                	callq  *%rax
}

// indexing
template <typename Key>
inline const Node Node::operator[](const Key& key) const {
  if (!m_isValid)
  40acff:	0f b6 84 24 b0 03 00 	movzbl 0x3b0(%rsp),%eax
  40ad06:	00 
  40ad07:	84 c0                	test   %al,%al
  40ad09:	88 44 24 58          	mov    %al,0x58(%rsp)
  40ad0d:	0f 84 06 24 00 00    	je     40d119 <main+0x3429>
    throw InvalidNode();
  EnsureNodeExists();
  40ad13:	48 b8 20 ff de ff ff 	movabs $0xffffffffffdeff20,%rax
  40ad1a:	ff ff ff 
  40ad1d:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40ad22:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  40ad29:	00 
  40ad2a:	48 01 d8             	add    %rbx,%rax
  40ad2d:	ff d0                	callq  *%rax
#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
        id_ = 0;
#endif
    }

    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40ad2f:	4c 8b a4 24 c0 03 00 	mov    0x3c0(%rsp),%r12
  40ad36:	00 
#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
        , id_(shared_count_id)
#endif
    {
        if( pi_ != 0 ) pi_->add_ref_copy();
  40ad37:	4d 85 e4             	test   %r12,%r12
  40ad3a:	74 07                	je     40ad43 <main+0x1053>
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  40ad3c:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
  40ad43:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  40ad4a:	00 
  40ad4b:	48 89 f8             	mov    %rdi,%rax
  40ad4e:	48 83 c0 10          	add    $0x10,%rax
  40ad52:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  40ad59:	00 
          _M_construct(__beg, __end, _Tag());
  40ad5a:	48 b8 72 82 df ff ff 	movabs $0xffffffffffdf8272,%rax
  40ad61:	ff ff ff 
  40ad64:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40ad68:	48 b8 6d 82 df ff ff 	movabs $0xffffffffffdf826d,%rax
  40ad6f:	ff ff ff 
  40ad72:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40ad76:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  40ad7d:	ff ff ff 
  40ad80:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40ad87:	00 
  40ad88:	48 01 d8             	add    %rbx,%rax
  40ad8b:	ff d0                	callq  *%rax
  40ad8d:	4d 85 e4             	test   %r12,%r12
  detail::node* value = static_cast<const detail::node&>(*m_pNode)
  40ad90:	48 8b 94 24 c8 03 00 	mov    0x3c8(%rsp),%rdx
  40ad97:	00 
  40ad98:	0f 84 ca 04 00 00    	je     40b268 <main+0x1578>
  40ad9e:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40ada3:	f0 83 00 01          	lock addl $0x1,(%rax)
  40ada7:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40adaa:	48 85 d2             	test   %rdx,%rdx
  40adad:	0f 84 c1 04 00 00    	je     40b274 <main+0x1584>
  40adb3:	f0 83 00 01          	lock addl $0x1,(%rax)
  40adb7:	48 8b 02             	mov    (%rdx),%rax
  40adba:	48 85 c0             	test   %rax,%rax
  40adbd:	0f 84 85 24 00 00    	je     40d248 <main+0x3558>

// indexing
template <typename Key>
inline node* node_data::get(const Key& key,
                            shared_memory_holder pMemory) const {
  switch (m_type) {
  40adc3:	8b 50 04             	mov    0x4(%rax),%edx
  40adc6:	83 fa 02             	cmp    $0x2,%edx
  40adc9:	0f 84 28 10 00 00    	je     40bdf7 <main+0x2107>
  40adcf:	0f 82 79 04 00 00    	jb     40b24e <main+0x155e>
  40add5:	83 fa 03             	cmp    $0x3,%edx
  40add8:	0f 85 22 0e 00 00    	jne    40bc00 <main+0x1f10>
  40adde:	4d 85 e4             	test   %r12,%r12
  40ade1:	0f 84 be 14 00 00    	je     40c2a5 <main+0x25b5>
  40ade7:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  40adee:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40adf5:	ff ff ff 
  40adf8:	31 ed                	xor    %ebp,%ebp
  40adfa:	4c 89 e7             	mov    %r12,%rdi
  40adfd:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ae01:	ff d0                	callq  *%rax
  40ae03:	4c 89 e7             	mov    %r12,%rdi
  40ae06:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  40ae0a:	41 ff d5             	callq  *%r13
  40ae0d:	4c 89 e7             	mov    %r12,%rdi
  40ae10:	41 ff d5             	callq  *%r13
	if (!_M_is_local())
  40ae13:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40ae1a:	00 
  40ae1b:	48 8b bc 24 00 02 00 	mov    0x200(%rsp),%rdi
  40ae22:	00 
  40ae23:	48 83 c0 10          	add    $0x10,%rax
  40ae27:	48 39 c7             	cmp    %rax,%rdi
  40ae2a:	74 12                	je     40ae3e <main+0x114e>
      { ::operator delete(__p); }
  40ae2c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40ae33:	ff ff ff 
  40ae36:	49 89 df             	mov    %rbx,%r15
  40ae39:	48 01 d8             	add    %rbx,%rax
  40ae3c:	ff d0                	callq  *%rax
  40ae3e:	4d 85 e4             	test   %r12,%r12
  40ae41:	74 13                	je     40ae56 <main+0x1166>
  40ae43:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40ae4a:	ff ff ff 
  40ae4d:	4c 89 e7             	mov    %r12,%rdi
  40ae50:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40ae54:	ff d0                	callq  *%rax
                            .get(detail::to_value(key), m_pMemory);
  if (!value) {
  40ae56:	48 85 ed             	test   %rbp,%rbp
  40ae59:	0f 84 8b 17 00 00    	je     40c5ea <main+0x28fa>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40ae5f:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40ae66:	00 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40ae67:	48 8b 94 24 b8 03 00 	mov    0x3b8(%rsp),%rdx
  40ae6e:	00 
        if( pi_ != 0 ) pi_->add_ref_copy();
  40ae6f:	48 85 ff             	test   %rdi,%rdi
  40ae72:	0f 84 e4 13 00 00    	je     40c25c <main+0x256c>
  40ae78:	48 8d 47 08          	lea    0x8(%rdi),%rax
  40ae7c:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  40ae80:	c6 84 24 c0 01 00 00 	movb   $0x1,0x1c0(%rsp)
  40ae87:	01 
  40ae88:	48 89 94 24 c8 01 00 	mov    %rdx,0x1c8(%rsp)
  40ae8f:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40ae90:	48 89 bc 24 d0 01 00 	mov    %rdi,0x1d0(%rsp)
  40ae97:	00 
  40ae98:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  40ae9c:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40aea3:	ff ff ff 
  40aea6:	48 89 ac 24 d8 01 00 	mov    %rbp,0x1d8(%rsp)
  40aead:	00 
  40aeae:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40aeb2:	ff d0                	callq  *%rax
  if (!m_isValid)
  40aeb4:	0f b6 84 24 b0 03 00 	movzbl 0x3b0(%rsp),%eax
  40aebb:	00 
  40aebc:	84 c0                	test   %al,%al
  40aebe:	88 84 24 a0 00 00 00 	mov    %al,0xa0(%rsp)
  40aec5:	0f 84 a8 22 00 00    	je     40d173 <main+0x3483>
  EnsureNodeExists();
  40aecb:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  40aed2:	00 
  40aed3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40aed8:	48 01 d8             	add    %rbx,%rax
  40aedb:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40aedd:	4c 8b a4 24 c0 03 00 	mov    0x3c0(%rsp),%r12
  40aee4:	00 
        if( pi_ != 0 ) pi_->add_ref_copy();
  40aee5:	4d 85 e4             	test   %r12,%r12
  40aee8:	74 07                	je     40aef1 <main+0x1201>
  40aeea:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
	: allocator_type(__a), _M_p(__dat) { }
  40aef1:	48 8d 84 24 40 02 00 	lea    0x240(%rsp),%rax
  40aef8:	00 
  40aef9:	48 89 c7             	mov    %rax,%rdi
  40aefc:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40af01:	48 8d 84 24 50 02 00 	lea    0x250(%rsp),%rax
  40af08:	00 
  40af09:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  40af10:	00 
          _M_construct(__beg, __end, _Tag());
  40af11:	48 b8 77 82 df ff ff 	movabs $0xffffffffffdf8277,%rax
  40af18:	ff ff ff 
  40af1b:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40af1f:	48 b8 73 82 df ff ff 	movabs $0xffffffffffdf8273,%rax
  40af26:	ff ff ff 
  40af29:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40af2d:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40af34:	00 
  40af35:	48 01 d8             	add    %rbx,%rax
  40af38:	ff d0                	callq  *%rax
  40af3a:	4d 85 e4             	test   %r12,%r12
  detail::node* value = static_cast<const detail::node&>(*m_pNode)
  40af3d:	48 8b 94 24 c8 03 00 	mov    0x3c8(%rsp),%rdx
  40af44:	00 
  40af45:	0f 84 00 13 00 00    	je     40c24b <main+0x255b>
  40af4b:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40af50:	f0 83 00 01          	lock addl $0x1,(%rax)
  40af54:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40af57:	48 85 d2             	test   %rdx,%rdx
  40af5a:	0f 84 14 03 00 00    	je     40b274 <main+0x1584>
  40af60:	f0 83 00 01          	lock addl $0x1,(%rax)
  40af64:	48 8b 02             	mov    (%rdx),%rax
  40af67:	48 85 c0             	test   %rax,%rax
  40af6a:	0f 84 d8 22 00 00    	je     40d248 <main+0x3558>
  40af70:	8b 50 04             	mov    0x4(%rax),%edx
  40af73:	83 fa 02             	cmp    $0x2,%edx
  40af76:	0f 84 64 13 00 00    	je     40c2e0 <main+0x25f0>
  40af7c:	0f 82 cf 0e 00 00    	jb     40be51 <main+0x2161>
  40af82:	83 fa 03             	cmp    $0x3,%edx
  40af85:	0f 85 b8 13 00 00    	jne    40c343 <main+0x2653>
  40af8b:	4d 85 e4             	test   %r12,%r12
  40af8e:	0f 84 18 13 00 00    	je     40c2ac <main+0x25bc>
  40af94:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  40af9b:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40afa2:	ff ff ff 
  40afa5:	31 ed                	xor    %ebp,%ebp
  40afa7:	4c 89 e7             	mov    %r12,%rdi
  40afaa:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40afae:	ff d0                	callq  *%rax
  40afb0:	e9 ad 0e 00 00       	jmpq   40be62 <main+0x2172>
      std::cout << desc << "\n";
  40afb5:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  40afbc:	ff ff ff 
  40afbf:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  40afc4:	49 89 df             	mov    %rbx,%r15
  40afc7:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  40afcb:	48 b8 00 e4 dd ff ff 	movabs $0xffffffffffdde400,%rax
  40afd2:	ff ff ff 
  40afd5:	48 01 d8             	add    %rbx,%rax
  40afd8:	ff d0                	callq  *%rax
  40afda:	48 ba c1 80 df ff ff 	movabs $0xffffffffffdf80c1,%rdx
  40afe1:	ff ff ff 
  40afe4:	48 89 c7             	mov    %rax,%rdi
  40afe7:	48 b8 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rax
  40afee:	ff ff ff 
  40aff1:	48 8d 34 13          	lea    (%rbx,%rdx,1),%rsi
  40aff5:	48 01 d8             	add    %rbx,%rax
  40aff8:	ff d0                	callq  *%rax
      return 0;
  40affa:	48 b8 80 51 df ff ff 	movabs $0xffffffffffdf5180,%rax
  40b001:	ff ff ff 
  40b004:	31 ed                	xor    %ebp,%ebp
  40b006:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b00b:	48 01 d8             	add    %rbx,%rax
  40b00e:	ff d0                	callq  *%rax
	if (!_M_is_local())
  40b010:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  40b015:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  40b01c:	00 
  40b01d:	48 83 c0 10          	add    $0x10,%rax
  40b021:	48 39 c7             	cmp    %rax,%rdi
  40b024:	74 12                	je     40b038 <main+0x1348>
  40b026:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40b02d:	ff ff ff 
  40b030:	49 89 df             	mov    %rbx,%r15
  40b033:	48 01 d8             	add    %rbx,%rax
  40b036:	ff d0                	callq  *%rax
  40b038:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  40b03d:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  40b044:	00 
  40b045:	48 83 c0 10          	add    $0x10,%rax
  40b049:	48 39 c7             	cmp    %rax,%rdi
  40b04c:	74 12                	je     40b060 <main+0x1370>
  40b04e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40b055:	ff ff ff 
  40b058:	49 89 df             	mov    %rbx,%r15
  40b05b:	48 01 d8             	add    %rbx,%rax
  40b05e:	ff d0                	callq  *%rax
  po::options_description desc("Allowed options");
  40b060:	48 b8 10 b9 de ff ff 	movabs $0xffffffffffdeb910,%rax
  40b067:	ff ff ff 
  40b06a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40b06f:	48 01 d8             	add    %rbx,%rax
  40b072:	ff d0                	callq  *%rax
  } else {
    std::cout << "Planning NOT successful!" << std::endl;
  }

  return 0;
}
  40b074:	48 81 c4 b8 06 00 00 	add    $0x6b8,%rsp
  40b07b:	89 e8                	mov    %ebp,%eax
  40b07d:	5b                   	pop    %rbx
  40b07e:	5d                   	pop    %rbp
  40b07f:	41 5c                	pop    %r12
  40b081:	41 5d                	pop    %r13
  40b083:	41 5e                	pop    %r14
  40b085:	41 5f                	pop    %r15
  40b087:	c3                   	retq   
  40b088:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40b08f:	00 
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
	return bool(std::get<__i>(__t) == std::get<__i>(__u))
	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
  40b090:	44 3b 69 08          	cmp    0x8(%rcx),%r13d
  40b094:	0f 85 08 f9 ff ff    	jne    40a9a2 <main+0xcb2>
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  40b09a:	44 3b 71 0c          	cmp    0xc(%rcx),%r14d
  40b09e:	0f 85 fe f8 ff ff    	jne    40a9a2 <main+0xcb2>
  40b0a4:	e9 e4 f9 ff ff       	jmpq   40aa8d <main+0xd9d>
  40b0a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40b0b0:	48 8b 47 28          	mov    0x28(%rdi),%rax
  40b0b4:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  40b0b7:	48 85 c0             	test   %rax,%rax
  40b0ba:	0f 84 b6 18 00 00    	je     40c976 <main+0x2c86>
  40b0c0:	48 8b 00             	mov    (%rax),%rax
  40b0c3:	48 85 c0             	test   %rax,%rax
  40b0c6:	0f 84 9b 18 00 00    	je     40c967 <main+0x2c77>
    return it->first->is_defined() && it->second->is_defined();
  40b0cc:	80 38 00             	cmpb   $0x0,(%rax)
  40b0cf:	0f 84 d3 fa ff ff    	je     40aba8 <main+0xeb8>
  40b0d5:	49 89 fc             	mov    %rdi,%r12
  40b0d8:	e9 d6 fa ff ff       	jmpq   40abb3 <main+0xec3>
  40b0dd:	0f 1f 00             	nopl   (%rax)
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
  40b0e0:	49 83 c5 08          	add    $0x8,%r13
  40b0e4:	e9 cd fa ff ff       	jmpq   40abb6 <main+0xec6>
  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
  40b0e9:	48 8b 84 24 b8 02 00 	mov    0x2b8(%rsp),%rax
  40b0f0:	00 
  40b0f1:	48 39 84 24 88 02 00 	cmp    %rax,0x288(%rsp)
  40b0f8:	00 
  40b0f9:	0f 94 c0             	sete   %al
  for (const auto& node : config["map"]["obstacles"]) {
  40b0fc:	84 c0                	test   %al,%al
  40b0fe:	0f 84 ac f7 ff ff    	je     40a8b0 <main+0xbc0>
  40b104:	e9 dc fa ff ff       	jmpq   40abe5 <main+0xef5>
  40b109:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { return _M_node == __x._M_node; }
  40b110:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
  40b117:	00 
  40b118:	48 39 84 24 90 02 00 	cmp    %rax,0x290(%rsp)
  40b11f:	00 
  40b120:	0f 94 c0             	sete   %al
  40b123:	eb d7                	jmp    40b0fc <main+0x140c>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40b125:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  40b129:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  40b12c:	48 85 c0             	test   %rax,%rax
  40b12f:	0f 84 52 f3 ff ff    	je     40a487 <main+0x797>
            base.manager(functor, functor, destroy_functor_tag);
  40b135:	48 8d bc 24 18 03 00 	lea    0x318(%rsp),%rdi
  40b13c:	00 
  40b13d:	ba 02 00 00 00       	mov    $0x2,%edx
  40b142:	48 89 fe             	mov    %rdi,%rsi
  40b145:	ff d0                	callq  *%rax
  40b147:	e9 3b f3 ff ff       	jmpq   40a487 <main+0x797>
	  __node->_M_nxt = _M_before_begin._M_nxt;
  40b14c:	48 8b 84 24 20 03 00 	mov    0x320(%rsp),%rax
  40b153:	00 
	  _M_before_begin._M_nxt = __node;
  40b154:	48 89 ac 24 20 03 00 	mov    %rbp,0x320(%rsp)
  40b15b:	00 
	  if (__node->_M_nxt)
  40b15c:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  40b15f:	48 89 45 00          	mov    %rax,0x0(%rbp)
	  if (__node->_M_nxt)
  40b163:	74 12                	je     40b177 <main+0x1487>
    { return __num % __den; }
  40b165:	48 8b 40 10          	mov    0x10(%rax),%rax
  40b169:	31 d2                	xor    %edx,%edx
  40b16b:	48 f7 b4 24 18 03 00 	divq   0x318(%rsp)
  40b172:	00 
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  40b173:	48 89 2c d6          	mov    %rbp,(%rsi,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  40b177:	48 8b 04 24          	mov    (%rsp),%rax
  40b17b:	48 83 c0 10          	add    $0x10,%rax
  40b17f:	48 89 01             	mov    %rax,(%rcx)
  40b182:	e9 fd f8 ff ff       	jmpq   40aa84 <main+0xd94>
  40b187:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40b18b:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40b190:	49 89 df             	mov    %rbx,%r15
            boost::throw_exception(bad_lexical_cast());
        }
#else
        template <class S, class T>
        inline void throw_bad_cast() {
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  40b193:	48 8d ac 24 40 02 00 	lea    0x240(%rsp),%rbp
  40b19a:	00 
  40b19b:	48 83 c0 18          	add    $0x18,%rax
  40b19f:	49 8d 7e 70          	lea    0x70(%r14),%rdi
  40b1a3:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  40b1aa:	00 
  40b1ab:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40b1b2:	ff ff ff 
  40b1b5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40b1b9:	48 83 c0 10          	add    $0x10,%rax
  40b1bd:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40b1c4:	00 
  40b1c5:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  40b1cc:	ff ff ff 
  40b1cf:	48 01 d8             	add    %rbx,%rax
  40b1d2:	ff d0                	callq  *%rax
  40b1d4:	48 b8 50 fc ff ff ff 	movabs $0xfffffffffffffc50,%rax
  40b1db:	ff ff ff 
  40b1de:	4c 89 f7             	mov    %r14,%rdi
  40b1e1:	48 01 d8             	add    %rbx,%rax
  40b1e4:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40b1eb:	00 
  40b1ec:	48 b8 d0 bb de ff ff 	movabs $0xffffffffffdebbd0,%rax
  40b1f3:	ff ff ff 
  40b1f6:	48 01 d8             	add    %rbx,%rax
  40b1f9:	ff d0                	callq  *%rax
            : source(&source_type_arg), target(&target_type_arg)
  40b1fb:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  40b202:	ff ff ff 
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  40b205:	48 89 ef             	mov    %rbp,%rdi
            : source(&source_type_arg), target(&target_type_arg)
  40b208:	4c 8d 24 03          	lea    (%rbx,%rax,1),%r12
  40b20c:	48 b8 b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rax
  40b213:	ff ff ff 
  40b216:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40b21a:	4c 89 a4 24 40 02 00 	mov    %r12,0x240(%rsp)
  40b221:	00 
  40b222:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  40b229:	00 
  40b22a:	48 b8 60 f8 ff ff ff 	movabs $0xfffffffffffff860,%rax
  40b231:	ff ff ff 
  40b234:	48 01 d8             	add    %rbx,%rax
  40b237:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  40b23e:	00 
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  40b23f:	48 b8 60 0d df ff ff 	movabs $0xffffffffffdf0d60,%rax
  40b246:	ff ff ff 
  40b249:	48 01 d8             	add    %rbx,%rax
  40b24c:	ff d0                	callq  *%rax
    case NodeType::Map:
      break;
    case NodeType::Undefined:
    case NodeType::Null:
      return NULL;
  40b24e:	31 ed                	xor    %ebp,%ebp
  40b250:	4d 85 e4             	test   %r12,%r12
  40b253:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40b25a:	ff ff ff 
  40b25d:	0f 85 a0 fb ff ff    	jne    40ae03 <main+0x1113>
  40b263:	e9 ab fb ff ff       	jmpq   40ae13 <main+0x1123>
  40b268:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40b26b:	48 85 d2             	test   %rdx,%rdx
  40b26e:	0f 85 43 fb ff ff    	jne    40adb7 <main+0x10c7>
  40b274:	48 b8 38 ec dd ff ff 	movabs $0xffffffffffddec38,%rax
  40b27b:	ff ff ff 
  40b27e:	48 01 d8             	add    %rbx,%rax
  40b281:	ff d0                	callq  *%rax
    switch (m_type) {
  40b283:	83 f8 01             	cmp    $0x1,%eax
  40b286:	0f 84 f9 0f 00 00    	je     40c285 <main+0x2595>
  40b28c:	83 f8 02             	cmp    $0x2,%eax
  40b28f:	0f 84 3d 13 00 00    	je     40c5d2 <main+0x28e2>
  40b295:	48 8b bc 24 d8 04 00 	mov    0x4d8(%rsp),%rdi
  40b29c:	00 
  40b29d:	48 85 ff             	test   %rdi,%rdi
  40b2a0:	74 0f                	je     40b2b1 <main+0x15c1>
  40b2a2:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40b2a9:	ff ff ff 
  40b2ac:	48 01 d8             	add    %rbx,%rax
  40b2af:	ff d0                	callq  *%rax
  40b2b1:	48 8b bc 24 08 03 00 	mov    0x308(%rsp),%rdi
  40b2b8:	00 
  40b2b9:	48 85 ff             	test   %rdi,%rdi
  40b2bc:	74 0f                	je     40b2cd <main+0x15dd>
  40b2be:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40b2c5:	ff ff ff 
  40b2c8:	48 01 d8             	add    %rbx,%rax
  40b2cb:	ff d0                	callq  *%rax
  40b2cd:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  40b2d4:	00 
  40b2d5:	48 85 ff             	test   %rdi,%rdi
  40b2d8:	74 0f                	je     40b2e9 <main+0x15f9>
  40b2da:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40b2e1:	ff ff ff 
  40b2e4:	48 01 d8             	add    %rbx,%rax
  40b2e7:	ff d0                	callq  *%rax

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  40b2e9:	48 8b ac 24 c8 00 00 	mov    0xc8(%rsp),%rbp
  40b2f0:	00 
  40b2f1:	48 2b ac 24 c0 00 00 	sub    0xc0(%rsp),%rbp
  40b2f8:	00 
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  40b2f9:	48 c7 84 24 e0 02 00 	movq   $0x0,0x2e0(%rsp)
  40b300:	00 00 00 00 00 
  40b305:	48 c7 84 24 e8 02 00 	movq   $0x0,0x2e8(%rsp)
  40b30c:	00 00 00 00 00 
  40b311:	48 c7 84 24 f0 02 00 	movq   $0x0,0x2f0(%rsp)
  40b318:	00 00 00 00 00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  40b31d:	48 89 e8             	mov    %rbp,%rax
  40b320:	48 c1 f8 03          	sar    $0x3,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  40b324:	48 85 c0             	test   %rax,%rax
  40b327:	0f 84 48 1a 00 00    	je     40cd75 <main+0x3085>
	if (__n > this->max_size())
  40b32d:	48 ba ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rdx
  40b334:	ff ff 1f 
  40b337:	48 39 d0             	cmp    %rdx,%rax
  40b33a:	0f 87 14 1a 00 00    	ja     40cd54 <main+0x3064>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40b340:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40b345:	48 be a0 be de ff ff 	movabs $0xffffffffffdebea0,%rsi
  40b34c:	ff ff ff 
  40b34f:	48 89 ef             	mov    %rbp,%rdi
  40b352:	49 89 df             	mov    %rbx,%r15
  40b355:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  40b35a:	48 01 d8             	add    %rbx,%rax
  40b35d:	ff d0                	callq  *%rax
  40b35f:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  40b366:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  40b367:	48 01 c5             	add    %rax,%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
  40b36a:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  40b371:	00 
	this->_M_impl._M_finish = this->_M_impl._M_start;
  40b372:	48 89 84 24 e8 02 00 	mov    %rax,0x2e8(%rsp)
  40b379:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  40b37a:	48 89 ac 24 f0 02 00 	mov    %rbp,0x2f0(%rsp)
  40b381:	00 
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  40b382:	48 89 c1             	mov    %rax,%rcx
  40b385:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  40b38c:	00 
  40b38d:	48 89 fe             	mov    %rdi,%rsi
  40b390:	eb 13                	jmp    40b3a5 <main+0x16b5>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  40b392:	48 85 c9             	test   %rcx,%rcx
  40b395:	74 06                	je     40b39d <main+0x16ad>
  40b397:	4c 8b 06             	mov    (%rsi),%r8
  40b39a:	4c 89 01             	mov    %r8,(%rcx)
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
  40b39d:	48 83 c1 08          	add    $0x8,%rcx
  40b3a1:	48 83 c6 08          	add    $0x8,%rsi
  40b3a5:	48 39 f2             	cmp    %rsi,%rdx
  40b3a8:	75 e8                	jne    40b392 <main+0x16a2>
      { this->_M_impl._M_finish =
  40b3aa:	48 29 fa             	sub    %rdi,%rdx
      _M_rehash_policy(__ht._M_rehash_policy)
  40b3ad:	48 c7 84 24 b0 04 00 	movq   $0x0,0x4b0(%rsp)
  40b3b4:	00 00 00 00 00 
    _Hash_node_base() noexcept : _M_nxt() { }
  40b3b9:	48 c7 84 24 c0 04 00 	movq   $0x0,0x4c0(%rsp)
  40b3c0:	00 00 00 00 00 
  40b3c5:	48 01 d0             	add    %rdx,%rax
  40b3c8:	48 8b 94 24 38 03 00 	mov    0x338(%rsp),%rdx
  40b3cf:	00 
  40b3d0:	48 c7 84 24 e0 04 00 	movq   $0x0,0x4e0(%rsp)
  40b3d7:	00 00 00 00 00 
  40b3dc:	48 89 84 24 e8 02 00 	mov    %rax,0x2e8(%rsp)
  40b3e3:	00 
  40b3e4:	48 8b 84 24 18 03 00 	mov    0x318(%rsp),%rax
  40b3eb:	00 
      _M_assign(__ht,
  40b3ec:	48 8b 34 24          	mov    (%rsp),%rsi
      _M_rehash_policy(__ht._M_rehash_policy)
  40b3f0:	48 89 94 24 d8 04 00 	mov    %rdx,0x4d8(%rsp)
  40b3f7:	00 
      _M_assign(__ht,
  40b3f8:	48 8d 94 24 00 02 00 	lea    0x200(%rsp),%rdx
  40b3ff:	00 
      _M_rehash_policy(__ht._M_rehash_policy)
  40b400:	48 89 84 24 b8 04 00 	mov    %rax,0x4b8(%rsp)
  40b407:	00 
  40b408:	48 8b 84 24 28 03 00 	mov    0x328(%rsp),%rax
  40b40f:	00 
  40b410:	48 89 84 24 c8 04 00 	mov    %rax,0x4c8(%rsp)
  40b417:	00 
  40b418:	48 8b 84 24 30 03 00 	mov    0x330(%rsp),%rax
  40b41f:	00 
  40b420:	48 89 84 24 d0 04 00 	mov    %rax,0x4d0(%rsp)
  40b427:	00 
      _M_assign(__ht,
  40b428:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40b42d:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  40b434:	00 
  40b435:	48 89 c7             	mov    %rax,%rdi
  40b438:	48 b8 f0 ee de ff ff 	movabs $0xffffffffffdeeef0,%rax
  40b43f:	ff ff ff 
  40b442:	48 01 d8             	add    %rbx,%rax
  40b445:	ff d0                	callq  *%rax
        m_lowLevelExpanded(0) {}


  void init(size_t dimx, size_t dimy, std::unordered_set<Location> obstacles,
              std::vector<Location> goals) {
		m_dimx = dimx;
  40b447:	8b 84 24 a8 00 00 00 	mov    0xa8(%rsp),%eax
  40b44e:	48 bd 00 bf 84 01 00 	movabs $0x184bf00,%rbp
  40b455:	00 00 00 
      if (_M_bucket_count != __ht._M_bucket_count)
  40b458:	48 8b bc 24 b8 04 00 	mov    0x4b8(%rsp),%rdi
  40b45f:	00 
      std::size_t __former_bucket_count = _M_bucket_count;
  40b460:	4c 8b 6c 1d 28       	mov    0x28(%rbp,%rbx,1),%r13
  40b465:	4c 8b 74 1d 48       	mov    0x48(%rbp,%rbx,1),%r14
  40b46a:	89 44 1d 18          	mov    %eax,0x18(%rbp,%rbx,1)
		m_dimy = dimy;
  40b46e:	8b 84 24 ac 00 00 00 	mov    0xac(%rsp),%eax
      if (_M_bucket_count != __ht._M_bucket_count)
  40b475:	49 39 fd             	cmp    %rdi,%r13
  40b478:	89 44 1d 1c          	mov    %eax,0x1c(%rbp,%rbx,1)
  40b47c:	0f 84 92 18 00 00    	je     40cd14 <main+0x3024>
	if (__builtin_expect(__n == 1, false))
  40b482:	48 83 ff 01          	cmp    $0x1,%rdi
	  __former_buckets = _M_buckets;
  40b486:	4c 8b 64 1d 20       	mov    0x20(%rbp,%rbx,1),%r12
	if (__builtin_expect(__n == 1, false))
  40b48b:	0f 84 68 18 00 00    	je     40ccf9 <main+0x3009>
	return __hashtable_alloc::_M_allocate_buckets(__n);
  40b491:	48 b8 70 2d de ff ff 	movabs $0xffffffffffde2d70,%rax
  40b498:	ff ff ff 
  40b49b:	48 01 d8             	add    %rbx,%rax
  40b49e:	ff d0                	callq  *%rax
  40b4a0:	48 8b bc 24 b8 04 00 	mov    0x4b8(%rsp),%rdi
  40b4a7:	00 
	  _M_buckets = _M_allocate_buckets(__ht._M_bucket_count);
  40b4a8:	48 89 44 1d 20       	mov    %rax,0x20(%rbp,%rbx,1)
	  _M_bucket_count = __ht._M_bucket_count;
  40b4ad:	48 89 7c 1d 28       	mov    %rdi,0x28(%rbp,%rbx,1)
	  _M_element_count = __ht._M_element_count;
  40b4b2:	48 8b 84 24 c8 04 00 	mov    0x4c8(%rsp),%rax
  40b4b9:	00 
	  _M_rehash_policy = __ht._M_rehash_policy;
  40b4ba:	48 8b 94 24 d8 04 00 	mov    0x4d8(%rsp),%rdx
  40b4c1:	00 
	  _M_assign(__ht,
  40b4c2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
	  _M_element_count = __ht._M_element_count;
  40b4c7:	48 89 44 1d 38       	mov    %rax,0x38(%rbp,%rbx,1)
	  _M_rehash_policy = __ht._M_rehash_policy;
  40b4cc:	48 8b 84 24 d0 04 00 	mov    0x4d0(%rsp),%rax
  40b4d3:	00 
  40b4d4:	48 89 54 1d 48       	mov    %rdx,0x48(%rbp,%rbx,1)
	  _M_assign(__ht,
  40b4d9:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
	  _M_rehash_policy = __ht._M_rehash_policy;
  40b4de:	48 89 44 1d 40       	mov    %rax,0x40(%rbp,%rbx,1)
  40b4e3:	48 8b 44 1d 30       	mov    0x30(%rbp,%rbx,1),%rax
	  _M_before_begin._M_nxt = nullptr;
  40b4e8:	48 c7 44 1d 30 00 00 	movq   $0x0,0x30(%rbp,%rbx,1)
  40b4ef:	00 00 
	: _M_nodes(__nodes), _M_h(__h) { }
  40b4f1:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  40b4f8:	00 
  40b4f9:	48 b8 20 bf 84 01 00 	movabs $0x184bf20,%rax
  40b500:	00 00 00 
  40b503:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
	  _M_assign(__ht,
  40b507:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40b50c:	48 89 bc 24 b8 02 00 	mov    %rdi,0x2b8(%rsp)
  40b513:	00 
  40b514:	48 89 84 24 80 02 00 	mov    %rax,0x280(%rsp)
  40b51b:	00 
  40b51c:	48 b8 60 dd de ff ff 	movabs $0xffffffffffdedd60,%rax
  40b523:	ff ff ff 
  40b526:	48 01 d8             	add    %rbx,%rax
  40b529:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  40b52b:	48 b8 50 bf 84 01 00 	movabs $0x184bf50,%rax
  40b532:	00 00 00 
  40b535:	48 01 d8             	add    %rbx,%rax
  40b538:	49 39 c4             	cmp    %rax,%r12
  40b53b:	74 1a                	je     40b557 <main+0x1867>
  40b53d:	4d 85 e4             	test   %r12,%r12
  40b540:	74 15                	je     40b557 <main+0x1867>
      { ::operator delete(__p); }
  40b542:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40b549:	ff ff ff 
  40b54c:	4c 89 e7             	mov    %r12,%rdi
  40b54f:	49 89 df             	mov    %rbx,%r15
  40b552:	48 01 d8             	add    %rbx,%rax
  40b555:	ff d0                	callq  *%rax
      { _M_h._M_deallocate_nodes(_M_nodes); }
  40b557:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40b55e:	00 
  40b55f:	eb 18                	jmp    40b579 <main+0x1889>
  40b561:	4c 8b 27             	mov    (%rdi),%r12
  40b564:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40b56b:	ff ff ff 
  40b56e:	49 89 df             	mov    %rbx,%r15
  40b571:	48 01 d8             	add    %rbx,%rax
  40b574:	ff d0                	callq  *%rax
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
    {
      while (__n)
	{
	  __node_type* __tmp = __n;
	  __n = __n->_M_next();
  40b576:	4c 89 e7             	mov    %r12,%rdi
      while (__n)
  40b579:	48 85 ff             	test   %rdi,%rdi
  40b57c:	75 e3                	jne    40b561 <main+0x1871>
		m_obstacles = obstacles;
		m_goals = goals;
  40b57e:	48 b8 50 bf de ff ff 	movabs $0xffffffffffdebf50,%rax
  40b585:	ff ff ff 
  40b588:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40b58d:	48 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%rdi
  40b592:	48 01 d8             	add    %rbx,%rax
  40b595:	ff d0                	callq  *%rax
   */
  template<class _Value,
	   class _Hash = hash<_Value>,
	   class _Pred = std::equal_to<_Value>,
	   class _Alloc = std::allocator<_Value> >
    class unordered_set
  40b597:	48 b8 a0 be de ff ff 	movabs $0xffffffffffdebea0,%rax
  40b59e:	ff ff ff 
  40b5a1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b5a6:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40b5ab:	48 01 d8             	add    %rbx,%rax
  40b5ae:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40b5b0:	48 8b bc 24 e0 02 00 	mov    0x2e0(%rsp),%rdi
  40b5b7:	00 
	if (__p)
  40b5b8:	48 85 ff             	test   %rdi,%rdi
  40b5bb:	74 12                	je     40b5cf <main+0x18df>
  40b5bd:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40b5c4:	ff ff ff 
  40b5c7:	49 89 df             	mov    %rbx,%r15
  40b5ca:	48 01 d8             	add    %rbx,%rax
  40b5cd:	ff d0                	callq  *%rax
	g_w = w;
  40b5cf:	f3 0f 10 84 24 b4 00 	movss  0xb4(%rsp),%xmm0
  40b5d6:	00 00 
  40b5d8:	48 b8 c0 be 84 01 00 	movabs $0x184bec0,%rax
  40b5df:	00 00 00 

class Timer {
 public:
  Timer()
      : start_(std::chrono::high_resolution_clock::now()),
        end_(std::chrono::high_resolution_clock::now()) {}
  40b5e2:	49 bd b0 e3 dd ff ff 	movabs $0xffffffffffdde3b0,%r13
  40b5e9:	ff ff ff 
  40b5ec:	49 89 df             	mov    %rbx,%r15
  40b5ef:	f3 0f 11 04 03       	movss  %xmm0,(%rbx,%rax,1)
  40b5f4:	49 8d 6c 1d 00       	lea    0x0(%r13,%rbx,1),%rbp
  40b5f9:	45 31 e4             	xor    %r12d,%r12d
  40b5fc:	ff d5                	callq  *%rbp
  40b5fe:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40b603:	ff d5                	callq  *%rbp
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40b605:	48 bd 00 3e 85 01 00 	movabs $0x1853e00,%rbp
  40b60c:	00 00 00 
	                             __x);
	    ++this->_M_impl._M_finish;
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
  40b60f:	48 b8 c0 f0 de ff ff 	movabs $0xffffffffffdef0c0,%rax
  40b616:	ff ff ff 
  40b619:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  40b620:	00 
  40b621:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  40b628:	00 
  40b629:	4c 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%r15
  40b62e:	4c 8d 34 03          	lea    (%rbx,%rax,1),%r14
  40b632:	eb 35                	jmp    40b669 <main+0x1979>
      { return *(this->_M_impl._M_start + __n); }
  40b634:	49 6b f4 0c          	imul   $0xc,%r12,%rsi
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40b638:	48 8b 44 1d 08       	mov    0x8(%rbp,%rbx,1),%rax
      { return *(this->_M_impl._M_start + __n); }
  40b63d:	48 01 d6             	add    %rdx,%rsi
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40b640:	48 3b 44 1d 10       	cmp    0x10(%rbp,%rbx,1),%rax
  40b645:	0f 84 b3 12 00 00    	je     40c8fe <main+0x2c0e>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  40b64b:	48 85 c0             	test   %rax,%rax
  40b64e:	74 0c                	je     40b65c <main+0x196c>
  40b650:	48 8b 3e             	mov    (%rsi),%rdi
  40b653:	48 89 38             	mov    %rdi,(%rax)
  40b656:	8b 76 08             	mov    0x8(%rsi),%esi
  40b659:	89 70 08             	mov    %esi,0x8(%rax)
	    ++this->_M_impl._M_finish;
  40b65c:	48 83 c0 0c          	add    $0xc,%rax
  40b660:	48 89 44 1d 08       	mov    %rax,0x8(%rbp,%rbx,1)
  40b665:	49 83 c4 01          	add    $0x1,%r12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  40b669:	48 89 c8             	mov    %rcx,%rax
  40b66c:	48 be ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rsi
  40b673:	aa aa aa 
  40b676:	48 29 d0             	sub    %rdx,%rax
  40b679:	48 c1 f8 02          	sar    $0x2,%rax
  40b67d:	48 0f af c6          	imul   %rsi,%rax
	for (int i = 0; i < startStates.size(); ++i)
  40b681:	4c 39 e0             	cmp    %r12,%rax
  40b684:	77 ae                	ja     40b634 <main+0x1944>
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  40b686:	48 b8 78 82 df ff ff 	movabs $0xffffffffffdf8278,%rax
  40b68d:	ff ff ff 
	g_isNoConflict = false;
  40b690:	48 bd 80 bf 84 01 00 	movabs $0x184bf80,%rbp
  40b697:	00 00 00 
  40b69a:	48 ba 80 e3 dd ff ff 	movabs $0xffffffffffdde380,%rdx
  40b6a1:	ff ff ff 
  40b6a4:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b6a8:	c6 44 1d 00 00       	movb   $0x0,0x0(%rbp,%rbx,1)
  40b6ad:	bf 01 00 00 00       	mov    $0x1,%edi
  40b6b2:	49 89 df             	mov    %rbx,%r15
  40b6b5:	31 c0                	xor    %eax,%eax
  40b6b7:	48 01 da             	add    %rbx,%rdx
  40b6ba:	ff d2                	callq  *%rdx
	search(0);
  40b6bc:	48 b8 60 72 de ff ff 	movabs $0xffffffffffde7260,%rax
  40b6c3:	ff ff ff 
  40b6c6:	31 ff                	xor    %edi,%edi
  40b6c8:	48 01 d8             	add    %rbx,%rax
  40b6cb:	ff d0                	callq  *%rax
    // Run a spiller that doesn't delete any tasks
    // 1) to avoid unused function warnings
    // 2) to pre-populate the global offset table with
    //    functions so it isn't aborted.
    //    (e.g. new[], delete[], swarm::info if used)
    swarm::spiller(0, 0);
  40b6cd:	48 b8 c0 93 de ff ff 	movabs $0xffffffffffde93c0,%rax
  40b6d4:	ff ff ff 
  40b6d7:	31 f6                	xor    %esi,%esi
  40b6d9:	31 ff                	xor    %edi,%edi
  40b6db:	4c 8d 24 03          	lea    (%rbx,%rax,1),%r12
  40b6df:	41 ff d4             	callq  *%r12
    COMPILER_BARRIER();
}

static inline void sim_magic_op_3(uint64_t op, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  40b6e2:	48 b8 20 28 de ff ff 	movabs $0xffffffffffde2820,%rax
  40b6e9:	ff ff ff 
  40b6ec:	b9 03 08 00 00       	mov    $0x803,%ecx
  40b6f1:	4c 89 e7             	mov    %r12,%rdi
  40b6f4:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40b6f8:	48 b8 a0 32 de ff ff 	movabs $0xffffffffffde32a0,%rax
  40b6ff:	ff ff ff 
  40b702:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b706:	48 87 c9             	xchg   %rcx,%rcx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  40b709:	48 b8 b0 33 de ff ff 	movabs $0xffffffffffde33b0,%rax
  40b710:	ff ff ff 
  40b713:	b9 04 08 00 00       	mov    $0x804,%ecx
  40b718:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b71c:	48 b8 50 92 de ff ff 	movabs $0xffffffffffde9250,%rax
  40b723:	ff ff ff 
  40b726:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  40b72a:	48 87 c9             	xchg   %rcx,%rcx

namespace swarm {

static inline void run() {
    setup_task_handlers();
    launch_threads(pls_worker);
  40b72d:	48 b8 00 2e de ff ff 	movabs $0xffffffffffde2e00,%rax
  40b734:	ff ff ff 
  40b737:	48 01 d8             	add    %rbx,%rax
  40b73a:	ff d0                	callq  *%rax
	bool success = g_isNoConflict;
  40b73c:	0f b6 6c 1d 00       	movzbl 0x0(%rbp,%rbx,1),%ebp

  void reset() { start_ = std::chrono::high_resolution_clock::now(); }

  void stop() { end_ = std::chrono::high_resolution_clock::now(); }
  40b741:	49 01 dd             	add    %rbx,%r13
  40b744:	41 ff d5             	callq  *%r13
  40b747:	49 89 c6             	mov    %rax,%r14
  if (success) {
  40b74a:	40 84 ed             	test   %bpl,%bpl
  40b74d:	0f 84 45 15 00 00    	je     40cc98 <main+0x2fa8>
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
  40b753:	48 b8 7f 82 df ff ff 	movabs $0xffffffffffdf827f,%rax
  40b75a:	ff ff ff 
  40b75d:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  40b764:	ff ff ff 
  40b767:	ba 15 00 00 00       	mov    $0x15,%edx
  40b76c:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b770:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  40b777:	ff ff ff 
  40b77a:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  40b77e:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b783:	ff d0                	callq  *%rax
	return __pf(*this);
  40b785:	48 b8 d0 31 de ff ff 	movabs $0xffffffffffde31d0,%rax
  40b78c:	ff ff ff 
  40b78f:	48 01 d8             	add    %rbx,%rax
  40b792:	ff d0                	callq  *%rax
  40b794:	48 ba d0 c5 84 01 00 	movabs $0x184c5d0,%rdx
  40b79b:	00 00 00 
  40b79e:	31 c0                	xor    %eax,%eax
  40b7a0:	45 31 e4             	xor    %r12d,%r12d
  40b7a3:	45 31 ed             	xor    %r13d,%r13d
			cost += g_solution[i].cost;
  40b7a6:	48 01 da             	add    %rbx,%rdx
  40b7a9:	8b 0c 10             	mov    (%rax,%rdx,1),%ecx
  40b7ac:	41 01 cd             	add    %ecx,%r13d
  40b7af:	41 39 cc             	cmp    %ecx,%r12d
  40b7b2:	44 0f 4c e1          	cmovl  %ecx,%r12d
  40b7b6:	48 05 50 06 00 00    	add    $0x650,%rax
    for (int i = 0; i < ROBOT_NUMS; ++i) {
  40b7bc:	48 3d 40 7e 00 00    	cmp    $0x7e40,%rax
  40b7c2:	75 e5                	jne    40b7a9 <main+0x1ab9>
    std::ofstream out(outputFile);
  40b7c4:	48 b8 90 ea dd ff ff 	movabs $0xffffffffffddea90,%rax
  40b7cb:	ff ff ff 
  40b7ce:	ba 30 00 00 00       	mov    $0x30,%edx
  40b7d3:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  40b7d8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b7dd:	49 89 df             	mov    %rbx,%r15
  40b7e0:	48 01 d8             	add    %rbx,%rax
  40b7e3:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b7e5:	48 b8 95 82 df ff ff 	movabs $0xffffffffffdf8295,%rax
  40b7ec:	ff ff ff 
  40b7ef:	ba 0b 00 00 00       	mov    $0xb,%edx
  40b7f4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b7f9:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b7fd:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b802:	ff d0                	callq  *%rax
	return __pf(*this);
  40b804:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  40b80b:	ff ff ff 
  40b80e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b813:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  40b818:	48 01 d8             	add    %rbx,%rax
  40b81b:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b81d:	48 b8 a1 82 df ff ff 	movabs $0xffffffffffdf82a1,%rax
  40b824:	ff ff ff 
  40b827:	ba 08 00 00 00       	mov    $0x8,%edx
  40b82c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b831:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b835:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b83a:	ff d0                	callq  *%rax
    out << "  cost: " << cost << std::endl;
  40b83c:	44 89 ee             	mov    %r13d,%esi
  40b83f:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  40b844:	48 ba 00 ea dd ff ff 	movabs $0xffffffffffddea00,%rdx
  40b84b:	ff ff ff 
  40b84e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  40b853:	48 8d 04 1a          	lea    (%rdx,%rbx,1),%rax
  40b857:	4c 89 ef             	mov    %r13,%rdi
  40b85a:	ff d0                	callq  *%rax
	return __pf(*this);
  40b85c:	48 89 c7             	mov    %rax,%rdi
  40b85f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40b864:	48 01 d8             	add    %rbx,%rax
  40b867:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b869:	48 b8 aa 82 df ff ff 	movabs $0xffffffffffdf82aa,%rax
  40b870:	ff ff ff 
  40b873:	ba 0c 00 00 00       	mov    $0xc,%edx
  40b878:	4c 89 ef             	mov    %r13,%rdi
  40b87b:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b87f:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b884:	ff d0                	callq  *%rax
    out << "  makespan: " << makespan << std::endl;
  40b886:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  40b88b:	44 89 e6             	mov    %r12d,%esi
  40b88e:	4c 89 ef             	mov    %r13,%rdi
  40b891:	48 8d 04 1a          	lea    (%rdx,%rbx,1),%rax
  40b895:	ff d0                	callq  *%rax
	return __pf(*this);
  40b897:	4c 8b 64 24 68       	mov    0x68(%rsp),%r12
  40b89c:	48 89 c7             	mov    %rax,%rdi
  40b89f:	4c 89 e0             	mov    %r12,%rax
  40b8a2:	48 01 d8             	add    %rbx,%rax
  40b8a5:	ff d0                	callq  *%rax
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
  40b8a7:	4c 2b 74 24 08       	sub    0x8(%rsp),%r14
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
  40b8ac:	66 0f ef c0          	pxor   %xmm0,%xmm0
  40b8b0:	48 b8 30 96 df ff ff 	movabs $0xffffffffffdf9630,%rax
  40b8b7:	ff ff ff 
	__ostream_insert(__out, __s,
  40b8ba:	ba 0b 00 00 00       	mov    $0xb,%edx
  40b8bf:	4c 89 ef             	mov    %r13,%rdi
  40b8c2:	f2 49 0f 2a c6       	cvtsi2sd %r14,%xmm0
  40b8c7:	f2 0f 5e 04 18       	divsd  (%rax,%rbx,1),%xmm0
  40b8cc:	48 b8 b7 82 df ff ff 	movabs $0xffffffffffdf82b7,%rax
  40b8d3:	ff ff ff 
  40b8d6:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b8da:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b8df:	f2 0f 11 44 24 08    	movsd  %xmm0,0x8(%rsp)
  40b8e5:	ff d0                	callq  *%rax
      { return _M_insert(__f); }
  40b8e7:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  40b8ee:	ff ff ff 
  40b8f1:	f2 0f 10 44 24 08    	movsd  0x8(%rsp),%xmm0
  40b8f7:	4c 89 ef             	mov    %r13,%rdi
  40b8fa:	48 01 d8             	add    %rbx,%rax
  40b8fd:	ff d0                	callq  *%rax
	return __pf(*this);
  40b8ff:	48 89 c7             	mov    %rax,%rdi
  40b902:	4c 89 e0             	mov    %r12,%rax
  40b905:	48 01 d8             	add    %rbx,%rax
  40b908:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b90a:	48 b8 c3 82 df ff ff 	movabs $0xffffffffffdf82c3,%rax
  40b911:	ff ff ff 
  40b914:	ba 09 00 00 00       	mov    $0x9,%edx
  40b919:	4c 89 ef             	mov    %r13,%rdi
  40b91c:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b920:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b925:	ff d0                	callq  *%rax
	return __pf(*this);
  40b927:	4c 89 e0             	mov    %r12,%rax
  40b92a:	4c 89 ef             	mov    %r13,%rdi
  40b92d:	48 01 d8             	add    %rbx,%rax
  40b930:	ff d0                	callq  *%rax
  40b932:	48 b8 c4 bf 84 01 00 	movabs $0x184bfc4,%rax
  40b939:	00 00 00 
  40b93c:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  40b943:	00 00 
  40b945:	48 01 d8             	add    %rbx,%rax
  40b948:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  40b94d:	48 b8 cd 82 df ff ff 	movabs $0xffffffffffdf82cd,%rax
  40b954:	ff ff ff 
  40b957:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40b95e:	00 
	__ostream_insert(__out, __s,
  40b95f:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b964:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
  40b969:	48 b8 90 e3 dd ff ff 	movabs $0xffffffffffdde390,%rax
  40b970:	ff ff ff 
  40b973:	48 01 d8             	add    %rbx,%rax
  40b976:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
	__ostream_insert(__out, __s,
  40b97b:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40b982:	00 
  40b983:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40b988:	ba 07 00 00 00       	mov    $0x7,%edx
  40b98d:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  40b992:	49 89 df             	mov    %rbx,%r15
  40b995:	48 8d 34 18          	lea    (%rax,%rbx,1),%rsi
  40b999:	48 89 ef             	mov    %rbp,%rdi
  40b99c:	4c 89 f0             	mov    %r14,%rax
  40b99f:	ff d0                	callq  *%rax
      { return _M_insert(__n); }
  40b9a1:	48 b8 10 e6 dd ff ff 	movabs $0xffffffffffdde610,%rax
  40b9a8:	ff ff ff 
  40b9ab:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  40b9b0:	48 89 ef             	mov    %rbp,%rdi
  40b9b3:	48 01 d8             	add    %rbx,%rax
  40b9b6:	ff d0                	callq  *%rax
  40b9b8:	48 89 c5             	mov    %rax,%rbp
	__ostream_insert(__out, __s,
  40b9bb:	48 b8 cb 82 df ff ff 	movabs $0xffffffffffdf82cb,%rax
  40b9c2:	ff ff ff 
  40b9c5:	ba 01 00 00 00       	mov    $0x1,%edx
  40b9ca:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b9ce:	48 89 ef             	mov    %rbp,%rdi
  40b9d1:	4c 89 f0             	mov    %r14,%rax
  40b9d4:	ff d0                	callq  *%rax
	return __pf(*this);
  40b9d6:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40b9db:	48 89 ef             	mov    %rbp,%rdi
  40b9de:	48 01 d8             	add    %rbx,%rax
  40b9e1:	ff d0                	callq  *%rax
      for (int b = 0; b < g_solution[a].states_size; ++b) {
  40b9e3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  40b9e8:	48 83 b8 fc 03 00 00 	cmpq   $0x0,0x3fc(%rax)
  40b9ef:	00 
  40b9f0:	0f 84 96 11 00 00    	je     40cb8c <main+0x2e9c>
  40b9f6:	48 b8 d5 82 df ff ff 	movabs $0xffffffffffdf82d5,%rax
  40b9fd:	ff ff ff 
  40ba00:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
  40ba05:	48 c7 44 24 28 01 00 	movq   $0x1,0x28(%rsp)
  40ba0c:	00 00 
  40ba0e:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40ba13:	48 b8 40 81 de ff ff 	movabs $0xffffffffffde8140,%rax
  40ba1a:	ff ff ff 
  40ba1d:	48 01 d8             	add    %rbx,%rax
  40ba20:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40ba25:	e9 39 01 00 00       	jmpq   40bb63 <main+0x1e73>
  40ba2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40ba30:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    { return flush(__os.put(__os.widen('\n'))); }
  40ba34:	4c 89 e7             	mov    %r12,%rdi
  40ba37:	49 89 df             	mov    %rbx,%r15
  40ba3a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  40ba3f:	ff d0                	callq  *%rax
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
  40ba41:	48 bd 20 e6 dd ff ff 	movabs $0xffffffffffdde620,%rbp
  40ba48:	ff ff ff 
  40ba4b:	48 89 c7             	mov    %rax,%rdi
  40ba4e:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40ba53:	ff d0                	callq  *%rax
  40ba55:	49 89 c4             	mov    %rax,%r12
	__ostream_insert(__out, __s,
  40ba58:	48 b8 df 82 df ff ff 	movabs $0xffffffffffdf82df,%rax
  40ba5f:	ff ff ff 
  40ba62:	ba 09 00 00 00       	mov    $0x9,%edx
  40ba67:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40ba6b:	4c 89 e7             	mov    %r12,%rdi
  40ba6e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40ba73:	ff d0                	callq  *%rax
            << "      y: " << g_solution[a].states[b].state.y << std::endl
  40ba75:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40ba7a:	44 89 ee             	mov    %r13d,%esi
  40ba7d:	4c 89 e7             	mov    %r12,%rdi
  40ba80:	48 01 d8             	add    %rbx,%rax
  40ba83:	ff d0                	callq  *%rax
  40ba85:	49 89 c5             	mov    %rax,%r13
    { return flush(__os.put(__os.widen('\n'))); }
  40ba88:	48 8b 00             	mov    (%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40ba8b:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40ba8f:	4d 8b a4 05 f0 00 00 	mov    0xf0(%r13,%rax,1),%r12
  40ba96:	00 
      if (!__f)
  40ba97:	4d 85 e4             	test   %r12,%r12
  40ba9a:	0f 84 ca 11 00 00    	je     40cc6a <main+0x2f7a>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
  40baa0:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
  40baa6:	0f 84 a6 10 00 00    	je     40cb52 <main+0x2e62>
  40baac:	41 0f be 74 24 43    	movsbl 0x43(%r12),%esi
  40bab2:	4c 89 ef             	mov    %r13,%rdi
  40bab5:	49 89 df             	mov    %rbx,%r15
  40bab8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  40babd:	ff d0                	callq  *%rax
    { return __os.flush(); }
  40babf:	48 89 c7             	mov    %rax,%rdi
  40bac2:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40bac7:	ff d0                	callq  *%rax
  40bac9:	49 89 c4             	mov    %rax,%r12
	__ostream_insert(__out, __s,
  40bacc:	48 b8 e9 82 df ff ff 	movabs $0xffffffffffdf82e9,%rax
  40bad3:	ff ff ff 
  40bad6:	ba 09 00 00 00       	mov    $0x9,%edx
  40badb:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40badf:	4c 89 e7             	mov    %r12,%rdi
  40bae2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40bae7:	ff d0                	callq  *%rax
            << "      t: " << g_solution[a].states[b].cost << std::endl;
  40bae9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40baee:	8b 74 24 30          	mov    0x30(%rsp),%esi
  40baf2:	4c 89 e7             	mov    %r12,%rdi
  40baf5:	48 01 d8             	add    %rbx,%rax
  40baf8:	ff d0                	callq  *%rax
  40bafa:	49 89 c5             	mov    %rax,%r13
    { return flush(__os.put(__os.widen('\n'))); }
  40bafd:	48 8b 00             	mov    (%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40bb00:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40bb04:	4d 8b a4 05 f0 00 00 	mov    0xf0(%r13,%rax,1),%r12
  40bb0b:	00 
      if (!__f)
  40bb0c:	4d 85 e4             	test   %r12,%r12
  40bb0f:	0f 84 46 11 00 00    	je     40cc5b <main+0x2f6b>
  40bb15:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
  40bb1b:	0f 84 f7 0f 00 00    	je     40cb18 <main+0x2e28>
  40bb21:	41 0f be 74 24 43    	movsbl 0x43(%r12),%esi
  40bb27:	4c 89 ef             	mov    %r13,%rdi
  40bb2a:	49 89 df             	mov    %rbx,%r15
  40bb2d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  40bb32:	ff d0                	callq  *%rax
    { return __os.flush(); }
  40bb34:	48 89 c7             	mov    %rax,%rdi
  40bb37:	48 01 dd             	add    %rbx,%rbp
  40bb3a:	ff d5                	callq  *%rbp
  40bb3c:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
      for (int b = 0; b < g_solution[a].states_size; ++b) {
  40bb41:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  40bb46:	49 83 c6 10          	add    $0x10,%r14
  40bb4a:	48 89 f0             	mov    %rsi,%rax
  40bb4d:	48 83 c0 01          	add    $0x1,%rax
  40bb51:	48 39 b2 fc 03 00 00 	cmp    %rsi,0x3fc(%rdx)
  40bb58:	0f 86 2e 10 00 00    	jbe    40cb8c <main+0x2e9c>
  40bb5e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
            << "      t: " << g_solution[a].states[b].cost << std::endl;
  40bb63:	41 8b 46 08          	mov    0x8(%r14),%eax
	__ostream_insert(__out, __s,
  40bb67:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  40bb6c:	ba 09 00 00 00       	mov    $0x9,%edx
            << "      y: " << g_solution[a].states[b].state.y << std::endl
  40bb71:	45 8b 6e 04          	mov    0x4(%r14),%r13d
        out << "    - x: " << g_solution[a].states[b].state.x << std::endl
  40bb75:	41 8b 2e             	mov    (%r14),%ebp
  40bb78:	49 89 df             	mov    %rbx,%r15
            << "      t: " << g_solution[a].states[b].cost << std::endl;
  40bb7b:	89 44 24 30          	mov    %eax,0x30(%rsp)
  40bb7f:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  40bb84:	4c 89 e7             	mov    %r12,%rdi
  40bb87:	48 8d 34 18          	lea    (%rax,%rbx,1),%rsi
  40bb8b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40bb90:	ff d0                	callq  *%rax
        out << "    - x: " << g_solution[a].states[b].state.x << std::endl
  40bb92:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40bb97:	89 ee                	mov    %ebp,%esi
  40bb99:	4c 89 e7             	mov    %r12,%rdi
  40bb9c:	48 01 d8             	add    %rbx,%rax
  40bb9f:	ff d0                	callq  *%rax
  40bba1:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
  40bba4:	48 8b 00             	mov    (%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40bba7:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40bbab:	49 8b ac 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%rbp
  40bbb2:	00 
      if (!__f)
  40bbb3:	48 85 ed             	test   %rbp,%rbp
  40bbb6:	0f 84 90 10 00 00    	je     40cc4c <main+0x2f5c>
  40bbbc:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
  40bbc0:	0f 85 6a fe ff ff    	jne    40ba30 <main+0x1d40>
	  return _M_widen[static_cast<unsigned char>(__c)];
	this->_M_widen_init();
  40bbc6:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40bbcd:	ff ff ff 
  40bbd0:	48 89 ef             	mov    %rbp,%rdi
  40bbd3:	49 89 df             	mov    %rbx,%r15
  40bbd6:	48 01 d8             	add    %rbx,%rax
  40bbd9:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40bbdb:	48 8b 45 00          	mov    0x0(%rbp),%rax
  40bbdf:	be 0a 00 00 00       	mov    $0xa,%esi
  40bbe4:	48 8b 40 30          	mov    0x30(%rax),%rax
  40bbe8:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  40bbed:	0f 84 41 fe ff ff    	je     40ba34 <main+0x1d44>
  40bbf3:	48 89 ef             	mov    %rbp,%rdi
  40bbf6:	ff d0                	callq  *%rax
  40bbf8:	0f be f0             	movsbl %al,%esi
  40bbfb:	e9 34 fe ff ff       	jmpq   40ba34 <main+0x1d44>
  40bc00:	4c 8b a8 88 00 00 00 	mov    0x88(%rax),%r13
      { return const_iterator(&this->_M_impl._M_header); }
  40bc07:	48 83 c0 78          	add    $0x78,%rax
  40bc0b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
      return NULL;
    case NodeType::Scalar:
      throw BadSubscript();
  }

  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40bc10:	49 39 c5             	cmp    %rax,%r13
  40bc13:	0f 84 35 f6 ff ff    	je     40b24e <main+0x155e>
  40bc19:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40bc20:	ff ff ff 
  40bc23:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  40bc27:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40bc2c:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40bc31:	e9 99 00 00 00       	jmpq   40bccf <main+0x1fdf>
template <>
struct convert<std::string> {
  static Node encode(const std::string& rhs) { return Node(rhs); }

  static bool decode(const Node& node, std::string& rhs) {
    if (!node.IsScalar())
  40bc36:	83 78 04 02          	cmpl   $0x2,0x4(%rax)
  40bc3a:	0f 84 3d 01 00 00    	je     40bd7d <main+0x208d>
      return false;
  40bc40:	31 ed                	xor    %ebp,%ebp
  40bc42:	4d 85 e4             	test   %r12,%r12
  40bc45:	0f 84 f5 00 00 00    	je     40bd40 <main+0x2050>
  40bc4b:	4c 89 e7             	mov    %r12,%rdi
  40bc4e:	41 ff d6             	callq  *%r14
  40bc51:	4c 89 e7             	mov    %r12,%rdi
  40bc54:	41 ff d6             	callq  *%r14
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  40bc57:	40 84 ed             	test   %bpl,%bpl
  40bc5a:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40bc61:	00 
  40bc62:	74 18                	je     40bc7c <main+0x1f8c>
  40bc64:	48 8b 94 24 28 02 00 	mov    0x228(%rsp),%rdx
  40bc6b:	00 
  return false;
  40bc6c:	31 ed                	xor    %ebp,%ebp
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40bc6e:	48 3b 94 24 08 02 00 	cmp    0x208(%rsp),%rdx
  40bc75:	00 
  40bc76:	0f 84 35 01 00 00    	je     40bdb1 <main+0x20c1>
	if (!_M_is_local())
  40bc7c:	48 3b 4c 24 28       	cmp    0x28(%rsp),%rcx
  40bc81:	74 15                	je     40bc98 <main+0x1fa8>
      { ::operator delete(__p); }
  40bc83:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40bc8a:	ff ff ff 
  40bc8d:	48 89 cf             	mov    %rcx,%rdi
  40bc90:	49 89 df             	mov    %rbx,%r15
  40bc93:	48 01 d8             	add    %rbx,%rax
  40bc96:	ff d0                	callq  *%rax
  40bc98:	4d 85 e4             	test   %r12,%r12
  40bc9b:	74 06                	je     40bca3 <main+0x1fb3>
  40bc9d:	4c 89 e7             	mov    %r12,%rdi
  40bca0:	41 ff d6             	callq  *%r14
    if (it->first->equals(key, pMemory)) {
  40bca3:	40 84 ed             	test   %bpl,%bpl
  40bca6:	0f 85 f3 08 00 00    	jne    40c59f <main+0x28af>
	_M_node = _Rb_tree_increment(_M_node);
  40bcac:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  40bcb3:	ff ff ff 
  40bcb6:	4c 89 ef             	mov    %r13,%rdi
  40bcb9:	49 89 df             	mov    %rbx,%r15
  40bcbc:	48 01 d8             	add    %rbx,%rax
  40bcbf:	ff d0                	callq  *%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40bcc1:	48 3b 44 24 30       	cmp    0x30(%rsp),%rax
  40bcc6:	49 89 c5             	mov    %rax,%r13
  40bcc9:	0f 84 7f f5 ff ff    	je     40b24e <main+0x155e>
        if( pi_ != 0 ) pi_->add_ref_copy();
  40bccf:	4d 85 e4             	test   %r12,%r12
  40bcd2:	74 79                	je     40bd4d <main+0x205d>
  40bcd4:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  40bcd9:	f0 83 06 01          	lock addl $0x1,(%rsi)
    if (it->first->equals(key, pMemory)) {
  40bcdd:	49 8b 45 20          	mov    0x20(%r13),%rax
	: allocator_type(__a), _M_p(__dat) { }
  40bce1:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
      { _M_string_length = __length; }
  40bce6:	48 c7 84 24 28 02 00 	movq   $0x0,0x228(%rsp)
  40bced:	00 00 00 00 00 
  40bcf2:	c6 84 24 30 02 00 00 	movb   $0x0,0x230(%rsp)
  40bcf9:	00 
	: allocator_type(__a), _M_p(__dat) { }
  40bcfa:	48 89 94 24 20 02 00 	mov    %rdx,0x220(%rsp)
  40bd01:	00 
  40bd02:	f0 83 06 01          	lock addl $0x1,(%rsi)
  40bd06:	f0 83 06 01          	lock addl $0x1,(%rsi)
  return m_pNode ? m_pNode->type() : NodeType::Null;
  40bd0a:	48 85 c0             	test   %rax,%rax
  40bd0d:	0f 84 02 15 00 00    	je     40d215 <main+0x3525>
  40bd13:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  40bd16:	48 85 c0             	test   %rax,%rax
  40bd19:	0f 84 57 0c 00 00    	je     40c976 <main+0x2c86>
  40bd1f:	48 8b 00             	mov    (%rax),%rax
  40bd22:	48 85 c0             	test   %rax,%rax
  40bd25:	0f 84 3c 0c 00 00    	je     40c967 <main+0x2c77>
  40bd2b:	0f b6 28             	movzbl (%rax),%ebp
  void set_scalar(const std::string& scalar);
  void set_style(EmitterStyle::value style);

  bool is_defined() const { return m_isDefined; }
  NodeType::value type() const {
    return m_isDefined ? m_type : NodeType::Undefined;
  40bd2e:	40 84 ed             	test   %bpl,%bpl
  40bd31:	0f 85 ff fe ff ff    	jne    40bc36 <main+0x1f46>
        if( pi_ != 0 ) pi_->release();
  40bd37:	4d 85 e4             	test   %r12,%r12
  40bd3a:	0f 85 0b ff ff ff    	jne    40bc4b <main+0x1f5b>
  40bd40:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40bd47:	00 
  40bd48:	e9 2f ff ff ff       	jmpq   40bc7c <main+0x1f8c>
  40bd4d:	49 8b 45 20          	mov    0x20(%r13),%rax
  40bd51:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
      { _M_string_length = __length; }
  40bd56:	48 c7 84 24 28 02 00 	movq   $0x0,0x228(%rsp)
  40bd5d:	00 00 00 00 00 
  40bd62:	c6 84 24 30 02 00 00 	movb   $0x0,0x230(%rsp)
  40bd69:	00 
  40bd6a:	48 85 c0             	test   %rax,%rax
	: allocator_type(__a), _M_p(__dat) { }
  40bd6d:	48 89 b4 24 20 02 00 	mov    %rsi,0x220(%rsp)
  40bd74:	00 
  40bd75:	0f 84 31 ff ff ff    	je     40bcac <main+0x1fbc>
  40bd7b:	eb 96                	jmp    40bd13 <main+0x2023>
  }
  const std::string& scalar() const { return m_scalar; }
  40bd7d:	48 8d 70 30          	lea    0x30(%rax),%rsi
	this->_M_assign(__str);
  40bd81:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  40bd88:	ff ff ff 
  40bd8b:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  40bd92:	00 
  40bd93:	49 89 df             	mov    %rbx,%r15
  40bd96:	48 01 d8             	add    %rbx,%rax
  40bd99:	ff d0                	callq  *%rax
  40bd9b:	4d 85 e4             	test   %r12,%r12
  40bd9e:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40bda5:	00 
  40bda6:	0f 85 9f fe ff ff    	jne    40bc4b <main+0x1f5b>
  40bdac:	e9 b3 fe ff ff       	jmpq   40bc64 <main+0x1f74>
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
  40bdb1:	48 85 d2             	test   %rdx,%rdx
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40bdb4:	0f b6 6c 24 58       	movzbl 0x58(%rsp),%ebp
  40bdb9:	0f 84 bd fe ff ff    	je     40bc7c <main+0x1f8c>
	  return 0;
	return __builtin_memcmp(__s1, __s2, __n);
  40bdbf:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  40bdc6:	ff ff ff 
  40bdc9:	48 89 cf             	mov    %rcx,%rdi
  40bdcc:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  40bdd3:	00 
  40bdd4:	48 01 d8             	add    %rbx,%rax
  40bdd7:	48 8b b4 24 00 02 00 	mov    0x200(%rsp),%rsi
  40bdde:	00 
  40bddf:	49 89 df             	mov    %rbx,%r15
  40bde2:	ff d0                	callq  *%rax
  40bde4:	85 c0                	test   %eax,%eax
  40bde6:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  40bded:	00 
  40bdee:	40 0f 94 c5          	sete   %bpl
  40bdf2:	e9 85 fe ff ff       	jmpq   40bc7c <main+0x1f8c>
      throw BadSubscript();
  40bdf7:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  40bdfe:	ff ff ff 
  40be01:	bf 40 00 00 00       	mov    $0x40,%edi
  40be06:	49 89 df             	mov    %rbx,%r15
  40be09:	48 01 d8             	add    %rbx,%rax
  40be0c:	ff d0                	callq  *%rax
  40be0e:	48 89 c5             	mov    %rax,%rbp
  40be11:	48 89 c7             	mov    %rax,%rdi
  40be14:	48 b8 70 b2 de ff ff 	movabs $0xffffffffffdeb270,%rax
  40be1b:	ff ff ff 
  40be1e:	48 01 d8             	add    %rbx,%rax
  40be21:	ff d0                	callq  *%rax
  40be23:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  40be2a:	ff ff ff 
  40be2d:	48 89 ef             	mov    %rbp,%rdi
  40be30:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40be34:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  40be3b:	ff ff ff 
  40be3e:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40be42:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  40be49:	ff ff ff 
  40be4c:	48 01 d8             	add    %rbx,%rax
  40be4f:	ff d0                	callq  *%rax
      return NULL;
  40be51:	31 ed                	xor    %ebp,%ebp
  40be53:	4d 85 e4             	test   %r12,%r12
  40be56:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40be5d:	ff ff ff 
  40be60:	74 10                	je     40be72 <main+0x2182>
  40be62:	4c 89 e7             	mov    %r12,%rdi
  40be65:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  40be69:	41 ff d5             	callq  *%r13
  40be6c:	4c 89 e7             	mov    %r12,%rdi
  40be6f:	41 ff d5             	callq  *%r13
	if (!_M_is_local())
  40be72:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40be77:	48 8b bc 24 40 02 00 	mov    0x240(%rsp),%rdi
  40be7e:	00 
  40be7f:	48 83 c0 10          	add    $0x10,%rax
  40be83:	48 39 c7             	cmp    %rax,%rdi
  40be86:	74 12                	je     40be9a <main+0x21aa>
  40be88:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40be8f:	ff ff ff 
  40be92:	49 89 df             	mov    %rbx,%r15
  40be95:	48 01 d8             	add    %rbx,%rax
  40be98:	ff d0                	callq  *%rax
  40be9a:	4d 85 e4             	test   %r12,%r12
  40be9d:	74 13                	je     40beb2 <main+0x21c2>
  40be9f:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40bea6:	ff ff ff 
  40bea9:	4c 89 e7             	mov    %r12,%rdi
  40beac:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40beb0:	ff d0                	callq  *%rax
  if (!value) {
  40beb2:	48 85 ed             	test   %rbp,%rbp
  40beb5:	0f 84 60 07 00 00    	je     40c61b <main+0x292b>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40bebb:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40bec2:	00 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40bec3:	48 8b 94 24 b8 03 00 	mov    0x3b8(%rsp),%rdx
  40beca:	00 
        if( pi_ != 0 ) pi_->add_ref_copy();
  40becb:	48 85 ff             	test   %rdi,%rdi
  40bece:	0f 84 a2 06 00 00    	je     40c576 <main+0x2886>
  40bed4:	48 8d 47 08          	lea    0x8(%rdi),%rax
  40bed8:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  40bedc:	c6 84 24 e0 01 00 00 	movb   $0x1,0x1e0(%rsp)
  40bee3:	01 
  40bee4:	48 89 94 24 e8 01 00 	mov    %rdx,0x1e8(%rsp)
  40beeb:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40beec:	48 89 bc 24 f0 01 00 	mov    %rdi,0x1f0(%rsp)
  40bef3:	00 
  40bef4:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  40bef8:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40beff:	ff ff ff 
  40bf02:	48 89 ac 24 f8 01 00 	mov    %rbp,0x1f8(%rsp)
  40bf09:	00 
  40bf0a:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40bf0e:	ff d0                	callq  *%rax
    startStates.emplace_back(State(0, start[0].as<int>(), start[1].as<int>()));
  40bf10:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
  40bf15:	4c 8b 74 24 68       	mov    0x68(%rsp),%r14
  40bf1a:	48 8d ac 24 c0 01 00 	lea    0x1c0(%rsp),%rbp
  40bf21:	00 
  40bf22:	c7 84 24 40 02 00 00 	movl   $0x1,0x240(%rsp)
  40bf29:	01 00 00 00 
  40bf2d:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  40bf32:	48 89 ee             	mov    %rbp,%rsi
  40bf35:	4c 89 f8             	mov    %r15,%rax
  40bf38:	4c 89 f7             	mov    %r14,%rdi
  40bf3b:	48 01 d8             	add    %rbx,%rax
  40bf3e:	ff d0                	callq  *%rax
  40bf40:	4c 89 f7             	mov    %r14,%rdi
  40bf43:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  40bf48:	4c 89 f0             	mov    %r14,%rax
  40bf4b:	48 01 d8             	add    %rbx,%rax
  40bf4e:	ff d0                	callq  *%rax
  40bf50:	48 89 ee             	mov    %rbp,%rsi
  40bf53:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  40bf58:	41 89 c4             	mov    %eax,%r12d
  40bf5b:	4c 89 f8             	mov    %r15,%rax
  40bf5e:	c7 84 24 20 02 00 00 	movl   $0x0,0x220(%rsp)
  40bf65:	00 00 00 00 
  40bf69:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  40bf70:	00 
  40bf71:	48 01 d8             	add    %rbx,%rax
  40bf74:	48 89 ef             	mov    %rbp,%rdi
  40bf77:	ff d0                	callq  *%rax
  40bf79:	4c 89 f0             	mov    %r14,%rax
  40bf7c:	48 89 ef             	mov    %rbp,%rdi
  40bf7f:	48 01 d8             	add    %rbx,%rax
  40bf82:	ff d0                	callq  *%rax

#include "hash.hpp"

struct State {
	State(){}
  State(int time, int x, int y) : time(time), x(x), y(y) {}
  40bf84:	89 84 24 64 02 00 00 	mov    %eax,0x264(%rsp)
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40bf8b:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  40bf92:	00 
  40bf93:	48 3b 84 24 f0 00 00 	cmp    0xf0(%rsp),%rax
  40bf9a:	00 
  40bf9b:	c7 84 24 60 02 00 00 	movl   $0x0,0x260(%rsp)
  40bfa2:	00 00 00 00 
  40bfa6:	44 89 a4 24 68 02 00 	mov    %r12d,0x268(%rsp)
  40bfad:	00 
  40bfae:	0f 84 65 09 00 00    	je     40c919 <main+0x2c29>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  40bfb4:	48 85 c0             	test   %rax,%rax
  40bfb7:	74 15                	je     40bfce <main+0x22de>
  40bfb9:	48 8b 94 24 60 02 00 	mov    0x260(%rsp),%rdx
  40bfc0:	00 
  40bfc1:	48 89 10             	mov    %rdx,(%rax)
  40bfc4:	8b 94 24 68 02 00 00 	mov    0x268(%rsp),%edx
  40bfcb:	89 50 08             	mov    %edx,0x8(%rax)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  40bfce:	48 83 c0 0c          	add    $0xc,%rax
  40bfd2:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  40bfd9:	00 
  40bfda:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40bfe1:	00 
  40bfe2:	48 85 ff             	test   %rdi,%rdi
  40bfe5:	74 10                	je     40bff7 <main+0x2307>
  40bfe7:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40bfee:	ff ff ff 
  40bff1:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40bff5:	ff d0                	callq  *%rax
  40bff7:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40bffe:	00 
  40bfff:	48 85 ff             	test   %rdi,%rdi
  40c002:	74 10                	je     40c014 <main+0x2324>
  40c004:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40c00b:	ff ff ff 
  40c00e:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c012:	ff d0                	callq  *%rax
    goals.emplace_back(Location(goal[0].as<int>(), goal[1].as<int>()));
  40c014:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
  40c019:	4c 8b 74 24 68       	mov    0x68(%rsp),%r14
  40c01e:	48 8d ac 24 e0 01 00 	lea    0x1e0(%rsp),%rbp
  40c025:	00 
  40c026:	c7 84 24 40 02 00 00 	movl   $0x1,0x240(%rsp)
  40c02d:	01 00 00 00 
  40c031:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  40c036:	48 89 ee             	mov    %rbp,%rsi
  40c039:	4c 89 f8             	mov    %r15,%rax
  40c03c:	4c 89 f7             	mov    %r14,%rdi
  40c03f:	48 01 d8             	add    %rbx,%rax
  40c042:	ff d0                	callq  *%rax
  40c044:	4c 89 f7             	mov    %r14,%rdi
  40c047:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  40c04c:	4c 89 f0             	mov    %r14,%rax
  40c04f:	48 01 d8             	add    %rbx,%rax
  40c052:	ff d0                	callq  *%rax
  40c054:	48 89 ee             	mov    %rbp,%rsi
  40c057:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  40c05c:	41 89 c4             	mov    %eax,%r12d
  40c05f:	4c 89 f8             	mov    %r15,%rax
  40c062:	c7 84 24 20 02 00 00 	movl   $0x0,0x220(%rsp)
  40c069:	00 00 00 00 
  40c06d:	48 8b 94 24 88 00 00 	mov    0x88(%rsp),%rdx
  40c074:	00 
  40c075:	48 01 d8             	add    %rbx,%rax
  40c078:	48 89 ef             	mov    %rbp,%rdi
  40c07b:	ff d0                	callq  *%rax
  40c07d:	4c 89 f0             	mov    %r14,%rax
  40c080:	48 89 ef             	mov    %rbp,%rdi
  40c083:	48 01 d8             	add    %rbx,%rax
  40c086:	ff d0                	callq  *%rax
#pragma once

#include "hash.hpp"

struct Location {
  Location(int x, int y) : x(x), y(y) {}
  40c088:	89 84 24 60 02 00 00 	mov    %eax,0x260(%rsp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40c08f:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  40c096:	00 
  40c097:	48 3b 84 24 d0 00 00 	cmp    0xd0(%rsp),%rax
  40c09e:	00 
  40c09f:	44 89 a4 24 64 02 00 	mov    %r12d,0x264(%rsp)
  40c0a6:	00 
  40c0a7:	0f 84 93 08 00 00    	je     40c940 <main+0x2c50>
  40c0ad:	48 85 c0             	test   %rax,%rax
  40c0b0:	74 0b                	je     40c0bd <main+0x23cd>
  40c0b2:	48 8b 94 24 60 02 00 	mov    0x260(%rsp),%rdx
  40c0b9:	00 
  40c0ba:	48 89 10             	mov    %rdx,(%rax)
	    ++this->_M_impl._M_finish;
  40c0bd:	48 83 c0 08          	add    $0x8,%rax
  40c0c1:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  40c0c8:	00 
  40c0c9:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40c0d0:	00 
  40c0d1:	48 85 ff             	test   %rdi,%rdi
  40c0d4:	74 10                	je     40c0e6 <main+0x23f6>
  40c0d6:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40c0dd:	ff ff ff 
  40c0e0:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c0e4:	ff d0                	callq  *%rax
  40c0e6:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40c0ed:	00 
  40c0ee:	48 85 ff             	test   %rdi,%rdi
  40c0f1:	74 10                	je     40c103 <main+0x2413>
  40c0f3:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40c0fa:	ff ff ff 
  40c0fd:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c101:	ff d0                	callq  *%rax
  40c103:	48 8b bc 24 f0 01 00 	mov    0x1f0(%rsp),%rdi
  40c10a:	00 
  40c10b:	48 85 ff             	test   %rdi,%rdi
  40c10e:	74 10                	je     40c120 <main+0x2430>
  40c110:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40c117:	ff ff ff 
  40c11a:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c11e:	ff d0                	callq  *%rax
  40c120:	48 8b bc 24 d0 01 00 	mov    0x1d0(%rsp),%rdi
  40c127:	00 
  40c128:	48 85 ff             	test   %rdi,%rdi
  40c12b:	74 10                	je     40c13d <main+0x244d>
  40c12d:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40c134:	ff ff ff 
  40c137:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c13b:	ff d0                	callq  *%rax
  40c13d:	48 8b bc 24 00 04 00 	mov    0x400(%rsp),%rdi
  40c144:	00 
  40c145:	48 85 ff             	test   %rdi,%rdi
  40c148:	74 10                	je     40c15a <main+0x246a>
  40c14a:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40c151:	ff ff ff 
  40c154:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c158:	ff d0                	callq  *%rax
  40c15a:	48 8b bc 24 e0 03 00 	mov    0x3e0(%rsp),%rdi
  40c161:	00 
  40c162:	48 85 ff             	test   %rdi,%rdi
  40c165:	74 10                	je     40c177 <main+0x2487>
  40c167:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40c16e:	ff ff ff 
  40c171:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c175:	ff d0                	callq  *%rax
  40c177:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40c17e:	00 
  40c17f:	48 85 ff             	test   %rdi,%rdi
  40c182:	74 10                	je     40c194 <main+0x24a4>
  40c184:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40c18b:	ff ff ff 
  40c18e:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  40c192:	ff d0                	callq  *%rax
    switch (m_type) {
  40c194:	8b 84 24 e0 02 00 00 	mov    0x2e0(%rsp),%eax
  40c19b:	4c 8b ac 24 e8 02 00 	mov    0x2e8(%rsp),%r13
  40c1a2:	00 
  40c1a3:	48 8b bc 24 f0 02 00 	mov    0x2f0(%rsp),%rdi
  40c1aa:	00 
  40c1ab:	83 f8 01             	cmp    $0x1,%eax
  40c1ae:	0f 84 86 01 00 00    	je     40c33a <main+0x264a>
  40c1b4:	83 f8 02             	cmp    $0x2,%eax
  40c1b7:	75 7d                	jne    40c236 <main+0x2546>
  40c1b9:	48 8b ac 24 f8 02 00 	mov    0x2f8(%rsp),%rbp
  40c1c0:	00 
	_M_node = _Rb_tree_increment(_M_node);
  40c1c1:	49 bc 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%r12
  40c1c8:	ff ff ff 
  40c1cb:	49 89 df             	mov    %rbx,%r15
  40c1ce:	49 01 dc             	add    %rbx,%r12
  40c1d1:	41 ff d4             	callq  *%r12
    while (it != m_mapEnd && !is_defined(it))
  40c1d4:	48 39 c5             	cmp    %rax,%rbp
  40c1d7:	74 5a                	je     40c233 <main+0x2543>
  40c1d9:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40c1dd:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40c1e0:	48 85 d2             	test   %rdx,%rdx
  40c1e3:	0f 84 8d 07 00 00    	je     40c976 <main+0x2c86>
  40c1e9:	48 8b 12             	mov    (%rdx),%rdx
  40c1ec:	48 85 d2             	test   %rdx,%rdx
  40c1ef:	0f 84 72 07 00 00    	je     40c967 <main+0x2c77>
  40c1f5:	48 89 c7             	mov    %rax,%rdi
  40c1f8:	eb 25                	jmp    40c21f <main+0x252f>
  40c1fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40c200:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40c204:	48 8b 12             	mov    (%rdx),%rdx
  40c207:	48 85 d2             	test   %rdx,%rdx
  40c20a:	0f 84 66 07 00 00    	je     40c976 <main+0x2c86>
  40c210:	48 8b 12             	mov    (%rdx),%rdx
  40c213:	48 89 c7             	mov    %rax,%rdi
  40c216:	48 85 d2             	test   %rdx,%rdx
  40c219:	0f 84 48 07 00 00    	je     40c967 <main+0x2c77>
    return it->first->is_defined() && it->second->is_defined();
  40c21f:	80 3a 00             	cmpb   $0x0,(%rdx)
  40c222:	0f 85 8b 00 00 00    	jne    40c2b3 <main+0x25c3>
  40c228:	49 89 df             	mov    %rbx,%r15
  40c22b:	41 ff d4             	callq  *%r12
    while (it != m_mapEnd && !is_defined(it))
  40c22e:	48 39 c5             	cmp    %rax,%rbp
  40c231:	75 cd                	jne    40c200 <main+0x2510>
        m_mapIt = increment_until_defined(m_mapIt);
  40c233:	48 89 ef             	mov    %rbp,%rdi
  40c236:	4c 89 ac 24 e8 02 00 	mov    %r13,0x2e8(%rsp)
  40c23d:	00 
  40c23e:	48 89 bc 24 f0 02 00 	mov    %rdi,0x2f0(%rsp)
  40c245:	00 
  40c246:	e9 87 ea ff ff       	jmpq   40acd2 <main+0xfe2>
  40c24b:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40c24e:	48 85 d2             	test   %rdx,%rdx
  40c251:	0f 85 0d ed ff ff    	jne    40af64 <main+0x1274>
  40c257:	e9 18 f0 ff ff       	jmpq   40b274 <main+0x1584>
  40c25c:	c6 84 24 c0 01 00 00 	movb   $0x1,0x1c0(%rsp)
  40c263:	01 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40c264:	48 89 94 24 c8 01 00 	mov    %rdx,0x1c8(%rsp)
  40c26b:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40c26c:	48 c7 84 24 d0 01 00 	movq   $0x0,0x1d0(%rsp)
  40c273:	00 00 00 00 00 
  40c278:	48 89 ac 24 d8 01 00 	mov    %rbp,0x1d8(%rsp)
  40c27f:	00 
  40c280:	e9 2f ec ff ff       	jmpq   40aeb4 <main+0x11c4>
  40c285:	48 8b 84 24 b8 04 00 	mov    0x4b8(%rsp),%rax
  40c28c:	00 
  40c28d:	48 39 84 24 e8 02 00 	cmp    %rax,0x2e8(%rsp)
  40c294:	00 
  40c295:	0f 94 c0             	sete   %al
  for (const auto& node : config["agents"]) {
  40c298:	84 c0                	test   %al,%al
  40c29a:	0f 84 46 ea ff ff    	je     40ace6 <main+0xff6>
  40c2a0:	e9 f0 ef ff ff       	jmpq   40b295 <main+0x15a5>
        if( pi_ != 0 ) pi_->add_ref_copy();
  40c2a5:	31 ed                	xor    %ebp,%ebp
  40c2a7:	e9 67 eb ff ff       	jmpq   40ae13 <main+0x1123>
  40c2ac:	31 ed                	xor    %ebp,%ebp
  40c2ae:	e9 bf fb ff ff       	jmpq   40be72 <main+0x2182>
  40c2b3:	48 8b 47 28          	mov    0x28(%rdi),%rax
  40c2b7:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  40c2ba:	48 85 c0             	test   %rax,%rax
  40c2bd:	0f 84 b3 06 00 00    	je     40c976 <main+0x2c86>
  40c2c3:	48 8b 00             	mov    (%rax),%rax
  40c2c6:	48 85 c0             	test   %rax,%rax
  40c2c9:	0f 84 98 06 00 00    	je     40c967 <main+0x2c77>
    while (it != m_mapEnd && !is_defined(it))
  40c2cf:	80 38 00             	cmpb   $0x0,(%rax)
  40c2d2:	0f 84 50 ff ff ff    	je     40c228 <main+0x2538>
  40c2d8:	48 89 fd             	mov    %rdi,%rbp
  40c2db:	e9 53 ff ff ff       	jmpq   40c233 <main+0x2543>
      throw BadSubscript();
  40c2e0:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  40c2e7:	ff ff ff 
  40c2ea:	bf 40 00 00 00       	mov    $0x40,%edi
  40c2ef:	49 89 df             	mov    %rbx,%r15
  40c2f2:	48 01 d8             	add    %rbx,%rax
  40c2f5:	ff d0                	callq  *%rax
  40c2f7:	48 89 c5             	mov    %rax,%rbp
  40c2fa:	48 89 c7             	mov    %rax,%rdi
  40c2fd:	48 b8 70 b2 de ff ff 	movabs $0xffffffffffdeb270,%rax
  40c304:	ff ff ff 
  40c307:	48 01 d8             	add    %rbx,%rax
  40c30a:	ff d0                	callq  *%rax
  40c30c:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  40c313:	ff ff ff 
  40c316:	48 89 ef             	mov    %rbp,%rdi
  40c319:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40c31d:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  40c324:	ff ff ff 
  40c327:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40c32b:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  40c332:	ff ff ff 
  40c335:	48 01 d8             	add    %rbx,%rax
  40c338:	ff d0                	callq  *%rax
	++_M_current;
  40c33a:	49 83 c5 08          	add    $0x8,%r13
  40c33e:	e9 f3 fe ff ff       	jmpq   40c236 <main+0x2546>
  40c343:	4c 8b a8 88 00 00 00 	mov    0x88(%rax),%r13
      { return const_iterator(&this->_M_impl._M_header); }
  40c34a:	48 83 c0 78          	add    $0x78,%rax
  40c34e:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40c353:	49 39 c5             	cmp    %rax,%r13
  40c356:	0f 84 f5 fa ff ff    	je     40be51 <main+0x2161>
  40c35c:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  40c363:	00 
  40c364:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  40c36b:	00 
	: allocator_type(__a), _M_p(__dat) { }
  40c36c:	48 8d 84 24 70 02 00 	lea    0x270(%rsp),%rax
  40c373:	00 
  40c374:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        if( pi_ != 0 ) pi_->release();
  40c379:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c380:	ff ff ff 
  40c383:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  40c387:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40c38c:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40c393:	00 
  40c394:	e9 fb 00 00 00       	jmpq   40c494 <main+0x27a4>
  40c399:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40c3a0:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  40c3a7:	00 
  40c3a8:	f0 83 06 01          	lock addl $0x1,(%rsi)
    if (it->first->equals(key, pMemory)) {
  40c3ac:	49 8b 45 20          	mov    0x20(%r13),%rax
  40c3b0:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
      { _M_string_length = __length; }
  40c3b5:	48 c7 84 24 68 02 00 	movq   $0x0,0x268(%rsp)
  40c3bc:	00 00 00 00 00 
      { __c1 = __c2; }
  40c3c1:	c6 84 24 70 02 00 00 	movb   $0x0,0x270(%rsp)
  40c3c8:	00 
	: allocator_type(__a), _M_p(__dat) { }
  40c3c9:	48 89 94 24 60 02 00 	mov    %rdx,0x260(%rsp)
  40c3d0:	00 
  40c3d1:	f0 83 06 01          	lock addl $0x1,(%rsi)
  40c3d5:	f0 83 06 01          	lock addl $0x1,(%rsi)
  return m_pNode ? m_pNode->type() : NodeType::Null;
  40c3d9:	48 85 c0             	test   %rax,%rax
  40c3dc:	0f 84 f6 00 00 00    	je     40c4d8 <main+0x27e8>
  40c3e2:	48 8b 00             	mov    (%rax),%rax
  40c3e5:	48 85 c0             	test   %rax,%rax
  40c3e8:	0f 84 88 05 00 00    	je     40c976 <main+0x2c86>
  40c3ee:	48 8b 00             	mov    (%rax),%rax
  40c3f1:	48 85 c0             	test   %rax,%rax
  40c3f4:	0f 84 6d 05 00 00    	je     40c967 <main+0x2c77>
  40c3fa:	0f b6 28             	movzbl (%rax),%ebp
    return m_isDefined ? m_type : NodeType::Undefined;
  40c3fd:	40 84 ed             	test   %bpl,%bpl
  40c400:	74 0c                	je     40c40e <main+0x271e>
    if (!node.IsScalar())
  40c402:	83 78 04 02          	cmpl   $0x2,0x4(%rax)
  40c406:	0f 84 df 00 00 00    	je     40c4eb <main+0x27fb>
      return false;
  40c40c:	31 ed                	xor    %ebp,%ebp
  40c40e:	4d 85 e4             	test   %r12,%r12
  40c411:	74 29                	je     40c43c <main+0x274c>
  40c413:	4c 89 e7             	mov    %r12,%rdi
  40c416:	41 ff d6             	callq  *%r14
  40c419:	4c 89 e7             	mov    %r12,%rdi
  40c41c:	41 ff d6             	callq  *%r14
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  40c41f:	40 84 ed             	test   %bpl,%bpl
  40c422:	74 18                	je     40c43c <main+0x274c>
  40c424:	48 8b 94 24 68 02 00 	mov    0x268(%rsp),%rdx
  40c42b:	00 
  return false;
  40c42c:	31 ed                	xor    %ebp,%ebp
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40c42e:	48 3b 94 24 48 02 00 	cmp    0x248(%rsp),%rdx
  40c435:	00 
  40c436:	0f 84 db 00 00 00    	je     40c517 <main+0x2827>
  40c43c:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  40c443:	00 
	if (!_M_is_local())
  40c444:	48 3b 7c 24 30       	cmp    0x30(%rsp),%rdi
  40c449:	74 12                	je     40c45d <main+0x276d>
      { ::operator delete(__p); }
  40c44b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c452:	ff ff ff 
  40c455:	49 89 df             	mov    %rbx,%r15
  40c458:	48 01 d8             	add    %rbx,%rax
  40c45b:	ff d0                	callq  *%rax
  40c45d:	4d 85 e4             	test   %r12,%r12
  40c460:	74 06                	je     40c468 <main+0x2778>
  40c462:	4c 89 e7             	mov    %r12,%rdi
  40c465:	41 ff d6             	callq  *%r14
    if (it->first->equals(key, pMemory)) {
  40c468:	40 84 ed             	test   %bpl,%bpl
  40c46b:	0f 85 58 01 00 00    	jne    40c5c9 <main+0x28d9>
	_M_node = _Rb_tree_increment(_M_node);
  40c471:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  40c478:	ff ff ff 
  40c47b:	4c 89 ef             	mov    %r13,%rdi
  40c47e:	49 89 df             	mov    %rbx,%r15
  40c481:	48 01 d8             	add    %rbx,%rax
  40c484:	ff d0                	callq  *%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40c486:	48 3b 44 24 50       	cmp    0x50(%rsp),%rax
  40c48b:	49 89 c5             	mov    %rax,%r13
  40c48e:	0f 84 bd f9 ff ff    	je     40be51 <main+0x2161>
        if( pi_ != 0 ) pi_->add_ref_copy();
  40c494:	4d 85 e4             	test   %r12,%r12
  40c497:	0f 85 03 ff ff ff    	jne    40c3a0 <main+0x26b0>
    if (it->first->equals(key, pMemory)) {
  40c49d:	49 8b 45 20          	mov    0x20(%r13),%rax
	: allocator_type(__a), _M_p(__dat) { }
  40c4a1:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
      { _M_string_length = __length; }
  40c4a6:	48 c7 84 24 68 02 00 	movq   $0x0,0x268(%rsp)
  40c4ad:	00 00 00 00 00 
  40c4b2:	c6 84 24 70 02 00 00 	movb   $0x0,0x270(%rsp)
  40c4b9:	00 
  40c4ba:	48 85 c0             	test   %rax,%rax
	: allocator_type(__a), _M_p(__dat) { }
  40c4bd:	48 89 b4 24 60 02 00 	mov    %rsi,0x260(%rsp)
  40c4c4:	00 
  40c4c5:	0f 85 17 ff ff ff    	jne    40c3e2 <main+0x26f2>
  return false;
  40c4cb:	31 ed                	xor    %ebp,%ebp
  40c4cd:	e9 6a ff ff ff       	jmpq   40c43c <main+0x274c>
  40c4d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if( pi_ != 0 ) pi_->release();
  40c4d8:	4c 89 e7             	mov    %r12,%rdi
  40c4db:	31 ed                	xor    %ebp,%ebp
  40c4dd:	41 ff d6             	callq  *%r14
  40c4e0:	4c 89 e7             	mov    %r12,%rdi
  40c4e3:	41 ff d6             	callq  *%r14
  40c4e6:	e9 51 ff ff ff       	jmpq   40c43c <main+0x274c>
  const std::string& scalar() const { return m_scalar; }
  40c4eb:	48 8d 70 30          	lea    0x30(%rax),%rsi
	this->_M_assign(__str);
  40c4ef:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  40c4f6:	ff ff ff 
  40c4f9:	48 8b bc 24 98 00 00 	mov    0x98(%rsp),%rdi
  40c500:	00 
  40c501:	49 89 df             	mov    %rbx,%r15
  40c504:	48 01 d8             	add    %rbx,%rax
  40c507:	ff d0                	callq  *%rax
  40c509:	4d 85 e4             	test   %r12,%r12
  40c50c:	0f 85 01 ff ff ff    	jne    40c413 <main+0x2723>
  40c512:	e9 0d ff ff ff       	jmpq   40c424 <main+0x2734>
	if (__n == 0)
  40c517:	48 85 d2             	test   %rdx,%rdx
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40c51a:	0f b6 ac 24 a0 00 00 	movzbl 0xa0(%rsp),%ebp
  40c521:	00 
  40c522:	0f 84 14 ff ff ff    	je     40c43c <main+0x274c>
	return __builtin_memcmp(__s1, __s2, __n);
  40c528:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  40c52f:	ff ff ff 
  40c532:	48 8b b4 24 40 02 00 	mov    0x240(%rsp),%rsi
  40c539:	00 
  40c53a:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  40c541:	00 
  40c542:	48 01 d8             	add    %rbx,%rax
  40c545:	49 89 df             	mov    %rbx,%r15
  40c548:	ff d0                	callq  *%rax
  40c54a:	85 c0                	test   %eax,%eax
  40c54c:	40 0f 94 c5          	sete   %bpl
  40c550:	e9 e7 fe ff ff       	jmpq   40c43c <main+0x274c>
	if (!_M_is_local())
  40c555:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40c55a:	48 8b bc 24 80 02 00 	mov    0x280(%rsp),%rdi
  40c561:	00 
  40c562:	31 ed                	xor    %ebp,%ebp
  40c564:	48 83 c0 10          	add    $0x10,%rax
  40c568:	48 39 c7             	cmp    %rax,%rdi
  40c56b:	0f 85 f6 df ff ff    	jne    40a567 <main+0x877>
  40c571:	e9 0c e0 ff ff       	jmpq   40a582 <main+0x892>
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  40c576:	c6 84 24 e0 01 00 00 	movb   $0x1,0x1e0(%rsp)
  40c57d:	01 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40c57e:	48 89 94 24 e8 01 00 	mov    %rdx,0x1e8(%rsp)
  40c585:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40c586:	48 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%rsp)
  40c58d:	00 00 00 00 00 
  40c592:	48 89 ac 24 f8 01 00 	mov    %rbp,0x1f8(%rsp)
  40c599:	00 
  40c59a:	e9 71 f9 ff ff       	jmpq   40bf10 <main+0x2220>
      return it->second;
  40c59f:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  40c5a3:	e9 a8 ec ff ff       	jmpq   40b250 <main+0x1560>
  40c5a8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40c5ad:	48 8b bc 24 80 02 00 	mov    0x280(%rsp),%rdi
  40c5b4:	00 
  40c5b5:	48 83 c0 10          	add    $0x10,%rax
  40c5b9:	48 39 c7             	cmp    %rax,%rdi
  40c5bc:	0f 84 c0 df ff ff    	je     40a582 <main+0x892>
  40c5c2:	31 ed                	xor    %ebp,%ebp
  40c5c4:	e9 9e df ff ff       	jmpq   40a567 <main+0x877>
  40c5c9:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  40c5cd:	e9 81 f8 ff ff       	jmpq   40be53 <main+0x2163>
      { return _M_node == __x._M_node; }
  40c5d2:	48 8b 84 24 c0 04 00 	mov    0x4c0(%rsp),%rax
  40c5d9:	00 
  40c5da:	48 39 84 24 f0 02 00 	cmp    %rax,0x2f0(%rsp)
  40c5e1:	00 
  40c5e2:	0f 94 c0             	sete   %al
  40c5e5:	e9 ae fc ff ff       	jmpq   40c298 <main+0x25a8>
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  40c5ea:	c6 84 24 c0 01 00 00 	movb   $0x0,0x1c0(%rsp)
  40c5f1:	00 
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  40c5f2:	48 c7 84 24 c8 01 00 	movq   $0x0,0x1c8(%rsp)
  40c5f9:	00 00 00 00 00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  40c5fe:	48 c7 84 24 d0 01 00 	movq   $0x0,0x1d0(%rsp)
  40c605:	00 00 00 00 00 
  40c60a:	48 c7 84 24 d8 01 00 	movq   $0x0,0x1d8(%rsp)
  40c611:	00 00 00 00 00 
  40c616:	e9 99 e8 ff ff       	jmpq   40aeb4 <main+0x11c4>
  40c61b:	c6 84 24 e0 01 00 00 	movb   $0x0,0x1e0(%rsp)
  40c622:	00 
  40c623:	48 c7 84 24 e8 01 00 	movq   $0x0,0x1e8(%rsp)
  40c62a:	00 00 00 00 00 
  40c62f:	48 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%rsp)
  40c636:	00 00 00 00 00 
  40c63b:	48 c7 84 24 f8 01 00 	movq   $0x0,0x1f8(%rsp)
  40c642:	00 00 00 00 00 
  40c647:	e9 c4 f8 ff ff       	jmpq   40bf10 <main+0x2220>
  40c64c:	49 89 c5             	mov    %rax,%r13
        {}
  40c64f:	48 89 ef             	mov    %rbp,%rdi
  40c652:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  40c659:	ff ff ff 
  40c65c:	4c 89 ed             	mov    %r13,%rbp
  40c65f:	4c 89 a4 24 40 02 00 	mov    %r12,0x240(%rsp)
  40c666:	00 
  40c667:	49 89 df             	mov    %rbx,%r15
  40c66a:	48 01 d8             	add    %rbx,%rax
  40c66d:	ff d0                	callq  *%rax
  40c66f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40c674:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40c67b:	00 
  40c67c:	48 83 c0 10          	add    $0x10,%rax
  40c680:	48 39 c7             	cmp    %rax,%rdi
  40c683:	74 12                	je     40c697 <main+0x29a7>
  40c685:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c68c:	ff ff ff 
  40c68f:	49 89 df             	mov    %rbx,%r15
  40c692:	48 01 d8             	add    %rbx,%rax
  40c695:	ff d0                	callq  *%rax
  40c697:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  40c69c:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  40c6a3:	00 
  40c6a4:	48 83 c0 10          	add    $0x10,%rax
  40c6a8:	48 39 c7             	cmp    %rax,%rdi
  40c6ab:	74 12                	je     40c6bf <main+0x29cf>
  40c6ad:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c6b4:	ff ff ff 
  40c6b7:	49 89 df             	mov    %rbx,%r15
  40c6ba:	48 01 d8             	add    %rbx,%rax
  40c6bd:	ff d0                	callq  *%rax
  40c6bf:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  40c6c4:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  40c6cb:	00 
  40c6cc:	48 83 c0 10          	add    $0x10,%rax
  40c6d0:	48 39 c7             	cmp    %rax,%rdi
  40c6d3:	74 12                	je     40c6e7 <main+0x29f7>
  40c6d5:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c6dc:	ff ff ff 
  40c6df:	49 89 df             	mov    %rbx,%r15
  40c6e2:	48 01 d8             	add    %rbx,%rax
  40c6e5:	ff d0                	callq  *%rax
  po::options_description desc("Allowed options");
  40c6e7:	48 b8 10 b9 de ff ff 	movabs $0xffffffffffdeb910,%rax
  40c6ee:	ff ff ff 
  40c6f1:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40c6f6:	48 01 d8             	add    %rbx,%rax
  40c6f9:	ff d0                	callq  *%rax
  40c6fb:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  40c702:	ff ff ff 
  40c705:	48 89 ef             	mov    %rbp,%rdi
  40c708:	49 89 df             	mov    %rbx,%r15
  40c70b:	48 01 d8             	add    %rbx,%rax
  40c70e:	ff d0                	callq  *%rax
  40c710:	48 89 c5             	mov    %rax,%rbp
        if( pi_ != 0 ) pi_->release();
  40c713:	4d 85 e4             	test   %r12,%r12
  40c716:	74 1a                	je     40c732 <main+0x2a42>
  40c718:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c71f:	ff ff ff 
  40c722:	4c 89 e7             	mov    %r12,%rdi
  40c725:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  40c729:	41 ff d5             	callq  *%r13
  40c72c:	4c 89 e7             	mov    %r12,%rdi
  40c72f:	41 ff d5             	callq  *%r13
  40c732:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40c739:	00 
  40c73a:	48 8b bc 24 00 02 00 	mov    0x200(%rsp),%rdi
  40c741:	00 
  40c742:	48 83 c0 10          	add    $0x10,%rax
  40c746:	48 39 c7             	cmp    %rax,%rdi
  40c749:	74 12                	je     40c75d <main+0x2a6d>
  40c74b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c752:	ff ff ff 
  40c755:	49 89 df             	mov    %rbx,%r15
  40c758:	48 01 d8             	add    %rbx,%rax
  40c75b:	ff d0                	callq  *%rax
  40c75d:	4d 85 e4             	test   %r12,%r12
  40c760:	74 12                	je     40c774 <main+0x2a84>
  40c762:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c769:	ff ff ff 
  40c76c:	4c 89 e7             	mov    %r12,%rdi
  40c76f:	48 01 d8             	add    %rbx,%rax
  40c772:	ff d0                	callq  *%rax
  for (const auto& node : config["agents"]) {
  40c774:	48 b8 c0 ba de ff ff 	movabs $0xffffffffffdebac0,%rax
  40c77b:	ff ff ff 
  40c77e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40c783:	48 01 d8             	add    %rbx,%rax
  40c786:	ff d0                	callq  *%rax
  40c788:	48 8b bc 24 d8 04 00 	mov    0x4d8(%rsp),%rdi
  40c78f:	00 
  40c790:	48 85 ff             	test   %rdi,%rdi
  40c793:	74 0f                	je     40c7a4 <main+0x2ab4>
  40c795:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c79c:	ff ff ff 
  40c79f:	48 01 d8             	add    %rbx,%rax
  40c7a2:	ff d0                	callq  *%rax
  40c7a4:	48 8b bc 24 08 03 00 	mov    0x308(%rsp),%rdi
  40c7ab:	00 
  40c7ac:	48 85 ff             	test   %rdi,%rdi
  40c7af:	74 0f                	je     40c7c0 <main+0x2ad0>
  40c7b1:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c7b8:	ff ff ff 
  40c7bb:	48 01 d8             	add    %rbx,%rax
  40c7be:	ff d0                	callq  *%rax
  40c7c0:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  40c7c7:	00 
  40c7c8:	48 85 ff             	test   %rdi,%rdi
  40c7cb:	74 0f                	je     40c7dc <main+0x2aec>
  40c7cd:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c7d4:	ff ff ff 
  40c7d7:	48 01 d8             	add    %rbx,%rax
  40c7da:	ff d0                	callq  *%rax
  40c7dc:	48 b8 a0 be de ff ff 	movabs $0xffffffffffdebea0,%rax
  40c7e3:	ff ff ff 
  40c7e6:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40c7eb:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  40c7f2:	00 
  40c7f3:	48 85 ff             	test   %rdi,%rdi
  40c7f6:	74 0f                	je     40c807 <main+0x2b17>
  40c7f8:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c7ff:	ff ff ff 
  40c802:	48 01 d8             	add    %rbx,%rax
  40c805:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40c807:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  40c80e:	00 
	if (__p)
  40c80f:	48 85 ff             	test   %rdi,%rdi
  40c812:	74 12                	je     40c826 <main+0x2b36>
  40c814:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c81b:	ff ff ff 
  40c81e:	49 89 df             	mov    %rbx,%r15
  40c821:	48 01 d8             	add    %rbx,%rax
  40c824:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40c826:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  40c82d:	00 
	if (__p)
  40c82e:	48 85 ff             	test   %rdi,%rdi
  40c831:	74 12                	je     40c845 <main+0x2b55>
  40c833:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c83a:	ff ff ff 
  40c83d:	49 89 df             	mov    %rbx,%r15
  40c840:	48 01 d8             	add    %rbx,%rax
  40c843:	ff d0                	callq  *%rax
  40c845:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  40c84a:	48 8b 3c 24          	mov    (%rsp),%rdi
  40c84e:	48 01 d8             	add    %rbx,%rax
  40c851:	ff d0                	callq  *%rax
  40c853:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  40c85a:	00 
  40c85b:	48 85 ff             	test   %rdi,%rdi
  40c85e:	0f 84 33 fe ff ff    	je     40c697 <main+0x29a7>
  40c864:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c86b:	ff ff ff 
  40c86e:	48 01 d8             	add    %rbx,%rax
  40c871:	ff d0                	callq  *%rax
  40c873:	e9 1f fe ff ff       	jmpq   40c697 <main+0x29a7>
  40c878:	48 89 c5             	mov    %rax,%rbp
  40c87b:	4d 85 e4             	test   %r12,%r12
  40c87e:	74 1a                	je     40c89a <main+0x2baa>
  40c880:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c887:	ff ff ff 
  40c88a:	4c 89 e7             	mov    %r12,%rdi
  40c88d:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  40c891:	41 ff d5             	callq  *%r13
  40c894:	4c 89 e7             	mov    %r12,%rdi
  40c897:	41 ff d5             	callq  *%r13
  40c89a:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40c89f:	48 8b bc 24 40 02 00 	mov    0x240(%rsp),%rdi
  40c8a6:	00 
  40c8a7:	48 83 c0 10          	add    $0x10,%rax
  40c8ab:	48 39 c7             	cmp    %rax,%rdi
  40c8ae:	74 12                	je     40c8c2 <main+0x2bd2>
  40c8b0:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c8b7:	ff ff ff 
  40c8ba:	49 89 df             	mov    %rbx,%r15
  40c8bd:	48 01 d8             	add    %rbx,%rax
  40c8c0:	ff d0                	callq  *%rax
  40c8c2:	4d 85 e4             	test   %r12,%r12
  40c8c5:	74 12                	je     40c8d9 <main+0x2be9>
  40c8c7:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c8ce:	ff ff ff 
  40c8d1:	4c 89 e7             	mov    %r12,%rdi
  40c8d4:	48 01 d8             	add    %rbx,%rax
  40c8d7:	ff d0                	callq  *%rax
  40c8d9:	48 8b bc 24 d0 01 00 	mov    0x1d0(%rsp),%rdi
  40c8e0:	00 
  40c8e1:	48 85 ff             	test   %rdi,%rdi
  40c8e4:	0f 84 8a fe ff ff    	je     40c774 <main+0x2a84>
  40c8ea:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c8f1:	ff ff ff 
  40c8f4:	48 01 d8             	add    %rbx,%rax
  40c8f7:	ff d0                	callq  *%rax
  40c8f9:	e9 76 fe ff ff       	jmpq   40c774 <main+0x2a84>
	  _M_emplace_back_aux(__x);
  40c8fe:	4c 89 ff             	mov    %r15,%rdi
  40c901:	41 ff d6             	callq  *%r14
  40c904:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  40c90b:	00 
  40c90c:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  40c913:	00 
  40c914:	e9 4c ed ff ff       	jmpq   40b665 <main+0x1975>
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  40c919:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  40c920:	00 
  40c921:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  40c928:	00 
  40c929:	48 89 c6             	mov    %rax,%rsi
  40c92c:	48 b8 40 ec de ff ff 	movabs $0xffffffffffdeec40,%rax
  40c933:	ff ff ff 
  40c936:	48 01 d8             	add    %rbx,%rax
  40c939:	ff d0                	callq  *%rax
  40c93b:	e9 9a f6 ff ff       	jmpq   40bfda <main+0x22ea>
  40c940:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  40c947:	00 
  40c948:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  40c94f:	00 
  40c950:	48 89 c6             	mov    %rax,%rsi
  40c953:	48 b8 a0 ed de ff ff 	movabs $0xffffffffffdeeda0,%rax
  40c95a:	ff ff ff 
  40c95d:	48 01 d8             	add    %rbx,%rax
  40c960:	ff d0                	callq  *%rax
  40c962:	e9 62 f7 ff ff       	jmpq   40c0c9 <main+0x23d9>
  40c967:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  40c96e:	ff ff ff 
  40c971:	48 01 d8             	add    %rbx,%rax
  40c974:	ff d0                	callq  *%rax
  40c976:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  40c97d:	ff ff ff 
  40c980:	48 01 d8             	add    %rbx,%rax
  40c983:	ff d0                	callq  *%rax
  40c985:	49 89 c5             	mov    %rax,%r13
      throw BadSubscript();
  40c988:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  40c98f:	ff ff ff 
  40c992:	48 89 ef             	mov    %rbp,%rdi
  40c995:	49 89 df             	mov    %rbx,%r15
  40c998:	48 01 d8             	add    %rbx,%rax
  40c99b:	4c 89 ed             	mov    %r13,%rbp
  40c99e:	ff d0                	callq  *%rax
  40c9a0:	e9 6e fd ff ff       	jmpq   40c713 <main+0x2a23>
  40c9a5:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40c9ac:	00 
  40c9ad:	48 89 c5             	mov    %rax,%rbp
  40c9b0:	48 85 ff             	test   %rdi,%rdi
  40c9b3:	74 0f                	je     40c9c4 <main+0x2cd4>
  40c9b5:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c9bc:	ff ff ff 
  40c9bf:	48 01 d8             	add    %rbx,%rax
  40c9c2:	ff d0                	callq  *%rax
  40c9c4:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40c9cb:	00 
  40c9cc:	48 85 ff             	test   %rdi,%rdi
  40c9cf:	74 0f                	je     40c9e0 <main+0x2cf0>
  40c9d1:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c9d8:	ff ff ff 
  40c9db:	48 01 d8             	add    %rbx,%rax
  40c9de:	ff d0                	callq  *%rax
  40c9e0:	48 8b bc 24 f0 01 00 	mov    0x1f0(%rsp),%rdi
  40c9e7:	00 
  40c9e8:	48 85 ff             	test   %rdi,%rdi
  40c9eb:	0f 84 e8 fe ff ff    	je     40c8d9 <main+0x2be9>
  40c9f1:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40c9f8:	ff ff ff 
  40c9fb:	48 01 d8             	add    %rbx,%rax
  40c9fe:	ff d0                	callq  *%rax
  40ca00:	e9 d4 fe ff ff       	jmpq   40c8d9 <main+0x2be9>
  40ca05:	48 89 c5             	mov    %rax,%rbp
  40ca08:	e9 b5 fe ff ff       	jmpq   40c8c2 <main+0x2bd2>
  40ca0d:	48 89 c5             	mov    %rax,%rbp
  40ca10:	eb b2                	jmp    40c9c4 <main+0x2cd4>
      { _M_h._M_deallocate_nodes(_M_nodes); }
  40ca12:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40ca19:	00 
      while (__n)
  40ca1a:	48 85 ff             	test   %rdi,%rdi
  40ca1d:	74 6f                	je     40ca8e <main+0x2d9e>
  40ca1f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  40ca24:	48 8b 07             	mov    (%rdi),%rax
  40ca27:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  40ca2e:	ff ff ff 
  40ca31:	49 89 df             	mov    %rbx,%r15
  40ca34:	48 01 da             	add    %rbx,%rdx
  40ca37:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40ca3c:	ff d2                	callq  *%rdx
	  __n = __n->_M_next();
  40ca3e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  40ca43:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40ca48:	eb d0                	jmp    40ca1a <main+0x2d2a>
  40ca4a:	48 89 c5             	mov    %rax,%rbp
  40ca4d:	48 b8 a0 be de ff ff 	movabs $0xffffffffffdebea0,%rax
  40ca54:	ff ff ff 
  40ca57:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40ca5c:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40ca61:	48 01 d8             	add    %rbx,%rax
  40ca64:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40ca66:	48 8b bc 24 e0 02 00 	mov    0x2e0(%rsp),%rdi
  40ca6d:	00 
	if (__p)
  40ca6e:	48 85 ff             	test   %rdi,%rdi
  40ca71:	0f 84 74 fd ff ff    	je     40c7eb <main+0x2afb>
  40ca77:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40ca7e:	ff ff ff 
  40ca81:	49 89 df             	mov    %rbx,%r15
  40ca84:	48 01 d8             	add    %rbx,%rax
  40ca87:	ff d0                	callq  *%rax
  40ca89:	e9 5d fd ff ff       	jmpq   40c7eb <main+0x2afb>
      __catch(...)
  40ca8e:	48 89 c7             	mov    %rax,%rdi
  40ca91:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  40ca98:	ff ff ff 
  40ca9b:	49 89 df             	mov    %rbx,%r15
  40ca9e:	48 01 d8             	add    %rbx,%rax
  40caa1:	ff d0                	callq  *%rax
	  if (__former_buckets)
  40caa3:	4d 85 e4             	test   %r12,%r12
  40caa6:	74 35                	je     40cadd <main+0x2ded>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  40caa8:	48 8b 7c 1d 20       	mov    0x20(%rbp,%rbx,1),%rdi
	if (_M_uses_single_bucket(__bkts))
  40caad:	48 b8 50 bf 84 01 00 	movabs $0x184bf50,%rax
  40cab4:	00 00 00 
  40cab7:	48 01 d8             	add    %rbx,%rax
  40caba:	48 39 c7             	cmp    %rax,%rdi
  40cabd:	74 0f                	je     40cace <main+0x2dde>
  40cabf:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40cac6:	ff ff ff 
  40cac9:	48 01 d8             	add    %rbx,%rax
  40cacc:	ff d0                	callq  *%rax
    { _M_next_resize = __state; }
  40cace:	4c 89 74 1d 48       	mov    %r14,0x48(%rbp,%rbx,1)
	      _M_buckets = __former_buckets;
  40cad3:	4c 89 64 1d 20       	mov    %r12,0x20(%rbp,%rbx,1)
	      _M_bucket_count = __former_bucket_count;
  40cad8:	4c 89 6c 1d 28       	mov    %r13,0x28(%rbp,%rbx,1)
	  __builtin_memset(_M_buckets, 0,
  40cadd:	48 8b 44 1d 28       	mov    0x28(%rbp,%rbx,1),%rax
  40cae2:	48 8b 7c 1d 20       	mov    0x20(%rbp,%rbx,1),%rdi
  40cae7:	31 f6                	xor    %esi,%esi
  40cae9:	49 89 df             	mov    %rbx,%r15
  40caec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40caf3:	00 
  40caf4:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  40cafb:	ff ff ff 
  40cafe:	48 01 d8             	add    %rbx,%rax
  40cb01:	ff d0                	callq  *%rax
	  __throw_exception_again;
  40cb03:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  40cb0a:	ff ff ff 
  40cb0d:	48 01 d8             	add    %rbx,%rax
  40cb10:	ff d0                	callq  *%rax
  40cb12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	this->_M_widen_init();
  40cb18:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40cb1f:	ff ff ff 
  40cb22:	4c 89 e7             	mov    %r12,%rdi
  40cb25:	49 89 df             	mov    %rbx,%r15
  40cb28:	48 01 d8             	add    %rbx,%rax
  40cb2b:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40cb2d:	49 8b 04 24          	mov    (%r12),%rax
  40cb31:	be 0a 00 00 00       	mov    $0xa,%esi
  40cb36:	48 8b 40 30          	mov    0x30(%rax),%rax
  40cb3a:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  40cb3f:	0f 84 e2 ef ff ff    	je     40bb27 <main+0x1e37>
  40cb45:	4c 89 e7             	mov    %r12,%rdi
  40cb48:	ff d0                	callq  *%rax
  40cb4a:	0f be f0             	movsbl %al,%esi
  40cb4d:	e9 d5 ef ff ff       	jmpq   40bb27 <main+0x1e37>
	this->_M_widen_init();
  40cb52:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40cb59:	ff ff ff 
  40cb5c:	4c 89 e7             	mov    %r12,%rdi
  40cb5f:	49 89 df             	mov    %rbx,%r15
  40cb62:	48 01 d8             	add    %rbx,%rax
  40cb65:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40cb67:	49 8b 04 24          	mov    (%r12),%rax
  40cb6b:	be 0a 00 00 00       	mov    $0xa,%esi
  40cb70:	48 8b 40 30          	mov    0x30(%rax),%rax
  40cb74:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  40cb79:	0f 84 33 ef ff ff    	je     40bab2 <main+0x1dc2>
  40cb7f:	4c 89 e7             	mov    %r12,%rdi
  40cb82:	ff d0                	callq  *%rax
  40cb84:	0f be f0             	movsbl %al,%esi
  40cb87:	e9 26 ef ff ff       	jmpq   40bab2 <main+0x1dc2>
    for (size_t a = 0; a < ROBOT_NUMS; ++a) {
  40cb8c:	48 83 44 24 58 01    	addq   $0x1,0x58(%rsp)
  40cb92:	48 81 44 24 38 50 06 	addq   $0x650,0x38(%rsp)
  40cb99:	00 00 
  40cb9b:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40cba0:	48 83 f8 14          	cmp    $0x14,%rax
  40cba4:	0f 85 d1 ed ff ff    	jne    40b97b <main+0x1c8b>
    std::ofstream out(outputFile);
  40cbaa:	48 b8 f0 e8 dd ff ff 	movabs $0xffffffffffdde8f0,%rax
  40cbb1:	ff ff ff 
  40cbb4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40cbb9:	49 89 df             	mov    %rbx,%r15
  40cbbc:	48 01 d8             	add    %rbx,%rax
  40cbbf:	ff d0                	callq  *%rax
  40cbc1:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  40cbc8:	00 
  40cbc9:	48 85 ff             	test   %rdi,%rdi
  40cbcc:	74 0f                	je     40cbdd <main+0x2eed>
  40cbce:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40cbd5:	ff ff ff 
  40cbd8:	48 01 d8             	add    %rbx,%rax
  40cbdb:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40cbdd:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  40cbe4:	00 
	if (__p)
  40cbe5:	48 85 ff             	test   %rdi,%rdi
  40cbe8:	74 12                	je     40cbfc <main+0x2f0c>
  40cbea:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40cbf1:	ff ff ff 
  40cbf4:	49 89 df             	mov    %rbx,%r15
  40cbf7:	48 01 d8             	add    %rbx,%rax
  40cbfa:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40cbfc:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  40cc03:	00 
	if (__p)
  40cc04:	48 85 ff             	test   %rdi,%rdi
  40cc07:	74 12                	je     40cc1b <main+0x2f2b>
  40cc09:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40cc10:	ff ff ff 
  40cc13:	49 89 df             	mov    %rbx,%r15
  40cc16:	48 01 d8             	add    %rbx,%rax
  40cc19:	ff d0                	callq  *%rax
  40cc1b:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  40cc20:	48 8b 3c 24          	mov    (%rsp),%rdi
  40cc24:	48 01 d8             	add    %rbx,%rax
  40cc27:	ff d0                	callq  *%rax
  40cc29:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  40cc30:	00 
  40cc31:	48 85 ff             	test   %rdi,%rdi
  40cc34:	74 0f                	je     40cc45 <main+0x2f55>
  40cc36:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40cc3d:	ff ff ff 
  40cc40:	48 01 d8             	add    %rbx,%rax
  40cc43:	ff d0                	callq  *%rax
  return 0;
  40cc45:	31 ed                	xor    %ebp,%ebp
  40cc47:	e9 c4 e3 ff ff       	jmpq   40b010 <main+0x1320>
	__throw_bad_cast();
  40cc4c:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40cc53:	ff ff ff 
  40cc56:	48 01 d8             	add    %rbx,%rax
  40cc59:	ff d0                	callq  *%rax
  40cc5b:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40cc62:	ff ff ff 
  40cc65:	48 01 d8             	add    %rbx,%rax
  40cc68:	ff d0                	callq  *%rax
  40cc6a:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40cc71:	ff ff ff 
  40cc74:	48 01 d8             	add    %rbx,%rax
  40cc77:	ff d0                	callq  *%rax
  40cc79:	48 89 c5             	mov    %rax,%rbp
    std::ofstream out(outputFile);
  40cc7c:	48 b8 f0 e8 dd ff ff 	movabs $0xffffffffffdde8f0,%rax
  40cc83:	ff ff ff 
  40cc86:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40cc8b:	49 89 df             	mov    %rbx,%r15
  40cc8e:	48 01 d8             	add    %rbx,%rax
  40cc91:	ff d0                	callq  *%rax
  40cc93:	e9 53 fb ff ff       	jmpq   40c7eb <main+0x2afb>
	__ostream_insert(__out, __s,
  40cc98:	48 b8 f3 82 df ff ff 	movabs $0xffffffffffdf82f3,%rax
  40cc9f:	ff ff ff 
  40cca2:	ba 18 00 00 00       	mov    $0x18,%edx
  40cca7:	49 89 df             	mov    %rbx,%r15
  40ccaa:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40ccae:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  40ccb5:	ff ff ff 
  40ccb8:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  40ccbc:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40ccc3:	ff ff ff 
  40ccc6:	48 01 d8             	add    %rbx,%rax
  40ccc9:	ff d0                	callq  *%rax
	return __pf(*this);
  40cccb:	48 b8 d0 31 de ff ff 	movabs $0xffffffffffde31d0,%rax
  40ccd2:	ff ff ff 
  40ccd5:	48 01 d8             	add    %rbx,%rax
  40ccd8:	ff d0                	callq  *%rax
  40ccda:	e9 e2 fe ff ff       	jmpq   40cbc1 <main+0x2ed1>
  40ccdf:	48 89 c5             	mov    %rax,%rbp
      __catch(...)
  40cce2:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  40cce9:	ff ff ff 
  40ccec:	49 89 df             	mov    %rbx,%r15
  40ccef:	48 01 d8             	add    %rbx,%rax
  40ccf2:	ff d0                	callq  *%rax
  40ccf4:	e9 54 fd ff ff       	jmpq   40ca4d <main+0x2d5d>
	    return &_M_single_bucket;
  40ccf9:	48 b8 50 bf 84 01 00 	movabs $0x184bf50,%rax
  40cd00:	00 00 00 
	    _M_single_bucket = nullptr;
  40cd03:	48 c7 44 1d 50 00 00 	movq   $0x0,0x50(%rbp,%rbx,1)
  40cd0a:	00 00 
	    return &_M_single_bucket;
  40cd0c:	48 01 d8             	add    %rbx,%rax
  40cd0f:	e9 94 e7 ff ff       	jmpq   40b4a8 <main+0x17b8>
	__builtin_memset(_M_buckets, 0,
  40cd14:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  40cd1b:	ff ff ff 
  40cd1e:	4a 8d 14 ed 00 00 00 	lea    0x0(,%r13,8),%rdx
  40cd25:	00 
  40cd26:	48 8b 7c 1d 20       	mov    0x20(%rbp,%rbx,1),%rdi
  40cd2b:	31 f6                	xor    %esi,%esi
  40cd2d:	49 89 df             	mov    %rbx,%r15
  40cd30:	48 01 d8             	add    %rbx,%rax
      __bucket_type* __former_buckets = nullptr;
  40cd33:	45 31 e4             	xor    %r12d,%r12d
	__builtin_memset(_M_buckets, 0,
  40cd36:	ff d0                	callq  *%rax
  40cd38:	e9 75 e7 ff ff       	jmpq   40b4b2 <main+0x17c2>
  40cd3d:	48 89 c5             	mov    %rax,%rbp
  40cd40:	48 b8 a0 be de ff ff 	movabs $0xffffffffffdebea0,%rax
  40cd47:	ff ff ff 
  40cd4a:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40cd4f:	e9 12 fd ff ff       	jmpq   40ca66 <main+0x2d76>
	  std::__throw_bad_alloc();
  40cd54:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  40cd5b:	ff ff ff 
  40cd5e:	48 be a0 be de ff ff 	movabs $0xffffffffffdebea0,%rsi
  40cd65:	ff ff ff 
  40cd68:	49 89 df             	mov    %rbx,%r15
  40cd6b:	48 01 d8             	add    %rbx,%rax
  40cd6e:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  40cd73:	ff d0                	callq  *%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  40cd75:	31 c0                	xor    %eax,%eax
  40cd77:	e9 e3 e5 ff ff       	jmpq   40b35f <main+0x166f>
  40cd7c:	49 89 c5             	mov    %rax,%r13
  40cd7f:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  40cd86:	ff ff ff 
  40cd89:	48 89 ef             	mov    %rbp,%rdi
  40cd8c:	49 89 df             	mov    %rbx,%r15
  40cd8f:	48 01 d8             	add    %rbx,%rax
  40cd92:	4c 89 ed             	mov    %r13,%rbp
  40cd95:	ff d0                	callq  *%rax
  40cd97:	e9 df fa ff ff       	jmpq   40c87b <main+0x2b8b>
  40cd9c:	48 89 c5             	mov    %rax,%rbp
  40cd9f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40cda4:	48 8b bc 24 b0 04 00 	mov    0x4b0(%rsp),%rdi
  40cdab:	00 
  40cdac:	48 83 c0 10          	add    $0x10,%rax
  40cdb0:	48 39 c7             	cmp    %rax,%rdi
  40cdb3:	0f 84 42 f9 ff ff    	je     40c6fb <main+0x2a0b>
      { ::operator delete(__p); }
  40cdb9:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  40cdc0:	ff ff ff 
  40cdc3:	49 89 df             	mov    %rbx,%r15
  40cdc6:	48 01 da             	add    %rbx,%rdx
  40cdc9:	ff d2                	callq  *%rdx
  40cdcb:	e9 2b f9 ff ff       	jmpq   40c6fb <main+0x2a0b>
  40cdd0:	48 89 c5             	mov    %rax,%rbp
  40cdd3:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40cdda:	00 
  40cddb:	48 85 ff             	test   %rdi,%rdi
  40cdde:	74 0f                	je     40cdef <main+0x30ff>
  40cde0:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40cde7:	ff ff ff 
  40cdea:	48 01 d8             	add    %rbx,%rax
  40cded:	ff d0                	callq  *%rax
  40cdef:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40cdf6:	00 
  40cdf7:	48 85 ff             	test   %rdi,%rdi
  40cdfa:	74 0f                	je     40ce0b <main+0x311b>
  40cdfc:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40ce03:	ff ff ff 
  40ce06:	48 01 d8             	add    %rbx,%rax
  40ce09:	ff d0                	callq  *%rax
  for (const auto& node : config["map"]["obstacles"]) {
  40ce0b:	48 b8 c0 ba de ff ff 	movabs $0xffffffffffdebac0,%rax
  40ce12:	ff ff ff 
  40ce15:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40ce1a:	48 01 d8             	add    %rbx,%rax
  40ce1d:	ff d0                	callq  *%rax
  40ce1f:	48 8b bc 24 d8 02 00 	mov    0x2d8(%rsp),%rdi
  40ce26:	00 
  40ce27:	48 85 ff             	test   %rdi,%rdi
  40ce2a:	74 0f                	je     40ce3b <main+0x314b>
  40ce2c:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40ce33:	ff ff ff 
  40ce36:	48 01 d8             	add    %rbx,%rax
  40ce39:	ff d0                	callq  *%rax
  40ce3b:	48 8b bc 24 a8 02 00 	mov    0x2a8(%rsp),%rdi
  40ce42:	00 
  40ce43:	48 85 ff             	test   %rdi,%rdi
  40ce46:	74 0f                	je     40ce57 <main+0x3167>
  40ce48:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40ce4f:	ff ff ff 
  40ce52:	48 01 d8             	add    %rbx,%rax
  40ce55:	ff d0                	callq  *%rax
  40ce57:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  40ce5e:	00 
  40ce5f:	48 85 ff             	test   %rdi,%rdi
  40ce62:	0f 84 74 f9 ff ff    	je     40c7dc <main+0x2aec>
  40ce68:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40ce6f:	ff ff ff 
  40ce72:	48 01 d8             	add    %rbx,%rax
  40ce75:	ff d0                	callq  *%rax
  40ce77:	e9 60 f9 ff ff       	jmpq   40c7dc <main+0x2aec>
  40ce7c:	48 89 c5             	mov    %rax,%rbp
  40ce7f:	e9 6b ff ff ff       	jmpq   40cdef <main+0x30ff>
  40ce84:	4d 85 e4             	test   %r12,%r12
  40ce87:	48 89 c5             	mov    %rax,%rbp
  40ce8a:	74 1a                	je     40cea6 <main+0x31b6>
  40ce8c:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40ce93:	ff ff ff 
  40ce96:	4c 89 e7             	mov    %r12,%rdi
  40ce99:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  40ce9d:	41 ff d5             	callq  *%r13
  40cea0:	4c 89 e7             	mov    %r12,%rdi
  40cea3:	41 ff d5             	callq  *%r13
  40cea6:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  40cead:	00 
  40ceae:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  40ceb5:	00 
  40ceb6:	48 83 c0 10          	add    $0x10,%rax
  40ceba:	48 39 c7             	cmp    %rax,%rdi
  40cebd:	74 12                	je     40ced1 <main+0x31e1>
  40cebf:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40cec6:	ff ff ff 
  40cec9:	49 89 df             	mov    %rbx,%r15
  40cecc:	48 01 d8             	add    %rbx,%rax
  40cecf:	ff d0                	callq  *%rax
  40ced1:	4d 85 e4             	test   %r12,%r12
  40ced4:	0f 84 a1 f9 ff ff    	je     40c87b <main+0x2b8b>
  40ceda:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40cee1:	ff ff ff 
  40cee4:	4c 89 e7             	mov    %r12,%rdi
  40cee7:	48 01 d8             	add    %rbx,%rax
  40ceea:	ff d0                	callq  *%rax
  40ceec:	e9 8a f9 ff ff       	jmpq   40c87b <main+0x2b8b>
  40cef1:	48 89 c5             	mov    %rax,%rbp
  40cef4:	e9 12 ff ff ff       	jmpq   40ce0b <main+0x311b>
  40cef9:	48 89 c5             	mov    %rax,%rbp
  40cefc:	e9 3a ff ff ff       	jmpq   40ce3b <main+0x314b>
  40cf01:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40cf08:	00 
  40cf09:	48 89 c5             	mov    %rax,%rbp
  40cf0c:	48 85 ff             	test   %rdi,%rdi
  40cf0f:	0f 84 c7 f8 ff ff    	je     40c7dc <main+0x2aec>
  40cf15:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40cf1c:	ff ff ff 
  40cf1f:	48 01 d8             	add    %rbx,%rax
  40cf22:	ff d0                	callq  *%rax
  40cf24:	e9 b3 f8 ff ff       	jmpq   40c7dc <main+0x2aec>
      ~basic_ios() { }
  40cf29:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40cf30:	ff ff ff 
  40cf33:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40cf38:	49 89 df             	mov    %rbx,%r15
  40cf3b:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40cf3f:	48 83 c7 70          	add    $0x70,%rdi
  40cf43:	48 83 c0 10          	add    $0x10,%rax
  40cf47:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40cf4e:	00 
  40cf4f:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  40cf56:	ff ff ff 
  40cf59:	48 01 d8             	add    %rbx,%rax
  40cf5c:	ff d0                	callq  *%rax
            lexical_istream_limited_src() BOOST_NOEXCEPT
  40cf5e:	48 b8 30 e4 dd ff ff 	movabs $0xffffffffffdde430,%rax
  40cf65:	ff ff ff 
  40cf68:	48 01 d8             	add    %rbx,%rax
  40cf6b:	ff d0                	callq  *%rax
  40cf6d:	48 83 ea 01          	sub    $0x1,%rdx
  40cf71:	0f 85 2a 01 00 00    	jne    40d0a1 <main+0x33b1>
  } catch (po::error& e) {
  40cf77:	48 89 c7             	mov    %rax,%rdi
  40cf7a:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  40cf81:	ff ff ff 
  40cf84:	49 89 df             	mov    %rbx,%r15
  40cf87:	48 01 d8             	add    %rbx,%rax
    std::cerr << e.what() << std::endl << std::endl;
  40cf8a:	48 bd e8 ff ff ff ff 	movabs $0xffffffffffffffe8,%rbp
  40cf91:	ff ff ff 
  } catch (po::error& e) {
  40cf94:	ff d0                	callq  *%rax
    std::cerr << e.what() << std::endl << std::endl;
  40cf96:	48 8b 10             	mov    (%rax),%rdx
  40cf99:	48 89 c7             	mov    %rax,%rdi
  40cf9c:	ff 52 10             	callq  *0x10(%rdx)
  40cf9f:	48 89 c6             	mov    %rax,%rsi
  40cfa2:	48 b8 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rax
  40cfa9:	ff ff ff 
  40cfac:	48 8b 7c 1d 00       	mov    0x0(%rbp,%rbx,1),%rdi
  40cfb1:	48 01 d8             	add    %rbx,%rax
  40cfb4:	ff d0                	callq  *%rax
  40cfb6:	48 89 c7             	mov    %rax,%rdi
  40cfb9:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  40cfc0:	ff ff ff 
  40cfc3:	49 89 c6             	mov    %rax,%r14
  40cfc6:	48 01 d8             	add    %rbx,%rax
  40cfc9:	ff d0                	callq  *%rax
  40cfcb:	48 89 c7             	mov    %rax,%rdi
  40cfce:	4c 89 f0             	mov    %r14,%rax
  40cfd1:	48 01 d8             	add    %rbx,%rax
  40cfd4:	ff d0                	callq  *%rax
    std::cerr << desc << std::endl;
  40cfd6:	48 b8 00 e4 dd ff ff 	movabs $0xffffffffffdde400,%rax
  40cfdd:	ff ff ff 
  40cfe0:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  40cfe5:	48 8b 7c 1d 00       	mov    0x0(%rbp,%rbx,1),%rdi
  40cfea:	48 01 d8             	add    %rbx,%rax
  40cfed:	ff d0                	callq  *%rax
  40cfef:	48 89 c7             	mov    %rax,%rdi
  40cff2:	4c 89 f0             	mov    %r14,%rax
  40cff5:	48 01 d8             	add    %rbx,%rax
  40cff8:	ff d0                	callq  *%rax
  } catch (po::error& e) {
  40cffa:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  40d001:	ff ff ff 
    return 1;
  40d004:	bd 01 00 00 00       	mov    $0x1,%ebp
  } catch (po::error& e) {
  40d009:	48 01 d8             	add    %rbx,%rax
  40d00c:	ff d0                	callq  *%rax
  40d00e:	e9 fd df ff ff       	jmpq   40b010 <main+0x1320>
  40d013:	48 89 c5             	mov    %rax,%rbp
      ~basic_ostream() { }
  40d016:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40d01a:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40d01f:	49 89 df             	mov    %rbx,%r15
  40d022:	48 83 c0 18          	add    $0x18,%rax
  40d026:	49 8d 7e 70          	lea    0x70(%r14),%rdi
  40d02a:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  40d031:	00 
  40d032:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40d039:	ff ff ff 
  40d03c:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40d040:	48 83 c0 10          	add    $0x10,%rax
  40d044:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40d04b:	00 
  40d04c:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  40d053:	ff ff ff 
  40d056:	48 01 d8             	add    %rbx,%rax
  40d059:	ff d0                	callq  *%rax
  40d05b:	48 b8 50 fc ff ff ff 	movabs $0xfffffffffffffc50,%rax
  40d062:	ff ff ff 
  40d065:	4c 89 f7             	mov    %r14,%rdi
  40d068:	48 01 d8             	add    %rbx,%rax
  40d06b:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40d072:	00 
  40d073:	48 b8 d0 bb de ff ff 	movabs $0xffffffffffdebbd0,%rax
  40d07a:	ff ff ff 
  40d07d:	48 01 d8             	add    %rbx,%rax
  40d080:	ff d0                	callq  *%rax
  40d082:	e9 e8 f5 ff ff       	jmpq   40c66f <main+0x297f>
  40d087:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  40d08e:	ff ff ff 
  40d091:	48 89 c5             	mov    %rax,%rbp
  40d094:	49 89 df             	mov    %rbx,%r15
  40d097:	48 01 da             	add    %rbx,%rdx
  40d09a:	ff d2                	callq  *%rdx
  40d09c:	e9 f6 f5 ff ff       	jmpq   40c697 <main+0x29a7>
  40d0a1:	48 89 c5             	mov    %rax,%rbp
  40d0a4:	e9 ee f5 ff ff       	jmpq   40c697 <main+0x29a7>
  40d0a9:	48 89 c5             	mov    %rax,%rbp
  40d0ac:	e9 a6 fd ff ff       	jmpq   40ce57 <main+0x3167>
  40d0b1:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40d0b8:	00 
  40d0b9:	48 89 c5             	mov    %rax,%rbp
  40d0bc:	48 85 ff             	test   %rdi,%rdi
  40d0bf:	0f 84 17 f7 ff ff    	je     40c7dc <main+0x2aec>
  40d0c5:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40d0cc:	ff ff ff 
  40d0cf:	48 01 d8             	add    %rbx,%rax
  40d0d2:	ff d0                	callq  *%rax
  40d0d4:	e9 03 f7 ff ff       	jmpq   40c7dc <main+0x2aec>
  40d0d9:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40d0e0:	00 
  40d0e1:	48 89 c5             	mov    %rax,%rbp
  40d0e4:	48 85 ff             	test   %rdi,%rdi
  40d0e7:	0f 84 ef f6 ff ff    	je     40c7dc <main+0x2aec>
  40d0ed:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40d0f4:	ff ff ff 
  40d0f7:	48 01 d8             	add    %rbx,%rax
  40d0fa:	ff d0                	callq  *%rax
  40d0fc:	e9 db f6 ff ff       	jmpq   40c7dc <main+0x2aec>
  40d101:	48 89 c5             	mov    %rax,%rbp
  40d104:	e9 e2 f6 ff ff       	jmpq   40c7eb <main+0x2afb>
  40d109:	48 89 c5             	mov    %rax,%rbp
  40d10c:	e9 af f6 ff ff       	jmpq   40c7c0 <main+0x2ad0>
  40d111:	48 89 c5             	mov    %rax,%rbp
  40d114:	e9 8b f6 ff ff       	jmpq   40c7a4 <main+0x2ab4>
    throw InvalidNode();
  40d119:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  40d120:	ff ff ff 
  40d123:	bf 40 00 00 00       	mov    $0x40,%edi
  40d128:	49 89 df             	mov    %rbx,%r15
  40d12b:	48 01 d8             	add    %rbx,%rax
  40d12e:	ff d0                	callq  *%rax
  40d130:	48 89 c5             	mov    %rax,%rbp
  40d133:	48 89 c7             	mov    %rax,%rdi
  40d136:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  40d13d:	ff ff ff 
  40d140:	48 01 d8             	add    %rbx,%rax
  40d143:	ff d0                	callq  *%rax
  40d145:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  40d14c:	ff ff ff 
  40d14f:	48 89 ef             	mov    %rbp,%rdi
  40d152:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40d156:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  40d15d:	ff ff ff 
  40d160:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40d164:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  40d16b:	ff ff ff 
  40d16e:	48 01 d8             	add    %rbx,%rax
  40d171:	ff d0                	callq  *%rax
  40d173:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  40d17a:	ff ff ff 
  40d17d:	bf 40 00 00 00       	mov    $0x40,%edi
  40d182:	49 89 df             	mov    %rbx,%r15
  40d185:	48 01 d8             	add    %rbx,%rax
  40d188:	ff d0                	callq  *%rax
  40d18a:	48 89 c5             	mov    %rax,%rbp
  40d18d:	48 89 c7             	mov    %rax,%rdi
  40d190:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  40d197:	ff ff ff 
  40d19a:	48 01 d8             	add    %rbx,%rax
  40d19d:	ff d0                	callq  *%rax
  40d19f:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  40d1a6:	ff ff ff 
  40d1a9:	48 89 ef             	mov    %rbp,%rdi
  40d1ac:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40d1b0:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  40d1b7:	ff ff ff 
  40d1ba:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40d1be:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  40d1c5:	ff ff ff 
  40d1c8:	48 01 d8             	add    %rbx,%rax
  40d1cb:	ff d0                	callq  *%rax
  40d1cd:	49 89 c4             	mov    %rax,%r12
  40d1d0:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  40d1d7:	ff ff ff 
  40d1da:	48 89 ef             	mov    %rbp,%rdi
  40d1dd:	49 89 df             	mov    %rbx,%r15
  40d1e0:	48 01 d8             	add    %rbx,%rax
  40d1e3:	4c 89 e5             	mov    %r12,%rbp
  40d1e6:	ff d0                	callq  *%rax
  40d1e8:	e9 87 f5 ff ff       	jmpq   40c774 <main+0x2a84>
  40d1ed:	49 89 c4             	mov    %rax,%r12
  40d1f0:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  40d1f7:	ff ff ff 
  40d1fa:	48 89 ef             	mov    %rbp,%rdi
  40d1fd:	49 89 df             	mov    %rbx,%r15
  40d200:	48 01 d8             	add    %rbx,%rax
  40d203:	4c 89 e5             	mov    %r12,%rbp
  40d206:	ff d0                	callq  *%rax
  40d208:	e9 cc f6 ff ff       	jmpq   40c8d9 <main+0x2be9>
  40d20d:	48 89 c5             	mov    %rax,%rbp
  40d210:	e9 c4 f6 ff ff       	jmpq   40c8d9 <main+0x2be9>
  40d215:	4c 89 e7             	mov    %r12,%rdi
  return false;
  40d218:	31 ed                	xor    %ebp,%ebp
  40d21a:	41 ff d6             	callq  *%r14
  40d21d:	4c 89 e7             	mov    %r12,%rdi
  40d220:	41 ff d6             	callq  *%r14
  40d223:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40d22a:	00 
  40d22b:	e9 4c ea ff ff       	jmpq   40bc7c <main+0x1f8c>
  40d230:	48 89 c5             	mov    %rax,%rbp
  40d233:	e9 a8 f7 ff ff       	jmpq   40c9e0 <main+0x2cf0>
  40d238:	48 89 c5             	mov    %rax,%rbp
  40d23b:	e9 34 f5 ff ff       	jmpq   40c774 <main+0x2a84>
  40d240:	48 89 c5             	mov    %rax,%rbp
  40d243:	e9 15 f5 ff ff       	jmpq   40c75d <main+0x2a6d>
  40d248:	48 b8 8c eb dd ff ff 	movabs $0xffffffffffddeb8c,%rax
  40d24f:	ff ff ff 
  40d252:	48 01 d8             	add    %rbx,%rax
  40d255:	ff d0                	callq  *%rax
  40d257:	49 89 c4             	mov    %rax,%r12
  40d25a:	48 89 d5             	mov    %rdx,%rbp
    po::variables_map vm;
  40d25d:	48 b8 80 51 df ff ff 	movabs $0xffffffffffdf5180,%rax
  40d264:	ff ff ff 
  40d267:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40d26c:	48 01 d8             	add    %rbx,%rax
  40d26f:	ff d0                	callq  *%rax
  40d271:	4c 89 e0             	mov    %r12,%rax
  40d274:	48 89 ea             	mov    %rbp,%rdx
  40d277:	e9 f1 fc ff ff       	jmpq   40cf6d <main+0x327d>
  40d27c:	49 89 c4             	mov    %rax,%r12
  40d27f:	48 b8 90 c3 de ff ff 	movabs $0xffffffffffdec390,%rax
  40d286:	ff ff ff 
  40d289:	48 89 d5             	mov    %rdx,%rbp
  40d28c:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40d291:	48 01 d8             	add    %rbx,%rax
  40d294:	ff d0                	callq  *%rax
      if (vtable) {
  40d296:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  40d29d:	00 
  40d29e:	48 85 c0             	test   %rax,%rax
  40d2a1:	74 ba                	je     40d25d <main+0x356d>
        if (!this->has_trivial_copy_and_destroy())
  40d2a3:	a8 01                	test   $0x1,%al
  40d2a5:	75 b6                	jne    40d25d <main+0x356d>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40d2a7:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  40d2ab:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  40d2ae:	48 85 c0             	test   %rax,%rax
  40d2b1:	74 aa                	je     40d25d <main+0x356d>
            base.manager(functor, functor, destroy_functor_tag);
  40d2b3:	48 8d bc 24 18 03 00 	lea    0x318(%rsp),%rdi
  40d2ba:	00 
  40d2bb:	ba 02 00 00 00       	mov    $0x2,%edx
  40d2c0:	48 89 fe             	mov    %rdi,%rsi
  40d2c3:	ff d0                	callq  *%rax
  40d2c5:	eb 96                	jmp    40d25d <main+0x356d>
  40d2c7:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40d2ce:	00 
  40d2cf:	48 89 c5             	mov    %rax,%rbp
  40d2d2:	48 85 ff             	test   %rdi,%rdi
  40d2d5:	74 0f                	je     40d2e6 <main+0x35f6>
  40d2d7:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40d2de:	ff ff ff 
  40d2e1:	48 01 d8             	add    %rbx,%rax
  40d2e4:	ff d0                	callq  *%rax
  40d2e6:	48 b8 a0 be de ff ff 	movabs $0xffffffffffdebea0,%rax
  40d2ed:	ff ff ff 
  40d2f0:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40d2f5:	e9 0d f5 ff ff       	jmpq   40c807 <main+0x2b17>
  40d2fa:	49 89 c4             	mov    %rax,%r12
    class basic_command_line_parser : private detail::cmdline {
  40d2fd:	48 b8 00 c3 de ff ff 	movabs $0xffffffffffdec300,%rax
  40d304:	ff ff ff 
  40d307:	48 89 d5             	mov    %rdx,%rbp
  40d30a:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40d30f:	48 01 d8             	add    %rbx,%rax
  40d312:	ff d0                	callq  *%rax
      if (vtable) {
  40d314:	48 8b 94 24 e0 02 00 	mov    0x2e0(%rsp),%rdx
  40d31b:	00 
  40d31c:	48 85 d2             	test   %rdx,%rdx
  40d31f:	0f 84 71 ff ff ff    	je     40d296 <main+0x35a6>
        if (!this->has_trivial_copy_and_destroy())
  40d325:	f6 c2 01             	test   $0x1,%dl
  40d328:	0f 85 68 ff ff ff    	jne    40d296 <main+0x35a6>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40d32e:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
  40d332:	48 8b 02             	mov    (%rdx),%rax
          if (base.manager)
  40d335:	48 85 c0             	test   %rax,%rax
  40d338:	0f 84 58 ff ff ff    	je     40d296 <main+0x35a6>
            base.manager(functor, functor, destroy_functor_tag);
  40d33e:	48 8d bc 24 e8 02 00 	lea    0x2e8(%rsp),%rdi
  40d345:	00 
  40d346:	ba 02 00 00 00       	mov    $0x2,%edx
  40d34b:	48 89 fe             	mov    %rdi,%rsi
  40d34e:	ff d0                	callq  *%rax
  40d350:	e9 41 ff ff ff       	jmpq   40d296 <main+0x35a6>
  40d355:	49 89 c4             	mov    %rax,%r12
  40d358:	48 89 d5             	mov    %rdx,%rbp
  40d35b:	eb b7                	jmp    40d314 <main+0x3624>
	  return iterator(__node);
	}
      __catch(...)
  40d35d:	48 89 c7             	mov    %rax,%rdi
  40d360:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  40d367:	ff ff ff 
  40d36a:	49 89 df             	mov    %rbx,%r15
  40d36d:	48 01 d8             	add    %rbx,%rax
  40d370:	ff d0                	callq  *%rax
  40d372:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40d379:	ff ff ff 
  40d37c:	48 89 ef             	mov    %rbp,%rdi
  40d37f:	48 01 d8             	add    %rbx,%rax
  40d382:	ff d0                	callq  *%rax
	{
	  this->_M_deallocate_node(__node);
	  __throw_exception_again;
  40d384:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  40d38b:	ff ff ff 
  40d38e:	48 01 d8             	add    %rbx,%rax
  40d391:	ff d0                	callq  *%rax
  40d393:	48 89 c5             	mov    %rax,%rbp
  40d396:	e9 4b ff ff ff       	jmpq   40d2e6 <main+0x35f6>
  40d39b:	48 89 c5             	mov    %rax,%rbp
      __catch(...)
  40d39e:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  40d3a5:	ff ff ff 
  40d3a8:	49 89 df             	mov    %rbx,%r15
  40d3ab:	48 01 d8             	add    %rbx,%rax
  40d3ae:	ff d0                	callq  *%rax
  40d3b0:	e9 1e fa ff ff       	jmpq   40cdd3 <main+0x30e3>
  40d3b5:	48 89 c5             	mov    %rax,%rbp
  40d3b8:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40d3bf:	00 
  40d3c0:	48 85 ff             	test   %rdi,%rdi
  40d3c3:	0f 84 17 f6 ff ff    	je     40c9e0 <main+0x2cf0>
  40d3c9:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40d3d0:	ff ff ff 
  40d3d3:	48 01 d8             	add    %rbx,%rax
  40d3d6:	ff d0                	callq  *%rax
  40d3d8:	e9 03 f6 ff ff       	jmpq   40c9e0 <main+0x2cf0>
  40d3dd:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40d3e4:	00 
  40d3e5:	48 89 c5             	mov    %rax,%rbp
  40d3e8:	48 85 ff             	test   %rdi,%rdi
  40d3eb:	74 cb                	je     40d3b8 <main+0x36c8>
  40d3ed:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40d3f4:	ff ff ff 
  40d3f7:	48 01 d8             	add    %rbx,%rax
  40d3fa:	ff d0                	callq  *%rax
  40d3fc:	eb ba                	jmp    40d3b8 <main+0x36c8>
  40d3fe:	4d 85 e4             	test   %r12,%r12
  40d401:	48 89 c5             	mov    %rax,%rbp
  40d404:	74 1a                	je     40d420 <main+0x3730>
  40d406:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  40d40d:	ff ff ff 
  40d410:	4c 89 e7             	mov    %r12,%rdi
  40d413:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  40d417:	41 ff d5             	callq  *%r13
  40d41a:	4c 89 e7             	mov    %r12,%rdi
  40d41d:	41 ff d5             	callq  *%r13
  40d420:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  40d427:	00 
  40d428:	48 8b bc 24 20 02 00 	mov    0x220(%rsp),%rdi
  40d42f:	00 
  40d430:	48 83 c0 10          	add    $0x10,%rax
  40d434:	48 39 c7             	cmp    %rax,%rdi
  40d437:	74 12                	je     40d44b <main+0x375b>
  40d439:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40d440:	ff ff ff 
  40d443:	49 89 df             	mov    %rbx,%r15
  40d446:	48 01 d8             	add    %rbx,%rax
  40d449:	ff d0                	callq  *%rax
  40d44b:	4d 85 e4             	test   %r12,%r12
  40d44e:	0f 84 bf f2 ff ff    	je     40c713 <main+0x2a23>
  40d454:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  40d45b:	ff ff ff 
  40d45e:	4c 89 e7             	mov    %r12,%rdi
  40d461:	48 01 d8             	add    %rbx,%rax
  40d464:	ff d0                	callq  *%rax
  40d466:	e9 a8 f2 ff ff       	jmpq   40c713 <main+0x2a23>
  40d46b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040d470 <_GLOBAL__sub_I__ZlsRSoRK6Action>:
}
  40d470:	41 57                	push   %r15
  40d472:	41 55                	push   %r13
  40d474:	49 bb 90 db 21 00 00 	movabs $0x21db90,%r11
  40d47b:	00 00 00 
  40d47e:	41 54                	push   %r12
  40d480:	4c 8d 25 e9 ff ff ff 	lea    -0x17(%rip),%r12        # 40d470 <_GLOBAL__sub_I__ZlsRSoRK6Action>
  40d487:	55                   	push   %rbp
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  40d488:	48 b8 00 e9 dd ff ff 	movabs $0xffffffffffdde900,%rax
  40d48f:	ff ff ff 
  40d492:	53                   	push   %rbx
  40d493:	48 bb 18 3e 85 01 00 	movabs $0x1853e18,%rbx
  40d49a:	00 00 00 
  40d49d:	4d 01 dc             	add    %r11,%r12
  40d4a0:	48 bd d0 03 00 00 00 	movabs $0x3d0,%rbp
  40d4a7:	00 00 00 
  40d4aa:	49 8d 3c 1c          	lea    (%r12,%rbx,1),%rdi
  40d4ae:	4d 89 e7             	mov    %r12,%r15
  40d4b1:	4c 01 e0             	add    %r12,%rax
  40d4b4:	ff d0                	callq  *%rax
  40d4b6:	49 8d 34 1c          	lea    (%r12,%rbx,1),%rsi
  40d4ba:	48 b8 f8 ff ff ff ff 	movabs $0xfffffffffffffff8,%rax
  40d4c1:	ff ff ff 
  40d4c4:	48 bb e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rbx
  40d4cb:	ff ff ff 
  40d4ce:	4a 8d 54 25 00       	lea    0x0(%rbp,%r12,1),%rdx
  40d4d3:	49 8b 3c 04          	mov    (%r12,%rax,1),%rdi
  40d4d7:	4e 8d 2c 23          	lea    (%rbx,%r12,1),%r13
  40d4db:	41 ff d5             	callq  *%r13
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  40d4de:	48 b8 00 3e 85 01 00 	movabs $0x1853e00,%rax
  40d4e5:	00 00 00 




#define MAX_NODE_NUMS 210000
std::vector<State> g_initialStates __attribute__((aligned(SWARM_ALIGNMENT)));
  40d4e8:	4a 8d 54 25 00       	lea    0x0(%rbp,%r12,1),%rdx
  40d4ed:	49 c7 04 04 00 00 00 	movq   $0x0,(%r12,%rax,1)
  40d4f4:	00 
  40d4f5:	49 c7 44 04 08 00 00 	movq   $0x0,0x8(%r12,%rax,1)
  40d4fc:	00 00 
  40d4fe:	49 8d 34 04          	lea    (%r12,%rax,1),%rsi
  40d502:	49 c7 44 04 10 00 00 	movq   $0x0,0x10(%r12,%rax,1)
  40d509:	00 00 
  40d50b:	48 b8 10 86 de ff ff 	movabs $0xffffffffffde8610,%rax
  40d512:	ff ff ff 
  40d515:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  40d519:	41 ff d5             	callq  *%r13
  40d51c:	48 b8 c0 bf 84 01 00 	movabs $0x184bfc0,%rax
  40d523:	00 00 00 
  40d526:	4c 01 e0             	add    %r12,%rax
  40d529:	48 8d 90 40 7e 00 00 	lea    0x7e40(%rax),%rdx
	Cost cost;
};

struct PlanResult {
	PlanResult() {
		states_size = 0;
  40d530:	48 c7 80 00 04 00 00 	movq   $0x0,0x400(%rax)
  40d537:	00 00 00 00 
		actions_size = 0;
  40d53b:	48 c7 80 08 06 00 00 	movq   $0x0,0x608(%rax)
  40d542:	00 00 00 00 
  40d546:	48 05 50 06 00 00    	add    $0x650,%rax
		cost = 0;
  40d54c:	c7 40 c0 00 00 00 00 	movl   $0x0,-0x40(%rax)
		fmin = 0;
  40d553:	c7 40 c4 00 00 00 00 	movl   $0x0,-0x3c(%rax)
		success = false;
  40d55a:	c6 40 c8 00          	movb   $0x0,-0x38(%rax)
PlanResult g_solution[ROBOT_NUMS] __attribute__((aligned(SWARM_ALIGNMENT)));
  40d55e:	48 39 d0             	cmp    %rdx,%rax
  40d561:	75 cd                	jne    40d530 <_GLOBAL__sub_I__ZlsRSoRK6Action+0xc0>
      _Hashtable() = default;
  40d563:	48 ba 50 bf 84 01 00 	movabs $0x184bf50,%rdx
  40d56a:	00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40d56d:	49 bd 38 96 df ff ff 	movabs $0xffffffffffdf9638,%r13
  40d574:	ff ff ff 
  40d577:	48 b8 00 bf 84 01 00 	movabs $0x184bf00,%rax
  40d57e:	00 00 00 
  40d581:	4c 01 e2             	add    %r12,%rdx
  40d584:	f3 43 0f 10 44 25 00 	movss  0x0(%r13,%r12,1),%xmm0
  40d58b:	49 89 54 04 20       	mov    %rdx,0x20(%r12,%rax,1)
  40d590:	49 c7 04 04 00 00 00 	movq   $0x0,(%r12,%rax,1)
  40d597:	00 
  40d598:	f3 41 0f 11 44 04 40 	movss  %xmm0,0x40(%r12,%rax,1)
  40d59f:	49 c7 44 04 08 00 00 	movq   $0x0,0x8(%r12,%rax,1)
  40d5a6:	00 00 
  40d5a8:	49 c7 44 04 10 00 00 	movq   $0x0,0x10(%r12,%rax,1)
  40d5af:	00 00 
bool g_isNoConflict __attribute__((aligned(SWARM_ALIGNMENT)));
Environment g_env __attribute__((aligned(SWARM_ALIGNMENT)));
  40d5b1:	49 8d 34 04          	lea    (%r12,%rax,1),%rsi
  40d5b5:	49 c7 44 04 28 01 00 	movq   $0x1,0x28(%r12,%rax,1)
  40d5bc:	00 00 
  40d5be:	4a 8d 54 25 00       	lea    0x0(%rbp,%r12,1),%rdx
  40d5c3:	4d 89 e7             	mov    %r12,%r15
    _Hash_node_base() noexcept : _M_nxt() { }
  40d5c6:	49 c7 44 04 30 00 00 	movq   $0x0,0x30(%r12,%rax,1)
  40d5cd:	00 00 
  40d5cf:	49 c7 44 04 38 00 00 	movq   $0x0,0x38(%r12,%rax,1)
  40d5d6:	00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40d5d8:	49 c7 44 04 48 00 00 	movq   $0x0,0x48(%r12,%rax,1)
  40d5df:	00 00 
  40d5e1:	49 c7 44 04 50 00 00 	movq   $0x0,0x50(%r12,%rax,1)
  40d5e8:	00 00 
        m_lowLevelExpanded(0) {}
  40d5ea:	41 c7 44 04 58 00 00 	movl   $0x0,0x58(%r12,%rax,1)
  40d5f1:	00 00 
  40d5f3:	41 c7 44 04 5c 00 00 	movl   $0x0,0x5c(%r12,%rax,1)
  40d5fa:	00 00 
  40d5fc:	48 b8 d0 9c de ff ff 	movabs $0xffffffffffde9cd0,%rax
  40d603:	ff ff ff 
  40d606:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  40d60a:	4a 8d 04 23          	lea    (%rbx,%r12,1),%rax
  40d60e:	ff d0                	callq  *%rax
  40d610:	48 b8 40 be 83 01 00 	movabs $0x183be40,%rax
  40d617:	00 00 00 
  40d61a:	4c 01 e0             	add    %r12,%rax
  40d61d:	48 8d 90 40 7e 00 00 	lea    0x7e40(%rax),%rdx
  40d624:	0f 1f 40 00          	nopl   0x0(%rax)
		states_size = 0;
  40d628:	48 c7 80 00 04 00 00 	movq   $0x0,0x400(%rax)
  40d62f:	00 00 00 00 
		actions_size = 0;
  40d633:	48 c7 80 08 06 00 00 	movq   $0x0,0x608(%rax)
  40d63a:	00 00 00 00 
  40d63e:	48 05 50 06 00 00    	add    $0x650,%rax
		cost = 0;
  40d644:	c7 40 c0 00 00 00 00 	movl   $0x0,-0x40(%rax)
		fmin = 0;
  40d64b:	c7 40 c4 00 00 00 00 	movl   $0x0,-0x3c(%rax)
		success = false;
  40d652:	c6 40 c8 00          	movb   $0x0,-0x38(%rax)
				openSet_t;
				typedef typename openSet_t::handle_type handle_t;
#endif // USE_FIBONACCI_HEAP
#endif // NO_SWARM

struct HighLevelNode {
  40d656:	48 39 c2             	cmp    %rax,%rdx
  40d659:	75 cd                	jne    40d628 <_GLOBAL__sub_I__ZlsRSoRK6Action+0x1b8>
  40d65b:	48 ba 80 be 84 01 00 	movabs $0x184be80,%rdx
  40d662:	00 00 00 
  40d665:	4c 01 e2             	add    %r12,%rdx
  40d668:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40d66f:	00 
#include "swarm_headers.hpp"
#include "Constraint.hpp"

struct Constraints {
	Constraints() {
		vertexConstraints_size = 0;
  40d670:	c7 80 40 06 00 00 00 	movl   $0x0,0x640(%rax)
  40d677:	00 00 00 
		edgeConstraints_size = 0;
  40d67a:	c7 80 44 06 00 00 00 	movl   $0x0,0x644(%rax)
  40d681:	00 00 00 
  40d684:	48 05 80 06 00 00    	add    $0x680,%rax
  40d68a:	48 39 c2             	cmp    %rax,%rdx
  40d68d:	75 e1                	jne    40d670 <_GLOBAL__sub_I__ZlsRSoRK6Action+0x200>
  40d68f:	48 b8 a0 38 03 00 00 	movabs $0x338a0,%rax
  40d696:	00 00 00 
  40d699:	f3 43 0f 10 44 25 00 	movss  0x0(%r13,%r12,1),%xmm0
  40d6a0:	4c 01 e0             	add    %r12,%rax
openSet_t g_open;
focalSet_t g_focal;
Cost bestCost;
#endif
//######################low level setup
std::unordered_map<State, std::tuple<State, Action, Cost, Cost>,StateHasher> cameFrom[MAX_NODE_NUMS];
  40d6a3:	48 8d 88 80 71 b3 00 	lea    0xb37180(%rax),%rcx
  40d6aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40d6b0:	48 8d 50 30          	lea    0x30(%rax),%rdx
  40d6b4:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
  40d6bb:	00 
    _Hash_node_base() noexcept : _M_nxt() { }
  40d6bc:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  40d6c3:	00 
  40d6c4:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  40d6cb:	00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40d6cc:	f3 0f 11 40 20       	movss  %xmm0,0x20(%rax)
  40d6d1:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  40d6d8:	00 
  40d6d9:	48 89 10             	mov    %rdx,(%rax)
  40d6dc:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  40d6e3:	00 
  40d6e4:	48 83 c0 38          	add    $0x38,%rax
  40d6e8:	48 39 c8             	cmp    %rcx,%rax
  40d6eb:	75 c3                	jne    40d6b0 <_GLOBAL__sub_I__ZlsRSoRK6Action+0x240>
  40d6ed:	48 b8 00 31 de ff ff 	movabs $0xffffffffffde3100,%rax
  40d6f4:	ff ff ff 
  40d6f7:	4a 8d 54 25 00       	lea    0x0(%rbp,%r12,1),%rdx
  40d6fc:	31 f6                	xor    %esi,%esi
  40d6fe:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  40d702:	4a 8d 04 23          	lea    (%rbx,%r12,1),%rax
  40d706:	5b                   	pop    %rbx
  40d707:	5d                   	pop    %rbp
  40d708:	41 5c                	pop    %r12
  40d70a:	41 5d                	pop    %r13
  40d70c:	41 5f                	pop    %r15
  40d70e:	ff e0                	jmpq   *%rax

000000000040d710 <_start>:
  40d710:	31 ed                	xor    %ebp,%ebp
  40d712:	49 89 d1             	mov    %rdx,%r9
  40d715:	5e                   	pop    %rsi
  40d716:	48 89 e2             	mov    %rsp,%rdx
  40d719:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40d71d:	50                   	push   %rax
  40d71e:	54                   	push   %rsp
  40d71f:	49 c7 c0 30 2c 42 00 	mov    $0x422c30,%r8
  40d726:	48 c7 c1 c0 2b 42 00 	mov    $0x422bc0,%rcx
  40d72d:	48 c7 c7 f0 9c 40 00 	mov    $0x409cf0,%rdi
  40d734:	ff 15 9e d8 21 00    	callq  *0x21d89e(%rip)        # 62afd8 <__libc_start_main@GLIBC_2.2.5>
  40d73a:	f4                   	hlt    
  40d73b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040d740 <_dl_relocate_static_pie>:
  40d740:	f3 c3                	repz retq 
  40d742:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40d749:	00 00 00 
  40d74c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000040d750 <deregister_tm_clones>:
  40d750:	b8 ff b3 62 00       	mov    $0x62b3ff,%eax
  40d755:	55                   	push   %rbp
  40d756:	48 2d f8 b3 62 00    	sub    $0x62b3f8,%rax
  40d75c:	48 83 f8 0e          	cmp    $0xe,%rax
  40d760:	48 89 e5             	mov    %rsp,%rbp
  40d763:	76 1b                	jbe    40d780 <deregister_tm_clones+0x30>
  40d765:	b8 00 00 00 00       	mov    $0x0,%eax
  40d76a:	48 85 c0             	test   %rax,%rax
  40d76d:	74 11                	je     40d780 <deregister_tm_clones+0x30>
  40d76f:	5d                   	pop    %rbp
  40d770:	bf f8 b3 62 00       	mov    $0x62b3f8,%edi
  40d775:	ff e0                	jmpq   *%rax
  40d777:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40d77e:	00 00 
  40d780:	5d                   	pop    %rbp
  40d781:	c3                   	retq   
  40d782:	0f 1f 40 00          	nopl   0x0(%rax)
  40d786:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40d78d:	00 00 00 

000000000040d790 <register_tm_clones>:
  40d790:	be f8 b3 62 00       	mov    $0x62b3f8,%esi
  40d795:	55                   	push   %rbp
  40d796:	48 81 ee f8 b3 62 00 	sub    $0x62b3f8,%rsi
  40d79d:	48 c1 fe 03          	sar    $0x3,%rsi
  40d7a1:	48 89 e5             	mov    %rsp,%rbp
  40d7a4:	48 89 f0             	mov    %rsi,%rax
  40d7a7:	48 c1 e8 3f          	shr    $0x3f,%rax
  40d7ab:	48 01 c6             	add    %rax,%rsi
  40d7ae:	48 d1 fe             	sar    %rsi
  40d7b1:	74 15                	je     40d7c8 <register_tm_clones+0x38>
  40d7b3:	b8 00 00 00 00       	mov    $0x0,%eax
  40d7b8:	48 85 c0             	test   %rax,%rax
  40d7bb:	74 0b                	je     40d7c8 <register_tm_clones+0x38>
  40d7bd:	5d                   	pop    %rbp
  40d7be:	bf f8 b3 62 00       	mov    $0x62b3f8,%edi
  40d7c3:	ff e0                	jmpq   *%rax
  40d7c5:	0f 1f 00             	nopl   (%rax)
  40d7c8:	5d                   	pop    %rbp
  40d7c9:	c3                   	retq   
  40d7ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040d7d0 <__do_global_dtors_aux>:
  40d7d0:	80 3d 29 dc 21 00 00 	cmpb   $0x0,0x21dc29(%rip)        # 62b400 <completed.7664>
  40d7d7:	75 11                	jne    40d7ea <__do_global_dtors_aux+0x1a>
  40d7d9:	55                   	push   %rbp
  40d7da:	48 89 e5             	mov    %rsp,%rbp
  40d7dd:	e8 6e ff ff ff       	callq  40d750 <deregister_tm_clones>
  40d7e2:	5d                   	pop    %rbp
  40d7e3:	c6 05 16 dc 21 00 01 	movb   $0x1,0x21dc16(%rip)        # 62b400 <completed.7664>
  40d7ea:	f3 c3                	repz retq 
  40d7ec:	0f 1f 40 00          	nopl   0x0(%rax)

000000000040d7f0 <frame_dummy>:
  40d7f0:	bf 20 9f 62 00       	mov    $0x629f20,%edi
  40d7f5:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  40d7f9:	75 05                	jne    40d800 <frame_dummy+0x10>
  40d7fb:	eb 93                	jmp    40d790 <register_tm_clones>
  40d7fd:	0f 1f 00             	nopl   (%rax)
  40d800:	b8 00 00 00 00       	mov    $0x0,%eax
  40d805:	48 85 c0             	test   %rax,%rax
  40d808:	74 f1                	je     40d7fb <frame_dummy+0xb>
  40d80a:	55                   	push   %rbp
  40d80b:	48 89 e5             	mov    %rsp,%rbp
  40d80e:	ff d0                	callq  *%rax
  40d810:	5d                   	pop    %rbp
  40d811:	e9 7a ff ff ff       	jmpq   40d790 <register_tm_clones>
  40d816:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40d81d:	00 00 00 

000000000040d820 <_ZN5swarmL22task_exception_handlerEv>:
static void task_exception_handler() {
  40d820:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40d820 <_ZN5swarmL22task_exception_handlerEv>
  40d827:	49 bb e0 d7 21 00 00 	movabs $0x21d7e0,%r11
  40d82e:	00 00 00 
  40d831:	41 57                	push   %r15
  40d833:	4c 01 d8             	add    %r11,%rax
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d836:	b9 0a 04 00 00       	mov    $0x40a,%ecx
  40d83b:	48 87 c9             	xchg   %rcx,%rcx
    std::abort();  // if this fires, the task became non-speculative... not good
  40d83e:	48 ba 50 e5 dd ff ff 	movabs $0xffffffffffdde550,%rdx
  40d845:	ff ff ff 
  40d848:	49 89 c7             	mov    %rax,%r15
  40d84b:	48 01 c2             	add    %rax,%rdx
  40d84e:	ff d2                	callq  *%rdx

000000000040d850 <_ZN5swarmL10pls_workerEPv>:
static void* pls_worker(void* isMainThread) {
  40d850:	55                   	push   %rbp
  40d851:	48 8d 05 f8 ff ff ff 	lea    -0x8(%rip),%rax        # 40d850 <_ZN5swarmL10pls_workerEPv>
  40d858:	49 bb b0 d7 21 00 00 	movabs $0x21d7b0,%r11
  40d85f:	00 00 00 
  40d862:	48 89 e5             	mov    %rsp,%rbp
  40d865:	41 57                	push   %r15
  40d867:	41 56                	push   %r14
  40d869:	41 55                	push   %r13
  40d86b:	41 54                	push   %r12
  40d86d:	4c 01 d8             	add    %r11,%rax
  40d870:	53                   	push   %rbx
  40d871:	48 83 ec 78          	sub    $0x78,%rsp
    if (isMainThread) sim_stack_base(__builtin_frame_address(0));
  40d875:	48 85 ff             	test   %rdi,%rdi
  40d878:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
static void* pls_worker(void* isMainThread) {
  40d87f:	48 89 bd 70 ff ff ff 	mov    %rdi,-0x90(%rbp)
    if (isMainThread) sim_stack_base(__builtin_frame_address(0));
  40d886:	0f 84 2c 02 00 00    	je     40dab8 <_ZN5swarmL10pls_workerEPv+0x268>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40d88c:	b9 06 04 00 00       	mov    $0x406,%ecx
  40d891:	48 89 ef             	mov    %rbp,%rdi
  40d894:	48 87 c9             	xchg   %rcx,%rcx
    assert((!!swarm::__mainThreadFSAddr()) == (!!swarm::__mainThreadFSAddr()));
  40d897:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  40d89e:	48 b8 68 3e 85 01 00 	movabs $0x1853e68,%rax
  40d8a5:	00 00 00 
  40d8a8:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40d8af:	48 8b 04 30          	mov    (%rax,%rsi,1),%rax
  40d8b3:	48 85 c0             	test   %rax,%rax
  40d8b6:	0f 94 c1             	sete   %cl
  40d8b9:	0f 95 c2             	setne  %dl
  40d8bc:	38 d1                	cmp    %dl,%cl
  40d8be:	0f 84 63 02 00 00    	je     40db27 <_ZN5swarmL10pls_workerEPv+0x2d7>
    if (swarm::__mainThreadFSAddr()) {
  40d8c4:	48 85 c0             	test   %rax,%rax
  40d8c7:	0f 85 73 01 00 00    	jne    40da40 <_ZN5swarmL10pls_workerEPv+0x1f0>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d8cd:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d8d2:	48 87 c9             	xchg   %rcx,%rcx
    if (isMainThread) zsim_roi_begin();
  40d8d5:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
  40d8dc:	00 
  40d8dd:	74 5c                	je     40d93b <_ZN5swarmL10pls_workerEPv+0xeb>
// Op defs (some kept "zsim_XXX" for backwards compatibility)

#define HOOKS_STR  "HOOKS"

static inline void zsim_roi_begin(void) {
    fflush(NULL);
  40d8df:	4c 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%r14
  40d8e6:	48 bb e0 e7 dd ff ff 	movabs $0xffffffffffdde7e0,%rbx
  40d8ed:	ff ff ff 
  40d8f0:	31 ff                	xor    %edi,%edi
  40d8f2:	4d 89 f7             	mov    %r14,%r15
  40d8f5:	4c 01 f3             	add    %r14,%rbx
  40d8f8:	ff d3                	callq  *%rbx
  40d8fa:	48 b8 9f 80 df ff ff 	movabs $0xffffffffffdf809f,%rax
  40d901:	ff ff ff 
  40d904:	4c 89 f6             	mov    %r14,%rsi
  40d907:	48 ba 80 e3 dd ff ff 	movabs $0xffffffffffdde380,%rdx
  40d90e:	ff ff ff 
  40d911:	48 01 c6             	add    %rax,%rsi
  40d914:	4c 01 f2             	add    %r14,%rdx
  40d917:	bf 01 00 00 00       	mov    $0x1,%edi
  40d91c:	31 c0                	xor    %eax,%eax
  40d91e:	ff d2                	callq  *%rdx
    printf("[" HOOKS_STR "] ROI begin\n");
    fflush(stdout);
  40d920:	48 b8 70 ff ff ff ff 	movabs $0xffffffffffffff70,%rax
  40d927:	ff ff ff 
  40d92a:	49 8b 04 06          	mov    (%r14,%rax,1),%rax
  40d92e:	48 8b 38             	mov    (%rax),%rdi
  40d931:	ff d3                	callq  *%rbx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d933:	b9 01 04 00 00       	mov    $0x401,%ecx
  40d938:	48 87 c9             	xchg   %rcx,%rcx
  40d93b:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d940:	48 87 c9             	xchg   %rcx,%rcx
             * work without -fomit-frame-pointer...
             */
            : "rax", "rbx", "rdx", "rsi", "rdi",
            "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
            "flags", "memory"
            );
  40d943:	b9 00 08 00 00       	mov    $0x800,%ecx
  40d948:	55                   	push   %rbp
  40d949:	48 c7 c6 61 d9 40 00 	mov    $0x40d961,%rsi
  40d950:	48 c7 c7 61 d9 40 00 	mov    $0x40d961,%rdi
  40d957:	48 c7 c2 64 d9 40 00 	mov    $0x40d964,%rdx
  40d95e:	48 87 c9             	xchg   %rcx,%rcx
  40d961:	48 87 d2             	xchg   %rdx,%rdx
  40d964:	5d                   	pop    %rbp
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d965:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d96a:	48 87 c9             	xchg   %rcx,%rcx
    if (isMainThread) zsim_roi_end();
  40d96d:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
  40d974:	00 
  40d975:	74 5c                	je     40d9d3 <_ZN5swarmL10pls_workerEPv+0x183>
  40d977:	b9 02 04 00 00       	mov    $0x402,%ecx
  40d97c:	48 87 c9             	xchg   %rcx,%rcx
    fflush(NULL);
  40d97f:	4c 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%r14
  40d986:	48 bb e0 e7 dd ff ff 	movabs $0xffffffffffdde7e0,%rbx
  40d98d:	ff ff ff 
  40d990:	31 ff                	xor    %edi,%edi
  40d992:	4d 89 f7             	mov    %r14,%r15
  40d995:	4c 01 f3             	add    %r14,%rbx
  40d998:	ff d3                	callq  *%rbx
  40d99a:	48 b8 b2 80 df ff ff 	movabs $0xffffffffffdf80b2,%rax
  40d9a1:	ff ff ff 
  40d9a4:	4c 89 f6             	mov    %r14,%rsi
  40d9a7:	48 ba 80 e3 dd ff ff 	movabs $0xffffffffffdde380,%rdx
  40d9ae:	ff ff ff 
  40d9b1:	48 01 c6             	add    %rax,%rsi
  40d9b4:	bf 01 00 00 00       	mov    $0x1,%edi
  40d9b9:	31 c0                	xor    %eax,%eax
  40d9bb:	4c 01 f2             	add    %r14,%rdx
  40d9be:	ff d2                	callq  *%rdx
    fflush(stdout);
  40d9c0:	48 b8 70 ff ff ff ff 	movabs $0xffffffffffffff70,%rax
  40d9c7:	ff ff ff 
  40d9ca:	49 8b 04 06          	mov    (%r14,%rax,1),%rax
  40d9ce:	48 8b 38             	mov    (%rax),%rdi
  40d9d1:	ff d3                	callq  *%rbx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d9d3:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d9d8:	48 87 c9             	xchg   %rcx,%rcx
    if (swarm::__mainThreadFSAddr()) {
  40d9db:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40d9e2:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  40d9e9:	48 83 3c 30 00       	cmpq   $0x0,(%rax,%rsi,1)
  40d9ee:	74 37                	je     40da27 <_ZN5swarmL10pls_workerEPv+0x1d7>
  40d9f0:	49 89 f6             	mov    %rsi,%r14
    return syscall(SYS_arch_prctl, code, addr);
  40d9f3:	48 bb d0 e3 dd ff ff 	movabs $0xffffffffffdde3d0,%rbx
  40d9fa:	ff ff ff 
  40d9fd:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40da01:	be 02 10 00 00       	mov    $0x1002,%esi
  40da06:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da0b:	4d 89 f7             	mov    %r14,%r15
  40da0e:	31 c0                	xor    %eax,%eax
  40da10:	4c 01 f3             	add    %r14,%rbx
  40da13:	ff d3                	callq  *%rbx
  40da15:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40da19:	be 01 10 00 00       	mov    $0x1001,%esi
  40da1e:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da23:	31 c0                	xor    %eax,%eax
  40da25:	ff d3                	callq  *%rbx
}
  40da27:	48 83 c4 78          	add    $0x78,%rsp
  40da2b:	31 c0                	xor    %eax,%eax
  40da2d:	5b                   	pop    %rbx
  40da2e:	41 5c                	pop    %r12
  40da30:	41 5d                	pop    %r13
  40da32:	41 5e                	pop    %r14
  40da34:	41 5f                	pop    %r15
  40da36:	5d                   	pop    %rbp
  40da37:	c3                   	retq   
  40da38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40da3f:	00 
  40da40:	49 89 f6             	mov    %rsi,%r14
    return syscall(SYS_arch_prctl, code, addr);
  40da43:	48 bb d0 e3 dd ff ff 	movabs $0xffffffffffdde3d0,%rbx
  40da4a:	ff ff ff 
        __arch_prctl(ARCH_GET_FS,
  40da4d:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
    return syscall(SYS_arch_prctl, code, addr);
  40da51:	4d 89 f7             	mov    %r14,%r15
  40da54:	4c 01 f3             	add    %r14,%rbx
  40da57:	be 03 10 00 00       	mov    $0x1003,%esi
  40da5c:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da61:	31 c0                	xor    %eax,%eax
  40da63:	ff d3                	callq  *%rbx
        __arch_prctl(ARCH_GET_GS,
  40da65:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    return syscall(SYS_arch_prctl, code, addr);
  40da69:	be 04 10 00 00       	mov    $0x1004,%esi
  40da6e:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da73:	31 c0                	xor    %eax,%eax
  40da75:	ff d3                	callq  *%rbx
  40da77:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40da7e:	be 02 10 00 00       	mov    $0x1002,%esi
  40da83:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da88:	4a 8b 14 30          	mov    (%rax,%r14,1),%rdx
  40da8c:	31 c0                	xor    %eax,%eax
  40da8e:	ff d3                	callq  *%rbx
        __arch_prctl(ARCH_SET_GS, swarm::__mainThreadGSAddr());
  40da90:	48 b8 60 3e 85 01 00 	movabs $0x1853e60,%rax
  40da97:	00 00 00 
    return syscall(SYS_arch_prctl, code, addr);
  40da9a:	be 01 10 00 00       	mov    $0x1001,%esi
  40da9f:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40daa4:	49 8b 14 06          	mov    (%r14,%rax,1),%rdx
  40daa8:	31 c0                	xor    %eax,%eax
  40daaa:	ff d3                	callq  *%rbx
  40daac:	e9 1c fe ff ff       	jmpq   40d8cd <_ZN5swarmL10pls_workerEPv+0x7d>
  40dab1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    err = pthread_getattr_np(pthread_self(), &attr);
  40dab8:	4c 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%r14
  40dabf:	48 b8 f0 e6 dd ff ff 	movabs $0xffffffffffdde6f0,%rax
  40dac6:	ff ff ff 
  40dac9:	48 8d 5d 90          	lea    -0x70(%rbp),%rbx
  40dacd:	4d 89 f7             	mov    %r14,%r15
  40dad0:	4c 01 f0             	add    %r14,%rax
  40dad3:	ff d0                	callq  *%rax
  40dad5:	48 89 c7             	mov    %rax,%rdi
  40dad8:	48 b8 70 e8 dd ff ff 	movabs $0xffffffffffdde870,%rax
  40dadf:	ff ff ff 
  40dae2:	48 89 de             	mov    %rbx,%rsi
  40dae5:	4c 01 f0             	add    %r14,%rax
  40dae8:	ff d0                	callq  *%rax
    if (err != 0) std::abort();
  40daea:	85 c0                	test   %eax,%eax
  40daec:	75 7f                	jne    40db6d <_ZN5swarmL10pls_workerEPv+0x31d>
    err = pthread_attr_getstack(&attr, &stkaddr, &v);
  40daee:	48 89 df             	mov    %rbx,%rdi
  40daf1:	48 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%rbx
  40daf8:	48 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%rax
  40daff:	ff ff ff 
  40db02:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
  40db06:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
  40db0a:	48 01 d8             	add    %rbx,%rax
  40db0d:	49 89 df             	mov    %rbx,%r15
  40db10:	ff d0                	callq  *%rax
    if (err != 0) std::abort();
  40db12:	85 c0                	test   %eax,%eax
  40db14:	75 57                	jne    40db6d <_ZN5swarmL10pls_workerEPv+0x31d>
    return reinterpret_cast<uint64_t>(ptr);
  40db16:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40db1a:	b9 06 04 00 00       	mov    $0x406,%ecx
  40db1f:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40db22:	e9 70 fd ff ff       	jmpq   40d897 <_ZN5swarmL10pls_workerEPv+0x47>
    assert((!!swarm::__mainThreadFSAddr()) == (!!swarm::__mainThreadFSAddr()));
  40db27:	48 b8 50 85 df ff ff 	movabs $0xffffffffffdf8550,%rax
  40db2e:	ff ff ff 
  40db31:	48 89 f3             	mov    %rsi,%rbx
  40db34:	48 89 f7             	mov    %rsi,%rdi
  40db37:	48 8d 0c 06          	lea    (%rsi,%rax,1),%rcx
  40db3b:	48 b8 90 7c df ff ff 	movabs $0xffffffffffdf7c90,%rax
  40db42:	ff ff ff 
  40db45:	ba 6f 00 00 00       	mov    $0x6f,%edx
  40db4a:	48 8d 34 06          	lea    (%rsi,%rax,1),%rsi
  40db4e:	48 b8 d8 7c df ff ff 	movabs $0xffffffffffdf7cd8,%rax
  40db55:	ff ff ff 
  40db58:	49 89 df             	mov    %rbx,%r15
  40db5b:	48 01 c7             	add    %rax,%rdi
  40db5e:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  40db65:	ff ff ff 
  40db68:	48 01 d8             	add    %rbx,%rax
  40db6b:	ff d0                	callq  *%rax
    if (err != 0) std::abort();
  40db6d:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  40db74:	48 b8 50 e5 dd ff ff 	movabs $0xffffffffffdde550,%rax
  40db7b:	ff ff ff 
  40db7e:	49 89 ff             	mov    %rdi,%r15
  40db81:	48 01 f8             	add    %rdi,%rax
  40db84:	ff d0                	callq  *%rax
  40db86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40db8d:	00 00 00 

000000000040db90 <_ZL8getStatemPK10PlanResultm>:
		const PlanResult* solution, const size_t t) {
  40db90:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40db90 <_ZL8getStatemPK10PlanResultm>
  40db97:	49 bb 70 d4 21 00 00 	movabs $0x21d470,%r11
  40db9e:	00 00 00 
  40dba1:	48 83 ec 28          	sub    $0x28,%rsp
  40dba5:	4c 01 d8             	add    %r11,%rax
	assert(agentIdx < ROBOT_NUMS); // [TEST-removed]
  40dba8:	48 83 ff 13          	cmp    $0x13,%rdi
  40dbac:	77 4b                	ja     40dbf9 <_ZL8getStatemPK10PlanResultm+0x69>
	if (t < solution[agentIdx].states_size) {
  40dbae:	48 69 ff 50 06 00 00 	imul   $0x650,%rdi,%rdi
  40dbb5:	48 01 fe             	add    %rdi,%rsi
  40dbb8:	48 8b 86 00 04 00 00 	mov    0x400(%rsi),%rax
  40dbbf:	48 39 d0             	cmp    %rdx,%rax
  40dbc2:	77 2c                	ja     40dbf0 <_ZL8getStatemPK10PlanResultm+0x60>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40dbc4:	48 83 e8 01          	sub    $0x1,%rax
  40dbc8:	48 c1 e0 04          	shl    $0x4,%rax
  40dbcc:	48 01 c6             	add    %rax,%rsi
  40dbcf:	48 8b 06             	mov    (%rsi),%rax
  40dbd2:	48 89 44 24 14       	mov    %rax,0x14(%rsp)
  40dbd7:	8b 46 08             	mov    0x8(%rsi),%eax
  40dbda:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  40dbde:	89 c2                	mov    %eax,%edx
}
  40dbe0:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  40dbe5:	48 83 c4 28          	add    $0x28,%rsp
  40dbe9:	c3                   	retq   
  40dbea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
		return solution[agentIdx].states[t].state;
  40dbf0:	48 c1 e2 04          	shl    $0x4,%rdx
  40dbf4:	48 01 d6             	add    %rdx,%rsi
  40dbf7:	eb d6                	jmp    40dbcf <_ZL8getStatemPK10PlanResultm+0x3f>
  40dbf9:	48 ba e0 ea dd ff ff 	movabs $0xffffffffffddeae0,%rdx
  40dc00:	ff ff ff 
  40dc03:	48 01 d0             	add    %rdx,%rax
  40dc06:	ff d0                	callq  *%rax
  40dc08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40dc0f:	00 

000000000040dc10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.315>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
  40dc10:	41 57                	push   %r15
  40dc12:	41 55                	push   %r13
  40dc14:	49 bb f0 d3 21 00 00 	movabs $0x21d3f0,%r11
  40dc1b:	00 00 00 
  40dc1e:	41 54                	push   %r12
  40dc20:	55                   	push   %rbp
  40dc21:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 40dc10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.315>
  40dc28:	53                   	push   %rbx
  40dc29:	49 89 fc             	mov    %rdi,%r12
  40dc2c:	49 89 f5             	mov    %rsi,%r13
  40dc2f:	4c 01 dd             	add    %r11,%rbp
  40dc32:	48 83 ec 10          	sub    $0x10,%rsp
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  40dc36:	48 85 f6             	test   %rsi,%rsi
  40dc39:	75 2d                	jne    40dc68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.315+0x58>
  40dc3b:	48 85 d2             	test   %rdx,%rdx
  40dc3e:	74 28                	je     40dc68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.315+0x58>
	  std::__throw_logic_error(__N("basic_string::"
  40dc40:	48 b8 50 7d df ff ff 	movabs $0xffffffffffdf7d50,%rax
  40dc47:	ff ff ff 
  40dc4a:	49 89 ef             	mov    %rbp,%r15
  40dc4d:	48 8d 7c 05 00       	lea    0x0(%rbp,%rax,1),%rdi
  40dc52:	48 b8 50 e6 dd ff ff 	movabs $0xffffffffffdde650,%rax
  40dc59:	ff ff ff 
  40dc5c:	48 01 e8             	add    %rbp,%rax
  40dc5f:	ff d0                	callq  *%rax
  40dc61:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
  40dc68:	4c 29 ea             	sub    %r13,%rdx
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
  40dc6b:	48 83 fa 0f          	cmp    $0xf,%rdx
  40dc6f:	48 89 d3             	mov    %rdx,%rbx
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  40dc72:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
  40dc77:	77 27                	ja     40dca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.315+0x90>
	if (__n == 1)
  40dc79:	48 83 fb 01          	cmp    $0x1,%rbx
  40dc7d:	49 8b 3c 24          	mov    (%r12),%rdi
  40dc81:	74 6d                	je     40dcf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.315+0xe0>
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
  40dc83:	48 85 db             	test   %rbx,%rbx
  40dc86:	75 45                	jne    40dccd <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.315+0xbd>
      { _M_string_length = __length; }
  40dc88:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
      { __c1 = __c2; }
  40dc8d:	c6 04 1f 00          	movb   $0x0,(%rdi,%rbx,1)
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
      }
  40dc91:	48 83 c4 10          	add    $0x10,%rsp
  40dc95:	5b                   	pop    %rbx
  40dc96:	5d                   	pop    %rbp
  40dc97:	41 5c                	pop    %r12
  40dc99:	41 5d                	pop    %r13
  40dc9b:	41 5f                	pop    %r15
  40dc9d:	c3                   	retq   
  40dc9e:	66 90                	xchg   %ax,%ax
	    _M_data(_M_create(__dnew, size_type(0)));
  40dca0:	48 b8 50 ea dd ff ff 	movabs $0xffffffffffddea50,%rax
  40dca7:	ff ff ff 
  40dcaa:	4c 89 e7             	mov    %r12,%rdi
  40dcad:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  40dcb2:	31 d2                	xor    %edx,%edx
  40dcb4:	49 89 ef             	mov    %rbp,%r15
  40dcb7:	48 01 e8             	add    %rbp,%rax
  40dcba:	ff d0                	callq  *%rax
  40dcbc:	48 89 c7             	mov    %rax,%rdi
      { _M_dataplus._M_p = __p; }
  40dcbf:	49 89 04 24          	mov    %rax,(%r12)
      { _M_allocated_capacity = __capacity; }
  40dcc3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40dcc8:	49 89 44 24 10       	mov    %rax,0x10(%r12)
	  return __s1;
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  40dccd:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  40dcd4:	ff ff ff 
  40dcd7:	48 89 da             	mov    %rbx,%rdx
  40dcda:	4c 89 ee             	mov    %r13,%rsi
  40dcdd:	49 89 ef             	mov    %rbp,%r15
  40dce0:	48 01 e8             	add    %rbp,%rax
  40dce3:	ff d0                	callq  *%rax
  40dce5:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40dcea:	49 8b 3c 24          	mov    (%r12),%rdi
  40dcee:	eb 98                	jmp    40dc88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.315+0x78>
  40dcf0:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
      { __c1 = __c2; }
  40dcf5:	88 07                	mov    %al,(%rdi)
  40dcf7:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40dcfc:	49 8b 3c 24          	mov    (%r12),%rdi
  40dd00:	eb 86                	jmp    40dc88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.315+0x78>
  40dd02:	0f 1f 40 00          	nopl   0x0(%rax)
  40dd06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40dd0d:	00 00 00 

000000000040dd10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.317>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  40dd10:	41 57                	push   %r15
  40dd12:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40dd10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.317>
  40dd19:	49 bb f0 d2 21 00 00 	movabs $0x21d2f0,%r11
  40dd20:	00 00 00 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  40dd23:	48 8d 47 10          	lea    0x10(%rdi),%rax
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  40dd27:	55                   	push   %rbp
  40dd28:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  40dd2f:	4d 01 df             	add    %r11,%r15
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dd32:	48 85 f6             	test   %rsi,%rsi
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  40dd35:	53                   	push   %rbx
  40dd36:	48 89 fd             	mov    %rdi,%rbp
  40dd39:	48 89 f3             	mov    %rsi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  40dd3c:	48 89 07             	mov    %rax,(%rdi)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dd3f:	74 16                	je     40dd57 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.317+0x47>
      { return __builtin_strlen(__s); }
  40dd41:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  40dd48:	ff ff ff 
  40dd4b:	48 89 f7             	mov    %rsi,%rdi
  40dd4e:	4c 01 f8             	add    %r15,%rax
  40dd51:	ff d0                	callq  *%rax
  40dd53:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
          _M_construct(__beg, __end, _Tag());
  40dd57:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  40dd5e:	ff ff ff 
  40dd61:	48 89 de             	mov    %rbx,%rsi
  40dd64:	48 89 ef             	mov    %rbp,%rdi
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dd67:	5b                   	pop    %rbx
          _M_construct(__beg, __end, _Tag());
  40dd68:	4c 01 f8             	add    %r15,%rax
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dd6b:	5d                   	pop    %rbp
  40dd6c:	41 5f                	pop    %r15
          _M_construct(__beg, __end, _Tag());
  40dd6e:	ff e0                	jmpq   *%rax

000000000040dd70 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeI8LocationLb1EEEEE19_M_allocate_bucketsEm.isra.352>:
	}
    }

  template<typename _NodeAlloc>
    typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __n)
  40dd70:	41 57                	push   %r15
  40dd72:	41 54                	push   %r12
  40dd74:	49 bb 90 d2 21 00 00 	movabs $0x21d290,%r11
  40dd7b:	00 00 00 
  40dd7e:	55                   	push   %rbp
  40dd7f:	53                   	push   %rbx
  40dd80:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 40dd70 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeI8LocationLb1EEEEE19_M_allocate_bucketsEm.isra.352>
	if (__n > this->max_size())
  40dd87:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  40dd8e:	ff ff 1f 
  40dd91:	48 83 ec 08          	sub    $0x8,%rsp
  40dd95:	4c 01 db             	add    %r11,%rbx
  40dd98:	48 39 c7             	cmp    %rax,%rdi
  40dd9b:	77 45                	ja     40dde2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeI8LocationLb1EEEEE19_M_allocate_bucketsEm.isra.352+0x72>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40dd9d:	48 8d 2c fd 00 00 00 	lea    0x0(,%rdi,8),%rbp
  40dda4:	00 
  40dda5:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  40ddac:	ff ff ff 
  40ddaf:	49 89 df             	mov    %rbx,%r15
  40ddb2:	48 01 d8             	add    %rbx,%rax
  40ddb5:	48 89 ef             	mov    %rbp,%rdi
  40ddb8:	ff d0                	callq  *%rax
  40ddba:	49 89 c4             	mov    %rax,%r12
    {
      __bucket_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __n);
      __bucket_type* __p = std::__addressof(*__ptr);
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  40ddbd:	48 89 c7             	mov    %rax,%rdi
  40ddc0:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  40ddc7:	ff ff ff 
  40ddca:	48 89 ea             	mov    %rbp,%rdx
  40ddcd:	48 01 d8             	add    %rbx,%rax
  40ddd0:	31 f6                	xor    %esi,%esi
  40ddd2:	ff d0                	callq  *%rax
      return __p;
    }
  40ddd4:	48 83 c4 08          	add    $0x8,%rsp
  40ddd8:	4c 89 e0             	mov    %r12,%rax
  40dddb:	5b                   	pop    %rbx
  40dddc:	5d                   	pop    %rbp
  40dddd:	41 5c                	pop    %r12
  40dddf:	41 5f                	pop    %r15
  40dde1:	c3                   	retq   
	  std::__throw_bad_alloc();
  40dde2:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  40dde9:	ff ff ff 
  40ddec:	49 89 df             	mov    %rbx,%r15
  40ddef:	48 01 d8             	add    %rbx,%rax
  40ddf2:	ff d0                	callq  *%rax
  40ddf4:	66 90                	xchg   %ax,%ax
  40ddf6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40ddfd:	00 00 00 

000000000040de00 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632>:
static inline void launch_threads(void* (*workerFn)(void*)) {
  40de00:	41 57                	push   %r15
  40de02:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 40de00 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632>
  40de09:	41 56                	push   %r14
  40de0b:	41 55                	push   %r13
  40de0d:	41 54                	push   %r12
  40de0f:	49 bb 00 d2 21 00 00 	movabs $0x21d200,%r11
  40de16:	00 00 00 
  40de19:	55                   	push   %rbp
  40de1a:	53                   	push   %rbx
  40de1b:	4c 01 d8             	add    %r11,%rax
  40de1e:	48 81 ec d8 07 00 00 	sub    $0x7d8,%rsp
  40de25:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    uint32_t logStackSize = 0;
  40de2a:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  40de31:	00 
    uint32_t nthreads = 0;
  40de32:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
  40de39:	00 
    void* stacksBase = nullptr;
  40de3a:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  40de41:	00 00 
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  40de43:	b9 07 04 00 00       	mov    $0x407,%ecx
    return reinterpret_cast<uint64_t>(ptr);
  40de48:	48 8d 7c 24 24       	lea    0x24(%rsp),%rdi
  40de4d:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  40de52:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  40de57:	48 87 c9             	xchg   %rcx,%rcx
    assert(nthreads && logStackSize && stacksBase);
  40de5a:	8b 44 24 24          	mov    0x24(%rsp),%eax
  40de5e:	85 c0                	test   %eax,%eax
  40de60:	0f 84 1c 02 00 00    	je     40e082 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x282>
  40de66:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  40de6a:	85 c9                	test   %ecx,%ecx
  40de6c:	0f 84 10 02 00 00    	je     40e082 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x282>
  40de72:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
  40de78:	0f 84 04 02 00 00    	je     40e082 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x282>
    size_t stackSize = (1 << logStackSize);
  40de7e:	b8 01 00 00 00       	mov    $0x1,%eax
    pthread_attr_init(&attr);
  40de83:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  40de88:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
    size_t stackSize = (1 << logStackSize);
  40de8d:	d3 e0                	shl    %cl,%eax
  40de8f:	48 98                	cltq   
    pthread_attr_init(&attr);
  40de91:	48 89 ef             	mov    %rbp,%rdi
    size_t stackSize = (1 << logStackSize);
  40de94:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    pthread_attr_init(&attr);
  40de99:	48 b8 10 e8 dd ff ff 	movabs $0xffffffffffdde810,%rax
  40dea0:	ff ff ff 
  40dea3:	4d 89 f7             	mov    %r14,%r15
  40dea6:	4c 01 f0             	add    %r14,%rax
  40dea9:	ff d0                	callq  *%rax
    pthread_t* pthreads = (pthread_t*) calloc(sizeof(pthread_t), nthreads);
  40deab:	8b 74 24 24          	mov    0x24(%rsp),%esi
  40deaf:	48 b8 00 78 df ff ff 	movabs $0xffffffffffdf7800,%rax
  40deb6:	ff ff ff 
  40deb9:	bf 08 00 00 00       	mov    $0x8,%edi
  40debe:	4c 01 f0             	add    %r14,%rax
  40dec1:	48 89 f3             	mov    %rsi,%rbx
  40dec4:	ff d0                	callq  *%rax
    for (uint32_t t = 1; t < nthreads; t++) {
  40dec6:	83 fb 01             	cmp    $0x1,%ebx
    pthread_t* pthreads = (pthread_t*) calloc(sizeof(pthread_t), nthreads);
  40dec9:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    for (uint32_t t = 1; t < nthreads; t++) {
  40dece:	76 77                	jbe    40df47 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x147>
        int err = pthread_create(&pthreads[t], &attr, workerFn, nullptr);
  40ded0:	48 b8 50 28 de ff ff 	movabs $0xffffffffffde2850,%rax
  40ded7:	ff ff ff 
    for (uint32_t t = 1; t < nthreads; t++) {
  40deda:	bb 01 00 00 00       	mov    $0x1,%ebx
        int err = pthread_create(&pthreads[t], &attr, workerFn, nullptr);
  40dedf:	4d 8d 24 06          	lea    (%r14,%rax,1),%r12
  40dee3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40dee8:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40deed:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40def2:	41 89 dd             	mov    %ebx,%r13d
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40def5:	48 b8 b0 ea dd ff ff 	movabs $0xffffffffffddeab0,%rax
  40defc:	ff ff ff 
  40deff:	48 89 ef             	mov    %rbp,%rdi
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40df02:	48 89 d6             	mov    %rdx,%rsi
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40df05:	4d 89 f7             	mov    %r14,%r15
  40df08:	4c 01 f0             	add    %r14,%rax
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40df0b:	49 0f af f5          	imul   %r13,%rsi
  40df0f:	48 03 74 24 28       	add    0x28(%rsp),%rsi
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40df14:	ff d0                	callq  *%rax
        int err = pthread_create(&pthreads[t], &attr, workerFn, nullptr);
  40df16:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40df1b:	31 c9                	xor    %ecx,%ecx
  40df1d:	4c 89 e2             	mov    %r12,%rdx
  40df20:	48 89 ee             	mov    %rbp,%rsi
  40df23:	4a 8d 3c e8          	lea    (%rax,%r13,8),%rdi
  40df27:	48 b8 70 e5 dd ff ff 	movabs $0xffffffffffdde570,%rax
  40df2e:	ff ff ff 
  40df31:	4c 01 f0             	add    %r14,%rax
  40df34:	ff d0                	callq  *%rax
        if (err != 0) std::abort();
  40df36:	85 c0                	test   %eax,%eax
  40df38:	0f 85 2d 01 00 00    	jne    40e06b <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x26b>
    for (uint32_t t = 1; t < nthreads; t++) {
  40df3e:	83 c3 01             	add    $0x1,%ebx
  40df41:	39 5c 24 24          	cmp    %ebx,0x24(%rsp)
  40df45:	77 a1                	ja     40dee8 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0xe8>
    getcontext(&workerContext);
  40df47:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40df4c:	48 b8 00 e6 dd ff ff 	movabs $0xffffffffffdde600,%rax
  40df53:	ff ff ff 
  40df56:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  40df5b:	49 89 df             	mov    %rbx,%r15
  40df5e:	48 01 d8             	add    %rbx,%rax
  40df61:	ff d0                	callq  *%rax
    workerContext.uc_stack.ss_sp = stacksBase;  // thread 0 --> offset 0
  40df63:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40df68:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
    workerContext.uc_link = &returnContext;
  40df6d:	48 8d 9c 24 20 04 00 	lea    0x420(%rsp),%rbx
  40df74:	00 
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40df75:	48 8d 6c 24 70       	lea    0x70(%rsp),%rbp
  40df7a:	49 b8 80 e4 dd ff ff 	movabs $0xffffffffffdde480,%r8
  40df81:	ff ff ff 
  40df84:	b9 01 00 00 00       	mov    $0x1,%ecx
  40df89:	ba 01 00 00 00       	mov    $0x1,%edx
    workerContext.uc_link = &returnContext;
  40df8e:	48 89 5c 24 78       	mov    %rbx,0x78(%rsp)
    workerContext.uc_stack.ss_sp = stacksBase;  // thread 0 --> offset 0
  40df93:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40df9a:	00 
    workerContext.uc_stack.ss_size = stackSize;
  40df9b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40dfa0:	4d 01 f0             	add    %r14,%r8
  40dfa3:	48 89 ef             	mov    %rbp,%rdi
  40dfa6:	4d 89 f7             	mov    %r14,%r15
    workerContext.uc_stack.ss_size = stackSize;
  40dfa9:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40dfb0:	00 
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40dfb1:	48 b8 50 28 de ff ff 	movabs $0xffffffffffde2850,%rax
  40dfb8:	ff ff ff 
  40dfbb:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
  40dfbf:	31 c0                	xor    %eax,%eax
  40dfc1:	41 ff d0             	callq  *%r8
    int err = swapcontext(&returnContext, &workerContext);
  40dfc4:	48 b8 20 e4 dd ff ff 	movabs $0xffffffffffdde420,%rax
  40dfcb:	ff ff ff 
  40dfce:	48 89 ee             	mov    %rbp,%rsi
  40dfd1:	48 89 df             	mov    %rbx,%rdi
  40dfd4:	4c 01 f0             	add    %r14,%rax
  40dfd7:	ff d0                	callq  *%rax
    assert(!err); (void) err;
  40dfd9:	85 c0                	test   %eax,%eax
  40dfdb:	0f 85 e7 00 00 00    	jne    40e0c8 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x2c8>
    for (uint32_t t = 1; t < nthreads; t++) {
  40dfe1:	83 7c 24 24 01       	cmpl   $0x1,0x24(%rsp)
  40dfe6:	bb 01 00 00 00       	mov    $0x1,%ebx
  40dfeb:	76 34                	jbe    40e021 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x221>
  40dfed:	0f 1f 00             	nopl   (%rax)
        int err = pthread_join(pthreads[t], nullptr);
  40dff0:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  40dff5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  40dffa:	89 d8                	mov    %ebx,%eax
  40dffc:	31 f6                	xor    %esi,%esi
  40dffe:	48 8b 3c c2          	mov    (%rdx,%rax,8),%rdi
  40e002:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  40e009:	ff ff ff 
  40e00c:	49 89 cf             	mov    %rcx,%r15
  40e00f:	48 01 c8             	add    %rcx,%rax
  40e012:	ff d0                	callq  *%rax
        if (err != 0) std::abort();
  40e014:	85 c0                	test   %eax,%eax
  40e016:	75 53                	jne    40e06b <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x26b>
    for (uint32_t t = 1; t < nthreads; t++) {
  40e018:	83 c3 01             	add    $0x1,%ebx
  40e01b:	39 5c 24 24          	cmp    %ebx,0x24(%rsp)
  40e01f:	77 cf                	ja     40dff0 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x1f0>
    pthread_attr_destroy(&attr);
  40e021:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e026:	48 b8 b0 e9 dd ff ff 	movabs $0xffffffffffdde9b0,%rax
  40e02d:	ff ff ff 
  40e030:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  40e035:	49 89 df             	mov    %rbx,%r15
  40e038:	48 01 d8             	add    %rbx,%rax
  40e03b:	ff d0                	callq  *%rax
    free(pthreads);
  40e03d:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e042:	48 b8 20 79 df ff ff 	movabs $0xffffffffffdf7920,%rax
  40e049:	ff ff ff 
  40e04c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40e051:	49 89 df             	mov    %rbx,%r15
  40e054:	48 01 d8             	add    %rbx,%rax
  40e057:	ff d0                	callq  *%rax
}
  40e059:	48 81 c4 d8 07 00 00 	add    $0x7d8,%rsp
  40e060:	5b                   	pop    %rbx
  40e061:	5d                   	pop    %rbp
  40e062:	41 5c                	pop    %r12
  40e064:	41 5d                	pop    %r13
  40e066:	41 5e                	pop    %r14
  40e068:	41 5f                	pop    %r15
  40e06a:	c3                   	retq   
        if (err != 0) std::abort();
  40e06b:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e070:	48 b8 50 e5 dd ff ff 	movabs $0xffffffffffdde550,%rax
  40e077:	ff ff ff 
  40e07a:	49 89 df             	mov    %rbx,%r15
  40e07d:	48 01 d8             	add    %rbx,%rax
  40e080:	ff d0                	callq  *%rax
    assert(nthreads && logStackSize && stacksBase);
  40e082:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e087:	48 b8 80 84 df ff ff 	movabs $0xffffffffffdf8480,%rax
  40e08e:	ff ff ff 
  40e091:	ba 94 00 00 00       	mov    $0x94,%edx
  40e096:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40e09a:	48 b8 90 7c df ff ff 	movabs $0xffffffffffdf7c90,%rax
  40e0a1:	ff ff ff 
  40e0a4:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40e0a8:	48 b8 80 7d df ff ff 	movabs $0xffffffffffdf7d80,%rax
  40e0af:	ff ff ff 
    assert(!err); (void) err;
  40e0b2:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  40e0b6:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  40e0bd:	ff ff ff 
  40e0c0:	49 89 df             	mov    %rbx,%r15
  40e0c3:	48 01 d8             	add    %rbx,%rax
  40e0c6:	ff d0                	callq  *%rax
  40e0c8:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e0cd:	48 b8 80 84 df ff ff 	movabs $0xffffffffffdf8480,%rax
  40e0d4:	ff ff ff 
  40e0d7:	ba ae 00 00 00       	mov    $0xae,%edx
  40e0dc:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40e0e0:	48 b8 90 7c df ff ff 	movabs $0xffffffffffdf7c90,%rax
  40e0e7:	ff ff ff 
  40e0ea:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40e0ee:	48 b8 f1 80 df ff ff 	movabs $0xffffffffffdf80f1,%rax
  40e0f5:	ff ff ff 
  40e0f8:	eb b8                	jmp    40e0b2 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x2b2>
  40e0fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040e100 <__tcf_0>:
  40e100:	41 57                	push   %r15
  40e102:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40e100 <__tcf_0>
  40e109:	49 bb 00 cf 21 00 00 	movabs $0x21cf00,%r11
  40e110:	00 00 00 
  40e113:	41 56                	push   %r14
  40e115:	48 b8 20 aa b6 00 00 	movabs $0xb6aa20,%rax
  40e11c:	00 00 00 
  40e11f:	41 55                	push   %r13
  40e121:	4d 01 df             	add    %r11,%r15
  40e124:	41 54                	push   %r12
  40e126:	55                   	push   %rbp
  40e127:	53                   	push   %rbx
  40e128:	4d 8d 24 07          	lea    (%r15,%rax,1),%r12
  40e12c:	48 b8 a0 38 03 00 00 	movabs $0x338a0,%rax
  40e133:	00 00 00 
  40e136:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  40e13d:	ff ff ff 
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  40e140:	49 be 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%r14
  40e147:	ff ff ff 
  40e14a:	4c 01 f8             	add    %r15,%rax
  40e14d:	48 83 ec 18          	sub    $0x18,%rsp
      { ::operator delete(__p); }
  40e151:	4c 01 fd             	add    %r15,%rbp
  40e154:	4d 01 fe             	add    %r15,%r14
  40e157:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40e15c:	0f 1f 40 00          	nopl   0x0(%rax)
  40e160:	49 8b 7c 24 d8       	mov    -0x28(%r12),%rdi
  40e165:	4d 8d 6c 24 c8       	lea    -0x38(%r12),%r13
      while (__n)
  40e16a:	48 85 ff             	test   %rdi,%rdi
  40e16d:	74 0e                	je     40e17d <__tcf_0+0x7d>
  40e16f:	90                   	nop
  40e170:	48 8b 1f             	mov    (%rdi),%rbx
  40e173:	ff d5                	callq  *%rbp
  40e175:	48 85 db             	test   %rbx,%rbx
  40e178:	48 89 df             	mov    %rbx,%rdi
  40e17b:	75 f3                	jne    40e170 <__tcf_0+0x70>
  40e17d:	49 8b 45 08          	mov    0x8(%r13),%rax
  40e181:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  40e185:	31 f6                	xor    %esi,%esi
	if (_M_uses_single_bucket(__bkts))
  40e187:	49 83 ec 08          	sub    $0x8,%r12
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  40e18b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40e192:	00 
  40e193:	41 ff d6             	callq  *%r14
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  40e196:	49 8b 7d 00          	mov    0x0(%r13),%rdi
      _M_element_count = 0;
  40e19a:	49 c7 45 18 00 00 00 	movq   $0x0,0x18(%r13)
  40e1a1:	00 
      _M_before_begin._M_nxt = nullptr;
  40e1a2:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
  40e1a9:	00 
	if (_M_uses_single_bucket(__bkts))
  40e1aa:	4c 39 e7             	cmp    %r12,%rdi
  40e1ad:	74 02                	je     40e1b1 <__tcf_0+0xb1>
  40e1af:	ff d5                	callq  *%rbp
  40e1b1:	4c 3b 6c 24 08       	cmp    0x8(%rsp),%r13
  40e1b6:	4d 89 ec             	mov    %r13,%r12
  40e1b9:	75 a5                	jne    40e160 <__tcf_0+0x60>
  40e1bb:	48 83 c4 18          	add    $0x18,%rsp
  40e1bf:	5b                   	pop    %rbx
  40e1c0:	5d                   	pop    %rbp
  40e1c1:	41 5c                	pop    %r12
  40e1c3:	41 5d                	pop    %r13
  40e1c5:	41 5e                	pop    %r14
  40e1c7:	41 5f                	pop    %r15
  40e1c9:	c3                   	retq   
  40e1ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040e1d0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.624>:
    endl(basic_ostream<_CharT, _Traits>& __os)
  40e1d0:	41 57                	push   %r15
  40e1d2:	41 54                	push   %r12
  40e1d4:	49 bb 30 ce 21 00 00 	movabs $0x21ce30,%r11
  40e1db:	00 00 00 
  40e1de:	55                   	push   %rbp
  40e1df:	53                   	push   %rbx
  40e1e0:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 40e1d0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.624>
    { return flush(__os.put(__os.widen('\n'))); }
  40e1e7:	49 bc b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%r12
  40e1ee:	ff ff ff 
  40e1f1:	4c 01 db             	add    %r11,%rbx
    endl(basic_ostream<_CharT, _Traits>& __os)
  40e1f4:	48 83 ec 08          	sub    $0x8,%rsp
    { return flush(__os.put(__os.widen('\n'))); }
  40e1f8:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40e1fc:	48 8b 10             	mov    (%rax),%rdx
      { return __check_facet(_M_ctype).widen(__c); }
  40e1ff:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  40e203:	48 8b ac 02 f0 00 00 	mov    0xf0(%rdx,%rax,1),%rbp
  40e20a:	00 
      if (!__f)
  40e20b:	48 85 ed             	test   %rbp,%rbp
  40e20e:	74 7e                	je     40e28e <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.624+0xbe>
	if (_M_widen_ok)
  40e210:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
  40e214:	74 3a                	je     40e250 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.624+0x80>
  40e216:	0f be 75 43          	movsbl 0x43(%rbp),%esi
  40e21a:	48 b8 90 e3 dd ff ff 	movabs $0xffffffffffdde390,%rax
  40e221:	ff ff ff 
  40e224:	49 8b 3c 1c          	mov    (%r12,%rbx,1),%rdi
  40e228:	49 89 df             	mov    %rbx,%r15
  40e22b:	48 01 d8             	add    %rbx,%rax
  40e22e:	ff d0                	callq  *%rax
  40e230:	48 83 c4 08          	add    $0x8,%rsp
    { return __os.flush(); }
  40e234:	48 89 c7             	mov    %rax,%rdi
  40e237:	48 b8 20 e6 dd ff ff 	movabs $0xffffffffffdde620,%rax
  40e23e:	ff ff ff 
  40e241:	48 01 d8             	add    %rbx,%rax
    { return flush(__os.put(__os.widen('\n'))); }
  40e244:	5b                   	pop    %rbx
  40e245:	5d                   	pop    %rbp
  40e246:	41 5c                	pop    %r12
  40e248:	41 5f                	pop    %r15
    { return __os.flush(); }
  40e24a:	ff e0                	jmpq   *%rax
  40e24c:	0f 1f 40 00          	nopl   0x0(%rax)
	this->_M_widen_init();
  40e250:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40e257:	ff ff ff 
  40e25a:	48 89 ef             	mov    %rbp,%rdi
  40e25d:	49 89 df             	mov    %rbx,%r15
  40e260:	48 01 d8             	add    %rbx,%rax
  40e263:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40e265:	48 8b 45 00          	mov    0x0(%rbp),%rax
  40e269:	48 ba 40 81 de ff ff 	movabs $0xffffffffffde8140,%rdx
  40e270:	ff ff ff 
  40e273:	be 0a 00 00 00       	mov    $0xa,%esi
  40e278:	48 01 da             	add    %rbx,%rdx
  40e27b:	48 8b 40 30          	mov    0x30(%rax),%rax
  40e27f:	48 39 d0             	cmp    %rdx,%rax
  40e282:	74 96                	je     40e21a <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.624+0x4a>
  40e284:	48 89 ef             	mov    %rbp,%rdi
  40e287:	ff d0                	callq  *%rax
  40e289:	0f be f0             	movsbl %al,%esi
  40e28c:	eb 8c                	jmp    40e21a <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.624+0x4a>
	__throw_bad_cast();
  40e28e:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40e295:	ff ff ff 
  40e298:	49 89 df             	mov    %rbx,%r15
  40e29b:	48 01 d8             	add    %rbx,%rax
  40e29e:	ff d0                	callq  *%rax

000000000040e2a0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm>:
inline void bareRunner(Timestamp ts) {
    (*f)(ts);
}

template<typename F, F* f, typename T>
inline void bareRunner(Timestamp ts, uint64_t arg0) {
  40e2a0:	41 56                	push   %r14
  40e2a2:	41 55                	push   %r13
  40e2a4:	41 54                	push   %r12
  40e2a6:	55                   	push   %rbp
  40e2a7:	53                   	push   %rbx
// Requeuers were called "splitters" in the early Swarm papers
template <bool isFrame>
static inline void requeuer_impl(swarm::Timestamp, TaskDescriptors* descs) {
    // This requeuer can yield before an enqueue, so we always update the size
    // field directly
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e2a8:	48 8b 16             	mov    (%rsi),%rdx
  40e2ab:	48 89 f3             	mov    %rsi,%rbx
  40e2ae:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  40e2b2:	48 89 c1             	mov    %rax,%rcx
  40e2b5:	48 c1 e1 06          	shl    $0x6,%rcx
    while (descs->size) {
  40e2b9:	48 85 d2             	test   %rdx,%rdx
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e2bc:	0f 18 4c 0e 08       	prefetcht0 0x8(%rsi,%rcx,1)
    while (descs->size) {
  40e2c1:	75 38                	jne    40e2fb <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x5b>
  40e2c3:	e9 ac 00 00 00       	jmpq   40e374 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0xd4>
  40e2c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e2cf:	00 
    register uint64_t r8  asm("r8")  = v3;
  40e2d0:	4d 89 c8             	mov    %r9,%r8
    register uint64_t r11 asm("r11") = v6;
  40e2d3:	4d 89 e3             	mov    %r12,%r11
    register uint64_t r9  asm("r9")  = v4;
  40e2d6:	4d 89 d1             	mov    %r10,%r9
            :);
  40e2d9:	4c 89 ef             	mov    %r13,%rdi
    register uint64_t r10 asm("r10") = v5;
  40e2dc:	49 89 ca             	mov    %rcx,%r10
            :);
  40e2df:	4c 89 f6             	mov    %r14,%rsi
  40e2e2:	48 89 e9             	mov    %rbp,%rcx
  40e2e5:	48 87 c9             	xchg   %rcx,%rcx
        if (descs->size >= 3) {
            __builtin_prefetch(&descs->tds[descs->size - 3].ts);
        }
        __enqueueOrYield<isFrame>(descs->tds[descs->size - 1]);
        descs->size--;
  40e2e8:	48 8b 03             	mov    (%rbx),%rax
  40e2eb:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e2ef:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e2f2:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e2f5:	74 7d                	je     40e374 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0xd4>
  40e2f7:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
        if (descs->size >= 3) {
  40e2fb:	48 83 fa 02          	cmp    $0x2,%rdx
  40e2ff:	0f 87 8b 00 00 00    	ja     40e390 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0xf0>
  40e305:	48 c1 e2 06          	shl    $0x6,%rdx
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e309:	48 c1 e0 06          	shl    $0x6,%rax
  40e30d:	48 8d 34 13          	lea    (%rbx,%rdx,1),%rsi
  40e311:	48 01 d8             	add    %rbx,%rax
  40e314:	4c 8b 50 40          	mov    0x40(%rax),%r10
  40e318:	4c 8b 48 38          	mov    0x38(%rax),%r9
    EnqFlags ef = EnqFlags(YIELDIFFULL | (task.taskPtrAndFlags & 0x0fffful));
  40e31c:	48 8b 7e d0          	mov    -0x30(%rsi),%rdi
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e320:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40e324:	4c 8b 70 28          	mov    0x28(%rax),%r14
  40e328:	4c 8b 68 20          	mov    0x20(%rax),%r13
  40e32c:	4c 8b 60 18          	mov    0x18(%rax),%r12
}

/* Enqueue functions */

constexpr uint64_t enqueueMagicOp(uint64_t numArgs, EnqFlags hintFlags) {
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  40e330:	48 89 fd             	mov    %rdi,%rbp
    asm("sar $16,%%rcx;" : "=c"(taskPtr) : "c"(task.taskPtrAndFlags));
  40e333:	48 89 f9             	mov    %rdi,%rcx
  40e336:	81 e5 fa ff 00 00    	and    $0xfffa,%ebp
  40e33c:	48 c1 f9 10          	sar    $0x10,%rcx
  40e340:	48 81 cd 05 00 10 40 	or     $0x40100005,%rbp
    if (!skipTs && !skipTask && !skipHint) {
  40e347:	f7 c7 00 02 00 00    	test   $0x200,%edi
  40e34d:	75 81                	jne    40e2d0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x30>
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e34f:	48 8b 7e c8          	mov    -0x38(%rsi),%rdi
    register uint64_t r8  asm("r8")  = v3;
  40e353:	49 89 d0             	mov    %rdx,%r8
    register uint64_t r11 asm("r11") = v6;
  40e356:	49 89 cb             	mov    %rcx,%r11
            :);
  40e359:	4c 89 ee             	mov    %r13,%rsi
  40e35c:	48 89 e9             	mov    %rbp,%rcx
  40e35f:	4c 89 f2             	mov    %r14,%rdx
  40e362:	48 87 c9             	xchg   %rcx,%rcx
        descs->size--;
  40e365:	48 8b 03             	mov    (%rbx),%rax
  40e368:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e36c:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e36f:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e372:	75 83                	jne    40e2f7 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x57>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40e374:	b9 11 20 00 00       	mov    $0x2011,%ecx
  40e379:	48 89 df             	mov    %rbx,%rdi
  40e37c:	48 87 c9             	xchg   %rcx,%rcx
}
  40e37f:	5b                   	pop    %rbx
  40e380:	5d                   	pop    %rbp
  40e381:	41 5c                	pop    %r12
  40e383:	41 5d                	pop    %r13
  40e385:	41 5e                	pop    %r14
  40e387:	c3                   	retq   
  40e388:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e38f:	00 
            __builtin_prefetch(&descs->tds[descs->size - 3].ts);
  40e390:	48 89 d1             	mov    %rdx,%rcx
  40e393:	48 c1 e1 06          	shl    $0x6,%rcx
  40e397:	0f 18 8c 0b 48 ff ff 	prefetcht0 -0xb8(%rbx,%rcx,1)
  40e39e:	ff 
  40e39f:	e9 61 ff ff ff       	jmpq   40e305 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x65>
  40e3a4:	66 90                	xchg   %ax,%ax
  40e3a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40e3ad:	00 00 00 

000000000040e3b0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0) {
  40e3b0:	41 56                	push   %r14
  40e3b2:	41 55                	push   %r13
  40e3b4:	41 54                	push   %r12
  40e3b6:	55                   	push   %rbp
  40e3b7:	53                   	push   %rbx
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e3b8:	48 8b 16             	mov    (%rsi),%rdx
  40e3bb:	48 89 f3             	mov    %rsi,%rbx
  40e3be:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  40e3c2:	48 89 c1             	mov    %rax,%rcx
  40e3c5:	48 c1 e1 06          	shl    $0x6,%rcx
    while (descs->size) {
  40e3c9:	48 85 d2             	test   %rdx,%rdx
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e3cc:	0f 18 4c 0e 08       	prefetcht0 0x8(%rsi,%rcx,1)
    while (descs->size) {
  40e3d1:	75 38                	jne    40e40b <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x5b>
  40e3d3:	e9 ac 00 00 00       	jmpq   40e484 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0xd4>
  40e3d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e3df:	00 
    register uint64_t r8  asm("r8")  = v3;
  40e3e0:	4d 89 c8             	mov    %r9,%r8
    register uint64_t r11 asm("r11") = v6;
  40e3e3:	4d 89 e3             	mov    %r12,%r11
    register uint64_t r9  asm("r9")  = v4;
  40e3e6:	4d 89 d1             	mov    %r10,%r9
            :);
  40e3e9:	4c 89 ef             	mov    %r13,%rdi
    register uint64_t r10 asm("r10") = v5;
  40e3ec:	49 89 ca             	mov    %rcx,%r10
            :);
  40e3ef:	4c 89 f6             	mov    %r14,%rsi
  40e3f2:	48 89 e9             	mov    %rbp,%rcx
  40e3f5:	48 87 c9             	xchg   %rcx,%rcx
        descs->size--;
  40e3f8:	48 8b 03             	mov    (%rbx),%rax
  40e3fb:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e3ff:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e402:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e405:	74 7d                	je     40e484 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0xd4>
  40e407:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
        if (descs->size >= 3) {
  40e40b:	48 83 fa 02          	cmp    $0x2,%rdx
  40e40f:	0f 87 8b 00 00 00    	ja     40e4a0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0xf0>
  40e415:	48 c1 e2 06          	shl    $0x6,%rdx
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e419:	48 c1 e0 06          	shl    $0x6,%rax
  40e41d:	48 8d 34 13          	lea    (%rbx,%rdx,1),%rsi
  40e421:	48 01 d8             	add    %rbx,%rax
  40e424:	4c 8b 50 40          	mov    0x40(%rax),%r10
  40e428:	4c 8b 48 38          	mov    0x38(%rax),%r9
    EnqFlags ef = EnqFlags(YIELDIFFULL | (task.taskPtrAndFlags & 0x0fffful));
  40e42c:	48 8b 7e d0          	mov    -0x30(%rsi),%rdi
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e430:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40e434:	4c 8b 70 28          	mov    0x28(%rax),%r14
  40e438:	4c 8b 68 20          	mov    0x20(%rax),%r13
  40e43c:	4c 8b 60 18          	mov    0x18(%rax),%r12
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  40e440:	48 89 fd             	mov    %rdi,%rbp
    asm("sar $16,%%rcx;" : "=c"(taskPtr) : "c"(task.taskPtrAndFlags));
  40e443:	48 89 f9             	mov    %rdi,%rcx
  40e446:	81 e5 fa ff 00 00    	and    $0xfffa,%ebp
  40e44c:	48 c1 f9 10          	sar    $0x10,%rcx
  40e450:	48 81 cd 05 00 30 40 	or     $0x40300005,%rbp
    if (!skipTs && !skipTask && !skipHint) {
  40e457:	f7 c7 00 02 00 00    	test   $0x200,%edi
  40e45d:	75 81                	jne    40e3e0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x30>
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e45f:	48 8b 7e c8          	mov    -0x38(%rsi),%rdi
    register uint64_t r8  asm("r8")  = v3;
  40e463:	49 89 d0             	mov    %rdx,%r8
    register uint64_t r11 asm("r11") = v6;
  40e466:	49 89 cb             	mov    %rcx,%r11
            :);
  40e469:	4c 89 ee             	mov    %r13,%rsi
  40e46c:	48 89 e9             	mov    %rbp,%rcx
  40e46f:	4c 89 f2             	mov    %r14,%rdx
  40e472:	48 87 c9             	xchg   %rcx,%rcx
        descs->size--;
  40e475:	48 8b 03             	mov    (%rbx),%rax
  40e478:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e47c:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e47f:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e482:	75 83                	jne    40e407 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x57>
  40e484:	b9 11 20 00 00       	mov    $0x2011,%ecx
  40e489:	48 89 df             	mov    %rbx,%rdi
  40e48c:	48 87 c9             	xchg   %rcx,%rcx
}
  40e48f:	5b                   	pop    %rbx
  40e490:	5d                   	pop    %rbp
  40e491:	41 5c                	pop    %r12
  40e493:	41 5d                	pop    %r13
  40e495:	41 5e                	pop    %r14
  40e497:	c3                   	retq   
  40e498:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e49f:	00 
            __builtin_prefetch(&descs->tds[descs->size - 3].ts);
  40e4a0:	48 89 d1             	mov    %rdx,%rcx
  40e4a3:	48 c1 e1 06          	shl    $0x6,%rcx
  40e4a7:	0f 18 8c 0b 48 ff ff 	prefetcht0 -0xb8(%rbx,%rcx,1)
  40e4ae:	ff 
  40e4af:	e9 61 ff ff ff       	jmpq   40e415 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x65>
  40e4b4:	66 90                	xchg   %ax,%ax
  40e4b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40e4bd:	00 00 00 

000000000040e4c0 <_ZL14focalHeuristicPK10PlanResult>:
static inline int focalHeuristic(const PlanResult* solution) {
  40e4c0:	41 57                	push   %r15
  40e4c2:	41 56                	push   %r14
  40e4c4:	41 55                	push   %r13
  40e4c6:	41 54                	push   %r12
  40e4c8:	55                   	push   %rbp
  40e4c9:	53                   	push   %rbx
		max_t = std::max<int>(max_t, solution[i].states_size - 1);
  40e4ca:	66 0f 76 d2          	pcmpeqd %xmm2,%xmm2
  40e4ce:	f3 0f 7e 87 00 04 00 	movq   0x400(%rdi),%xmm0
  40e4d5:	00 
static inline int focalHeuristic(const PlanResult* solution) {
  40e4d6:	48 89 7c 24 e8       	mov    %rdi,-0x18(%rsp)
		max_t = std::max<int>(max_t, solution[i].states_size - 1);
  40e4db:	f3 0f 7e 8f a0 10 00 	movq   0x10a0(%rdi),%xmm1
  40e4e2:	00 
  40e4e3:	0f 16 87 50 0a 00 00 	movhps 0xa50(%rdi),%xmm0
  40e4ea:	0f 16 8f f0 16 00 00 	movhps 0x16f0(%rdi),%xmm1
  40e4f1:	f3 0f 7e 9f e0 29 00 	movq   0x29e0(%rdi),%xmm3
  40e4f8:	00 
  40e4f9:	0f 16 9f 30 30 00 00 	movhps 0x3030(%rdi),%xmm3
  40e500:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40e504:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40e508:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40e50c:	66 0f 6f e0          	movdqa %xmm0,%xmm4
  40e510:	66 0f 66 e1          	pcmpgtd %xmm1,%xmm4
  40e514:	f3 0f 7e 8f 40 1d 00 	movq   0x1d40(%rdi),%xmm1
  40e51b:	00 
  40e51c:	0f 16 8f 90 23 00 00 	movhps 0x2390(%rdi),%xmm1
  40e523:	66 0f db c4          	pand   %xmm4,%xmm0
  40e527:	0f c6 cb 88          	shufps $0x88,%xmm3,%xmm1
  40e52b:	66 0f fe ca          	paddd  %xmm2,%xmm1
  40e52f:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40e533:	66 0f 66 d8          	pcmpgtd %xmm0,%xmm3
  40e537:	66 0f db cb          	pand   %xmm3,%xmm1
  40e53b:	66 0f df d8          	pandn  %xmm0,%xmm3
  40e53f:	f3 0f 7e 87 80 36 00 	movq   0x3680(%rdi),%xmm0
  40e546:	00 
  40e547:	0f 16 87 d0 3c 00 00 	movhps 0x3cd0(%rdi),%xmm0
  40e54e:	66 0f eb d9          	por    %xmm1,%xmm3
  40e552:	f3 0f 7e 8f 20 43 00 	movq   0x4320(%rdi),%xmm1
  40e559:	00 
  40e55a:	0f 16 8f 70 49 00 00 	movhps 0x4970(%rdi),%xmm1
  40e561:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40e565:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40e569:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  40e56d:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  40e571:	66 0f db c1          	pand   %xmm1,%xmm0
  40e575:	66 0f df cb          	pandn  %xmm3,%xmm1
  40e579:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40e57d:	f3 0f 7e 8f 60 5c 00 	movq   0x5c60(%rdi),%xmm1
  40e584:	00 
  40e585:	66 0f eb d8          	por    %xmm0,%xmm3
  40e589:	f3 0f 7e 87 c0 4f 00 	movq   0x4fc0(%rdi),%xmm0
  40e590:	00 
  40e591:	0f 16 8f b0 62 00 00 	movhps 0x62b0(%rdi),%xmm1
  40e598:	0f 16 87 10 56 00 00 	movhps 0x5610(%rdi),%xmm0
  40e59f:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40e5a3:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40e5a7:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  40e5ab:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  40e5af:	66 0f db c1          	pand   %xmm1,%xmm0
  40e5b3:	66 0f df cb          	pandn  %xmm3,%xmm1
  40e5b7:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40e5bb:	f3 0f 7e 8f 00 69 00 	movq   0x6900(%rdi),%xmm1
  40e5c2:	00 
  40e5c3:	66 0f eb d8          	por    %xmm0,%xmm3
  40e5c7:	f3 0f 7e 87 a0 75 00 	movq   0x75a0(%rdi),%xmm0
  40e5ce:	00 
  40e5cf:	0f 16 87 f0 7b 00 00 	movhps 0x7bf0(%rdi),%xmm0
  40e5d6:	0f 16 8f 50 6f 00 00 	movhps 0x6f50(%rdi),%xmm1
  40e5dd:	0f c6 c8 88          	shufps $0x88,%xmm0,%xmm1
  40e5e1:	66 0f fe ca          	paddd  %xmm2,%xmm1
  40e5e5:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  40e5e9:	66 0f 66 c3          	pcmpgtd %xmm3,%xmm0
  40e5ed:	66 0f db c8          	pand   %xmm0,%xmm1
  40e5f1:	66 0f df c3          	pandn  %xmm3,%xmm0
  40e5f5:	66 0f eb c8          	por    %xmm0,%xmm1
  40e5f9:	66 0f 6f d1          	movdqa %xmm1,%xmm2
  40e5fd:	66 0f 73 da 08       	psrldq $0x8,%xmm2
  40e602:	66 0f 6f c2          	movdqa %xmm2,%xmm0
  40e606:	66 0f 66 c1          	pcmpgtd %xmm1,%xmm0
  40e60a:	66 0f db d0          	pand   %xmm0,%xmm2
  40e60e:	66 0f df c1          	pandn  %xmm1,%xmm0
  40e612:	66 0f eb c2          	por    %xmm2,%xmm0
  40e616:	66 0f 6f d0          	movdqa %xmm0,%xmm2
  40e61a:	66 0f 73 da 04       	psrldq $0x4,%xmm2
  40e61f:	66 0f 6f ca          	movdqa %xmm2,%xmm1
  40e623:	66 0f 66 c8          	pcmpgtd %xmm0,%xmm1
  40e627:	66 0f db d1          	pand   %xmm1,%xmm2
  40e62b:	66 0f df c8          	pandn  %xmm0,%xmm1
  40e62f:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  40e633:	66 0f eb c2          	por    %xmm2,%xmm0
  40e637:	66 0f 7e c3          	movd   %xmm0,%ebx
  40e63b:	66 0f 7e 44 24 e4    	movd   %xmm0,-0x1c(%rsp)
	for (int t = 0; t < max_t; ++t) {
  40e641:	85 db                	test   %ebx,%ebx
  40e643:	0f 8e 60 02 00 00    	jle    40e8a9 <_ZL14focalHeuristicPK10PlanResult+0x3e9>
  40e649:	48 8d 9f f0 77 00 00 	lea    0x77f0(%rdi),%rbx
  40e650:	4c 8d b7 40 7e 00 00 	lea    0x7e40(%rdi),%r14
  40e657:	45 31 e4             	xor    %r12d,%r12d
  40e65a:	48 c7 44 24 d0 10 00 	movq   $0x10,-0x30(%rsp)
  40e661:	00 00 
  40e663:	45 31 ed             	xor    %r13d,%r13d
  40e666:	45 31 ff             	xor    %r15d,%r15d
  40e669:	48 89 5c 24 f0       	mov    %rbx,-0x10(%rsp)
  40e66e:	48 8b 5c 24 e8       	mov    -0x18(%rsp),%rbx
  40e673:	4c 8b 4c 24 f0       	mov    -0x10(%rsp),%r9
  40e678:	48 89 d9             	mov    %rbx,%rcx
  40e67b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	if (t < solution[agentIdx].states_size) {
  40e680:	48 8b 83 00 04 00 00 	mov    0x400(%rbx),%rax
  40e687:	4c 39 e8             	cmp    %r13,%rax
  40e68a:	77 74                	ja     40e700 <_ZL14focalHeuristicPK10PlanResult+0x240>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e68c:	48 83 e8 01          	sub    $0x1,%rax
  40e690:	48 c1 e0 04          	shl    $0x4,%rax
  40e694:	48 01 d8             	add    %rbx,%rax
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e697:	4c 39 cb             	cmp    %r9,%rbx
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e69a:	8b 78 04             	mov    0x4(%rax),%edi
  40e69d:	44 8b 40 08          	mov    0x8(%rax),%r8d
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e6a1:	74 6c                	je     40e70f <_ZL14focalHeuristicPK10PlanResult+0x24f>
  40e6a3:	48 81 c3 50 06 00 00 	add    $0x650,%rbx
  40e6aa:	48 89 da             	mov    %rbx,%rdx
  40e6ad:	eb 22                	jmp    40e6d1 <_ZL14focalHeuristicPK10PlanResult+0x211>
  40e6af:	90                   	nop
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e6b0:	48 83 e8 01          	sub    $0x1,%rax
  40e6b4:	48 c1 e0 04          	shl    $0x4,%rax
  40e6b8:	48 01 d0             	add    %rdx,%rax
  40e6bb:	8b 70 04             	mov    0x4(%rax),%esi
  40e6be:	8b 40 08             	mov    0x8(%rax),%eax

  bool operator==(const State& s) const {
    return time == s.time && x == s.x && y == s.y;
  }

  bool equalExceptTime(const State& s) const { return x == s.x && y == s.y; }
  40e6c1:	39 f7                	cmp    %esi,%edi
  40e6c3:	74 26                	je     40e6eb <_ZL14focalHeuristicPK10PlanResult+0x22b>
  40e6c5:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e6cc:	4c 39 f2             	cmp    %r14,%rdx
  40e6cf:	74 af                	je     40e680 <_ZL14focalHeuristicPK10PlanResult+0x1c0>
	if (t < solution[agentIdx].states_size) {
  40e6d1:	48 8b 82 00 04 00 00 	mov    0x400(%rdx),%rax
  40e6d8:	4c 39 e8             	cmp    %r13,%rax
  40e6db:	76 d3                	jbe    40e6b0 <_ZL14focalHeuristicPK10PlanResult+0x1f0>
		return solution[agentIdx].states[t].state;
  40e6dd:	42 8b 74 22 04       	mov    0x4(%rdx,%r12,1),%esi
  40e6e2:	42 8b 44 22 08       	mov    0x8(%rdx,%r12,1),%eax
  40e6e7:	39 f7                	cmp    %esi,%edi
  40e6e9:	75 da                	jne    40e6c5 <_ZL14focalHeuristicPK10PlanResult+0x205>
					++numConflicts;
  40e6eb:	44 39 c0             	cmp    %r8d,%eax
  40e6ee:	0f 94 c0             	sete   %al
  40e6f1:	0f b6 c0             	movzbl %al,%eax
  40e6f4:	41 01 c7             	add    %eax,%r15d
  40e6f7:	eb cc                	jmp    40e6c5 <_ZL14focalHeuristicPK10PlanResult+0x205>
  40e6f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e700:	4c 39 cb             	cmp    %r9,%rbx
		return solution[agentIdx].states[t].state;
  40e703:	42 8b 7c 23 04       	mov    0x4(%rbx,%r12,1),%edi
  40e708:	46 8b 44 23 08       	mov    0x8(%rbx,%r12,1),%r8d
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e70d:	75 94                	jne    40e6a3 <_ZL14focalHeuristicPK10PlanResult+0x1e3>
  40e70f:	48 8b 44 24 d0       	mov    -0x30(%rsp),%rax
  40e714:	49 8d 6d 01          	lea    0x1(%r13),%rbp
  40e718:	48 89 5c 24 b8       	mov    %rbx,-0x48(%rsp)
  40e71d:	4c 89 64 24 d8       	mov    %r12,-0x28(%rsp)
  40e722:	48 05 58 06 00 00    	add    $0x658,%rax
  40e728:	48 89 44 24 c0       	mov    %rax,-0x40(%rsp)
  40e72d:	49 8d 84 24 58 06 00 	lea    0x658(%r12),%rax
  40e734:	00 
  40e735:	48 89 44 24 c8       	mov    %rax,-0x38(%rsp)
	if (t < solution[agentIdx].states_size) {
  40e73a:	48 8b 81 00 04 00 00 	mov    0x400(%rcx),%rax
  40e741:	4c 39 e8             	cmp    %r13,%rax
  40e744:	0f 87 01 01 00 00    	ja     40e84b <_ZL14focalHeuristicPK10PlanResult+0x38b>
  40e74a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e750:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40e754:	48 c1 e2 04          	shl    $0x4,%rdx
  40e758:	48 01 ca             	add    %rcx,%rdx
	if (t < solution[agentIdx].states_size) {
  40e75b:	48 39 e8             	cmp    %rbp,%rax
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e75e:	44 8b 52 04          	mov    0x4(%rdx),%r10d
  40e762:	8b 5a 08             	mov    0x8(%rdx),%ebx
	if (t < solution[agentIdx].states_size) {
  40e765:	0f 87 f7 00 00 00    	ja     40e862 <_ZL14focalHeuristicPK10PlanResult+0x3a2>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e76b:	48 83 e8 01          	sub    $0x1,%rax
  40e76f:	48 c1 e0 04          	shl    $0x4,%rax
  40e773:	48 01 c8             	add    %rcx,%rax
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e776:	48 3b 4c 24 b8       	cmp    -0x48(%rsp),%rcx
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e77b:	44 8b 58 04          	mov    0x4(%rax),%r11d
  40e77f:	8b 40 08             	mov    0x8(%rax),%eax
  40e782:	89 44 24 e0          	mov    %eax,-0x20(%rsp)
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e786:	0f 84 f3 00 00 00    	je     40e87f <_ZL14focalHeuristicPK10PlanResult+0x3bf>
  40e78c:	48 8b 44 24 c0       	mov    -0x40(%rsp),%rax
  40e791:	4c 8d a1 50 06 00 00 	lea    0x650(%rcx),%r12
  40e798:	4c 89 e2             	mov    %r12,%rdx
  40e79b:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
  40e79f:	48 03 4c 24 c8       	add    -0x38(%rsp),%rcx
  40e7a4:	eb 52                	jmp    40e7f8 <_ZL14focalHeuristicPK10PlanResult+0x338>
  40e7a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40e7ad:	00 00 00 
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e7b0:	48 8d 78 ff          	lea    -0x1(%rax),%rdi
  40e7b4:	48 c1 e7 04          	shl    $0x4,%rdi
  40e7b8:	48 01 d7             	add    %rdx,%rdi
	if (t < solution[agentIdx].states_size) {
  40e7bb:	48 39 e8             	cmp    %rbp,%rax
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e7be:	44 8b 47 04          	mov    0x4(%rdi),%r8d
  40e7c2:	44 8b 4f 08          	mov    0x8(%rdi),%r9d
	if (t < solution[agentIdx].states_size) {
  40e7c6:	77 48                	ja     40e810 <_ZL14focalHeuristicPK10PlanResult+0x350>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e7c8:	48 83 e8 01          	sub    $0x1,%rax
  40e7cc:	48 c1 e0 04          	shl    $0x4,%rax
  40e7d0:	48 01 d0             	add    %rdx,%rax
  40e7d3:	8b 78 04             	mov    0x4(%rax),%edi
  40e7d6:	8b 40 08             	mov    0x8(%rax),%eax
  40e7d9:	44 39 d7             	cmp    %r10d,%edi
  40e7dc:	74 3c                	je     40e81a <_ZL14focalHeuristicPK10PlanResult+0x35a>
  40e7de:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
  40e7e5:	48 81 c6 50 06 00 00 	add    $0x650,%rsi
  40e7ec:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e7f3:	4c 39 f2             	cmp    %r14,%rdx
  40e7f6:	74 40                	je     40e838 <_ZL14focalHeuristicPK10PlanResult+0x378>
	if (t < solution[agentIdx].states_size) {
  40e7f8:	48 8b 82 00 04 00 00 	mov    0x400(%rdx),%rax
  40e7ff:	4c 39 e8             	cmp    %r13,%rax
  40e802:	76 ac                	jbe    40e7b0 <_ZL14focalHeuristicPK10PlanResult+0x2f0>
  40e804:	48 39 e8             	cmp    %rbp,%rax
		return solution[agentIdx].states[t].state;
  40e807:	44 8b 41 fc          	mov    -0x4(%rcx),%r8d
  40e80b:	44 8b 09             	mov    (%rcx),%r9d
	if (t < solution[agentIdx].states_size) {
  40e80e:	76 b8                	jbe    40e7c8 <_ZL14focalHeuristicPK10PlanResult+0x308>
		return solution[agentIdx].states[t].state;
  40e810:	8b 7e fc             	mov    -0x4(%rsi),%edi
  40e813:	8b 06                	mov    (%rsi),%eax
  40e815:	44 39 d7             	cmp    %r10d,%edi
  40e818:	75 c4                	jne    40e7de <_ZL14focalHeuristicPK10PlanResult+0x31e>
  40e81a:	39 c3                	cmp    %eax,%ebx
  40e81c:	75 c0                	jne    40e7de <_ZL14focalHeuristicPK10PlanResult+0x31e>
  40e81e:	45 39 d8             	cmp    %r11d,%r8d
  40e821:	75 bb                	jne    40e7de <_ZL14focalHeuristicPK10PlanResult+0x31e>
					++numConflicts;
  40e823:	31 c0                	xor    %eax,%eax
  40e825:	44 3b 4c 24 e0       	cmp    -0x20(%rsp),%r9d
  40e82a:	0f 94 c0             	sete   %al
  40e82d:	41 01 c7             	add    %eax,%r15d
  40e830:	eb ac                	jmp    40e7de <_ZL14focalHeuristicPK10PlanResult+0x31e>
  40e832:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40e838:	4c 89 e1             	mov    %r12,%rcx
	if (t < solution[agentIdx].states_size) {
  40e83b:	48 8b 81 00 04 00 00 	mov    0x400(%rcx),%rax
  40e842:	4c 39 e8             	cmp    %r13,%rax
  40e845:	0f 86 05 ff ff ff    	jbe    40e750 <_ZL14focalHeuristicPK10PlanResult+0x290>
		return solution[agentIdx].states[t].state;
  40e84b:	48 8b 5c 24 d8       	mov    -0x28(%rsp),%rbx
	if (t < solution[agentIdx].states_size) {
  40e850:	48 39 e8             	cmp    %rbp,%rax
		return solution[agentIdx].states[t].state;
  40e853:	44 8b 54 19 04       	mov    0x4(%rcx,%rbx,1),%r10d
  40e858:	8b 5c 19 08          	mov    0x8(%rcx,%rbx,1),%ebx
	if (t < solution[agentIdx].states_size) {
  40e85c:	0f 86 09 ff ff ff    	jbe    40e76b <_ZL14focalHeuristicPK10PlanResult+0x2ab>
		return solution[agentIdx].states[t].state;
  40e862:	48 8b 44 24 d0       	mov    -0x30(%rsp),%rax
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e867:	48 3b 4c 24 b8       	cmp    -0x48(%rsp),%rcx
		return solution[agentIdx].states[t].state;
  40e86c:	44 8b 5c 01 04       	mov    0x4(%rcx,%rax,1),%r11d
  40e871:	8b 44 01 08          	mov    0x8(%rcx,%rax,1),%eax
  40e875:	89 44 24 e0          	mov    %eax,-0x20(%rsp)
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e879:	0f 85 0d ff ff ff    	jne    40e78c <_ZL14focalHeuristicPK10PlanResult+0x2cc>
  40e87f:	4c 8b 64 24 d8       	mov    -0x28(%rsp),%r12
  40e884:	48 83 44 24 d0 10    	addq   $0x10,-0x30(%rsp)
  40e88a:	49 89 ed             	mov    %rbp,%r13
  40e88d:	49 83 c4 10          	add    $0x10,%r12
	for (int t = 0; t < max_t; ++t) {
  40e891:	39 6c 24 e4          	cmp    %ebp,-0x1c(%rsp)
  40e895:	0f 8f d3 fd ff ff    	jg     40e66e <_ZL14focalHeuristicPK10PlanResult+0x1ae>
}
  40e89b:	5b                   	pop    %rbx
  40e89c:	44 89 f8             	mov    %r15d,%eax
  40e89f:	5d                   	pop    %rbp
  40e8a0:	41 5c                	pop    %r12
  40e8a2:	41 5d                	pop    %r13
  40e8a4:	41 5e                	pop    %r14
  40e8a6:	41 5f                	pop    %r15
  40e8a8:	c3                   	retq   
	for (int t = 0; t < max_t; ++t) {
  40e8a9:	45 31 ff             	xor    %r15d,%r15d
}
  40e8ac:	5b                   	pop    %rbx
  40e8ad:	44 89 f8             	mov    %r15d,%eax
  40e8b0:	5d                   	pop    %rbp
  40e8b1:	41 5c                	pop    %r12
  40e8b3:	41 5d                	pop    %r13
  40e8b5:	41 5e                	pop    %r14
  40e8b7:	41 5f                	pop    %r15
  40e8b9:	c3                   	retq   
  40e8ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040e8c0 <_ZlsRSoRK6Action>:
  Left,
  Right,
  Wait,
};

std::ostream& operator<<(std::ostream& os, const Action& a) {
  40e8c0:	41 57                	push   %r15
  40e8c2:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 40e8c0 <_ZlsRSoRK6Action>
  40e8c9:	53                   	push   %rbx
  40e8ca:	49 bb 40 c7 21 00 00 	movabs $0x21c740,%r11
  40e8d1:	00 00 00 
  40e8d4:	48 89 fb             	mov    %rdi,%rbx
  40e8d7:	48 83 ec 08          	sub    $0x8,%rsp
  40e8db:	4c 01 d8             	add    %r11,%rax
  switch (a) {
  40e8de:	83 3e 04             	cmpl   $0x4,(%rsi)
  40e8e1:	77 3d                	ja     40e920 <_ZlsRSoRK6Action+0x60>
  40e8e3:	8b 0e                	mov    (%rsi),%ecx
  40e8e5:	48 8d 15 54 4b 01 00 	lea    0x14b54(%rip),%rdx        # 423440 <_IO_stdin_used+0x800>
  40e8ec:	48 03 14 ca          	add    (%rdx,%rcx,8),%rdx
  40e8f0:	ff e2                	jmpq   *%rdx
  40e8f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	__ostream_insert(__out, __s,
  40e8f8:	ba 05 00 00 00       	mov    $0x5,%edx
  40e8fd:	48 b9 03 81 df ff ff 	movabs $0xffffffffffdf8103,%rcx
  40e904:	ff ff ff 
  40e907:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
  40e90b:	48 b9 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rcx
  40e912:	ff ff ff 
  40e915:	48 89 df             	mov    %rbx,%rdi
  40e918:	49 89 c7             	mov    %rax,%r15
  40e91b:	48 01 c1             	add    %rax,%rcx
  40e91e:	ff d1                	callq  *%rcx
    case Action::Wait:
      os << "Wait";
      break;
  }
  return os;
}
  40e920:	48 83 c4 08          	add    $0x8,%rsp
  40e924:	48 89 d8             	mov    %rbx,%rax
  40e927:	5b                   	pop    %rbx
  40e928:	41 5f                	pop    %r15
  40e92a:	c3                   	retq   
  40e92b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  40e930:	ba 04 00 00 00       	mov    $0x4,%edx
  40e935:	48 b9 09 81 df ff ff 	movabs $0xffffffffffdf8109,%rcx
  40e93c:	ff ff ff 
  40e93f:	eb c6                	jmp    40e907 <_ZlsRSoRK6Action+0x47>
  40e941:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40e948:	ba 02 00 00 00       	mov    $0x2,%edx
  40e94d:	48 b9 f6 80 df ff ff 	movabs $0xffffffffffdf80f6,%rcx
  40e954:	ff ff ff 
  40e957:	eb ae                	jmp    40e907 <_ZlsRSoRK6Action+0x47>
  40e959:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40e960:	ba 04 00 00 00       	mov    $0x4,%edx
  40e965:	48 b9 f9 80 df ff ff 	movabs $0xffffffffffdf80f9,%rcx
  40e96c:	ff ff ff 
  40e96f:	eb 96                	jmp    40e907 <_ZlsRSoRK6Action+0x47>
  40e971:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40e978:	ba 04 00 00 00       	mov    $0x4,%edx
  40e97d:	48 b9 fe 80 df ff ff 	movabs $0xffffffffffdf80fe,%rcx
  40e984:	ff ff ff 
  40e987:	e9 7b ff ff ff       	jmpq   40e907 <_ZlsRSoRK6Action+0x47>
  40e98c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000040e990 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE>:
	Cost focalHeuristic;
	int stat; //Open 0 or Close 1

};

void dump_openset(std::vector<AstarNode>& openSet) {
  40e990:	41 57                	push   %r15
  40e992:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40e990 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE>
  40e999:	41 56                	push   %r14
  40e99b:	49 bb 70 c6 21 00 00 	movabs $0x21c670,%r11
  40e9a2:	00 00 00 
  40e9a5:	41 55                	push   %r13
  40e9a7:	41 54                	push   %r12
  40e9a9:	55                   	push   %rbp
  40e9aa:	53                   	push   %rbx
  40e9ab:	4d 01 df             	add    %r11,%r15
  40e9ae:	49 ba b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%r10
  40e9b5:	ff ff ff 
  40e9b8:	48 b8 0e 81 df ff ff 	movabs $0xffffffffffdf810e,%rax
  40e9bf:	ff ff ff 
  40e9c2:	ba 04 00 00 00       	mov    $0x4,%edx
  40e9c7:	48 83 ec 68          	sub    $0x68,%rsp
      : _M_current(__i) { }
  40e9cb:	4c 8b 4f 08          	mov    0x8(%rdi),%r9
  40e9cf:	4f 8b 2c 3a          	mov    (%r10,%r15,1),%r13
  40e9d3:	4a 8d 34 38          	lea    (%rax,%r15,1),%rsi
  40e9d7:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40e9dc:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40e9e3:	ff ff ff 
  40e9e6:	4c 89 14 24          	mov    %r10,(%rsp)
  40e9ea:	4c 8b 37             	mov    (%rdi),%r14
  40e9ed:	4a 8d 1c 38          	lea    (%rax,%r15,1),%rbx
  40e9f1:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  40e9f6:	4c 89 ef             	mov    %r13,%rdi
  40e9f9:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40e9fe:	ff d3                	callq  *%rbx
	return __pf(*this);
  40ea00:	48 b8 d0 31 de ff ff 	movabs $0xffffffffffde31d0,%rax
  40ea07:	ff ff ff 
  40ea0a:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
  40ea0e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40ea13:	41 ff d4             	callq  *%r12
	__ostream_insert(__out, __s,
  40ea16:	48 b8 13 81 df ff ff 	movabs $0xffffffffffdf8113,%rax
  40ea1d:	ff ff ff 
  40ea20:	ba 18 00 00 00       	mov    $0x18,%edx
  40ea25:	4c 89 ef             	mov    %r13,%rdi
  40ea28:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ea2c:	ff d3                	callq  *%rbx
	return __pf(*this);
  40ea2e:	41 ff d4             	callq  *%r12
	auto iter = openSet.begin();
	auto iterEnd = openSet.end();
	std::cout << "----" << std::endl;
	std::cout << "dump_openset AstarNode: " << std::endl;
	int index = 0;
	for (; iter != iterEnd; ++iter) {
  40ea31:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  40ea36:	4c 8b 14 24          	mov    (%rsp),%r10
  40ea3a:	4d 39 f1             	cmp    %r14,%r9
  40ea3d:	0f 84 f4 01 00 00    	je     40ec37 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0x2a7>
	__ostream_insert(__out, __s,
  40ea43:	48 b8 8a 81 df ff ff 	movabs $0xffffffffffdf818a,%rax
  40ea4a:	ff ff ff 
  40ea4d:	45 31 c0             	xor    %r8d,%r8d
  40ea50:	48 89 dd             	mov    %rbx,%rbp
  40ea53:	4c 01 f8             	add    %r15,%rax
  40ea56:	4d 89 f4             	mov    %r14,%r12
  40ea59:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  40ea5e:	48 b8 2c 81 df ff ff 	movabs $0xffffffffffdf812c,%rax
  40ea65:	ff ff ff 
  40ea68:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40ea6d:	eb 12                	jmp    40ea81 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0xf1>
  40ea6f:	90                   	nop
  40ea70:	49 83 c4 1c          	add    $0x1c,%r12
		if(iter->stat == 0) {
			std::cout << index << ": " << *iter << std::endl; 
		}
		index++;
  40ea74:	41 83 c0 01          	add    $0x1,%r8d
	for (; iter != iterEnd; ++iter) {
  40ea78:	4d 39 e1             	cmp    %r12,%r9
  40ea7b:	0f 84 b6 01 00 00    	je     40ec37 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0x2a7>
		if(iter->stat == 0) {
  40ea81:	41 8b 44 24 18       	mov    0x18(%r12),%eax
  40ea86:	85 c0                	test   %eax,%eax
  40ea88:	75 e6                	jne    40ea70 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0xe0>
			std::cout << index << ": " << *iter << std::endl; 
  40ea8a:	48 bb 00 ea dd ff ff 	movabs $0xffffffffffddea00,%rbx
  40ea91:	ff ff ff 
  40ea94:	44 89 c6             	mov    %r8d,%esi
  40ea97:	4b 8b 3c 3a          	mov    (%r10,%r15,1),%rdi
  40ea9b:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  40eaa0:	44 89 44 24 2c       	mov    %r8d,0x2c(%rsp)
  40eaa5:	4c 01 fb             	add    %r15,%rbx
  40eaa8:	4c 89 54 24 20       	mov    %r10,0x20(%rsp)
  40eaad:	49 83 c4 1c          	add    $0x1c,%r12
  40eab1:	ff d3                	callq  *%rbx
  40eab3:	ba 02 00 00 00       	mov    $0x2,%edx
  40eab8:	49 89 c5             	mov    %rax,%r13
  40eabb:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40eac0:	48 89 c7             	mov    %rax,%rdi
  40eac3:	ff d5                	callq  *%rbp
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40eac5:	41 8b 4c 24 f8       	mov    -0x8(%r12),%ecx
  40eaca:	41 8b 54 24 f4       	mov    -0xc(%r12),%edx
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40eacf:	41 8b 7c 24 f0       	mov    -0x10(%r12),%edi
			<< " stat: " << AstarNode.stat;
  40ead4:	41 8b 44 24 fc       	mov    -0x4(%r12),%eax
  40ead9:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40eade:	89 4c 24 14          	mov    %ecx,0x14(%rsp)
  40eae2:	89 54 24 18          	mov    %edx,0x18(%rsp)
  40eae6:	ba 07 00 00 00       	mov    $0x7,%edx
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40eaeb:	89 7c 24 1c          	mov    %edi,0x1c(%rsp)
			<< " stat: " << AstarNode.stat;
  40eaef:	89 44 24 08          	mov    %eax,0x8(%rsp)
  40eaf3:	4c 89 ef             	mov    %r13,%rdi
  40eaf6:	4b 8d 34 1f          	lea    (%r15,%r11,1),%rsi
  40eafa:	ff d5                	callq  *%rbp

  friend std::ostream& operator<<(std::ostream& os, const State& s) {
    return os << s.time << ": (" << s.x << "," << s.y << ")";
  40eafc:	45 8b 5c 24 ec       	mov    -0x14(%r12),%r11d
  40eb01:	45 8b 74 24 e8       	mov    -0x18(%r12),%r14d
  40eb06:	4c 89 ef             	mov    %r13,%rdi
  40eb09:	41 8b 74 24 e4       	mov    -0x1c(%r12),%esi
  40eb0e:	4c 89 2c 24          	mov    %r13,(%rsp)
  40eb12:	44 89 5c 24 28       	mov    %r11d,0x28(%rsp)
  40eb17:	ff d3                	callq  *%rbx
  40eb19:	49 89 c5             	mov    %rax,%r13
  40eb1c:	48 b8 34 81 df ff ff 	movabs $0xffffffffffdf8134,%rax
  40eb23:	ff ff ff 
  40eb26:	ba 03 00 00 00       	mov    $0x3,%edx
  40eb2b:	4c 89 ef             	mov    %r13,%rdi
  40eb2e:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eb32:	ff d5                	callq  *%rbp
  40eb34:	44 89 f6             	mov    %r14d,%esi
  40eb37:	4c 89 ef             	mov    %r13,%rdi
  40eb3a:	ff d3                	callq  *%rbx
  40eb3c:	49 89 c6             	mov    %rax,%r14
  40eb3f:	48 b8 38 81 df ff ff 	movabs $0xffffffffffdf8138,%rax
  40eb46:	ff ff ff 
  40eb49:	ba 01 00 00 00       	mov    $0x1,%edx
  40eb4e:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eb52:	4c 89 f7             	mov    %r14,%rdi
  40eb55:	ff d5                	callq  *%rbp
  40eb57:	8b 74 24 28          	mov    0x28(%rsp),%esi
  40eb5b:	4c 89 f7             	mov    %r14,%rdi
  40eb5e:	ff d3                	callq  *%rbx
  40eb60:	49 89 c5             	mov    %rax,%r13
  40eb63:	48 b8 03 82 df ff ff 	movabs $0xffffffffffdf8203,%rax
  40eb6a:	ff ff ff 
  40eb6d:	ba 01 00 00 00       	mov    $0x1,%edx
  40eb72:	4c 89 ef             	mov    %r13,%rdi
  40eb75:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eb79:	ff d5                	callq  *%rbp
  40eb7b:	48 b8 3a 81 df ff ff 	movabs $0xffffffffffdf813a,%rax
  40eb82:	ff ff ff 
  40eb85:	ba 09 00 00 00       	mov    $0x9,%edx
  40eb8a:	4c 89 ef             	mov    %r13,%rdi
  40eb8d:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eb91:	ff d5                	callq  *%rbp
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40eb93:	4c 89 ef             	mov    %r13,%rdi
  40eb96:	8b 74 24 1c          	mov    0x1c(%rsp),%esi
  40eb9a:	ff d3                	callq  *%rbx
  40eb9c:	49 89 c5             	mov    %rax,%r13
  40eb9f:	48 b8 44 81 df ff ff 	movabs $0xffffffffffdf8144,%rax
  40eba6:	ff ff ff 
  40eba9:	ba 09 00 00 00       	mov    $0x9,%edx
  40ebae:	4c 89 ef             	mov    %r13,%rdi
  40ebb1:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ebb5:	ff d5                	callq  *%rbp
  40ebb7:	4c 89 ef             	mov    %r13,%rdi
  40ebba:	8b 74 24 18          	mov    0x18(%rsp),%esi
  40ebbe:	ff d3                	callq  *%rbx
  40ebc0:	49 89 c5             	mov    %rax,%r13
  40ebc3:	48 b8 4e 81 df ff ff 	movabs $0xffffffffffdf814e,%rax
  40ebca:	ff ff ff 
  40ebcd:	ba 08 00 00 00       	mov    $0x8,%edx
  40ebd2:	4c 89 ef             	mov    %r13,%rdi
  40ebd5:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ebd9:	ff d5                	callq  *%rbp
			<< " stat: " << AstarNode.stat;
  40ebdb:	4c 89 ef             	mov    %r13,%rdi
  40ebde:	8b 74 24 14          	mov    0x14(%rsp),%esi
  40ebe2:	ff d3                	callq  *%rbx
  40ebe4:	49 89 c5             	mov    %rax,%r13
  40ebe7:	48 b8 57 81 df ff ff 	movabs $0xffffffffffdf8157,%rax
  40ebee:	ff ff ff 
  40ebf1:	ba 07 00 00 00       	mov    $0x7,%edx
  40ebf6:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ebfa:	4c 89 ef             	mov    %r13,%rdi
  40ebfd:	ff d5                	callq  *%rbp
  40ebff:	8b 74 24 08          	mov    0x8(%rsp),%esi
  40ec03:	4c 89 ef             	mov    %r13,%rdi
  40ec06:	ff d3                	callq  *%rbx
	return __pf(*this);
  40ec08:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  40ec0f:	ff ff ff 
  40ec12:	48 8b 3c 24          	mov    (%rsp),%rdi
  40ec16:	4c 01 f8             	add    %r15,%rax
  40ec19:	ff d0                	callq  *%rax
  40ec1b:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  40ec20:	44 8b 44 24 2c       	mov    0x2c(%rsp),%r8d
  40ec25:	4c 8b 54 24 20       	mov    0x20(%rsp),%r10
		index++;
  40ec2a:	41 83 c0 01          	add    $0x1,%r8d
	for (; iter != iterEnd; ++iter) {
  40ec2e:	4d 39 e1             	cmp    %r12,%r9
  40ec31:	0f 85 4a fe ff ff    	jne    40ea81 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0xf1>
	__ostream_insert(__out, __s,
  40ec37:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  40ec3c:	4b 8b 3c 3a          	mov    (%r10,%r15,1),%rdi
  40ec40:	ba 04 00 00 00       	mov    $0x4,%edx
  40ec45:	4a 8d 34 38          	lea    (%rax,%r15,1),%rsi
  40ec49:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  40ec4e:	4c 01 f8             	add    %r15,%rax
  40ec51:	ff d0                	callq  *%rax
	return __pf(*this);
  40ec53:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
	}
	std::cout << "----" << std::endl;
}
  40ec58:	48 83 c4 68          	add    $0x68,%rsp
  40ec5c:	5b                   	pop    %rbx
  40ec5d:	5d                   	pop    %rbp
  40ec5e:	4c 01 f8             	add    %r15,%rax
  40ec61:	41 5c                	pop    %r12
  40ec63:	41 5d                	pop    %r13
  40ec65:	41 5e                	pop    %r14
  40ec67:	41 5f                	pop    %r15
  40ec69:	ff e0                	jmpq   *%rax
  40ec6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040ec70 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE>:

void dump_focalset(std::vector<AstarNode>& openSet, std::vector<int>& focalSet) {
  40ec70:	41 57                	push   %r15
  40ec72:	41 56                	push   %r14
  40ec74:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 40ec70 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE>
  40ec7b:	41 55                	push   %r13
  40ec7d:	41 54                	push   %r12
  40ec7f:	49 bb 90 c3 21 00 00 	movabs $0x21c390,%r11
  40ec86:	00 00 00 
  40ec89:	55                   	push   %rbp
  40ec8a:	53                   	push   %rbx
  40ec8b:	4d 01 de             	add    %r11,%r14
	__ostream_insert(__out, __s,
  40ec8e:	48 b9 0e 81 df ff ff 	movabs $0xffffffffffdf810e,%rcx
  40ec95:	ff ff ff 
  40ec98:	ba 04 00 00 00       	mov    $0x4,%edx
  40ec9d:	4d 89 f7             	mov    %r14,%r15
  40eca0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  40eca7:	4c 8b 2e             	mov    (%rsi),%r13
  40ecaa:	48 8b 46 08          	mov    0x8(%rsi),%rax
  40ecae:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  40ecb5:	00 
  40ecb6:	4a 8d 34 31          	lea    (%rcx,%r14,1),%rsi
  40ecba:	48 b9 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rcx
  40ecc1:	ff ff ff 
  40ecc4:	4a 8b 2c 31          	mov    (%rcx,%r14,1),%rbp
  40ecc8:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  40eccf:	00 
  40ecd0:	48 b9 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rcx
  40ecd7:	ff ff ff 
  40ecda:	4a 8d 1c 31          	lea    (%rcx,%r14,1),%rbx
  40ecde:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  40ece3:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  40ecea:	00 
  40eceb:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40ecf0:	48 89 ef             	mov    %rbp,%rdi
  40ecf3:	ff d3                	callq  *%rbx
	return __pf(*this);
  40ecf5:	48 b9 d0 31 de ff ff 	movabs $0xffffffffffde31d0,%rcx
  40ecfc:	ff ff ff 
  40ecff:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  40ed06:	00 
  40ed07:	4e 8d 24 31          	lea    (%rcx,%r14,1),%r12
  40ed0b:	41 ff d4             	callq  *%r12
	__ostream_insert(__out, __s,
  40ed0e:	48 b8 5f 81 df ff ff 	movabs $0xffffffffffdf815f,%rax
  40ed15:	ff ff ff 
  40ed18:	ba 0f 00 00 00       	mov    $0xf,%edx
  40ed1d:	48 89 ef             	mov    %rbp,%rdi
  40ed20:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
  40ed24:	ff d3                	callq  *%rbx
	return __pf(*this);
  40ed26:	41 ff d4             	callq  *%r12
	auto iter = focalSet.begin();
	auto iterEnd = focalSet.end();
	std::cout << "----" << std::endl;
	std::cout << "dump_focalset: " << std::endl;
	for (; iter != iterEnd; ++iter) {
  40ed29:	4c 3b 6c 24 28       	cmp    0x28(%rsp),%r13
  40ed2e:	0f 84 0c 03 00 00    	je     40f040 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x3d0>
  40ed34:	48 b8 6f 81 df ff ff 	movabs $0xffffffffffdf816f,%rax
  40ed3b:	ff ff ff 
  40ed3e:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
	__ostream_insert(__out, __s,
  40ed43:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
  40ed48:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40ed4d:	48 b8 00 ea dd ff ff 	movabs $0xffffffffffddea00,%rax
  40ed54:	ff ff ff 
  40ed57:	49 89 dc             	mov    %rbx,%r12
  40ed5a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40ed5f:	48 b8 7f 81 df ff ff 	movabs $0xffffffffffdf817f,%rax
  40ed66:	ff ff ff 
  40ed69:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40ed70:	00 
  40ed71:	48 b8 2c 81 df ff ff 	movabs $0xffffffffffdf812c,%rax
  40ed78:	ff ff ff 
  40ed7b:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  40ed82:	00 
  40ed83:	48 b8 34 81 df ff ff 	movabs $0xffffffffffdf8134,%rax
  40ed8a:	ff ff ff 
  40ed8d:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40ed94:	00 
  40ed95:	48 b8 38 81 df ff ff 	movabs $0xffffffffffdf8138,%rax
  40ed9c:	ff ff ff 
  40ed9f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40eda4:	48 b8 03 82 df ff ff 	movabs $0xffffffffffdf8203,%rax
  40edab:	ff ff ff 
  40edae:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40edb3:	48 b8 3a 81 df ff ff 	movabs $0xffffffffffdf813a,%rax
  40edba:	ff ff ff 
  40edbd:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40edc2:	48 b8 44 81 df ff ff 	movabs $0xffffffffffdf8144,%rax
  40edc9:	ff ff ff 
  40edcc:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  40edd1:	48 b8 4e 81 df ff ff 	movabs $0xffffffffffdf814e,%rax
  40edd8:	ff ff ff 
  40eddb:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  40ede0:	48 b8 57 81 df ff ff 	movabs $0xffffffffffdf8157,%rax
  40ede7:	ff ff ff 
  40edea:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  40edef:	48 b8 40 81 de ff ff 	movabs $0xffffffffffde8140,%rax
  40edf6:	ff ff ff 
  40edf9:	4c 01 f0             	add    %r14,%rax
  40edfc:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  40ee03:	00 
  40ee04:	4c 89 e8             	mov    %r13,%rax
  40ee07:	eb 48                	jmp    40ee51 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1e1>
  40ee09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40ee10:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    { return flush(__os.put(__os.widen('\n'))); }
  40ee14:	48 b8 90 e3 dd ff ff 	movabs $0xffffffffffdde390,%rax
  40ee1b:	ff ff ff 
  40ee1e:	4c 89 ef             	mov    %r13,%rdi
  40ee21:	4d 89 f7             	mov    %r14,%r15
  40ee24:	4c 01 f0             	add    %r14,%rax
  40ee27:	ff d0                	callq  *%rax
    { return __os.flush(); }
  40ee29:	48 89 c7             	mov    %rax,%rdi
  40ee2c:	48 b8 20 e6 dd ff ff 	movabs $0xffffffffffdde620,%rax
  40ee33:	ff ff ff 
  40ee36:	4c 01 f0             	add    %r14,%rax
  40ee39:	ff d0                	callq  *%rax
  40ee3b:	48 83 44 24 08 04    	addq   $0x4,0x8(%rsp)
  40ee41:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40ee46:	48 39 44 24 28       	cmp    %rax,0x28(%rsp)
  40ee4b:	0f 84 ef 01 00 00    	je     40f040 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x3d0>
		//std::cout << *iter << std::endl; 
		std::cout << "openset index: "<< *iter << ", AstarNode: " << openSet[*iter] << std::endl; 
  40ee51:	48 63 10             	movslq (%rax),%rdx
      { return *(this->_M_impl._M_start + __n); }
  40ee54:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
	__ostream_insert(__out, __s,
  40ee59:	4d 89 f7             	mov    %r14,%r15
  40ee5c:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
  40ee61:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40ee68:	00 
  40ee69:	48 89 d3             	mov    %rdx,%rbx
  40ee6c:	4c 89 ef             	mov    %r13,%rdi
  40ee6f:	48 29 d0             	sub    %rdx,%rax
  40ee72:	48 8b 11             	mov    (%rcx),%rdx
  40ee75:	48 8d 2c 82          	lea    (%rdx,%rax,4),%rbp
  40ee79:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  40ee7e:	ba 0f 00 00 00       	mov    $0xf,%edx
  40ee83:	4a 8d 34 30          	lea    (%rax,%r14,1),%rsi
  40ee87:	41 ff d4             	callq  *%r12
  40ee8a:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40ee8f:	89 de                	mov    %ebx,%esi
  40ee91:	4c 89 ef             	mov    %r13,%rdi
  40ee94:	4a 8d 1c 30          	lea    (%rax,%r14,1),%rbx
  40ee98:	ff d3                	callq  *%rbx
  40ee9a:	49 89 c5             	mov    %rax,%r13
  40ee9d:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40eea4:	00 
  40eea5:	ba 0d 00 00 00       	mov    $0xd,%edx
  40eeaa:	4c 89 ef             	mov    %r13,%rdi
  40eead:	4a 8d 34 30          	lea    (%rax,%r14,1),%rsi
  40eeb1:	41 ff d4             	callq  *%r12
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40eeb4:	8b 4d 14             	mov    0x14(%rbp),%ecx
  40eeb7:	4c 8b 84 24 88 00 00 	mov    0x88(%rsp),%r8
  40eebe:	00 
  40eebf:	8b 55 10             	mov    0x10(%rbp),%edx
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40eec2:	8b 7d 0c             	mov    0xc(%rbp),%edi
			<< " stat: " << AstarNode.stat;
  40eec5:	8b 45 18             	mov    0x18(%rbp),%eax
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40eec8:	89 4c 24 14          	mov    %ecx,0x14(%rsp)
  40eecc:	4b 8d 34 30          	lea    (%r8,%r14,1),%rsi
  40eed0:	89 54 24 18          	mov    %edx,0x18(%rsp)
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40eed4:	89 7c 24 1c          	mov    %edi,0x1c(%rsp)
  40eed8:	ba 07 00 00 00       	mov    $0x7,%edx
  40eedd:	4c 89 ef             	mov    %r13,%rdi
			<< " stat: " << AstarNode.stat;
  40eee0:	89 44 24 10          	mov    %eax,0x10(%rsp)
  40eee4:	41 ff d4             	callq  *%r12
  40eee7:	44 8b 55 04          	mov    0x4(%rbp),%r10d
  40eeeb:	44 8b 4d 08          	mov    0x8(%rbp),%r9d
  40eeef:	4c 89 ef             	mov    %r13,%rdi
  40eef2:	8b 75 00             	mov    0x0(%rbp),%esi
  40eef5:	44 89 54 24 24       	mov    %r10d,0x24(%rsp)
  40eefa:	44 89 4c 24 20       	mov    %r9d,0x20(%rsp)
  40eeff:	ff d3                	callq  *%rbx
  40ef01:	4c 8b 9c 24 90 00 00 	mov    0x90(%rsp),%r11
  40ef08:	00 
  40ef09:	48 89 c5             	mov    %rax,%rbp
  40ef0c:	ba 03 00 00 00       	mov    $0x3,%edx
  40ef11:	48 89 c7             	mov    %rax,%rdi
  40ef14:	4b 8d 34 33          	lea    (%r11,%r14,1),%rsi
  40ef18:	41 ff d4             	callq  *%r12
  40ef1b:	48 89 ef             	mov    %rbp,%rdi
  40ef1e:	8b 74 24 24          	mov    0x24(%rsp),%esi
  40ef22:	ff d3                	callq  *%rbx
  40ef24:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
  40ef29:	48 89 c5             	mov    %rax,%rbp
  40ef2c:	ba 01 00 00 00       	mov    $0x1,%edx
  40ef31:	48 89 c7             	mov    %rax,%rdi
  40ef34:	4b 8d 34 30          	lea    (%r8,%r14,1),%rsi
  40ef38:	41 ff d4             	callq  *%r12
  40ef3b:	48 89 ef             	mov    %rbp,%rdi
  40ef3e:	8b 74 24 20          	mov    0x20(%rsp),%esi
  40ef42:	ff d3                	callq  *%rbx
  40ef44:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
  40ef49:	48 89 c5             	mov    %rax,%rbp
  40ef4c:	ba 01 00 00 00       	mov    $0x1,%edx
  40ef51:	48 89 c7             	mov    %rax,%rdi
  40ef54:	4b 8d 34 31          	lea    (%r9,%r14,1),%rsi
  40ef58:	41 ff d4             	callq  *%r12
  40ef5b:	4c 8b 54 24 58       	mov    0x58(%rsp),%r10
  40ef60:	ba 09 00 00 00       	mov    $0x9,%edx
  40ef65:	48 89 ef             	mov    %rbp,%rdi
  40ef68:	4b 8d 34 32          	lea    (%r10,%r14,1),%rsi
  40ef6c:	41 ff d4             	callq  *%r12
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40ef6f:	48 89 ef             	mov    %rbp,%rdi
  40ef72:	8b 74 24 1c          	mov    0x1c(%rsp),%esi
  40ef76:	ff d3                	callq  *%rbx
  40ef78:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40ef7d:	48 89 c5             	mov    %rax,%rbp
  40ef80:	ba 09 00 00 00       	mov    $0x9,%edx
  40ef85:	4a 8d 34 37          	lea    (%rdi,%r14,1),%rsi
  40ef89:	48 89 c7             	mov    %rax,%rdi
  40ef8c:	41 ff d4             	callq  *%r12
  40ef8f:	48 89 ef             	mov    %rbp,%rdi
  40ef92:	8b 74 24 18          	mov    0x18(%rsp),%esi
  40ef96:	ff d3                	callq  *%rbx
  40ef98:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  40ef9d:	48 89 c5             	mov    %rax,%rbp
  40efa0:	ba 08 00 00 00       	mov    $0x8,%edx
  40efa5:	4a 8d 34 37          	lea    (%rdi,%r14,1),%rsi
  40efa9:	48 89 c7             	mov    %rax,%rdi
  40efac:	41 ff d4             	callq  *%r12
			<< " stat: " << AstarNode.stat;
  40efaf:	48 89 ef             	mov    %rbp,%rdi
  40efb2:	8b 74 24 14          	mov    0x14(%rsp),%esi
  40efb6:	ff d3                	callq  *%rbx
  40efb8:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  40efbd:	48 89 c5             	mov    %rax,%rbp
  40efc0:	ba 07 00 00 00       	mov    $0x7,%edx
  40efc5:	48 89 c7             	mov    %rax,%rdi
  40efc8:	4a 8d 34 31          	lea    (%rcx,%r14,1),%rsi
  40efcc:	41 ff d4             	callq  *%r12
  40efcf:	8b 74 24 10          	mov    0x10(%rsp),%esi
  40efd3:	48 89 ef             	mov    %rbp,%rdi
  40efd6:	ff d3                	callq  *%rbx
    { return flush(__os.put(__os.widen('\n'))); }
  40efd8:	49 8b 45 00          	mov    0x0(%r13),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40efdc:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40efe0:	49 8b 9c 05 f0 00 00 	mov    0xf0(%r13,%rax,1),%rbx
  40efe7:	00 
      if (!__f)
  40efe8:	48 85 db             	test   %rbx,%rbx
  40efeb:	0f 84 9a 00 00 00    	je     40f08b <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x41b>
	if (_M_widen_ok)
  40eff1:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
  40eff5:	0f 85 15 fe ff ff    	jne    40ee10 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1a0>
	this->_M_widen_init();
  40effb:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40f002:	ff ff ff 
  40f005:	48 89 df             	mov    %rbx,%rdi
  40f008:	4d 89 f7             	mov    %r14,%r15
  40f00b:	4c 01 f0             	add    %r14,%rax
  40f00e:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40f010:	48 8b 03             	mov    (%rbx),%rax
  40f013:	be 0a 00 00 00       	mov    $0xa,%esi
  40f018:	48 8b 40 30          	mov    0x30(%rax),%rax
  40f01c:	48 3b 84 24 98 00 00 	cmp    0x98(%rsp),%rax
  40f023:	00 
  40f024:	0f 84 ea fd ff ff    	je     40ee14 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1a4>
  40f02a:	48 89 df             	mov    %rbx,%rdi
  40f02d:	ff d0                	callq  *%rax
  40f02f:	0f be f0             	movsbl %al,%esi
  40f032:	e9 dd fd ff ff       	jmpq   40ee14 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1a4>
  40f037:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40f03e:	00 00 
	__ostream_insert(__out, __s,
  40f040:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  40f047:	00 
  40f048:	4d 89 f7             	mov    %r14,%r15
  40f04b:	ba 04 00 00 00       	mov    $0x4,%edx
  40f050:	4a 8d 34 30          	lea    (%rax,%r14,1),%rsi
  40f054:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  40f05b:	00 
  40f05c:	4a 8b 3c 30          	mov    (%rax,%r14,1),%rdi
  40f060:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  40f067:	00 
  40f068:	4c 01 f0             	add    %r14,%rax
  40f06b:	ff d0                	callq  *%rax
	return __pf(*this);
  40f06d:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  40f074:	00 
	}
	std::cout << "----" << std::endl;
}
  40f075:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  40f07c:	5b                   	pop    %rbx
  40f07d:	5d                   	pop    %rbp
  40f07e:	4c 01 f0             	add    %r14,%rax
  40f081:	41 5c                	pop    %r12
  40f083:	41 5d                	pop    %r13
  40f085:	41 5e                	pop    %r14
  40f087:	41 5f                	pop    %r15
  40f089:	ff e0                	jmpq   *%rax
	__throw_bad_cast();
  40f08b:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40f092:	ff ff ff 
  40f095:	4c 01 f0             	add    %r14,%rax
  40f098:	ff d0                	callq  *%rax
  40f09a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040f0a0 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE>:

int openset_top(std::vector<AstarNode>& openSet) {
  40f0a0:	48 8b 0f             	mov    (%rdi),%rcx
  40f0a3:	48 8b 77 08          	mov    0x8(%rdi),%rsi
	AstarNode current = openSet[0];
	size_t current_idx = 0;
	auto iter = openSet.begin();
	auto iterEnd = openSet.end();
	// set initial AstarNode
	for (; iter != iterEnd; ++iter) {
  40f0a7:	48 39 ce             	cmp    %rcx,%rsi
  40f0aa:	74 26                	je     40f0d2 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x32>
		if (iter->stat == 1) // CLOSED
  40f0ac:	83 79 18 01          	cmpl   $0x1,0x18(%rcx)
  40f0b0:	48 8d 51 1c          	lea    0x1c(%rcx),%rdx
  40f0b4:	74 17                	je     40f0cd <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x2d>
  40f0b6:	e9 a9 00 00 00       	jmpq   40f164 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0xc4>
  40f0bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  40f0c0:	48 8d 42 1c          	lea    0x1c(%rdx),%rax
  40f0c4:	83 78 fc 01          	cmpl   $0x1,-0x4(%rax)
  40f0c8:	75 0e                	jne    40f0d8 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x38>
  40f0ca:	48 89 c2             	mov    %rax,%rdx
	for (; iter != iterEnd; ++iter) {
  40f0cd:	48 39 d6             	cmp    %rdx,%rsi
  40f0d0:	75 ee                	jne    40f0c0 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x20>
  40f0d2:	31 c0                	xor    %eax,%eax
				current_idx = std::distance(openSet.begin(), iter); 
			}
		}
	}

	return current_idx;
  40f0d4:	c3                   	retq   
  40f0d5:	0f 1f 00             	nopl   (%rax)
  40f0d8:	48 89 d0             	mov    %rdx,%rax
  40f0db:	48 bf b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rdi
  40f0e2:	db b6 6d 
  40f0e5:	48 29 c8             	sub    %rcx,%rax
  40f0e8:	48 c1 f8 02          	sar    $0x2,%rax
  40f0ec:	48 0f af c7          	imul   %rdi,%rax
  40f0f0:	48 89 d7             	mov    %rdx,%rdi
			current = *iter;
  40f0f3:	44 8b 42 0c          	mov    0xc(%rdx),%r8d
  40f0f7:	44 8b 4a 10          	mov    0x10(%rdx),%r9d
  40f0fb:	48 29 cf             	sub    %rcx,%rdi
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
  40f0fe:	49 ba b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%r10
  40f105:	db b6 6d 
  40f108:	48 89 f9             	mov    %rdi,%rcx
  40f10b:	eb 24                	jmp    40f131 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x91>
  40f10d:	0f 1f 00             	nopl   (%rax)
			if (current.fScore > iter->fScore) {
  40f110:	7e 12                	jle    40f124 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x84>
  40f112:	48 89 c8             	mov    %rcx,%rax
				current = *iter;
  40f115:	44 8b 4a 10          	mov    0x10(%rdx),%r9d
  40f119:	41 89 f8             	mov    %edi,%r8d
  40f11c:	48 c1 f8 02          	sar    $0x2,%rax
				current_idx = std::distance(openSet.begin(), iter); 
  40f120:	49 0f af c2          	imul   %r10,%rax
	++_M_current;
  40f124:	48 83 c2 1c          	add    $0x1c,%rdx
  40f128:	48 83 c1 1c          	add    $0x1c,%rcx
	for (; iter != iterEnd; ++iter) {
  40f12c:	48 39 d6             	cmp    %rdx,%rsi
  40f12f:	74 31                	je     40f162 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0xc2>
		if (iter->stat == 1) // CLOSED
  40f131:	83 7a 18 01          	cmpl   $0x1,0x18(%rdx)
  40f135:	74 ed                	je     40f124 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x84>
		if (current.fScore != iter->fScore) {
  40f137:	8b 7a 0c             	mov    0xc(%rdx),%edi
  40f13a:	41 39 f8             	cmp    %edi,%r8d
  40f13d:	75 d1                	jne    40f110 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x70>
			if (current.gScore < iter->gScore) {
  40f13f:	8b 7a 10             	mov    0x10(%rdx),%edi
  40f142:	41 39 f9             	cmp    %edi,%r9d
  40f145:	7d dd                	jge    40f124 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x84>
    { return __lhs.base() - __rhs.base(); }
  40f147:	48 89 c8             	mov    %rcx,%rax
	++_M_current;
  40f14a:	48 83 c2 1c          	add    $0x1c,%rdx
  40f14e:	48 83 c1 1c          	add    $0x1c,%rcx
    { return __lhs.base() - __rhs.base(); }
  40f152:	48 c1 f8 02          	sar    $0x2,%rax
  40f156:	41 89 f9             	mov    %edi,%r9d
				current_idx = std::distance(openSet.begin(), iter); 
  40f159:	49 0f af c2          	imul   %r10,%rax
	for (; iter != iterEnd; ++iter) {
  40f15d:	48 39 d6             	cmp    %rdx,%rsi
  40f160:	75 cf                	jne    40f131 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x91>
  40f162:	f3 c3                	repz retq 
		if (iter->stat == 1) // CLOSED
  40f164:	48 89 ca             	mov    %rcx,%rdx
  40f167:	31 c0                	xor    %eax,%eax
  40f169:	eb 85                	jmp    40f0f0 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x50>
  40f16b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040f170 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE>:
}

int focalset_top(std::vector<AstarNode>& openSet, std::vector<int>& focalSet) {
  40f170:	55                   	push   %rbp
  40f171:	53                   	push   %rbx
  40f172:	4c 8b 0e             	mov    (%rsi),%r9
  40f175:	4c 8b 17             	mov    (%rdi),%r10
	int coi = focalSet[0]; // coi = current openset index
	AstarNode current = openSet[coi];
  40f178:	49 63 11             	movslq (%r9),%rdx
  40f17b:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40f182:	00 
  40f183:	48 29 d0             	sub    %rdx,%rax
  40f186:	49 8d 04 82          	lea    (%r10,%rax,4),%rax
  40f18a:	8b 58 0c             	mov    0xc(%rax),%ebx
  40f18d:	8b 68 10             	mov    0x10(%rax),%ebp
  40f190:	44 8b 40 14          	mov    0x14(%rax),%r8d
      : _M_current(__i) { }
  40f194:	48 8b 46 08          	mov    0x8(%rsi),%rax
	int current_idx = 0;
	auto iter = focalSet.begin();
	auto iterEnd = focalSet.end();
	for (; iter != iterEnd; ++iter) {
  40f198:	4c 39 c8             	cmp    %r9,%rax
  40f19b:	0f 84 8e 00 00 00    	je     40f22f <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xbf>
  40f1a1:	49 8d 51 04          	lea    0x4(%r9),%rdx
  40f1a5:	44 89 c1             	mov    %r8d,%ecx
  40f1a8:	89 ef                	mov    %ebp,%edi
  40f1aa:	89 de                	mov    %ebx,%esi
  40f1ac:	48 29 d0             	sub    %rdx,%rax
  40f1af:	31 d2                	xor    %edx,%edx
  40f1b1:	48 c1 e8 02          	shr    $0x2,%rax
  40f1b5:	4c 8d 1c 85 04 00 00 	lea    0x4(,%rax,4),%r11
  40f1bc:	00 
  40f1bd:	31 c0                	xor    %eax,%eax
  40f1bf:	eb 3c                	jmp    40f1fd <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x8d>
  40f1c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		int n_coi = *iter;
		AstarNode n = openSet[n_coi];
		if (current.focalHeuristic != n.focalHeuristic) {
			if (current.focalHeuristic > n.focalHeuristic) {
  40f1c8:	7d 0e                	jge    40f1d8 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
				coi = n_coi;
				current = n;
				current_idx = std::distance(focalSet.begin(), iter); 
  40f1ca:	48 89 d0             	mov    %rdx,%rax
  40f1cd:	41 89 c8             	mov    %ecx,%r8d
  40f1d0:	89 fd                	mov    %edi,%ebp
  40f1d2:	48 c1 e8 02          	shr    $0x2,%rax
  40f1d6:	89 f3                	mov    %esi,%ebx
  40f1d8:	48 83 c2 04          	add    $0x4,%rdx
	for (; iter != iterEnd; ++iter) {
  40f1dc:	49 39 d3             	cmp    %rdx,%r11
  40f1df:	74 3b                	je     40f21c <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xac>
  40f1e1:	49 63 34 11          	movslq (%r9,%rdx,1),%rsi
  40f1e5:	48 8d 0c f5 00 00 00 	lea    0x0(,%rsi,8),%rcx
  40f1ec:	00 
  40f1ed:	48 29 f1             	sub    %rsi,%rcx
  40f1f0:	49 8d 0c 8a          	lea    (%r10,%rcx,4),%rcx
  40f1f4:	8b 71 0c             	mov    0xc(%rcx),%esi
  40f1f7:	8b 79 10             	mov    0x10(%rcx),%edi
  40f1fa:	8b 49 14             	mov    0x14(%rcx),%ecx
		if (current.focalHeuristic != n.focalHeuristic) {
  40f1fd:	44 39 c1             	cmp    %r8d,%ecx
  40f200:	75 c6                	jne    40f1c8 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x58>
			}
		}
		else if (current.fScore != n.fScore) {
  40f202:	39 f3                	cmp    %esi,%ebx
  40f204:	74 1a                	je     40f220 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xb0>
			if (current.fScore > n.fScore) {
  40f206:	7e d0                	jle    40f1d8 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
				coi = n_coi;
				current = n;
				current_idx = std::distance(focalSet.begin(), iter); 
  40f208:	48 89 d0             	mov    %rdx,%rax
  40f20b:	48 83 c2 04          	add    $0x4,%rdx
  40f20f:	89 fd                	mov    %edi,%ebp
  40f211:	48 c1 e8 02          	shr    $0x2,%rax
	for (; iter != iterEnd; ++iter) {
  40f215:	49 39 d3             	cmp    %rdx,%r11
  40f218:	89 f3                	mov    %esi,%ebx
  40f21a:	75 c5                	jne    40f1e1 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x71>
			}
		}
	}

	return current_idx;
}
  40f21c:	5b                   	pop    %rbx
  40f21d:	5d                   	pop    %rbp
  40f21e:	c3                   	retq   
  40f21f:	90                   	nop
			if (current.gScore < n.gScore) {
  40f220:	39 fd                	cmp    %edi,%ebp
  40f222:	7d b4                	jge    40f1d8 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
				current_idx = std::distance(focalSet.begin(), iter); 
  40f224:	48 89 d0             	mov    %rdx,%rax
  40f227:	89 fd                	mov    %edi,%ebp
  40f229:	48 c1 e8 02          	shr    $0x2,%rax
  40f22d:	eb a9                	jmp    40f1d8 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
	int current_idx = 0;
  40f22f:	31 c0                	xor    %eax,%eax
	return current_idx;
  40f231:	eb e9                	jmp    40f21c <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xac>
  40f233:	0f 1f 00             	nopl   (%rax)
  40f236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f23d:	00 00 00 

000000000040f240 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE>:
  40f240:	48 8b 07             	mov    (%rdi),%rax
  40f243:	48 8b 57 08          	mov    0x8(%rdi),%rdx

bool openset_is_allclosed(std::vector<AstarNode>& openSet) {
	auto iter = openSet.begin();
	auto iterEnd = openSet.end();
	for (; iter != iterEnd; ++iter) {
  40f247:	48 39 d0             	cmp    %rdx,%rax
  40f24a:	74 24                	je     40f270 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x30>
		if(iter->stat == 0)
  40f24c:	8b 70 18             	mov    0x18(%rax),%esi
  40f24f:	85 f6                	test   %esi,%esi
  40f251:	74 2d                	je     40f280 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x40>
  40f253:	48 83 c0 1c          	add    $0x1c,%rax
  40f257:	eb 12                	jmp    40f26b <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x2b>
  40f259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40f260:	48 83 c0 1c          	add    $0x1c,%rax
  40f264:	8b 48 fc             	mov    -0x4(%rax),%ecx
  40f267:	85 c9                	test   %ecx,%ecx
  40f269:	74 15                	je     40f280 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x40>
	for (; iter != iterEnd; ++iter) {
  40f26b:	48 39 c2             	cmp    %rax,%rdx
  40f26e:	75 f0                	jne    40f260 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x20>
			return false;
	}
	return true;
  40f270:	b8 01 00 00 00       	mov    $0x1,%eax
  40f275:	c3                   	retq   
  40f276:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f27d:	00 00 00 
			return false;
  40f280:	31 c0                	xor    %eax,%eax
}
  40f282:	c3                   	retq   
  40f283:	0f 1f 00             	nopl   (%rax)
  40f286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f28d:	00 00 00 

000000000040f290 <_Z5indexRK13HighLevelNode>:

bool done[MAX_NODE_NUMS] __attribute__((aligned(SWARM_ALIGNMENT)));

//#####################################

int index(const HighLevelNode& n) {
  40f290:	41 57                	push   %r15
  40f292:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40f290 <_Z5indexRK13HighLevelNode>
  40f299:	53                   	push   %rbx
  40f29a:	49 bb 70 bd 21 00 00 	movabs $0x21bd70,%r11
  40f2a1:	00 00 00 
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
  40f2a4:	48 b8 20 96 df ff ff 	movabs $0xffffffffffdf9620,%rax
  40f2ab:	ff ff ff 
  40f2ae:	48 89 fb             	mov    %rdi,%rbx
  40f2b1:	48 83 ec 18          	sub    $0x18,%rsp
  40f2b5:	4d 01 df             	add    %r11,%r15
  40f2b8:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40f2bc:	f2 41 0f 10 14 07    	movsd  (%r15,%rax,1),%xmm2
  40f2c2:	48 b8 00 e7 dd ff ff 	movabs $0xffffffffffdde700,%rax
  40f2c9:	ff ff ff 
  40f2cc:	4c 01 f8             	add    %r15,%rax
  40f2cf:	f2 0f 11 54 24 08    	movsd  %xmm2,0x8(%rsp)
  40f2d5:	f2 0f 2a 8f 5c 00 01 	cvtsi2sdl 0x1005c(%rdi),%xmm1
  40f2dc:	00 
  40f2dd:	66 0f 28 c2          	movapd %xmm2,%xmm0
  40f2e1:	ff d0                	callq  *%rax
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  40f2e3:	8b 83 54 00 01 00    	mov    0x10054(%rbx),%eax
  40f2e9:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40f2ed:	01 c0                	add    %eax,%eax
  40f2ef:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  40f2f3:	48 b8 28 96 df ff ff 	movabs $0xffffffffffdf9628,%rax
  40f2fa:	ff ff ff 
  40f2fd:	f2 42 0f 5c 04 38    	subsd  (%rax,%r15,1),%xmm0
  40f303:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40f307:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40f30b:	f2 0f 2a 8b 58 00 01 	cvtsi2sdl 0x10058(%rbx),%xmm1
  40f312:	00 
}
  40f313:	48 83 c4 18          	add    $0x18,%rsp
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  40f317:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
}
  40f31b:	5b                   	pop    %rbx
  40f31c:	41 5f                	pop    %r15
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  40f31e:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
}
  40f322:	c3                   	retq   
  40f323:	0f 1f 00             	nopl   (%rax)
  40f326:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f32d:	00 00 00 

000000000040f330 <_Z5indexii>:
 
int index(int parent_nodeid, int child_id) {
	return parent_nodeid * 2 + 1 + child_id;
  40f330:	8d 44 7e 01          	lea    0x1(%rsi,%rdi,2),%eax
}
  40f334:	c3                   	retq   
  40f335:	90                   	nop
  40f336:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f33d:	00 00 00 

000000000040f340 <_Z6fillermP13HighLevelNodemi>:
#else
	void main_loop_task(int n);
#endif
void enq_upper(swarm::Timestamp ts, HighLevelNode* node,  size_t i , int hlsnum);

void filler(swarm::Timestamp ts, HighLevelNode* node,  size_t i , int hlsnum){
  40f340:	41 56                	push   %r14
  40f342:	41 55                	push   %r13
  40f344:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 40f340 <_Z6fillermP13HighLevelNodemi>
  40f34b:	41 54                	push   %r12
  40f34d:	49 89 d4             	mov    %rdx,%r12
  40f350:	55                   	push   %rbp
  //swarm::info("filler reach ts:%x, superts:%x", ts, swarm::superTimestamp());
  //HLSQueueNode( node,  i , ts, hlsnum);
  node->cost += node->solution[i].cost;
  40f351:	48 69 d2 50 06 00 00 	imul   $0x650,%rdx,%rdx
void filler(swarm::Timestamp ts, HighLevelNode* node,  size_t i , int hlsnum){
  40f358:	53                   	push   %rbx
  40f359:	49 bb c0 bc 21 00 00 	movabs $0x21bcc0,%r11
  40f360:	00 00 00 
  40f363:	48 89 f3             	mov    %rsi,%rbx
  40f366:	4d 01 dd             	add    %r11,%r13
  40f369:	89 cd                	mov    %ecx,%ebp
  node->LB += node->solution[i].fmin;
	node->focalHeuristic = focalHeuristic(node->solution);  
  40f36b:	48 89 f7             	mov    %rsi,%rdi
  node->cost += node->solution[i].cost;
  40f36e:	48 01 f2             	add    %rsi,%rdx
  40f371:	8b 82 10 06 00 00    	mov    0x610(%rdx),%eax
  40f377:	03 86 40 00 01 00    	add    0x10040(%rsi),%eax
  40f37d:	41 89 c6             	mov    %eax,%r14d
  40f380:	89 86 40 00 01 00    	mov    %eax,0x10040(%rsi)
  node->LB += node->solution[i].fmin;
  40f386:	8b 82 14 06 00 00    	mov    0x614(%rdx),%eax
  40f38c:	01 86 44 00 01 00    	add    %eax,0x10044(%rsi)
	node->focalHeuristic = focalHeuristic(node->solution);  
  40f392:	48 b8 c0 34 de ff ff 	movabs $0xffffffffffde34c0,%rax
  40f399:	ff ff ff 
  40f39c:	4c 01 e8             	add    %r13,%rax
  40f39f:	ff d0                	callq  *%rax
  40f3a1:	89 83 48 00 01 00    	mov    %eax,0x10048(%rbx)
  
  unsigned int child_prio = node->focalHeuristic * 1000 + node->cost;
  40f3a7:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  40f3ad:	44 01 f0             	add    %r14d,%eax
  node->timestamp =  child_prio;
  40f3b0:	89 83 4c 00 01 00    	mov    %eax,0x1004c(%rbx)
        : [opcode]"g"(op));
  40f3b6:	48 c7 c1 12 04 00 00 	mov    $0x412,%rcx
  40f3bd:	48 87 c9             	xchg   %rcx,%rcx
  if(child_prio>= swarm::superTimestamp()){ 
  40f3c0:	48 39 c8             	cmp    %rcx,%rax
  40f3c3:	73 3b                	jae    40f400 <_Z6fillermP13HighLevelNodemi+0xc0>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40f3c5:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f3cc:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f3d1:	48 87 c9             	xchg   %rcx,%rcx
            :);
  40f3d4:	48 ba b0 0b df ff ff 	movabs $0xffffffffffdf0bb0,%rdx
  40f3db:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f3de:	48 63 b3 50 00 01 00 	movslq 0x10050(%rbx),%rsi
            :);
  40f3e5:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40f3ea:	4c 01 ea             	add    %r13,%rdx
  40f3ed:	48 89 c7             	mov    %rax,%rdi
  40f3f0:	48 87 c9             	xchg   %rcx,%rcx
		    EnqFlags::NOHINT,    
			  node->id);
  }
  return;

}
  40f3f3:	5b                   	pop    %rbx
  40f3f4:	5d                   	pop    %rbp
  40f3f5:	41 5c                	pop    %r12
  40f3f7:	41 5d                	pop    %r13
  40f3f9:	41 5e                	pop    %r14
  40f3fb:	c3                   	retq   
  40f3fc:	0f 1f 40 00          	nopl   0x0(%rax)
    register uint64_t r9  asm("r9")  = v4;
  40f400:	48 ba 70 b8 de ff ff 	movabs $0xffffffffffdeb870,%rdx
  40f407:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f40a:	4c 63 c5             	movslq %ebp,%r8
    register uint64_t r10 asm("r10") = v5;
  40f40d:	45 31 d2             	xor    %r10d,%r10d
    register uint64_t r9  asm("r9")  = v4;
  40f410:	4e 8d 0c 2a          	lea    (%rdx,%r13,1),%r9
            :);
  40f414:	b9 03 00 20 40       	mov    $0x40200003,%ecx
  40f419:	48 89 c7             	mov    %rax,%rdi
  40f41c:	48 89 de             	mov    %rbx,%rsi
  40f41f:	4c 89 e2             	mov    %r12,%rdx
  40f422:	48 87 c9             	xchg   %rcx,%rcx
  40f425:	5b                   	pop    %rbx
  40f426:	5d                   	pop    %rbp
  40f427:	41 5c                	pop    %r12
  40f429:	41 5d                	pop    %r13
  40f42b:	41 5e                	pop    %r14
  40f42d:	c3                   	retq   
  40f42e:	66 90                	xchg   %ax,%ax

000000000040f430 <_Z9enq_uppermP13HighLevelNodemi>:


void enq_upper(swarm::Timestamp ts, HighLevelNode* node,  size_t i ,  int hlsnum) {
  40f430:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40f430 <_Z9enq_uppermP13HighLevelNodemi>
  40f437:	49 bb d0 bb 21 00 00 	movabs $0x21bbd0,%r11
  40f43e:	00 00 00 
  40f441:	49 89 fa             	mov    %rdi,%r10
  40f444:	4c 63 c1             	movslq %ecx,%r8
  40f447:	4c 01 d8             	add    %r11,%rax
        : [opcode]"g"(op));
  40f44a:	48 c7 c1 12 04 00 00 	mov    $0x412,%rcx
  40f451:	48 87 c9             	xchg   %rcx,%rcx
			int parent_prio = node->parentFH * 1000 + node->parentCost;
			int child_prio = node->focalHeuristic * 1000 + node->cost;  
      
      //swarm::info("fractal doain ts = %i,perentts: %i,  nodets: %i, hlsnum: %i , superts: %x", ts,node->parentTimestamp, child_prio , hlsnum,swarm::superTimestamp() );
      
      if(ts>= swarm::superTimestamp()){ 
  40f454:	48 39 cf             	cmp    %rcx,%rdi
  40f457:	72 0f                	jb     40f468 <_Z9enq_uppermP13HighLevelNodemi+0x38>
    register uint64_t r9  asm("r9")  = v4;
  40f459:	45 31 c9             	xor    %r9d,%r9d
            :);
  40f45c:	b9 03 00 24 40       	mov    $0x40240003,%ecx
  40f461:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40f464:	c3                   	retq   
  40f465:	0f 1f 00             	nopl   (%rax)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40f468:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f46f:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f474:	48 87 c9             	xchg   %rcx,%rcx
            :);
  40f477:	48 ba b0 0b df ff ff 	movabs $0xffffffffffdf0bb0,%rdx
  40f47e:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f481:	48 63 b6 50 00 01 00 	movslq 0x10050(%rsi),%rsi
            :);
  40f488:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40f48d:	48 01 c2             	add    %rax,%rdx
  40f490:	4c 89 d7             	mov    %r10,%rdi
  40f493:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40f496:	c3                   	retq   
  40f497:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40f49e:	00 00 

000000000040f4a0 <_Z10lls_searchmfPK5Stateim>:
#ifdef HLS_NO_POINTER
  void lls_search(swarm::Timestamp score, float m_w, const State* startState, 
			PlanResult* solution, HighLevelNode *hls_node, size_t c_idx) {
#else
  void lls_search(swarm::Timestamp score, float m_w, const State* startState, 
			int newnodeid, size_t c_idx) {
  40f4a0:	41 57                	push   %r15
  40f4a2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40f4a0 <_Z10lls_searchmfPK5Stateim>
  40f4a9:	49 bb 60 bb 21 00 00 	movabs $0x21bb60,%r11
  40f4b0:	00 00 00 
  40f4b3:	41 56                	push   %r14

		//HighLevelNode *hls_node = global_nodelist[newnodeid];
		HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f4b5:	48 b8 40 aa b6 00 00 	movabs $0xb6aa40,%rax
  40f4bc:	00 00 00 
			int newnodeid, size_t c_idx) {
  40f4bf:	41 55                	push   %r13
  40f4c1:	4d 01 df             	add    %r11,%r15
  40f4c4:	41 54                	push   %r12
  40f4c6:	49 89 cc             	mov    %rcx,%r12
  40f4c9:	55                   	push   %rbp
		HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f4ca:	48 63 ca             	movslq %edx,%rcx
			int newnodeid, size_t c_idx) {
  40f4cd:	53                   	push   %rbx
		HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f4ce:	4c 01 f8             	add    %r15,%rax
  40f4d1:	48 c1 e1 06          	shl    $0x6,%rcx
  40f4d5:	49 ba 00 bf 84 01 00 	movabs $0x184bf00,%r10
  40f4dc:	00 00 00 
			int newnodeid, size_t c_idx) {
  40f4df:	48 83 ec 28          	sub    $0x28,%rsp
		HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f4e3:	4c 8b 0c 01          	mov    (%rcx,%rax,1),%r9
		PlanResult *solution = &hls_node->solution[c_idx];
#endif
    //swarm::info("ll deepen next : %i", score);
    LowLevelEnvironment m_env(g_env, c_idx, hls_node->constraints[c_idx], hls_node->solution);
  40f4e7:	4b 8d 04 64          	lea    (%r12,%r12,2),%rax
	void setLowLevelContext(size_t agentIdx, const Constraints* constraints) {
		//assert(constraints); // [TEST-removed]
		m_agentIdx = agentIdx;
		m_constraints = constraints;
		m_lastGoalConstraint = -1;
		for (const auto& vc : constraints->vertexConstraints) {
  40f4eb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  40f4f0:	49 8d 04 84          	lea    (%r12,%rax,4),%rax
  40f4f4:	48 c1 e0 07          	shl    $0x7,%rax
  40f4f8:	4d 8d 84 01 40 7e 00 	lea    0x7e40(%r9,%rax,1),%r8
  40f4ff:	00 
  40f500:	4b 8b 04 3a          	mov    (%r10,%r15,1),%rax
  40f504:	4d 8d 98 58 02 00 00 	lea    0x258(%r8),%r11
  40f50b:	4a 8d 04 e0          	lea    (%rax,%r12,8),%rax
  40f50f:	8b 38                	mov    (%rax),%edi
  40f511:	8b 68 04             	mov    0x4(%rax),%ebp
  40f514:	4c 89 c0             	mov    %r8,%rax
  40f517:	eb 10                	jmp    40f529 <_Z10lls_searchmfPK5Stateim+0x89>
  40f519:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40f520:	48 83 c0 0c          	add    $0xc,%rax
  40f524:	49 39 c3             	cmp    %rax,%r11
  40f527:	74 1a                	je     40f543 <_Z10lls_searchmfPK5Stateim+0xa3>
			if (vc.x == m_env.m_goals[m_agentIdx].x && vc.y == m_env.m_goals[m_agentIdx].y) {
  40f529:	3b 78 04             	cmp    0x4(%rax),%edi
  40f52c:	75 f2                	jne    40f520 <_Z10lls_searchmfPK5Stateim+0x80>
  40f52e:	39 68 08             	cmp    %ebp,0x8(%rax)
  40f531:	75 ed                	jne    40f520 <_Z10lls_searchmfPK5Stateim+0x80>
  40f533:	8b 08                	mov    (%rax),%ecx
  40f535:	39 cb                	cmp    %ecx,%ebx
  40f537:	0f 4c d9             	cmovl  %ecx,%ebx
  40f53a:	48 83 c0 0c          	add    $0xc,%rax
		for (const auto& vc : constraints->vertexConstraints) {
  40f53e:	49 39 c3             	cmp    %rax,%r11
  40f541:	75 e6                	jne    40f529 <_Z10lls_searchmfPK5Stateim+0x89>
  40f543:	44 8b 76 04          	mov    0x4(%rsi),%r14d
  40f547:	44 8b 6e 08          	mov    0x8(%rsi),%r13d
		stat(0) {}
  40f54b:	44 8b 1e             	mov    (%rsi),%r11d
  40f54e:	4c 89 54 24 18       	mov    %r10,0x18(%rsp)
  40f553:	89 54 24 14          	mov    %edx,0x14(%rsp)
  40f557:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
		}
	}

	Cost admissibleHeuristic(const State& s) {
		//return m_env.admissibleHeuristic(s);
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  40f55c:	44 89 f0             	mov    %r14d,%eax
  40f55f:	4c 89 0c 24          	mov    %r9,(%rsp)
  40f563:	29 f8                	sub    %edi,%eax
  40f565:	44 89 5c 24 10       	mov    %r11d,0x10(%rsp)
  40f56a:	89 c1                	mov    %eax,%ecx
  40f56c:	c1 f9 1f             	sar    $0x1f,%ecx
  40f56f:	31 c8                	xor    %ecx,%eax
  40f571:	29 c8                	sub    %ecx,%eax
  40f573:	89 c1                	mov    %eax,%ecx
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f575:	44 89 e8             	mov    %r13d,%eax
  40f578:	29 e8                	sub    %ebp,%eax
  40f57a:	89 c7                	mov    %eax,%edi
  40f57c:	c1 ff 1f             	sar    $0x1f,%edi
  40f57f:	31 f8                	xor    %edi,%eax
  40f581:	29 f8                	sub    %edi,%eax
  40f583:	8d 2c 01             	lea    (%rcx,%rax,1),%ebp
  40f586:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f58d:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f592:	48 87 c9             	xchg   %rcx,%rcx
            }
#ifdef __clang__
#pragma GCC diagnostic pop
#endif
        } else {
            auto tup = new std::tuple<Args...>(args...);
  40f595:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  40f59c:	ff ff ff 
  40f59f:	bf 88 00 00 00       	mov    $0x88,%edi
  40f5a4:	4c 01 f8             	add    %r15,%rax
  40f5a7:	ff d0                	callq  *%rax
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  40f5a9:	4c 8b 54 24 18       	mov    0x18(%rsp),%r10
  40f5ae:	8b 54 24 14          	mov    0x14(%rsp),%edx
            :);
  40f5b2:	31 ff                	xor    %edi,%edi
  40f5b4:	44 8b 5c 24 10       	mov    0x10(%rsp),%r11d
  40f5b9:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  40f5be:	48 89 c6             	mov    %rax,%rsi
  40f5c1:	4c 8b 0c 24          	mov    (%rsp),%r9
  40f5c5:	4c 89 60 08          	mov    %r12,0x8(%rax)
  40f5c9:	4b 8d 0c 3a          	lea    (%r10,%r15,1),%rcx
  40f5cd:	89 50 5c             	mov    %edx,0x5c(%rax)
  40f5d0:	48 ba 90 29 df ff ff 	movabs $0xffffffffffdf2990,%rdx
  40f5d7:	ff ff ff 
  40f5da:	4c 89 40 10          	mov    %r8,0x10(%rax)
  40f5de:	89 58 18             	mov    %ebx,0x18(%rax)
  40f5e1:	4c 01 fa             	add    %r15,%rdx
  40f5e4:	48 89 08             	mov    %rcx,(%rax)
  40f5e7:	4c 89 48 20          	mov    %r9,0x20(%rax)
  40f5eb:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40f5f0:	44 89 58 28          	mov    %r11d,0x28(%rax)
  40f5f4:	44 89 70 2c          	mov    %r14d,0x2c(%rax)
  40f5f8:	44 89 68 30          	mov    %r13d,0x30(%rax)
  40f5fc:	89 68 34             	mov    %ebp,0x34(%rax)
  40f5ff:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%rax)
  40f606:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  40f60d:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)
  40f614:	44 89 58 44          	mov    %r11d,0x44(%rax)
  40f618:	44 89 70 48          	mov    %r14d,0x48(%rax)
  40f61c:	44 89 68 4c          	mov    %r13d,0x4c(%rax)
  40f620:	c7 40 50 04 00 00 00 	movl   $0x4,0x50(%rax)
  40f627:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%rax)
  40f62e:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%rax)
  40f635:	4c 89 60 60          	mov    %r12,0x60(%rax)
  40f639:	44 89 58 68          	mov    %r11d,0x68(%rax)
  40f63d:	44 89 70 6c          	mov    %r14d,0x6c(%rax)
  40f641:	44 89 68 70          	mov    %r13d,0x70(%rax)
  40f645:	89 68 74             	mov    %ebp,0x74(%rax)
  40f648:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%rax)
  40f64f:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  40f656:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%rax)
  40f65d:	00 00 00 
  40f660:	48 87 c9             	xchg   %rcx,%rcx
		swarm::deepen(); 
    
		swarm::enqueue(LL_pll,0,EnqFlags::NOHINT, tmp,prev ,m_env);
			// most good
			//node->timestamp = ROBOT_NUMS * node->generation + node->focalHeuristic;
	}
  40f663:	48 83 c4 28          	add    $0x28,%rsp
  40f667:	5b                   	pop    %rbx
  40f668:	5d                   	pop    %rbp
  40f669:	41 5c                	pop    %r12
  40f66b:	41 5d                	pop    %r13
  40f66d:	41 5e                	pop    %r14
  40f66f:	41 5f                	pop    %r15
  40f671:	c3                   	retq   
  40f672:	0f 1f 40 00          	nopl   0x0(%rax)
  40f676:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f67d:	00 00 00 

000000000040f680 <_Z6star_tmi>:
void star_t(swarm::Timestamp tt, int si){
  40f680:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40f680 <_Z6star_tmi>
  40f687:	49 bb 80 b9 21 00 00 	movabs $0x21b980,%r11
  40f68e:	00 00 00 
  40f691:	4c 01 d8             	add    %r11,%rax
  40f694:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f69b:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f6a0:	48 87 c9             	xchg   %rcx,%rcx
  40f6a3:	48 ba b0 0b df ff ff 	movabs $0xffffffffffdf0bb0,%rdx
  40f6aa:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f6ad:	48 63 f6             	movslq %esi,%rsi
            :);
  40f6b0:	31 ff                	xor    %edi,%edi
  40f6b2:	48 01 c2             	add    %rax,%rdx
  40f6b5:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40f6ba:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40f6bd:	c3                   	retq   
  40f6be:	66 90                	xchg   %ax,%ax

000000000040f6c0 <_Z19main_loop_task_parami>:
		main_loop_task(0);
#endif
	}

#ifdef SWARM
	void main_loop_task_para(swarm::Timestamp score, int nodeid) {
  40f6c0:	41 57                	push   %r15
  40f6c2:	41 56                	push   %r14
  40f6c4:	49 bb 40 b9 21 00 00 	movabs $0x21b940,%r11
  40f6cb:	00 00 00 
  40f6ce:	41 55                	push   %r13
  40f6d0:	4c 8d 2d e9 ff ff ff 	lea    -0x17(%rip),%r13        # 40f6c0 <_Z19main_loop_task_parami>
  40f6d7:	41 54                	push   %r12
  40f6d9:	55                   	push   %rbp
  40f6da:	53                   	push   %rbx

		// Check done flag.
		 if(g_isNoConflict) {
  40f6db:	48 b8 80 bf 84 01 00 	movabs $0x184bf80,%rax
  40f6e2:	00 00 00 
  40f6e5:	4d 01 dd             	add    %r11,%r13
	void main_loop_task_para(swarm::Timestamp score, int nodeid) {
  40f6e8:	48 81 ec 28 09 00 00 	sub    $0x928,%rsp
		 if(g_isNoConflict) {
  40f6ef:	42 80 3c 28 00       	cmpb   $0x0,(%rax,%r13,1)
	void main_loop_task_para(swarm::Timestamp score, int nodeid) {
  40f6f4:	89 74 24 40          	mov    %esi,0x40(%rsp)
		 if(g_isNoConflict) {
  40f6f8:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  40f6fd:	0f 85 5d 0b 00 00    	jne    410260 <_Z19main_loop_task_parami+0xba0>

#ifdef HLS_NO_PONTER
		 const HighLevelNode *P = &global_nodelist[nodeid];
#else
		 //const HighLevelNode *P = global_nodelist[nodeid];
		 const HighLevelNode *P = global_nodelist[nodeid].addr;
  40f703:	48 b8 40 aa b6 00 00 	movabs $0xb6aa40,%rax
  40f70a:	00 00 00 

		//pls::info("Environment::getFirstConflict() : at (1)");

    int max_t = 0;
		for (int i = 0; i < ROBOT_NUMS; ++i) {
			max_t = std::max<int>(max_t, solution[i].states_size - 1);
  40f70d:	66 0f 76 d2          	pcmpeqd %xmm2,%xmm2
  40f711:	48 89 c3             	mov    %rax,%rbx
  40f714:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  40f719:	48 63 44 24 40       	movslq 0x40(%rsp),%rax
  40f71e:	48 89 c2             	mov    %rax,%rdx
  40f721:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40f726:	48 89 d8             	mov    %rbx,%rax
  40f729:	4c 01 e8             	add    %r13,%rax
  40f72c:	48 c1 e2 06          	shl    $0x6,%rdx
  40f730:	4c 8b 34 02          	mov    (%rdx,%rax,1),%r14
  40f734:	f3 41 0f 7e 86 00 04 	movq   0x400(%r14),%xmm0
  40f73b:	00 00 
  40f73d:	f3 41 0f 7e 8e a0 10 	movq   0x10a0(%r14),%xmm1
  40f744:	00 00 
  40f746:	41 0f 16 86 50 0a 00 	movhps 0xa50(%r14),%xmm0
  40f74d:	00 
  40f74e:	41 0f 16 8e f0 16 00 	movhps 0x16f0(%r14),%xmm1
  40f755:	00 
  40f756:	f3 41 0f 7e 9e e0 29 	movq   0x29e0(%r14),%xmm3
  40f75d:	00 00 
  40f75f:	41 0f 16 9e 30 30 00 	movhps 0x3030(%r14),%xmm3
  40f766:	00 
  40f767:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40f76b:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40f76f:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40f773:	66 0f 6f e0          	movdqa %xmm0,%xmm4
  40f777:	66 0f 66 e1          	pcmpgtd %xmm1,%xmm4
  40f77b:	f3 41 0f 7e 8e 40 1d 	movq   0x1d40(%r14),%xmm1
  40f782:	00 00 
  40f784:	41 0f 16 8e 90 23 00 	movhps 0x2390(%r14),%xmm1
  40f78b:	00 
  40f78c:	66 0f db c4          	pand   %xmm4,%xmm0
  40f790:	0f c6 cb 88          	shufps $0x88,%xmm3,%xmm1
  40f794:	66 0f fe ca          	paddd  %xmm2,%xmm1
  40f798:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40f79c:	66 0f 66 d8          	pcmpgtd %xmm0,%xmm3
  40f7a0:	66 0f db cb          	pand   %xmm3,%xmm1
  40f7a4:	66 0f df d8          	pandn  %xmm0,%xmm3
  40f7a8:	f3 41 0f 7e 86 80 36 	movq   0x3680(%r14),%xmm0
  40f7af:	00 00 
  40f7b1:	41 0f 16 86 d0 3c 00 	movhps 0x3cd0(%r14),%xmm0
  40f7b8:	00 
  40f7b9:	66 0f eb d9          	por    %xmm1,%xmm3
  40f7bd:	f3 41 0f 7e 8e 20 43 	movq   0x4320(%r14),%xmm1
  40f7c4:	00 00 
  40f7c6:	41 0f 16 8e 70 49 00 	movhps 0x4970(%r14),%xmm1
  40f7cd:	00 
  40f7ce:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40f7d2:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40f7d6:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  40f7da:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  40f7de:	66 0f db c1          	pand   %xmm1,%xmm0
  40f7e2:	66 0f df cb          	pandn  %xmm3,%xmm1
  40f7e6:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40f7ea:	f3 41 0f 7e 8e 60 5c 	movq   0x5c60(%r14),%xmm1
  40f7f1:	00 00 
  40f7f3:	66 0f eb d8          	por    %xmm0,%xmm3
  40f7f7:	f3 41 0f 7e 86 c0 4f 	movq   0x4fc0(%r14),%xmm0
  40f7fe:	00 00 
  40f800:	41 0f 16 8e b0 62 00 	movhps 0x62b0(%r14),%xmm1
  40f807:	00 
  40f808:	41 0f 16 86 10 56 00 	movhps 0x5610(%r14),%xmm0
  40f80f:	00 
  40f810:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40f814:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40f818:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  40f81c:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  40f820:	66 0f db c1          	pand   %xmm1,%xmm0
  40f824:	66 0f df cb          	pandn  %xmm3,%xmm1
  40f828:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40f82c:	f3 41 0f 7e 8e 00 69 	movq   0x6900(%r14),%xmm1
  40f833:	00 00 
  40f835:	66 0f eb d8          	por    %xmm0,%xmm3
  40f839:	f3 41 0f 7e 86 a0 75 	movq   0x75a0(%r14),%xmm0
  40f840:	00 00 
  40f842:	41 0f 16 86 f0 7b 00 	movhps 0x7bf0(%r14),%xmm0
  40f849:	00 
  40f84a:	41 0f 16 8e 50 6f 00 	movhps 0x6f50(%r14),%xmm1
  40f851:	00 
  40f852:	0f c6 c8 88          	shufps $0x88,%xmm0,%xmm1
  40f856:	66 0f fe ca          	paddd  %xmm2,%xmm1
  40f85a:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  40f85e:	66 0f 66 c3          	pcmpgtd %xmm3,%xmm0
  40f862:	66 0f db c8          	pand   %xmm0,%xmm1
  40f866:	66 0f df c3          	pandn  %xmm3,%xmm0
  40f86a:	66 0f eb c8          	por    %xmm0,%xmm1
  40f86e:	66 0f 6f d1          	movdqa %xmm1,%xmm2
  40f872:	66 0f 73 da 08       	psrldq $0x8,%xmm2
  40f877:	66 0f 6f c2          	movdqa %xmm2,%xmm0
  40f87b:	66 0f 66 c1          	pcmpgtd %xmm1,%xmm0
  40f87f:	66 0f db d0          	pand   %xmm0,%xmm2
  40f883:	66 0f df c1          	pandn  %xmm1,%xmm0
  40f887:	66 0f eb c2          	por    %xmm2,%xmm0
  40f88b:	66 0f 6f d0          	movdqa %xmm0,%xmm2
  40f88f:	66 0f 73 da 04       	psrldq $0x4,%xmm2
  40f894:	66 0f 6f ca          	movdqa %xmm2,%xmm1
  40f898:	66 0f 66 c8          	pcmpgtd %xmm0,%xmm1
  40f89c:	66 0f db d1          	pand   %xmm1,%xmm2
  40f8a0:	66 0f df c8          	pandn  %xmm0,%xmm1
  40f8a4:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  40f8a8:	66 0f eb c2          	por    %xmm2,%xmm0
  40f8ac:	66 0f 7e c0          	movd   %xmm0,%eax
  40f8b0:	66 0f 7e 44 24 58    	movd   %xmm0,0x58(%rsp)
    }

		//pls::info("Environment::getFirstConflict() : at (2)");

    for (int t = 0; t < max_t; ++t) {
  40f8b6:	85 c0                	test   %eax,%eax
  40f8b8:	0f 8e 48 09 00 00    	jle    410206 <_Z19main_loop_task_parami+0xb46>
  40f8be:	49 8d 86 50 06 00 00 	lea    0x650(%r14),%rax
  40f8c5:	31 db                	xor    %ebx,%ebx
  40f8c7:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
      // check drive-drive vertex collisions
      for (size_t i = 0; i < ROBOT_NUMS; ++i) {
        State state1 = getState(i, solution, t);
  40f8cc:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  40f8d3:	ff ff ff 
  40f8d6:	4c 01 e8             	add    %r13,%rax
  40f8d9:	49 89 c7             	mov    %rax,%r15
  40f8dc:	48 89 da             	mov    %rbx,%rdx
  40f8df:	31 ff                	xor    %edi,%edi
  40f8e1:	89 5c 24 30          	mov    %ebx,0x30(%rsp)
  40f8e5:	4c 89 f6             	mov    %r14,%rsi
  40f8e8:	49 89 dc             	mov    %rbx,%r12
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40f8eb:	bd 01 00 00 00       	mov    $0x1,%ebp
        State state1 = getState(i, solution, t);
  40f8f0:	41 ff d7             	callq  *%r15
  40f8f3:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  40f8f8:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40f8ff:	00 
  40f900:	48 c1 e8 20          	shr    $0x20,%rax
  40f904:	89 94 24 28 05 00 00 	mov    %edx,0x528(%rsp)
  40f90b:	48 89 c7             	mov    %rax,%rdi
  40f90e:	41 89 d0             	mov    %edx,%r8d
  40f911:	49 c1 e4 04          	shl    $0x4,%r12
  40f915:	4c 8d 55 ff          	lea    -0x1(%rbp),%r10
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40f919:	48 89 ca             	mov    %rcx,%rdx
  40f91c:	48 89 ee             	mov    %rbp,%rsi
  40f91f:	eb 33                	jmp    40f954 <_Z19main_loop_task_parami+0x294>
  40f921:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40f928:	48 83 e8 01          	sub    $0x1,%rax
  40f92c:	48 c1 e0 04          	shl    $0x4,%rax
  40f930:	48 01 d0             	add    %rdx,%rax
  40f933:	44 8b 48 04          	mov    0x4(%rax),%r9d
  40f937:	8b 40 08             	mov    0x8(%rax),%eax
  bool equalExceptTime(const State& s) const { return x == s.x && y == s.y; }
  40f93a:	41 39 f9             	cmp    %edi,%r9d
  40f93d:	74 30                	je     40f96f <_Z19main_loop_task_parami+0x2af>
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40f93f:	48 83 c6 01          	add    $0x1,%rsi
  40f943:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
  40f94a:	48 83 fe 14          	cmp    $0x14,%rsi
  40f94e:	0f 84 7c 05 00 00    	je     40fed0 <_Z19main_loop_task_parami+0x810>
	if (t < solution[agentIdx].states_size) {
  40f954:	48 8b 82 00 04 00 00 	mov    0x400(%rdx),%rax
  40f95b:	48 39 d8             	cmp    %rbx,%rax
  40f95e:	76 c8                	jbe    40f928 <_Z19main_loop_task_parami+0x268>
		return solution[agentIdx].states[t].state;
  40f960:	46 8b 4c 22 04       	mov    0x4(%rdx,%r12,1),%r9d
  40f965:	42 8b 44 22 08       	mov    0x8(%rdx,%r12,1),%eax
  40f96a:	41 39 f9             	cmp    %edi,%r9d
  40f96d:	75 d0                	jne    40f93f <_Z19main_loop_task_parami+0x27f>
  40f96f:	44 39 c0             	cmp    %r8d,%eax
  40f972:	75 cb                	jne    40f93f <_Z19main_loop_task_parami+0x27f>
  40f974:	89 c5                	mov    %eax,%ebp
          State state2 = getState(j, solution, t);
          if (state1.equalExceptTime(state2)) {
            result.time = t;
  40f976:	8b 44 24 30          	mov    0x30(%rsp),%eax
  void createConstraintsFromConflict(
      const Conflict& conflict, std::map<size_t, Constraints>& constraints) {
    if (conflict.type == Conflict::Vertex) {
      Constraints c1;
			c1.add(VertexConstraint(conflict.time, conflict.x1, conflict.y1));
      constraints[conflict.agent1] = c1;
  40f97a:	48 bb 30 09 df ff ff 	movabs $0xffffffffffdf0930,%rbx
  40f981:	ff ff ff 
  40f984:	41 89 fc             	mov    %edi,%r12d
            result.agent2 = j;
  40f987:	48 89 b4 24 d0 00 00 	mov    %rsi,0xd0(%rsp)
  40f98e:	00 
            result.x1 = state1.x;
  40f98f:	89 bc 24 dc 00 00 00 	mov    %edi,0xdc(%rsp)
            result.agent1 = i;
  40f996:	4c 89 94 24 c8 00 00 	mov    %r10,0xc8(%rsp)
  40f99d:	00 
            result.type = Conflict::Vertex;
  40f99e:	c7 84 24 d8 00 00 00 	movl   $0x0,0xd8(%rsp)
  40f9a5:	00 00 00 00 
      constraints[conflict.agent1] = c1;
  40f9a9:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  40f9b0:	00 
            result.time = t;
  40f9b1:	89 84 24 c0 00 00 00 	mov    %eax,0xc0(%rsp)
	    this->_M_header._M_left = &this->_M_header;
  40f9b8:	48 8d 84 24 f0 00 00 	lea    0xf0(%rsp),%rax
  40f9bf:	00 
            result.y1 = state1.y;
  40f9c0:	89 ac 24 e0 00 00 00 	mov    %ebp,0xe0(%rsp)
	    _M_node_count(0)
  40f9c7:	c7 84 24 f8 00 00 00 	movl   $0x0,0xf8(%rsp)
  40f9ce:	00 00 00 00 
  40f9d2:	48 c7 84 24 00 01 00 	movq   $0x0,0x100(%rsp)
  40f9d9:	00 00 00 00 00 
	    this->_M_header._M_left = &this->_M_header;
  40f9de:	49 89 c7             	mov    %rax,%r15
  40f9e1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40f9e6:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  40f9ed:	00 
	    _M_node_count(0)
  40f9ee:	48 c7 84 24 18 01 00 	movq   $0x0,0x118(%rsp)
  40f9f5:	00 00 00 00 00 
      constraints[conflict.agent1] = c1;
  40f9fa:	4c 89 ff             	mov    %r15,%rdi
	    this->_M_header._M_left = &this->_M_header;
  40f9fd:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  40fa04:	00 
	    this->_M_header._M_right = &this->_M_header;
  40fa05:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  40fa0c:	00 
  40fa0d:	48 8d 84 24 c0 00 00 	lea    0xc0(%rsp),%rax
  40fa14:	00 
  40fa15:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40fa1a:	4a 8d 04 2b          	lea    (%rbx,%r13,1),%rax
  40fa1e:	ff d0                	callq  *%rax
  40fa20:	8b 7c 24 30          	mov    0x30(%rsp),%edi
  40fa24:	44 89 60 04          	mov    %r12d,0x4(%rax)
  40fa28:	89 68 08             	mov    %ebp,0x8(%rax)
  40fa2b:	c7 80 40 06 00 00 01 	movl   $0x1,0x640(%rax)
  40fa32:	00 00 00 
  40fa35:	c7 80 44 06 00 00 00 	movl   $0x0,0x644(%rax)
  40fa3c:	00 00 00 
  40fa3f:	89 38                	mov    %edi,(%rax)
      constraints[conflict.agent2] = c1;
  40fa41:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  40fa46:	4c 89 ff             	mov    %r15,%rdi
  40fa49:	48 83 c0 10          	add    $0x10,%rax
  40fa4d:	48 89 c6             	mov    %rax,%rsi
  40fa50:	4a 8d 04 2b          	lea    (%rbx,%r13,1),%rax
  40fa54:	ff d0                	callq  *%rax
  40fa56:	8b 5c 24 30          	mov    0x30(%rsp),%ebx
  40fa5a:	44 89 60 04          	mov    %r12d,0x4(%rax)
  40fa5e:	89 68 08             	mov    %ebp,0x8(%rax)
  40fa61:	c7 80 40 06 00 00 01 	movl   $0x1,0x640(%rax)
  40fa68:	00 00 00 
  40fa6b:	c7 80 44 06 00 00 00 	movl   $0x0,0x644(%rax)
  40fa72:	00 00 00 
  40fa75:	89 18                	mov    %ebx,(%rax)
		 // create constraints
		 std::map<size_t, Constraints> constraints;
		 g_env.createConstraintsFromConflict(conflict, constraints);

		 // NOde expantion
		 int generation = P->generation + 1;
  40fa77:	41 8b 86 5c 00 01 00 	mov    0x1005c(%r14),%eax
  40fa7e:	48 8b 9c 24 08 01 00 	mov    0x108(%rsp),%rbx
  40fa85:	00 
  40fa86:	83 c0 01             	add    $0x1,%eax
  40fa89:	89 44 24 60          	mov    %eax,0x60(%rsp)
		 int child_id = 0;
     //swarm::info("hls node genrn");
     //int j=0;
		 for (const auto& c : constraints) {
  40fa8d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40fa92:	48 83 c0 08          	add    $0x8,%rax
  40fa96:	48 39 c3             	cmp    %rax,%rbx
  40fa99:	0f 84 23 09 00 00    	je     4103c2 <_Z19main_loop_task_parami+0xd02>
	return parent_nodeid * 2 + 1 + child_id;
  40fa9f:	8b 44 24 40          	mov    0x40(%rsp),%eax
			 size_t i = c.first;
  40faa3:	4c 8b 63 20          	mov    0x20(%rbx),%r12
	return parent_nodeid * 2 + 1 + child_id;
  40faa7:	44 8d 4c 00 01       	lea    0x1(%rax,%rax,1),%r9d
			 int new_nodeid = index(nodeid, child_id);

			 if(new_nodeid > MAX_NODE_NUMS) {
  40faac:	41 81 f9 50 34 03 00 	cmp    $0x33450,%r9d
  40fab3:	0f 8f f5 08 00 00    	jg     4103ae <_Z19main_loop_task_parami+0xcee>
  40fab9:	48 b8 a0 b8 de ff ff 	movabs $0xffffffffffdeb8a0,%rax
  40fac0:	ff ff ff 
  40fac3:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  40faca:	00 
				   __bos (__s), __fmt, __va_arg_pack ());
  40facb:	4c 89 e5             	mov    %r12,%rbp
  40face:	4c 01 e8             	add    %r13,%rax
  40fad1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  40fad6:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  40fadd:	00 
  40fade:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40fae3:	49 63 c1             	movslq %r9d,%rax
  40fae6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  40faeb:	48 c1 e0 06          	shl    $0x6,%rax
  40faef:	48 89 c2             	mov    %rax,%rdx
  40faf2:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  40faf7:	4c 01 e8             	add    %r13,%rax
  40fafa:	48 01 d0             	add    %rdx,%rax
  40fafd:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40fb02:	48 b8 b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%rax
  40fb09:	ff ff ff 
  40fb0c:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  40fb11:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  40fb18:	ff ff ff 
  40fb1b:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  40fb22:	00 
  40fb23:	48 b8 00 3e 85 01 00 	movabs $0x1853e00,%rax
  40fb2a:	00 00 00 
  40fb2d:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40fb34:	00 
  40fb35:	48 b8 8d 81 df ff ff 	movabs $0xffffffffffdf818d,%rax
  40fb3c:	ff ff ff 
  40fb3f:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  40fb46:	00 
  40fb47:	48 b8 c0 be 84 01 00 	movabs $0x184bec0,%rax
  40fb4e:	00 00 00 
  40fb51:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40fb58:	00 
  40fb59:	48 b8 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%rax
  40fb60:	ff ff ff 
  40fb63:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  40fb6a:	00 
#ifdef HLS_NO_POINTER
			HighLevelNode *newNode = &global_nodelist[new_nodeid];
#else
			//global_nodelist[new_nodeid] = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
			//HighLevelNode *newNode = global_nodelist[new_nodeid];
			global_nodelist[new_nodeid].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  40fb6b:	48 b8 b0 77 df ff ff 	movabs $0xffffffffffdf77b0,%rax
  40fb72:	ff ff ff 
  40fb75:	4c 01 e8             	add    %r13,%rax
  40fb78:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40fb7d:	48 8d 84 24 20 05 00 	lea    0x520(%rsp),%rax
  40fb84:	00 
  40fb85:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40fb8a:	48 b8 08 7e df ff ff 	movabs $0xffffffffffdf7e08,%rax
  40fb91:	ff ff ff 
  40fb94:	4c 01 e8             	add    %r13,%rax
  40fb97:	48 89 84 24 a8 00 00 	mov    %rax,0xa8(%rsp)
  40fb9e:	00 
  40fb9f:	bf 80 00 01 00       	mov    $0x10080,%edi
  40fba4:	4d 89 ef             	mov    %r13,%r15
  40fba7:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  40fbac:	ff d0                	callq  *%rax
  40fbae:	49 89 c4             	mov    %rax,%r12
  40fbb1:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
			HighLevelNode *newNode = global_nodelist[new_nodeid].addr;
#endif

			 //HighLevelNode newNode = P;
        //swarm::info("sol cost: %i nodenum: %i",newNode->cost, new_nodeid);
			 *newNode = *P;
  40fbb6:	4c 89 f6             	mov    %r14,%rsi
  40fbb9:	ba 80 00 01 00       	mov    $0x10080,%edx
  40fbbe:	4c 89 e7             	mov    %r12,%rdi
			global_nodelist[new_nodeid].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  40fbc1:	4c 89 20             	mov    %r12,(%rax)
			 *newNode = *P;
  40fbc4:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  40fbcb:	00 
  40fbcc:	4c 01 e8             	add    %r13,%rax
  40fbcf:	ff d0                	callq  *%rax
			 newNode->id = new_nodeid;
  40fbd1:	8b 44 24 20          	mov    0x20(%rsp),%eax
  40fbd5:	41 89 84 24 50 00 01 	mov    %eax,0x10050(%r12)
  40fbdc:	00 
			 newNode->generation = generation;
  40fbdd:	8b 44 24 60          	mov    0x60(%rsp),%eax
  40fbe1:	41 89 84 24 5c 00 01 	mov    %eax,0x1005c(%r12)
  40fbe8:	00 
			 newNode->parent_child_id = P->own_child_id;
  40fbe9:	41 8b 86 58 00 01 00 	mov    0x10058(%r14),%eax
  40fbf0:	41 89 84 24 54 00 01 	mov    %eax,0x10054(%r12)
  40fbf7:	00 
			 newNode->own_child_id = child_id;
  40fbf8:	8b 44 24 10          	mov    0x10(%rsp),%eax
  40fbfc:	41 89 84 24 58 00 01 	mov    %eax,0x10058(%r12)
  40fc03:	00 
			 newNode->parentTimestamp = P->timestamp;
  40fc04:	41 8b 86 4c 00 01 00 	mov    0x1004c(%r14),%eax
  40fc0b:	41 89 84 24 68 00 01 	mov    %eax,0x10068(%r12)
  40fc12:	00 
  void add(const Constraints& other) {
    //vertexConstraints.insert(other.vertexConstraints.begin(),
    //                         other.vertexConstraints.end());
    //edgeConstraints.insert(other.edgeConstraints.begin(),
    //                       other.edgeConstraints.end());
		if (vertexConstraints_size >= MAX_CONSTRAINT_SIZE || 
  40fc13:	48 8d 44 6d 00       	lea    0x0(%rbp,%rbp,2),%rax
  40fc18:	4c 8d 4c 85 00       	lea    0x0(%rbp,%rax,4),%r9
  40fc1d:	49 c1 e1 07          	shl    $0x7,%r9
  40fc21:	4b 8d 34 0c          	lea    (%r12,%r9,1),%rsi
  40fc25:	83 be 80 84 00 00 3f 	cmpl   $0x3f,0x8480(%rsi)
  40fc2c:	0f 8f 1e 07 00 00    	jg     410350 <_Z19main_loop_task_parami+0xc90>
  40fc32:	83 be 84 84 00 00 3f 	cmpl   $0x3f,0x8484(%rsi)
  40fc39:	0f 8f 11 07 00 00    	jg     410350 <_Z19main_loop_task_parami+0xc90>
#ifdef SWARM
			swarm::info("[ERROR] constraints size is over %d", MAX_CONSTRAINT_SIZE );
#endif
			return;
		}
		for (int i = 0; i < other.vertexConstraints_size; ++i) {
  40fc3f:	8b 93 68 06 00 00    	mov    0x668(%rbx),%edx
  40fc45:	85 d2                	test   %edx,%edx
  40fc47:	7e 73                	jle    40fcbc <_Z19main_loop_task_parami+0x5fc>
  40fc49:	4c 8d 43 28          	lea    0x28(%rbx),%r8
  40fc4d:	4f 8d bc 0c 40 7e 00 	lea    0x7e40(%r12,%r9,1),%r15
  40fc54:	00 
  40fc55:	45 31 db             	xor    %r11d,%r11d
  40fc58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40fc5f:	00 
			bool found_same_key = false;
			for (int j =0; j < vertexConstraints_size; ++j) {
  40fc60:	8b 8e 80 84 00 00    	mov    0x8480(%rsi),%ecx
  40fc66:	85 c9                	test   %ecx,%ecx
  40fc68:	0f 8e b2 06 00 00    	jle    410320 <_Z19main_loop_task_parami+0xc60>
  40fc6e:	41 8b 38             	mov    (%r8),%edi
  40fc71:	4c 89 f8             	mov    %r15,%rax
  40fc74:	31 d2                	xor    %edx,%edx
  40fc76:	eb 1d                	jmp    40fc95 <_Z19main_loop_task_parami+0x5d5>
  40fc78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40fc7f:	00 
  40fc80:	8b 8e 80 84 00 00    	mov    0x8480(%rsi),%ecx
  40fc86:	83 c2 01             	add    $0x1,%edx
  40fc89:	48 83 c0 0c          	add    $0xc,%rax
  40fc8d:	39 d1                	cmp    %edx,%ecx
  40fc8f:	0f 8e 8b 06 00 00    	jle    410320 <_Z19main_loop_task_parami+0xc60>
	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
  40fc95:	39 38                	cmp    %edi,(%rax)
  40fc97:	75 e7                	jne    40fc80 <_Z19main_loop_task_parami+0x5c0>
  40fc99:	41 8b 48 04          	mov    0x4(%r8),%ecx
  40fc9d:	39 48 04             	cmp    %ecx,0x4(%rax)
  40fca0:	75 de                	jne    40fc80 <_Z19main_loop_task_parami+0x5c0>
  40fca2:	41 8b 48 08          	mov    0x8(%r8),%ecx
  40fca6:	39 48 08             	cmp    %ecx,0x8(%rax)
  40fca9:	75 d5                	jne    40fc80 <_Z19main_loop_task_parami+0x5c0>
		for (int i = 0; i < other.vertexConstraints_size; ++i) {
  40fcab:	41 83 c3 01          	add    $0x1,%r11d
  40fcaf:	49 83 c0 0c          	add    $0xc,%r8
  40fcb3:	44 39 9b 68 06 00 00 	cmp    %r11d,0x668(%rbx)
  40fcba:	7f a4                	jg     40fc60 <_Z19main_loop_task_parami+0x5a0>
			if (!found_same_key) { // Not found
				vertexConstraints[vertexConstraints_size] = other.vertexConstraints[i];
				vertexConstraints_size++;
			}
		}
		for (int i = 0; i < other.edgeConstraints_size; ++i) {
  40fcbc:	8b 83 6c 06 00 00    	mov    0x66c(%rbx),%eax
  40fcc2:	85 c0                	test   %eax,%eax
  40fcc4:	0f 8e 97 00 00 00    	jle    40fd61 <_Z19main_loop_task_parami+0x6a1>
  40fcca:	48 8d 44 6d 00       	lea    0x0(%rbp,%rbp,2),%rax
  40fccf:	48 8d bb 80 02 00 00 	lea    0x280(%rbx),%rdi
  40fcd6:	45 31 db             	xor    %r11d,%r11d
  40fcd9:	4c 8d 4c 85 00       	lea    0x0(%rbp,%rax,4),%r9
  40fcde:	49 c1 e1 07          	shl    $0x7,%r9
  40fce2:	4f 8d bc 0c 98 80 00 	lea    0x8098(%r12,%r9,1),%r15
  40fce9:	00 
			bool found_same_key = false;
			for (int j =0; j < edgeConstraints_size; ++j) {
  40fcea:	4b 8d 34 0c          	lea    (%r12,%r9,1),%rsi
  40fcee:	66 90                	xchg   %ax,%ax
  40fcf0:	8b 8e 84 84 00 00    	mov    0x8484(%rsi),%ecx
  40fcf6:	85 c9                	test   %ecx,%ecx
  40fcf8:	0f 8e ea 05 00 00    	jle    4102e8 <_Z19main_loop_task_parami+0xc28>
  40fcfe:	44 8b 07             	mov    (%rdi),%r8d
  40fd01:	4c 89 f8             	mov    %r15,%rax
  40fd04:	31 d2                	xor    %edx,%edx
  40fd06:	eb 1d                	jmp    40fd25 <_Z19main_loop_task_parami+0x665>
  40fd08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40fd0f:	00 
  40fd10:	8b 8e 84 84 00 00    	mov    0x8484(%rsi),%ecx
  40fd16:	83 c2 01             	add    $0x1,%edx
  40fd19:	48 83 c0 14          	add    $0x14,%rax
  40fd1d:	39 d1                	cmp    %edx,%ecx
  40fd1f:	0f 8e c3 05 00 00    	jle    4102e8 <_Z19main_loop_task_parami+0xc28>
  40fd25:	44 39 00             	cmp    %r8d,(%rax)
  40fd28:	75 e6                	jne    40fd10 <_Z19main_loop_task_parami+0x650>
  40fd2a:	8b 4f 04             	mov    0x4(%rdi),%ecx
  40fd2d:	39 48 04             	cmp    %ecx,0x4(%rax)
  40fd30:	75 de                	jne    40fd10 <_Z19main_loop_task_parami+0x650>
  40fd32:	8b 4f 08             	mov    0x8(%rdi),%ecx
  40fd35:	39 48 08             	cmp    %ecx,0x8(%rax)
  40fd38:	75 d6                	jne    40fd10 <_Z19main_loop_task_parami+0x650>
  40fd3a:	8b 4f 0c             	mov    0xc(%rdi),%ecx
  40fd3d:	39 48 0c             	cmp    %ecx,0xc(%rax)
  40fd40:	75 ce                	jne    40fd10 <_Z19main_loop_task_parami+0x650>
  40fd42:	8b 4f 10             	mov    0x10(%rdi),%ecx
  40fd45:	39 48 10             	cmp    %ecx,0x10(%rax)
  40fd48:	75 c6                	jne    40fd10 <_Z19main_loop_task_parami+0x650>
  40fd4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
		for (int i = 0; i < other.edgeConstraints_size; ++i) {
  40fd50:	41 83 c3 01          	add    $0x1,%r11d
  40fd54:	48 83 c7 14          	add    $0x14,%rdi
  40fd58:	44 39 9b 6c 06 00 00 	cmp    %r11d,0x66c(%rbx)
  40fd5f:	7f 8f                	jg     40fcf0 <_Z19main_loop_task_parami+0x630>

			newNode->constraints[i].add(c.second);
			newNode->cost -= newNode->solution[i].cost;
  40fd61:	48 69 c5 50 06 00 00 	imul   $0x650,%rbp,%rax
  40fd68:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  40fd6d:	49 89 e9             	mov    %rbp,%r9
  40fd70:	b9 00 04 00 00       	mov    $0x400,%ecx
  40fd75:	be ff 03 00 00       	mov    $0x3ff,%esi
  40fd7a:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  40fd7f:	4d 89 ef             	mov    %r13,%r15
  40fd82:	4f 8d 1c 2a          	lea    (%r10,%r13,1),%r11
  40fd86:	4c 01 e0             	add    %r12,%rax
  40fd89:	8b 90 10 06 00 00    	mov    0x610(%rax),%edx
			newNode->LB -= newNode->solution[i].fmin;
  40fd8f:	8b 80 14 06 00 00    	mov    0x614(%rax),%eax
  40fd95:	41 29 84 24 44 00 01 	sub    %eax,0x10044(%r12)
  40fd9c:	00 
  40fd9d:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40fda4:	00 
			newNode->cost -= newNode->solution[i].cost;
  40fda5:	41 29 94 24 40 00 01 	sub    %edx,0x10040(%r12)
  40fdac:	00 
  40fdad:	48 8d 54 6d 00       	lea    0x0(%rbp,%rbp,2),%rdx
  40fdb2:	4a 8b 04 28          	mov    (%rax,%r13,1),%rax
  40fdb6:	4c 8d 24 90          	lea    (%rax,%rdx,4),%r12
  40fdba:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  40fdc1:	00 
  40fdc2:	ba 01 00 00 00       	mov    $0x1,%edx
  40fdc7:	4e 8d 04 28          	lea    (%rax,%r13,1),%r8
  40fdcb:	31 c0                	xor    %eax,%eax
  40fdcd:	41 ff d3             	callq  *%r11
  40fdd0:	b9 05 04 00 00       	mov    $0x405,%ecx
  40fdd5:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  40fdda:	48 87 c9             	xchg   %rcx,%rcx
        U(T _t) : t(_t) {}
  40fddd:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40fde4:	00 
			// LowLevelSearch
			State *s = &g_initialStates[i];
      //swarm::info("lls serch inii: %i , i_con: %i", new_nodeid, i);
      //if (j==1) continue;
      swarm::info("swarm enw %i" ,i); 
			swarm::enqueue(lls_search,P->timestamp ,
  40fde5:	49 63 be 4c 00 01 00 	movslq 0x1004c(%r14),%rdi
    register uint64_t r9  asm("r9")  = v4;
  40fdec:	49 89 e9             	mov    %rbp,%r9
    register uint64_t r8  asm("r8")  = v3;
  40fdef:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
    register uint64_t r10 asm("r10") = v5;
  40fdf4:	4c 8b 54 24 68       	mov    0x68(%rsp),%r10
            :);
  40fdf9:	b9 04 00 01 40       	mov    $0x40010004,%ecx
        U(T _t) : t(_t) {}
  40fdfe:	42 8b 14 28          	mov    (%rax,%r13,1),%edx
  40fe02:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  40fe09:	ff ff ff 
  40fe0c:	48 23 44 24 70       	and    0x70(%rsp),%rax
  40fe11:	48 09 d0             	or     %rdx,%rax
            :);
  40fe14:	4c 89 e2             	mov    %r12,%rdx
        U(T _t) : t(_t) {}
  40fe17:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
            :);
  40fe1c:	48 89 c6             	mov    %rax,%rsi
  40fe1f:	48 87 c9             	xchg   %rcx,%rcx
					&global_nodelist[new_nodeid], i);
#else
					//global_nodelist[new_nodeid], i);
#endif
      //swarm::info("lls serch after: parent ts : %i , ts: %i", score,P->timestamp);
			child_id++;
  40fe22:	83 44 24 10 01       	addl   $0x1,0x10(%rsp)
  40fe27:	8b 44 24 10          	mov    0x10(%rsp),%eax
      //j++;
			if(child_id > 2) {
  40fe2b:	83 f8 03             	cmp    $0x3,%eax
  40fe2e:	0f 84 61 05 00 00    	je     410395 <_Z19main_loop_task_parami+0xcd5>
	_M_node = _Rb_tree_increment(_M_node);
  40fe34:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  40fe3b:	00 
  40fe3c:	48 89 df             	mov    %rbx,%rdi
  40fe3f:	4d 89 ef             	mov    %r13,%r15
  40fe42:	4c 01 e8             	add    %r13,%rax
  40fe45:	ff d0                	callq  *%rax
		 for (const auto& c : constraints) {
  40fe47:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40fe4c:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  40fe50:	48 39 d0             	cmp    %rdx,%rax
  40fe53:	0f 84 69 05 00 00    	je     4103c2 <_Z19main_loop_task_parami+0xd02>
  40fe59:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
  40fe5e:	48 83 44 24 40 40    	addq   $0x40,0x40(%rsp)
			 size_t i = c.first;
  40fe64:	48 8b 68 20          	mov    0x20(%rax),%rbp
  40fe68:	44 8d 4b 01          	lea    0x1(%rbx),%r9d
  40fe6c:	48 83 c3 01          	add    $0x1,%rbx
  40fe70:	48 89 df             	mov    %rbx,%rdi
  40fe73:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  40fe78:	48 89 c3             	mov    %rax,%rbx
			 if(new_nodeid > MAX_NODE_NUMS) {
  40fe7b:	81 ff 50 34 03 00    	cmp    $0x33450,%edi
  40fe81:	0f 8e 18 fd ff ff    	jle    40fb9f <_Z19main_loop_task_parami+0x4df>
  40fe87:	4c 8b 74 24 30       	mov    0x30(%rsp),%r14
  40fe8c:	48 8d 9c 24 20 05 00 	lea    0x520(%rsp),%rbx
  40fe93:	00 
  40fe94:	48 b8 e0 7d df ff ff 	movabs $0xffffffffffdf7de0,%rax
  40fe9b:	ff ff ff 
  40fe9e:	4d 8d 44 05 00       	lea    0x0(%r13,%rax,1),%r8
  40fea3:	b9 00 04 00 00       	mov    $0x400,%ecx
  40fea8:	ba 01 00 00 00       	mov    $0x1,%edx
  40fead:	be ff 03 00 00       	mov    $0x3ff,%esi
  40feb2:	48 89 df             	mov    %rbx,%rdi
  40feb5:	4d 89 ef             	mov    %r13,%r15
  40feb8:	31 c0                	xor    %eax,%eax
  40feba:	4d 01 ee             	add    %r13,%r14
  40febd:	41 ff d6             	callq  *%r14
  40fec0:	b9 05 04 00 00       	mov    $0x405,%ecx
  40fec5:	48 89 df             	mov    %rbx,%rdi
  40fec8:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40fecb:	eb fe                	jmp    40fecb <_Z19main_loop_task_parami+0x80b>
  40fecd:	0f 1f 00             	nopl   (%rax)
        State state1 = getState(i, solution, t);
  40fed0:	48 89 da             	mov    %rbx,%rdx
  40fed3:	48 89 ef             	mov    %rbp,%rdi
  40fed6:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  40fedb:	4c 89 f6             	mov    %r14,%rsi
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40fede:	48 83 c5 01          	add    $0x1,%rbp
        State state1 = getState(i, solution, t);
  40fee2:	41 ff d7             	callq  *%r15
  40fee5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  40feea:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40fef1:	00 
  40fef2:	48 c1 e8 20          	shr    $0x20,%rax
  40fef6:	89 94 24 28 05 00 00 	mov    %edx,0x528(%rsp)
  40fefd:	48 89 c7             	mov    %rax,%rdi
  40ff00:	41 89 d0             	mov    %edx,%r8d
  40ff03:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40ff0a:	48 83 fd 14          	cmp    $0x14,%rbp
  40ff0e:	0f 85 01 fa ff ff    	jne    40f915 <_Z19main_loop_task_parami+0x255>
        State state1a = getState(i, solution, t);
  40ff14:	48 89 da             	mov    %rbx,%rdx
  40ff17:	4c 89 f6             	mov    %r14,%rsi
  40ff1a:	31 ff                	xor    %edi,%edi
  40ff1c:	41 ff d7             	callq  *%r15
  40ff1f:	48 89 84 24 b4 00 00 	mov    %rax,0xb4(%rsp)
  40ff26:	00 
  40ff27:	48 c1 e8 20          	shr    $0x20,%rax
  40ff2b:	89 94 24 bc 00 00 00 	mov    %edx,0xbc(%rsp)
  40ff32:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  40ff37:	48 8d 43 01          	lea    0x1(%rbx),%rax
  40ff3b:	41 89 d4             	mov    %edx,%r12d
        State state1b = getState(i, solution, t + 1);
  40ff3e:	4c 89 f6             	mov    %r14,%rsi
  40ff41:	31 ff                	xor    %edi,%edi
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40ff43:	bd 01 00 00 00       	mov    $0x1,%ebp
        State state1b = getState(i, solution, t + 1);
  40ff48:	48 89 c2             	mov    %rax,%rdx
  40ff4b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40ff50:	41 ff d7             	callq  *%r15
  40ff53:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  40ff5a:	00 
  40ff5b:	48 c1 e8 20          	shr    $0x20,%rax
  40ff5f:	89 94 24 f8 00 00 00 	mov    %edx,0xf8(%rsp)
  40ff66:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  40ff6b:	89 d1                	mov    %edx,%ecx
  40ff6d:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  40ff72:	4c 8d 5d ff          	lea    -0x1(%rbp),%r11
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40ff76:	48 89 eb             	mov    %rbp,%rbx
  40ff79:	48 89 6c 24 78       	mov    %rbp,0x78(%rsp)
  40ff7e:	eb 0e                	jmp    40ff8e <_Z19main_loop_task_parami+0x8ce>
  40ff80:	48 83 c3 01          	add    $0x1,%rbx
  40ff84:	48 83 fb 14          	cmp    $0x14,%rbx
  40ff88:	0f 84 05 02 00 00    	je     410193 <_Z19main_loop_task_parami+0xad3>
          State state2a = getState(j, solution, t);
  40ff8e:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  40ff93:	4c 89 9c 24 88 00 00 	mov    %r11,0x88(%rsp)
  40ff9a:	00 
  40ff9b:	4c 89 f6             	mov    %r14,%rsi
  40ff9e:	89 8c 24 80 00 00 00 	mov    %ecx,0x80(%rsp)
  40ffa5:	48 89 df             	mov    %rbx,%rdi
  40ffa8:	41 ff d7             	callq  *%r15
          State state2b = getState(j, solution, t + 1);
  40ffab:	48 89 df             	mov    %rbx,%rdi
          State state2a = getState(j, solution, t);
  40ffae:	89 94 24 28 01 00 00 	mov    %edx,0x128(%rsp)
  40ffb5:	89 d5                	mov    %edx,%ebp
  40ffb7:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  40ffbe:	00 
          State state2b = getState(j, solution, t + 1);
  40ffbf:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  40ffc4:	4c 89 f6             	mov    %r14,%rsi
  40ffc7:	41 ff d7             	callq  *%r15
  40ffca:	48 89 c7             	mov    %rax,%rdi
  40ffcd:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40ffd4:	00 
  40ffd5:	8b 8c 24 80 00 00 00 	mov    0x80(%rsp),%ecx
  40ffdc:	48 c1 ef 20          	shr    $0x20,%rdi
  40ffe0:	3b 7c 24 10          	cmp    0x10(%rsp),%edi
  40ffe4:	89 94 24 28 05 00 00 	mov    %edx,0x528(%rsp)
  40ffeb:	4c 8b 9c 24 88 00 00 	mov    0x88(%rsp),%r11
  40fff2:	00 
  40fff3:	75 8b                	jne    40ff80 <_Z19main_loop_task_parami+0x8c0>
  40fff5:	44 39 e2             	cmp    %r12d,%edx
  40fff8:	75 86                	jne    40ff80 <_Z19main_loop_task_parami+0x8c0>
  40fffa:	8b 44 24 20          	mov    0x20(%rsp),%eax
  40fffe:	39 84 24 24 01 00 00 	cmp    %eax,0x124(%rsp)
  410005:	0f 85 75 ff ff ff    	jne    40ff80 <_Z19main_loop_task_parami+0x8c0>
          if (state1a.equalExceptTime(state2b) &&
  41000b:	39 cd                	cmp    %ecx,%ebp
  41000d:	0f 85 6d ff ff ff    	jne    40ff80 <_Z19main_loop_task_parami+0x8c0>
            result.x1 = state1a.x;
  410013:	8b 44 24 10          	mov    0x10(%rsp),%eax
            result.agent2 = j;
  410017:	48 89 9c 24 d0 00 00 	mov    %rbx,0xd0(%rsp)
  41001e:	00 
  41001f:	89 cd                	mov    %ecx,%ebp
            result.x2 = state1b.x;
  410021:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
            result.time = t;
  410025:	44 8b 7c 24 30       	mov    0x30(%rsp),%r15d
    } else if (conflict.type == Conflict::Edge) {
      Constraints c1;
      c1.add(EdgeConstraint(
          conflict.time, conflict.x1, conflict.y1, conflict.x2, conflict.y2));
      constraints[conflict.agent1] = c1;
  41002a:	48 8d b4 24 c8 00 00 	lea    0xc8(%rsp),%rsi
  410031:	00 
            result.agent1 = i;
  410032:	4c 89 9c 24 c8 00 00 	mov    %r11,0xc8(%rsp)
  410039:	00 
            result.type = Conflict::Edge;
  41003a:	c7 84 24 d8 00 00 00 	movl   $0x1,0xd8(%rsp)
  410041:	01 00 00 00 
            result.x1 = state1a.x;
  410045:	89 84 24 dc 00 00 00 	mov    %eax,0xdc(%rsp)
	    this->_M_header._M_left = &this->_M_header;
  41004c:	48 8d 84 24 f0 00 00 	lea    0xf0(%rsp),%rax
  410053:	00 
            result.y1 = state1a.y;
  410054:	44 89 a4 24 e0 00 00 	mov    %r12d,0xe0(%rsp)
  41005b:	00 
            result.x2 = state1b.x;
  41005c:	89 9c 24 e4 00 00 00 	mov    %ebx,0xe4(%rsp)
            result.time = t;
  410063:	44 89 bc 24 c0 00 00 	mov    %r15d,0xc0(%rsp)
  41006a:	00 
  41006b:	48 89 c3             	mov    %rax,%rbx
  41006e:	48 8d 84 24 f8 00 00 	lea    0xf8(%rsp),%rax
  410075:	00 
            result.y2 = state1b.y;
  410076:	89 8c 24 e8 00 00 00 	mov    %ecx,0xe8(%rsp)
      constraints[conflict.agent1] = c1;
  41007d:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  410082:	48 89 df             	mov    %rbx,%rdi
  410085:	48 bb 30 09 df ff ff 	movabs $0xffffffffffdf0930,%rbx
  41008c:	ff ff ff 
  41008f:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
  410096:	00 
	    this->_M_header._M_right = &this->_M_header;
  410097:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  41009e:	00 
  41009f:	48 8d 84 24 c0 00 00 	lea    0xc0(%rsp),%rax
  4100a6:	00 
	    _M_node_count(0)
  4100a7:	c7 84 24 f8 00 00 00 	movl   $0x0,0xf8(%rsp)
  4100ae:	00 00 00 00 
  4100b2:	48 c7 84 24 00 01 00 	movq   $0x0,0x100(%rsp)
  4100b9:	00 00 00 00 00 
  4100be:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  4100c3:	48 c7 84 24 18 01 00 	movq   $0x0,0x118(%rsp)
  4100ca:	00 00 00 00 00 
  4100cf:	4a 8d 04 2b          	lea    (%rbx,%r13,1),%rax
  4100d3:	ff d0                	callq  *%rax
  4100d5:	8b 4c 24 10          	mov    0x10(%rsp),%ecx
      Constraints c2;
      c2.add(EdgeConstraint(
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
      constraints[conflict.agent2] = c2;
  4100d9:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
      constraints[conflict.agent1] = c1;
  4100de:	44 89 b8 58 02 00 00 	mov    %r15d,0x258(%rax)
  4100e5:	44 89 a0 60 02 00 00 	mov    %r12d,0x260(%rax)
  4100ec:	89 a8 68 02 00 00    	mov    %ebp,0x268(%rax)
  4100f2:	c7 80 40 06 00 00 00 	movl   $0x0,0x640(%rax)
  4100f9:	00 00 00 
  4100fc:	89 88 5c 02 00 00    	mov    %ecx,0x25c(%rax)
  410102:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
      constraints[conflict.agent2] = c2;
  410106:	48 83 c6 10          	add    $0x10,%rsi
      constraints[conflict.agent1] = c1;
  41010a:	c7 80 44 06 00 00 01 	movl   $0x1,0x644(%rax)
  410111:	00 00 00 
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
  410114:	8b ac 24 e0 00 00 00 	mov    0xe0(%rsp),%ebp
  41011b:	44 8b a4 24 dc 00 00 	mov    0xdc(%rsp),%r12d
  410122:	00 
  410123:	44 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%r15d
  41012a:	00 
      constraints[conflict.agent1] = c1;
  41012b:	89 88 64 02 00 00    	mov    %ecx,0x264(%rax)
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
  410131:	8b 8c 24 e8 00 00 00 	mov    0xe8(%rsp),%ecx
      constraints[conflict.agent2] = c2;
  410138:	4a 8d 04 2b          	lea    (%rbx,%r13,1),%rax
  41013c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
  410141:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
  410145:	8b 8c 24 e4 00 00 00 	mov    0xe4(%rsp),%ecx
  41014c:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
      constraints[conflict.agent2] = c2;
  410150:	ff d0                	callq  *%rax
  410152:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
  410156:	44 89 b8 58 02 00 00 	mov    %r15d,0x258(%rax)
  41015d:	44 89 a0 64 02 00 00 	mov    %r12d,0x264(%rax)
  410164:	89 a8 68 02 00 00    	mov    %ebp,0x268(%rax)
  41016a:	c7 80 40 06 00 00 00 	movl   $0x0,0x640(%rax)
  410171:	00 00 00 
  410174:	c7 80 44 06 00 00 01 	movl   $0x1,0x644(%rax)
  41017b:	00 00 00 
  41017e:	89 98 5c 02 00 00    	mov    %ebx,0x25c(%rax)
  410184:	8b 5c 24 10          	mov    0x10(%rsp),%ebx
  410188:	89 98 60 02 00 00    	mov    %ebx,0x260(%rax)
  41018e:	e9 e4 f8 ff ff       	jmpq   40fa77 <_Z19main_loop_task_parami+0x3b7>
        State state1a = getState(i, solution, t);
  410193:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  410198:	48 8b 6c 24 78       	mov    0x78(%rsp),%rbp
  41019d:	4c 89 f6             	mov    %r14,%rsi
  4101a0:	48 89 ef             	mov    %rbp,%rdi
  4101a3:	41 ff d7             	callq  *%r15
  4101a6:	89 94 24 bc 00 00 00 	mov    %edx,0xbc(%rsp)
  4101ad:	41 89 d4             	mov    %edx,%r12d
        State state1b = getState(i, solution, t + 1);
  4101b0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
        State state1a = getState(i, solution, t);
  4101b5:	48 89 84 24 b4 00 00 	mov    %rax,0xb4(%rsp)
  4101bc:	00 
        State state1b = getState(i, solution, t + 1);
  4101bd:	48 89 ef             	mov    %rbp,%rdi
        State state1a = getState(i, solution, t);
  4101c0:	48 c1 e8 20          	shr    $0x20,%rax
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  4101c4:	48 83 c5 01          	add    $0x1,%rbp
        State state1a = getState(i, solution, t);
  4101c8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        State state1b = getState(i, solution, t + 1);
  4101cd:	4c 89 f6             	mov    %r14,%rsi
  4101d0:	41 ff d7             	callq  *%r15
  4101d3:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
  4101da:	00 
  4101db:	48 c1 e8 20          	shr    $0x20,%rax
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  4101df:	48 83 fd 14          	cmp    $0x14,%rbp
        State state1b = getState(i, solution, t + 1);
  4101e3:	89 94 24 f8 00 00 00 	mov    %edx,0xf8(%rsp)
  4101ea:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4101ef:	89 d1                	mov    %edx,%ecx
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  4101f1:	0f 85 7b fd ff ff    	jne    40ff72 <_Z19main_loop_task_parami+0x8b2>
  4101f7:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    for (int t = 0; t < max_t; ++t) {
  4101fc:	39 5c 24 58          	cmp    %ebx,0x58(%rsp)
  410200:	0f 8f d6 f6 ff ff    	jg     40f8dc <_Z19main_loop_task_parami+0x21c>
  410206:	49 b8 c0 bf 84 01 00 	movabs $0x184bfc0,%r8
  41020d:	00 00 00 
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  410210:	31 c0                	xor    %eax,%eax
				 g_solution[i] = P->solution[i];
  410212:	4d 01 e8             	add    %r13,%r8
  410215:	0f 1f 00             	nopl   (%rax)
  410218:	4a 8d 3c 00          	lea    (%rax,%r8,1),%rdi
  41021c:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
  410220:	b9 c9 00 00 00       	mov    $0xc9,%ecx
  410225:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  410228:	48 05 50 06 00 00    	add    $0x650,%rax
			 for(int i = 0; i < ROBOT_NUMS; ++i) {
  41022e:	48 3d 40 7e 00 00    	cmp    $0x7e40,%rax
				 g_solution[i] = P->solution[i];
  410234:	0f b6 16             	movzbl (%rsi),%edx
  410237:	88 17                	mov    %dl,(%rdi)
			 for(int i = 0; i < ROBOT_NUMS; ++i) {
  410239:	75 dd                	jne    410218 <_Z19main_loop_task_parami+0xb58>
			 g_isNoConflict = true;
  41023b:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  410240:	42 c6 04 28 01       	movb   $0x1,(%rax,%r13,1)
		 } // expand node

		 free(global_nodelist[nodeid].addr);
		 global_nodelist[nodeid].addr = NULL;
		 return;
	}
  410245:	48 81 c4 28 09 00 00 	add    $0x928,%rsp
  41024c:	5b                   	pop    %rbx
  41024d:	5d                   	pop    %rbp
  41024e:	41 5c                	pop    %r12
  410250:	41 5d                	pop    %r13
  410252:	41 5e                	pop    %r14
  410254:	41 5f                	pop    %r15
  410256:	c3                   	retq   
  410257:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41025e:	00 00 
  410260:	48 8d 9c 24 20 05 00 	lea    0x520(%rsp),%rbx
  410267:	00 
  410268:	48 b8 a8 7d df ff ff 	movabs $0xffffffffffdf7da8,%rax
  41026f:	ff ff ff 
  410272:	49 ba b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r10
  410279:	ff ff ff 
  41027c:	41 89 f1             	mov    %esi,%r9d
  41027f:	4d 8d 44 05 00       	lea    0x0(%r13,%rax,1),%r8
  410284:	b9 00 04 00 00       	mov    $0x400,%ecx
  410289:	ba 01 00 00 00       	mov    $0x1,%edx
  41028e:	be ff 03 00 00       	mov    $0x3ff,%esi
  410293:	48 89 df             	mov    %rbx,%rdi
  410296:	4d 89 ef             	mov    %r13,%r15
  410299:	31 c0                	xor    %eax,%eax
  41029b:	4d 01 ea             	add    %r13,%r10
  41029e:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4102a1:	b9 05 04 00 00       	mov    $0x405,%ecx
  4102a6:	48 89 df             	mov    %rbx,%rdi
  4102a9:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  4102ac:	eb 97                	jmp    410245 <_Z19main_loop_task_parami+0xb85>
  4102ae:	48 89 c3             	mov    %rax,%rbx
      { _M_erase(_M_begin()); }
  4102b1:	48 b8 00 e9 de ff ff 	movabs $0xffffffffffdee900,%rax
  4102b8:	ff ff ff 
  4102bb:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4102c0:	4c 01 e8             	add    %r13,%rax
  4102c3:	48 8b b4 24 00 01 00 	mov    0x100(%rsp),%rsi
  4102ca:	00 
  4102cb:	4d 89 ef             	mov    %r13,%r15
  4102ce:	ff d0                	callq  *%rax
  4102d0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  4102d7:	ff ff ff 
  4102da:	48 89 df             	mov    %rbx,%rdi
  4102dd:	4c 01 e8             	add    %r13,%rax
  4102e0:	ff d0                	callq  *%rax
  4102e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
					found_same_key = true;
					break;
				}
			}
			if (!found_same_key) { // Not found
				edgeConstraints[edgeConstraints_size] = other.edgeConstraints[i];
  4102e8:	48 63 c1             	movslq %ecx,%rax
  4102eb:	48 8b 17             	mov    (%rdi),%rdx
				edgeConstraints_size++;
  4102ee:	83 c1 01             	add    $0x1,%ecx
				edgeConstraints[edgeConstraints_size] = other.edgeConstraints[i];
  4102f1:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  4102f5:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
  4102f9:	49 8d 84 04 90 80 00 	lea    0x8090(%r12,%rax,1),%rax
  410300:	00 
  410301:	48 89 50 08          	mov    %rdx,0x8(%rax)
  410305:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  410309:	48 89 50 10          	mov    %rdx,0x10(%rax)
  41030d:	8b 57 10             	mov    0x10(%rdi),%edx
  410310:	89 50 18             	mov    %edx,0x18(%rax)
				edgeConstraints_size++;
  410313:	89 8e 84 84 00 00    	mov    %ecx,0x8484(%rsi)
  410319:	e9 32 fa ff ff       	jmpq   40fd50 <_Z19main_loop_task_parami+0x690>
  41031e:	66 90                	xchg   %ax,%ax
				vertexConstraints[vertexConstraints_size] = other.vertexConstraints[i];
  410320:	48 63 c1             	movslq %ecx,%rax
  410323:	49 8b 10             	mov    (%r8),%rdx
				vertexConstraints_size++;
  410326:	83 c1 01             	add    $0x1,%ecx
				vertexConstraints[vertexConstraints_size] = other.vertexConstraints[i];
  410329:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
  41032d:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
  410331:	4c 01 e0             	add    %r12,%rax
  410334:	48 89 90 40 7e 00 00 	mov    %rdx,0x7e40(%rax)
  41033b:	41 8b 50 08          	mov    0x8(%r8),%edx
  41033f:	89 90 48 7e 00 00    	mov    %edx,0x7e48(%rax)
				vertexConstraints_size++;
  410345:	89 8e 80 84 00 00    	mov    %ecx,0x8480(%rsi)
  41034b:	e9 5b f9 ff ff       	jmpq   40fcab <_Z19main_loop_task_parami+0x5eb>
  410350:	4c 8b 54 24 30       	mov    0x30(%rsp),%r10
  410355:	41 b9 40 00 00 00    	mov    $0x40,%r9d
  41035b:	4c 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%r8
  410362:	00 
  410363:	b9 00 04 00 00       	mov    $0x400,%ecx
  410368:	ba 01 00 00 00       	mov    $0x1,%edx
  41036d:	be ff 03 00 00       	mov    $0x3ff,%esi
  410372:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  410377:	4d 89 ef             	mov    %r13,%r15
  41037a:	31 c0                	xor    %eax,%eax
  41037c:	4f 8d 1c 2a          	lea    (%r10,%r13,1),%r11
  410380:	41 ff d3             	callq  *%r11
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410383:	b9 05 04 00 00       	mov    $0x405,%ecx
  410388:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  41038d:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  410390:	e9 cc f9 ff ff       	jmpq   40fd61 <_Z19main_loop_task_parami+0x6a1>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410395:	48 b8 9a 81 df ff ff 	movabs $0xffffffffffdf819a,%rax
  41039c:	ff ff ff 
  41039f:	b9 05 04 00 00       	mov    $0x405,%ecx
  4103a4:	49 8d 7c 05 00       	lea    0x0(%r13,%rax,1),%rdi
  4103a9:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  4103ac:	eb fe                	jmp    4103ac <_Z19main_loop_task_parami+0xcec>
  4103ae:	48 b8 b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%rax
  4103b5:	ff ff ff 
  4103b8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  4103bd:	e9 c5 fa ff ff       	jmpq   40fe87 <_Z19main_loop_task_parami+0x7c7>
  4103c2:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4103c7:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
		 free(global_nodelist[nodeid].addr);
  4103cc:	4d 89 ef             	mov    %r13,%r15
  4103cf:	48 c1 e2 06          	shl    $0x6,%rdx
  4103d3:	4c 01 e8             	add    %r13,%rax
  4103d6:	48 8b 3c 02          	mov    (%rdx,%rax,1),%rdi
  4103da:	48 b8 20 79 df ff ff 	movabs $0xffffffffffdf7920,%rax
  4103e1:	ff ff ff 
  4103e4:	4c 01 e8             	add    %r13,%rax
  4103e7:	ff d0                	callq  *%rax
		 global_nodelist[nodeid].addr = NULL;
  4103e9:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4103ee:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  4103f3:	48 8b b4 24 00 01 00 	mov    0x100(%rsp),%rsi
  4103fa:	00 
  4103fb:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  410400:	4c 01 e8             	add    %r13,%rax
  410403:	48 c1 e2 06          	shl    $0x6,%rdx
  410407:	48 c7 04 02 00 00 00 	movq   $0x0,(%rdx,%rax,1)
  41040e:	00 
  41040f:	48 b8 00 e9 de ff ff 	movabs $0xffffffffffdee900,%rax
  410416:	ff ff ff 
  410419:	4c 01 e8             	add    %r13,%rax
  41041c:	ff d0                	callq  *%rax
  41041e:	e9 22 fe ff ff       	jmpq   410245 <_Z19main_loop_task_parami+0xb85>
  410423:	90                   	nop
  410424:	66 90                	xchg   %ax,%ax
  410426:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41042d:	00 00 00 

0000000000410430 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_S5_EEEES1_INS8_14_Node_iteratorIS6_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_.constprop.623>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  410430:	41 57                	push   %r15
  410432:	41 56                	push   %r14
  410434:	49 bb d0 ab 21 00 00 	movabs $0x21abd0,%r11
  41043b:	00 00 00 
  41043e:	41 55                	push   %r13
  410440:	41 54                	push   %r12
  410442:	49 89 f5             	mov    %rsi,%r13
  410445:	55                   	push   %rbp
  410446:	48 8d 2d e3 ff ff ff 	lea    -0x1d(%rip),%rbp        # 410430 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_S5_EEEES1_INS8_14_Node_iteratorIS6_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_.constprop.623>
  41044d:	53                   	push   %rbx
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41044e:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  410455:	ff ff ff 
  410458:	49 89 fc             	mov    %rdi,%r12
  41045b:	bf 38 00 00 00       	mov    $0x38,%edi
  410460:	4c 01 dd             	add    %r11,%rbp
  410463:	48 83 ec 28          	sub    $0x28,%rsp
  410467:	49 89 ef             	mov    %rbp,%r15
  41046a:	48 01 e8             	add    %rbp,%rax
  41046d:	ff d0                	callq  *%rax
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
  41046f:	49 8b 4d 00          	mov    0x0(%r13),%rcx
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  410473:	41 8b 55 0c          	mov    0xc(%r13),%edx
  410477:	48 89 c3             	mov    %rax,%rbx
    _Hash_node_base() noexcept : _M_nxt() { }
  41047a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  410481:	bf b9 79 37 9e       	mov    $0x9e3779b9,%edi
  410486:	4d 8b 7c 24 08       	mov    0x8(%r12),%r15
  41048b:	48 89 48 08          	mov    %rcx,0x8(%rax)
  41048f:	89 53 14             	mov    %edx,0x14(%rbx)
  410492:	41 8b 55 10          	mov    0x10(%r13),%edx
  410496:	41 8b 45 08          	mov    0x8(%r13),%eax
  41049a:	89 53 18             	mov    %edx,0x18(%rbx)
  41049d:	41 8b 55 14          	mov    0x14(%r13),%edx
  4104a1:	89 43 10             	mov    %eax,0x10(%rbx)
  4104a4:	89 53 1c             	mov    %edx,0x1c(%rbx)
  4104a7:	49 8b 55 18          	mov    0x18(%r13),%rdx
  4104ab:	48 89 53 20          	mov    %rdx,0x20(%rbx)
  4104af:	41 8b 55 20          	mov    0x20(%r13),%edx
  4104b3:	4c 63 e8             	movslq %eax,%r13
  4104b6:	49 01 fd             	add    %rdi,%r13
  4104b9:	89 53 28             	mov    %edx,0x28(%rbx)
  4104bc:	48 63 d1             	movslq %ecx,%rdx
  4104bf:	48 c1 f9 20          	sar    $0x20,%rcx
  4104c3:	48 8d 34 3a          	lea    (%rdx,%rdi,1),%rsi
  4104c7:	48 01 f9             	add    %rdi,%rcx
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  4104ca:	4c 89 e7             	mov    %r12,%rdi
  4104cd:	48 89 f2             	mov    %rsi,%rdx
  4104d0:	48 c1 e2 06          	shl    $0x6,%rdx
  4104d4:	48 01 d1             	add    %rdx,%rcx
  4104d7:	48 89 f2             	mov    %rsi,%rdx
  4104da:	48 c1 ea 02          	shr    $0x2,%rdx
  4104de:	48 01 ca             	add    %rcx,%rdx
  4104e1:	48 31 f2             	xor    %rsi,%rdx
  4104e4:	48 89 d0             	mov    %rdx,%rax
  4104e7:	48 c1 e0 06          	shl    $0x6,%rax
  4104eb:	49 01 c5             	add    %rax,%r13
  4104ee:	48 89 d0             	mov    %rdx,%rax
  4104f1:	48 c1 e8 02          	shr    $0x2,%rax
  4104f5:	49 01 c5             	add    %rax,%r13
  4104f8:	49 31 d5             	xor    %rdx,%r13
    { return __num % __den; }
  4104fb:	31 d2                	xor    %edx,%edx
  4104fd:	4c 89 e8             	mov    %r13,%rax
  410500:	4c 89 e9             	mov    %r13,%rcx
  410503:	49 f7 f7             	div    %r15
  410506:	48 b8 e0 0b df ff ff 	movabs $0xffffffffffdf0be0,%rax
  41050d:	ff ff ff 
  410510:	48 01 e8             	add    %rbp,%rax
  410513:	49 89 d6             	mov    %rdx,%r14
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
  410516:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  41051a:	4c 89 f6             	mov    %r14,%rsi
  41051d:	ff d0                	callq  *%rax
	if (__before_n)
  41051f:	48 85 c0             	test   %rax,%rax
  410522:	0f 84 38 00 00 00    	je     410560 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_S5_EEEES1_INS8_14_Node_iteratorIS6_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_.constprop.623+0x130>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  410528:	48 8b 00             	mov    (%rax),%rax
	if (__node_type* __p = _M_find_node(__bkt, __k, __code))
  41052b:	48 85 c0             	test   %rax,%rax
  41052e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  410533:	74 2b                	je     410560 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_S5_EEEES1_INS8_14_Node_iteratorIS6_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_.constprop.623+0x130>
      { ::operator delete(__p); }
  410535:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  41053c:	ff ff ff 
  41053f:	49 89 ef             	mov    %rbp,%r15
  410542:	48 89 df             	mov    %rbx,%rdi
  410545:	48 01 ea             	add    %rbp,%rdx
  410548:	ff d2                	callq  *%rdx
  41054a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      }
  41054f:	48 83 c4 28          	add    $0x28,%rsp
  410553:	31 d2                	xor    %edx,%edx
  410555:	5b                   	pop    %rbx
  410556:	5d                   	pop    %rbp
  410557:	41 5c                	pop    %r12
  410559:	41 5d                	pop    %r13
  41055b:	41 5e                	pop    %r14
  41055d:	41 5f                	pop    %r15
  41055f:	c3                   	retq   
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  410560:	49 8b 44 24 28       	mov    0x28(%r12),%rax
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  410565:	49 8b 54 24 18       	mov    0x18(%r12),%rdx
  41056a:	4c 89 fe             	mov    %r15,%rsi
  41056d:	49 8d 7c 24 20       	lea    0x20(%r12),%rdi
  410572:	b9 01 00 00 00       	mov    $0x1,%ecx
  410577:	49 89 ef             	mov    %rbp,%r15
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  41057a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41057f:	48 b8 90 e8 dd ff ff 	movabs $0xffffffffffdde890,%rax
  410586:	ff ff ff 
  410589:	48 01 e8             	add    %rbp,%rax
  41058c:	ff d0                	callq  *%rax
	  if (__do_rehash.first)
  41058e:	84 c0                	test   %al,%al
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  410590:	48 89 d6             	mov    %rdx,%rsi
	  if (__do_rehash.first)
  410593:	74 24                	je     4105b9 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_S5_EEEES1_INS8_14_Node_iteratorIS6_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_.constprop.623+0x189>
	      _M_rehash(__do_rehash.second, __saved_state);
  410595:	48 b8 d0 27 df ff ff 	movabs $0xffffffffffdf27d0,%rax
  41059c:	ff ff ff 
  41059f:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  4105a4:	4c 89 e7             	mov    %r12,%rdi
  4105a7:	48 01 e8             	add    %rbp,%rax
  4105aa:	ff d0                	callq  *%rax
  4105ac:	4c 89 e8             	mov    %r13,%rax
  4105af:	31 d2                	xor    %edx,%edx
  4105b1:	49 f7 74 24 08       	divq   0x8(%r12)
  4105b6:	49 89 d6             	mov    %rdx,%r14
      if (_M_buckets[__bkt])
  4105b9:	49 8b 34 24          	mov    (%r12),%rsi
      { __n->_M_hash_code = __c; }
  4105bd:	4c 89 6b 30          	mov    %r13,0x30(%rbx)
  4105c1:	4a 8d 0c f6          	lea    (%rsi,%r14,8),%rcx
  4105c5:	48 8b 01             	mov    (%rcx),%rax
  4105c8:	48 85 c0             	test   %rax,%rax
  4105cb:	74 33                	je     410600 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_S5_EEEES1_INS8_14_Node_iteratorIS6_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_.constprop.623+0x1d0>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  4105cd:	48 8b 00             	mov    (%rax),%rax
  4105d0:	48 89 03             	mov    %rax,(%rbx)
	  _M_buckets[__bkt]->_M_nxt = __node;
  4105d3:	48 8b 01             	mov    (%rcx),%rax
  4105d6:	48 89 18             	mov    %rbx,(%rax)
	  ++_M_element_count;
  4105d9:	49 83 44 24 18 01    	addq   $0x1,0x18(%r12)
      }
  4105df:	48 83 c4 28          	add    $0x28,%rsp
  4105e3:	48 89 d8             	mov    %rbx,%rax
  4105e6:	ba 01 00 00 00       	mov    $0x1,%edx
  4105eb:	5b                   	pop    %rbx
  4105ec:	5d                   	pop    %rbp
  4105ed:	41 5c                	pop    %r12
  4105ef:	41 5d                	pop    %r13
  4105f1:	41 5e                	pop    %r14
  4105f3:	41 5f                	pop    %r15
  4105f5:	c3                   	retq   
  4105f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4105fd:	00 00 00 
	  __node->_M_nxt = _M_before_begin._M_nxt;
  410600:	49 8b 44 24 10       	mov    0x10(%r12),%rax
	  _M_before_begin._M_nxt = __node;
  410605:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
	  if (__node->_M_nxt)
  41060a:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  41060d:	48 89 03             	mov    %rax,(%rbx)
	  if (__node->_M_nxt)
  410610:	74 0f                	je     410621 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_S5_EEEES1_INS8_14_Node_iteratorIS6_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_.constprop.623+0x1f1>
    { return __num % __den; }
  410612:	48 8b 40 30          	mov    0x30(%rax),%rax
  410616:	31 d2                	xor    %edx,%edx
  410618:	49 f7 74 24 08       	divq   0x8(%r12)
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  41061d:	48 89 1c d6          	mov    %rbx,(%rsi,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  410621:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  410626:	48 89 01             	mov    %rax,(%rcx)
  410629:	eb ae                	jmp    4105d9 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_S5_EEEES1_INS8_14_Node_iteratorIS6_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_.constprop.623+0x1a9>
      __catch(...)
  41062b:	48 89 c7             	mov    %rax,%rdi
  41062e:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  410635:	ff ff ff 
  410638:	49 89 ef             	mov    %rbp,%r15
  41063b:	48 01 e8             	add    %rbp,%rax
  41063e:	ff d0                	callq  *%rax
  410640:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  410647:	ff ff ff 
  41064a:	48 89 df             	mov    %rbx,%rdi
  41064d:	48 01 e8             	add    %rbp,%rax
  410650:	ff d0                	callq  *%rax
	  __throw_exception_again;
  410652:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  410659:	ff ff ff 
  41065c:	48 01 e8             	add    %rbp,%rax
  41065f:	ff d0                	callq  *%rax
      __catch(...)
  410661:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  410668:	ff ff ff 
  41066b:	48 89 c3             	mov    %rax,%rbx
  41066e:	49 89 ef             	mov    %rbp,%r15
  410671:	48 01 ea             	add    %rbp,%rdx
  410674:	ff d2                	callq  *%rdx
  410676:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41067d:	ff ff ff 
  410680:	48 89 df             	mov    %rbx,%rdi
  410683:	48 01 e8             	add    %rbp,%rax
  410686:	ff d0                	callq  *%rax
  410688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41068f:	00 

0000000000410690 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult>:
}
#endif

#if 1
  bool astar_search(LowLevelEnvironment& m_env, float m_w, 
			const State& startState, PlanResult& solution) {
  410690:	55                   	push   %rbp
  410691:	48 8d 05 f8 ff ff ff 	lea    -0x8(%rip),%rax        # 410690 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult>
  410698:	49 bb 70 a9 21 00 00 	movabs $0x21a970,%r11
  41069f:	00 00 00 
  4106a2:	48 89 e5             	mov    %rsp,%rbp
  4106a5:	41 57                	push   %r15
  4106a7:	41 56                	push   %r14
  4106a9:	41 55                	push   %r13
  4106ab:	41 54                	push   %r12
  4106ad:	4c 01 d8             	add    %r11,%rax
  4106b0:	53                   	push   %rbx
  4106b1:	49 89 c6             	mov    %rax,%r14
  4106b4:	48 81 ec 18 06 00 00 	sub    $0x618,%rsp
  4106bb:	48 89 85 58 fa ff ff 	mov    %rax,-0x5a8(%rbp)
  4106c2:	48 89 f0             	mov    %rsi,%rax
	char pad[48];

	void clear() {
		states_size = 0;
		actions_size = 0;
		cost = 0;
  4106c5:	c7 82 10 06 00 00 00 	movl   $0x0,0x610(%rdx)
  4106cc:	00 00 00 
		fmin = 0;
  4106cf:	c7 82 14 06 00 00 00 	movl   $0x0,0x614(%rdx)
  4106d6:	00 00 00 
  4106d9:	48 89 c3             	mov    %rax,%rbx
  4106dc:	8b 08                	mov    (%rax),%ecx
		actions_size = 0;
  4106de:	48 c7 82 08 06 00 00 	movq   $0x0,0x608(%rdx)
  4106e5:	00 00 00 00 
  4106e9:	f3 0f 11 85 3c fa ff 	movss  %xmm0,-0x5c4(%rbp)
  4106f0:	ff 
  4106f1:	48 89 b5 d0 f9 ff ff 	mov    %rsi,-0x630(%rbp)
  4106f8:	48 89 95 28 fa ff ff 	mov    %rdx,-0x5d8(%rbp)
  4106ff:	48 89 d6             	mov    %rdx,%rsi
  410702:	8b 50 04             	mov    0x4(%rax),%edx
  410705:	8b 40 08             	mov    0x8(%rax),%eax
  410708:	48 89 bd 08 fa ff ff 	mov    %rdi,-0x5f8(%rbp)
	}

	void add(StateCost s) {
		if (states_size < STATE_SIZE) {
			states[states_size] = s;
  41070f:	89 0e                	mov    %ecx,(%rsi)
  410711:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%rsi)
  410718:	89 56 04             	mov    %edx,0x4(%rsi)
			states_size++;
  41071b:	48 c7 86 00 04 00 00 	movq   $0x1,0x400(%rsi)
  410722:	01 00 00 00 
			states[states_size] = s;
  410726:	89 46 08             	mov    %eax,0x8(%rsi)
      _Hashtable() = default;
  410729:	48 8d 85 10 fb ff ff 	lea    -0x4f0(%rbp),%rax
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  410730:	48 c7 85 70 fa ff ff 	movq   $0x0,-0x590(%rbp)
  410737:	00 00 00 00 
  41073b:	48 c7 85 78 fa ff ff 	movq   $0x0,-0x588(%rbp)
  410742:	00 00 00 00 
  410746:	48 c7 85 80 fa ff ff 	movq   $0x0,-0x580(%rbp)
  41074d:	00 00 00 00 
  410751:	48 89 85 48 fa ff ff 	mov    %rax,-0x5b8(%rbp)
  410758:	49 89 c7             	mov    %rax,%r15
  41075b:	48 83 c0 30          	add    $0x30,%rax
  41075f:	48 89 85 10 fb ff ff 	mov    %rax,-0x4f0(%rbp)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  410766:	48 b8 38 96 df ff ff 	movabs $0xffffffffffdf9638,%rax
  41076d:	ff ff ff 
  410770:	48 c7 85 90 fa ff ff 	movq   $0x0,-0x570(%rbp)
  410777:	00 00 00 00 
  41077b:	48 c7 85 98 fa ff ff 	movq   $0x0,-0x568(%rbp)
  410782:	00 00 00 00 
  410786:	48 c7 85 a0 fa ff ff 	movq   $0x0,-0x560(%rbp)
  41078d:	00 00 00 00 
  410791:	48 c7 85 18 fb ff ff 	movq   $0x1,-0x4e8(%rbp)
  410798:	01 00 00 00 
    _Hash_node_base() noexcept : _M_nxt() { }
  41079c:	48 c7 85 20 fb ff ff 	movq   $0x0,-0x4e0(%rbp)
  4107a3:	00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  4107a7:	f3 41 0f 10 04 06    	movss  (%r14,%rax,1),%xmm0
  4107ad:	48 8d 85 50 fb ff ff 	lea    -0x4b0(%rbp),%rax
      { return *(this->_M_impl._M_start + __n); }
  4107b4:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  4107b8:	8b 4b 08             	mov    0x8(%rbx),%ecx
  4107bb:	48 c7 85 28 fb ff ff 	movq   $0x0,-0x4d8(%rbp)
  4107c2:	00 00 00 00 
  4107c6:	f3 0f 11 85 30 fb ff 	movss  %xmm0,-0x4d0(%rbp)
  4107cd:	ff 
  4107ce:	48 89 85 18 fa ff ff 	mov    %rax,-0x5e8(%rbp)
  4107d5:	48 83 c0 30          	add    $0x30,%rax
  4107d9:	48 c7 85 38 fb ff ff 	movq   $0x0,-0x4c8(%rbp)
  4107e0:	00 00 00 00 
  4107e4:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
  4107eb:	48 8d 85 90 fb ff ff 	lea    -0x470(%rbp),%rax
  4107f2:	f3 0f 11 85 70 fb ff 	movss  %xmm0,-0x490(%rbp)
  4107f9:	ff 
  4107fa:	48 c7 85 40 fb ff ff 	movq   $0x0,-0x4c0(%rbp)
  410801:	00 00 00 00 
  410805:	48 c7 85 58 fb ff ff 	movq   $0x1,-0x4a8(%rbp)
  41080c:	01 00 00 00 
  410810:	f3 0f 11 85 b0 fb ff 	movss  %xmm0,-0x450(%rbp)
  410817:	ff 
  410818:	48 89 85 20 fa ff ff 	mov    %rax,-0x5e0(%rbp)
  41081f:	48 83 c0 30          	add    $0x30,%rax
  410823:	48 89 85 90 fb ff ff 	mov    %rax,-0x470(%rbp)
  41082a:	48 8b 07             	mov    (%rdi),%rax
  41082d:	48 8d bd 70 fa ff ff 	lea    -0x590(%rbp),%rdi
    _Hash_node_base() noexcept : _M_nxt() { }
  410834:	48 c7 85 60 fb ff ff 	movq   $0x0,-0x4a0(%rbp)
  41083b:	00 00 00 00 
  41083f:	48 c7 85 68 fb ff ff 	movq   $0x0,-0x498(%rbp)
  410846:	00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  41084a:	48 c7 85 78 fb ff ff 	movq   $0x0,-0x488(%rbp)
  410851:	00 00 00 00 
  410855:	48 c7 85 80 fb ff ff 	movq   $0x0,-0x480(%rbp)
  41085c:	00 00 00 00 
  410860:	48 c7 85 98 fb ff ff 	movq   $0x1,-0x468(%rbp)
  410867:	01 00 00 00 
  41086b:	48 8b 00             	mov    (%rax),%rax
    _Hash_node_base() noexcept : _M_nxt() { }
  41086e:	48 c7 85 a0 fb ff ff 	movq   $0x0,-0x460(%rbp)
  410875:	00 00 00 00 
  410879:	48 c7 85 a8 fb ff ff 	movq   $0x0,-0x458(%rbp)
  410880:	00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  410884:	48 c7 85 b8 fb ff ff 	movq   $0x0,-0x448(%rbp)
  41088b:	00 00 00 00 
  41088f:	48 c7 85 c0 fb ff ff 	movq   $0x0,-0x440(%rbp)
  410896:	00 00 00 00 
  41089a:	48 8d 34 d0          	lea    (%rax,%rdx,8),%rsi
  41089e:	89 c8                	mov    %ecx,%eax
  4108a0:	2b 46 04             	sub    0x4(%rsi),%eax
  4108a3:	99                   	cltd   
  4108a4:	31 d0                	xor    %edx,%eax
  4108a6:	29 d0                	sub    %edx,%eax
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  4108a8:	8b 53 04             	mov    0x4(%rbx),%edx
  4108ab:	2b 16                	sub    (%rsi),%edx
		stat(0) {}
  4108ad:	89 8d d8 fb ff ff    	mov    %ecx,-0x428(%rbp)
  4108b3:	89 d6                	mov    %edx,%esi
  4108b5:	c1 fe 1f             	sar    $0x1f,%esi
  4108b8:	31 f2                	xor    %esi,%edx
  4108ba:	29 f2                	sub    %esi,%edx
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  4108bc:	01 d0                	add    %edx,%eax
  4108be:	48 8b 13             	mov    (%rbx),%rdx
  4108c1:	89 85 dc fb ff ff    	mov    %eax,-0x424(%rbp)
  4108c7:	48 8d 85 d0 fb ff ff 	lea    -0x430(%rbp),%rax
  4108ce:	48 89 95 d0 fb ff ff 	mov    %rdx,-0x430(%rbp)
  4108d5:	49 89 c4             	mov    %rax,%r12
  4108d8:	c7 85 e0 fb ff ff 00 	movl   $0x0,-0x420(%rbp)
  4108df:	00 00 00 
  4108e2:	48 89 c6             	mov    %rax,%rsi
  4108e5:	48 89 85 30 fa ff ff 	mov    %rax,-0x5d0(%rbp)
  4108ec:	48 b8 20 f2 de ff ff 	movabs $0xffffffffffdef220,%rax
  4108f3:	ff ff ff 
  4108f6:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%rbp)
  4108fd:	00 00 00 
  410900:	c7 85 e8 fb ff ff 00 	movl   $0x0,-0x418(%rbp)
  410907:	00 00 00 
  41090a:	4c 01 f0             	add    %r14,%rax
  41090d:	48 89 bd f8 f9 ff ff 	mov    %rdi,-0x608(%rbp)
  410914:	ff d0                	callq  *%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  410916:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  41091d:	48 2b 85 70 fa ff ff 	sub    -0x590(%rbp),%rax
	  return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
  410924:	48 83 ec 08          	sub    $0x8,%rsp
        cameFrom;

    openSet.push_back(
        AstarNode(startState, m_env.admissibleHeuristic(startState), 0, 0));
		int index = openSet.size() - 1;
    stateToHeap.insert(std::make_pair<>(startState, index));
  410928:	8b 33                	mov    (%rbx),%esi
       : first(__x), second(std::forward<_U2>(__y)) { }
  41092a:	8b 4b 04             	mov    0x4(%rbx),%ecx
  41092d:	4c 89 ff             	mov    %r15,%rdi
  410930:	8b 53 08             	mov    0x8(%rbx),%edx
  410933:	6a 00                	pushq  $0x0
  410935:	48 c1 f8 02          	sar    $0x2,%rax
  410939:	89 b5 d0 fb ff ff    	mov    %esi,-0x430(%rbp)
  41093f:	89 8d d4 fb ff ff    	mov    %ecx,-0x42c(%rbp)
  410945:	69 c0 49 92 24 49    	imul   $0x49249249,%eax,%eax
  41094b:	89 95 d8 fb ff ff    	mov    %edx,-0x428(%rbp)
  410951:	4c 89 e6             	mov    %r12,%rsi
		int index = openSet.size() - 1;
  410954:	f7 d0                	not    %eax
  410956:	89 85 64 fa ff ff    	mov    %eax,-0x59c(%rbp)
    stateToHeap.insert(std::make_pair<>(startState, index));
  41095c:	89 85 dc fb ff ff    	mov    %eax,-0x424(%rbp)
  410962:	48 b8 90 23 df ff ff 	movabs $0xffffffffffdf2390,%rax
  410969:	ff ff ff 
  41096c:	4c 01 f0             	add    %r14,%rax
  41096f:	ff d0                	callq  *%rax
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  410971:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  410978:	48 3b 85 a0 fa ff ff 	cmp    -0x560(%rbp),%rax
  41097f:	41 5a                	pop    %r10
  410981:	41 5b                	pop    %r11
  410983:	0f 84 78 16 00 00    	je     412001 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1971>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  410989:	48 85 c0             	test   %rax,%rax
  41098c:	8b 95 64 fa ff ff    	mov    -0x59c(%rbp),%edx
  410992:	74 02                	je     410996 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x306>
  410994:	89 10                	mov    %edx,(%rax)
	    ++this->_M_impl._M_finish;
  410996:	48 83 c0 04          	add    $0x4,%rax
  41099a:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
    //(*handle).handle = handle;

    focalSet.push_back(index);

    std::vector<Neighbor<State, Action, Cost> > neighbors;
    neighbors.reserve(10);
  4109a1:	48 8d 85 b0 fa ff ff 	lea    -0x550(%rbp),%rax
  4109a8:	4c 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%r15
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  4109af:	48 c7 85 b0 fa ff ff 	movq   $0x0,-0x550(%rbp)
  4109b6:	00 00 00 00 
  4109ba:	48 c7 85 b8 fa ff ff 	movq   $0x0,-0x548(%rbp)
  4109c1:	00 00 00 00 
  4109c5:	48 c7 85 c0 fa ff ff 	movq   $0x0,-0x540(%rbp)
  4109cc:	00 00 00 00 
  4109d0:	be 0a 00 00 00       	mov    $0xa,%esi
  4109d5:	48 89 85 c8 f9 ff ff 	mov    %rax,-0x638(%rbp)
  4109dc:	48 89 c7             	mov    %rax,%rdi
  4109df:	48 b8 e0 c0 de ff ff 	movabs $0xffffffffffdec0e0,%rax
  4109e6:	ff ff ff 
  4109e9:	4c 01 f8             	add    %r15,%rax
  4109ec:	ff d0                	callq  *%rax

    Cost bestFScore = openSet[focalSet[0]].fScore;
  4109ee:	48 8b 85 90 fa ff ff 	mov    -0x570(%rbp),%rax
  4109f5:	48 8b 9d 70 fa ff ff 	mov    -0x590(%rbp),%rbx
  4109fc:	48 63 10             	movslq (%rax),%rdx
  4109ff:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  410a06:	00 
  410a07:	48 29 d0             	sub    %rdx,%rax
  410a0a:	44 8b 74 83 0c       	mov    0xc(%rbx,%rax,4),%r14d
  410a0f:	48 8d 85 90 fa ff ff 	lea    -0x570(%rbp),%rax
  410a16:	48 89 85 e8 f9 ff ff 	mov    %rax,-0x618(%rbp)
  410a1d:	48 b8 d0 f3 de ff ff 	movabs $0xffffffffffdef3d0,%rax
  410a24:	ff ff ff 
  410a27:	4c 01 f8             	add    %r15,%rax
  410a2a:	48 89 85 d8 f9 ff ff 	mov    %rax,-0x628(%rbp)
  410a31:	4c 8b a5 78 fa ff ff 	mov    -0x588(%rbp),%r12
	for (; iter != iterEnd; ++iter) {
  410a38:	49 39 dc             	cmp    %rbx,%r12
  410a3b:	74 29                	je     410a66 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3d6>
		if(iter->stat == 0)
  410a3d:	44 8b 4b 18          	mov    0x18(%rbx),%r9d
  410a41:	48 8d 43 1c          	lea    0x1c(%rbx),%rax
  410a45:	45 85 c9             	test   %r9d,%r9d
  410a48:	75 17                	jne    410a61 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3d1>
  410a4a:	e9 80 02 00 00       	jmpq   410ccf <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x63f>
  410a4f:	90                   	nop
  410a50:	48 83 c0 1c          	add    $0x1c,%rax
  410a54:	44 8b 40 fc          	mov    -0x4(%rax),%r8d
  410a58:	45 85 c0             	test   %r8d,%r8d
  410a5b:	0f 84 6e 02 00 00    	je     410ccf <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x63f>
	for (; iter != iterEnd; ++iter) {
  410a61:	49 39 c4             	cmp    %rax,%r12
  410a64:	75 ea                	jne    410a50 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3c0>
                                tentative_gScore)));
        }
      }
    }

    return false;
  410a66:	45 31 ed             	xor    %r13d,%r13d
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  410a69:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
	if (__p)
  410a70:	48 85 ff             	test   %rdi,%rdi
  410a73:	74 19                	je     410a8e <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3fe>
      { ::operator delete(__p); }
  410a75:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  410a7c:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  410a83:	ff ff ff 
  410a86:	49 89 c7             	mov    %rax,%r15
  410a89:	48 01 c3             	add    %rax,%rbx
  410a8c:	ff d3                	callq  *%rbx
  410a8e:	48 8b bd a0 fb ff ff 	mov    -0x460(%rbp),%rdi
  410a95:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  410a9c:	ff ff ff 
  410a9f:	48 03 9d 58 fa ff ff 	add    -0x5a8(%rbp),%rbx
      while (__n)
  410aa6:	48 85 ff             	test   %rdi,%rdi
  410aa9:	74 14                	je     410abf <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x42f>
  410aab:	4c 8b 27             	mov    (%rdi),%r12
  410aae:	4c 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%r15
  410ab5:	ff d3                	callq  *%rbx
  410ab7:	4d 85 e4             	test   %r12,%r12
  410aba:	4c 89 e7             	mov    %r12,%rdi
  410abd:	75 ec                	jne    410aab <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x41b>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  410abf:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
  410ac6:	49 bc 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%r12
  410acd:	ff ff ff 
  410ad0:	31 f6                	xor    %esi,%esi
  410ad2:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
  410ad9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  410ae0:	00 
  410ae1:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  410ae8:	49 89 c7             	mov    %rax,%r15
  410aeb:	4c 01 e0             	add    %r12,%rax
  410aee:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  410af0:	48 8b 85 20 fa ff ff 	mov    -0x5e0(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  410af7:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
      _M_element_count = 0;
  410afe:	48 c7 85 a8 fb ff ff 	movq   $0x0,-0x458(%rbp)
  410b05:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  410b09:	48 c7 85 a0 fb ff ff 	movq   $0x0,-0x460(%rbp)
  410b10:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  410b14:	48 83 c0 30          	add    $0x30,%rax
  410b18:	48 39 c7             	cmp    %rax,%rdi
  410b1b:	74 19                	je     410b36 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x4a6>
  410b1d:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  410b24:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  410b2b:	ff ff ff 
  410b2e:	49 89 c7             	mov    %rax,%r15
  410b31:	48 01 c3             	add    %rax,%rbx
  410b34:	ff d3                	callq  *%rbx
  410b36:	48 8b bd 60 fb ff ff 	mov    -0x4a0(%rbp),%rdi
  410b3d:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  410b44:	ff ff ff 
  410b47:	48 03 9d 58 fa ff ff 	add    -0x5a8(%rbp),%rbx
  410b4e:	48 85 ff             	test   %rdi,%rdi
  410b51:	74 14                	je     410b67 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x4d7>
  410b53:	4c 8b 37             	mov    (%rdi),%r14
  410b56:	4c 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%r15
  410b5d:	ff d3                	callq  *%rbx
  410b5f:	4d 85 f6             	test   %r14,%r14
  410b62:	4c 89 f7             	mov    %r14,%rdi
  410b65:	75 ec                	jne    410b53 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x4c3>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  410b67:	48 8b 85 58 fb ff ff 	mov    -0x4a8(%rbp),%rax
  410b6e:	31 f6                	xor    %esi,%esi
  410b70:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
  410b77:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  410b7e:	00 
  410b7f:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  410b86:	49 89 c7             	mov    %rax,%r15
  410b89:	4c 01 e0             	add    %r12,%rax
  410b8c:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  410b8e:	48 8b 85 18 fa ff ff 	mov    -0x5e8(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  410b95:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
      _M_element_count = 0;
  410b9c:	48 c7 85 68 fb ff ff 	movq   $0x0,-0x498(%rbp)
  410ba3:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  410ba7:	48 c7 85 60 fb ff ff 	movq   $0x0,-0x4a0(%rbp)
  410bae:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  410bb2:	48 83 c0 30          	add    $0x30,%rax
  410bb6:	48 39 c7             	cmp    %rax,%rdi
  410bb9:	74 19                	je     410bd4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x544>
  410bbb:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  410bc2:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  410bc9:	ff ff ff 
  410bcc:	49 89 c7             	mov    %rax,%r15
  410bcf:	48 01 c3             	add    %rax,%rbx
  410bd2:	ff d3                	callq  *%rbx
  410bd4:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  410bdb:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  410be2:	ff ff ff 
  410be5:	48 03 9d 58 fa ff ff 	add    -0x5a8(%rbp),%rbx
  410bec:	48 85 ff             	test   %rdi,%rdi
  410bef:	74 14                	je     410c05 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x575>
  410bf1:	4c 8b 37             	mov    (%rdi),%r14
  410bf4:	4c 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%r15
  410bfb:	ff d3                	callq  *%rbx
  410bfd:	4d 85 f6             	test   %r14,%r14
  410c00:	4c 89 f7             	mov    %r14,%rdi
  410c03:	75 ec                	jne    410bf1 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x561>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  410c05:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
  410c0c:	31 f6                	xor    %esi,%esi
  410c0e:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
  410c15:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  410c1c:	00 
  410c1d:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  410c24:	49 01 c4             	add    %rax,%r12
  410c27:	49 89 c7             	mov    %rax,%r15
  410c2a:	41 ff d4             	callq  *%r12
	if (_M_uses_single_bucket(__bkts))
  410c2d:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  410c34:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
      _M_element_count = 0;
  410c3b:	48 c7 85 28 fb ff ff 	movq   $0x0,-0x4d8(%rbp)
  410c42:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  410c46:	48 c7 85 20 fb ff ff 	movq   $0x0,-0x4e0(%rbp)
  410c4d:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  410c51:	48 83 c0 30          	add    $0x30,%rax
  410c55:	48 39 c7             	cmp    %rax,%rdi
  410c58:	74 19                	je     410c73 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x5e3>
  410c5a:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  410c61:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  410c68:	ff ff ff 
  410c6b:	49 89 df             	mov    %rbx,%r15
  410c6e:	48 01 d8             	add    %rbx,%rax
  410c71:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  410c73:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
	if (__p)
  410c7a:	48 85 ff             	test   %rdi,%rdi
  410c7d:	74 19                	je     410c98 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x608>
  410c7f:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  410c86:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  410c8d:	ff ff ff 
  410c90:	49 89 df             	mov    %rbx,%r15
  410c93:	48 01 d8             	add    %rbx,%rax
  410c96:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  410c98:	48 8b bd 70 fa ff ff 	mov    -0x590(%rbp),%rdi
	if (__p)
  410c9f:	48 85 ff             	test   %rdi,%rdi
  410ca2:	74 19                	je     410cbd <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x62d>
  410ca4:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  410cab:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  410cb2:	ff ff ff 
  410cb5:	49 89 df             	mov    %rbx,%r15
  410cb8:	48 01 d8             	add    %rbx,%rax
  410cbb:	ff d0                	callq  *%rax
  }
  410cbd:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  410cc1:	44 89 e8             	mov    %r13d,%eax
  410cc4:	5b                   	pop    %rbx
  410cc5:	41 5c                	pop    %r12
  410cc7:	41 5d                	pop    %r13
  410cc9:	41 5e                	pop    %r14
  410ccb:	41 5f                	pop    %r15
  410ccd:	5d                   	pop    %rbp
  410cce:	c3                   	retq   
        bestFScore = openSet[openset_top(openSet)].fScore;
  410ccf:	48 8b 95 58 fa ff ff 	mov    -0x5a8(%rbp),%rdx
  410cd6:	48 b8 a0 40 de ff ff 	movabs $0xffffffffffde40a0,%rax
  410cdd:	ff ff ff 
  410ce0:	48 8b bd f8 f9 ff ff 	mov    -0x608(%rbp),%rdi
  410ce7:	48 89 85 50 fa ff ff 	mov    %rax,-0x5b0(%rbp)
    { return __lhs.base() - __rhs.base(); }
  410cee:	49 bf b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%r15
  410cf5:	db b6 6d 
  410cf8:	48 01 d0             	add    %rdx,%rax
  410cfb:	ff d0                	callq  *%rax
  410cfd:	48 98                	cltq   
  410cff:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  410d06:	00 
  410d07:	48 29 c2             	sub    %rax,%rdx
  410d0a:	8b 44 93 0c          	mov    0xc(%rbx,%rdx,4),%eax
        if (bestFScore > oldBestFScore) {
  410d0e:	41 39 c6             	cmp    %eax,%r14d
        bestFScore = openSet[openset_top(openSet)].fScore;
  410d11:	89 85 38 fa ff ff    	mov    %eax,-0x5c8(%rbp)
  410d17:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
        if (bestFScore > oldBestFScore) {
  410d1e:	0f 8c f1 07 00 00    	jl     411515 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe85>
  410d24:	4c 8b 85 90 fa ff ff 	mov    -0x570(%rbp),%r8
			if (focalSet.empty()) 
  410d2b:	49 39 c0             	cmp    %rax,%r8
  410d2e:	0f 84 7f 0e 00 00    	je     411bb3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1523>
	AstarNode current = openSet[coi];
  410d34:	49 63 08             	movslq (%r8),%rcx
  410d37:	4c 8b 8d 70 fa ff ff 	mov    -0x590(%rbp),%r9
      { return *(this->_M_impl._M_start + __n); }
  410d3e:	48 8d 14 cd 00 00 00 	lea    0x0(,%rcx,8),%rdx
  410d45:	00 
  410d46:	48 29 ca             	sub    %rcx,%rdx
  410d49:	49 8d 14 91          	lea    (%r9,%rdx,4),%rdx
  410d4d:	44 8b 5a 0c          	mov    0xc(%rdx),%r11d
  410d51:	8b 5a 10             	mov    0x10(%rdx),%ebx
  410d54:	8b 72 14             	mov    0x14(%rdx),%esi
  410d57:	49 8d 50 04          	lea    0x4(%r8),%rdx
  410d5b:	89 df                	mov    %ebx,%edi
  410d5d:	44 89 d9             	mov    %r11d,%ecx
  410d60:	45 31 e4             	xor    %r12d,%r12d
  410d63:	48 29 d0             	sub    %rdx,%rax
  410d66:	89 f2                	mov    %esi,%edx
  410d68:	48 c1 e8 02          	shr    $0x2,%rax
  410d6c:	4c 8d 14 85 04 00 00 	lea    0x4(,%rax,4),%r10
  410d73:	00 
  410d74:	31 c0                	xor    %eax,%eax
  410d76:	eb 40                	jmp    410db8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x728>
  410d78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  410d7f:	00 
			if (current.focalHeuristic > n.focalHeuristic) {
  410d80:	7e 11                	jle    410d93 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x703>
				current_idx = std::distance(focalSet.begin(), iter); 
  410d82:	48 89 c3             	mov    %rax,%rbx
  410d85:	89 d6                	mov    %edx,%esi
  410d87:	41 89 cb             	mov    %ecx,%r11d
  410d8a:	48 c1 eb 02          	shr    $0x2,%rbx
  410d8e:	49 89 dc             	mov    %rbx,%r12
  410d91:	89 fb                	mov    %edi,%ebx
  410d93:	48 83 c0 04          	add    $0x4,%rax
	for (; iter != iterEnd; ++iter) {
  410d97:	49 39 c2             	cmp    %rax,%r10
  410d9a:	74 43                	je     410ddf <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x74f>
  410d9c:	49 63 0c 00          	movslq (%r8,%rax,1),%rcx
  410da0:	48 8d 14 cd 00 00 00 	lea    0x0(,%rcx,8),%rdx
  410da7:	00 
  410da8:	48 29 ca             	sub    %rcx,%rdx
  410dab:	49 8d 14 91          	lea    (%r9,%rdx,4),%rdx
  410daf:	8b 4a 0c             	mov    0xc(%rdx),%ecx
  410db2:	8b 7a 10             	mov    0x10(%rdx),%edi
  410db5:	8b 52 14             	mov    0x14(%rdx),%edx
		if (current.focalHeuristic != n.focalHeuristic) {
  410db8:	39 d6                	cmp    %edx,%esi
  410dba:	75 c4                	jne    410d80 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6f0>
		else if (current.fScore != n.fScore) {
  410dbc:	41 39 cb             	cmp    %ecx,%r11d
  410dbf:	0f 84 26 08 00 00    	je     4115eb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf5b>
			if (current.fScore > n.fScore) {
  410dc5:	7e cc                	jle    410d93 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x703>
				current_idx = std::distance(focalSet.begin(), iter); 
  410dc7:	48 89 c3             	mov    %rax,%rbx
  410dca:	48 83 c0 04          	add    $0x4,%rax
  410dce:	41 89 cb             	mov    %ecx,%r11d
  410dd1:	48 c1 eb 02          	shr    $0x2,%rbx
	for (; iter != iterEnd; ++iter) {
  410dd5:	49 39 c2             	cmp    %rax,%r10
				current_idx = std::distance(focalSet.begin(), iter); 
  410dd8:	49 89 dc             	mov    %rbx,%r12
  410ddb:	89 fb                	mov    %edi,%ebx
	for (; iter != iterEnd; ++iter) {
  410ddd:	75 bd                	jne    410d9c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x70c>
  410ddf:	49 63 dc             	movslq %r12d,%rbx
  410de2:	48 c1 e3 02          	shl    $0x2,%rbx
			AstarNode current = openSet[focalSet[focalset_top_index]];
  410de6:	49 63 14 18          	movslq (%r8,%rbx,1),%rdx
  410dea:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  410df1:	00 
  410df2:	48 29 d0             	sub    %rdx,%rax
  410df5:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
  410df9:	48 8b 10             	mov    (%rax),%rdx
  410dfc:	48 89 95 f0 fa ff ff 	mov    %rdx,-0x510(%rbp)
  410e03:	48 8b 50 08          	mov    0x8(%rax),%rdx
  410e07:	48 89 95 f8 fa ff ff 	mov    %rdx,-0x508(%rbp)
  410e0e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  410e12:	48 89 95 00 fb ff ff 	mov    %rdx,-0x500(%rbp)
  410e19:	8b 40 18             	mov    0x18(%rax),%eax
			if (current.stat == 1) {
  410e1c:	83 f8 01             	cmp    $0x1,%eax
			AstarNode current = openSet[focalSet[focalset_top_index]];
  410e1f:	89 85 08 fb ff ff    	mov    %eax,-0x4f8(%rbp)
			if (current.stat == 1) {
  410e25:	0f 84 f9 0c 00 00    	je     411b24 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1494>
      { return *(this->_M_impl._M_start + __n); }
  410e2b:	48 8b bd 08 fa ff ff 	mov    -0x5f8(%rbp),%rdi
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  410e32:	44 8b bd f4 fa ff ff 	mov    -0x50c(%rbp),%r15d
  410e39:	48 8b 07             	mov    (%rdi),%rax
  410e3c:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  410e40:	48 8b 00             	mov    (%rax),%rax
  410e43:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  410e47:	44 3b 38             	cmp    (%rax),%r15d
  410e4a:	0f 84 59 08 00 00    	je     4116a9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1019>
      { return *(this->_M_impl._M_start + __n); }
  410e50:	48 03 9d 90 fa ff ff 	add    -0x570(%rbp),%rbx
			openSet[focalSet[focalset_top_index]].stat = 1;
  410e57:	48 63 13             	movslq (%rbx),%rdx
      { return __normal_iterator(_M_current + __n); }
  410e5a:	48 8d 73 04          	lea    0x4(%rbx),%rsi
  410e5e:	48 89 df             	mov    %rbx,%rdi
  410e61:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  410e68:	00 
  410e69:	48 29 d0             	sub    %rdx,%rax
  410e6c:	48 8b 95 70 fa ff ff 	mov    -0x590(%rbp),%rdx
  410e73:	48 8d 04 82          	lea    (%rdx,%rax,4),%rax
  410e77:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%rax)
      : _M_current(__i) { }
  410e7e:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
  410e85:	48 39 f0             	cmp    %rsi,%rax
  410e88:	74 16                	je     410ea0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x810>
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
  410e8a:	48 89 c2             	mov    %rax,%rdx
  410e8d:	48 29 f2             	sub    %rsi,%rdx
  410e90:	48 89 d1             	mov    %rdx,%rcx
  410e93:	48 c1 f9 02          	sar    $0x2,%rcx
	  if (_Num)
  410e97:	48 85 c9             	test   %rcx,%rcx
  410e9a:	0f 85 bf 09 00 00    	jne    41185f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11cf>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
  410ea0:	48 83 e8 04          	sub    $0x4,%rax
  410ea4:	ba b9 79 37 9e       	mov    $0x9e3779b9,%edx
  410ea9:	4c 8b b5 18 fb ff ff 	mov    -0x4e8(%rbp),%r14
  410eb0:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
  410eb7:	48 63 85 f0 fa ff ff 	movslq -0x510(%rbp),%rax
      __node_base* __prev_n = _M_find_before_node(__bkt, __k, __code);
  410ebe:	4c 8d ad f0 fa ff ff 	lea    -0x510(%rbp),%r13
  410ec5:	4c 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%r8
  410ecc:	48 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%rdi
  410ed3:	49 89 c4             	mov    %rax,%r12
  410ed6:	48 01 d0             	add    %rdx,%rax
  410ed9:	48 89 c3             	mov    %rax,%rbx
  410edc:	48 89 c1             	mov    %rax,%rcx
  410edf:	48 c1 e9 02          	shr    $0x2,%rcx
  410ee3:	48 c1 e3 06          	shl    $0x6,%rbx
  410ee7:	48 01 cb             	add    %rcx,%rbx
  410eea:	49 63 cf             	movslq %r15d,%rcx
  410eed:	48 01 d3             	add    %rdx,%rbx
  410ef0:	48 01 cb             	add    %rcx,%rbx
  410ef3:	48 63 8d f8 fa ff ff 	movslq -0x508(%rbp),%rcx
  410efa:	48 31 c3             	xor    %rax,%rbx
  410efd:	48 89 d8             	mov    %rbx,%rax
  410f00:	48 c1 e0 06          	shl    $0x6,%rax
  410f04:	48 01 ca             	add    %rcx,%rdx
  410f07:	89 8d 10 fa ff ff    	mov    %ecx,-0x5f0(%rbp)
  410f0d:	48 01 d0             	add    %rdx,%rax
  410f10:	48 89 da             	mov    %rbx,%rdx
  410f13:	48 c1 ea 02          	shr    $0x2,%rdx
  410f17:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  410f1a:	31 d2                	xor    %edx,%edx
  410f1c:	48 31 c3             	xor    %rax,%rbx
  410f1f:	48 89 d8             	mov    %rbx,%rax
  410f22:	48 89 d9             	mov    %rbx,%rcx
  410f25:	49 f7 f6             	div    %r14
  410f28:	48 b8 f0 0c df ff ff 	movabs $0xffffffffffdf0cf0,%rax
  410f2f:	ff ff ff 
  410f32:	48 89 85 40 fa ff ff 	mov    %rax,-0x5c0(%rbp)
  410f39:	4c 01 c0             	add    %r8,%rax
  410f3c:	49 89 d1             	mov    %rdx,%r9
  410f3f:	4c 89 ea             	mov    %r13,%rdx
  410f42:	4c 89 ce             	mov    %r9,%rsi
  410f45:	4c 89 8d 50 fa ff ff 	mov    %r9,-0x5b0(%rbp)
  410f4c:	ff d0                	callq  *%rax
      if (!__prev_n)
  410f4e:	48 85 c0             	test   %rax,%rax
      __node_base* __prev_n = _M_find_before_node(__bkt, __k, __code);
  410f51:	48 89 c6             	mov    %rax,%rsi
      if (!__prev_n)
  410f54:	44 8b 85 10 fa ff ff 	mov    -0x5f0(%rbp),%r8d
  410f5b:	0f 84 b9 00 00 00    	je     41101a <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x98a>
      if (__prev_n == _M_buckets[__bkt])
  410f61:	4c 8b 85 10 fb ff ff 	mov    -0x4f0(%rbp),%r8
  410f68:	4c 8b 8d 50 fa ff ff 	mov    -0x5b0(%rbp),%r9
      __node_type* __n = static_cast<__node_type*>(__prev_n->_M_nxt);
  410f6f:	48 8b 38             	mov    (%rax),%rdi
      if (__prev_n == _M_buckets[__bkt])
  410f72:	4f 8d 14 c8          	lea    (%r8,%r9,8),%r10
	   __n->_M_nxt ? _M_bucket_index(__n->_M_next()) : 0);
  410f76:	48 8b 0f             	mov    (%rdi),%rcx
      if (__prev_n == _M_buckets[__bkt])
  410f79:	49 3b 02             	cmp    (%r10),%rax
  410f7c:	0f 84 f0 0b 00 00    	je     411b72 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x14e2>
      else if (__n->_M_nxt)
  410f82:	48 85 c9             	test   %rcx,%rcx
  410f85:	74 15                	je     410f9c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x90c>
  410f87:	48 8b 41 18          	mov    0x18(%rcx),%rax
  410f8b:	31 d2                	xor    %edx,%edx
  410f8d:	49 f7 f6             	div    %r14
	  if (__next_bkt != __bkt)
  410f90:	49 39 d1             	cmp    %rdx,%r9
  410f93:	74 07                	je     410f9c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x90c>
	    _M_buckets[__next_bkt] = __prev_n;
  410f95:	49 89 34 d0          	mov    %rsi,(%r8,%rdx,8)
  410f99:	48 8b 0f             	mov    (%rdi),%rcx
  410f9c:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  410fa3:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  410faa:	ff ff ff 
      __prev_n->_M_nxt = __n->_M_nxt;
  410fad:	48 89 0e             	mov    %rcx,(%rsi)
  410fb0:	49 89 c7             	mov    %rax,%r15
  410fb3:	48 01 c3             	add    %rax,%rbx
  410fb6:	ff d3                	callq  *%rbx
  410fb8:	48 63 85 f0 fa ff ff 	movslq -0x510(%rbp),%rax
  410fbf:	48 63 8d f4 fa ff ff 	movslq -0x50c(%rbp),%rcx
  410fc6:	ba b9 79 37 9e       	mov    $0x9e3779b9,%edx
      --_M_element_count;
  410fcb:	48 83 ad 28 fb ff ff 	subq   $0x1,-0x4d8(%rbp)
  410fd2:	01 
  410fd3:	49 89 c4             	mov    %rax,%r12
  410fd6:	48 01 d0             	add    %rdx,%rax
  410fd9:	49 89 cf             	mov    %rcx,%r15
  410fdc:	48 89 c3             	mov    %rax,%rbx
  410fdf:	48 01 d1             	add    %rdx,%rcx
  410fe2:	48 c1 e3 06          	shl    $0x6,%rbx
  410fe6:	48 01 cb             	add    %rcx,%rbx
  410fe9:	48 89 c1             	mov    %rax,%rcx
  410fec:	48 c1 e9 02          	shr    $0x2,%rcx
  410ff0:	48 01 cb             	add    %rcx,%rbx
  410ff3:	48 63 8d f8 fa ff ff 	movslq -0x508(%rbp),%rcx
  410ffa:	48 31 c3             	xor    %rax,%rbx
  410ffd:	48 89 d8             	mov    %rbx,%rax
  411000:	48 c1 e0 06          	shl    $0x6,%rax
  411004:	48 01 ca             	add    %rcx,%rdx
  411007:	49 89 c8             	mov    %rcx,%r8
  41100a:	48 01 d0             	add    %rdx,%rax
  41100d:	48 89 da             	mov    %rbx,%rdx
  411010:	48 c1 ea 02          	shr    $0x2,%rdx
  411014:	48 01 d0             	add    %rdx,%rax
  411017:	48 31 c3             	xor    %rax,%rbx
  41101a:	48 8b bd 58 fb ff ff 	mov    -0x4a8(%rbp),%rdi
  411021:	31 d2                	xor    %edx,%edx
  411023:	48 89 d8             	mov    %rbx,%rax
  411026:	48 f7 f7             	div    %rdi
      __node_base* __prev_p = _M_buckets[__n];
  411029:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
  411030:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  411034:	49 89 d1             	mov    %rdx,%r9
  411037:	4c 8d 34 d5 00 00 00 	lea    0x0(,%rdx,8),%r14
  41103e:	00 
      if (!__prev_p)
  41103f:	48 85 c0             	test   %rax,%rax
  411042:	74 2c                	je     411070 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9e0>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  411044:	48 8b 08             	mov    (%rax),%rcx
  411047:	48 8b 71 18          	mov    0x18(%rcx),%rsi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  41104b:	48 39 f3             	cmp    %rsi,%rbx
  41104e:	0f 84 74 05 00 00    	je     4115c8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf38>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  411054:	48 8b 01             	mov    (%rcx),%rax
  411057:	48 85 c0             	test   %rax,%rax
  41105a:	74 14                	je     411070 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9e0>
  41105c:	48 8b 70 18          	mov    0x18(%rax),%rsi
    { return __num % __den; }
  411060:	31 d2                	xor    %edx,%edx
  411062:	48 89 c1             	mov    %rax,%rcx
  411065:	48 89 f0             	mov    %rsi,%rax
  411068:	48 f7 f7             	div    %rdi
  41106b:	49 39 d1             	cmp    %rdx,%r9
  41106e:	74 db                	je     41104b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9bb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  411070:	4c 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%r8
  411077:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41107e:	ff ff ff 
  411081:	bf 20 00 00 00       	mov    $0x20,%edi
  411086:	4d 89 c7             	mov    %r8,%r15
  411089:	4c 01 c0             	add    %r8,%rax
  41108c:	ff d0                	callq  *%rax
  41108e:	49 89 c4             	mov    %rax,%r12
    _Hash_node_base() noexcept : _M_nxt() { }
  411091:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  411098:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41109f:	4c 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%r8
  4110a6:	b9 01 00 00 00       	mov    $0x1,%ecx
  4110ab:	48 8b 95 68 fb ff ff 	mov    -0x498(%rbp),%rdx
  4110b2:	48 8b b5 58 fb ff ff 	mov    -0x4a8(%rbp),%rsi
  4110b9:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  4110be:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  4110c4:	4d 89 c7             	mov    %r8,%r15
  4110c7:	41 89 44 24 10       	mov    %eax,0x10(%r12)
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  4110cc:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  4110d3:	48 89 85 68 fa ff ff 	mov    %rax,-0x598(%rbp)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  4110da:	48 8b 85 18 fa ff ff 	mov    -0x5e8(%rbp),%rax
  4110e1:	48 8d 78 20          	lea    0x20(%rax),%rdi
  4110e5:	48 b8 90 e8 dd ff ff 	movabs $0xffffffffffdde890,%rax
  4110ec:	ff ff ff 
  4110ef:	4c 01 c0             	add    %r8,%rax
  4110f2:	ff d0                	callq  *%rax
	  if (__do_rehash.first)
  4110f4:	84 c0                	test   %al,%al
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  4110f6:	48 89 d6             	mov    %rdx,%rsi
	  if (__do_rehash.first)
  4110f9:	74 38                	je     411133 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xaa3>
	      _M_rehash(__do_rehash.second, __saved_state);
  4110fb:	4c 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%r8
  411102:	48 b8 10 26 df ff ff 	movabs $0xffffffffffdf2610,%rax
  411109:	ff ff ff 
  41110c:	48 8d 95 68 fa ff ff 	lea    -0x598(%rbp),%rdx
  411113:	48 8b bd 18 fa ff ff 	mov    -0x5e8(%rbp),%rdi
  41111a:	4c 01 c0             	add    %r8,%rax
  41111d:	ff d0                	callq  *%rax
    { return __num % __den; }
  41111f:	48 89 d8             	mov    %rbx,%rax
  411122:	31 d2                	xor    %edx,%edx
  411124:	48 f7 b5 58 fb ff ff 	divq   -0x4a8(%rbp)
  41112b:	4c 8d 34 d5 00 00 00 	lea    0x0(,%rdx,8),%r14
  411132:	00 
      if (_M_buckets[__bkt])
  411133:	48 8b 8d 50 fb ff ff 	mov    -0x4b0(%rbp),%rcx
      { __n->_M_hash_code = __c; }
  41113a:	49 89 5c 24 18       	mov    %rbx,0x18(%r12)
  41113f:	49 01 ce             	add    %rcx,%r14
  411142:	49 8b 06             	mov    (%r14),%rax
  411145:	48 85 c0             	test   %rax,%rax
  411148:	0f 84 19 0b 00 00    	je     411c67 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x15d7>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  41114e:	48 8b 00             	mov    (%rax),%rax
  411151:	49 89 04 24          	mov    %rax,(%r12)
	  _M_buckets[__bkt]->_M_nxt = __node;
  411155:	49 8b 06             	mov    (%r14),%rax
  411158:	4c 89 20             	mov    %r12,(%rax)
	  ++_M_element_count;
  41115b:	48 83 85 68 fb ff ff 	addq   $0x1,-0x498(%rbp)
  411162:	01 
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
  411163:	48 8b 85 b0 fa ff ff 	mov    -0x550(%rbp),%rax

	bool isSolution(const State& s) { return m_env.isSolution(s, m_agentIdx, m_lastGoalConstraint); }

	void getNeighbors(const State& s,
			std::vector<Neighbor<State, Action, Cost> >& neighbors) {
		m_env.getNeighbors(s, neighbors, m_constraints);
  41116a:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  411171:	4c 89 ee             	mov    %r13,%rsi
  411174:	48 8b 95 c8 f9 ff ff 	mov    -0x638(%rbp),%rdx
  41117b:	48 89 85 b8 fa ff ff 	mov    %rax,-0x548(%rbp)
  411182:	48 8b 85 08 fa ff ff 	mov    -0x5f8(%rbp),%rax
  411189:	48 8b 48 10          	mov    0x10(%rax),%rcx
  41118d:	48 8b 38             	mov    (%rax),%rdi
  411190:	48 b8 c0 e2 de ff ff 	movabs $0xffffffffffdee2c0,%rax
  411197:	ff ff ff 
  41119a:	48 01 d8             	add    %rbx,%rax
  41119d:	ff d0                	callq  *%rax
  41119f:	48 8b 9d b0 fa ff ff 	mov    -0x550(%rbp),%rbx
  4111a6:	4c 8b a5 b8 fa ff ff 	mov    -0x548(%rbp),%r12
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  4111ad:	49 39 dc             	cmp    %rbx,%r12
  4111b0:	0f 84 01 03 00 00    	je     4114b7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe27>
	  return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
  4111b6:	48 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%rdi
  4111bd:	48 b8 30 54 de ff ff 	movabs $0xffffffffffde5430,%rax
  4111c4:	ff ff ff 
  4111c7:	48 01 f8             	add    %rdi,%rax
  4111ca:	48 89 85 f0 f9 ff ff 	mov    %rax,-0x610(%rbp)
      { ::operator delete(__p); }
  4111d1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4111d8:	ff ff ff 
  4111db:	48 01 f8             	add    %rdi,%rax
  4111de:	48 89 85 e0 f9 ff ff 	mov    %rax,-0x620(%rbp)
  4111e5:	e9 1b 02 00 00       	jmpq   411405 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xd75>
  4111ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  4111f0:	48 8b 36             	mov    (%rsi),%rsi
  4111f3:	48 85 f6             	test   %rsi,%rsi
  4111f6:	74 15                	je     41120d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb7d>
  4111f8:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
    { return __num % __den; }
  4111fc:	31 d2                	xor    %edx,%edx
  4111fe:	48 89 f8             	mov    %rdi,%rax
  411201:	49 f7 f2             	div    %r10
  411204:	49 39 d3             	cmp    %rdx,%r11
  411207:	0f 84 76 02 00 00    	je     411483 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xdf3>
  41120d:	48 89 c8             	mov    %rcx,%rax
  411210:	31 d2                	xor    %edx,%edx
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  411212:	4c 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%r8
  411219:	48 f7 b5 18 fb ff ff 	divq   -0x4e8(%rbp)
  411220:	48 8b 85 40 fa ff ff 	mov    -0x5c0(%rbp),%rax
  411227:	4c 89 8d 50 fa ff ff 	mov    %r9,-0x5b0(%rbp)
          Cost tentative_gScore = current.gScore + neighbor.cost;
  41122e:	44 8b 73 10          	mov    0x10(%rbx),%r14d
  411232:	48 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%rdi
  411239:	44 03 b5 00 fb ff ff 	add    -0x500(%rbp),%r14d
  411240:	4c 01 c0             	add    %r8,%rax
  411243:	48 89 d6             	mov    %rdx,%rsi
  411246:	48 89 da             	mov    %rbx,%rdx
  411249:	ff d0                	callq  *%rax
	if (__before_n)
  41124b:	48 85 c0             	test   %rax,%rax
  41124e:	4c 8b 8d 50 fa ff ff 	mov    -0x5b0(%rbp),%r9
  411255:	0f 84 a9 03 00 00    	je     411604 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf74>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  41125b:	48 8b 00             	mov    (%rax),%rax
      return __p ? iterator(__p) : end();
  41125e:	48 85 c0             	test   %rax,%rax
  411261:	0f 84 9d 03 00 00    	je     411604 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf74>
						int index = iter->second;
  411267:	48 63 48 14          	movslq 0x14(%rax),%rcx
      { return *(this->_M_impl._M_start + __n); }
  41126b:	48 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%rax
  411272:	00 
  411273:	89 8d d0 fb ff ff    	mov    %ecx,-0x430(%rbp)
  411279:	48 89 ca             	mov    %rcx,%rdx
  41127c:	48 29 c8             	sub    %rcx,%rax
  41127f:	48 8b 8d 70 fa ff ff 	mov    -0x590(%rbp),%rcx
  411286:	48 8d 04 81          	lea    (%rcx,%rax,4),%rax
            if (tentative_gScore >= n.gScore) {
  41128a:	8b 48 10             	mov    0x10(%rax),%ecx
  41128d:	41 39 ce             	cmp    %ecx,%r14d
  411290:	0f 8d 62 01 00 00    	jge    4113f8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xd68>
            if (n.fScore <= bestFScore * m_w &&
  411296:	66 0f ef c9          	pxor   %xmm1,%xmm1
            Cost last_fScore = n.fScore;
  41129a:	8b 70 0c             	mov    0xc(%rax),%esi
            Cost delta = last_gScore - tentative_gScore;
  41129d:	44 29 f1             	sub    %r14d,%ecx
            if (n.fScore <= bestFScore * m_w &&
  4112a0:	66 0f ef c0          	pxor   %xmm0,%xmm0
            n.gScore = tentative_gScore;
  4112a4:	44 89 70 10          	mov    %r14d,0x10(%rax)
            if (n.fScore <= bestFScore * m_w &&
  4112a8:	f3 0f 2a 8d 38 fa ff 	cvtsi2ssl -0x5c8(%rbp),%xmm1
  4112af:	ff 
            n.fScore -= delta;
  4112b0:	89 f7                	mov    %esi,%edi
  4112b2:	29 cf                	sub    %ecx,%edi
            if (n.fScore <= bestFScore * m_w &&
  4112b4:	f3 0f 2a c7          	cvtsi2ss %edi,%xmm0
            n.fScore -= delta;
  4112b8:	89 78 0c             	mov    %edi,0xc(%rax)
            if (n.fScore <= bestFScore * m_w &&
  4112bb:	f3 0f 59 8d 3c fa ff 	mulss  -0x5c4(%rbp),%xmm1
  4112c2:	ff 
  4112c3:	0f 2e c8             	ucomiss %xmm0,%xmm1
  4112c6:	72 11                	jb     4112d9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc49>
                last_fScore > bestFScore * m_w) {
  4112c8:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4112cc:	f3 0f 2a c6          	cvtsi2ss %esi,%xmm0
            if (n.fScore <= bestFScore * m_w &&
  4112d0:	0f 2e c1             	ucomiss %xmm1,%xmm0
  4112d3:	0f 87 20 08 00 00    	ja     411af9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1469>
  4112d9:	48 63 03             	movslq (%rbx),%rax
  4112dc:	48 63 4b 04          	movslq 0x4(%rbx),%rcx
  4112e0:	ba b9 79 37 9e       	mov    $0x9e3779b9,%edx
  4112e5:	48 8b b5 98 fb ff ff 	mov    -0x468(%rbp),%rsi
  4112ec:	49 89 c3             	mov    %rax,%r11
  4112ef:	48 01 d0             	add    %rdx,%rax
  4112f2:	41 89 cd             	mov    %ecx,%r13d
  4112f5:	49 89 c0             	mov    %rax,%r8
  4112f8:	48 01 d1             	add    %rdx,%rcx
  4112fb:	49 c1 e0 06          	shl    $0x6,%r8
  4112ff:	49 01 c8             	add    %rcx,%r8
  411302:	48 89 c1             	mov    %rax,%rcx
  411305:	48 c1 e9 02          	shr    $0x2,%rcx
  411309:	49 01 c8             	add    %rcx,%r8
  41130c:	48 63 4b 08          	movslq 0x8(%rbx),%rcx
  411310:	4c 31 c0             	xor    %r8,%rax
  411313:	49 89 c0             	mov    %rax,%r8
  411316:	49 c1 e0 06          	shl    $0x6,%r8
  41131a:	48 01 ca             	add    %rcx,%rdx
  41131d:	89 8d 04 fa ff ff    	mov    %ecx,-0x5fc(%rbp)
  411323:	49 01 d0             	add    %rdx,%r8
  411326:	48 89 c2             	mov    %rax,%rdx
  411329:	48 c1 ea 02          	shr    $0x2,%rdx
  41132d:	49 01 d0             	add    %rdx,%r8
  411330:	31 d2                	xor    %edx,%edx
  411332:	49 31 c0             	xor    %rax,%r8
  411335:	4c 89 c0             	mov    %r8,%rax
  411338:	48 f7 f6             	div    %rsi
      __node_base* __prev_p = _M_buckets[__n];
  41133b:	48 8b 85 90 fb ff ff 	mov    -0x470(%rbp),%rax
  411342:	48 89 85 50 fa ff ff 	mov    %rax,-0x5b0(%rbp)
  411349:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  41134d:	49 89 d2             	mov    %rdx,%r10
  411350:	4c 8b 38             	mov    (%rax),%r15
  411353:	48 89 85 10 fa ff ff 	mov    %rax,-0x5f0(%rbp)
      if (!__prev_p)
  41135a:	4d 85 ff             	test   %r15,%r15
  41135d:	74 32                	je     411391 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xd01>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  41135f:	49 8b 3f             	mov    (%r15),%rdi
  411362:	4d 89 f9             	mov    %r15,%r9
  411365:	48 8b 4f 30          	mov    0x30(%rdi),%rcx
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  411369:	49 39 c8             	cmp    %rcx,%r8
  41136c:	0f 84 e6 01 00 00    	je     411558 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xec8>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  411372:	48 8b 07             	mov    (%rdi),%rax
  411375:	48 85 c0             	test   %rax,%rax
  411378:	74 17                	je     411391 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xd01>
  41137a:	48 8b 48 30          	mov    0x30(%rax),%rcx
    { return __num % __den; }
  41137e:	31 d2                	xor    %edx,%edx
  411380:	49 89 f9             	mov    %rdi,%r9
  411383:	48 89 c7             	mov    %rax,%rdi
  411386:	48 89 c8             	mov    %rcx,%rax
  411389:	48 f7 f6             	div    %rsi
  41138c:	49 39 d2             	cmp    %rdx,%r10
  41138f:	74 d8                	je     411369 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcd9>
  411391:	8b 43 0c             	mov    0xc(%rbx),%eax
  411394:	48 8b 0b             	mov    (%rbx),%rcx
      : _M_head_impl(__h) { }
  411397:	8b 53 10             	mov    0x10(%rbx),%edx
	  return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
  41139a:	48 8b b5 30 fa ff ff 	mov    -0x5d0(%rbp),%rsi
  4113a1:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  4113a8:	48 89 8d d0 fb ff ff 	mov    %rcx,-0x430(%rbp)
  4113af:	8b 4b 08             	mov    0x8(%rbx),%ecx
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  4113b2:	89 85 e4 fb ff ff    	mov    %eax,-0x41c(%rbp)
  4113b8:	8b 85 f0 fa ff ff    	mov    -0x510(%rbp),%eax
  4113be:	44 89 b5 dc fb ff ff 	mov    %r14d,-0x424(%rbp)
  4113c5:	89 95 e0 fb ff ff    	mov    %edx,-0x420(%rbp)
  4113cb:	89 8d d8 fb ff ff    	mov    %ecx,-0x428(%rbp)
  4113d1:	89 85 e8 fb ff ff    	mov    %eax,-0x418(%rbp)
  4113d7:	8b 85 f4 fa ff ff    	mov    -0x50c(%rbp),%eax
  4113dd:	89 85 ec fb ff ff    	mov    %eax,-0x414(%rbp)
  4113e3:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  4113e9:	89 85 f0 fb ff ff    	mov    %eax,-0x410(%rbp)
  4113ef:	48 8b 85 f0 f9 ff ff 	mov    -0x610(%rbp),%rax
  4113f6:	ff d0                	callq  *%rax
  4113f8:	48 83 c3 14          	add    $0x14,%rbx
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  4113fc:	49 39 dc             	cmp    %rbx,%r12
  4113ff:	0f 84 b2 00 00 00    	je     4114b7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe27>
  411405:	4c 63 0b             	movslq (%rbx),%r9
  411408:	be b9 79 37 9e       	mov    $0x9e3779b9,%esi
  41140d:	48 63 4b 04          	movslq 0x4(%rbx),%rcx
  411411:	4c 8b 95 58 fb ff ff 	mov    -0x4a8(%rbp),%r10
  411418:	49 8d 04 31          	lea    (%r9,%rsi,1),%rax
  41141c:	49 89 cf             	mov    %rcx,%r15
  41141f:	48 01 f1             	add    %rsi,%rcx
  411422:	4d 89 ce             	mov    %r9,%r14
  411425:	48 89 c2             	mov    %rax,%rdx
  411428:	48 c1 e2 06          	shl    $0x6,%rdx
  41142c:	48 01 ca             	add    %rcx,%rdx
  41142f:	48 89 c1             	mov    %rax,%rcx
  411432:	48 c1 e9 02          	shr    $0x2,%rcx
  411436:	48 01 d1             	add    %rdx,%rcx
  411439:	48 63 53 08          	movslq 0x8(%rbx),%rdx
  41143d:	48 31 c1             	xor    %rax,%rcx
  411440:	48 89 c8             	mov    %rcx,%rax
  411443:	48 c1 e0 06          	shl    $0x6,%rax
  411447:	49 89 d5             	mov    %rdx,%r13
  41144a:	48 01 f2             	add    %rsi,%rdx
  41144d:	48 01 d0             	add    %rdx,%rax
  411450:	48 89 ca             	mov    %rcx,%rdx
  411453:	48 c1 ea 02          	shr    $0x2,%rdx
  411457:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  41145a:	31 d2                	xor    %edx,%edx
  41145c:	48 31 c1             	xor    %rax,%rcx
  41145f:	48 89 c8             	mov    %rcx,%rax
  411462:	49 f7 f2             	div    %r10
      __node_base* __prev_p = _M_buckets[__n];
  411465:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
  41146c:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  411470:	49 89 d3             	mov    %rdx,%r11
      if (!__prev_p)
  411473:	48 85 c0             	test   %rax,%rax
  411476:	0f 84 91 fd ff ff    	je     41120d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb7d>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  41147c:	48 8b 30             	mov    (%rax),%rsi
  41147f:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  411483:	48 39 f9             	cmp    %rdi,%rcx
  411486:	0f 85 64 fd ff ff    	jne    4111f0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb60>
    return time == s.time && x == s.x && y == s.y;
  41148c:	44 3b 76 08          	cmp    0x8(%rsi),%r14d
  411490:	0f 85 5a fd ff ff    	jne    4111f0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb60>
  411496:	44 3b 7e 0c          	cmp    0xc(%rsi),%r15d
  41149a:	0f 85 50 fd ff ff    	jne    4111f0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb60>
  4114a0:	44 3b 6e 10          	cmp    0x10(%rsi),%r13d
  4114a4:	0f 85 46 fd ff ff    	jne    4111f0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb60>
  4114aa:	48 83 c3 14          	add    $0x14,%rbx
  4114ae:	49 39 dc             	cmp    %rbx,%r12
  4114b1:	0f 85 4e ff ff ff    	jne    411405 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xd75>
  4114b7:	48 8b 9d 70 fa ff ff 	mov    -0x590(%rbp),%rbx
        bestFScore = openSet[openset_top(openSet)].fScore;
  4114be:	44 8b b5 38 fa ff ff 	mov    -0x5c8(%rbp),%r14d
		while (!openset_is_allclosed(openSet)) {
  4114c5:	e9 67 f5 ff ff       	jmpq   410a31 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3a1>
    { return __lhs.base() - __rhs.base(); }
  4114ca:	48 89 da             	mov    %rbx,%rdx
  4114cd:	48 2b 95 70 fa ff ff 	sub    -0x590(%rbp),%rdx
  4114d4:	48 c1 fa 02          	sar    $0x2,%rdx
  4114d8:	49 0f af d7          	imul   %r15,%rdx
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4114dc:	48 39 85 a0 fa ff ff 	cmp    %rax,-0x560(%rbp)
							focalSet.push_back(std::distance(openSet.begin(), iter));
  4114e3:	89 95 d0 fb ff ff    	mov    %edx,-0x430(%rbp)
  4114e9:	0f 84 32 07 00 00    	je     411c21 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1591>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  4114ef:	48 85 c0             	test   %rax,%rax
  4114f2:	74 02                	je     4114f6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe66>
  4114f4:	89 10                	mov    %edx,(%rax)
	    ++this->_M_impl._M_finish;
  4114f6:	48 83 c0 04          	add    $0x4,%rax
  4114fa:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
  411501:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	++_M_current;
  411508:	48 83 c3 1c          	add    $0x1c,%rbx
          for (; iter != iterEnd; ++iter) {
  41150c:	49 39 dc             	cmp    %rbx,%r12
  41150f:	0f 84 0f f8 ff ff    	je     410d24 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x694>
						if (iter->stat == 1)
  411515:	83 7b 18 01          	cmpl   $0x1,0x18(%rbx)
  411519:	74 ed                	je     411508 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe78>
            if (val > oldBestFScore * m_w && val <= bestFScore * m_w) {
  41151b:	66 0f ef c0          	pxor   %xmm0,%xmm0
  41151f:	f3 0f 10 95 3c fa ff 	movss  -0x5c4(%rbp),%xmm2
  411526:	ff 
  411527:	66 0f ef c9          	pxor   %xmm1,%xmm1
  41152b:	f3 41 0f 2a c6       	cvtsi2ss %r14d,%xmm0
  411530:	f3 0f 2a 4b 0c       	cvtsi2ssl 0xc(%rbx),%xmm1
  411535:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
  411539:	0f 2e c8             	ucomiss %xmm0,%xmm1
  41153c:	76 ca                	jbe    411508 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe78>
  41153e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  411542:	f3 0f 2a 85 38 fa ff 	cvtsi2ssl -0x5c8(%rbp),%xmm0
  411549:	ff 
  41154a:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
  41154e:	0f 2e c1             	ucomiss %xmm1,%xmm0
  411551:	72 b5                	jb     411508 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe78>
  411553:	e9 72 ff ff ff       	jmpq   4114ca <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe3a>
  411558:	44 3b 5f 08          	cmp    0x8(%rdi),%r11d
  41155c:	0f 85 10 fe ff ff    	jne    411372 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xce2>
  411562:	44 3b 6f 0c          	cmp    0xc(%rdi),%r13d
  411566:	0f 85 06 fe ff ff    	jne    411372 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xce2>
  41156c:	8b 85 04 fa ff ff    	mov    -0x5fc(%rbp),%eax
  411572:	3b 47 10             	cmp    0x10(%rdi),%eax
  411575:	0f 85 f7 fd ff ff    	jne    411372 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xce2>
      if (__prev_n == _M_buckets[__bkt])
  41157b:	4d 39 cf             	cmp    %r9,%r15
	   __n->_M_nxt ? _M_bucket_index(__n->_M_next()) : 0);
  41157e:	48 8b 0f             	mov    (%rdi),%rcx
      if (__prev_n == _M_buckets[__bkt])
  411581:	0f 84 18 05 00 00    	je     411a9f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x140f>
      else if (__n->_M_nxt)
  411587:	48 85 c9             	test   %rcx,%rcx
  41158a:	74 1c                	je     4115a8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf18>
    { return __num % __den; }
  41158c:	48 8b 41 30          	mov    0x30(%rcx),%rax
  411590:	31 d2                	xor    %edx,%edx
  411592:	48 f7 f6             	div    %rsi
	  if (__next_bkt != __bkt)
  411595:	49 39 d2             	cmp    %rdx,%r10
  411598:	74 0e                	je     4115a8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf18>
	    _M_buckets[__next_bkt] = __prev_n;
  41159a:	48 8b 85 50 fa ff ff 	mov    -0x5b0(%rbp),%rax
  4115a1:	4c 89 0c d0          	mov    %r9,(%rax,%rdx,8)
  4115a5:	48 8b 0f             	mov    (%rdi),%rcx
      __prev_n->_M_nxt = __n->_M_nxt;
  4115a8:	49 89 09             	mov    %rcx,(%r9)
      { ::operator delete(__p); }
  4115ab:	4c 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%r15
  4115b2:	48 8b 85 e0 f9 ff ff 	mov    -0x620(%rbp),%rax
  4115b9:	ff d0                	callq  *%rax
      --_M_element_count;
  4115bb:	48 83 ad a8 fb ff ff 	subq   $0x1,-0x458(%rbp)
  4115c2:	01 
  4115c3:	e9 c9 fd ff ff       	jmpq   411391 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xd01>
  4115c8:	44 39 61 08          	cmp    %r12d,0x8(%rcx)
  4115cc:	0f 85 82 fa ff ff    	jne    411054 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9c4>
  4115d2:	44 39 79 0c          	cmp    %r15d,0xc(%rcx)
  4115d6:	0f 85 78 fa ff ff    	jne    411054 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9c4>
	  if (this->_M_equals(__k, __code, __p))
  4115dc:	44 39 41 10          	cmp    %r8d,0x10(%rcx)
  4115e0:	0f 85 6e fa ff ff    	jne    411054 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9c4>
  4115e6:	e9 78 fb ff ff       	jmpq   411163 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xad3>
			if (current.gScore < n.gScore) {
  4115eb:	39 fb                	cmp    %edi,%ebx
  4115ed:	0f 8d a0 f7 ff ff    	jge    410d93 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x703>
				current_idx = std::distance(focalSet.begin(), iter); 
  4115f3:	48 89 c3             	mov    %rax,%rbx
  4115f6:	48 c1 eb 02          	shr    $0x2,%rbx
  4115fa:	49 89 dc             	mov    %rbx,%r12
  4115fd:	89 fb                	mov    %edi,%ebx
  4115ff:	e9 8f f7 ff ff       	jmpq   410d93 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x703>
  411604:	48 8b bd 08 fa ff ff 	mov    -0x5f8(%rbp),%rdi
  41160b:	4d 89 c8             	mov    %r9,%r8
	int numConflicts = 0;
  41160e:	45 31 db             	xor    %r11d,%r11d
  411611:	49 c1 e0 04          	shl    $0x4,%r8
  411615:	48 8b 07             	mov    (%rdi),%rax
  411618:	48 8b 77 08          	mov    0x8(%rdi),%rsi
  41161c:	48 8b 00             	mov    (%rax),%rax
  41161f:	48 8d 04 f0          	lea    (%rax,%rsi,8),%rax
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  411623:	8b 10                	mov    (%rax),%edx
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  411625:	8b 40 04             	mov    0x4(%rax),%eax
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  411628:	89 95 04 fa ff ff    	mov    %edx,-0x5fc(%rbp)
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  41162e:	89 85 00 fa ff ff    	mov    %eax,-0x600(%rbp)
  411634:	48 8b 57 20          	mov    0x20(%rdi),%rdx
                current.focalHeuristic +
  411638:	8b 85 04 fb ff ff    	mov    -0x4fc(%rbp),%eax
  41163e:	48 89 d1             	mov    %rdx,%rcx
  411641:	89 85 50 fa ff ff    	mov    %eax,-0x5b0(%rbp)
	for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  411647:	31 c0                	xor    %eax,%eax
  411649:	eb 15                	jmp    411660 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfd0>
  41164b:	48 83 c0 01          	add    $0x1,%rax
  41164f:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
  411656:	48 83 f8 14          	cmp    $0x14,%rax
  41165a:	0f 84 2b 02 00 00    	je     41188b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11fb>
		if (i != m_agentIdx && solution[i].states_size > 0) {
  411660:	48 39 c6             	cmp    %rax,%rsi
  411663:	74 e6                	je     41164b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfbb>
  411665:	48 8b b9 00 04 00 00 	mov    0x400(%rcx),%rdi
  41166c:	48 85 ff             	test   %rdi,%rdi
  41166f:	74 da                	je     41164b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfbb>
	if (t < solution[agentIdx].states_size) {
  411671:	49 39 f9             	cmp    %rdi,%r9
  411674:	72 27                	jb     41169d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x100d>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  411676:	48 83 ef 01          	sub    $0x1,%rdi
  41167a:	48 c1 e7 04          	shl    $0x4,%rdi
  41167e:	48 01 cf             	add    %rcx,%rdi
  411681:	44 8b 57 04          	mov    0x4(%rdi),%r10d
  411685:	8b 7f 08             	mov    0x8(%rdi),%edi
  bool equalExceptTime(const State& s) const { return x == s.x && y == s.y; }
  411688:	45 39 d7             	cmp    %r10d,%r15d
  41168b:	75 be                	jne    41164b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfbb>
				++numConflicts;
  41168d:	41 39 fd             	cmp    %edi,%r13d
  411690:	40 0f 94 c7          	sete   %dil
  411694:	40 0f b6 ff          	movzbl %dil,%edi
  411698:	41 01 fb             	add    %edi,%r11d
  41169b:	eb ae                	jmp    41164b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfbb>
		return solution[agentIdx].states[t].state;
  41169d:	46 8b 54 01 04       	mov    0x4(%rcx,%r8,1),%r10d
  4116a2:	42 8b 7c 01 08       	mov    0x8(%rcx,%r8,1),%edi
  4116a7:	eb df                	jmp    411688 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xff8>
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  4116a9:	8b 40 04             	mov    0x4(%rax),%eax
  4116ac:	39 85 f8 fa ff ff    	cmp    %eax,-0x508(%rbp)
  4116b2:	0f 85 98 f7 ff ff    	jne    410e50 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x7c0>
  4116b8:	48 89 f8             	mov    %rdi,%rax
  4116bb:	8b bd f0 fa ff ff    	mov    -0x510(%rbp),%edi
  4116c1:	39 78 18             	cmp    %edi,0x18(%rax)
  4116c4:	0f 8d 86 f7 ff ff    	jge    410e50 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x7c0>
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
      { return _M_h.find(__x); }
  4116ca:	4c 8b ad 58 fa ff ff 	mov    -0x5a8(%rbp),%r13
				solution.states_size = 0;
  4116d1:	4c 8b bd 28 fa ff ff 	mov    -0x5d8(%rbp),%r15
  4116d8:	48 b8 50 0c df ff ff 	movabs $0xffffffffffdf0c50,%rax
  4116df:	ff ff ff 
  4116e2:	48 8d b5 f0 fa ff ff 	lea    -0x510(%rbp),%rsi
  4116e9:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  4116f0:	4c 89 eb             	mov    %r13,%rbx
  4116f3:	49 c7 87 00 04 00 00 	movq   $0x0,0x400(%r15)
  4116fa:	00 00 00 00 
				solution.actions_size = 0;
  4116fe:	49 c7 87 08 06 00 00 	movq   $0x0,0x608(%r15)
  411705:	00 00 00 00 
  411709:	48 01 c3             	add    %rax,%rbx
  41170c:	ff d3                	callq  *%rbx
        while (iter != cameFrom.end()) {
  41170e:	48 85 c0             	test   %rax,%rax
  411711:	0f 84 4c 09 00 00    	je     412063 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x19d3>
  411717:	49 89 c6             	mov    %rax,%r14
  41171a:	48 b8 58 7e df ff ff 	movabs $0xffffffffffdf7e58,%rax
  411721:	ff ff ff 
  411724:	49 bc 90 7e df ff ff 	movabs $0xffffffffffdf7e90,%r12
  41172b:	ff ff ff 
  41172e:	4d 8d 6c 05 00       	lea    0x0(%r13,%rax,1),%r13
  411733:	4c 89 ad 40 fa ff ff 	mov    %r13,-0x5c0(%rbp)
  41173a:	49 89 dd             	mov    %rbx,%r13
  41173d:	4c 89 fb             	mov    %r15,%rbx
  411740:	eb 6d                	jmp    4117af <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x111f>
  411742:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  411748:	f3 41 0f 6f 46 08    	movdqu 0x8(%r14),%xmm0
  41174e:	4c 89 c8             	mov    %r9,%rax
  411751:	48 c1 e0 04          	shl    $0x4,%rax
			states_size++;
  411755:	49 83 c1 01          	add    $0x1,%r9
			states[states_size] = s;
  411759:	0f 11 04 03          	movups %xmm0,(%rbx,%rax,1)
			states_size++;
  41175d:	4c 89 8b 00 04 00 00 	mov    %r9,0x400(%rbx)
			swarm::info("[ERROR] PlanResult add StateCost : states_size: %d", states_size);
			}
	}

	void add(ActionCost a) {
		if (actions_size < ACTION_SIZE) {
  411764:	4c 8b 8b 08 06 00 00 	mov    0x608(%rbx),%r9
  41176b:	49 83 f9 3f          	cmp    $0x3f,%r9
  41176f:	0f 87 a0 00 00 00    	ja     411815 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1185>
					solution.add(
  411775:	41 8b 56 18          	mov    0x18(%r14),%edx
  411779:	41 8b 4e 1c          	mov    0x1c(%r14),%ecx
			actions[actions_size] = a;
  41177d:	4a 8d 84 cb 08 04 00 	lea    0x408(%rbx,%r9,8),%rax
  411784:	00 
			actions_size++;
  411785:	49 83 c1 01          	add    $0x1,%r9
			actions[actions_size] = a;
  411789:	89 08                	mov    %ecx,(%rax)
  41178b:	89 50 04             	mov    %edx,0x4(%rax)
			actions_size++;
  41178e:	4c 89 8b 08 06 00 00 	mov    %r9,0x608(%rbx)
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  411795:	49 8d 76 20          	lea    0x20(%r14),%rsi
  411799:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  4117a0:	41 ff d5             	callq  *%r13
        while (iter != cameFrom.end()) {
  4117a3:	48 85 c0             	test   %rax,%rax
  4117a6:	0f 84 b7 08 00 00    	je     412063 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x19d3>
  4117ac:	49 89 c6             	mov    %rax,%r14
		if (states_size < STATE_SIZE) {
  4117af:	4c 8b 8b 00 04 00 00 	mov    0x400(%rbx),%r9
  4117b6:	49 83 f9 3f          	cmp    $0x3f,%r9
  4117ba:	76 8c                	jbe    411748 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10b8>
  4117bc:	4c 8b 95 58 fa ff ff 	mov    -0x5a8(%rbp),%r10
  4117c3:	49 bb b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r11
  4117ca:	ff ff ff 
  4117cd:	4c 8b 85 40 fa ff ff 	mov    -0x5c0(%rbp),%r8
  4117d4:	b9 00 04 00 00       	mov    $0x400,%ecx
  4117d9:	ba 01 00 00 00       	mov    $0x1,%edx
  4117de:	be ff 03 00 00       	mov    $0x3ff,%esi
  4117e3:	48 8b bd 30 fa ff ff 	mov    -0x5d0(%rbp),%rdi
  4117ea:	31 c0                	xor    %eax,%eax
  4117ec:	4d 89 d7             	mov    %r10,%r15
  4117ef:	4d 01 d3             	add    %r10,%r11
  4117f2:	41 ff d3             	callq  *%r11
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4117f5:	b9 05 04 00 00       	mov    $0x405,%ecx
  4117fa:	48 8b bd 30 fa ff ff 	mov    -0x5d0(%rbp),%rdi
  411801:	48 87 c9             	xchg   %rcx,%rcx
		if (actions_size < ACTION_SIZE) {
  411804:	4c 8b 8b 08 06 00 00 	mov    0x608(%rbx),%r9
  41180b:	49 83 f9 3f          	cmp    $0x3f,%r9
  41180f:	0f 86 60 ff ff ff    	jbe    411775 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10e5>
  411815:	4c 8b 95 58 fa ff ff 	mov    -0x5a8(%rbp),%r10
  41181c:	49 bb b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r11
  411823:	ff ff ff 
  411826:	b9 00 04 00 00       	mov    $0x400,%ecx
  41182b:	ba 01 00 00 00       	mov    $0x1,%edx
  411830:	be ff 03 00 00       	mov    $0x3ff,%esi
  411835:	48 8b bd 30 fa ff ff 	mov    -0x5d0(%rbp),%rdi
  41183c:	31 c0                	xor    %eax,%eax
  41183e:	4f 8d 04 22          	lea    (%r10,%r12,1),%r8
  411842:	4d 89 d7             	mov    %r10,%r15
  411845:	4d 01 d3             	add    %r10,%r11
  411848:	41 ff d3             	callq  *%r11
  41184b:	b9 05 04 00 00       	mov    $0x405,%ecx
  411850:	48 8b bd 30 fa ff ff 	mov    -0x5d0(%rbp),%rdi
  411857:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  41185a:	e9 36 ff ff ff       	jmpq   411795 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1105>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  41185f:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  411866:	48 b8 80 e9 dd ff ff 	movabs $0xffffffffffdde980,%rax
  41186d:	ff ff ff 
  411870:	49 89 df             	mov    %rbx,%r15
  411873:	48 01 d8             	add    %rbx,%rax
  411876:	ff d0                	callq  *%rax
  411878:	44 8b bd f4 fa ff ff 	mov    -0x50c(%rbp),%r15d
  41187f:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  411886:	e9 15 f6 ff ff       	jmpq   410ea0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x810>
                current.focalHeuristic +
  41188b:	44 03 9d 50 fa ff ff 	add    -0x5b0(%rbp),%r11d
    for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  411892:	31 c0                	xor    %eax,%eax
  411894:	44 89 9d 10 fa ff ff 	mov    %r11d,-0x5f0(%rbp)
    int numConflicts = 0;
  41189b:	45 31 db             	xor    %r11d,%r11d
  41189e:	eb 15                	jmp    4118b5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1225>
    for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  4118a0:	48 83 c0 01          	add    $0x1,%rax
  4118a4:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
  4118ab:	48 83 f8 14          	cmp    $0x14,%rax
  4118af:	0f 84 80 00 00 00    	je     411935 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x12a5>
      if (i != m_agentIdx && solution[i].states_size > 0) {
  4118b5:	48 39 c6             	cmp    %rax,%rsi
  4118b8:	74 e6                	je     4118a0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1210>
  4118ba:	48 8b 8a 00 04 00 00 	mov    0x400(%rdx),%rcx
  4118c1:	48 85 c9             	test   %rcx,%rcx
  4118c4:	74 da                	je     4118a0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1210>
        State s2a = getState(i, solution, s1a.time);
  4118c6:	48 63 bd f0 fa ff ff 	movslq -0x510(%rbp),%rdi
	if (t < solution[agentIdx].states_size) {
  4118cd:	48 39 f9             	cmp    %rdi,%rcx
  4118d0:	77 04                	ja     4118d6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1246>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  4118d2:	48 8d 79 ff          	lea    -0x1(%rcx),%rdi
  4118d6:	48 c1 e7 04          	shl    $0x4,%rdi
  4118da:	48 01 d7             	add    %rdx,%rdi
	if (t < solution[agentIdx].states_size) {
  4118dd:	49 39 c9             	cmp    %rcx,%r9
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  4118e0:	44 8b 57 04          	mov    0x4(%rdi),%r10d
  4118e4:	8b 7f 08             	mov    0x8(%rdi),%edi
  4118e7:	89 bd 50 fa ff ff    	mov    %edi,-0x5b0(%rbp)
	if (t < solution[agentIdx].states_size) {
  4118ed:	72 3a                	jb     411929 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1299>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  4118ef:	48 83 e9 01          	sub    $0x1,%rcx
  4118f3:	48 c1 e1 04          	shl    $0x4,%rcx
  4118f7:	48 01 d1             	add    %rdx,%rcx
  4118fa:	8b 79 04             	mov    0x4(%rcx),%edi
  4118fd:	8b 49 08             	mov    0x8(%rcx),%ecx
  411900:	39 bd f4 fa ff ff    	cmp    %edi,-0x50c(%rbp)
  411906:	75 98                	jne    4118a0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1210>
  411908:	39 8d f8 fa ff ff    	cmp    %ecx,-0x508(%rbp)
  41190e:	75 90                	jne    4118a0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1210>
  411910:	45 39 d7             	cmp    %r10d,%r15d
  411913:	75 8b                	jne    4118a0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1210>
          ++numConflicts;
  411915:	31 c9                	xor    %ecx,%ecx
  411917:	44 3b ad 50 fa ff ff 	cmp    -0x5b0(%rbp),%r13d
  41191e:	0f 94 c1             	sete   %cl
  411921:	41 01 cb             	add    %ecx,%r11d
  411924:	e9 77 ff ff ff       	jmpq   4118a0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1210>
		return solution[agentIdx].states[t].state;
  411929:	42 8b 7c 02 04       	mov    0x4(%rdx,%r8,1),%edi
  41192e:	42 8b 4c 02 08       	mov    0x8(%rdx,%r8,1),%ecx
  411933:	eb cb                	jmp    411900 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1270>
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  411935:	44 2b bd 04 fa ff ff 	sub    -0x5fc(%rbp),%r15d
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  41193c:	45 89 e8             	mov    %r13d,%r8d
  41193f:	44 2b 85 00 fa ff ff 	sub    -0x600(%rbp),%r8d
		stat(0) {}
  411946:	48 8b 13             	mov    (%rbx),%rdx
                                               tentative_gScore);
  411949:	44 03 9d 10 fa ff ff 	add    -0x5f0(%rbp),%r11d
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  411950:	44 89 f8             	mov    %r15d,%eax
		stat(0) {}
  411953:	48 89 95 d0 fb ff ff 	mov    %rdx,-0x430(%rbp)
  41195a:	c1 f8 1f             	sar    $0x1f,%eax
  41195d:	41 31 c7             	xor    %eax,%r15d
  411960:	41 29 c7             	sub    %eax,%r15d
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  411963:	44 89 c0             	mov    %r8d,%eax
  411966:	c1 f8 1f             	sar    $0x1f,%eax
  411969:	41 31 c0             	xor    %eax,%r8d
  41196c:	41 29 c0             	sub    %eax,%r8d
  41196f:	8b 43 08             	mov    0x8(%rbx),%eax
  411972:	44 89 b5 e0 fb ff ff 	mov    %r14d,-0x420(%rbp)
  411979:	45 01 c7             	add    %r8d,%r15d
                                               tentative_gScore);
  41197c:	44 89 9d e4 fb ff ff 	mov    %r11d,-0x41c(%rbp)
		stat(0) {}
  411983:	c7 85 e8 fb ff ff 00 	movl   $0x0,-0x418(%rbp)
  41198a:	00 00 00 
                tentative_gScore + m_env.admissibleHeuristic(neighbor.state);
  41198d:	45 01 f7             	add    %r14d,%r15d
		stat(0) {}
  411990:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  411996:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  41199d:	48 3b 85 80 fa ff ff 	cmp    -0x580(%rbp),%rax
  4119a4:	44 89 bd dc fb ff ff 	mov    %r15d,-0x424(%rbp)
  4119ab:	0f 84 6d 03 00 00    	je     411d1e <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x168e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  4119b1:	48 85 c0             	test   %rax,%rax
  4119b4:	74 22                	je     4119d8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1348>
  4119b6:	48 89 10             	mov    %rdx,(%rax)
  4119b9:	48 8b 95 d8 fb ff ff 	mov    -0x428(%rbp),%rdx
  4119c0:	48 89 50 08          	mov    %rdx,0x8(%rax)
  4119c4:	48 8b 95 e0 fb ff ff 	mov    -0x420(%rbp),%rdx
  4119cb:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4119cf:	8b 95 e8 fb ff ff    	mov    -0x418(%rbp),%edx
  4119d5:	89 50 18             	mov    %edx,0x18(%rax)
	    ++this->_M_impl._M_finish;
  4119d8:	48 83 c0 1c          	add    $0x1c,%rax
  4119dc:	48 89 85 78 fa ff ff 	mov    %rax,-0x588(%rbp)
            if (fScore <= bestFScore * m_w) {
  4119e3:	66 0f ef c9          	pxor   %xmm1,%xmm1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  4119e7:	48 2b 85 70 fa ff ff 	sub    -0x590(%rbp),%rax
  4119ee:	48 ba b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rdx
  4119f5:	db b6 6d 
  4119f8:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4119fc:	f3 0f 2a 8d 38 fa ff 	cvtsi2ssl -0x5c8(%rbp),%xmm1
  411a03:	ff 
  411a04:	f3 41 0f 2a c7       	cvtsi2ss %r15d,%xmm0
  411a09:	48 c1 f8 02          	sar    $0x2,%rax
  411a0d:	48 0f af c2          	imul   %rdx,%rax
  411a11:	f3 0f 59 8d 3c fa ff 	mulss  -0x5c4(%rbp),%xmm1
  411a18:	ff 
  411a19:	0f 2e c8             	ucomiss %xmm0,%xmm1
  411a1c:	72 2f                	jb     411a4d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x13bd>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  411a1e:	48 8b 95 98 fa ff ff 	mov    -0x568(%rbp),%rdx
  411a25:	48 3b 95 a0 fa ff ff 	cmp    -0x560(%rbp),%rdx
							focalSet.push_back(openSet.size() - 1);
  411a2c:	8d 48 ff             	lea    -0x1(%rax),%ecx
  411a2f:	89 8d d0 fa ff ff    	mov    %ecx,-0x530(%rbp)
  411a35:	0f 84 a4 02 00 00    	je     411cdf <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x164f>
  411a3b:	48 85 d2             	test   %rdx,%rdx
  411a3e:	74 02                	je     411a42 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x13b2>
  411a40:	89 0a                	mov    %ecx,(%rdx)
	    ++this->_M_impl._M_finish;
  411a42:	48 83 c2 04          	add    $0x4,%rdx
  411a46:	48 89 95 98 fa ff ff 	mov    %rdx,-0x568(%rbp)
  411a4d:	4c 8d bd d0 fa ff ff 	lea    -0x530(%rbp),%r15
  411a54:	48 8b 13             	mov    (%rbx),%rdx
            stateToHeap.insert(std::make_pair<>(neighbor.state, openSet.size() - 1));
  411a57:	48 83 e8 01          	sub    $0x1,%rax
	  return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
  411a5b:	48 83 ec 08          	sub    $0x8,%rsp
  411a5f:	4c 89 fe             	mov    %r15,%rsi
  411a62:	48 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%rdi
  411a69:	48 89 95 d0 fa ff ff 	mov    %rdx,-0x530(%rbp)
  411a70:	8b 53 08             	mov    0x8(%rbx),%edx
  411a73:	48 89 85 e0 fa ff ff 	mov    %rax,-0x520(%rbp)
  411a7a:	48 b8 d0 24 df ff ff 	movabs $0xffffffffffdf24d0,%rax
  411a81:	ff ff ff 
  411a84:	6a 00                	pushq  $0x0
  411a86:	89 95 d8 fa ff ff    	mov    %edx,-0x528(%rbp)
  411a8c:	48 8b 95 58 fa ff ff 	mov    -0x5a8(%rbp),%rdx
  411a93:	48 01 d0             	add    %rdx,%rax
  411a96:	ff d0                	callq  *%rax
  411a98:	59                   	pop    %rcx
  411a99:	5e                   	pop    %rsi
  411a9a:	e9 3a f8 ff ff       	jmpq   4112d9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc49>
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
  411a9f:	48 85 c9             	test   %rcx,%rcx
  411aa2:	0f 84 9c 01 00 00    	je     411c44 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x15b4>
    { return __num % __den; }
  411aa8:	48 8b 41 30          	mov    0x30(%rcx),%rax
  411aac:	31 d2                	xor    %edx,%edx
  411aae:	48 f7 f6             	div    %rsi
      if (!__next || __next_bkt != __bkt)
  411ab1:	49 39 d2             	cmp    %rdx,%r10
  411ab4:	0f 84 ee fa ff ff    	je     4115a8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf18>
	    _M_buckets[__next_bkt] = _M_buckets[__bkt];
  411aba:	48 8b 85 50 fa ff ff 	mov    -0x5b0(%rbp),%rax
  411ac1:	4c 89 0c d0          	mov    %r9,(%rax,%rdx,8)
  411ac5:	48 8b 85 10 fa ff ff 	mov    -0x5f0(%rbp),%rax
	  if (&_M_before_begin == _M_buckets[__bkt])
  411acc:	48 8b 95 20 fa ff ff 	mov    -0x5e0(%rbp),%rdx
  411ad3:	48 8b 00             	mov    (%rax),%rax
  411ad6:	48 83 c2 10          	add    $0x10,%rdx
  411ada:	48 39 d0             	cmp    %rdx,%rax
  411add:	0f 84 78 01 00 00    	je     411c5b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x15cb>
	  _M_buckets[__bkt] = nullptr;
  411ae3:	48 8b 85 10 fa ff ff 	mov    -0x5f0(%rbp),%rax
  411aea:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  411af1:	48 8b 0f             	mov    (%rdi),%rcx
  411af4:	e9 af fa ff ff       	jmpq   4115a8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf18>
      : _M_current(__i) { }
  411af9:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  411b00:	48 3b 85 a0 fa ff ff 	cmp    -0x560(%rbp),%rax
  411b07:	0f 84 2d 05 00 00    	je     41203a <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x19aa>
  411b0d:	48 85 c0             	test   %rax,%rax
  411b10:	74 02                	je     411b14 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
  411b12:	89 10                	mov    %edx,(%rax)
	    ++this->_M_impl._M_finish;
  411b14:	48 83 c0 04          	add    $0x4,%rax
  411b18:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
  411b1f:	e9 b5 f7 ff ff       	jmpq   4112d9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc49>
	__ostream_insert(__out, __s,
  411b24:	4c 8b b5 58 fa ff ff 	mov    -0x5a8(%rbp),%r14
  411b2b:	48 b8 30 7e df ff ff 	movabs $0xffffffffffdf7e30,%rax
  411b32:	ff ff ff 
  411b35:	ba 26 00 00 00       	mov    $0x26,%edx
  411b3a:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
  411b3e:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  411b45:	ff ff ff 
  411b48:	4d 89 f7             	mov    %r14,%r15
  411b4b:	49 8b 3c 06          	mov    (%r14,%rax,1),%rdi
  411b4f:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  411b56:	ff ff ff 
  411b59:	4c 01 f0             	add    %r14,%rax
  411b5c:	ff d0                	callq  *%rax
	return __pf(*this);
  411b5e:	48 b8 d0 31 de ff ff 	movabs $0xffffffffffde31d0,%rax
  411b65:	ff ff ff 
  411b68:	4c 01 f0             	add    %r14,%rax
  411b6b:	ff d0                	callq  *%rax
  411b6d:	e9 b9 f2 ff ff       	jmpq   410e2b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x79b>
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
  411b72:	48 85 c9             	test   %rcx,%rcx
  411b75:	74 19                	je     411b90 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1500>
  411b77:	48 8b 41 18          	mov    0x18(%rcx),%rax
  411b7b:	31 d2                	xor    %edx,%edx
  411b7d:	49 f7 f6             	div    %r14
      if (!__next || __next_bkt != __bkt)
  411b80:	49 39 d1             	cmp    %rdx,%r9
  411b83:	0f 84 13 f4 ff ff    	je     410f9c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x90c>
	    _M_buckets[__next_bkt] = _M_buckets[__bkt];
  411b89:	49 89 34 d0          	mov    %rsi,(%r8,%rdx,8)
  411b8d:	49 8b 02             	mov    (%r10),%rax
	  if (&_M_before_begin == _M_buckets[__bkt])
  411b90:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  411b97:	48 8d 53 10          	lea    0x10(%rbx),%rdx
  411b9b:	48 39 d0             	cmp    %rdx,%rax
  411b9e:	0f 84 42 06 00 00    	je     4121e6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b56>
	  _M_buckets[__bkt] = nullptr;
  411ba4:	49 c7 02 00 00 00 00 	movq   $0x0,(%r10)
  411bab:	48 8b 0f             	mov    (%rdi),%rcx
  411bae:	e9 e9 f3 ff ff       	jmpq   410f9c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x90c>
	__ostream_insert(__out, __s,
  411bb3:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  411bba:	48 b8 a0 81 df ff ff 	movabs $0xffffffffffdf81a0,%rax
  411bc1:	ff ff ff 
  411bc4:	ba 1a 00 00 00       	mov    $0x1a,%edx
  411bc9:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  411bcd:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  411bd4:	ff ff ff 
  411bd7:	49 89 df             	mov    %rbx,%r15
  411bda:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  411bde:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  411be5:	ff ff ff 
  411be8:	48 01 d8             	add    %rbx,%rax
  411beb:	ff d0                	callq  *%rax
	return __pf(*this);
  411bed:	48 b8 d0 31 de ff ff 	movabs $0xffffffffffde31d0,%rax
  411bf4:	ff ff ff 
  411bf7:	48 01 d8             	add    %rbx,%rax
  411bfa:	ff d0                	callq  *%rax
  411bfc:	48 8b 95 90 fa ff ff 	mov    -0x570(%rbp),%rdx
  411c03:	4c 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%r8
  411c0a:	4c 8b 8d 70 fa ff ff 	mov    -0x590(%rbp),%r9
	for (; iter != iterEnd; ++iter) {
  411c11:	4c 39 c2             	cmp    %r8,%rdx
  411c14:	0f 85 c0 03 00 00    	jne    411fda <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x194a>
  411c1a:	31 db                	xor    %ebx,%ebx
  411c1c:	e9 c5 f1 ff ff       	jmpq   410de6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x756>
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  411c21:	48 8b b5 30 fa ff ff 	mov    -0x5d0(%rbp),%rsi
  411c28:	48 8b bd e8 f9 ff ff 	mov    -0x618(%rbp),%rdi
  411c2f:	48 8b 85 d8 f9 ff ff 	mov    -0x628(%rbp),%rax
  411c36:	ff d0                	callq  *%rax
  411c38:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  411c3f:	e9 c4 f8 ff ff       	jmpq   411508 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe78>
	  if (&_M_before_begin == _M_buckets[__bkt])
  411c44:	48 8b 95 20 fa ff ff 	mov    -0x5e0(%rbp),%rdx
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
  411c4b:	4c 89 c8             	mov    %r9,%rax
	  if (&_M_before_begin == _M_buckets[__bkt])
  411c4e:	48 83 c2 10          	add    $0x10,%rdx
  411c52:	48 39 d0             	cmp    %rdx,%rax
  411c55:	0f 85 88 fe ff ff    	jne    411ae3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1453>
	    _M_before_begin._M_nxt = __next;
  411c5b:	48 89 8d a0 fb ff ff 	mov    %rcx,-0x460(%rbp)
  411c62:	e9 7c fe ff ff       	jmpq   411ae3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1453>
	  __node->_M_nxt = _M_before_begin._M_nxt;
  411c67:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
	  _M_before_begin._M_nxt = __node;
  411c6e:	4c 89 a5 60 fb ff ff 	mov    %r12,-0x4a0(%rbp)
	  if (__node->_M_nxt)
  411c75:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  411c78:	49 89 04 24          	mov    %rax,(%r12)
	  if (__node->_M_nxt)
  411c7c:	74 11                	je     411c8f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x15ff>
  411c7e:	48 8b 40 18          	mov    0x18(%rax),%rax
  411c82:	31 d2                	xor    %edx,%edx
  411c84:	48 f7 b5 58 fb ff ff 	divq   -0x4a8(%rbp)
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  411c8b:	4c 89 24 d1          	mov    %r12,(%rcx,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  411c8f:	48 8b 85 18 fa ff ff 	mov    -0x5e8(%rbp),%rax
  411c96:	48 83 c0 10          	add    $0x10,%rax
  411c9a:	49 89 06             	mov    %rax,(%r14)
  411c9d:	e9 b9 f4 ff ff       	jmpq   41115b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xacb>
      __catch(...)
  411ca2:	4c 8b b5 58 fa ff ff 	mov    -0x5a8(%rbp),%r14
  411ca9:	48 89 c7             	mov    %rax,%rdi
      { ::operator delete(__p); }
  411cac:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  411cb3:	ff ff ff 
  411cb6:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  411cbd:	ff ff ff 
  411cc0:	4d 89 f7             	mov    %r14,%r15
  411cc3:	4c 01 f0             	add    %r14,%rax
  411cc6:	4c 01 f3             	add    %r14,%rbx
  411cc9:	ff d0                	callq  *%rax
  411ccb:	4c 89 e7             	mov    %r12,%rdi
  411cce:	ff d3                	callq  *%rbx
	  __throw_exception_again;
  411cd0:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  411cd7:	ff ff ff 
  411cda:	4c 01 f0             	add    %r14,%rax
  411cdd:	ff d0                	callq  *%rax
  411cdf:	4c 8d bd d0 fa ff ff 	lea    -0x530(%rbp),%r15
  411ce6:	48 8b bd e8 f9 ff ff 	mov    -0x618(%rbp),%rdi
  411ced:	48 8b 85 d8 f9 ff ff 	mov    -0x628(%rbp),%rax
  411cf4:	4c 89 fe             	mov    %r15,%rsi
  411cf7:	ff d0                	callq  *%rax
  411cf9:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  411d00:	48 2b 85 70 fa ff ff 	sub    -0x590(%rbp),%rax
  411d07:	48 ba b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rdx
  411d0e:	db b6 6d 
  411d11:	48 c1 f8 02          	sar    $0x2,%rax
  411d15:	48 0f af c2          	imul   %rdx,%rax
  411d19:	e9 36 fd ff ff       	jmpq   411a54 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x13c4>
	  _M_emplace_back_aux(__x);
  411d1e:	48 8b 95 58 fa ff ff 	mov    -0x5a8(%rbp),%rdx
  411d25:	48 b8 50 e7 de ff ff 	movabs $0xffffffffffdee750,%rax
  411d2c:	ff ff ff 
  411d2f:	48 8b b5 30 fa ff ff 	mov    -0x5d0(%rbp),%rsi
  411d36:	48 8b bd f8 f9 ff ff 	mov    -0x608(%rbp),%rdi
  411d3d:	48 01 d0             	add    %rdx,%rax
  411d40:	ff d0                	callq  *%rax
  411d42:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  411d49:	e9 95 fc ff ff       	jmpq   4119e3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1353>
      __catch(...)
  411d4e:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  411d55:	49 89 c5             	mov    %rax,%r13
  411d58:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  411d5f:	ff ff ff 
  411d62:	49 89 df             	mov    %rbx,%r15
  411d65:	48 01 d8             	add    %rbx,%rax
  411d68:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  411d6a:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
	if (__p)
  411d71:	48 85 ff             	test   %rdi,%rdi
  411d74:	74 19                	je     411d8f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x16ff>
  411d76:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  411d7d:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  411d84:	ff ff ff 
  411d87:	49 89 c7             	mov    %rax,%r15
  411d8a:	48 01 c3             	add    %rax,%rbx
  411d8d:	ff d3                	callq  *%rbx
  411d8f:	48 8b bd a0 fb ff ff 	mov    -0x460(%rbp),%rdi
  411d96:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  411d9d:	ff ff ff 
  411da0:	48 03 9d 58 fa ff ff 	add    -0x5a8(%rbp),%rbx
      while (__n)
  411da7:	48 85 ff             	test   %rdi,%rdi
  411daa:	74 14                	je     411dc0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1730>
  411dac:	4c 8b 27             	mov    (%rdi),%r12
  411daf:	4c 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%r15
  411db6:	ff d3                	callq  *%rbx
  411db8:	4d 85 e4             	test   %r12,%r12
  411dbb:	4c 89 e7             	mov    %r12,%rdi
  411dbe:	75 ec                	jne    411dac <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x171c>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  411dc0:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
  411dc7:	49 bc 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%r12
  411dce:	ff ff ff 
  411dd1:	31 f6                	xor    %esi,%esi
  411dd3:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
  411dda:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  411de1:	00 
  411de2:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  411de9:	49 89 c7             	mov    %rax,%r15
  411dec:	4c 01 e0             	add    %r12,%rax
  411def:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  411df1:	48 8b 85 20 fa ff ff 	mov    -0x5e0(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  411df8:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
      _M_element_count = 0;
  411dff:	48 c7 85 a8 fb ff ff 	movq   $0x0,-0x458(%rbp)
  411e06:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  411e0a:	48 c7 85 a0 fb ff ff 	movq   $0x0,-0x460(%rbp)
  411e11:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  411e15:	48 83 c0 30          	add    $0x30,%rax
  411e19:	48 39 c7             	cmp    %rax,%rdi
  411e1c:	74 19                	je     411e37 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x17a7>
  411e1e:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  411e25:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  411e2c:	ff ff ff 
  411e2f:	49 89 c7             	mov    %rax,%r15
  411e32:	48 01 c3             	add    %rax,%rbx
  411e35:	ff d3                	callq  *%rbx
  411e37:	48 8b bd 60 fb ff ff 	mov    -0x4a0(%rbp),%rdi
  411e3e:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  411e45:	ff ff ff 
  411e48:	48 03 9d 58 fa ff ff 	add    -0x5a8(%rbp),%rbx
  411e4f:	48 85 ff             	test   %rdi,%rdi
  411e52:	74 14                	je     411e68 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x17d8>
  411e54:	4c 8b 37             	mov    (%rdi),%r14
  411e57:	4c 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%r15
  411e5e:	ff d3                	callq  *%rbx
  411e60:	4d 85 f6             	test   %r14,%r14
  411e63:	4c 89 f7             	mov    %r14,%rdi
  411e66:	75 ec                	jne    411e54 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x17c4>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  411e68:	48 8b 85 58 fb ff ff 	mov    -0x4a8(%rbp),%rax
  411e6f:	31 f6                	xor    %esi,%esi
  411e71:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
  411e78:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  411e7f:	00 
  411e80:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  411e87:	49 89 c7             	mov    %rax,%r15
  411e8a:	4c 01 e0             	add    %r12,%rax
  411e8d:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  411e8f:	48 8b 85 18 fa ff ff 	mov    -0x5e8(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  411e96:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
      _M_element_count = 0;
  411e9d:	48 c7 85 68 fb ff ff 	movq   $0x0,-0x498(%rbp)
  411ea4:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  411ea8:	48 c7 85 60 fb ff ff 	movq   $0x0,-0x4a0(%rbp)
  411eaf:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  411eb3:	48 83 c0 30          	add    $0x30,%rax
  411eb7:	48 39 c7             	cmp    %rax,%rdi
  411eba:	74 19                	je     411ed5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1845>
  411ebc:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  411ec3:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  411eca:	ff ff ff 
  411ecd:	49 89 c7             	mov    %rax,%r15
  411ed0:	48 01 c3             	add    %rax,%rbx
  411ed3:	ff d3                	callq  *%rbx
  411ed5:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  411edc:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  411ee3:	ff ff ff 
  411ee6:	48 03 9d 58 fa ff ff 	add    -0x5a8(%rbp),%rbx
  411eed:	48 85 ff             	test   %rdi,%rdi
  411ef0:	74 14                	je     411f06 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1876>
  411ef2:	4c 8b 37             	mov    (%rdi),%r14
  411ef5:	4c 8b bd 58 fa ff ff 	mov    -0x5a8(%rbp),%r15
  411efc:	ff d3                	callq  *%rbx
  411efe:	4d 85 f6             	test   %r14,%r14
  411f01:	4c 89 f7             	mov    %r14,%rdi
  411f04:	75 ec                	jne    411ef2 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1862>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  411f06:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
  411f0d:	31 f6                	xor    %esi,%esi
  411f0f:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
  411f16:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  411f1d:	00 
  411f1e:	48 8b 85 58 fa ff ff 	mov    -0x5a8(%rbp),%rax
  411f25:	49 01 c4             	add    %rax,%r12
  411f28:	49 89 c7             	mov    %rax,%r15
  411f2b:	41 ff d4             	callq  *%r12
	if (_M_uses_single_bucket(__bkts))
  411f2e:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  411f35:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
      _M_element_count = 0;
  411f3c:	48 c7 85 28 fb ff ff 	movq   $0x0,-0x4d8(%rbp)
  411f43:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  411f47:	48 c7 85 20 fb ff ff 	movq   $0x0,-0x4e0(%rbp)
  411f4e:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  411f52:	48 83 c0 30          	add    $0x30,%rax
  411f56:	48 39 c7             	cmp    %rax,%rdi
  411f59:	74 19                	je     411f74 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x18e4>
  411f5b:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  411f62:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  411f69:	ff ff ff 
  411f6c:	49 89 df             	mov    %rbx,%r15
  411f6f:	48 01 d8             	add    %rbx,%rax
  411f72:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  411f74:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
	if (__p)
  411f7b:	48 85 ff             	test   %rdi,%rdi
  411f7e:	74 19                	je     411f99 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1909>
  411f80:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  411f87:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  411f8e:	ff ff ff 
  411f91:	49 89 df             	mov    %rbx,%r15
  411f94:	48 01 d8             	add    %rbx,%rax
  411f97:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  411f99:	48 8b bd 70 fa ff ff 	mov    -0x590(%rbp),%rdi
	if (__p)
  411fa0:	48 85 ff             	test   %rdi,%rdi
  411fa3:	74 19                	je     411fbe <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x192e>
  411fa5:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  411fac:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  411fb3:	ff ff ff 
  411fb6:	49 89 df             	mov    %rbx,%r15
  411fb9:	48 01 d8             	add    %rbx,%rax
  411fbc:	ff d0                	callq  *%rax
  411fbe:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  411fc5:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  411fcc:	ff ff ff 
  411fcf:	4c 89 ef             	mov    %r13,%rdi
  411fd2:	49 89 df             	mov    %rbx,%r15
  411fd5:	48 01 d8             	add    %rbx,%rax
  411fd8:	ff d0                	callq  *%rax
	AstarNode current = openSet[coi];
  411fda:	48 63 0a             	movslq (%rdx),%rcx
      { return *(this->_M_impl._M_start + __n); }
  411fdd:	48 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%rax
  411fe4:	00 
  411fe5:	48 29 c8             	sub    %rcx,%rax
  411fe8:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
  411fec:	44 8b 58 0c          	mov    0xc(%rax),%r11d
  411ff0:	8b 58 10             	mov    0x10(%rax),%ebx
  411ff3:	8b 70 14             	mov    0x14(%rax),%esi
  411ff6:	4c 89 c0             	mov    %r8,%rax
  411ff9:	49 89 d0             	mov    %rdx,%r8
  411ffc:	e9 56 ed ff ff       	jmpq   410d57 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6c7>
	  _M_emplace_back_aux(__x);
  412001:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  412008:	48 b8 10 e6 de ff ff 	movabs $0xffffffffffdee610,%rax
  41200f:	ff ff ff 
  412012:	48 8d b5 64 fa ff ff 	lea    -0x59c(%rbp),%rsi
  412019:	48 8d bd 90 fa ff ff 	lea    -0x570(%rbp),%rdi
  412020:	48 01 d8             	add    %rbx,%rax
  412023:	ff d0                	callq  *%rax
  412025:	e9 77 e9 ff ff       	jmpq   4109a1 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x311>
  41202a:	49 89 c5             	mov    %rax,%r13
  41202d:	e9 5d fd ff ff       	jmpq   411d8f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x16ff>
  412032:	49 89 c5             	mov    %rax,%r13
  412035:	e9 30 fd ff ff       	jmpq   411d6a <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x16da>
  41203a:	48 8b 95 58 fa ff ff 	mov    -0x5a8(%rbp),%rdx
  412041:	48 b8 10 e6 de ff ff 	movabs $0xffffffffffdee610,%rax
  412048:	ff ff ff 
  41204b:	48 8b b5 30 fa ff ff 	mov    -0x5d0(%rbp),%rsi
  412052:	48 8b bd e8 f9 ff ff 	mov    -0x618(%rbp),%rdi
  412059:	48 01 d0             	add    %rdx,%rax
  41205c:	ff d0                	callq  *%rax
  41205e:	e9 76 f2 ff ff       	jmpq   4112d9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc49>
		if (states_size < STATE_SIZE) {
  412063:	48 8b 9d 28 fa ff ff 	mov    -0x5d8(%rbp),%rbx
  41206a:	48 8b 85 d0 f9 ff ff 	mov    -0x630(%rbp),%rax
  412071:	4c 8b 8b 00 04 00 00 	mov    0x400(%rbx),%r9
  412078:	8b 30                	mov    (%rax),%esi
  41207a:	8b 48 04             	mov    0x4(%rax),%ecx
  41207d:	8b 50 08             	mov    0x8(%rax),%edx
  412080:	49 83 f9 3f          	cmp    $0x3f,%r9
  412084:	0f 87 68 01 00 00    	ja     4121f2 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b62>
			states[states_size] = s;
  41208a:	4c 89 c8             	mov    %r9,%rax
  41208d:	48 c1 e0 04          	shl    $0x4,%rax
  412091:	48 01 d8             	add    %rbx,%rax
  412094:	89 30                	mov    %esi,(%rax)
  412096:	89 48 04             	mov    %ecx,0x4(%rax)
  412099:	89 50 08             	mov    %edx,0x8(%rax)
  41209c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
			states_size++;
  4120a3:	49 8d 41 01          	lea    0x1(%r9),%rax
  4120a7:	48 89 83 00 04 00 00 	mov    %rax,0x400(%rbx)
  4120ae:	48 8b 9d 28 fa ff ff 	mov    -0x5d8(%rbp),%rbx
  4120b5:	48 c1 e0 04          	shl    $0x4,%rax
  4120b9:	48 8b 8d 30 fa ff ff 	mov    -0x5d0(%rbp),%rcx
  4120c0:	48 89 c2             	mov    %rax,%rdx
  4120c3:	48 8d 44 13 f0       	lea    -0x10(%rbx,%rdx,1),%rax
  4120c8:	48 8d 7b f0          	lea    -0x10(%rbx),%rdi

	void reverse_states() {
		StateCost tmp_s[STATE_SIZE];
		size_t j = states_size - 1;
		for(int i = 0; i < states_size; ++i) {
			tmp_s[i] = states[j];
  4120cc:	48 8b 30             	mov    (%rax),%rsi
  4120cf:	48 83 e8 10          	sub    $0x10,%rax
  4120d3:	48 83 c1 10          	add    $0x10,%rcx
  4120d7:	48 89 71 f0          	mov    %rsi,-0x10(%rcx)
  4120db:	48 8b 70 18          	mov    0x18(%rax),%rsi
  4120df:	48 89 71 f8          	mov    %rsi,-0x8(%rcx)
		for(int i = 0; i < states_size; ++i) {
  4120e3:	48 39 f8             	cmp    %rdi,%rax
  4120e6:	75 e4                	jne    4120cc <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1a3c>
  4120e8:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  4120ef:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  4120f6:	ff ff ff 
  4120f9:	48 8b b5 30 fa ff ff 	mov    -0x5d0(%rbp),%rsi
  412100:	48 8b bd 28 fa ff ff 	mov    -0x5d8(%rbp),%rdi
  412107:	49 89 df             	mov    %rbx,%r15
  41210a:	48 01 d8             	add    %rbx,%rax
  41210d:	ff d0                	callq  *%rax
			states[i] = tmp_s[i];
	}

	void reverse_actions() {
		ActionCost tmp_a[STATE_SIZE];
		size_t j = actions_size - 1;
  41210f:	48 8b 85 28 fa ff ff 	mov    -0x5d8(%rbp),%rax
  412116:	48 8b 80 08 06 00 00 	mov    0x608(%rax),%rax
		for(int i = 0; i < actions_size; ++i) {
  41211d:	48 85 c0             	test   %rax,%rax
  412120:	74 6a                	je     41218c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1afc>
  412122:	48 8d 14 c5 00 04 00 	lea    0x400(,%rax,8),%rdx
  412129:	00 
  41212a:	48 8b 85 28 fa ff ff 	mov    -0x5d8(%rbp),%rax
  412131:	48 8b 9d 30 fa ff ff 	mov    -0x5d0(%rbp),%rbx
  412138:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  41213c:	48 81 ea 00 04 00 00 	sub    $0x400,%rdx
  412143:	48 89 d8             	mov    %rbx,%rax
  412146:	48 8d 3c 13          	lea    (%rbx,%rdx,1),%rdi
			tmp_a[i] = actions[j];
  41214a:	48 8b 31             	mov    (%rcx),%rsi
  41214d:	48 83 c0 08          	add    $0x8,%rax
  412151:	48 83 e9 08          	sub    $0x8,%rcx
  412155:	48 89 70 f8          	mov    %rsi,-0x8(%rax)
		for(int i = 0; i < actions_size; ++i) {
  412159:	48 39 f8             	cmp    %rdi,%rax
  41215c:	75 ec                	jne    41214a <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1aba>
			j--;
		}
		for(int i = 0; i < actions_size; ++i)
			actions[i] = tmp_a[i];
  41215e:	48 8b 85 28 fa ff ff 	mov    -0x5d8(%rbp),%rax
  412165:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  41216c:	48 8b b5 30 fa ff ff 	mov    -0x5d0(%rbp),%rsi
  412173:	48 8d b8 08 04 00 00 	lea    0x408(%rax),%rdi
  41217a:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  412181:	ff ff ff 
  412184:	49 89 df             	mov    %rbx,%r15
  412187:	48 01 d8             	add    %rbx,%rax
  41218a:	ff d0                	callq  *%rax
        solution.cost = current.gScore;
  41218c:	8b 85 00 fb ff ff    	mov    -0x500(%rbp),%eax
  412192:	48 8b 9d 28 fa ff ff 	mov    -0x5d8(%rbp),%rbx
        return true;
  412199:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        solution.fmin = openSet[openset_top(openSet)].fScore;
  41219f:	48 8b 95 58 fa ff ff 	mov    -0x5a8(%rbp),%rdx
  4121a6:	48 8b bd f8 f9 ff ff 	mov    -0x608(%rbp),%rdi
        solution.cost = current.gScore;
  4121ad:	89 83 10 06 00 00    	mov    %eax,0x610(%rbx)
        solution.fmin = openSet[openset_top(openSet)].fScore;
  4121b3:	48 8b 85 50 fa ff ff 	mov    -0x5b0(%rbp),%rax
  4121ba:	48 01 d0             	add    %rdx,%rax
  4121bd:	ff d0                	callq  *%rax
  4121bf:	48 63 d0             	movslq %eax,%rdx
  4121c2:	48 8b bd 70 fa ff ff 	mov    -0x590(%rbp),%rdi
  4121c9:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  4121d0:	00 
  4121d1:	48 29 d0             	sub    %rdx,%rax
  4121d4:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
  4121d8:	8b 40 0c             	mov    0xc(%rax),%eax
  4121db:	89 83 14 06 00 00    	mov    %eax,0x614(%rbx)
  4121e1:	e9 83 e8 ff ff       	jmpq   410a69 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3d9>
	    _M_before_begin._M_nxt = __next;
  4121e6:	48 89 8d 20 fb ff ff 	mov    %rcx,-0x4e0(%rbp)
  4121ed:	e9 b2 f9 ff ff       	jmpq   411ba4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1514>
  4121f2:	48 8b 9d 58 fa ff ff 	mov    -0x5a8(%rbp),%rbx
  4121f9:	4c 8b b5 30 fa ff ff 	mov    -0x5d0(%rbp),%r14
  412200:	48 b8 58 7e df ff ff 	movabs $0xffffffffffdf7e58,%rax
  412207:	ff ff ff 
  41220a:	49 ba b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r10
  412211:	ff ff ff 
  412214:	b9 00 04 00 00       	mov    $0x400,%ecx
  412219:	ba 01 00 00 00       	mov    $0x1,%edx
  41221e:	be ff 03 00 00       	mov    $0x3ff,%esi
  412223:	4c 8d 04 03          	lea    (%rbx,%rax,1),%r8
  412227:	4c 89 f7             	mov    %r14,%rdi
  41222a:	49 89 df             	mov    %rbx,%r15
  41222d:	31 c0                	xor    %eax,%eax
  41222f:	49 01 da             	add    %rbx,%r10
  412232:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  412235:	b9 05 04 00 00       	mov    $0x405,%ecx
  41223a:	4c 89 f7             	mov    %r14,%rdi
  41223d:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  412240:	48 8b 85 28 fa ff ff 	mov    -0x5d8(%rbp),%rax
  412247:	48 8b 80 00 04 00 00 	mov    0x400(%rax),%rax
		for(int i = 0; i < states_size; ++i) {
  41224e:	48 85 c0             	test   %rax,%rax
  412251:	0f 85 57 fe ff ff    	jne    4120ae <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1a1e>
  412257:	e9 b3 fe ff ff       	jmpq   41210f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1a7f>
  41225c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000412260 <_Z6searchm>:
	void search(swarm::Timestamp score) {
  412260:	41 57                	push   %r15
  412262:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 412260 <_Z6searchm>
  412269:	49 bb a0 8d 21 00 00 	movabs $0x218da0,%r11
  412270:	00 00 00 
  412273:	41 56                	push   %r14
  412275:	41 55                	push   %r13
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  412277:	48 b8 c8 7e df ff ff 	movabs $0xffffffffffdf7ec8,%rax
  41227e:	ff ff ff 
  412281:	41 54                	push   %r12
  412283:	55                   	push   %rbp
  412284:	4d 01 df             	add    %r11,%r15
  412287:	53                   	push   %rbx
  412288:	48 bb 80 e3 dd ff ff 	movabs $0xffffffffffdde380,%rbx
  41228f:	ff ff ff 
  412292:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412296:	4c 01 fb             	add    %r15,%rbx
  412299:	ba 80 00 01 00       	mov    $0x10080,%edx
  41229e:	bf 01 00 00 00       	mov    $0x1,%edi
  4122a3:	48 83 ec 58          	sub    $0x58,%rsp
  4122a7:	31 c0                	xor    %eax,%eax
    start.cost = 0;
  4122a9:	49 bc 40 be 83 01 00 	movabs $0x183be40,%r12
  4122b0:	00 00 00 
  4122b3:	ff d3                	callq  *%rbx
  4122b5:	48 b8 f8 7e df ff ff 	movabs $0xffffffffffdf7ef8,%rax
  4122bc:	ff ff ff 
  4122bf:	ba 50 06 00 00       	mov    $0x650,%edx
  4122c4:	bf 01 00 00 00       	mov    $0x1,%edi
  4122c9:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  4122cd:	31 c0                	xor    %eax,%eax
  4122cf:	ff d3                	callq  *%rbx
  4122d1:	48 b8 20 7f df ff ff 	movabs $0xffffffffffdf7f20,%rax
  4122d8:	ff ff ff 
  4122db:	ba 10 00 00 00       	mov    $0x10,%edx
  4122e0:	bf 01 00 00 00       	mov    $0x1,%edi
  4122e5:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  4122e9:	31 c0                	xor    %eax,%eax
  4122eb:	ff d3                	callq  *%rbx
  4122ed:	48 b8 48 7f df ff ff 	movabs $0xffffffffffdf7f48,%rax
  4122f4:	ff ff ff 
  4122f7:	ba 08 00 00 00       	mov    $0x8,%edx
  4122fc:	bf 01 00 00 00       	mov    $0x1,%edi
  412301:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412305:	31 c0                	xor    %eax,%eax
  412307:	ff d3                	callq  *%rbx
  412309:	48 b8 70 7f df ff ff 	movabs $0xffffffffffdf7f70,%rax
  412310:	ff ff ff 
  412313:	ba 40 7e 00 00       	mov    $0x7e40,%edx
  412318:	bf 01 00 00 00       	mov    $0x1,%edi
  41231d:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412321:	31 c0                	xor    %eax,%eax
  412323:	ff d3                	callq  *%rbx
  412325:	48 b8 a0 7f df ff ff 	movabs $0xffffffffffdf7fa0,%rax
  41232c:	ff ff ff 
  41232f:	ba 80 06 00 00       	mov    $0x680,%edx
  412334:	bf 01 00 00 00       	mov    $0x1,%edi
  412339:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  41233d:	31 c0                	xor    %eax,%eax
  41233f:	ff d3                	callq  *%rbx
  412341:	48 b8 c8 7f df ff ff 	movabs $0xffffffffffdf7fc8,%rax
  412348:	ff ff ff 
  41234b:	ba 00 82 00 00       	mov    $0x8200,%edx
  412350:	bf 01 00 00 00       	mov    $0x1,%edi
  412355:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412359:	31 c0                	xor    %eax,%eax
  41235b:	ff d3                	callq  *%rbx
  41235d:	48 b8 00 80 df ff ff 	movabs $0xffffffffffdf8000,%rax
  412364:	ff ff ff 
  412367:	ba 40 00 00 00       	mov    $0x40,%edx
  41236c:	bf 01 00 00 00       	mov    $0x1,%edi
  412371:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412375:	31 c0                	xor    %eax,%eax
  412377:	ff d3                	callq  *%rbx
  412379:	48 b8 20 80 df ff ff 	movabs $0xffffffffffdf8020,%rax
  412380:	ff ff ff 
  412383:	ba 38 00 00 00       	mov    $0x38,%edx
  412388:	bf 01 00 00 00       	mov    $0x1,%edi
  41238d:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412391:	31 c0                	xor    %eax,%eax
  412393:	ff d3                	callq  *%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  412395:	49 b9 00 3e 85 01 00 	movabs $0x1853e00,%r9
  41239c:	00 00 00 
  41239f:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
  4123a6:	aa aa aa 
  4123a9:	43 c7 84 3c 40 00 01 	movl   $0x0,0x10040(%r12,%r15,1)
  4123b0:	00 00 00 00 00 
  4123b5:	4b 8b 3c 39          	mov    (%r9,%r15,1),%rdi
  4123b9:	4b 8b 44 39 08       	mov    0x8(%r9,%r15,1),%rax
    start.LB = 0;
  4123be:	43 c7 84 3c 44 00 01 	movl   $0x0,0x10044(%r12,%r15,1)
  4123c5:	00 00 00 00 00 
    start.id = 0;
  4123ca:	43 c7 84 3c 50 00 01 	movl   $0x0,0x10050(%r12,%r15,1)
  4123d1:	00 00 00 00 00 
  4123d6:	48 29 f8             	sub    %rdi,%rax
  4123d9:	48 c1 f8 02          	sar    $0x2,%rax
  4123dd:	48 0f af c2          	imul   %rdx,%rax
    for (size_t i = 0; i < g_initialStates.size(); ++i) {
  4123e1:	48 85 c0             	test   %rax,%rax
  4123e4:	0f 84 a4 01 00 00    	je     41258e <_Z6searchm+0x32e>
  4123ea:	48 b8 c0 bf 84 01 00 	movabs $0x184bfc0,%rax
  4123f1:	00 00 00 
			m_solution(solution) {
  4123f4:	49 bd 00 bf 84 01 00 	movabs $0x184bf00,%r13
  4123fb:	00 00 00 
  4123fe:	4b 8d 2c 3c          	lea    (%r12,%r15,1),%rbp
  412402:	4d 8d 34 07          	lea    (%r15,%rax,1),%r14
  412406:	4b 8d 04 2f          	lea    (%r15,%r13,1),%rax
  41240a:	31 db                	xor    %ebx,%ebx
  41240c:	4c 8d 85 40 7e 00 00 	lea    0x7e40(%rbp),%r8
  412413:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        bool success = astar_search(llenv, g_w, g_initialStates[i], start.solution[i]);
  412418:	48 b8 90 56 de ff ff 	movabs $0xffffffffffde5690,%rax
  41241f:	ff ff ff 
  412422:	4d 89 f2             	mov    %r14,%r10
  412425:	4c 01 f8             	add    %r15,%rax
  412428:	49 89 ee             	mov    %rbp,%r14
  41242b:	4c 89 c5             	mov    %r8,%rbp
  41242e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  412433:	eb 7e                	jmp    4124b3 <_Z6searchm+0x253>
  412435:	0f 1f 00             	nopl   (%rax)
      if (i < ROBOT_NUMS && g_solution[i].states_size > 1) {
  412438:	49 83 ba 00 04 00 00 	cmpq   $0x1,0x400(%r10)
  41243f:	01 
  412440:	76 7b                	jbe    4124bd <_Z6searchm+0x25d>
        start.solution[i] = g_solution[i];
  412442:	b9 c9 00 00 00       	mov    $0xc9,%ecx
  412447:	4c 89 f7             	mov    %r14,%rdi
  41244a:	4c 89 d6             	mov    %r10,%rsi
  41244d:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  412450:	0f b6 06             	movzbl (%rsi),%eax
  412453:	88 07                	mov    %al,(%rdi)
      start.cost += start.solution[i].cost;
  412455:	41 8b 86 10 06 00 00 	mov    0x610(%r14),%eax
  41245c:	43 01 84 3c 40 00 01 	add    %eax,0x10040(%r12,%r15,1)
  412463:	00 
  412464:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
  41246b:	aa aa aa 
      start.LB += start.solution[i].fmin;
  41246e:	41 8b 86 14 06 00 00 	mov    0x614(%r14),%eax
  412475:	4b 8b 3c 39          	mov    (%r9,%r15,1),%rdi
    for (size_t i = 0; i < g_initialStates.size(); ++i) {
  412479:	48 83 c3 01          	add    $0x1,%rbx
      start.LB += start.solution[i].fmin;
  41247d:	43 01 84 3c 44 00 01 	add    %eax,0x10044(%r12,%r15,1)
  412484:	00 
  412485:	4b 8b 44 39 08       	mov    0x8(%r9,%r15,1),%rax
  41248a:	49 81 c6 50 06 00 00 	add    $0x650,%r14
  412491:	49 81 c2 50 06 00 00 	add    $0x650,%r10
  412498:	48 81 c5 80 06 00 00 	add    $0x680,%rbp
  41249f:	48 29 f8             	sub    %rdi,%rax
  4124a2:	48 c1 f8 02          	sar    $0x2,%rax
  4124a6:	48 0f af c2          	imul   %rdx,%rax
    for (size_t i = 0; i < g_initialStates.size(); ++i) {
  4124aa:	48 39 c3             	cmp    %rax,%rbx
  4124ad:	0f 83 db 00 00 00    	jae    41258e <_Z6searchm+0x32e>
      if (i < ROBOT_NUMS && g_solution[i].states_size > 1) {
  4124b3:	48 83 fb 14          	cmp    $0x14,%rbx
  4124b7:	0f 85 7b ff ff ff    	jne    412438 <_Z6searchm+0x1d8>
  4124bd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
		m_agentIdx = agentIdx;
  4124c2:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  4124c7:	48 8d b5 58 02 00 00 	lea    0x258(%rbp),%rsi
		m_constraints = constraints;
  4124ce:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
		m_lastGoalConstraint = -1;
  4124d3:	c7 44 24 38 ff ff ff 	movl   $0xffffffff,0x38(%rsp)
  4124da:	ff 
			m_solution(solution) {
  4124db:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4124e0:	4b 8d 04 3c          	lea    (%r12,%r15,1),%rax
  4124e4:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  4124e9:	4b 8b 04 2f          	mov    (%r15,%r13,1),%rax
  4124ed:	4c 8d 1c d8          	lea    (%rax,%rbx,8),%r11
		m_lastGoalConstraint = -1;
  4124f1:	48 89 e8             	mov    %rbp,%rax
  4124f4:	41 8b 0b             	mov    (%r11),%ecx
  4124f7:	eb 10                	jmp    412509 <_Z6searchm+0x2a9>
  4124f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  412500:	48 83 c0 0c          	add    $0xc,%rax
		for (const auto& vc : constraints->vertexConstraints) {
  412504:	48 39 c6             	cmp    %rax,%rsi
  412507:	74 26                	je     41252f <_Z6searchm+0x2cf>
			if (vc.x == m_env.m_goals[m_agentIdx].x && vc.y == m_env.m_goals[m_agentIdx].y) {
  412509:	39 48 04             	cmp    %ecx,0x4(%rax)
  41250c:	75 f2                	jne    412500 <_Z6searchm+0x2a0>
  41250e:	41 8b 53 04          	mov    0x4(%r11),%edx
  412512:	39 50 08             	cmp    %edx,0x8(%rax)
  412515:	75 e9                	jne    412500 <_Z6searchm+0x2a0>
				m_lastGoalConstraint = std::max(m_lastGoalConstraint, vc.time);
  412517:	8b 10                	mov    (%rax),%edx
  412519:	39 54 24 38          	cmp    %edx,0x38(%rsp)
  41251d:	0f 4d 54 24 38       	cmovge 0x38(%rsp),%edx
  412522:	48 83 c0 0c          	add    $0xc,%rax
		for (const auto& vc : constraints->vertexConstraints) {
  412526:	48 39 c6             	cmp    %rax,%rsi
				m_lastGoalConstraint = std::max(m_lastGoalConstraint, vc.time);
  412529:	89 54 24 38          	mov    %edx,0x38(%rsp)
		for (const auto& vc : constraints->vertexConstraints) {
  41252d:	75 da                	jne    412509 <_Z6searchm+0x2a9>
      { return *(this->_M_impl._M_start + __n); }
  41252f:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
  412533:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  412538:	4c 89 14 24          	mov    %r10,(%rsp)
        bool success = astar_search(llenv, g_w, g_initialStates[i], start.solution[i]);
  41253c:	4c 89 f2             	mov    %r14,%rdx
  41253f:	48 8d 34 87          	lea    (%rdi,%rax,4),%rsi
  412543:	48 b8 c0 be 84 01 00 	movabs $0x184bec0,%rax
  41254a:	00 00 00 
  41254d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  412552:	f3 41 0f 10 04 07    	movss  (%r15,%rax,1),%xmm0
  412558:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41255d:	ff d0                	callq  *%rax
        if (!success) {
  41255f:	84 c0                	test   %al,%al
  412561:	4c 8b 14 24          	mov    (%rsp),%r10
  412565:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  41256a:	0f 85 e5 fe ff ff    	jne    412455 <_Z6searchm+0x1f5>
					g_isNoConflict = false;
  412570:	48 b8 80 bf 84 01 00 	movabs $0x184bf80,%rax
  412577:	00 00 00 
  41257a:	41 c6 04 07 00       	movb   $0x0,(%r15,%rax,1)
	}
  41257f:	48 83 c4 58          	add    $0x58,%rsp
  412583:	5b                   	pop    %rbx
  412584:	5d                   	pop    %rbp
  412585:	41 5c                	pop    %r12
  412587:	41 5d                	pop    %r13
  412589:	41 5e                	pop    %r14
  41258b:	41 5f                	pop    %r15
  41258d:	c3                   	retq   
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  41258e:	48 b8 48 80 df ff ff 	movabs $0xffffffffffdf8048,%rax
  412595:	ff ff ff 
  412598:	b9 05 04 00 00       	mov    $0x405,%ecx
  41259d:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  4125a1:	48 87 c9             	xchg   %rcx,%rcx
  4125a4:	48 b8 bb 81 df ff ff 	movabs $0xffffffffffdf81bb,%rax
  4125ab:	ff ff ff 
  4125ae:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  4125b2:	48 87 c9             	xchg   %rcx,%rcx
    start.focalHeuristic = focalHeuristic(start.solution);
  4125b5:	48 b8 c0 34 de ff ff 	movabs $0xffffffffffde34c0,%rax
  4125bc:	ff ff ff 
  4125bf:	4b 8d 3c 3c          	lea    (%r12,%r15,1),%rdi
  4125c3:	4c 01 f8             	add    %r15,%rax
  4125c6:	ff d0                	callq  *%rax
  4125c8:	66 0f ef c9          	pxor   %xmm1,%xmm1
  4125cc:	43 89 84 3c 48 00 01 	mov    %eax,0x10048(%r12,%r15,1)
  4125d3:	00 
  4125d4:	48 b8 20 96 df ff ff 	movabs $0xffffffffffdf9620,%rax
  4125db:	ff ff ff 
  4125de:	f2 41 0f 10 04 07    	movsd  (%r15,%rax,1),%xmm0
  4125e4:	48 b8 00 e7 dd ff ff 	movabs $0xffffffffffdde700,%rax
  4125eb:	ff ff ff 
  4125ee:	f2 43 0f 2a 8c 3c 5c 	cvtsi2sdl 0x1005c(%r12,%r15,1),%xmm1
  4125f5:	00 01 00 
  4125f8:	4c 01 f8             	add    %r15,%rax
  4125fb:	ff d0                	callq  *%rax
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  4125fd:	43 8b 84 3c 54 00 01 	mov    0x10054(%r12,%r15,1),%eax
  412604:	00 
  412605:	66 0f ef c9          	pxor   %xmm1,%xmm1
		global_nodelist[si].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  412609:	bf 80 00 01 00       	mov    $0x10080,%edi
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  41260e:	01 c0                	add    %eax,%eax
  412610:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  412614:	48 b8 28 96 df ff ff 	movabs $0xffffffffffdf9628,%rax
  41261b:	ff ff ff 
  41261e:	f2 42 0f 5c 04 38    	subsd  (%rax,%r15,1),%xmm0
		global_nodelist[si].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  412624:	48 b8 b0 77 df ff ff 	movabs $0xffffffffffdf77b0,%rax
  41262b:	ff ff ff 
  41262e:	4c 01 f8             	add    %r15,%rax
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  412631:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  412635:	66 0f ef c9          	pxor   %xmm1,%xmm1
  412639:	f2 43 0f 2a 8c 3c 58 	cvtsi2sdl 0x10058(%r12,%r15,1),%xmm1
  412640:	00 01 00 
  412643:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  412647:	f2 0f 2c d8          	cvttsd2si %xmm0,%ebx
		global_nodelist[si].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  41264b:	ff d0                	callq  *%rax
  41264d:	48 ba 40 aa b6 00 00 	movabs $0xb6aa40,%rdx
  412654:	00 00 00 
		*global_nodelist[si].addr = start;
  412657:	48 89 c7             	mov    %rax,%rdi
  41265a:	4b 8d 34 3c          	lea    (%r12,%r15,1),%rsi
		global_nodelist[si].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  41265e:	4c 01 fa             	add    %r15,%rdx
  412661:	48 63 db             	movslq %ebx,%rbx
  412664:	48 89 d9             	mov    %rbx,%rcx
  412667:	48 c1 e1 06          	shl    $0x6,%rcx
  41266b:	48 89 04 11          	mov    %rax,(%rcx,%rdx,1)
		*global_nodelist[si].addr = start;
  41266f:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  412676:	ff ff ff 
  412679:	ba 80 00 01 00       	mov    $0x10080,%edx
  41267e:	4c 01 f8             	add    %r15,%rax
  412681:	ff d0                	callq  *%rax
            :);
  412683:	48 b8 e0 b8 de ff ff 	movabs $0xffffffffffdeb8e0,%rax
  41268a:	ff ff ff 
  41268d:	31 ff                	xor    %edi,%edi
  41268f:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  412694:	49 8d 14 07          	lea    (%r15,%rax,1),%rdx
  412698:	48 89 de             	mov    %rbx,%rsi
  41269b:	48 87 c9             	xchg   %rcx,%rcx
	}
  41269e:	48 83 c4 58          	add    $0x58,%rsp
  4126a2:	5b                   	pop    %rbx
  4126a3:	5d                   	pop    %rbp
  4126a4:	41 5c                	pop    %r12
  4126a6:	41 5d                	pop    %r13
  4126a8:	41 5e                	pop    %r14
  4126aa:	41 5f                	pop    %r15
  4126ac:	c3                   	retq   
  4126ad:	0f 1f 00             	nopl   (%rax)

00000000004126b0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment>:
void LL_pll(swarm::Timestamp ts,AstarNode current,const LLNodee  prev, LowLevelEnvironment  m_env) {
  4126b0:	41 57                	push   %r15
  4126b2:	41 56                	push   %r14
  4126b4:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 4126b0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment>
  4126bb:	41 55                	push   %r13
  4126bd:	41 54                	push   %r12
  4126bf:	49 bb 50 89 21 00 00 	movabs $0x218950,%r11
  4126c6:	00 00 00 
  4126c9:	55                   	push   %rbp
  4126ca:	53                   	push   %rbx
  4126cb:	4d 01 de             	add    %r11,%r14
      if(done[newnodeid]==true) {
  4126ce:	49 ba 40 04 00 00 00 	movabs $0x440,%r10
  4126d5:	00 00 00 
void LL_pll(swarm::Timestamp ts,AstarNode current,const LLNodee  prev, LowLevelEnvironment  m_env) {
  4126d8:	48 81 ec a8 04 00 00 	sub    $0x4a8,%rsp
      if(done[newnodeid]==true) {
  4126df:	4d 01 f2             	add    %r14,%r10
      int newnodeid = prev.newnodeid;
  4126e2:	48 63 84 24 34 05 00 	movslq 0x534(%rsp),%rax
  4126e9:	00 
      if(done[newnodeid]==true) {
  4126ea:	41 80 3c 02 00       	cmpb   $0x0,(%r10,%rax,1)
      int newnodeid = prev.newnodeid;
  4126ef:	89 44 24 30          	mov    %eax,0x30(%rsp)
      if(done[newnodeid]==true) {
  4126f3:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  4126f8:	0f 85 e2 00 00 00    	jne    4127e0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x130>
  4126fe:	8b 84 24 1c 05 00 00 	mov    0x51c(%rsp),%eax
  412705:	48 8b 9c 24 48 05 00 	mov    0x548(%rsp),%rbx
  41270c:	00 
  41270d:	44 8b bc 24 20 05 00 	mov    0x520(%rsp),%r15d
  412714:	00 
  412715:	8b ac 24 30 05 00 00 	mov    0x530(%rsp),%ebp
  41271c:	89 44 24 20          	mov    %eax,0x20(%rsp)
  412720:	8b 84 24 24 05 00 00 	mov    0x524(%rsp),%eax
  412727:	89 44 24 58          	mov    %eax,0x58(%rsp)
  41272b:	8b 84 24 28 05 00 00 	mov    0x528(%rsp),%eax
  412732:	41 89 c5             	mov    %eax,%r13d
  412735:	8b 84 24 2c 05 00 00 	mov    0x52c(%rsp),%eax
  41273c:	89 44 24 10          	mov    %eax,0x10(%rsp)
  412740:	48 8b 84 24 40 05 00 	mov    0x540(%rsp),%rax
  412747:	00 
  412748:	48 89 c7             	mov    %rax,%rdi
  41274b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  412750:	8b 84 24 58 05 00 00 	mov    0x558(%rsp),%eax
  412757:	89 44 24 48          	mov    %eax,0x48(%rsp)
      size_t c_idx= prev.c_idx;
  41275b:	48 8b 84 24 38 05 00 	mov    0x538(%rsp),%rax
  412762:	00 
  412763:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
      { return *(this->_M_impl._M_start + __n); }
  412768:	48 8d 04 dd 00 00 00 	lea    0x0(,%rbx,8),%rax
  41276f:	00 
  412770:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  412775:	48 03 07             	add    (%rdi),%rax
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  412778:	8b 38                	mov    (%rax),%edi
  41277a:	39 bc 24 e4 04 00 00 	cmp    %edi,0x4e4(%rsp)
  412781:	74 6f                	je     4127f2 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x142>
  412783:	48 8b 84 24 50 05 00 	mov    0x550(%rsp),%rax
  41278a:	00 
  41278b:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  412790:	48 ba a0 38 03 00 00 	movabs $0x338a0,%rdx
  412797:	00 00 00 
  41279a:	4c 01 f2             	add    %r14,%rdx
  41279d:	48 8d b4 24 e0 04 00 	lea    0x4e0(%rsp),%rsi
  4127a4:	00 
  4127a5:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  4127aa:	48 8b 84 24 60 05 00 	mov    0x560(%rsp),%rax
  4127b1:	00 
  4127b2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4127b7:	48 89 f8             	mov    %rdi,%rax
  4127ba:	48 c1 e0 03          	shl    $0x3,%rax
  4127be:	48 29 f8             	sub    %rdi,%rax
  4127c1:	4c 8d 24 c2          	lea    (%rdx,%rax,8),%r12
  4127c5:	48 b8 50 0c df ff ff 	movabs $0xffffffffffdf0c50,%rax
  4127cc:	ff ff ff 
  4127cf:	4c 01 f0             	add    %r14,%rax
  4127d2:	4c 89 e7             	mov    %r12,%rdi
  4127d5:	ff d0                	callq  *%rax
    if (cameFrom[newnodeid].find(current.state)==cameFrom[newnodeid].end()){ 
  4127d7:	48 85 c0             	test   %rax,%rax
  4127da:	0f 84 25 05 00 00    	je     412d05 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x655>
}
  4127e0:	48 81 c4 a8 04 00 00 	add    $0x4a8,%rsp
  4127e7:	5b                   	pop    %rbx
  4127e8:	5d                   	pop    %rbp
  4127e9:	41 5c                	pop    %r12
  4127eb:	41 5d                	pop    %r13
  4127ed:	41 5e                	pop    %r14
  4127ef:	41 5f                	pop    %r15
  4127f1:	c3                   	retq   
  4127f2:	8b 94 24 e8 04 00 00 	mov    0x4e8(%rsp),%edx
  4127f9:	3b 50 04             	cmp    0x4(%rax),%edx
  4127fc:	75 85                	jne    412783 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xd3>
  4127fe:	8b 44 24 48          	mov    0x48(%rsp),%eax
  412802:	3b 84 24 e0 04 00 00 	cmp    0x4e0(%rsp),%eax
  412809:	0f 8d 74 ff ff ff    	jge    412783 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xd3>
      HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  41280f:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
  412814:	48 b8 40 aa b6 00 00 	movabs $0xb6aa40,%rax
  41281b:	00 00 00 
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
  41281e:	89 94 24 a8 00 00 00 	mov    %edx,0xa8(%rsp)
  412825:	4c 01 f0             	add    %r14,%rax
        { return _M_h.insert(std::forward<_Pair>(__x)); }
  412828:	48 ba a0 38 03 00 00 	movabs $0x338a0,%rdx
  41282f:	00 00 00 
	  return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
  412832:	48 8d bc 24 a0 00 00 	lea    0xa0(%rsp),%rdi
  412839:	00 
  41283a:	4c 01 f2             	add    %r14,%rdx
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  41283d:	44 89 ac 24 b4 00 00 	mov    %r13d,0xb4(%rsp)
  412844:	00 
  412845:	44 89 bc 24 bc 00 00 	mov    %r15d,0xbc(%rsp)
  41284c:	00 
  41284d:	48 89 d9             	mov    %rbx,%rcx
  412850:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  412855:	49 89 fd             	mov    %rdi,%r13
  412858:	48 c1 e1 06          	shl    $0x6,%rcx
  41285c:	48 89 fe             	mov    %rdi,%rsi
  41285f:	4c 89 54 24 38       	mov    %r10,0x38(%rsp)
  412864:	4c 8b 24 01          	mov    (%rcx,%rax,1),%r12
  412868:	48 8b 84 24 e0 04 00 	mov    0x4e0(%rsp),%rax
  41286f:	00 
				   __bos (__s), __fmt, __va_arg_pack ());
  412870:	4d 89 f7             	mov    %r14,%r15
  412873:	89 ac 24 ac 00 00 00 	mov    %ebp,0xac(%rsp)
  41287a:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  412881:	00 
  412882:	8b 44 24 10          	mov    0x10(%rsp),%eax
  412886:	89 84 24 b0 00 00 00 	mov    %eax,0xb0(%rsp)
  41288d:	8b 44 24 20          	mov    0x20(%rsp),%eax
  412891:	89 84 24 b8 00 00 00 	mov    %eax,0xb8(%rsp)
  412898:	8b 44 24 58          	mov    0x58(%rsp),%eax
  41289c:	89 84 24 c0 00 00 00 	mov    %eax,0xc0(%rsp)
  4128a3:	48 8d 04 dd 00 00 00 	lea    0x0(,%rbx,8),%rax
  4128aa:	00 
  4128ab:	48 29 d8             	sub    %rbx,%rax
  4128ae:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
  4128b2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4128b7:	48 89 c7             	mov    %rax,%rdi
  4128ba:	48 b8 30 54 de ff ff 	movabs $0xffffffffffde5430,%rax
  4128c1:	ff ff ff 
  4128c4:	4c 01 f0             	add    %r14,%rax
  4128c7:	ff d0                	callq  *%rax
  4128c9:	48 83 ec 08          	sub    $0x8,%rsp
  4128cd:	49 bb b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r11
  4128d4:	ff ff ff 
  4128d7:	41 89 e9             	mov    %ebp,%r9d
  4128da:	8b 84 24 f0 04 00 00 	mov    0x4f0(%rsp),%eax
  4128e1:	b9 00 04 00 00       	mov    $0x400,%ecx
  4128e6:	be ff 03 00 00       	mov    $0x3ff,%esi
  4128eb:	4c 89 ef             	mov    %r13,%rdi
  4128ee:	50                   	push   %rax
  4128ef:	8b 84 24 f4 04 00 00 	mov    0x4f4(%rsp),%eax
  4128f6:	50                   	push   %rax
  4128f7:	8b 54 24 48          	mov    0x48(%rsp),%edx
  4128fb:	48 b8 68 80 df ff ff 	movabs $0xffffffffffdf8068,%rax
  412902:	ff ff ff 
  412905:	4d 8d 04 06          	lea    (%r14,%rax,1),%r8
  412909:	31 c0                	xor    %eax,%eax
  41290b:	52                   	push   %rdx
  41290c:	ba 01 00 00 00       	mov    $0x1,%edx
  412911:	4c 89 5c 24 78       	mov    %r11,0x78(%rsp)
  412916:	4d 01 f3             	add    %r14,%r11
  412919:	4c 89 5c 24 50       	mov    %r11,0x50(%rsp)
  41291e:	41 ff d3             	callq  *%r11
  412921:	b9 05 04 00 00       	mov    $0x405,%ecx
  412926:	4c 89 ef             	mov    %r13,%rdi
  412929:	48 87 c9             	xchg   %rcx,%rcx
        done[newnodeid]=true;     
  41292c:	4c 8b 54 24 58       	mov    0x58(%rsp),%r10
      { return _M_h.find(__x); }
  412931:	48 b8 50 0c df ff ff 	movabs $0xffffffffffdf0c50,%rax
  412938:	ff ff ff 
  41293b:	41 c6 04 1a 01       	movb   $0x1,(%r10,%rbx,1)
		cost = 0;
  412940:	4c 69 54 24 38 50 06 	imul   $0x650,0x38(%rsp),%r10
  412947:	00 00 
  412949:	48 83 c4 20          	add    $0x20,%rsp
  41294d:	48 8d b4 24 e0 04 00 	lea    0x4e0(%rsp),%rsi
  412954:	00 
  412955:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41295a:	4f 8d 3c 14          	lea    (%r12,%r10,1),%r15
  41295e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  412963:	4c 01 f0             	add    %r14,%rax
  412966:	41 c7 87 10 06 00 00 	movl   $0x0,0x610(%r15)
  41296d:	00 00 00 00 
		fmin = 0;
  412971:	41 c7 87 14 06 00 00 	movl   $0x0,0x614(%r15)
  412978:	00 00 00 00 
				solution->states_size = 0;
  41297c:	49 c7 87 00 04 00 00 	movq   $0x0,0x400(%r15)
  412983:	00 00 00 00 
				solution->actions_size = 0;
  412987:	49 c7 87 08 06 00 00 	movq   $0x0,0x608(%r15)
  41298e:	00 00 00 00 
  412992:	ff d0                	callq  *%rax
        while (i>0) { 
  412994:	85 ed                	test   %ebp,%ebp
  412996:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
  41299b:	0f 8e 74 01 00 00    	jle    412b15 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x465>
  4129a1:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
		if (states_size < STATE_SIZE) {
  4129a6:	4d 89 fd             	mov    %r15,%r13
  4129a9:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  4129ae:	48 8d 14 9b          	lea    (%rbx,%rbx,4),%rdx
  4129b2:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
  4129b6:	48 8d 3c 93          	lea    (%rbx,%rdx,4),%rdi
  4129ba:	48 69 db ca 00 00 00 	imul   $0xca,%rbx,%rbx
  4129c1:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  4129c6:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  4129cb:	48 89 c3             	mov    %rax,%rbx
  4129ce:	48 b8 58 7e df ff ff 	movabs $0xffffffffffdf7e58,%rax
  4129d5:	ff ff ff 
  4129d8:	4c 01 f0             	add    %r14,%rax
  4129db:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  4129e0:	e9 8d 00 00 00       	jmpq   412a72 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x3c2>
  4129e5:	0f 1f 00             	nopl   (%rax)
			states[states_size] = s;
  4129e8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4129ed:	f3 0f 6f 43 08       	movdqu 0x8(%rbx),%xmm0
  4129f2:	4c 01 c8             	add    %r9,%rax
			states_size++;
  4129f5:	49 83 c1 01          	add    $0x1,%r9
			states[states_size] = s;
  4129f9:	48 c1 e0 04          	shl    $0x4,%rax
  4129fd:	41 0f 11 04 04       	movups %xmm0,(%r12,%rax,1)
			states_size++;
  412a02:	4d 89 8d 00 04 00 00 	mov    %r9,0x400(%r13)
		if (actions_size < ACTION_SIZE) {
  412a09:	4d 8b 8d 08 06 00 00 	mov    0x608(%r13),%r9
  412a10:	49 83 f9 3f          	cmp    $0x3f,%r9
  412a14:	0f 87 ad 00 00 00    	ja     412ac7 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x417>
			actions[actions_size] = a;
  412a1a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
					solution->add(ActionCost(std::get<1>(iter->second), std::get<2>(iter->second)));
  412a1f:	8b 53 18             	mov    0x18(%rbx),%edx
  412a22:	8b 4b 1c             	mov    0x1c(%rbx),%ecx
  412a25:	49 8d 84 01 81 00 00 	lea    0x81(%r9,%rax,1),%rax
  412a2c:	00 
			actions_size++;
  412a2d:	49 83 c1 01          	add    $0x1,%r9
			actions[actions_size] = a;
  412a31:	49 8d 04 c4          	lea    (%r12,%rax,8),%rax
  412a35:	89 08                	mov    %ecx,(%rax)
  412a37:	89 50 04             	mov    %edx,0x4(%rax)
			actions_size++;
  412a3a:	4d 89 8d 08 06 00 00 	mov    %r9,0x608(%r13)
          curr_state=  iter->first;
  412a41:	8b 43 08             	mov    0x8(%rbx),%eax
  412a44:	44 8b 7b 0c          	mov    0xc(%rbx),%r15d
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  412a48:	48 8d 73 20          	lea    0x20(%rbx),%rsi
  412a4c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  412a51:	89 44 24 60          	mov    %eax,0x60(%rsp)
  412a55:	8b 43 10             	mov    0x10(%rbx),%eax
  412a58:	89 44 24 28          	mov    %eax,0x28(%rsp)
  412a5c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  412a61:	4c 01 f0             	add    %r14,%rax
  412a64:	ff d0                	callq  *%rax
        while (i>0) { 
  412a66:	83 ed 01             	sub    $0x1,%ebp
  412a69:	0f 84 a1 00 00 00    	je     412b10 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x460>
  412a6f:	48 89 c3             	mov    %rax,%rbx
		if (states_size < STATE_SIZE) {
  412a72:	4d 8b 8d 00 04 00 00 	mov    0x400(%r13),%r9
  412a79:	49 83 f9 3f          	cmp    $0x3f,%r9
  412a7d:	0f 86 65 ff ff ff    	jbe    4129e8 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x338>
  412a83:	4c 8b 44 24 50       	mov    0x50(%rsp),%r8
  412a88:	b9 00 04 00 00       	mov    $0x400,%ecx
  412a8d:	ba 01 00 00 00       	mov    $0x1,%edx
  412a92:	be ff 03 00 00       	mov    $0x3ff,%esi
  412a97:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  412a9c:	4d 89 f7             	mov    %r14,%r15
  412a9f:	31 c0                	xor    %eax,%eax
  412aa1:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  412aa6:	41 ff d3             	callq  *%r11
  412aa9:	b9 05 04 00 00       	mov    $0x405,%ecx
  412aae:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  412ab3:	48 87 c9             	xchg   %rcx,%rcx
		if (actions_size < ACTION_SIZE) {
  412ab6:	4d 8b 8d 08 06 00 00 	mov    0x608(%r13),%r9
  412abd:	49 83 f9 3f          	cmp    $0x3f,%r9
  412ac1:	0f 86 53 ff ff ff    	jbe    412a1a <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x36a>
  412ac7:	48 b8 90 7e df ff ff 	movabs $0xffffffffffdf7e90,%rax
  412ace:	ff ff ff 
  412ad1:	b9 00 04 00 00       	mov    $0x400,%ecx
  412ad6:	ba 01 00 00 00       	mov    $0x1,%edx
  412adb:	4d 8d 04 06          	lea    (%r14,%rax,1),%r8
  412adf:	be ff 03 00 00       	mov    $0x3ff,%esi
  412ae4:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  412ae9:	4d 89 f7             	mov    %r14,%r15
  412aec:	31 c0                	xor    %eax,%eax
  412aee:	4c 8b 54 24 48       	mov    0x48(%rsp),%r10
  412af3:	41 ff d2             	callq  *%r10
  412af6:	b9 05 04 00 00       	mov    $0x405,%ecx
  412afb:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  412b00:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  412b03:	e9 39 ff ff ff       	jmpq   412a41 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x391>
  412b08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  412b0f:	00 
  412b10:	44 89 7c 24 50       	mov    %r15d,0x50(%rsp)
		if (states_size < STATE_SIZE) {
  412b15:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  412b1a:	48 69 da 50 06 00 00 	imul   $0x650,%rdx,%rbx
  412b21:	4c 01 e3             	add    %r12,%rbx
  412b24:	4c 8b 8b 00 04 00 00 	mov    0x400(%rbx),%r9
  412b2b:	49 83 f9 3f          	cmp    $0x3f,%r9
  412b2f:	0f 87 7b 01 00 00    	ja     412cb0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x600>
			states[states_size] = s;
  412b35:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
  412b39:	8b 7c 24 60          	mov    0x60(%rsp),%edi
  412b3d:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  412b41:	48 8d 04 82          	lea    (%rdx,%rax,4),%rax
  412b45:	8b 54 24 28          	mov    0x28(%rsp),%edx
  412b49:	4c 01 c8             	add    %r9,%rax
  412b4c:	48 c1 e0 04          	shl    $0x4,%rax
  412b50:	4c 01 e0             	add    %r12,%rax
  412b53:	89 38                	mov    %edi,(%rax)
  412b55:	8b 7c 24 50          	mov    0x50(%rsp),%edi
  412b59:	89 50 08             	mov    %edx,0x8(%rax)
			states_size++;
  412b5c:	49 8d 51 01          	lea    0x1(%r9),%rdx
			states[states_size] = s;
  412b60:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  412b67:	89 78 04             	mov    %edi,0x4(%rax)
			states_size++;
  412b6a:	48 89 93 00 04 00 00 	mov    %rdx,0x400(%rbx)
  412b71:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  412b76:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  412b7b:	48 8d 04 9b          	lea    (%rbx,%rbx,4),%rax
  412b7f:	4c 69 c3 50 06 00 00 	imul   $0x650,%rbx,%r8
  412b86:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  412b8a:	48 8d 04 83          	lea    (%rbx,%rax,4),%rax
  412b8e:	4b 8d 7c 04 f0       	lea    -0x10(%r12,%r8,1),%rdi
  412b93:	48 01 d0             	add    %rdx,%rax
  412b96:	48 c1 e0 04          	shl    $0x4,%rax
  412b9a:	49 8d 44 04 f0       	lea    -0x10(%r12,%rax,1),%rax
  412b9f:	90                   	nop
			tmp_s[i] = states[j];
  412ba0:	48 8b 30             	mov    (%rax),%rsi
  412ba3:	48 83 e8 10          	sub    $0x10,%rax
  412ba7:	48 83 c1 10          	add    $0x10,%rcx
  412bab:	48 89 71 f0          	mov    %rsi,-0x10(%rcx)
  412baf:	48 8b 70 18          	mov    0x18(%rax),%rsi
  412bb3:	48 89 71 f8          	mov    %rsi,-0x8(%rcx)
		for(int i = 0; i < states_size; ++i) {
  412bb7:	48 39 c7             	cmp    %rax,%rdi
  412bba:	75 e4                	jne    412ba0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x4f0>
  412bbc:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  412bc3:	ff ff ff 
			states[i] = tmp_s[i];
  412bc6:	4b 8d 3c 04          	lea    (%r12,%r8,1),%rdi
  412bca:	48 c1 e2 04          	shl    $0x4,%rdx
  412bce:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  412bd3:	4d 89 f7             	mov    %r14,%r15
  412bd6:	4c 01 f0             	add    %r14,%rax
  412bd9:	ff d0                	callq  *%rax
		size_t j = actions_size - 1;
  412bdb:	48 69 44 24 18 50 06 	imul   $0x650,0x18(%rsp),%rax
  412be2:	00 00 
  412be4:	49 8b 94 04 08 06 00 	mov    0x608(%r12,%rax,1),%rdx
  412beb:	00 
		for(int i = 0; i < actions_size; ++i) {
  412bec:	48 85 d2             	test   %rdx,%rdx
  412bef:	74 6b                	je     412c5c <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x5ac>
  412bf1:	48 69 44 24 18 ca 00 	imul   $0xca,0x18(%rsp),%rax
  412bf8:	00 00 
  412bfa:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  412bff:	48 8d 84 02 80 00 00 	lea    0x80(%rdx,%rax,1),%rax
  412c06:	00 
  412c07:	48 c1 e2 03          	shl    $0x3,%rdx
  412c0b:	48 8d 3c 13          	lea    (%rbx,%rdx,1),%rdi
  412c0f:	49 8d 0c c4          	lea    (%r12,%rax,8),%rcx
  412c13:	48 89 d8             	mov    %rbx,%rax
  412c16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  412c1d:	00 00 00 
			tmp_a[i] = actions[j];
  412c20:	48 8b 31             	mov    (%rcx),%rsi
  412c23:	48 83 c0 08          	add    $0x8,%rax
  412c27:	48 83 e9 08          	sub    $0x8,%rcx
  412c2b:	48 89 70 f8          	mov    %rsi,-0x8(%rax)
		for(int i = 0; i < actions_size; ++i) {
  412c2f:	48 39 c7             	cmp    %rax,%rdi
  412c32:	75 ec                	jne    412c20 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x570>
			actions[i] = tmp_a[i];
  412c34:	48 69 44 24 18 50 06 	imul   $0x650,0x18(%rsp),%rax
  412c3b:	00 00 
  412c3d:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  412c42:	4d 89 f7             	mov    %r14,%r15
  412c45:	49 8d bc 04 08 04 00 	lea    0x408(%r12,%rax,1),%rdi
  412c4c:	00 
  412c4d:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  412c54:	ff ff ff 
  412c57:	4c 01 f0             	add    %r14,%rax
  412c5a:	ff d0                	callq  *%rax
        solution->cost = current.gScore;
  412c5c:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  412c61:	8b 94 24 f0 04 00 00 	mov    0x4f0(%rsp),%edx
            :);
  412c68:	b9 03 00 21 40       	mov    $0x40210003,%ecx
    register uint64_t r8  asm("r8")  = v3;
  412c6d:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
            :);
  412c72:	4c 89 e6             	mov    %r12,%rsi
  412c75:	48 69 c3 50 06 00 00 	imul   $0x650,%rbx,%rax
  412c7c:	4c 01 e0             	add    %r12,%rax
  412c7f:	89 90 10 06 00 00    	mov    %edx,0x610(%rax)
        solution->fmin = 0; //what is this value +  how can we set this value
  412c85:	c7 80 14 06 00 00 00 	movl   $0x0,0x614(%rax)
  412c8c:	00 00 00 
    register uint64_t r9  asm("r9")  = v4;
  412c8f:	48 b8 60 a4 de ff ff 	movabs $0xffffffffffdea460,%rax
  412c96:	ff ff ff 
        swarm::enqueue(filler,ts_tem,
  412c99:	41 8b bc 24 68 00 01 	mov    0x10068(%r12),%edi
  412ca0:	00 
  412ca1:	4e 8d 0c 30          	lea    (%rax,%r14,1),%r9
            :);
  412ca5:	48 89 da             	mov    %rbx,%rdx
  412ca8:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  412cab:	e9 30 fb ff ff       	jmpq   4127e0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x130>
  412cb0:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  412cb5:	4c 8b 54 24 58       	mov    0x58(%rsp),%r10
  412cba:	48 b8 58 7e df ff ff 	movabs $0xffffffffffdf7e58,%rax
  412cc1:	ff ff ff 
  412cc4:	4d 8d 04 06          	lea    (%r14,%rax,1),%r8
  412cc8:	b9 00 04 00 00       	mov    $0x400,%ecx
  412ccd:	ba 01 00 00 00       	mov    $0x1,%edx
  412cd2:	be ff 03 00 00       	mov    $0x3ff,%esi
  412cd7:	4d 89 f7             	mov    %r14,%r15
  412cda:	31 c0                	xor    %eax,%eax
  412cdc:	48 89 ef             	mov    %rbp,%rdi
  412cdf:	4d 01 f2             	add    %r14,%r10
  412ce2:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  412ce5:	b9 05 04 00 00       	mov    $0x405,%ecx
  412cea:	48 89 ef             	mov    %rbp,%rdi
  412ced:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  412cf0:	48 8b 93 00 04 00 00 	mov    0x400(%rbx),%rdx
		for(int i = 0; i < states_size; ++i) {
  412cf7:	48 85 d2             	test   %rdx,%rdx
  412cfa:	0f 85 71 fe ff ff    	jne    412b71 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x4c1>
  412d00:	e9 d6 fe ff ff       	jmpq   412bdb <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x52b>
  412d05:	48 8b 84 24 e0 04 00 	mov    0x4e0(%rsp),%rax
  412d0c:	00 
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  412d0d:	44 89 bc 24 bc 00 00 	mov    %r15d,0xbc(%rsp)
  412d14:	00 
  412d15:	4c 89 e7             	mov    %r12,%rdi
  412d18:	89 ac 24 ac 00 00 00 	mov    %ebp,0xac(%rsp)
  412d1f:	44 89 ac 24 b4 00 00 	mov    %r13d,0xb4(%rsp)
  412d26:	00 
  412d27:	48 89 84 24 a0 00 00 	mov    %rax,0xa0(%rsp)
  412d2e:	00 
  412d2f:	8b 84 24 e8 04 00 00 	mov    0x4e8(%rsp),%eax
  412d36:	89 84 24 a8 00 00 00 	mov    %eax,0xa8(%rsp)
  412d3d:	8b 44 24 10          	mov    0x10(%rsp),%eax
  412d41:	89 84 24 b0 00 00 00 	mov    %eax,0xb0(%rsp)
  412d48:	8b 44 24 20          	mov    0x20(%rsp),%eax
  412d4c:	89 84 24 b8 00 00 00 	mov    %eax,0xb8(%rsp)
  412d53:	8b 44 24 58          	mov    0x58(%rsp),%eax
  412d57:	89 84 24 c0 00 00 00 	mov    %eax,0xc0(%rsp)
  412d5e:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
  412d65:	00 
  412d66:	48 89 c6             	mov    %rax,%rsi
  412d69:	49 89 c7             	mov    %rax,%r15
  412d6c:	48 b8 30 54 de ff ff 	movabs $0xffffffffffde5430,%rax
  412d73:	ff ff ff 
  412d76:	4c 01 f0             	add    %r14,%rax
  412d79:	ff d0                	callq  *%rax
      neighbors.reserve(10);
  412d7b:	48 b8 e0 c0 de ff ff 	movabs $0xffffffffffdec0e0,%rax
  412d82:	ff ff ff 
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  412d85:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
  412d8c:	00 00 00 00 00 
  412d91:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
  412d98:	00 00 00 00 00 
  412d9d:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
  412da4:	00 00 00 00 00 
  412da9:	be 0a 00 00 00       	mov    $0xa,%esi
  412dae:	4c 89 ff             	mov    %r15,%rdi
  412db1:	4c 01 f0             	add    %r14,%rax
  412db4:	ff d0                	callq  *%rax
		m_env.getNeighbors(s, neighbors, m_constraints);
  412db6:	48 b8 c0 e2 de ff ff 	movabs $0xffffffffffdee2c0,%rax
  412dbd:	ff ff ff 
  412dc0:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  412dc5:	4c 89 fa             	mov    %r15,%rdx
  412dc8:	48 8d b4 24 e0 04 00 	lea    0x4e0(%rsp),%rsi
  412dcf:	00 
  412dd0:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  412dd5:	4c 01 f0             	add    %r14,%rax
  412dd8:	ff d0                	callq  *%rax
  412dda:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  412de1:	00 
  412de2:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  412de9:	00 
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  412dea:	48 39 f8             	cmp    %rdi,%rax
  412ded:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  412df2:	0f 84 e6 02 00 00    	je     4130de <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xa2e>
  412df8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  412dfd:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  412e02:	48 05 00 04 00 00    	add    $0x400,%rax
  412e08:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  412e0f:	00 
			State state2 = getState(i, solution, s.time);
  412e10:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  412e17:	ff ff ff 
  412e1a:	4c 01 f0             	add    %r14,%rax
  412e1d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            auto tup = new std::tuple<Args...>(args...);
  412e22:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  412e29:	ff ff ff 
  412e2c:	4c 01 f0             	add    %r14,%rax
  412e2f:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  412e36:	00 
  412e37:	48 89 f8             	mov    %rdi,%rax
  412e3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
          Cost tentative_gScore = current.gScore + neighbor.cost;
  412e40:	8b 78 10             	mov    0x10(%rax),%edi
  412e43:	8b 68 04             	mov    0x4(%rax),%ebp
	for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  412e46:	45 31 ff             	xor    %r15d,%r15d
      { return *(this->_M_impl._M_start + __n); }
  412e49:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
  412e4e:	4c 8b a4 24 88 00 00 	mov    0x88(%rsp),%r12
  412e55:	00 
	int numConflicts = 0;
  412e56:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%rsp)
  412e5d:	00 
  412e5e:	89 7c 24 58          	mov    %edi,0x58(%rsp)
  412e62:	03 bc 24 f0 04 00 00 	add    0x4f0(%rsp),%edi
  412e69:	89 fe                	mov    %edi,%esi
  412e6b:	89 7c 24 64          	mov    %edi,0x64(%rsp)
  412e6f:	48 89 c7             	mov    %rax,%rdi
  412e72:	8b 40 08             	mov    0x8(%rax),%eax
  412e75:	4c 63 2f             	movslq (%rdi),%r13
  412e78:	41 89 c3             	mov    %eax,%r11d
  412e7b:	89 44 24 60          	mov    %eax,0x60(%rsp)
  412e7f:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  412e84:	44 89 6c 24 74       	mov    %r13d,0x74(%rsp)
  412e89:	48 03 10             	add    (%rax),%rdx
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  412e8c:	89 e8                	mov    %ebp,%eax
  412e8e:	2b 02                	sub    (%rdx),%eax
  412e90:	89 c1                	mov    %eax,%ecx
  412e92:	c1 f9 1f             	sar    $0x1f,%ecx
  412e95:	31 c8                	xor    %ecx,%eax
  412e97:	29 c8                	sub    %ecx,%eax
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  412e99:	44 89 d9             	mov    %r11d,%ecx
  412e9c:	2b 4a 04             	sub    0x4(%rdx),%ecx
  412e9f:	89 ca                	mov    %ecx,%edx
  412ea1:	c1 f9 1f             	sar    $0x1f,%ecx
  412ea4:	31 ca                	xor    %ecx,%edx
  412ea6:	29 ca                	sub    %ecx,%edx
  412ea8:	01 d0                	add    %edx,%eax
                tentative_gScore + m_env.admissibleHeuristic(neighbor.state); 
  412eaa:	01 f0                	add    %esi,%eax
  412eac:	89 44 24 40          	mov    %eax,0x40(%rsp)
                current.focalHeuristic +
  412eb0:	8b 84 24 f4 04 00 00 	mov    0x4f4(%rsp),%eax
  412eb7:	89 44 24 70          	mov    %eax,0x70(%rsp)
  412ebb:	4c 89 e0             	mov    %r12,%rax
  412ebe:	49 89 dc             	mov    %rbx,%r12
  412ec1:	4c 89 fb             	mov    %r15,%rbx
  412ec4:	49 89 c7             	mov    %rax,%r15
  412ec7:	eb 18                	jmp    412ee1 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x831>
  412ec9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  412ed0:	48 83 c3 01          	add    $0x1,%rbx
  412ed4:	49 81 c7 50 06 00 00 	add    $0x650,%r15
  412edb:	48 83 fb 14          	cmp    $0x14,%rbx
  412edf:	74 4f                	je     412f30 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x880>
		if (i != m_agentIdx && solution[i].states_size > 0) {
  412ee1:	49 39 dc             	cmp    %rbx,%r12
  412ee4:	74 ea                	je     412ed0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x820>
  412ee6:	49 83 3f 00          	cmpq   $0x0,(%r15)
  412eea:	74 e4                	je     412ed0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x820>
			State state2 = getState(i, solution, s.time);
  412eec:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  412ef1:	4c 89 ea             	mov    %r13,%rdx
  412ef4:	48 89 df             	mov    %rbx,%rdi
  412ef7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  412efc:	ff d0                	callq  *%rax
  412efe:	48 89 c7             	mov    %rax,%rdi
  412f01:	48 89 84 24 94 00 00 	mov    %rax,0x94(%rsp)
  412f08:	00 
  412f09:	89 94 24 9c 00 00 00 	mov    %edx,0x9c(%rsp)
  412f10:	48 c1 ef 20          	shr    $0x20,%rdi
  412f14:	39 fd                	cmp    %edi,%ebp
  412f16:	75 b8                	jne    412ed0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x820>
				++numConflicts;
  412f18:	8b 44 24 60          	mov    0x60(%rsp),%eax
  412f1c:	39 d0                	cmp    %edx,%eax
  412f1e:	0f 94 c0             	sete   %al
  412f21:	0f b6 c0             	movzbl %al,%eax
  412f24:	01 44 24 28          	add    %eax,0x28(%rsp)
  412f28:	eb a6                	jmp    412ed0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x820>
  412f2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  412f30:	4d 89 e8             	mov    %r13,%r8
  412f33:	4c 89 e3             	mov    %r12,%rbx
  412f36:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  412f3b:	44 8b 64 24 70       	mov    0x70(%rsp),%r12d
  412f40:	49 c1 e0 04          	shl    $0x4,%r8
  412f44:	44 03 64 24 28       	add    0x28(%rsp),%r12d
    int numConflicts = 0;
  412f49:	45 31 c9             	xor    %r9d,%r9d
    for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  412f4c:	31 d2                	xor    %edx,%edx
  412f4e:	eb 11                	jmp    412f61 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x8b1>
  412f50:	48 83 c2 01          	add    $0x1,%rdx
  412f54:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
  412f5b:	48 83 fa 14          	cmp    $0x14,%rdx
  412f5f:	74 7f                	je     412fe0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x930>
      if (i != m_agentIdx && solution[i].states_size > 0) {
  412f61:	48 39 d3             	cmp    %rdx,%rbx
  412f64:	74 ea                	je     412f50 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x8a0>
  412f66:	48 8b 81 00 04 00 00 	mov    0x400(%rcx),%rax
  412f6d:	48 85 c0             	test   %rax,%rax
  412f70:	74 de                	je     412f50 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x8a0>
        State s2a = getState(i, solution, s1a.time);
  412f72:	48 63 b4 24 e0 04 00 	movslq 0x4e0(%rsp),%rsi
  412f79:	00 
	if (t < solution[agentIdx].states_size) {
  412f7a:	48 39 f0             	cmp    %rsi,%rax
  412f7d:	77 04                	ja     412f83 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x8d3>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  412f7f:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  412f83:	48 c1 e6 04          	shl    $0x4,%rsi
  412f87:	48 01 ce             	add    %rcx,%rsi
	if (t < solution[agentIdx].states_size) {
  412f8a:	4c 39 e8             	cmp    %r13,%rax
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  412f8d:	8b 7e 04             	mov    0x4(%rsi),%edi
  412f90:	8b 76 08             	mov    0x8(%rsi),%esi
	if (t < solution[agentIdx].states_size) {
  412f93:	77 3b                	ja     412fd0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x920>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  412f95:	48 83 e8 01          	sub    $0x1,%rax
  412f99:	48 c1 e0 04          	shl    $0x4,%rax
  412f9d:	48 01 c8             	add    %rcx,%rax
  412fa0:	44 8b 50 04          	mov    0x4(%rax),%r10d
  412fa4:	8b 40 08             	mov    0x8(%rax),%eax
  412fa7:	44 3b 94 24 e4 04 00 	cmp    0x4e4(%rsp),%r10d
  412fae:	00 
  412faf:	75 9f                	jne    412f50 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x8a0>
  412fb1:	39 84 24 e8 04 00 00 	cmp    %eax,0x4e8(%rsp)
  412fb8:	75 96                	jne    412f50 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x8a0>
  412fba:	39 fd                	cmp    %edi,%ebp
  412fbc:	75 92                	jne    412f50 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x8a0>
          ++numConflicts;
  412fbe:	31 c0                	xor    %eax,%eax
  412fc0:	39 74 24 60          	cmp    %esi,0x60(%rsp)
  412fc4:	0f 94 c0             	sete   %al
  412fc7:	41 01 c1             	add    %eax,%r9d
  412fca:	eb 84                	jmp    412f50 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x8a0>
  412fcc:	0f 1f 40 00          	nopl   0x0(%rax)
		return solution[agentIdx].states[t].state;
  412fd0:	46 8b 54 01 04       	mov    0x4(%rcx,%r8,1),%r10d
  412fd5:	42 8b 44 01 08       	mov    0x8(%rcx,%r8,1),%eax
  412fda:	eb cb                	jmp    412fa7 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x8f7>
  412fdc:	0f 1f 40 00          	nopl   0x0(%rax)
            swarm::enqueue(LL_pll,fScore ,EnqFlags::NOHINT, tmp,prevv,m_env);  
  412fe0:	48 63 7c 24 40       	movslq 0x40(%rsp),%rdi
            prevv.neighbor=neighbor;
  412fe5:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                                               tentative_gScore);
  412fea:	45 01 cc             	add    %r9d,%r12d
  412fed:	4d 89 f7             	mov    %r14,%r15
  412ff0:	48 8b 8c 24 80 00 00 	mov    0x80(%rsp),%rcx
  412ff7:	00 
            prevv.neighbor=neighbor;
  412ff8:	44 8b 68 0c          	mov    0xc(%rax),%r13d
            swarm::enqueue(LL_pll,fScore ,EnqFlags::NOHINT, tmp,prevv,m_env);  
  412ffc:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  413001:	bf 88 00 00 00       	mov    $0x88,%edi
  413006:	ff d1                	callq  *%rcx
  413008:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  41300d:	44 8b 44 24 58       	mov    0x58(%rsp),%r8d
  413012:	8b 74 24 60          	mov    0x60(%rsp),%esi
  413016:	8b 54 24 40          	mov    0x40(%rsp),%edx
  41301a:	44 8b 5c 24 64       	mov    0x64(%rsp),%r11d
  41301f:	48 89 58 08          	mov    %rbx,0x8(%rax)
  413023:	48 89 08             	mov    %rcx,(%rax)
  413026:	48 8b 4c 24 50       	mov    0x50(%rsp),%rcx
  41302b:	44 89 40 54          	mov    %r8d,0x54(%rax)
  41302f:	44 8b 44 24 30       	mov    0x30(%rsp),%r8d
  413034:	89 70 30             	mov    %esi,0x30(%rax)
  413037:	89 50 34             	mov    %edx,0x34(%rax)
  41303a:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41303e:	8b 4c 24 48          	mov    0x48(%rsp),%ecx
  413042:	44 89 40 5c          	mov    %r8d,0x5c(%rax)
  413046:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
  41304b:	89 70 4c             	mov    %esi,0x4c(%rax)
  41304e:	89 68 2c             	mov    %ebp,0x2c(%rax)
  413051:	89 48 18             	mov    %ecx,0x18(%rax)
  413054:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  413059:	44 89 58 38          	mov    %r11d,0x38(%rax)
  41305d:	44 89 60 3c          	mov    %r12d,0x3c(%rax)
  413061:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)
  413068:	89 68 48             	mov    %ebp,0x48(%rax)
  41306b:	48 89 48 20          	mov    %rcx,0x20(%rax)
  41306f:	8b 4c 24 74          	mov    0x74(%rsp),%ecx
  413073:	44 89 68 50          	mov    %r13d,0x50(%rax)
  413077:	44 89 58 58          	mov    %r11d,0x58(%rax)
  41307b:	4c 89 40 60          	mov    %r8,0x60(%rax)
  41307f:	89 48 28             	mov    %ecx,0x28(%rax)
  413082:	89 48 44             	mov    %ecx,0x44(%rax)
  413085:	89 48 68             	mov    %ecx,0x68(%rax)
  413088:	89 68 6c             	mov    %ebp,0x6c(%rax)
            :);
  41308b:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  413090:	89 50 74             	mov    %edx,0x74(%rax)
  413093:	48 ba 90 29 df ff ff 	movabs $0xffffffffffdf2990,%rdx
  41309a:	ff ff ff 
  41309d:	89 70 70             	mov    %esi,0x70(%rax)
  4130a0:	44 89 58 78          	mov    %r11d,0x78(%rax)
  4130a4:	44 89 60 7c          	mov    %r12d,0x7c(%rax)
  4130a8:	4c 01 f2             	add    %r14,%rdx
  4130ab:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%rax)
  4130b2:	00 00 00 
  4130b5:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  4130ba:	48 89 c6             	mov    %rax,%rsi
  4130bd:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  4130c0:	48 83 44 24 20 14    	addq   $0x14,0x20(%rsp)
  4130c6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  4130cb:	48 39 44 24 78       	cmp    %rax,0x78(%rsp)
  4130d0:	0f 85 6a fd ff ff    	jne    412e40 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x790>
  4130d6:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  4130dd:	00 
	if (__p)
  4130de:	48 85 ff             	test   %rdi,%rdi
  4130e1:	0f 84 f9 f6 ff ff    	je     4127e0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x130>
  4130e7:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4130ee:	ff ff ff 
  4130f1:	4d 89 f7             	mov    %r14,%r15
  4130f4:	4c 01 f0             	add    %r14,%rax
  4130f7:	ff d0                	callq  *%rax
  4130f9:	e9 e2 f6 ff ff       	jmpq   4127e0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x130>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4130fe:	48 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%rdi
  413105:	00 
  413106:	48 89 c3             	mov    %rax,%rbx
	if (__p)
  413109:	48 85 ff             	test   %rdi,%rdi
  41310c:	74 12                	je     413120 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xa70>
  41310e:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  413115:	ff ff ff 
  413118:	4d 89 f7             	mov    %r14,%r15
  41311b:	4c 01 f2             	add    %r14,%rdx
  41311e:	ff d2                	callq  *%rdx
  413120:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  413127:	ff ff ff 
  41312a:	48 89 df             	mov    %rbx,%rdi
  41312d:	4d 89 f7             	mov    %r14,%r15
  413130:	4c 01 f0             	add    %r14,%rax
  413133:	ff d0                	callq  *%rax
  413135:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41313c:	00 00 00 
  41313f:	90                   	nop

0000000000413140 <_ZNKSt5ctypeIcE8do_widenEc>:
       *  @param __c  The char to convert.
       *  @return  The converted character.
      */
      virtual char_type
      do_widen(char __c) const
      { return __c; }
  413140:	89 f0                	mov    %esi,%eax
  413142:	c3                   	retq   
  413143:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41314a:	00 00 00 
  41314d:	0f 1f 00             	nopl   (%rax)

0000000000413150 <_ZNK5boost16bad_lexical_cast4whatEv>:
        virtual const char *what() const BOOST_NOEXCEPT_OR_NOTHROW {
  413150:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413150 <_ZNK5boost16bad_lexical_cast4whatEv>
  413157:	49 bb b0 7e 21 00 00 	movabs $0x217eb0,%r11
  41315e:	00 00 00 
                   "source type value could not be interpreted as target";
  413161:	48 ba 48 7c df ff ff 	movabs $0xffffffffffdf7c48,%rdx
  413168:	ff ff ff 
  41316b:	4c 01 d8             	add    %r11,%rax
  41316e:	48 01 d0             	add    %rdx,%rax
        }
  413171:	c3                   	retq   
  413172:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413179:	00 00 00 
  41317c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413180 <_ZN5boost6detail15sp_counted_base7destroyEv>:

    // destroy() is called when weak_count_ drops to zero.

    virtual void destroy() // nothrow
    {
        delete this;
  413180:	48 8b 07             	mov    (%rdi),%rax
  413183:	ff 60 08             	jmpq   *0x8(%rax)
  413186:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41318d:	00 00 00 

0000000000413190 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE6setbufEPcl>:
	_M_in_beg = __gbeg;
  413190:	48 89 77 08          	mov    %rsi,0x8(%rdi)
	_M_in_cur = __gnext;
  413194:	48 89 77 10          	mov    %rsi,0x10(%rdi)

template<class charT, class BufferT>
BufferT*
basic_pointerbuf<charT, BufferT>::setbuf(char_type* s, streamsize n)
{
   this->setg(s, s, s + n);
  413198:	48 01 d6             	add    %rdx,%rsi
basic_pointerbuf<charT, BufferT>::setbuf(char_type* s, streamsize n)
  41319b:	48 89 f8             	mov    %rdi,%rax
   this->setg(s, s, s + n);
  41319e:	48 89 77 18          	mov    %rsi,0x18(%rdi)
   return this;
}
  4131a2:	c3                   	retq   
  4131a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4131aa:	00 00 00 
  4131ad:	0f 1f 00             	nopl   (%rax)

00000000004131b0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEED1Ev>:

template<class D> D * get_local_deleter( local_sp_deleter<D> * p );

//

template<class X> class sp_counted_impl_p: public sp_counted_base
  4131b0:	f3 c3                	repz retq 
  4131b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4131b9:	00 00 00 
  4131bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004131c0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEED1Ev>:
  4131c0:	f3 c3                	repz retq 
  4131c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4131c9:	00 00 00 
  4131cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004131d0 <_ZN5boost3any6holderIfED1Ev>:
        class holder : public placeholder
  4131d0:	f3 c3                	repz retq 
  4131d2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4131d9:	00 00 00 
  4131dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004131e0 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode>:
typename basic_pointerbuf<charT, BufferT>::pos_type
basic_pointerbuf<charT, BufferT>::seekoff(off_type off, ::std::ios_base::seekdir way, ::std::ios_base::openmode which)
{
   typedef typename boost::int_t<sizeof(way) * CHAR_BIT>::least cast_type;

   if(which & ::std::ios_base::out)
  4131e0:	83 e1 10             	and    $0x10,%ecx
  4131e3:	75 43                	jne    413228 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  4131e5:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
      return pos_type(off_type(-1));
   std::ptrdiff_t size = this->egptr() - this->eback();
  4131e9:	4c 8b 47 18          	mov    0x18(%rdi),%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  4131ed:	48 8b 47 10          	mov    0x10(%rdi),%rax
   std::ptrdiff_t size = this->egptr() - this->eback();
  4131f1:	49 29 c8             	sub    %rcx,%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  4131f4:	48 29 c8             	sub    %rcx,%rax
   charT* g = this->eback();
   switch(static_cast<cast_type>(way))
  4131f7:	83 fa 01             	cmp    $0x1,%edx
  4131fa:	74 3c                	je     413238 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x58>
  4131fc:	72 52                	jb     413250 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x70>
  4131fe:	83 fa 02             	cmp    $0x2,%edx
  413201:	75 1d                	jne    413220 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
         return pos_type(off_type(-1));
      else
         this->setg(g, g + off, g + size);
      break;
   case ::std::ios_base::end:
      if((off < 0) || (off > size))
  413203:	48 89 f0             	mov    %rsi,%rax
  413206:	48 c1 e8 3f          	shr    $0x3f,%rax
  41320a:	84 c0                	test   %al,%al
  41320c:	75 1a                	jne    413228 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41320e:	49 39 f0             	cmp    %rsi,%r8
  413211:	7c 15                	jl     413228 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         return pos_type(off_type(-1));
      else
         this->setg(g, g + size - off, g + size);
  413213:	4c 89 c0             	mov    %r8,%rax
  413216:	48 29 f0             	sub    %rsi,%rax
  413219:	48 01 c1             	add    %rax,%rcx
  41321c:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
   }
#ifdef BOOST_MSVC
#pragma warning(push)
#pragma warning(disable:4244)
#endif
   return static_cast<pos_type>(this->gptr() - this->eback());
  413220:	31 d2                	xor    %edx,%edx
#ifdef BOOST_MSVC
#pragma warning(pop)
#endif
}
  413222:	c3                   	retq   
  413223:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return pos_type(off_type(-1));
  413228:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  41322f:	31 d2                	xor    %edx,%edx
  413231:	c3                   	retq   
  413232:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if((newpos < 0) || (newpos > size))
  413238:	48 01 f0             	add    %rsi,%rax
  41323b:	78 eb                	js     413228 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41323d:	49 39 c0             	cmp    %rax,%r8
  413240:	7c e6                	jl     413228 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + newpos, g + size);
  413242:	48 01 c1             	add    %rax,%rcx
  413245:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  413249:	eb d5                	jmp    413220 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  41324b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      if((off < 0) || (off > size))
  413250:	48 89 f0             	mov    %rsi,%rax
  413253:	48 c1 e8 3f          	shr    $0x3f,%rax
  413257:	84 c0                	test   %al,%al
  413259:	75 cd                	jne    413228 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41325b:	49 39 f0             	cmp    %rsi,%r8
  41325e:	7c c8                	jl     413228 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + off, g + size);
  413260:	48 01 f1             	add    %rsi,%rcx
  413263:	48 89 f0             	mov    %rsi,%rax
  413266:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  41326a:	eb b4                	jmp    413220 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  41326c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413270 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode>:

template<class charT, class BufferT>
typename basic_pointerbuf<charT, BufferT>::pos_type
basic_pointerbuf<charT, BufferT>::seekpos(pos_type sp, ::std::ios_base::openmode which)
{
   if(which & ::std::ios_base::out)
  413270:	83 e1 10             	and    $0x10,%ecx
  413273:	75 17                	jne    41328c <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
  413275:	48 8b 57 08          	mov    0x8(%rdi),%rdx
      return pos_type(off_type(-1));
   off_type size = static_cast<off_type>(this->egptr() - this->eback());
  413279:	48 8b 47 18          	mov    0x18(%rdi),%rax
  41327d:	48 29 d0             	sub    %rdx,%rax
   charT* g = this->eback();
   if(off_type(sp) <= size)
  413280:	48 39 f0             	cmp    %rsi,%rax
  413283:	7c 07                	jl     41328c <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
   {
      this->setg(g, g + off_type(sp), g + size);
  413285:	48 01 f2             	add    %rsi,%rdx
  413288:	48 89 57 10          	mov    %rdx,0x10(%rdi)
   }
   return pos_type(off_type(-1));
}
  41328c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  413293:	31 d2                	xor    %edx,%edx
  413295:	c3                   	retq   
  413296:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41329d:	00 00 00 

00000000004132a0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE11get_deleterERKSt9type_info>:
    }

    virtual void * get_deleter( sp_typeinfo const & )
    {
        return 0;
    }
  4132a0:	31 c0                	xor    %eax,%eax
  4132a2:	c3                   	retq   
  4132a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4132aa:	00 00 00 
  4132ad:	0f 1f 00             	nopl   (%rax)

00000000004132b0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE17get_local_deleterERKSt9type_info>:

    virtual void * get_local_deleter( sp_typeinfo const & )
    {
        return 0;
    }
  4132b0:	31 c0                	xor    %eax,%eax
  4132b2:	c3                   	retq   
  4132b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4132ba:	00 00 00 
  4132bd:	0f 1f 00             	nopl   (%rax)

00000000004132c0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE19get_untyped_deleterEv>:

    virtual void * get_untyped_deleter()
    {
        return 0;
    }
  4132c0:	31 c0                	xor    %eax,%eax
  4132c2:	c3                   	retq   
  4132c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4132ca:	00 00 00 
  4132cd:	0f 1f 00             	nopl   (%rax)

00000000004132d0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE11get_deleterERKSt9type_info>:
    }
  4132d0:	31 c0                	xor    %eax,%eax
  4132d2:	c3                   	retq   
  4132d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4132da:	00 00 00 
  4132dd:	0f 1f 00             	nopl   (%rax)

00000000004132e0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE17get_local_deleterERKSt9type_info>:
    }
  4132e0:	31 c0                	xor    %eax,%eax
  4132e2:	c3                   	retq   
  4132e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4132ea:	00 00 00 
  4132ed:	0f 1f 00             	nopl   (%rax)

00000000004132f0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE19get_untyped_deleterEv>:
    }
  4132f0:	31 c0                	xor    %eax,%eax
  4132f2:	c3                   	retq   
  4132f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4132fa:	00 00 00 
  4132fd:	0f 1f 00             	nopl   (%rax)

0000000000413300 <_ZNK5boost3any6holderIfE4typeEv>:
            {
            }
#endif
        public: // queries

            virtual const boost::typeindex::type_info& type() const BOOST_NOEXCEPT
  413300:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413300 <_ZNK5boost3any6holderIfE4typeEv>
  413307:	49 bb 00 7d 21 00 00 	movabs $0x217d00,%r11
  41330e:	00 00 00 
            {
                return boost::typeindex::type_id<ValueType>().type_info();
  413311:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  413318:	ff ff ff 
  41331b:	4c 01 d8             	add    %r11,%rax
  41331e:	48 8b 04 10          	mov    (%rax,%rdx,1),%rax
            }
  413322:	c3                   	retq   
  413323:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41332a:	00 00 00 
  41332d:	0f 1f 00             	nopl   (%rax)

0000000000413330 <_ZNK5boost15program_options11typed_valueIfcE10min_tokensEv>:

        std::string name() const;

        bool is_composing() const { return m_composing; }

        unsigned min_tokens() const
  413330:	31 c0                	xor    %eax,%eax
        {
            if (m_zero_tokens || !m_implicit_value.empty()) {
  413332:	80 bf 8b 00 00 00 00 	cmpb   $0x0,0x8b(%rdi)
  413339:	75 08                	jne    413343 <_ZNK5boost15program_options11typed_valueIfcE10min_tokensEv+0x13>
  41333b:	48 83 7f 60 00       	cmpq   $0x0,0x60(%rdi)
  413340:	0f 94 c0             	sete   %al
  413343:	0f b6 c0             	movzbl %al,%eax
                return 0;
            } else {
                return 1;
            }
        }
  413346:	c3                   	retq   
  413347:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41334e:	00 00 

0000000000413350 <_ZNK5boost15program_options11typed_valueIfcE10max_tokensEv>:

        unsigned max_tokens() const {
            if (m_multitoken) {
  413350:	80 bf 8a 00 00 00 00 	cmpb   $0x0,0x8a(%rdi)
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  413357:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
            if (m_multitoken) {
  41335c:	74 02                	je     413360 <_ZNK5boost15program_options11typed_valueIfcE10max_tokensEv+0x10>
            } else if (m_zero_tokens) {
                return 0;
            } else {
                return 1;
            }
        }
  41335e:	f3 c3                	repz retq 
            } else if (m_zero_tokens) {
  413360:	0f b6 87 8b 00 00 00 	movzbl 0x8b(%rdi),%eax
  413367:	83 f0 01             	xor    $0x1,%eax
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  41336a:	0f b6 c0             	movzbl %al,%eax
        }
  41336d:	c3                   	retq   
  41336e:	66 90                	xchg   %ax,%ax

0000000000413370 <_ZNK5boost15program_options11typed_valueIfcE12is_composingEv>:
        bool is_composing() const { return m_composing; }
  413370:	0f b6 87 88 00 00 00 	movzbl 0x88(%rdi),%eax
  413377:	c3                   	retq   
  413378:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41337f:	00 

0000000000413380 <_ZNK5boost15program_options11typed_valueIfcE11is_requiredEv>:

        bool is_required() const { return m_required; }
  413380:	0f b6 87 8c 00 00 00 	movzbl 0x8c(%rdi),%eax
  413387:	c3                   	retq   
  413388:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41338f:	00 

0000000000413390 <_ZNK5boost15program_options11typed_valueIfcE10value_typeEv>:
        void notify(const boost::any& value_store) const;

    public: // typed_value_base overrides
        
#ifndef BOOST_NO_RTTI
        const std::type_info& value_type() const
  413390:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413390 <_ZNK5boost15program_options11typed_valueIfcE10value_typeEv>
  413397:	49 bb 70 7c 21 00 00 	movabs $0x217c70,%r11
  41339e:	00 00 00 
        {
            return typeid(T);
  4133a1:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  4133a8:	ff ff ff 
  4133ab:	4c 01 d8             	add    %r11,%rax
  4133ae:	48 8b 04 10          	mov    (%rax,%rdx,1),%rax
        }
  4133b2:	c3                   	retq   
  4133b3:	0f 1f 00             	nopl   (%rax)
  4133b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4133bd:	00 00 00 

00000000004133c0 <_ZThn8_NK5boost15program_options11typed_valueIfcE10value_typeEv>:
        const std::type_info& value_type() const
  4133c0:	48 83 ef 08          	sub    $0x8,%rdi
  4133c4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4133c4 <_ZThn8_NK5boost15program_options11typed_valueIfcE10value_typeEv+0x4>
  4133cb:	49 ba 3c 7c 21 00 00 	movabs $0x217c3c,%r10
  4133d2:	00 00 00 
  4133d5:	4d 01 d3             	add    %r10,%r11
  4133d8:	49 ba 90 83 de ff ff 	movabs $0xffffffffffde8390,%r10
  4133df:	ff ff ff 
  4133e2:	4d 01 da             	add    %r11,%r10
  4133e5:	41 ff e2             	jmpq   *%r10
  4133e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4133ef:	00 

00000000004133f0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10min_tokensEv>:
        unsigned min_tokens() const
  4133f0:	31 c0                	xor    %eax,%eax
            if (m_zero_tokens || !m_implicit_value.empty()) {
  4133f2:	80 bf 8b 00 00 00 00 	cmpb   $0x0,0x8b(%rdi)
  4133f9:	75 08                	jne    413403 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10min_tokensEv+0x13>
  4133fb:	48 83 7f 60 00       	cmpq   $0x0,0x60(%rdi)
  413400:	0f 94 c0             	sete   %al
  413403:	0f b6 c0             	movzbl %al,%eax
        }
  413406:	c3                   	retq   
  413407:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41340e:	00 00 

0000000000413410 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10max_tokensEv>:
            if (m_multitoken) {
  413410:	80 bf 8a 00 00 00 00 	cmpb   $0x0,0x8a(%rdi)
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  413417:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
            if (m_multitoken) {
  41341c:	74 02                	je     413420 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10max_tokensEv+0x10>
        }
  41341e:	f3 c3                	repz retq 
            } else if (m_zero_tokens) {
  413420:	0f b6 87 8b 00 00 00 	movzbl 0x8b(%rdi),%eax
  413427:	83 f0 01             	xor    $0x1,%eax
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  41342a:	0f b6 c0             	movzbl %al,%eax
        }
  41342d:	c3                   	retq   
  41342e:	66 90                	xchg   %ax,%ax

0000000000413430 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE12is_composingEv>:
        bool is_composing() const { return m_composing; }
  413430:	0f b6 87 88 00 00 00 	movzbl 0x88(%rdi),%eax
  413437:	c3                   	retq   
  413438:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41343f:	00 

0000000000413440 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE11is_requiredEv>:
        bool is_required() const { return m_required; }
  413440:	0f b6 87 8c 00 00 00 	movzbl 0x8c(%rdi),%eax
  413447:	c3                   	retq   
  413448:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41344f:	00 

0000000000413450 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv>:
        const std::type_info& value_type() const
  413450:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413450 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv>
  413457:	49 bb b0 7b 21 00 00 	movabs $0x217bb0,%r11
  41345e:	00 00 00 
            return typeid(T);
  413461:	48 ba 60 f8 ff ff ff 	movabs $0xfffffffffffff860,%rdx
  413468:	ff ff ff 
  41346b:	4c 01 d8             	add    %r11,%rax
  41346e:	48 01 d0             	add    %rdx,%rax
        }
  413471:	c3                   	retq   
  413472:	0f 1f 40 00          	nopl   0x0(%rax)
  413476:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41347d:	00 00 00 

0000000000413480 <_ZThn8_NK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv>:
        const std::type_info& value_type() const
  413480:	48 83 ef 08          	sub    $0x8,%rdi
  413484:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413484 <_ZThn8_NK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv+0x4>
  41348b:	49 ba 7c 7b 21 00 00 	movabs $0x217b7c,%r10
  413492:	00 00 00 
  413495:	4d 01 d3             	add    %r10,%r11
  413498:	49 ba 50 84 de ff ff 	movabs $0xffffffffffde8450,%r10
  41349f:	ff ff ff 
  4134a2:	4d 01 da             	add    %r11,%r10
  4134a5:	41 ff e2             	jmpq   *%r10
  4134a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4134af:	00 

00000000004134b0 <_ZN5boost9function1IvRKfE5dummy7nonnullEv>:
    // Sun C++ 5.3 can't handle the safe_bool idiom, so don't use it
    operator bool () const { return !this->empty(); }
#else
  private:
    struct dummy {
      void nonnull() {}
  4134b0:	f3 c3                	repz retq 
  4134b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4134b9:	00 00 00 
  4134bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004134c0 <_ZN5boost9function1IvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5dummy7nonnullEv>:
  4134c0:	f3 c3                	repz retq 
  4134c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4134c9:	00 00 00 
  4134cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004134d0 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE6setbufEPcl>:
	_M_in_beg = __gbeg;
  4134d0:	48 89 77 08          	mov    %rsi,0x8(%rdi)
	_M_in_cur = __gnext;
  4134d4:	48 89 77 10          	mov    %rsi,0x10(%rdi)
   this->setg(s, s, s + n);
  4134d8:	48 01 d6             	add    %rdx,%rsi
basic_pointerbuf<charT, BufferT>::setbuf(char_type* s, streamsize n)
  4134db:	48 89 f8             	mov    %rdi,%rax
   this->setg(s, s, s + n);
  4134de:	48 89 77 18          	mov    %rsi,0x18(%rdi)
}
  4134e2:	c3                   	retq   
  4134e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4134ea:	00 00 00 
  4134ed:	0f 1f 00             	nopl   (%rax)

00000000004134f0 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode>:
   if(which & ::std::ios_base::out)
  4134f0:	83 e1 10             	and    $0x10,%ecx
  4134f3:	75 43                	jne    413538 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  4134f5:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
   std::ptrdiff_t size = this->egptr() - this->eback();
  4134f9:	4c 8b 47 18          	mov    0x18(%rdi),%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  4134fd:	48 8b 47 10          	mov    0x10(%rdi),%rax
   std::ptrdiff_t size = this->egptr() - this->eback();
  413501:	49 29 c8             	sub    %rcx,%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  413504:	48 29 c8             	sub    %rcx,%rax
   switch(static_cast<cast_type>(way))
  413507:	83 fa 01             	cmp    $0x1,%edx
  41350a:	74 3c                	je     413548 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x58>
  41350c:	72 52                	jb     413560 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x70>
  41350e:	83 fa 02             	cmp    $0x2,%edx
  413511:	75 1d                	jne    413530 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
      if((off < 0) || (off > size))
  413513:	48 89 f0             	mov    %rsi,%rax
  413516:	48 c1 e8 3f          	shr    $0x3f,%rax
  41351a:	84 c0                	test   %al,%al
  41351c:	75 1a                	jne    413538 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41351e:	49 39 f0             	cmp    %rsi,%r8
  413521:	7c 15                	jl     413538 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + size - off, g + size);
  413523:	4c 89 c0             	mov    %r8,%rax
  413526:	48 29 f0             	sub    %rsi,%rax
  413529:	48 01 c1             	add    %rax,%rcx
  41352c:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
   return static_cast<pos_type>(this->gptr() - this->eback());
  413530:	31 d2                	xor    %edx,%edx
}
  413532:	c3                   	retq   
  413533:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return pos_type(off_type(-1));
  413538:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  41353f:	31 d2                	xor    %edx,%edx
  413541:	c3                   	retq   
  413542:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if((newpos < 0) || (newpos > size))
  413548:	48 01 f0             	add    %rsi,%rax
  41354b:	78 eb                	js     413538 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41354d:	49 39 c0             	cmp    %rax,%r8
  413550:	7c e6                	jl     413538 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + newpos, g + size);
  413552:	48 01 c1             	add    %rax,%rcx
  413555:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  413559:	eb d5                	jmp    413530 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  41355b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      if((off < 0) || (off > size))
  413560:	48 89 f0             	mov    %rsi,%rax
  413563:	48 c1 e8 3f          	shr    $0x3f,%rax
  413567:	84 c0                	test   %al,%al
  413569:	75 cd                	jne    413538 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41356b:	49 39 f0             	cmp    %rsi,%r8
  41356e:	7c c8                	jl     413538 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + off, g + size);
  413570:	48 01 f1             	add    %rsi,%rcx
  413573:	48 89 f0             	mov    %rsi,%rax
  413576:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  41357a:	eb b4                	jmp    413530 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  41357c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413580 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode>:
   if(which & ::std::ios_base::out)
  413580:	83 e1 10             	and    $0x10,%ecx
  413583:	75 17                	jne    41359c <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
  413585:	48 8b 57 08          	mov    0x8(%rdi),%rdx
   off_type size = static_cast<off_type>(this->egptr() - this->eback());
  413589:	48 8b 47 18          	mov    0x18(%rdi),%rax
  41358d:	48 29 d0             	sub    %rdx,%rax
   if(off_type(sp) <= size)
  413590:	48 39 f0             	cmp    %rsi,%rax
  413593:	7c 07                	jl     41359c <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
      this->setg(g, g + off_type(sp), g + size);
  413595:	48 01 f2             	add    %rsi,%rdx
  413598:	48 89 57 10          	mov    %rdx,0x10(%rdi)
}
  41359c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  4135a3:	31 d2                	xor    %edx,%edx
  4135a5:	c3                   	retq   
  4135a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4135ad:	00 00 00 

00000000004135b0 <_ZNK5boost3any6holderIfE5cloneEv>:

            virtual placeholder * clone() const
  4135b0:	41 57                	push   %r15
  4135b2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 4135b0 <_ZNK5boost3any6holderIfE5cloneEv>
  4135b9:	53                   	push   %rbx
  4135ba:	49 bb 50 7a 21 00 00 	movabs $0x217a50,%r11
  4135c1:	00 00 00 
            {
                return new holder(held);
  4135c4:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  4135cb:	ff ff ff 
            virtual placeholder * clone() const
  4135ce:	48 89 fb             	mov    %rdi,%rbx
  4135d1:	4d 01 df             	add    %r11,%r15
  4135d4:	48 83 ec 08          	sub    $0x8,%rsp
                return new holder(held);
  4135d8:	bf 10 00 00 00       	mov    $0x10,%edi
  4135dd:	4c 01 f8             	add    %r15,%rax
  4135e0:	ff d0                	callq  *%rax
              : held(value)
  4135e2:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  4135e9:	ff ff ff 
  4135ec:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
  4135f1:	4c 01 fa             	add    %r15,%rdx
  4135f4:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  4135f9:	48 89 10             	mov    %rdx,(%rax)
            }
  4135fc:	48 83 c4 08          	add    $0x8,%rsp
  413600:	5b                   	pop    %rbx
  413601:	41 5f                	pop    %r15
  413603:	c3                   	retq   
  413604:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41360b:	00 00 00 
  41360e:	66 90                	xchg   %ax,%ax

0000000000413610 <_ZNSt6vectorI5StateSaIS0_EED1Ev>:
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  413610:	48 8b 3f             	mov    (%rdi),%rdi
  413613:	48 8d 05 f6 ff ff ff 	lea    -0xa(%rip),%rax        # 413610 <_ZNSt6vectorI5StateSaIS0_EED1Ev>
  41361a:	49 bb f0 79 21 00 00 	movabs $0x2179f0,%r11
  413621:	00 00 00 
  413624:	4c 01 d8             	add    %r11,%rax
	if (__p)
  413627:	48 85 ff             	test   %rdi,%rdi
  41362a:	74 14                	je     413640 <_ZNSt6vectorI5StateSaIS0_EED1Ev+0x30>
      ~vector() _GLIBCXX_NOEXCEPT
  41362c:	41 57                	push   %r15
  41362e:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  413635:	ff ff ff 
		      _M_get_Tp_allocator()); }
  413638:	41 5f                	pop    %r15
  41363a:	48 01 c2             	add    %rax,%rdx
  41363d:	ff e2                	jmpq   *%rdx
  41363f:	90                   	nop
  413640:	f3 c3                	repz retq 
  413642:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413649:	00 00 00 
  41364c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413650 <_ZN5boost15program_options11typed_valueIfcED1Ev>:
    class typed_value : public value_semantic_codecvt_helper<charT>
  413650:	41 57                	push   %r15
  413652:	55                   	push   %rbp
  413653:	48 8d 2d f6 ff ff ff 	lea    -0xa(%rip),%rbp        # 413650 <_ZN5boost15program_options11typed_valueIfcED1Ev>
  41365a:	49 bb b0 79 21 00 00 	movabs $0x2179b0,%r11
  413661:	00 00 00 
  413664:	48 b8 90 fb ff ff ff 	movabs $0xfffffffffffffb90,%rax
  41366b:	ff ff ff 
  41366e:	53                   	push   %rbx
  41366f:	4c 01 dd             	add    %r11,%rbp
  413672:	48 89 fb             	mov    %rdi,%rbx
  413675:	48 01 e8             	add    %rbp,%rax
  413678:	48 89 07             	mov    %rax,(%rdi)
  41367b:	48 83 c0 70          	add    $0x70,%rax
  41367f:	48 89 47 08          	mov    %rax,0x8(%rdi)
      if (vtable) {
  413683:	48 8b 87 90 00 00 00 	mov    0x90(%rdi),%rax
  41368a:	48 85 c0             	test   %rax,%rax
  41368d:	74 04                	je     413693 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x43>
        if (!this->has_trivial_copy_and_destroy())
  41368f:	a8 01                	test   $0x1,%al
  413691:	74 7d                	je     413710 <_ZN5boost15program_options11typed_valueIfcED1Ev+0xc0>
  413693:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413697:	48 8d 43 78          	lea    0x78(%rbx),%rax
	if (!_M_is_local())
  41369b:	48 39 c7             	cmp    %rax,%rdi
  41369e:	74 12                	je     4136b2 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x62>
  4136a0:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4136a7:	ff ff ff 
  4136aa:	49 89 ef             	mov    %rbp,%r15
  4136ad:	48 01 e8             	add    %rbp,%rax
  4136b0:	ff d0                	callq  *%rax
            delete content;
  4136b2:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  4136b6:	48 85 ff             	test   %rdi,%rdi
  4136b9:	74 06                	je     4136c1 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x71>
  4136bb:	48 8b 07             	mov    (%rdi),%rax
  4136be:	ff 50 08             	callq  *0x8(%rax)
  4136c1:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4136c5:	48 8d 43 50          	lea    0x50(%rbx),%rax
	if (!_M_is_local())
  4136c9:	48 39 c7             	cmp    %rax,%rdi
  4136cc:	74 12                	je     4136e0 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x90>
  4136ce:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4136d5:	ff ff ff 
  4136d8:	49 89 ef             	mov    %rbp,%r15
  4136db:	48 01 e8             	add    %rbp,%rax
  4136de:	ff d0                	callq  *%rax
  4136e0:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
  4136e4:	48 85 ff             	test   %rdi,%rdi
  4136e7:	74 06                	je     4136ef <_ZN5boost15program_options11typed_valueIfcED1Ev+0x9f>
  4136e9:	48 8b 07             	mov    (%rdi),%rax
  4136ec:	ff 50 08             	callq  *0x8(%rax)
  4136ef:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4136f3:	48 83 c3 28          	add    $0x28,%rbx
	if (!_M_is_local())
  4136f7:	48 39 df             	cmp    %rbx,%rdi
  4136fa:	74 44                	je     413740 <_ZN5boost15program_options11typed_valueIfcED1Ev+0xf0>
  4136fc:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  413703:	ff ff ff 
  413706:	5b                   	pop    %rbx
  413707:	48 01 e8             	add    %rbp,%rax
  41370a:	5d                   	pop    %rbp
  41370b:	41 5f                	pop    %r15
  41370d:	ff e0                	jmpq   *%rax
  41370f:	90                   	nop
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  413710:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  413714:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  413717:	48 85 c0             	test   %rax,%rax
  41371a:	0f 84 73 ff ff ff    	je     413693 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x43>
          get_vtable()->clear(this->functor);
  413720:	48 8d bf 98 00 00 00 	lea    0x98(%rdi),%rdi
            base.manager(functor, functor, destroy_functor_tag);
  413727:	ba 02 00 00 00       	mov    $0x2,%edx
  41372c:	48 89 fe             	mov    %rdi,%rsi
  41372f:	ff d0                	callq  *%rax
  413731:	e9 5d ff ff ff       	jmpq   413693 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x43>
  413736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41373d:	00 00 00 
  413740:	5b                   	pop    %rbx
  413741:	5d                   	pop    %rbp
  413742:	41 5f                	pop    %r15
  413744:	c3                   	retq   
  413745:	90                   	nop
  413746:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41374d:	00 00 00 

0000000000413750 <_ZThn8_N5boost15program_options11typed_valueIfcED1Ev>:
  413750:	48 83 ef 08          	sub    $0x8,%rdi
  413754:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413754 <_ZThn8_N5boost15program_options11typed_valueIfcED1Ev+0x4>
  41375b:	49 ba ac 78 21 00 00 	movabs $0x2178ac,%r10
  413762:	00 00 00 
  413765:	4d 01 d3             	add    %r10,%r11
  413768:	49 ba 50 86 de ff ff 	movabs $0xffffffffffde8650,%r10
  41376f:	ff ff ff 
  413772:	4d 01 da             	add    %r11,%r10
  413775:	41 ff e2             	jmpq   *%r10
  413778:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41377f:	00 

0000000000413780 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev>:
  413780:	41 57                	push   %r15
  413782:	55                   	push   %rbp
  413783:	48 8d 2d f6 ff ff ff 	lea    -0xa(%rip),%rbp        # 413780 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev>
  41378a:	49 bb 80 78 21 00 00 	movabs $0x217880,%r11
  413791:	00 00 00 
  413794:	48 b8 f8 fa ff ff ff 	movabs $0xfffffffffffffaf8,%rax
  41379b:	ff ff ff 
  41379e:	53                   	push   %rbx
  41379f:	4c 01 dd             	add    %r11,%rbp
  4137a2:	48 89 fb             	mov    %rdi,%rbx
  4137a5:	48 01 e8             	add    %rbp,%rax
  4137a8:	48 89 07             	mov    %rax,(%rdi)
  4137ab:	48 83 c0 70          	add    $0x70,%rax
  4137af:	48 89 47 08          	mov    %rax,0x8(%rdi)
      if (vtable) {
  4137b3:	48 8b 87 90 00 00 00 	mov    0x90(%rdi),%rax
  4137ba:	48 85 c0             	test   %rax,%rax
  4137bd:	74 04                	je     4137c3 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x43>
        if (!this->has_trivial_copy_and_destroy())
  4137bf:	a8 01                	test   $0x1,%al
  4137c1:	74 7d                	je     413840 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0xc0>
  4137c3:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4137c7:	48 8d 43 78          	lea    0x78(%rbx),%rax
	if (!_M_is_local())
  4137cb:	48 39 c7             	cmp    %rax,%rdi
  4137ce:	74 12                	je     4137e2 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x62>
  4137d0:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4137d7:	ff ff ff 
  4137da:	49 89 ef             	mov    %rbp,%r15
  4137dd:	48 01 e8             	add    %rbp,%rax
  4137e0:	ff d0                	callq  *%rax
  4137e2:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  4137e6:	48 85 ff             	test   %rdi,%rdi
  4137e9:	74 06                	je     4137f1 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x71>
  4137eb:	48 8b 07             	mov    (%rdi),%rax
  4137ee:	ff 50 08             	callq  *0x8(%rax)
  4137f1:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4137f5:	48 8d 43 50          	lea    0x50(%rbx),%rax
	if (!_M_is_local())
  4137f9:	48 39 c7             	cmp    %rax,%rdi
  4137fc:	74 12                	je     413810 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x90>
  4137fe:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  413805:	ff ff ff 
  413808:	49 89 ef             	mov    %rbp,%r15
  41380b:	48 01 e8             	add    %rbp,%rax
  41380e:	ff d0                	callq  *%rax
  413810:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
  413814:	48 85 ff             	test   %rdi,%rdi
  413817:	74 06                	je     41381f <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x9f>
  413819:	48 8b 07             	mov    (%rdi),%rax
  41381c:	ff 50 08             	callq  *0x8(%rax)
  41381f:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413823:	48 83 c3 28          	add    $0x28,%rbx
	if (!_M_is_local())
  413827:	48 39 df             	cmp    %rbx,%rdi
  41382a:	74 44                	je     413870 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0xf0>
  41382c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  413833:	ff ff ff 
  413836:	5b                   	pop    %rbx
  413837:	48 01 e8             	add    %rbp,%rax
  41383a:	5d                   	pop    %rbp
  41383b:	41 5f                	pop    %r15
  41383d:	ff e0                	jmpq   *%rax
  41383f:	90                   	nop
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  413840:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  413844:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  413847:	48 85 c0             	test   %rax,%rax
  41384a:	0f 84 73 ff ff ff    	je     4137c3 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x43>
          get_vtable()->clear(this->functor);
  413850:	48 8d bf 98 00 00 00 	lea    0x98(%rdi),%rdi
            base.manager(functor, functor, destroy_functor_tag);
  413857:	ba 02 00 00 00       	mov    $0x2,%edx
  41385c:	48 89 fe             	mov    %rdi,%rsi
  41385f:	ff d0                	callq  *%rax
  413861:	e9 5d ff ff ff       	jmpq   4137c3 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x43>
  413866:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41386d:	00 00 00 
  413870:	5b                   	pop    %rbx
  413871:	5d                   	pop    %rbp
  413872:	41 5f                	pop    %r15
  413874:	c3                   	retq   
  413875:	90                   	nop
  413876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41387d:	00 00 00 

0000000000413880 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev>:
  413880:	48 83 ef 08          	sub    $0x8,%rdi
  413884:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413884 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x4>
  41388b:	49 ba 7c 77 21 00 00 	movabs $0x21777c,%r10
  413892:	00 00 00 
  413895:	4d 01 d3             	add    %r10,%r11
  413898:	49 ba 80 87 de ff ff 	movabs $0xffffffffffde8780,%r10
  41389f:	ff ff ff 
  4138a2:	4d 01 da             	add    %r11,%r10
  4138a5:	41 ff e2             	jmpq   *%r10
  4138a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4138af:	00 

00000000004138b0 <_ZN5boost3any6holderIfED0Ev>:
        class holder : public placeholder
  4138b0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4138b0 <_ZN5boost3any6holderIfED0Ev>
  4138b7:	49 bb 50 77 21 00 00 	movabs $0x217750,%r11
  4138be:	00 00 00 
  4138c1:	41 57                	push   %r15
  4138c3:	48 ba 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rdx
  4138ca:	ff ff ff 
  4138cd:	be 10 00 00 00       	mov    $0x10,%esi
  4138d2:	4c 01 d8             	add    %r11,%rax
  4138d5:	41 5f                	pop    %r15
  4138d7:	48 01 c2             	add    %rax,%rdx
  4138da:	ff e2                	jmpq   *%rdx
  4138dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004138e0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEED0Ev>:
template<class X> class sp_counted_impl_p: public sp_counted_base
  4138e0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4138e0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEED0Ev>
  4138e7:	49 bb 20 77 21 00 00 	movabs $0x217720,%r11
  4138ee:	00 00 00 
  4138f1:	41 57                	push   %r15
  4138f3:	48 ba 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rdx
  4138fa:	ff ff ff 
  4138fd:	be 18 00 00 00       	mov    $0x18,%esi
  413902:	4c 01 d8             	add    %r11,%rax
  413905:	41 5f                	pop    %r15
  413907:	48 01 c2             	add    %rax,%rdx
  41390a:	ff e2                	jmpq   *%rdx
  41390c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413910 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEED0Ev>:
  413910:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413910 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEED0Ev>
  413917:	49 bb f0 76 21 00 00 	movabs $0x2176f0,%r11
  41391e:	00 00 00 
  413921:	41 57                	push   %r15
  413923:	48 ba 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rdx
  41392a:	ff ff ff 
  41392d:	be 18 00 00 00       	mov    $0x18,%esi
  413932:	4c 01 d8             	add    %r11,%rax
  413935:	41 5f                	pop    %r15
  413937:	48 01 c2             	add    %rax,%rdx
  41393a:	ff e2                	jmpq   *%rdx
  41393c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413940 <_ZN5boost15program_options11typed_valueIfcED0Ev>:
  413940:	41 57                	push   %r15
  413942:	55                   	push   %rbp
  413943:	49 bb c0 76 21 00 00 	movabs $0x2176c0,%r11
  41394a:	00 00 00 
  41394d:	53                   	push   %rbx
  41394e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413940 <_ZN5boost15program_options11typed_valueIfcED0Ev>
  413955:	48 b8 50 86 de ff ff 	movabs $0xffffffffffde8650,%rax
  41395c:	ff ff ff 
  41395f:	48 89 fd             	mov    %rdi,%rbp
  413962:	4c 01 db             	add    %r11,%rbx
  413965:	48 01 d8             	add    %rbx,%rax
  413968:	ff d0                	callq  *%rax
  41396a:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  413971:	ff ff ff 
  413974:	48 89 ef             	mov    %rbp,%rdi
  413977:	be b0 00 00 00       	mov    $0xb0,%esi
  41397c:	48 01 d8             	add    %rbx,%rax
  41397f:	5b                   	pop    %rbx
  413980:	5d                   	pop    %rbp
  413981:	41 5f                	pop    %r15
  413983:	ff e0                	jmpq   *%rax
  413985:	90                   	nop
  413986:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41398d:	00 00 00 

0000000000413990 <_ZThn8_N5boost15program_options11typed_valueIfcED0Ev>:
  413990:	48 83 ef 08          	sub    $0x8,%rdi
  413994:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413994 <_ZThn8_N5boost15program_options11typed_valueIfcED0Ev+0x4>
  41399b:	49 ba 6c 76 21 00 00 	movabs $0x21766c,%r10
  4139a2:	00 00 00 
  4139a5:	4d 01 d3             	add    %r10,%r11
  4139a8:	49 ba 40 89 de ff ff 	movabs $0xffffffffffde8940,%r10
  4139af:	ff ff ff 
  4139b2:	4d 01 da             	add    %r11,%r10
  4139b5:	41 ff e2             	jmpq   *%r10
  4139b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4139bf:	00 

00000000004139c0 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev>:
  4139c0:	41 57                	push   %r15
  4139c2:	55                   	push   %rbp
  4139c3:	49 bb 40 76 21 00 00 	movabs $0x217640,%r11
  4139ca:	00 00 00 
  4139cd:	53                   	push   %rbx
  4139ce:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4139c0 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev>
  4139d5:	48 b8 80 87 de ff ff 	movabs $0xffffffffffde8780,%rax
  4139dc:	ff ff ff 
  4139df:	48 89 fd             	mov    %rdi,%rbp
  4139e2:	4c 01 db             	add    %r11,%rbx
  4139e5:	48 01 d8             	add    %rbx,%rax
  4139e8:	ff d0                	callq  *%rax
  4139ea:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4139f1:	ff ff ff 
  4139f4:	48 89 ef             	mov    %rbp,%rdi
  4139f7:	be b0 00 00 00       	mov    $0xb0,%esi
  4139fc:	48 01 d8             	add    %rbx,%rax
  4139ff:	5b                   	pop    %rbx
  413a00:	5d                   	pop    %rbp
  413a01:	41 5f                	pop    %r15
  413a03:	ff e0                	jmpq   *%rax
  413a05:	90                   	nop
  413a06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413a0d:	00 00 00 

0000000000413a10 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev>:
  413a10:	48 83 ef 08          	sub    $0x8,%rdi
  413a14:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413a14 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev+0x4>
  413a1b:	49 ba ec 75 21 00 00 	movabs $0x2175ec,%r10
  413a22:	00 00 00 
  413a25:	4d 01 d3             	add    %r10,%r11
  413a28:	49 ba c0 89 de ff ff 	movabs $0xffffffffffde89c0,%r10
  413a2f:	ff ff ff 
  413a32:	4d 01 da             	add    %r11,%r10
  413a35:	41 ff e2             	jmpq   *%r10
  413a38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413a3f:	00 

0000000000413a40 <_ZN5boost15program_options5errorD1Ev>:
            return text.substr(i);
        }
    }

    /** Base class for all errors in the library. */
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  413a40:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413a40 <_ZN5boost15program_options5errorD1Ev>
  413a47:	49 bb c0 75 21 00 00 	movabs $0x2175c0,%r11
  413a4e:	00 00 00 
  413a51:	48 ba 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rdx
  413a58:	ff ff ff 
  413a5b:	41 57                	push   %r15
  413a5d:	4c 01 d8             	add    %r11,%rax
  413a60:	48 01 c2             	add    %rax,%rdx
  413a63:	48 89 17             	mov    %rdx,(%rdi)
  413a66:	48 ba 40 ea dd ff ff 	movabs $0xffffffffffddea40,%rdx
  413a6d:	ff ff ff 
  413a70:	41 5f                	pop    %r15
  413a72:	48 01 c2             	add    %rax,%rdx
  413a75:	ff e2                	jmpq   *%rdx
  413a77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  413a7e:	00 00 

0000000000413a80 <_ZN5boost15program_options5errorD0Ev>:
  413a80:	41 57                	push   %r15
  413a82:	55                   	push   %rbp
  413a83:	49 bb 80 75 21 00 00 	movabs $0x217580,%r11
  413a8a:	00 00 00 
  413a8d:	53                   	push   %rbx
  413a8e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413a80 <_ZN5boost15program_options5errorD0Ev>
  413a95:	48 b8 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rax
  413a9c:	ff ff ff 
  413a9f:	48 89 fd             	mov    %rdi,%rbp
  413aa2:	4c 01 db             	add    %r11,%rbx
  413aa5:	48 01 d8             	add    %rbx,%rax
  413aa8:	49 89 df             	mov    %rbx,%r15
  413aab:	48 89 07             	mov    %rax,(%rdi)
  413aae:	48 b8 40 ea dd ff ff 	movabs $0xffffffffffddea40,%rax
  413ab5:	ff ff ff 
  413ab8:	48 01 d8             	add    %rbx,%rax
  413abb:	ff d0                	callq  *%rax
  413abd:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  413ac4:	ff ff ff 
  413ac7:	48 89 ef             	mov    %rbp,%rdi
  413aca:	be 10 00 00 00       	mov    $0x10,%esi
  413acf:	48 01 d8             	add    %rbx,%rax
  413ad2:	5b                   	pop    %rbx
  413ad3:	5d                   	pop    %rbp
  413ad4:	41 5f                	pop    %r15
  413ad6:	ff e0                	jmpq   *%rax
  413ad8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413adf:	00 

0000000000413ae0 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED1Ev>:
        class basic_unlockedbuf : public basic_pointerbuf<CharT, BufferType> {
  413ae0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413ae0 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED1Ev>
  413ae7:	49 bb 20 75 21 00 00 	movabs $0x217520,%r11
  413aee:	00 00 00 
      { }
  413af1:	48 ba 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rdx
  413af8:	ff ff ff 
  413afb:	41 57                	push   %r15
  413afd:	48 83 c7 38          	add    $0x38,%rdi
  413b01:	4c 01 d8             	add    %r11,%rax
  413b04:	48 8b 14 10          	mov    (%rax,%rdx,1),%rdx
  413b08:	48 83 c2 10          	add    $0x10,%rdx
  413b0c:	48 89 57 c8          	mov    %rdx,-0x38(%rdi)
  413b10:	48 ba d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rdx
  413b17:	ff ff ff 
  413b1a:	41 5f                	pop    %r15
  413b1c:	48 01 c2             	add    %rax,%rdx
  413b1f:	ff e2                	jmpq   *%rdx
  413b21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413b28:	00 00 00 
  413b2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000413b30 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED0Ev>:
  413b30:	41 57                	push   %r15
  413b32:	55                   	push   %rbp
  413b33:	49 bb d0 74 21 00 00 	movabs $0x2174d0,%r11
  413b3a:	00 00 00 
  413b3d:	53                   	push   %rbx
  413b3e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413b30 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED0Ev>
  413b45:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  413b4c:	ff ff ff 
  413b4f:	48 89 fd             	mov    %rdi,%rbp
  413b52:	48 8d 7f 38          	lea    0x38(%rdi),%rdi
  413b56:	4c 01 db             	add    %r11,%rbx
  413b59:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  413b5d:	49 89 df             	mov    %rbx,%r15
  413b60:	48 83 c0 10          	add    $0x10,%rax
  413b64:	48 89 47 c8          	mov    %rax,-0x38(%rdi)
  413b68:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  413b6f:	ff ff ff 
  413b72:	48 01 d8             	add    %rbx,%rax
  413b75:	ff d0                	callq  *%rax
  413b77:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  413b7e:	ff ff ff 
  413b81:	48 89 ef             	mov    %rbp,%rdi
  413b84:	be 40 00 00 00       	mov    $0x40,%esi
  413b89:	48 01 d8             	add    %rbx,%rax
  413b8c:	5b                   	pop    %rbx
  413b8d:	5d                   	pop    %rbp
  413b8e:	41 5f                	pop    %r15
  413b90:	ff e0                	jmpq   *%rax
  413b92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413b99:	00 00 00 
  413b9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413ba0 <_ZN5boost16bad_lexical_castD1Ev>:
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  413ba0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413ba0 <_ZN5boost16bad_lexical_castD1Ev>
  413ba7:	49 bb 60 74 21 00 00 	movabs $0x217460,%r11
  413bae:	00 00 00 
        {}
  413bb1:	48 ba 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rdx
  413bb8:	ff ff ff 
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  413bbb:	41 57                	push   %r15
  413bbd:	4c 01 d8             	add    %r11,%rax
        {}
  413bc0:	48 01 c2             	add    %rax,%rdx
  413bc3:	48 89 17             	mov    %rdx,(%rdi)
  413bc6:	48 ba 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rdx
  413bcd:	ff ff ff 
  413bd0:	41 5f                	pop    %r15
  413bd2:	48 01 c2             	add    %rax,%rdx
  413bd5:	ff e2                	jmpq   *%rdx
  413bd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  413bde:	00 00 

0000000000413be0 <_ZN5boost16bad_lexical_castD0Ev>:
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  413be0:	41 57                	push   %r15
  413be2:	55                   	push   %rbp
  413be3:	49 bb 20 74 21 00 00 	movabs $0x217420,%r11
  413bea:	00 00 00 
  413bed:	53                   	push   %rbx
  413bee:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413be0 <_ZN5boost16bad_lexical_castD0Ev>
        {}
  413bf5:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  413bfc:	ff ff ff 
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  413bff:	48 89 fd             	mov    %rdi,%rbp
  413c02:	4c 01 db             	add    %r11,%rbx
        {}
  413c05:	48 01 d8             	add    %rbx,%rax
  413c08:	49 89 df             	mov    %rbx,%r15
  413c0b:	48 89 07             	mov    %rax,(%rdi)
  413c0e:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  413c15:	ff ff ff 
  413c18:	48 01 d8             	add    %rbx,%rax
  413c1b:	ff d0                	callq  *%rax
  413c1d:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  413c24:	ff ff ff 
  413c27:	48 89 ef             	mov    %rbp,%rdi
  413c2a:	be 18 00 00 00       	mov    $0x18,%esi
  413c2f:	48 01 d8             	add    %rbx,%rax
  413c32:	5b                   	pop    %rbx
  413c33:	5d                   	pop    %rbp
  413c34:	41 5f                	pop    %r15
  413c36:	ff e0                	jmpq   *%rax
  413c38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413c3f:	00 

0000000000413c40 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev>:
            error_info_injector( T const & x ):
                T(x)
                {
                }

            ~error_info_injector() throw()
  413c40:	41 57                	push   %r15
  413c42:	55                   	push   %rbp
  413c43:	49 bb c0 73 21 00 00 	movabs $0x2173c0,%r11
  413c4a:	00 00 00 
  413c4d:	53                   	push   %rbx
  413c4e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413c40 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev>
                {
                }
  413c55:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  413c5c:	ff ff ff 
            ~error_info_injector() throw()
  413c5f:	48 89 fd             	mov    %rdi,%rbp
  413c62:	4c 01 db             	add    %r11,%rbx
                }
  413c65:	48 01 d8             	add    %rbx,%rax
  413c68:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  413c6b:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413c72:	ff ff ff 
  413c75:	48 01 d8             	add    %rbx,%rax
  413c78:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  413c7c:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  413c80:	48 85 ff             	test   %rdi,%rdi
  413c83:	74 06                	je     413c8b <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev+0x4b>
  413c85:	48 8b 07             	mov    (%rdi),%rax
  413c88:	ff 50 20             	callq  *0x20(%rax)
  413c8b:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  413c92:	ff ff ff 
  413c95:	48 89 ef             	mov    %rbp,%rdi
  413c98:	48 01 d8             	add    %rbx,%rax
  413c9b:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413c9f:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  413ca6:	ff ff ff 
  413ca9:	48 01 d8             	add    %rbx,%rax
                }
  413cac:	5b                   	pop    %rbx
  413cad:	5d                   	pop    %rbp
  413cae:	41 5f                	pop    %r15
  413cb0:	ff e0                	jmpq   *%rax
  413cb2:	0f 1f 40 00          	nopl   0x0(%rax)
  413cb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413cbd:	00 00 00 

0000000000413cc0 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev>:
            ~error_info_injector() throw()
  413cc0:	48 83 ef 18          	sub    $0x18,%rdi
  413cc4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413cc4 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev+0x4>
  413ccb:	49 ba 3c 73 21 00 00 	movabs $0x21733c,%r10
  413cd2:	00 00 00 
  413cd5:	4d 01 d3             	add    %r10,%r11
  413cd8:	49 ba 40 8c de ff ff 	movabs $0xffffffffffde8c40,%r10
  413cdf:	ff ff ff 
  413ce2:	4d 01 da             	add    %r11,%r10
  413ce5:	41 ff e2             	jmpq   *%r10
  413ce8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413cef:	00 

0000000000413cf0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv>:
                {
                return new clone_impl(*this,clone_tag());
                }

            void
            rethrow() const
  413cf0:	41 57                	push   %r15
  413cf2:	41 55                	push   %r13
  413cf4:	49 bb 10 73 21 00 00 	movabs $0x217310,%r11
  413cfb:	00 00 00 
  413cfe:	41 54                	push   %r12
  413d00:	55                   	push   %rbp
                {
                throw*this;
  413d01:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  413d08:	ff ff ff 
            rethrow() const
  413d0b:	53                   	push   %rbx
  413d0c:	48 8d 1d dd ff ff ff 	lea    -0x23(%rip),%rbx        # 413cf0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv>
  413d13:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  413d16:	bf 48 00 00 00       	mov    $0x48,%edi
    class BOOST_SYMBOL_VISIBLE bad_lexical_cast :
  413d1b:	49 bd 68 ef ff ff ff 	movabs $0xffffffffffffef68,%r13
  413d22:	ff ff ff 
  413d25:	4c 01 db             	add    %r11,%rbx
  413d28:	48 01 d8             	add    %rbx,%rax
  413d2b:	49 89 df             	mov    %rbx,%r15
  413d2e:	ff d0                	callq  *%rax
  413d30:	48 89 c5             	mov    %rax,%rbp
        clone_base
  413d33:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  413d3a:	ff ff ff 
                px_(x.px_)
  413d3d:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
        clone_base
  413d42:	48 01 d8             	add    %rbx,%rax
  413d45:	48 89 45 40          	mov    %rax,0x40(%rbp)
  413d49:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
                px_(x.px_)
  413d4e:	48 89 7d 20          	mov    %rdi,0x20(%rbp)
  413d52:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413d56:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  413d5b:	48 89 45 08          	mov    %rax,0x8(%rbp)
  413d5f:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  413d64:	48 89 45 10          	mov    %rax,0x10(%rbp)
    exception
  413d68:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413d6f:	ff ff ff 
  413d72:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  413d75:	48 85 ff             	test   %rdi,%rdi
    exception
  413d78:	48 89 45 18          	mov    %rax,0x18(%rbp)
                if( px_ )
  413d7c:	74 06                	je     413d84 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv+0x94>
                    px_->add_ref();
  413d7e:	48 8b 07             	mov    (%rdi),%rax
  413d81:	ff 50 18             	callq  *0x18(%rax)
    exception
  413d84:	41 8b 44 24 38       	mov    0x38(%r12),%eax
                throw*this;
  413d89:	48 89 ef             	mov    %rbp,%rdi
  413d8c:	49 89 df             	mov    %rbx,%r15
    exception
  413d8f:	f3 41 0f 6f 44 24 28 	movdqu 0x28(%r12),%xmm0
  413d96:	89 45 38             	mov    %eax,0x38(%rbp)
        clone_impl:
  413d99:	48 b8 b0 f0 ff ff ff 	movabs $0xfffffffffffff0b0,%rax
  413da0:	ff ff ff 
  413da3:	48 01 d8             	add    %rbx,%rax
  413da6:	48 8d 50 38          	lea    0x38(%rax),%rdx
  413daa:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413dae:	48 83 c0 70          	add    $0x70,%rax
  413db2:	48 89 45 40          	mov    %rax,0x40(%rbp)
                throw*this;
  413db6:	48 b8 60 9e de ff ff 	movabs $0xffffffffffde9e60,%rax
  413dbd:	ff ff ff 
        clone_impl:
  413dc0:	48 89 55 18          	mov    %rdx,0x18(%rbp)
                throw*this;
  413dc4:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  413dc8:	48 b8 d8 f8 ff ff ff 	movabs $0xfffffffffffff8d8,%rax
  413dcf:	ff ff ff 
  413dd2:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  413dd6:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  413ddd:	ff ff ff 
    exception
  413de0:	0f 11 45 28          	movups %xmm0,0x28(%rbp)
                throw*this;
  413de4:	48 01 d8             	add    %rbx,%rax
  413de7:	ff d0                	callq  *%rax
  413de9:	49 89 c4             	mov    %rax,%r12
        {}
  413dec:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  413df1:	48 ba 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rdx
  413df8:	ff ff ff 
  413dfb:	48 89 ef             	mov    %rbp,%rdi
  413dfe:	49 89 df             	mov    %rbx,%r15
  413e01:	48 01 da             	add    %rbx,%rdx
  413e04:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413e08:	ff d2                	callq  *%rdx
  413e0a:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  413e11:	ff ff ff 
  413e14:	48 89 ef             	mov    %rbp,%rdi
  413e17:	48 01 da             	add    %rbx,%rdx
  413e1a:	ff d2                	callq  *%rdx
  413e1c:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  413e23:	ff ff ff 
  413e26:	4c 89 e7             	mov    %r12,%rdi
  413e29:	48 01 d8             	add    %rbx,%rax
  413e2c:	ff d0                	callq  *%rax
  413e2e:	66 90                	xchg   %ax,%ax

0000000000413e30 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv>:
            rethrow() const
  413e30:	4c 8b 17             	mov    (%rdi),%r10
  413e33:	49 03 7a e0          	add    -0x20(%r10),%rdi
  413e37:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413e37 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv+0x7>
  413e3e:	49 ba c9 71 21 00 00 	movabs $0x2171c9,%r10
  413e45:	00 00 00 
  413e48:	4d 01 d3             	add    %r10,%r11
  413e4b:	49 ba f0 8c de ff ff 	movabs $0xffffffffffde8cf0,%r10
  413e52:	ff ff ff 
  413e55:	4d 01 da             	add    %r11,%r10
  413e58:	41 ff e2             	jmpq   *%r10
  413e5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000413e60 <_ZN5boost17bad_function_callD1Ev>:

/**
 * The bad_function_call exception class is thrown when a boost::function
 * object is invoked
 */
class bad_function_call : public std::runtime_error
  413e60:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413e60 <_ZN5boost17bad_function_callD1Ev>
  413e67:	49 bb a0 71 21 00 00 	movabs $0x2171a0,%r11
  413e6e:	00 00 00 
  413e71:	48 ba 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rdx
  413e78:	ff ff ff 
  413e7b:	41 57                	push   %r15
  413e7d:	4c 01 d8             	add    %r11,%rax
  413e80:	48 01 c2             	add    %rax,%rdx
  413e83:	48 89 17             	mov    %rdx,(%rdi)
  413e86:	48 ba 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rdx
  413e8d:	ff ff ff 
  413e90:	41 5f                	pop    %r15
  413e92:	48 01 c2             	add    %rax,%rdx
  413e95:	ff e2                	jmpq   *%rdx
  413e97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  413e9e:	00 00 

0000000000413ea0 <_ZN5boost17bad_function_callD0Ev>:
  413ea0:	41 57                	push   %r15
  413ea2:	55                   	push   %rbp
  413ea3:	49 bb 60 71 21 00 00 	movabs $0x217160,%r11
  413eaa:	00 00 00 
  413ead:	53                   	push   %rbx
  413eae:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413ea0 <_ZN5boost17bad_function_callD0Ev>
  413eb5:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  413ebc:	ff ff ff 
  413ebf:	48 89 fd             	mov    %rdi,%rbp
  413ec2:	4c 01 db             	add    %r11,%rbx
  413ec5:	48 01 d8             	add    %rbx,%rax
  413ec8:	49 89 df             	mov    %rbx,%r15
  413ecb:	48 89 07             	mov    %rax,(%rdi)
  413ece:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  413ed5:	ff ff ff 
  413ed8:	48 01 d8             	add    %rbx,%rax
  413edb:	ff d0                	callq  *%rax
  413edd:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  413ee4:	ff ff ff 
  413ee7:	48 89 ef             	mov    %rbp,%rdi
  413eea:	be 10 00 00 00       	mov    $0x10,%esi
  413eef:	48 01 d8             	add    %rbx,%rax
  413ef2:	5b                   	pop    %rbx
  413ef3:	5d                   	pop    %rbp
  413ef4:	41 5f                	pop    %r15
  413ef6:	ff e0                	jmpq   *%rax
  413ef8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413eff:	00 

0000000000413f00 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev>:
            ~error_info_injector() throw()
  413f00:	41 57                	push   %r15
  413f02:	55                   	push   %rbp
  413f03:	49 bb 00 71 21 00 00 	movabs $0x217100,%r11
  413f0a:	00 00 00 
  413f0d:	53                   	push   %rbx
  413f0e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413f00 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev>
                }
  413f15:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  413f1c:	ff ff ff 
            ~error_info_injector() throw()
  413f1f:	48 89 fd             	mov    %rdi,%rbp
  413f22:	4c 01 db             	add    %r11,%rbx
                }
  413f25:	48 01 d8             	add    %rbx,%rax
  413f28:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  413f2b:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413f32:	ff ff ff 
  413f35:	48 01 d8             	add    %rbx,%rax
  413f38:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  413f3c:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  413f40:	48 85 ff             	test   %rdi,%rdi
  413f43:	74 06                	je     413f4b <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev+0x4b>
  413f45:	48 8b 07             	mov    (%rdi),%rax
  413f48:	ff 50 20             	callq  *0x20(%rax)
  413f4b:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  413f52:	ff ff ff 
  413f55:	48 89 ef             	mov    %rbp,%rdi
  413f58:	48 01 d8             	add    %rbx,%rax
  413f5b:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413f5f:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  413f66:	ff ff ff 
  413f69:	48 01 d8             	add    %rbx,%rax
                }
  413f6c:	5b                   	pop    %rbx
  413f6d:	5d                   	pop    %rbp
  413f6e:	41 5f                	pop    %r15
  413f70:	ff e0                	jmpq   *%rax
  413f72:	0f 1f 40 00          	nopl   0x0(%rax)
  413f76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413f7d:	00 00 00 

0000000000413f80 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev>:
            ~error_info_injector() throw()
  413f80:	48 83 ef 10          	sub    $0x10,%rdi
  413f84:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413f84 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev+0x4>
  413f8b:	49 ba 7c 70 21 00 00 	movabs $0x21707c,%r10
  413f92:	00 00 00 
  413f95:	4d 01 d3             	add    %r10,%r11
  413f98:	49 ba 00 8f de ff ff 	movabs $0xffffffffffde8f00,%r10
  413f9f:	ff ff ff 
  413fa2:	4d 01 da             	add    %r11,%r10
  413fa5:	41 ff e2             	jmpq   *%r10
  413fa8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413faf:	00 

0000000000413fb0 <_ZN4YAML9ExceptionD1Ev>:

class Exception : public std::runtime_error {
 public:
  Exception(const Mark& mark_, const std::string& msg_)
      : std::runtime_error(build_what(mark_, msg_)), mark(mark_), msg(msg_) {}
  virtual ~Exception() throw() {}
  413fb0:	41 57                	push   %r15
  413fb2:	55                   	push   %rbp
  413fb3:	49 bb 50 70 21 00 00 	movabs $0x217050,%r11
  413fba:	00 00 00 
  413fbd:	53                   	push   %rbx
  413fbe:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413fb0 <_ZN4YAML9ExceptionD1Ev>
  413fc5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  413fcc:	ff ff ff 
  413fcf:	48 89 fd             	mov    %rdi,%rbp
  413fd2:	4c 01 db             	add    %r11,%rbx
  413fd5:	48 01 d8             	add    %rbx,%rax
  413fd8:	48 89 07             	mov    %rax,(%rdi)
  413fdb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413fdf:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  413fe3:	48 39 c7             	cmp    %rax,%rdi
  413fe6:	74 12                	je     413ffa <_ZN4YAML9ExceptionD1Ev+0x4a>
  413fe8:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  413fef:	ff ff ff 
  413ff2:	49 89 df             	mov    %rbx,%r15
  413ff5:	48 01 d8             	add    %rbx,%rax
  413ff8:	ff d0                	callq  *%rax
  413ffa:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414001:	ff ff ff 
  414004:	48 89 ef             	mov    %rbp,%rdi
  414007:	48 01 d8             	add    %rbx,%rax
  41400a:	5b                   	pop    %rbx
  41400b:	5d                   	pop    %rbp
  41400c:	41 5f                	pop    %r15
  41400e:	ff e0                	jmpq   *%rax

0000000000414010 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv>:
            rethrow() const
  414010:	41 57                	push   %r15
  414012:	41 55                	push   %r13
  414014:	49 bb f0 6f 21 00 00 	movabs $0x216ff0,%r11
  41401b:	00 00 00 
  41401e:	41 54                	push   %r12
  414020:	55                   	push   %rbp
                throw*this;
  414021:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  414028:	ff ff ff 
            rethrow() const
  41402b:	53                   	push   %rbx
  41402c:	48 8d 1d dd ff ff ff 	lea    -0x23(%rip),%rbx        # 414010 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv>
  414033:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  414036:	bf 40 00 00 00       	mov    $0x40,%edi
  41403b:	49 bd 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%r13
  414042:	ff ff ff 
  414045:	4c 01 db             	add    %r11,%rbx
  414048:	49 89 df             	mov    %rbx,%r15
  41404b:	48 01 d8             	add    %rbx,%rax
  41404e:	ff d0                	callq  *%rax
  414050:	48 89 c5             	mov    %rax,%rbp
        clone_base
  414053:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  41405a:	ff ff ff 
  41405d:	4c 89 e6             	mov    %r12,%rsi
  414060:	48 01 d8             	add    %rbx,%rax
  414063:	48 89 ef             	mov    %rbp,%rdi
  414066:	48 89 45 38          	mov    %rax,0x38(%rbp)
  41406a:	48 b8 60 e8 dd ff ff 	movabs $0xffffffffffdde860,%rax
  414071:	ff ff ff 
  414074:	48 01 d8             	add    %rbx,%rax
  414077:	ff d0                	callq  *%rax
  414079:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
                px_(x.px_)
  41407e:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
  414083:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  414087:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  41408e:	ff ff ff 
  414091:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  414094:	48 85 ff             	test   %rdi,%rdi
                px_(x.px_)
  414097:	48 89 7d 18          	mov    %rdi,0x18(%rbp)
    exception
  41409b:	48 89 45 10          	mov    %rax,0x10(%rbp)
                if( px_ )
  41409f:	74 06                	je     4140a7 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv+0x97>
                    px_->add_ref();
  4140a1:	48 8b 07             	mov    (%rdi),%rax
  4140a4:	ff 50 18             	callq  *0x18(%rax)
    exception
  4140a7:	41 8b 44 24 30       	mov    0x30(%r12),%eax
                throw*this;
  4140ac:	48 89 ef             	mov    %rbp,%rdi
  4140af:	49 89 df             	mov    %rbx,%r15
    exception
  4140b2:	f3 41 0f 6f 44 24 20 	movdqu 0x20(%r12),%xmm0
  4140b9:	89 45 30             	mov    %eax,0x30(%rbp)
        clone_impl:
  4140bc:	48 b8 20 f3 ff ff ff 	movabs $0xfffffffffffff320,%rax
  4140c3:	ff ff ff 
  4140c6:	48 01 d8             	add    %rbx,%rax
  4140c9:	48 8d 50 38          	lea    0x38(%rax),%rdx
  4140cd:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4140d1:	48 83 c0 70          	add    $0x70,%rax
  4140d5:	48 89 45 38          	mov    %rax,0x38(%rbp)
                throw*this;
  4140d9:	48 b8 50 9f de ff ff 	movabs $0xffffffffffde9f50,%rax
  4140e0:	ff ff ff 
        clone_impl:
  4140e3:	48 89 55 10          	mov    %rdx,0x10(%rbp)
                throw*this;
  4140e7:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4140eb:	48 b8 78 f1 ff ff ff 	movabs $0xfffffffffffff178,%rax
  4140f2:	ff ff ff 
  4140f5:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  4140f9:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  414100:	ff ff ff 
    exception
  414103:	0f 11 45 20          	movups %xmm0,0x20(%rbp)
                throw*this;
  414107:	48 01 d8             	add    %rbx,%rax
  41410a:	ff d0                	callq  *%rax
  41410c:	49 89 c4             	mov    %rax,%r12
  41410f:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  414114:	48 ba 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rdx
  41411b:	ff ff ff 
  41411e:	48 89 ef             	mov    %rbp,%rdi
  414121:	49 89 df             	mov    %rbx,%r15
  414124:	48 01 da             	add    %rbx,%rdx
  414127:	48 89 45 00          	mov    %rax,0x0(%rbp)
  41412b:	ff d2                	callq  *%rdx
  41412d:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  414134:	ff ff ff 
  414137:	48 89 ef             	mov    %rbp,%rdi
  41413a:	48 01 da             	add    %rbx,%rdx
  41413d:	ff d2                	callq  *%rdx
  41413f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  414146:	ff ff ff 
  414149:	4c 89 e7             	mov    %r12,%rdi
  41414c:	48 01 d8             	add    %rbx,%rax
  41414f:	ff d0                	callq  *%rax
  414151:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  414156:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41415d:	00 00 00 

0000000000414160 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv>:
            rethrow() const
  414160:	4c 8b 17             	mov    (%rdi),%r10
  414163:	49 03 7a e0          	add    -0x20(%r10),%rdi
  414167:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414167 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv+0x7>
  41416e:	49 ba 99 6e 21 00 00 	movabs $0x216e99,%r10
  414175:	00 00 00 
  414178:	4d 01 d3             	add    %r10,%r11
  41417b:	49 ba 10 90 de ff ff 	movabs $0xffffffffffde9010,%r10
  414182:	ff ff ff 
  414185:	4d 01 da             	add    %r11,%r10
  414188:	41 ff e2             	jmpq   *%r10
  41418b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000414190 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45>:
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
           !m_constraints->isIncluded(VertexConstraint(s.time, s.x, s.y));
  }

  bool transitionValid(const State& s1, const State& s2, const Constraints* m_constraints) const {
  414190:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 414190 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45>
  414197:	49 bb 70 6e 21 00 00 	movabs $0x216e70,%r11
  41419e:	00 00 00 
  4141a1:	4c 01 d8             	add    %r11,%rax
    assert(m_constraints);
  4141a4:	48 85 d2             	test   %rdx,%rdx
  4141a7:	74 5d                	je     414206 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x76>
		}
		return false;
	}

	bool isIncluded(EdgeConstraint c) const {
		for (int i = 0; i < edgeConstraints_size; ++i) {
  4141a9:	8b 8a 44 06 00 00    	mov    0x644(%rdx),%ecx
  4141af:	31 c0                	xor    %eax,%eax
  4141b1:	48 81 c2 58 02 00 00 	add    $0x258,%rdx
    const auto& con = m_constraints->edgeConstraints;
    return !m_constraints->isIncluded(EdgeConstraint(s1.time, s1.x, s1.y, s2.x, s2.y));
  4141b8:	44 8b 5e 08          	mov    0x8(%rsi),%r11d
  4141bc:	44 8b 56 04          	mov    0x4(%rsi),%r10d
  4141c0:	44 8b 4f 08          	mov    0x8(%rdi),%r9d
  4141c4:	44 8b 47 04          	mov    0x4(%rdi),%r8d
  4141c8:	85 c9                	test   %ecx,%ecx
  4141ca:	8b 37                	mov    (%rdi),%esi
  4141cc:	7f 0d                	jg     4141db <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x4b>
  4141ce:	eb 30                	jmp    414200 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x70>
  4141d0:	83 c0 01             	add    $0x1,%eax
  4141d3:	48 83 c2 14          	add    $0x14,%rdx
  4141d7:	39 c8                	cmp    %ecx,%eax
  4141d9:	7d 25                	jge    414200 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x70>
	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
  4141db:	3b 32                	cmp    (%rdx),%esi
  4141dd:	75 f1                	jne    4141d0 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  4141df:	44 3b 42 04          	cmp    0x4(%rdx),%r8d
  4141e3:	75 eb                	jne    4141d0 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  4141e5:	44 3b 4a 08          	cmp    0x8(%rdx),%r9d
  4141e9:	75 e5                	jne    4141d0 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  4141eb:	44 3b 52 0c          	cmp    0xc(%rdx),%r10d
  4141ef:	75 df                	jne    4141d0 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  4141f1:	44 3b 5a 10          	cmp    0x10(%rdx),%r11d
  4141f5:	75 d9                	jne    4141d0 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  4141f7:	31 c0                	xor    %eax,%eax
  }
  4141f9:	c3                   	retq   
  4141fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  414200:	b8 01 00 00 00       	mov    $0x1,%eax
  414205:	c3                   	retq   
    assert(m_constraints);
  414206:	48 ba 60 8c df ff ff 	movabs $0xffffffffffdf8c60,%rdx
  41420d:	ff ff ff 
  414210:	48 be c3 80 df ff ff 	movabs $0xffffffffffdf80c3,%rsi
  414217:	ff ff ff 
  41421a:	48 bf 0c 83 df ff ff 	movabs $0xffffffffffdf830c,%rdi
  414221:	ff ff ff 
  414224:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  41422b:	ff ff ff 
  bool transitionValid(const State& s1, const State& s2, const Constraints* m_constraints) const {
  41422e:	41 57                	push   %r15
    assert(m_constraints);
  414230:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  414234:	48 01 c6             	add    %rax,%rsi
  414237:	ba 09 01 00 00       	mov    $0x109,%edx
  41423c:	48 01 c7             	add    %rax,%rdi
  41423f:	49 89 c7             	mov    %rax,%r15
  414242:	49 01 c0             	add    %rax,%r8
  414245:	41 ff d0             	callq  *%r8
  414248:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41424f:	00 

0000000000414250 <_ZN5swarm13frame_spillerEmj>:
__attribute__((noinline))
inline void spiller(swarm::Timestamp ts, const uint32_t n) {
    spiller_impl<false>(ts, n);
}
__attribute__((noinline))
inline void frame_spiller(swarm::Timestamp ts, const uint32_t n) {
  414250:	41 57                	push   %r15
  414252:	41 55                	push   %r13
  414254:	49 bb b0 6d 21 00 00 	movabs $0x216db0,%r11
  41425b:	00 00 00 
  41425e:	41 54                	push   %r12
  414260:	4c 8d 25 e9 ff ff ff 	lea    -0x17(%rip),%r12        # 414250 <_ZN5swarm13frame_spillerEmj>
  414267:	55                   	push   %rbp
  414268:	53                   	push   %rbx
                        sizeof(TaskDescriptors) + n*sizeof(TaskDescriptor));
  414269:	89 f3                	mov    %esi,%ebx
  41426b:	4d 01 dc             	add    %r11,%r12
  41426e:	48 c1 e3 06          	shl    $0x6,%rbx
inline void frame_spiller(swarm::Timestamp ts, const uint32_t n) {
  414272:	48 83 ec 10          	sub    $0x10,%rsp
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  414276:	31 d2                	xor    %edx,%edx
    return reinterpret_cast<uint64_t>(ptr);
  414278:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    TaskDescriptors* tdstruct = (TaskDescriptors*) sim_zero_cycle_untracked_malloc(
  41427d:	48 8d 73 08          	lea    0x8(%rbx),%rsi
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  414281:	b9 12 20 00 00       	mov    $0x2012,%ecx
  414286:	48 87 c9             	xchg   %rcx,%rcx
    return ptr;
  414289:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
    TaskDescriptor* tasks = tdstruct->tds;
  41428e:	49 8d 6d 08          	lea    0x8(%r13),%rbp
    TaskDescriptor* const end = tasks + n;
  414292:	48 01 eb             	add    %rbp,%rbx
    __builtin_prefetch(&tasks[0].ts, 1);
  414295:	0f 18 4d 00          	prefetcht0 0x0(%rbp)
    for (task = begin; task < end; task++) {
  414299:	48 39 dd             	cmp    %rbx,%rbp
  41429c:	0f 83 c9 00 00 00    	jae    41436b <_ZN5swarm13frame_spillerEmj+0x11b>
  4142a2:	48 89 e8             	mov    %rbp,%rax
  4142a5:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  4142ac:	eb 3c                	jmp    4142ea <_ZN5swarm13frame_spillerEmj+0x9a>
  4142ae:	66 90                	xchg   %ax,%ax
        assert(!isFrame || !nonTimestamped);
  4142b0:	f7 c6 00 02 00 00    	test   $0x200,%esi
    task->ts = ts;
  4142b6:	48 89 38             	mov    %rdi,(%rax)
    task->taskPtrAndFlags = taskPtrAndFlags;
  4142b9:	48 89 70 08          	mov    %rsi,0x8(%rax)
    task->hint = hint;
  4142bd:	48 89 50 10          	mov    %rdx,0x10(%rax)
    task->args[0] = a0;
  4142c1:	48 89 48 18          	mov    %rcx,0x18(%rax)
    task->args[1] = a1;
  4142c5:	4c 89 40 20          	mov    %r8,0x20(%rax)
    task->args[2] = a2;
  4142c9:	4c 89 48 28          	mov    %r9,0x28(%rax)
    task->args[3] = a3;
  4142cd:	4c 89 50 30          	mov    %r10,0x30(%rax)
    task->args[4] = a4;
  4142d1:	4c 89 58 38          	mov    %r11,0x38(%rax)
        assert(!isFrame || !nonTimestamped);
  4142d5:	0f 85 9a 00 00 00    	jne    414375 <_ZN5swarm13frame_spillerEmj+0x125>
        if (nonTimestamped || newMin == UINT64_MAX) break;
  4142db:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
  4142df:	74 2b                	je     41430c <_ZN5swarm13frame_spillerEmj+0xbc>
    for (task = begin; task < end; task++) {
  4142e1:	48 83 c0 40          	add    $0x40,%rax
  4142e5:	48 39 c3             	cmp    %rax,%rbx
  4142e8:	76 22                	jbe    41430c <_ZN5swarm13frame_spillerEmj+0xbc>
    void* prefetch = (void*)(mask &
  4142ea:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
  4142f1:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
    if (pls_likely(prefetch < end)) __builtin_prefetch(prefetch, 1);
  4142f5:	48 39 d3             	cmp    %rdx,%rbx
  4142f8:	76 03                	jbe    4142fd <_ZN5swarm13frame_spillerEmj+0xad>
  4142fa:	0f 18 0a             	prefetcht0 (%rdx)
        :);
  4142fd:	48 c7 c1 02 08 00 00 	mov    $0x802,%rcx
        :);
  414304:	48 87 c9             	xchg   %rcx,%rcx
    if (pls_unlikely(taskPtrAndFlags == 0ul)) return UINT64_MAX;
  414307:	48 85 f6             	test   %rsi,%rsi
  41430a:	75 a4                	jne    4142b0 <_ZN5swarm13frame_spillerEmj+0x60>
  41430c:	48 29 e8             	sub    %rbp,%rax
  41430f:	48 c1 f8 06          	sar    $0x6,%rax
    if (tdstruct->size > 0) {
  414313:	48 85 c0             	test   %rax,%rax
    tdstruct->size = std::distance(begin, task);
  414316:	49 89 45 00          	mov    %rax,0x0(%r13)
    if (tdstruct->size > 0) {
  41431a:	75 24                	jne    414340 <_ZN5swarm13frame_spillerEmj+0xf0>
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  41431c:	41 0f 18 4d c8       	prefetcht0 -0x38(%r13)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  414321:	b9 11 20 00 00       	mov    $0x2011,%ecx
  414326:	4c 89 ef             	mov    %r13,%rdi
  414329:	48 87 c9             	xchg   %rcx,%rcx
    spiller_impl<true>(ts, n);
}
  41432c:	48 83 c4 10          	add    $0x10,%rsp
  414330:	5b                   	pop    %rbx
  414331:	5d                   	pop    %rbp
  414332:	41 5c                	pop    %r12
  414334:	41 5d                	pop    %r13
  414336:	41 5f                	pop    %r15
  414338:	c3                   	retq   
  414339:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            :);
  414340:	48 b8 b0 33 de ff ff 	movabs $0xffffffffffde33b0,%rax
  414347:	ff ff ff 
  41434a:	bf 2a 00 00 00       	mov    $0x2a,%edi
  41434f:	b9 b1 0c 02 40       	mov    $0x40020cb1,%ecx
  414354:	49 8d 14 04          	lea    (%r12,%rax,1),%rdx
  414358:	4c 89 ee             	mov    %r13,%rsi
  41435b:	48 87 c9             	xchg   %rcx,%rcx
  41435e:	48 83 c4 10          	add    $0x10,%rsp
  414362:	5b                   	pop    %rbx
  414363:	5d                   	pop    %rbp
  414364:	41 5c                	pop    %r12
  414366:	41 5d                	pop    %r13
  414368:	41 5f                	pop    %r15
  41436a:	c3                   	retq   
    tdstruct->size = std::distance(begin, task);
  41436b:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
  414372:	00 
  414373:	eb a7                	jmp    41431c <_ZN5swarm13frame_spillerEmj+0xcc>
        assert(!isFrame || !nonTimestamped);
  414375:	48 b8 c0 84 df ff ff 	movabs $0xffffffffffdf84c0,%rax
  41437c:	ff ff ff 
  41437f:	ba de 00 00 00       	mov    $0xde,%edx
  414384:	4d 89 e7             	mov    %r12,%r15
  414387:	49 8d 0c 04          	lea    (%r12,%rax,1),%rcx
  41438b:	48 b8 20 83 df ff ff 	movabs $0xffffffffffdf8320,%rax
  414392:	ff ff ff 
  414395:	49 8d 34 04          	lea    (%r12,%rax,1),%rsi
  414399:	48 b8 66 83 df ff ff 	movabs $0xffffffffffdf8366,%rax
  4143a0:	ff ff ff 
  4143a3:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  4143a7:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  4143ae:	ff ff ff 
  4143b1:	4c 01 e0             	add    %r12,%rax
  4143b4:	ff d0                	callq  *%rax
  4143b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4143bd:	00 00 00 

00000000004143c0 <_ZN5swarm7spillerEmj>:
inline void spiller(swarm::Timestamp ts, const uint32_t n) {
  4143c0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4143c0 <_ZN5swarm7spillerEmj>
  4143c7:	41 57                	push   %r15
  4143c9:	49 bb 40 6c 21 00 00 	movabs $0x216c40,%r11
  4143d0:	00 00 00 
  4143d3:	41 56                	push   %r14
  4143d5:	41 55                	push   %r13
  4143d7:	41 54                	push   %r12
  4143d9:	55                   	push   %rbp
  4143da:	4c 01 d8             	add    %r11,%rax
  4143dd:	53                   	push   %rbx
                        sizeof(TaskDescriptors) + n*sizeof(TaskDescriptor));
  4143de:	41 89 f4             	mov    %esi,%r12d
  4143e1:	49 c1 e4 06          	shl    $0x6,%r12
  4143e5:	48 89 44 24 e8       	mov    %rax,-0x18(%rsp)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  4143ea:	31 d2                	xor    %edx,%edx
    return reinterpret_cast<uint64_t>(ptr);
  4143ec:	48 8d 7c 24 f8       	lea    -0x8(%rsp),%rdi
    TaskDescriptors* tdstruct = (TaskDescriptors*) sim_zero_cycle_untracked_malloc(
  4143f1:	49 8d 74 24 08       	lea    0x8(%r12),%rsi
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  4143f6:	b9 12 20 00 00       	mov    $0x2012,%ecx
  4143fb:	48 87 c9             	xchg   %rcx,%rcx
    return ptr;
  4143fe:	48 8b 44 24 f8       	mov    -0x8(%rsp),%rax
    TaskDescriptor* tasks = tdstruct->tds;
  414403:	4c 8d 70 08          	lea    0x8(%rax),%r14
  414407:	48 89 44 24 e0       	mov    %rax,-0x20(%rsp)
    TaskDescriptor* const end = tasks + n;
  41440c:	4d 01 f4             	add    %r14,%r12
    __builtin_prefetch(&tasks[0].ts, 1);
  41440f:	41 0f 18 0e          	prefetcht0 (%r14)
    for (task = begin; task < end; task++) {
  414413:	4d 39 e6             	cmp    %r12,%r14
  414416:	0f 83 50 01 00 00    	jae    41456c <_ZN5swarm7spillerEmj+0x1ac>
  41441c:	4c 89 f0             	mov    %r14,%rax
  41441f:	41 bd 80 02 00 00    	mov    $0x280,%r13d
  414425:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  41442c:	eb 42                	jmp    414470 <_ZN5swarm7spillerEmj+0xb0>
  41442e:	66 90                	xchg   %ax,%ax
    *requeuerFlags &= taskPtrAndFlags;
  414430:	49 21 f5             	and    %rsi,%r13
        if (nonTimestamped || newMin == UINT64_MAX) break;
  414433:	f7 c6 00 02 00 00    	test   $0x200,%esi
    task->ts = ts;
  414439:	48 89 38             	mov    %rdi,(%rax)
    task->taskPtrAndFlags = taskPtrAndFlags;
  41443c:	48 89 70 08          	mov    %rsi,0x8(%rax)
    task->hint = hint;
  414440:	48 89 50 10          	mov    %rdx,0x10(%rax)
    task->args[0] = a0;
  414444:	48 89 48 18          	mov    %rcx,0x18(%rax)
    task->args[1] = a1;
  414448:	4c 89 40 20          	mov    %r8,0x20(%rax)
    task->args[2] = a2;
  41444c:	4c 89 48 28          	mov    %r9,0x28(%rax)
    task->args[3] = a3;
  414450:	4c 89 50 30          	mov    %r10,0x30(%rax)
    task->args[4] = a4;
  414454:	4c 89 58 38          	mov    %r11,0x38(%rax)
        if (nonTimestamped || newMin == UINT64_MAX) break;
  414458:	0f 85 8a 00 00 00    	jne    4144e8 <_ZN5swarm7spillerEmj+0x128>
  41445e:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
  414462:	74 31                	je     414495 <_ZN5swarm7spillerEmj+0xd5>
    for (task = begin; task < end; task++) {
  414464:	48 83 c0 40          	add    $0x40,%rax
  414468:	48 89 fb             	mov    %rdi,%rbx
  41446b:	49 39 c4             	cmp    %rax,%r12
  41446e:	76 25                	jbe    414495 <_ZN5swarm7spillerEmj+0xd5>
    void* prefetch = (void*)(mask &
  414470:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
  414477:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
    if (pls_likely(prefetch < end)) __builtin_prefetch(prefetch, 1);
  41447b:	49 39 d4             	cmp    %rdx,%r12
  41447e:	76 03                	jbe    414483 <_ZN5swarm7spillerEmj+0xc3>
  414480:	0f 18 0a             	prefetcht0 (%rdx)
        :);
  414483:	48 c7 c1 01 08 00 00 	mov    $0x801,%rcx
        :);
  41448a:	48 89 df             	mov    %rbx,%rdi
  41448d:	48 87 c9             	xchg   %rcx,%rcx
    if (pls_unlikely(taskPtrAndFlags == 0ul)) return UINT64_MAX;
  414490:	48 85 f6             	test   %rsi,%rsi
  414493:	75 9b                	jne    414430 <_ZN5swarm7spillerEmj+0x70>
  414495:	4c 29 f0             	sub    %r14,%rax
    tdstruct->size = std::distance(begin, task);
  414498:	48 8b 74 24 e0       	mov    -0x20(%rsp),%rsi
  41449d:	48 c1 f8 06          	sar    $0x6,%rax
    if (tdstruct->size > 0) {
  4144a1:	48 85 c0             	test   %rax,%rax
    tdstruct->size = std::distance(begin, task);
  4144a4:	48 89 06             	mov    %rax,(%rsi)
    if (tdstruct->size > 0) {
  4144a7:	0f 84 cb 00 00 00    	je     414578 <_ZN5swarm7spillerEmj+0x1b8>
        uintptr_t fp = reinterpret_cast<uintptr_t>(bareRunner<F, f, Args...>);
  4144ad:	48 8b 7c 24 e8       	mov    -0x18(%rsp),%rdi
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  4144b2:	44 89 e9             	mov    %r13d,%ecx
        uintptr_t fp = reinterpret_cast<uintptr_t>(bareRunner<F, f, Args...>);
  4144b5:	48 b8 a0 32 de ff ff 	movabs $0xffffffffffde32a0,%rax
  4144bc:	ff ff ff 
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  4144bf:	81 c9 31 0c 02 40    	or     $0x40020c31,%ecx
    } else if (!skipTs && !skipTask && skipHint) {
  4144c5:	41 f7 c5 00 02 08 01 	test   $0x1080200,%r13d
        uintptr_t fp = reinterpret_cast<uintptr_t>(bareRunner<F, f, Args...>);
  4144cc:	48 8d 14 07          	lea    (%rdi,%rax,1),%rdx
    } else if (!skipTs && !skipTask && skipHint) {
  4144d0:	0f 85 c2 00 00 00    	jne    414598 <_ZN5swarm7spillerEmj+0x1d8>
            :);
  4144d6:	48 89 df             	mov    %rbx,%rdi
  4144d9:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  4144dc:	e9 a8 00 00 00       	jmpq   414589 <_ZN5swarm7spillerEmj+0x1c9>
  4144e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        for (task = task + 1; task < end; task++) {
  4144e8:	48 83 c0 40          	add    $0x40,%rax
        :);
  4144ec:	31 ed                	xor    %ebp,%ebp
        for (task = task + 1; task < end; task++) {
  4144ee:	49 39 c4             	cmp    %rax,%r12
  4144f1:	77 4f                	ja     414542 <_ZN5swarm7spillerEmj+0x182>
  4144f3:	eb a0                	jmp    414495 <_ZN5swarm7spillerEmj+0xd5>
  4144f5:	0f 1f 00             	nopl   (%rax)
    *nonTimestamped = taskPtrAndFlags & EnqFlags::NOTIMESTAMP;
  4144f8:	49 89 f7             	mov    %rsi,%r15
    *requeuerFlags &= taskPtrAndFlags;
  4144fb:	49 21 f5             	and    %rsi,%r13
    task->ts = ts;
  4144fe:	48 89 38             	mov    %rdi,(%rax)
    *nonTimestamped = taskPtrAndFlags & EnqFlags::NOTIMESTAMP;
  414501:	41 81 e7 00 02 00 00 	and    $0x200,%r15d
            if (newMin == UINT64_MAX) break;
  414508:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
    task->taskPtrAndFlags = taskPtrAndFlags;
  41450c:	48 89 70 08          	mov    %rsi,0x8(%rax)
    task->hint = hint;
  414510:	48 89 50 10          	mov    %rdx,0x10(%rax)
    task->args[0] = a0;
  414514:	48 89 48 18          	mov    %rcx,0x18(%rax)
    task->args[1] = a1;
  414518:	4c 89 40 20          	mov    %r8,0x20(%rax)
    task->args[2] = a2;
  41451c:	4c 89 48 28          	mov    %r9,0x28(%rax)
    task->args[3] = a3;
  414520:	4c 89 50 30          	mov    %r10,0x30(%rax)
    task->args[4] = a4;
  414524:	4c 89 58 38          	mov    %r11,0x38(%rax)
            if (newMin == UINT64_MAX) break;
  414528:	0f 84 67 ff ff ff    	je     414495 <_ZN5swarm7spillerEmj+0xd5>
            if (!nonTimestamped) minTs = 0ul;
  41452e:	4d 85 ff             	test   %r15,%r15
  414531:	48 0f 44 dd          	cmove  %rbp,%rbx
        for (task = task + 1; task < end; task++) {
  414535:	48 83 c0 40          	add    $0x40,%rax
  414539:	49 39 c4             	cmp    %rax,%r12
  41453c:	0f 86 53 ff ff ff    	jbe    414495 <_ZN5swarm7spillerEmj+0xd5>
    void* prefetch = (void*)(mask &
  414542:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
  414549:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
    if (pls_likely(prefetch < end)) __builtin_prefetch(prefetch, 1);
  41454d:	49 39 d4             	cmp    %rdx,%r12
  414550:	76 03                	jbe    414555 <_ZN5swarm7spillerEmj+0x195>
  414552:	0f 18 0a             	prefetcht0 (%rdx)
        :);
  414555:	48 c7 c1 01 08 00 00 	mov    $0x801,%rcx
        :);
  41455c:	48 89 ef             	mov    %rbp,%rdi
  41455f:	48 87 c9             	xchg   %rcx,%rcx
    if (pls_unlikely(taskPtrAndFlags == 0ul)) return UINT64_MAX;
  414562:	48 85 f6             	test   %rsi,%rsi
  414565:	75 91                	jne    4144f8 <_ZN5swarm7spillerEmj+0x138>
  414567:	e9 29 ff ff ff       	jmpq   414495 <_ZN5swarm7spillerEmj+0xd5>
    tdstruct->size = std::distance(begin, task);
  41456c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  414573:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  414578:	48 8b 7c 24 e0       	mov    -0x20(%rsp),%rdi
  41457d:	0f 18 4f c8          	prefetcht0 -0x38(%rdi)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  414581:	b9 11 20 00 00       	mov    $0x2011,%ecx
  414586:	48 87 c9             	xchg   %rcx,%rcx
}
  414589:	5b                   	pop    %rbx
  41458a:	5d                   	pop    %rbp
  41458b:	41 5c                	pop    %r12
  41458d:	41 5d                	pop    %r13
  41458f:	41 5e                	pop    %r14
  414591:	41 5f                	pop    %r15
  414593:	c3                   	retq   
  414594:	0f 1f 40 00          	nopl   0x0(%rax)
  414598:	48 89 f7             	mov    %rsi,%rdi
            :);
  41459b:	48 89 d6             	mov    %rdx,%rsi
  41459e:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  4145a1:	eb e6                	jmp    414589 <_ZN5swarm7spillerEmj+0x1c9>
  4145a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4145aa:	00 00 00 
  4145ad:	0f 1f 00             	nopl   (%rax)

00000000004145b0 <_ZN4YAML11InvalidNodeD1Ev>:
inline TypedKeyNotFound<T> MakeTypedKeyNotFound(const Mark& mark,
                                                const T& key) {
  return TypedKeyNotFound<T>(mark, key);
}

class InvalidNode : public RepresentationException {
  4145b0:	41 57                	push   %r15
  4145b2:	55                   	push   %rbp
  4145b3:	49 bb 50 6a 21 00 00 	movabs $0x216a50,%r11
  4145ba:	00 00 00 
  4145bd:	53                   	push   %rbx
  4145be:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4145b0 <_ZN4YAML11InvalidNodeD1Ev>
  virtual ~Exception() throw() {}
  4145c5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4145cc:	ff ff ff 
class InvalidNode : public RepresentationException {
  4145cf:	48 89 fd             	mov    %rdi,%rbp
  4145d2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4145d5:	48 01 d8             	add    %rbx,%rax
  4145d8:	48 89 07             	mov    %rax,(%rdi)
  4145db:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4145df:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4145e3:	48 39 c7             	cmp    %rax,%rdi
  4145e6:	74 12                	je     4145fa <_ZN4YAML11InvalidNodeD1Ev+0x4a>
  4145e8:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4145ef:	ff ff ff 
  4145f2:	49 89 df             	mov    %rbx,%r15
  4145f5:	48 01 d8             	add    %rbx,%rax
  4145f8:	ff d0                	callq  *%rax
  4145fa:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414601:	ff ff ff 
  414604:	48 89 ef             	mov    %rbp,%rdi
  414607:	48 01 d8             	add    %rbx,%rax
class InvalidNode : public RepresentationException {
  41460a:	5b                   	pop    %rbx
  41460b:	5d                   	pop    %rbp
  41460c:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  41460e:	ff e0                	jmpq   *%rax

0000000000414610 <_ZN4YAML18TypedBadConversionIiED1Ev>:
  BadConversion()
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_CONVERSION) {}
};

template <typename T>
class TypedBadConversion : public BadConversion {
  414610:	41 57                	push   %r15
  414612:	55                   	push   %rbp
  414613:	49 bb f0 69 21 00 00 	movabs $0x2169f0,%r11
  41461a:	00 00 00 
  41461d:	53                   	push   %rbx
  41461e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414610 <_ZN4YAML18TypedBadConversionIiED1Ev>
  virtual ~Exception() throw() {}
  414625:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41462c:	ff ff ff 
class TypedBadConversion : public BadConversion {
  41462f:	48 89 fd             	mov    %rdi,%rbp
  414632:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414635:	48 01 d8             	add    %rbx,%rax
  414638:	48 89 07             	mov    %rax,(%rdi)
  41463b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41463f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414643:	48 39 c7             	cmp    %rax,%rdi
  414646:	74 12                	je     41465a <_ZN4YAML18TypedBadConversionIiED1Ev+0x4a>
  414648:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41464f:	ff ff ff 
  414652:	49 89 df             	mov    %rbx,%r15
  414655:	48 01 d8             	add    %rbx,%rax
  414658:	ff d0                	callq  *%rax
  41465a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414661:	ff ff ff 
  414664:	48 89 ef             	mov    %rbp,%rdi
  414667:	48 01 d8             	add    %rbx,%rax
class TypedBadConversion : public BadConversion {
  41466a:	5b                   	pop    %rbx
  41466b:	5d                   	pop    %rbp
  41466c:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  41466e:	ff e0                	jmpq   *%rax

0000000000414670 <_ZN4YAML12BadSubscriptD1Ev>:
 public:
  BadDereference()
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_DEREFERENCE) {}
};

class BadSubscript : public RepresentationException {
  414670:	41 57                	push   %r15
  414672:	55                   	push   %rbp
  414673:	49 bb 90 69 21 00 00 	movabs $0x216990,%r11
  41467a:	00 00 00 
  41467d:	53                   	push   %rbx
  41467e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414670 <_ZN4YAML12BadSubscriptD1Ev>
  virtual ~Exception() throw() {}
  414685:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41468c:	ff ff ff 
class BadSubscript : public RepresentationException {
  41468f:	48 89 fd             	mov    %rdi,%rbp
  414692:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414695:	48 01 d8             	add    %rbx,%rax
  414698:	48 89 07             	mov    %rax,(%rdi)
  41469b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41469f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4146a3:	48 39 c7             	cmp    %rax,%rdi
  4146a6:	74 12                	je     4146ba <_ZN4YAML12BadSubscriptD1Ev+0x4a>
  4146a8:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4146af:	ff ff ff 
  4146b2:	49 89 df             	mov    %rbx,%r15
  4146b5:	48 01 d8             	add    %rbx,%rax
  4146b8:	ff d0                	callq  *%rax
  4146ba:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4146c1:	ff ff ff 
  4146c4:	48 89 ef             	mov    %rbp,%rdi
  4146c7:	48 01 d8             	add    %rbx,%rax
class BadSubscript : public RepresentationException {
  4146ca:	5b                   	pop    %rbx
  4146cb:	5d                   	pop    %rbp
  4146cc:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  4146ce:	ff e0                	jmpq   *%rax

00000000004146d0 <_ZN4YAML23RepresentationExceptionD1Ev>:
class RepresentationException : public Exception {
  4146d0:	41 57                	push   %r15
  4146d2:	55                   	push   %rbp
  4146d3:	49 bb 30 69 21 00 00 	movabs $0x216930,%r11
  4146da:	00 00 00 
  4146dd:	53                   	push   %rbx
  4146de:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4146d0 <_ZN4YAML23RepresentationExceptionD1Ev>
  virtual ~Exception() throw() {}
  4146e5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4146ec:	ff ff ff 
class RepresentationException : public Exception {
  4146ef:	48 89 fd             	mov    %rdi,%rbp
  4146f2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4146f5:	48 01 d8             	add    %rbx,%rax
  4146f8:	48 89 07             	mov    %rax,(%rdi)
  4146fb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4146ff:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414703:	48 39 c7             	cmp    %rax,%rdi
  414706:	74 12                	je     41471a <_ZN4YAML23RepresentationExceptionD1Ev+0x4a>
  414708:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41470f:	ff ff ff 
  414712:	49 89 df             	mov    %rbx,%r15
  414715:	48 01 d8             	add    %rbx,%rax
  414718:	ff d0                	callq  *%rax
  41471a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414721:	ff ff ff 
  414724:	48 89 ef             	mov    %rbp,%rdi
  414727:	48 01 d8             	add    %rbx,%rax
class RepresentationException : public Exception {
  41472a:	5b                   	pop    %rbx
  41472b:	5d                   	pop    %rbp
  41472c:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  41472e:	ff e0                	jmpq   *%rax

0000000000414730 <_ZN4YAML13BadConversionD1Ev>:
class BadConversion : public RepresentationException {
  414730:	41 57                	push   %r15
  414732:	55                   	push   %rbp
  414733:	49 bb d0 68 21 00 00 	movabs $0x2168d0,%r11
  41473a:	00 00 00 
  41473d:	53                   	push   %rbx
  41473e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414730 <_ZN4YAML13BadConversionD1Ev>
  virtual ~Exception() throw() {}
  414745:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41474c:	ff ff ff 
class BadConversion : public RepresentationException {
  41474f:	48 89 fd             	mov    %rdi,%rbp
  414752:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414755:	48 01 d8             	add    %rbx,%rax
  414758:	48 89 07             	mov    %rax,(%rdi)
  41475b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41475f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414763:	48 39 c7             	cmp    %rax,%rdi
  414766:	74 12                	je     41477a <_ZN4YAML13BadConversionD1Ev+0x4a>
  414768:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41476f:	ff ff ff 
  414772:	49 89 df             	mov    %rbx,%r15
  414775:	48 01 d8             	add    %rbx,%rax
  414778:	ff d0                	callq  *%rax
  41477a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414781:	ff ff ff 
  414784:	48 89 ef             	mov    %rbp,%rdi
  414787:	48 01 d8             	add    %rbx,%rax
class BadConversion : public RepresentationException {
  41478a:	5b                   	pop    %rbx
  41478b:	5d                   	pop    %rbp
  41478c:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  41478e:	ff e0                	jmpq   *%rax

0000000000414790 <_ZN4YAML9ExceptionD0Ev>:
  414790:	41 57                	push   %r15
  414792:	55                   	push   %rbp
  414793:	49 bb 70 68 21 00 00 	movabs $0x216870,%r11
  41479a:	00 00 00 
  41479d:	53                   	push   %rbx
  41479e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414790 <_ZN4YAML9ExceptionD0Ev>
  4147a5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4147ac:	ff ff ff 
  4147af:	48 89 fd             	mov    %rdi,%rbp
  4147b2:	4c 01 db             	add    %r11,%rbx
  4147b5:	48 01 d8             	add    %rbx,%rax
  4147b8:	48 89 07             	mov    %rax,(%rdi)
  4147bb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4147bf:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4147c3:	48 39 c7             	cmp    %rax,%rdi
  4147c6:	74 12                	je     4147da <_ZN4YAML9ExceptionD0Ev+0x4a>
  4147c8:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4147cf:	ff ff ff 
  4147d2:	49 89 df             	mov    %rbx,%r15
  4147d5:	48 01 d8             	add    %rbx,%rax
  4147d8:	ff d0                	callq  *%rax
  4147da:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4147e1:	ff ff ff 
  4147e4:	48 89 ef             	mov    %rbp,%rdi
  4147e7:	49 89 df             	mov    %rbx,%r15
  4147ea:	48 01 d8             	add    %rbx,%rax
  4147ed:	ff d0                	callq  *%rax
  4147ef:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4147f6:	ff ff ff 
  4147f9:	48 89 ef             	mov    %rbp,%rdi
  4147fc:	be 40 00 00 00       	mov    $0x40,%esi
  414801:	48 01 d8             	add    %rbx,%rax
  414804:	5b                   	pop    %rbx
  414805:	5d                   	pop    %rbp
  414806:	41 5f                	pop    %r15
  414808:	ff e0                	jmpq   *%rax
  41480a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414810 <_ZN4YAML11InvalidNodeD0Ev>:
class InvalidNode : public RepresentationException {
  414810:	41 57                	push   %r15
  414812:	55                   	push   %rbp
  414813:	49 bb f0 67 21 00 00 	movabs $0x2167f0,%r11
  41481a:	00 00 00 
  41481d:	53                   	push   %rbx
  41481e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414810 <_ZN4YAML11InvalidNodeD0Ev>
  virtual ~Exception() throw() {}
  414825:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41482c:	ff ff ff 
class InvalidNode : public RepresentationException {
  41482f:	48 89 fd             	mov    %rdi,%rbp
  414832:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414835:	48 01 d8             	add    %rbx,%rax
  414838:	48 89 07             	mov    %rax,(%rdi)
  41483b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41483f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414843:	48 39 c7             	cmp    %rax,%rdi
  414846:	74 12                	je     41485a <_ZN4YAML11InvalidNodeD0Ev+0x4a>
  414848:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41484f:	ff ff ff 
  414852:	49 89 df             	mov    %rbx,%r15
  414855:	48 01 d8             	add    %rbx,%rax
  414858:	ff d0                	callq  *%rax
  41485a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414861:	ff ff ff 
  414864:	48 89 ef             	mov    %rbp,%rdi
  414867:	49 89 df             	mov    %rbx,%r15
  41486a:	48 01 d8             	add    %rbx,%rax
  41486d:	ff d0                	callq  *%rax
class InvalidNode : public RepresentationException {
  41486f:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414876:	ff ff ff 
  414879:	48 89 ef             	mov    %rbp,%rdi
  41487c:	be 40 00 00 00       	mov    $0x40,%esi
  414881:	48 01 d8             	add    %rbx,%rax
  414884:	5b                   	pop    %rbx
  414885:	5d                   	pop    %rbp
  414886:	41 5f                	pop    %r15
  414888:	ff e0                	jmpq   *%rax
  41488a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414890 <_ZN4YAML18TypedBadConversionIiED0Ev>:
class TypedBadConversion : public BadConversion {
  414890:	41 57                	push   %r15
  414892:	55                   	push   %rbp
  414893:	49 bb 70 67 21 00 00 	movabs $0x216770,%r11
  41489a:	00 00 00 
  41489d:	53                   	push   %rbx
  41489e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414890 <_ZN4YAML18TypedBadConversionIiED0Ev>
  virtual ~Exception() throw() {}
  4148a5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4148ac:	ff ff ff 
class TypedBadConversion : public BadConversion {
  4148af:	48 89 fd             	mov    %rdi,%rbp
  4148b2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4148b5:	48 01 d8             	add    %rbx,%rax
  4148b8:	48 89 07             	mov    %rax,(%rdi)
  4148bb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4148bf:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4148c3:	48 39 c7             	cmp    %rax,%rdi
  4148c6:	74 12                	je     4148da <_ZN4YAML18TypedBadConversionIiED0Ev+0x4a>
  4148c8:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4148cf:	ff ff ff 
  4148d2:	49 89 df             	mov    %rbx,%r15
  4148d5:	48 01 d8             	add    %rbx,%rax
  4148d8:	ff d0                	callq  *%rax
  4148da:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4148e1:	ff ff ff 
  4148e4:	48 89 ef             	mov    %rbp,%rdi
  4148e7:	49 89 df             	mov    %rbx,%r15
  4148ea:	48 01 d8             	add    %rbx,%rax
  4148ed:	ff d0                	callq  *%rax
class TypedBadConversion : public BadConversion {
  4148ef:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4148f6:	ff ff ff 
  4148f9:	48 89 ef             	mov    %rbp,%rdi
  4148fc:	be 40 00 00 00       	mov    $0x40,%esi
  414901:	48 01 d8             	add    %rbx,%rax
  414904:	5b                   	pop    %rbx
  414905:	5d                   	pop    %rbp
  414906:	41 5f                	pop    %r15
  414908:	ff e0                	jmpq   *%rax
  41490a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414910 <_ZN4YAML12BadSubscriptD0Ev>:
class BadSubscript : public RepresentationException {
  414910:	41 57                	push   %r15
  414912:	55                   	push   %rbp
  414913:	49 bb f0 66 21 00 00 	movabs $0x2166f0,%r11
  41491a:	00 00 00 
  41491d:	53                   	push   %rbx
  41491e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414910 <_ZN4YAML12BadSubscriptD0Ev>
  virtual ~Exception() throw() {}
  414925:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41492c:	ff ff ff 
class BadSubscript : public RepresentationException {
  41492f:	48 89 fd             	mov    %rdi,%rbp
  414932:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414935:	48 01 d8             	add    %rbx,%rax
  414938:	48 89 07             	mov    %rax,(%rdi)
  41493b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41493f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414943:	48 39 c7             	cmp    %rax,%rdi
  414946:	74 12                	je     41495a <_ZN4YAML12BadSubscriptD0Ev+0x4a>
  414948:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41494f:	ff ff ff 
  414952:	49 89 df             	mov    %rbx,%r15
  414955:	48 01 d8             	add    %rbx,%rax
  414958:	ff d0                	callq  *%rax
  41495a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414961:	ff ff ff 
  414964:	48 89 ef             	mov    %rbp,%rdi
  414967:	49 89 df             	mov    %rbx,%r15
  41496a:	48 01 d8             	add    %rbx,%rax
  41496d:	ff d0                	callq  *%rax
class BadSubscript : public RepresentationException {
  41496f:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414976:	ff ff ff 
  414979:	48 89 ef             	mov    %rbp,%rdi
  41497c:	be 40 00 00 00       	mov    $0x40,%esi
  414981:	48 01 d8             	add    %rbx,%rax
  414984:	5b                   	pop    %rbx
  414985:	5d                   	pop    %rbp
  414986:	41 5f                	pop    %r15
  414988:	ff e0                	jmpq   *%rax
  41498a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414990 <_ZN4YAML23RepresentationExceptionD0Ev>:
class RepresentationException : public Exception {
  414990:	41 57                	push   %r15
  414992:	55                   	push   %rbp
  414993:	49 bb 70 66 21 00 00 	movabs $0x216670,%r11
  41499a:	00 00 00 
  41499d:	53                   	push   %rbx
  41499e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414990 <_ZN4YAML23RepresentationExceptionD0Ev>
  virtual ~Exception() throw() {}
  4149a5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4149ac:	ff ff ff 
class RepresentationException : public Exception {
  4149af:	48 89 fd             	mov    %rdi,%rbp
  4149b2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4149b5:	48 01 d8             	add    %rbx,%rax
  4149b8:	48 89 07             	mov    %rax,(%rdi)
  4149bb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4149bf:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4149c3:	48 39 c7             	cmp    %rax,%rdi
  4149c6:	74 12                	je     4149da <_ZN4YAML23RepresentationExceptionD0Ev+0x4a>
  4149c8:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4149cf:	ff ff ff 
  4149d2:	49 89 df             	mov    %rbx,%r15
  4149d5:	48 01 d8             	add    %rbx,%rax
  4149d8:	ff d0                	callq  *%rax
  4149da:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4149e1:	ff ff ff 
  4149e4:	48 89 ef             	mov    %rbp,%rdi
  4149e7:	49 89 df             	mov    %rbx,%r15
  4149ea:	48 01 d8             	add    %rbx,%rax
  4149ed:	ff d0                	callq  *%rax
class RepresentationException : public Exception {
  4149ef:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4149f6:	ff ff ff 
  4149f9:	48 89 ef             	mov    %rbp,%rdi
  4149fc:	be 40 00 00 00       	mov    $0x40,%esi
  414a01:	48 01 d8             	add    %rbx,%rax
  414a04:	5b                   	pop    %rbx
  414a05:	5d                   	pop    %rbp
  414a06:	41 5f                	pop    %r15
  414a08:	ff e0                	jmpq   *%rax
  414a0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414a10 <_ZN4YAML13BadConversionD0Ev>:
class BadConversion : public RepresentationException {
  414a10:	41 57                	push   %r15
  414a12:	55                   	push   %rbp
  414a13:	49 bb f0 65 21 00 00 	movabs $0x2165f0,%r11
  414a1a:	00 00 00 
  414a1d:	53                   	push   %rbx
  414a1e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414a10 <_ZN4YAML13BadConversionD0Ev>
  virtual ~Exception() throw() {}
  414a25:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  414a2c:	ff ff ff 
class BadConversion : public RepresentationException {
  414a2f:	48 89 fd             	mov    %rdi,%rbp
  414a32:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414a35:	48 01 d8             	add    %rbx,%rax
  414a38:	48 89 07             	mov    %rax,(%rdi)
  414a3b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414a3f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414a43:	48 39 c7             	cmp    %rax,%rdi
  414a46:	74 12                	je     414a5a <_ZN4YAML13BadConversionD0Ev+0x4a>
  414a48:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414a4f:	ff ff ff 
  414a52:	49 89 df             	mov    %rbx,%r15
  414a55:	48 01 d8             	add    %rbx,%rax
  414a58:	ff d0                	callq  *%rax
  414a5a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414a61:	ff ff ff 
  414a64:	48 89 ef             	mov    %rbp,%rdi
  414a67:	49 89 df             	mov    %rbx,%r15
  414a6a:	48 01 d8             	add    %rbx,%rax
  414a6d:	ff d0                	callq  *%rax
class BadConversion : public RepresentationException {
  414a6f:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414a76:	ff ff ff 
  414a79:	48 89 ef             	mov    %rbp,%rdi
  414a7c:	be 40 00 00 00       	mov    $0x40,%esi
  414a81:	48 01 d8             	add    %rbx,%rax
  414a84:	5b                   	pop    %rbx
  414a85:	5d                   	pop    %rbp
  414a86:	41 5f                	pop    %r15
  414a88:	ff e0                	jmpq   *%rax
  414a8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414a90 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED1Ev>:
class basic_pointerbuf : public BufferT {
  414a90:	41 57                	push   %r15
  414a92:	55                   	push   %rbp
  414a93:	49 bb 70 65 21 00 00 	movabs $0x216570,%r11
  414a9a:	00 00 00 
  414a9d:	53                   	push   %rbx
  414a9e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414a90 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED1Ev>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
  414aa5:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  414aac:	ff ff ff 
  414aaf:	48 89 fd             	mov    %rdi,%rbp
  414ab2:	4c 01 db             	add    %r11,%rbx
  414ab5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414ab9:	48 83 c0 10          	add    $0x10,%rax
  414abd:	48 89 07             	mov    %rax,(%rdi)
  414ac0:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414ac4:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  414ac8:	48 39 c7             	cmp    %rax,%rdi
  414acb:	74 12                	je     414adf <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED1Ev+0x4f>
  414acd:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414ad4:	ff ff ff 
  414ad7:	49 89 df             	mov    %rbx,%r15
  414ada:	48 01 d8             	add    %rbx,%rax
  414add:	ff d0                	callq  *%rax
  414adf:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414ae6:	ff ff ff 
  414ae9:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  414aed:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414af1:	48 83 c0 10          	add    $0x10,%rax
  414af5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414af9:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  414b00:	ff ff ff 
  414b03:	48 01 d8             	add    %rbx,%rax
  414b06:	5b                   	pop    %rbx
  414b07:	5d                   	pop    %rbp
  414b08:	41 5f                	pop    %r15
  414b0a:	ff e0                	jmpq   *%rax
  414b0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414b10 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED1Ev>:
  414b10:	41 57                	push   %r15
  414b12:	55                   	push   %rbp
  414b13:	49 bb f0 64 21 00 00 	movabs $0x2164f0,%r11
  414b1a:	00 00 00 
  414b1d:	53                   	push   %rbx
  414b1e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414b10 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED1Ev>
  414b25:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  414b2c:	ff ff ff 
  414b2f:	48 89 fd             	mov    %rdi,%rbp
  414b32:	4c 01 db             	add    %r11,%rbx
  414b35:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414b39:	48 83 c0 10          	add    $0x10,%rax
  414b3d:	48 89 07             	mov    %rax,(%rdi)
  414b40:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414b44:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  414b48:	48 39 c7             	cmp    %rax,%rdi
  414b4b:	74 12                	je     414b5f <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED1Ev+0x4f>
  414b4d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414b54:	ff ff ff 
  414b57:	49 89 df             	mov    %rbx,%r15
  414b5a:	48 01 d8             	add    %rbx,%rax
  414b5d:	ff d0                	callq  *%rax
  414b5f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414b66:	ff ff ff 
  414b69:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  414b6d:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414b71:	48 83 c0 10          	add    $0x10,%rax
  414b75:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414b79:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  414b80:	ff ff ff 
  414b83:	48 01 d8             	add    %rbx,%rax
  414b86:	5b                   	pop    %rbx
  414b87:	5d                   	pop    %rbp
  414b88:	41 5f                	pop    %r15
  414b8a:	ff e0                	jmpq   *%rax
  414b8c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414b90 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED0Ev>:
  414b90:	41 57                	push   %r15
  414b92:	55                   	push   %rbp
  414b93:	49 bb 70 64 21 00 00 	movabs $0x216470,%r11
  414b9a:	00 00 00 
  414b9d:	53                   	push   %rbx
  414b9e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414b90 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED0Ev>
  414ba5:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  414bac:	ff ff ff 
  414baf:	48 89 fd             	mov    %rdi,%rbp
  414bb2:	4c 01 db             	add    %r11,%rbx
  414bb5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414bb9:	48 83 c0 10          	add    $0x10,%rax
  414bbd:	48 89 07             	mov    %rax,(%rdi)
  414bc0:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414bc4:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  414bc8:	48 39 c7             	cmp    %rax,%rdi
  414bcb:	74 12                	je     414bdf <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED0Ev+0x4f>
  414bcd:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414bd4:	ff ff ff 
  414bd7:	49 89 df             	mov    %rbx,%r15
  414bda:	48 01 d8             	add    %rbx,%rax
  414bdd:	ff d0                	callq  *%rax
  414bdf:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414be6:	ff ff ff 
  414be9:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  414bed:	49 89 df             	mov    %rbx,%r15
  414bf0:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414bf4:	48 83 c0 10          	add    $0x10,%rax
  414bf8:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414bfc:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  414c03:	ff ff ff 
  414c06:	48 01 d8             	add    %rbx,%rax
  414c09:	ff d0                	callq  *%rax
  414c0b:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414c12:	ff ff ff 
  414c15:	48 89 ef             	mov    %rbp,%rdi
  414c18:	be 68 00 00 00       	mov    $0x68,%esi
  414c1d:	48 01 d8             	add    %rbx,%rax
  414c20:	5b                   	pop    %rbx
  414c21:	5d                   	pop    %rbp
  414c22:	41 5f                	pop    %r15
  414c24:	ff e0                	jmpq   *%rax
  414c26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414c2d:	00 00 00 

0000000000414c30 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED0Ev>:
  414c30:	41 57                	push   %r15
  414c32:	55                   	push   %rbp
  414c33:	49 bb d0 63 21 00 00 	movabs $0x2163d0,%r11
  414c3a:	00 00 00 
  414c3d:	53                   	push   %rbx
  414c3e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414c30 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED0Ev>
  414c45:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  414c4c:	ff ff ff 
  414c4f:	48 89 fd             	mov    %rdi,%rbp
  414c52:	4c 01 db             	add    %r11,%rbx
  414c55:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414c59:	48 83 c0 10          	add    $0x10,%rax
  414c5d:	48 89 07             	mov    %rax,(%rdi)
  414c60:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414c64:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  414c68:	48 39 c7             	cmp    %rax,%rdi
  414c6b:	74 12                	je     414c7f <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED0Ev+0x4f>
  414c6d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414c74:	ff ff ff 
  414c77:	49 89 df             	mov    %rbx,%r15
  414c7a:	48 01 d8             	add    %rbx,%rax
  414c7d:	ff d0                	callq  *%rax
  414c7f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414c86:	ff ff ff 
  414c89:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  414c8d:	49 89 df             	mov    %rbx,%r15
  414c90:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414c94:	48 83 c0 10          	add    $0x10,%rax
  414c98:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414c9c:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  414ca3:	ff ff ff 
  414ca6:	48 01 d8             	add    %rbx,%rax
  414ca9:	ff d0                	callq  *%rax
  414cab:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414cb2:	ff ff ff 
  414cb5:	48 89 ef             	mov    %rbp,%rdi
  414cb8:	be 68 00 00 00       	mov    $0x68,%esi
  414cbd:	48 01 d8             	add    %rbx,%rax
  414cc0:	5b                   	pop    %rbx
  414cc1:	5d                   	pop    %rbp
  414cc2:	41 5f                	pop    %r15
  414cc4:	ff e0                	jmpq   *%rax
  414cc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414ccd:	00 00 00 

0000000000414cd0 <_ZN11EnvironmentD1Ev>:
class Environment {
  414cd0:	41 57                	push   %r15
  414cd2:	41 55                	push   %r13
  414cd4:	49 89 fd             	mov    %rdi,%r13
  414cd7:	41 54                	push   %r12
  414cd9:	55                   	push   %rbp
  414cda:	48 8d 2d ef ff ff ff 	lea    -0x11(%rip),%rbp        # 414cd0 <_ZN11EnvironmentD1Ev>
  414ce1:	53                   	push   %rbx
  414ce2:	48 8b 7f 30          	mov    0x30(%rdi),%rdi
  414ce6:	49 bb 30 63 21 00 00 	movabs $0x216330,%r11
  414ced:	00 00 00 
  414cf0:	4c 01 dd             	add    %r11,%rbp
  414cf3:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  414cfa:	ff ff ff 
  414cfd:	49 01 ec             	add    %rbp,%r12
      while (__n)
  414d00:	48 85 ff             	test   %rdi,%rdi
  414d03:	74 14                	je     414d19 <_ZN11EnvironmentD1Ev+0x49>
  414d05:	0f 1f 00             	nopl   (%rax)
  414d08:	48 8b 1f             	mov    (%rdi),%rbx
  414d0b:	49 89 ef             	mov    %rbp,%r15
  414d0e:	41 ff d4             	callq  *%r12
  414d11:	48 85 db             	test   %rbx,%rbx
  414d14:	48 89 df             	mov    %rbx,%rdi
  414d17:	75 ef                	jne    414d08 <_ZN11EnvironmentD1Ev+0x38>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  414d19:	49 8b 45 28          	mov    0x28(%r13),%rax
  414d1d:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  414d21:	31 f6                	xor    %esi,%esi
  414d23:	49 89 ef             	mov    %rbp,%r15
  414d26:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  414d2d:	00 
  414d2e:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  414d35:	ff ff ff 
  414d38:	48 01 e8             	add    %rbp,%rax
  414d3b:	ff d0                	callq  *%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  414d3d:	49 8b 7d 20          	mov    0x20(%r13),%rdi
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  414d41:	49 8d 45 50          	lea    0x50(%r13),%rax
      _M_element_count = 0;
  414d45:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
  414d4c:	00 
      _M_before_begin._M_nxt = nullptr;
  414d4d:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
  414d54:	00 
	if (_M_uses_single_bucket(__bkts))
  414d55:	48 39 c7             	cmp    %rax,%rdi
  414d58:	74 12                	je     414d6c <_ZN11EnvironmentD1Ev+0x9c>
  414d5a:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414d61:	ff ff ff 
  414d64:	49 89 ef             	mov    %rbp,%r15
  414d67:	48 01 e8             	add    %rbp,%rax
  414d6a:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  414d6c:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	if (__p)
  414d70:	48 85 ff             	test   %rdi,%rdi
  414d73:	74 1b                	je     414d90 <_ZN11EnvironmentD1Ev+0xc0>
  414d75:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414d7c:	ff ff ff 
  414d7f:	5b                   	pop    %rbx
  414d80:	48 01 e8             	add    %rbp,%rax
  414d83:	5d                   	pop    %rbp
  414d84:	41 5c                	pop    %r12
  414d86:	41 5d                	pop    %r13
  414d88:	41 5f                	pop    %r15
  414d8a:	ff e0                	jmpq   *%rax
  414d8c:	0f 1f 40 00          	nopl   0x0(%rax)
  414d90:	5b                   	pop    %rbx
  414d91:	5d                   	pop    %rbp
  414d92:	41 5c                	pop    %r12
  414d94:	41 5d                	pop    %r13
  414d96:	41 5f                	pop    %r15
  414d98:	c3                   	retq   
  414d99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000414da0 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev>:
            ~error_info_injector() throw()
  414da0:	41 57                	push   %r15
  414da2:	55                   	push   %rbp
  414da3:	49 bb 60 62 21 00 00 	movabs $0x216260,%r11
  414daa:	00 00 00 
  414dad:	53                   	push   %rbx
  414dae:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414da0 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev>
                }
  414db5:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  414dbc:	ff ff ff 
            ~error_info_injector() throw()
  414dbf:	48 89 fd             	mov    %rdi,%rbp
  414dc2:	4c 01 db             	add    %r11,%rbx
                }
  414dc5:	48 01 d8             	add    %rbx,%rax
  414dc8:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414dcb:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414dd2:	ff ff ff 
  414dd5:	48 01 d8             	add    %rbx,%rax
  414dd8:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  414ddc:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  414de0:	48 85 ff             	test   %rdi,%rdi
  414de3:	74 06                	je     414deb <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev+0x4b>
  414de5:	48 8b 07             	mov    (%rdi),%rax
  414de8:	ff 50 20             	callq  *0x20(%rax)
  414deb:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  414df2:	ff ff ff 
  414df5:	48 89 ef             	mov    %rbp,%rdi
  414df8:	49 89 df             	mov    %rbx,%r15
  414dfb:	48 01 d8             	add    %rbx,%rax
  414dfe:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414e02:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  414e09:	ff ff ff 
  414e0c:	48 01 d8             	add    %rbx,%rax
  414e0f:	ff d0                	callq  *%rax
                }
  414e11:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414e18:	ff ff ff 
  414e1b:	48 89 ef             	mov    %rbp,%rdi
  414e1e:	be 40 00 00 00       	mov    $0x40,%esi
  414e23:	48 01 d8             	add    %rbx,%rax
  414e26:	5b                   	pop    %rbx
  414e27:	5d                   	pop    %rbp
  414e28:	41 5f                	pop    %r15
  414e2a:	ff e0                	jmpq   *%rax
  414e2c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414e30 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev>:
            ~error_info_injector() throw()
  414e30:	48 83 ef 18          	sub    $0x18,%rdi
  414e34:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414e34 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev+0x4>
  414e3b:	49 ba cc 61 21 00 00 	movabs $0x2161cc,%r10
  414e42:	00 00 00 
  414e45:	4d 01 d3             	add    %r10,%r11
  414e48:	49 ba a0 9d de ff ff 	movabs $0xffffffffffde9da0,%r10
  414e4f:	ff ff ff 
  414e52:	4d 01 da             	add    %r11,%r10
  414e55:	41 ff e2             	jmpq   *%r10
  414e58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  414e5f:	00 

0000000000414e60 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>:
            ~clone_impl() throw()
  414e60:	41 57                	push   %r15
  414e62:	55                   	push   %rbp
  414e63:	49 bb a0 61 21 00 00 	movabs $0x2161a0,%r11
  414e6a:	00 00 00 
  414e6d:	53                   	push   %rbx
  414e6e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414e60 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>
                }
  414e75:	48 b8 20 f1 ff ff ff 	movabs $0xfffffffffffff120,%rax
  414e7c:	ff ff ff 
            ~clone_impl() throw()
  414e7f:	48 89 fd             	mov    %rdi,%rbp
  414e82:	4c 01 db             	add    %r11,%rbx
                }
  414e85:	48 01 d8             	add    %rbx,%rax
  414e88:	48 89 47 40          	mov    %rax,0x40(%rdi)
                }
  414e8c:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  414e93:	ff ff ff 
  414e96:	48 01 d8             	add    %rbx,%rax
  414e99:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414e9c:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414ea3:	ff ff ff 
  414ea6:	48 01 d8             	add    %rbx,%rax
  414ea9:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  414ead:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  414eb1:	48 85 ff             	test   %rdi,%rdi
  414eb4:	74 06                	je     414ebc <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev+0x5c>
  414eb6:	48 8b 07             	mov    (%rdi),%rax
  414eb9:	ff 50 20             	callq  *0x20(%rax)
  414ebc:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  414ec3:	ff ff ff 
  414ec6:	48 89 ef             	mov    %rbp,%rdi
  414ec9:	48 01 d8             	add    %rbx,%rax
  414ecc:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414ed0:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  414ed7:	ff ff ff 
  414eda:	48 01 d8             	add    %rbx,%rax
                }
  414edd:	5b                   	pop    %rbx
  414ede:	5d                   	pop    %rbp
  414edf:	41 5f                	pop    %r15
  414ee1:	ff e0                	jmpq   *%rax
  414ee3:	0f 1f 00             	nopl   (%rax)
  414ee6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414eed:	00 00 00 

0000000000414ef0 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>:
            ~clone_impl() throw()
  414ef0:	48 83 ef 18          	sub    $0x18,%rdi
  414ef4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414ef4 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev+0x4>
  414efb:	49 ba 0c 61 21 00 00 	movabs $0x21610c,%r10
  414f02:	00 00 00 
  414f05:	4d 01 d3             	add    %r10,%r11
  414f08:	49 ba 60 9e de ff ff 	movabs $0xffffffffffde9e60,%r10
  414f0f:	ff ff ff 
  414f12:	4d 01 da             	add    %r11,%r10
  414f15:	41 ff e2             	jmpq   *%r10
  414f18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  414f1f:	00 

0000000000414f20 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>:
  414f20:	4c 8b 17             	mov    (%rdi),%r10
  414f23:	49 03 7a d8          	add    -0x28(%r10),%rdi
  414f27:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414f27 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev+0x7>
  414f2e:	49 ba d9 60 21 00 00 	movabs $0x2160d9,%r10
  414f35:	00 00 00 
  414f38:	4d 01 d3             	add    %r10,%r11
  414f3b:	49 ba 60 9e de ff ff 	movabs $0xffffffffffde9e60,%r10
  414f42:	ff ff ff 
  414f45:	4d 01 da             	add    %r11,%r10
  414f48:	41 ff e2             	jmpq   *%r10
  414f4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000414f50 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>:
  414f50:	41 57                	push   %r15
  414f52:	55                   	push   %rbp
  414f53:	49 bb b0 60 21 00 00 	movabs $0x2160b0,%r11
  414f5a:	00 00 00 
  414f5d:	53                   	push   %rbx
  414f5e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414f50 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>
                }
  414f65:	48 b8 90 f3 ff ff ff 	movabs $0xfffffffffffff390,%rax
  414f6c:	ff ff ff 
            ~clone_impl() throw()
  414f6f:	48 89 fd             	mov    %rdi,%rbp
  414f72:	4c 01 db             	add    %r11,%rbx
                }
  414f75:	48 01 d8             	add    %rbx,%rax
  414f78:	48 89 47 38          	mov    %rax,0x38(%rdi)
                }
  414f7c:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  414f83:	ff ff ff 
  414f86:	48 01 d8             	add    %rbx,%rax
  414f89:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414f8c:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414f93:	ff ff ff 
  414f96:	48 01 d8             	add    %rbx,%rax
  414f99:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  414f9d:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  414fa1:	48 85 ff             	test   %rdi,%rdi
  414fa4:	74 06                	je     414fac <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev+0x5c>
  414fa6:	48 8b 07             	mov    (%rdi),%rax
  414fa9:	ff 50 20             	callq  *0x20(%rax)
  414fac:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  414fb3:	ff ff ff 
  414fb6:	48 89 ef             	mov    %rbp,%rdi
  414fb9:	48 01 d8             	add    %rbx,%rax
  414fbc:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414fc0:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414fc7:	ff ff ff 
  414fca:	48 01 d8             	add    %rbx,%rax
                }
  414fcd:	5b                   	pop    %rbx
  414fce:	5d                   	pop    %rbp
  414fcf:	41 5f                	pop    %r15
  414fd1:	ff e0                	jmpq   *%rax
  414fd3:	0f 1f 00             	nopl   (%rax)
  414fd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414fdd:	00 00 00 

0000000000414fe0 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>:
            ~clone_impl() throw()
  414fe0:	48 83 ef 10          	sub    $0x10,%rdi
  414fe4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414fe4 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev+0x4>
  414feb:	49 ba 1c 60 21 00 00 	movabs $0x21601c,%r10
  414ff2:	00 00 00 
  414ff5:	4d 01 d3             	add    %r10,%r11
  414ff8:	49 ba 50 9f de ff ff 	movabs $0xffffffffffde9f50,%r10
  414fff:	ff ff ff 
  415002:	4d 01 da             	add    %r11,%r10
  415005:	41 ff e2             	jmpq   *%r10
  415008:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41500f:	00 

0000000000415010 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>:
  415010:	4c 8b 17             	mov    (%rdi),%r10
  415013:	49 03 7a d8          	add    -0x28(%r10),%rdi
  415017:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 415017 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev+0x7>
  41501e:	49 ba e9 5f 21 00 00 	movabs $0x215fe9,%r10
  415025:	00 00 00 
  415028:	4d 01 d3             	add    %r10,%r11
  41502b:	49 ba 50 9f de ff ff 	movabs $0xffffffffffde9f50,%r10
  415032:	ff ff ff 
  415035:	4d 01 da             	add    %r11,%r10
  415038:	41 ff e2             	jmpq   *%r10
  41503b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415040 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev>:
            ~error_info_injector() throw()
  415040:	41 57                	push   %r15
  415042:	55                   	push   %rbp
  415043:	49 bb c0 5f 21 00 00 	movabs $0x215fc0,%r11
  41504a:	00 00 00 
  41504d:	53                   	push   %rbx
  41504e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 415040 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev>
                }
  415055:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  41505c:	ff ff ff 
            ~error_info_injector() throw()
  41505f:	48 89 fd             	mov    %rdi,%rbp
  415062:	4c 01 db             	add    %r11,%rbx
                }
  415065:	48 01 d8             	add    %rbx,%rax
  415068:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  41506b:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  415072:	ff ff ff 
  415075:	48 01 d8             	add    %rbx,%rax
  415078:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  41507c:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  415080:	48 85 ff             	test   %rdi,%rdi
  415083:	74 06                	je     41508b <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev+0x4b>
  415085:	48 8b 07             	mov    (%rdi),%rax
  415088:	ff 50 20             	callq  *0x20(%rax)
  41508b:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  415092:	ff ff ff 
  415095:	48 89 ef             	mov    %rbp,%rdi
  415098:	49 89 df             	mov    %rbx,%r15
  41509b:	48 01 d8             	add    %rbx,%rax
  41509e:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4150a2:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4150a9:	ff ff ff 
  4150ac:	48 01 d8             	add    %rbx,%rax
  4150af:	ff d0                	callq  *%rax
                }
  4150b1:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4150b8:	ff ff ff 
  4150bb:	48 89 ef             	mov    %rbp,%rdi
  4150be:	be 38 00 00 00       	mov    $0x38,%esi
  4150c3:	48 01 d8             	add    %rbx,%rax
  4150c6:	5b                   	pop    %rbx
  4150c7:	5d                   	pop    %rbp
  4150c8:	41 5f                	pop    %r15
  4150ca:	ff e0                	jmpq   *%rax
  4150cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004150d0 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev>:
            ~error_info_injector() throw()
  4150d0:	48 83 ef 10          	sub    $0x10,%rdi
  4150d4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4150d4 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev+0x4>
  4150db:	49 ba 2c 5f 21 00 00 	movabs $0x215f2c,%r10
  4150e2:	00 00 00 
  4150e5:	4d 01 d3             	add    %r10,%r11
  4150e8:	49 ba 40 a0 de ff ff 	movabs $0xffffffffffdea040,%r10
  4150ef:	ff ff ff 
  4150f2:	4d 01 da             	add    %r11,%r10
  4150f5:	41 ff e2             	jmpq   *%r10
  4150f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4150ff:	00 

0000000000415100 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>:
            ~clone_impl() throw()
  415100:	41 57                	push   %r15
  415102:	55                   	push   %rbp
  415103:	49 bb 00 5f 21 00 00 	movabs $0x215f00,%r11
  41510a:	00 00 00 
  41510d:	53                   	push   %rbx
  41510e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 415100 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>
                }
  415115:	48 b8 90 f3 ff ff ff 	movabs $0xfffffffffffff390,%rax
  41511c:	ff ff ff 
            ~clone_impl() throw()
  41511f:	48 89 fd             	mov    %rdi,%rbp
  415122:	4c 01 db             	add    %r11,%rbx
                }
  415125:	48 01 d8             	add    %rbx,%rax
  415128:	48 89 47 38          	mov    %rax,0x38(%rdi)
                }
  41512c:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  415133:	ff ff ff 
  415136:	48 01 d8             	add    %rbx,%rax
  415139:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  41513c:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  415143:	ff ff ff 
  415146:	48 01 d8             	add    %rbx,%rax
  415149:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  41514d:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  415151:	48 85 ff             	test   %rdi,%rdi
  415154:	74 06                	je     41515c <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev+0x5c>
  415156:	48 8b 07             	mov    (%rdi),%rax
  415159:	ff 50 20             	callq  *0x20(%rax)
  41515c:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  415163:	ff ff ff 
  415166:	48 89 ef             	mov    %rbp,%rdi
  415169:	49 89 df             	mov    %rbx,%r15
  41516c:	48 01 d8             	add    %rbx,%rax
  41516f:	48 89 45 00          	mov    %rax,0x0(%rbp)
  415173:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  41517a:	ff ff ff 
  41517d:	48 01 d8             	add    %rbx,%rax
  415180:	ff d0                	callq  *%rax
                }
  415182:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  415189:	ff ff ff 
  41518c:	48 89 ef             	mov    %rbp,%rdi
  41518f:	be 40 00 00 00       	mov    $0x40,%esi
  415194:	48 01 d8             	add    %rbx,%rax
  415197:	5b                   	pop    %rbx
  415198:	5d                   	pop    %rbp
  415199:	41 5f                	pop    %r15
  41519b:	ff e0                	jmpq   *%rax
  41519d:	0f 1f 00             	nopl   (%rax)

00000000004151a0 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>:
            ~clone_impl() throw()
  4151a0:	48 83 ef 10          	sub    $0x10,%rdi
  4151a4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4151a4 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev+0x4>
  4151ab:	49 ba 5c 5e 21 00 00 	movabs $0x215e5c,%r10
  4151b2:	00 00 00 
  4151b5:	4d 01 d3             	add    %r10,%r11
  4151b8:	49 ba 00 a1 de ff ff 	movabs $0xffffffffffdea100,%r10
  4151bf:	ff ff ff 
  4151c2:	4d 01 da             	add    %r11,%r10
  4151c5:	41 ff e2             	jmpq   *%r10
  4151c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4151cf:	00 

00000000004151d0 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>:
  4151d0:	4c 8b 17             	mov    (%rdi),%r10
  4151d3:	49 03 7a d8          	add    -0x28(%r10),%rdi
  4151d7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4151d7 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev+0x7>
  4151de:	49 ba 29 5e 21 00 00 	movabs $0x215e29,%r10
  4151e5:	00 00 00 
  4151e8:	4d 01 d3             	add    %r10,%r11
  4151eb:	49 ba 00 a1 de ff ff 	movabs $0xffffffffffdea100,%r10
  4151f2:	ff ff ff 
  4151f5:	4d 01 da             	add    %r11,%r10
  4151f8:	41 ff e2             	jmpq   *%r10
  4151fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415200 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>:
  415200:	41 57                	push   %r15
  415202:	55                   	push   %rbp
  415203:	49 bb 00 5e 21 00 00 	movabs $0x215e00,%r11
  41520a:	00 00 00 
  41520d:	53                   	push   %rbx
  41520e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 415200 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>
                }
  415215:	48 b8 20 f1 ff ff ff 	movabs $0xfffffffffffff120,%rax
  41521c:	ff ff ff 
            ~clone_impl() throw()
  41521f:	48 89 fd             	mov    %rdi,%rbp
  415222:	4c 01 db             	add    %r11,%rbx
                }
  415225:	48 01 d8             	add    %rbx,%rax
  415228:	48 89 47 40          	mov    %rax,0x40(%rdi)
                }
  41522c:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  415233:	ff ff ff 
  415236:	48 01 d8             	add    %rbx,%rax
  415239:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  41523c:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  415243:	ff ff ff 
  415246:	48 01 d8             	add    %rbx,%rax
  415249:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  41524d:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  415251:	48 85 ff             	test   %rdi,%rdi
  415254:	74 06                	je     41525c <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev+0x5c>
  415256:	48 8b 07             	mov    (%rdi),%rax
  415259:	ff 50 20             	callq  *0x20(%rax)
  41525c:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  415263:	ff ff ff 
  415266:	48 89 ef             	mov    %rbp,%rdi
  415269:	49 89 df             	mov    %rbx,%r15
  41526c:	48 01 d8             	add    %rbx,%rax
  41526f:	48 89 45 00          	mov    %rax,0x0(%rbp)
  415273:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  41527a:	ff ff ff 
  41527d:	48 01 d8             	add    %rbx,%rax
  415280:	ff d0                	callq  *%rax
                }
  415282:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  415289:	ff ff ff 
  41528c:	48 89 ef             	mov    %rbp,%rdi
  41528f:	be 48 00 00 00       	mov    $0x48,%esi
  415294:	48 01 d8             	add    %rbx,%rax
  415297:	5b                   	pop    %rbx
  415298:	5d                   	pop    %rbp
  415299:	41 5f                	pop    %r15
  41529b:	ff e0                	jmpq   *%rax
  41529d:	0f 1f 00             	nopl   (%rax)

00000000004152a0 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>:
            ~clone_impl() throw()
  4152a0:	48 83 ef 18          	sub    $0x18,%rdi
  4152a4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4152a4 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev+0x4>
  4152ab:	49 ba 5c 5d 21 00 00 	movabs $0x215d5c,%r10
  4152b2:	00 00 00 
  4152b5:	4d 01 d3             	add    %r10,%r11
  4152b8:	49 ba 00 a2 de ff ff 	movabs $0xffffffffffdea200,%r10
  4152bf:	ff ff ff 
  4152c2:	4d 01 da             	add    %r11,%r10
  4152c5:	41 ff e2             	jmpq   *%r10
  4152c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4152cf:	00 

00000000004152d0 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>:
  4152d0:	4c 8b 17             	mov    (%rdi),%r10
  4152d3:	49 03 7a d8          	add    -0x28(%r10),%rdi
  4152d7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4152d7 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev+0x7>
  4152de:	49 ba 29 5d 21 00 00 	movabs $0x215d29,%r10
  4152e5:	00 00 00 
  4152e8:	4d 01 d3             	add    %r10,%r11
  4152eb:	49 ba 00 a2 de ff ff 	movabs $0xffffffffffdea200,%r10
  4152f2:	ff ff ff 
  4152f5:	4d 01 da             	add    %r11,%r10
  4152f8:	41 ff e2             	jmpq   *%r10
  4152fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415300 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE>:
        virtual bool apply_default(boost::any& value_store) const
  415300:	41 57                	push   %r15
  415302:	41 54                	push   %r12
  415304:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 415300 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE>
  41530b:	55                   	push   %rbp
  41530c:	53                   	push   %rbx
  41530d:	49 bb 00 5d 21 00 00 	movabs $0x215d00,%r11
  415314:	00 00 00 
  415317:	4d 01 df             	add    %r11,%r15
                return false;
  41531a:	31 ed                	xor    %ebp,%ebp
        virtual bool apply_default(boost::any& value_store) const
  41531c:	48 83 ec 08          	sub    $0x8,%rsp
            return !content;
  415320:	4c 8b 67 38          	mov    0x38(%rdi),%r12
            if (m_default_value.empty()) {
  415324:	4d 85 e4             	test   %r12,%r12
  415327:	74 63                	je     41538c <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0x8c>
          : content(other.content ? other.content->clone() : 0)
  415329:	49 8b 04 24          	mov    (%r12),%rax
  41532d:	48 ba b0 85 de ff ff 	movabs $0xffffffffffde85b0,%rdx
  415334:	ff ff ff 
  415337:	48 89 f3             	mov    %rsi,%rbx
  41533a:	4c 01 fa             	add    %r15,%rdx
  41533d:	48 8b 40 18          	mov    0x18(%rax),%rax
  415341:	48 39 d0             	cmp    %rdx,%rax
  415344:	75 5a                	jne    4153a0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0xa0>
                return new holder(held);
  415346:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41534d:	ff ff ff 
  415350:	bf 10 00 00 00       	mov    $0x10,%edi
  415355:	4c 01 f8             	add    %r15,%rax
  415358:	ff d0                	callq  *%rax
              : held(value)
  41535a:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  415361:	ff ff ff 
  415364:	f3 41 0f 10 44 24 08 	movss  0x8(%r12),%xmm0
  41536b:	4c 01 fa             	add    %r15,%rdx
  41536e:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  415373:	48 89 10             	mov    %rdx,(%rax)
      __a = _GLIBCXX_MOVE(__b);
  415376:	48 8b 3b             	mov    (%rbx),%rdi
                return true;
  415379:	bd 01 00 00 00       	mov    $0x1,%ebp
      __b = _GLIBCXX_MOVE(__tmp);
  41537e:	48 89 03             	mov    %rax,(%rbx)
            delete content;
  415381:	48 85 ff             	test   %rdi,%rdi
  415384:	74 06                	je     41538c <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0x8c>
  415386:	48 8b 07             	mov    (%rdi),%rax
  415389:	ff 50 08             	callq  *0x8(%rax)
        }
  41538c:	48 83 c4 08          	add    $0x8,%rsp
  415390:	89 e8                	mov    %ebp,%eax
  415392:	5b                   	pop    %rbx
  415393:	5d                   	pop    %rbp
  415394:	41 5c                	pop    %r12
  415396:	41 5f                	pop    %r15
  415398:	c3                   	retq   
  415399:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
          : content(other.content ? other.content->clone() : 0)
  4153a0:	4c 89 e7             	mov    %r12,%rdi
  4153a3:	ff d0                	callq  *%rax
  4153a5:	eb cf                	jmp    415376 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0x76>
  4153a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4153ae:	00 00 

00000000004153b0 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE>:
        virtual bool apply_default(boost::any& value_store) const
  4153b0:	41 57                	push   %r15
  4153b2:	41 54                	push   %r12
  4153b4:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 4153b0 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE>
  4153bb:	55                   	push   %rbp
  4153bc:	53                   	push   %rbx
  4153bd:	49 bb 50 5c 21 00 00 	movabs $0x215c50,%r11
  4153c4:	00 00 00 
  4153c7:	4d 01 df             	add    %r11,%r15
                return false;
  4153ca:	31 ed                	xor    %ebp,%ebp
        virtual bool apply_default(boost::any& value_store) const
  4153cc:	48 83 ec 08          	sub    $0x8,%rsp
            return !content;
  4153d0:	4c 8b 67 38          	mov    0x38(%rdi),%r12
            if (m_default_value.empty()) {
  4153d4:	4d 85 e4             	test   %r12,%r12
  4153d7:	74 63                	je     41543c <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0x8c>
          : content(other.content ? other.content->clone() : 0)
  4153d9:	49 8b 04 24          	mov    (%r12),%rax
  4153dd:	48 ba b0 85 de ff ff 	movabs $0xffffffffffde85b0,%rdx
  4153e4:	ff ff ff 
  4153e7:	48 89 f3             	mov    %rsi,%rbx
  4153ea:	4c 01 fa             	add    %r15,%rdx
  4153ed:	48 8b 40 18          	mov    0x18(%rax),%rax
  4153f1:	48 39 d0             	cmp    %rdx,%rax
  4153f4:	75 5a                	jne    415450 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0xa0>
                return new holder(held);
  4153f6:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  4153fd:	ff ff ff 
  415400:	bf 10 00 00 00       	mov    $0x10,%edi
  415405:	4c 01 f8             	add    %r15,%rax
  415408:	ff d0                	callq  *%rax
              : held(value)
  41540a:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  415411:	ff ff ff 
  415414:	f3 41 0f 10 44 24 08 	movss  0x8(%r12),%xmm0
  41541b:	4c 01 fa             	add    %r15,%rdx
  41541e:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  415423:	48 89 10             	mov    %rdx,(%rax)
      __a = _GLIBCXX_MOVE(__b);
  415426:	48 8b 3b             	mov    (%rbx),%rdi
                return true;
  415429:	bd 01 00 00 00       	mov    $0x1,%ebp
      __b = _GLIBCXX_MOVE(__tmp);
  41542e:	48 89 03             	mov    %rax,(%rbx)
            delete content;
  415431:	48 85 ff             	test   %rdi,%rdi
  415434:	74 06                	je     41543c <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0x8c>
  415436:	48 8b 07             	mov    (%rdi),%rax
  415439:	ff 50 08             	callq  *0x8(%rax)
        }
  41543c:	48 83 c4 08          	add    $0x8,%rsp
  415440:	89 e8                	mov    %ebp,%eax
  415442:	5b                   	pop    %rbx
  415443:	5d                   	pop    %rbp
  415444:	41 5c                	pop    %r12
  415446:	41 5f                	pop    %r15
  415448:	c3                   	retq   
  415449:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
          : content(other.content ? other.content->clone() : 0)
  415450:	4c 89 e7             	mov    %r12,%rdi
  415453:	ff d0                	callq  *%rax
  415455:	eb cf                	jmp    415426 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0x76>
  415457:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41545e:	00 00 

0000000000415460 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z6fillermS2_miEES2_miEEvmmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
  415460:	41 56                	push   %r14
  415462:	41 55                	push   %r13
  415464:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 415460 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z6fillermS2_miEES2_miEEvmmmm>
  41546b:	41 54                	push   %r12
  41546d:	49 89 d4             	mov    %rdx,%r12
  415470:	55                   	push   %rbp
  node->cost += node->solution[i].cost;
  415471:	48 69 d2 50 06 00 00 	imul   $0x650,%rdx,%rdx
  415478:	53                   	push   %rbx
  415479:	49 bb a0 5b 21 00 00 	movabs $0x215ba0,%r11
  415480:	00 00 00 
  415483:	48 89 f3             	mov    %rsi,%rbx
  415486:	4d 01 dd             	add    %r11,%r13
  415489:	48 89 cd             	mov    %rcx,%rbp
	node->focalHeuristic = focalHeuristic(node->solution);  
  41548c:	48 89 f7             	mov    %rsi,%rdi
  node->cost += node->solution[i].cost;
  41548f:	48 01 f2             	add    %rsi,%rdx
  415492:	8b 82 10 06 00 00    	mov    0x610(%rdx),%eax
  415498:	03 86 40 00 01 00    	add    0x10040(%rsi),%eax
  41549e:	41 89 c6             	mov    %eax,%r14d
  4154a1:	89 86 40 00 01 00    	mov    %eax,0x10040(%rsi)
  node->LB += node->solution[i].fmin;
  4154a7:	8b 82 14 06 00 00    	mov    0x614(%rdx),%eax
  4154ad:	01 86 44 00 01 00    	add    %eax,0x10044(%rsi)
	node->focalHeuristic = focalHeuristic(node->solution);  
  4154b3:	48 b8 c0 34 de ff ff 	movabs $0xffffffffffde34c0,%rax
  4154ba:	ff ff ff 
  4154bd:	4c 01 e8             	add    %r13,%rax
  4154c0:	ff d0                	callq  *%rax
  4154c2:	89 83 48 00 01 00    	mov    %eax,0x10048(%rbx)
  unsigned int child_prio = node->focalHeuristic * 1000 + node->cost;
  4154c8:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  4154ce:	44 01 f0             	add    %r14d,%eax
  node->timestamp =  child_prio;
  4154d1:	89 83 4c 00 01 00    	mov    %eax,0x1004c(%rbx)
        : [opcode]"g"(op));
  4154d7:	48 c7 c1 12 04 00 00 	mov    $0x412,%rcx
  4154de:	48 87 c9             	xchg   %rcx,%rcx
  if(child_prio>= swarm::superTimestamp()){ 
  4154e1:	48 39 c8             	cmp    %rcx,%rax
  4154e4:	73 3a                	jae    415520 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z6fillermS2_miEES2_miEEvmmmm+0xc0>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4154e6:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  4154ed:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  4154f2:	48 87 c9             	xchg   %rcx,%rcx
            :);
  4154f5:	48 ba b0 0b df ff ff 	movabs $0xffffffffffdf0bb0,%rdx
  4154fc:	ff ff ff 
    return static_cast<uint64_t>(t);
  4154ff:	48 63 b3 50 00 01 00 	movslq 0x10050(%rbx),%rsi
            :);
  415506:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  41550b:	4c 01 ea             	add    %r13,%rdx
  41550e:	48 89 c7             	mov    %rax,%rdi
  415511:	48 87 c9             	xchg   %rcx,%rcx
}
  415514:	5b                   	pop    %rbx
  415515:	5d                   	pop    %rbp
  415516:	41 5c                	pop    %r12
  415518:	41 5d                	pop    %r13
  41551a:	41 5e                	pop    %r14
  41551c:	c3                   	retq   
  41551d:	0f 1f 00             	nopl   (%rax)
    register uint64_t r9  asm("r9")  = v4;
  415520:	48 ba 70 b8 de ff ff 	movabs $0xffffffffffdeb870,%rdx
  415527:	ff ff ff 
    return static_cast<uint64_t>(t);
  41552a:	4c 63 c5             	movslq %ebp,%r8
    register uint64_t r10 asm("r10") = v5;
  41552d:	45 31 d2             	xor    %r10d,%r10d
    register uint64_t r9  asm("r9")  = v4;
  415530:	4e 8d 0c 2a          	lea    (%rdx,%r13,1),%r9
            :);
  415534:	b9 03 00 20 40       	mov    $0x40200003,%ecx
  415539:	48 89 c7             	mov    %rax,%rdi
  41553c:	48 89 de             	mov    %rbx,%rsi
  41553f:	4c 89 e2             	mov    %r12,%rdx
  415542:	48 87 c9             	xchg   %rcx,%rcx
}
  415545:	5b                   	pop    %rbx
  415546:	5d                   	pop    %rbp
  415547:	41 5c                	pop    %r12
  415549:	41 5d                	pop    %r13
  41554b:	41 5e                	pop    %r14
  41554d:	c3                   	retq   
  41554e:	66 90                	xchg   %ax,%ax

0000000000415550 <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i>:
            invalid_option_value,
            invalid_option
        };
        
    public:
        validation_error(kind_t kind, 
  415550:	41 57                	push   %r15
  415552:	41 56                	push   %r14
  415554:	49 bb b0 5a 21 00 00 	movabs $0x215ab0,%r11
  41555b:	00 00 00 
  41555e:	41 55                	push   %r13
  415560:	41 54                	push   %r12
                   const std::string& option_name = "",
                   const std::string& original_token = "",
                   int option_style              = 0):
        error_with_option_name(get_template(kind), option_name, original_token, option_style)
  415562:	48 b8 e0 e3 dd ff ff 	movabs $0xffffffffffdde3e0,%rax
  415569:	ff ff ff 
        validation_error(kind_t kind, 
  41556c:	55                   	push   %rbp
  41556d:	53                   	push   %rbx
  41556e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 415550 <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i>
  415575:	49 89 fc             	mov    %rdi,%r12
  415578:	49 89 d5             	mov    %rdx,%r13
  41557b:	49 89 ce             	mov    %rcx,%r14
  41557e:	48 83 ec 38          	sub    $0x38,%rsp
  415582:	4c 01 db             	add    %r11,%rbx
        error_with_option_name(get_template(kind), option_name, original_token, option_style)
  415585:	89 f2                	mov    %esi,%edx
  415587:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  41558c:	48 89 fe             	mov    %rdi,%rsi
        validation_error(kind_t kind, 
  41558f:	44 89 44 24 0c       	mov    %r8d,0xc(%rsp)
        error_with_option_name(get_template(kind), option_name, original_token, option_style)
  415594:	48 01 d8             	add    %rbx,%rax
  415597:	49 89 df             	mov    %rbx,%r15
  41559a:	48 89 ef             	mov    %rbp,%rdi
  41559d:	ff d0                	callq  *%rax
  41559f:	48 b8 a0 e6 dd ff ff 	movabs $0xffffffffffdde6a0,%rax
  4155a6:	ff ff ff 
  4155a9:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  4155ae:	4c 89 f1             	mov    %r14,%rcx
  4155b1:	4c 89 ea             	mov    %r13,%rdx
  4155b4:	48 89 ee             	mov    %rbp,%rsi
  4155b7:	4c 89 e7             	mov    %r12,%rdi
  4155ba:	48 01 d8             	add    %rbx,%rax
  4155bd:	ff d0                	callq  *%rax
  4155bf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4155c4:	48 83 c5 10          	add    $0x10,%rbp
  4155c8:	48 39 ef             	cmp    %rbp,%rdi
  4155cb:	74 0f                	je     4155dc <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i+0x8c>
  4155cd:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4155d4:	ff ff ff 
  4155d7:	48 01 d8             	add    %rbx,%rax
  4155da:	ff d0                	callq  *%rax
  4155dc:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4155e3:	ff ff ff 
  4155e6:	48 01 d8             	add    %rbx,%rax
  4155e9:	49 89 04 24          	mov    %rax,(%r12)
        {
        }
  4155ed:	48 83 c4 38          	add    $0x38,%rsp
  4155f1:	5b                   	pop    %rbx
  4155f2:	5d                   	pop    %rbp
  4155f3:	41 5c                	pop    %r12
  4155f5:	41 5d                	pop    %r13
  4155f7:	41 5e                	pop    %r14
  4155f9:	41 5f                	pop    %r15
  4155fb:	c3                   	retq   
  4155fc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415601:	48 83 c5 10          	add    $0x10,%rbp
  415605:	49 89 c4             	mov    %rax,%r12
  415608:	48 39 ef             	cmp    %rbp,%rdi
  41560b:	74 12                	je     41561f <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i+0xcf>
  41560d:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  415614:	ff ff ff 
  415617:	49 89 df             	mov    %rbx,%r15
  41561a:	48 01 da             	add    %rbx,%rdx
  41561d:	ff d2                	callq  *%rdx
  41561f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415626:	ff ff ff 
  415629:	4c 89 e7             	mov    %r12,%rdi
  41562c:	49 89 df             	mov    %rbx,%r15
  41562f:	48 01 d8             	add    %rbx,%rax
  415632:	ff d0                	callq  *%rax
  415634:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41563b:	00 00 00 
  41563e:	66 90                	xchg   %ax,%ax

0000000000415640 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_>:
            {
  415640:	41 57                	push   %r15
  415642:	41 55                	push   %r13
  415644:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 415640 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_>
  41564b:	41 54                	push   %r12
  41564d:	55                   	push   %rbp
  41564e:	49 bb c0 59 21 00 00 	movabs $0x2159c0,%r11
  415655:	00 00 00 
  415658:	53                   	push   %rbx
  415659:	4d 01 dd             	add    %r11,%r13
  41565c:	48 89 fd             	mov    %rdi,%rbp
  41565f:	49 89 f4             	mov    %rsi,%r12
  415662:	48 83 ec 10          	sub    $0x10,%rsp
                return px_;
  415666:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
            if( error_info_container * d=b->data_.get() )
  41566a:	48 85 db             	test   %rbx,%rbx
  41566d:	0f 84 85 00 00 00    	je     4156f8 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xb8>
                data = d->clone();
  415673:	48 8b 03             	mov    (%rbx),%rax
  415676:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  41567b:	48 89 de             	mov    %rbx,%rsi
  41567e:	ff 50 28             	callq  *0x28(%rax)
                adopt(x.px_);
  415681:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
                if( px_ )
  415686:	48 85 db             	test   %rbx,%rbx
  415689:	74 19                	je     4156a4 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x64>
                    px_->add_ref();
  41568b:	48 8b 03             	mov    (%rbx),%rax
  41568e:	48 89 df             	mov    %rbx,%rdi
  415691:	ff 50 18             	callq  *0x18(%rax)
                if( px_ && px_->release() )
  415694:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  415699:	48 85 ff             	test   %rdi,%rdi
  41569c:	74 06                	je     4156a4 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x64>
  41569e:	48 8b 07             	mov    (%rdi),%rax
  4156a1:	ff 50 20             	callq  *0x20(%rax)
            a->throw_file_ = b->throw_file_;
  4156a4:	49 8b 44 24 18       	mov    0x18(%r12),%rax
                if( px_ && px_->release() )
  4156a9:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
            a->throw_file_ = b->throw_file_;
  4156ad:	48 89 45 18          	mov    %rax,0x18(%rbp)
            a->throw_line_ = b->throw_line_;
  4156b1:	41 8b 44 24 20       	mov    0x20(%r12),%eax
                if( px_ && px_->release() )
  4156b6:	48 85 ff             	test   %rdi,%rdi
            a->throw_line_ = b->throw_line_;
  4156b9:	89 45 20             	mov    %eax,0x20(%rbp)
            a->throw_function_ = b->throw_function_;
  4156bc:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  4156c1:	48 89 45 10          	mov    %rax,0x10(%rbp)
                if( px_ && px_->release() )
  4156c5:	74 06                	je     4156cd <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x8d>
  4156c7:	48 8b 07             	mov    (%rdi),%rax
  4156ca:	ff 50 20             	callq  *0x20(%rax)
                if( px_ )
  4156cd:	48 85 db             	test   %rbx,%rbx
                px_=px;
  4156d0:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
                if( px_ )
  4156d4:	74 12                	je     4156e8 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xa8>
                    px_->add_ref();
  4156d6:	48 8b 03             	mov    (%rbx),%rax
  4156d9:	48 89 df             	mov    %rbx,%rdi
  4156dc:	ff 50 18             	callq  *0x18(%rax)
                if( px_ && px_->release() )
  4156df:	48 8b 03             	mov    (%rbx),%rax
  4156e2:	48 89 df             	mov    %rbx,%rdi
  4156e5:	ff 50 20             	callq  *0x20(%rax)
            }
  4156e8:	48 83 c4 10          	add    $0x10,%rsp
  4156ec:	5b                   	pop    %rbx
  4156ed:	5d                   	pop    %rbp
  4156ee:	41 5c                	pop    %r12
  4156f0:	41 5d                	pop    %r13
  4156f2:	41 5f                	pop    %r15
  4156f4:	c3                   	retq   
  4156f5:	0f 1f 00             	nopl   (%rax)
            a->throw_file_ = b->throw_file_;
  4156f8:	48 8b 46 18          	mov    0x18(%rsi),%rax
  4156fc:	48 89 47 18          	mov    %rax,0x18(%rdi)
            a->throw_line_ = b->throw_line_;
  415700:	8b 46 20             	mov    0x20(%rsi),%eax
  415703:	89 47 20             	mov    %eax,0x20(%rdi)
            a->throw_function_ = b->throw_function_;
  415706:	48 8b 46 10          	mov    0x10(%rsi),%rax
  41570a:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  41570e:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  415712:	48 85 ff             	test   %rdi,%rdi
  415715:	75 b0                	jne    4156c7 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x87>
  415717:	eb cf                	jmp    4156e8 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xa8>
  415719:	48 89 c5             	mov    %rax,%rbp
  41571c:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415723:	ff ff ff 
  415726:	48 89 ef             	mov    %rbp,%rdi
  415729:	4d 89 ef             	mov    %r13,%r15
  41572c:	4c 01 e8             	add    %r13,%rax
  41572f:	ff d0                	callq  *%rax
  415731:	48 89 c5             	mov    %rax,%rbp
  415734:	48 8b 03             	mov    (%rbx),%rax
  415737:	48 89 df             	mov    %rbx,%rdi
  41573a:	ff 50 20             	callq  *0x20(%rax)
  41573d:	eb dd                	jmp    41571c <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xdc>
  41573f:	48 85 db             	test   %rbx,%rbx
  415742:	48 89 c5             	mov    %rax,%rbp
  415745:	75 ed                	jne    415734 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xf4>
  415747:	eb d3                	jmp    41571c <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xdc>
  415749:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41574e:	48 89 c5             	mov    %rax,%rbp
  415751:	48 85 ff             	test   %rdi,%rdi
  415754:	74 de                	je     415734 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xf4>
  415756:	48 8b 07             	mov    (%rdi),%rax
  415759:	ff 50 20             	callq  *0x20(%rax)
  41575c:	eb d6                	jmp    415734 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xf4>
  41575e:	66 90                	xchg   %ax,%ax

0000000000415760 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv>:
            clone() const
  415760:	41 57                	push   %r15
  415762:	41 55                	push   %r13
  415764:	49 bb a0 58 21 00 00 	movabs $0x2158a0,%r11
  41576b:	00 00 00 
  41576e:	41 54                	push   %r12
  415770:	55                   	push   %rbp
  415771:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 415760 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv>
                return new clone_impl(*this,clone_tag());
  415778:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41577f:	ff ff ff 
            clone() const
  415782:	49 89 fc             	mov    %rdi,%r12
  415785:	53                   	push   %rbx
  415786:	4c 01 dd             	add    %r11,%rbp
                return new clone_impl(*this,clone_tag());
  415789:	bf 48 00 00 00       	mov    $0x48,%edi
    class BOOST_SYMBOL_VISIBLE bad_lexical_cast :
  41578e:	49 bd 68 ef ff ff ff 	movabs $0xffffffffffffef68,%r13
  415795:	ff ff ff 
  415798:	48 01 e8             	add    %rbp,%rax
  41579b:	49 89 ef             	mov    %rbp,%r15
  41579e:	ff d0                	callq  *%rax
  4157a0:	48 89 c3             	mov    %rax,%rbx
        clone_base
  4157a3:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  4157aa:	ff ff ff 
                px_(x.px_)
  4157ad:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
        clone_base
  4157b2:	48 01 e8             	add    %rbp,%rax
  4157b5:	48 89 43 40          	mov    %rax,0x40(%rbx)
  4157b9:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
                px_(x.px_)
  4157be:	48 89 7b 20          	mov    %rdi,0x20(%rbx)
  4157c2:	48 89 03             	mov    %rax,(%rbx)
  4157c5:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  4157ca:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4157ce:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  4157d3:	48 89 43 10          	mov    %rax,0x10(%rbx)
    exception
  4157d7:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  4157de:	ff ff ff 
  4157e1:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  4157e4:	48 85 ff             	test   %rdi,%rdi
    exception
  4157e7:	48 89 43 18          	mov    %rax,0x18(%rbx)
                if( px_ )
  4157eb:	74 06                	je     4157f3 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv+0x93>
                    px_->add_ref();
  4157ed:	48 8b 07             	mov    (%rdi),%rax
  4157f0:	ff 50 18             	callq  *0x18(%rax)
    exception
  4157f3:	41 8b 44 24 38       	mov    0x38(%r12),%eax
                copy_boost_exception(this,&x);
  4157f8:	49 8d 74 24 18       	lea    0x18(%r12),%rsi
  4157fd:	48 8d 7b 18          	lea    0x18(%rbx),%rdi
    exception
  415801:	f3 41 0f 6f 44 24 28 	movdqu 0x28(%r12),%xmm0
  415808:	89 43 38             	mov    %eax,0x38(%rbx)
                T(x)
  41580b:	48 b8 b0 f0 ff ff ff 	movabs $0xfffffffffffff0b0,%rax
  415812:	ff ff ff 
  415815:	48 01 e8             	add    %rbp,%rax
  415818:	48 8d 50 38          	lea    0x38(%rax),%rdx
  41581c:	48 89 03             	mov    %rax,(%rbx)
  41581f:	48 83 c0 70          	add    $0x70,%rax
  415823:	48 89 43 40          	mov    %rax,0x40(%rbx)
                copy_boost_exception(this,&x);
  415827:	48 b8 40 a6 de ff ff 	movabs $0xffffffffffdea640,%rax
  41582e:	ff ff ff 
    exception
  415831:	0f 11 43 28          	movups %xmm0,0x28(%rbx)
                T(x)
  415835:	48 89 53 18          	mov    %rdx,0x18(%rbx)
                copy_boost_exception(this,&x);
  415839:	48 01 e8             	add    %rbp,%rax
  41583c:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  41583e:	48 8b 03             	mov    (%rbx),%rax
  415841:	48 03 58 e8          	add    -0x18(%rax),%rbx
  415845:	48 89 d8             	mov    %rbx,%rax
                }
  415848:	5b                   	pop    %rbx
  415849:	5d                   	pop    %rbp
  41584a:	41 5c                	pop    %r12
  41584c:	41 5d                	pop    %r13
  41584e:	41 5f                	pop    %r15
  415850:	c3                   	retq   
  415851:	49 89 c4             	mov    %rax,%r12
        {}
  415854:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  415859:	48 89 df             	mov    %rbx,%rdi
  41585c:	49 89 ef             	mov    %rbp,%r15
  41585f:	48 89 03             	mov    %rax,(%rbx)
  415862:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  415869:	ff ff ff 
  41586c:	48 01 e8             	add    %rbp,%rax
  41586f:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  415871:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  415878:	ff ff ff 
  41587b:	48 89 df             	mov    %rbx,%rdi
  41587e:	be 48 00 00 00       	mov    $0x48,%esi
  415883:	48 01 e8             	add    %rbp,%rax
  415886:	49 89 ef             	mov    %rbp,%r15
  415889:	ff d0                	callq  *%rax
  41588b:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415892:	ff ff ff 
  415895:	4c 89 e7             	mov    %r12,%rdi
  415898:	48 01 e8             	add    %rbp,%rax
  41589b:	ff d0                	callq  *%rax
  41589d:	49 89 c4             	mov    %rax,%r12
                T(x)
  4158a0:	48 b8 40 8c de ff ff 	movabs $0xffffffffffde8c40,%rax
  4158a7:	ff ff ff 
  4158aa:	48 89 df             	mov    %rbx,%rdi
  4158ad:	48 01 e8             	add    %rbp,%rax
  4158b0:	ff d0                	callq  *%rax
  4158b2:	eb bd                	jmp    415871 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv+0x111>
  4158b4:	66 90                	xchg   %ax,%ax
  4158b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4158bd:	00 00 00 

00000000004158c0 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv>:
            clone() const
  4158c0:	4c 8b 17             	mov    (%rdi),%r10
  4158c3:	49 03 7a e8          	add    -0x18(%r10),%rdi
  4158c7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4158c7 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv+0x7>
  4158ce:	49 ba 39 57 21 00 00 	movabs $0x215739,%r10
  4158d5:	00 00 00 
  4158d8:	4d 01 d3             	add    %r10,%r11
  4158db:	49 ba 60 a7 de ff ff 	movabs $0xffffffffffdea760,%r10
  4158e2:	ff ff ff 
  4158e5:	4d 01 da             	add    %r11,%r10
  4158e8:	41 ff e2             	jmpq   *%r10
  4158eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004158f0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv>:
  4158f0:	41 57                	push   %r15
  4158f2:	41 55                	push   %r13
  4158f4:	49 bb 10 57 21 00 00 	movabs $0x215710,%r11
  4158fb:	00 00 00 
  4158fe:	41 54                	push   %r12
  415900:	55                   	push   %rbp
  415901:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 4158f0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv>
                return new clone_impl(*this,clone_tag());
  415908:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41590f:	ff ff ff 
            clone() const
  415912:	53                   	push   %rbx
  415913:	49 89 fc             	mov    %rdi,%r12
  415916:	4c 01 dd             	add    %r11,%rbp
                return new clone_impl(*this,clone_tag());
  415919:	bf 40 00 00 00       	mov    $0x40,%edi
  41591e:	49 bd 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%r13
  415925:	ff ff ff 
  415928:	49 89 ef             	mov    %rbp,%r15
  41592b:	48 01 e8             	add    %rbp,%rax
  41592e:	ff d0                	callq  *%rax
  415930:	48 89 c3             	mov    %rax,%rbx
        clone_base
  415933:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  41593a:	ff ff ff 
  41593d:	4c 89 e6             	mov    %r12,%rsi
  415940:	48 01 e8             	add    %rbp,%rax
  415943:	48 89 df             	mov    %rbx,%rdi
  415946:	48 89 43 38          	mov    %rax,0x38(%rbx)
  41594a:	48 b8 60 e8 dd ff ff 	movabs $0xffffffffffdde860,%rax
  415951:	ff ff ff 
  415954:	48 01 e8             	add    %rbp,%rax
  415957:	ff d0                	callq  *%rax
  415959:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
                px_(x.px_)
  41595e:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
  415963:	48 89 03             	mov    %rax,(%rbx)
    exception
  415966:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  41596d:	ff ff ff 
  415970:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  415973:	48 85 ff             	test   %rdi,%rdi
                px_(x.px_)
  415976:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
    exception
  41597a:	48 89 43 10          	mov    %rax,0x10(%rbx)
                if( px_ )
  41597e:	74 06                	je     415986 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv+0x96>
                    px_->add_ref();
  415980:	48 8b 07             	mov    (%rdi),%rax
  415983:	ff 50 18             	callq  *0x18(%rax)
    exception
  415986:	41 8b 44 24 30       	mov    0x30(%r12),%eax
                copy_boost_exception(this,&x);
  41598b:	49 8d 74 24 10       	lea    0x10(%r12),%rsi
  415990:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    exception
  415994:	f3 41 0f 6f 44 24 20 	movdqu 0x20(%r12),%xmm0
  41599b:	89 43 30             	mov    %eax,0x30(%rbx)
                T(x)
  41599e:	48 b8 20 f3 ff ff ff 	movabs $0xfffffffffffff320,%rax
  4159a5:	ff ff ff 
  4159a8:	48 01 e8             	add    %rbp,%rax
  4159ab:	48 8d 50 38          	lea    0x38(%rax),%rdx
  4159af:	48 89 03             	mov    %rax,(%rbx)
  4159b2:	48 83 c0 70          	add    $0x70,%rax
  4159b6:	48 89 43 38          	mov    %rax,0x38(%rbx)
                copy_boost_exception(this,&x);
  4159ba:	48 b8 40 a6 de ff ff 	movabs $0xffffffffffdea640,%rax
  4159c1:	ff ff ff 
    exception
  4159c4:	0f 11 43 20          	movups %xmm0,0x20(%rbx)
                T(x)
  4159c8:	48 89 53 10          	mov    %rdx,0x10(%rbx)
                copy_boost_exception(this,&x);
  4159cc:	48 01 e8             	add    %rbp,%rax
  4159cf:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  4159d1:	48 8b 03             	mov    (%rbx),%rax
  4159d4:	48 03 58 e8          	add    -0x18(%rax),%rbx
  4159d8:	48 89 d8             	mov    %rbx,%rax
                }
  4159db:	5b                   	pop    %rbx
  4159dc:	5d                   	pop    %rbp
  4159dd:	41 5c                	pop    %r12
  4159df:	41 5d                	pop    %r13
  4159e1:	41 5f                	pop    %r15
  4159e3:	c3                   	retq   
  4159e4:	49 89 c4             	mov    %rax,%r12
  4159e7:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  4159ec:	48 89 df             	mov    %rbx,%rdi
  4159ef:	49 89 ef             	mov    %rbp,%r15
  4159f2:	48 89 03             	mov    %rax,(%rbx)
  4159f5:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4159fc:	ff ff ff 
  4159ff:	48 01 e8             	add    %rbp,%rax
  415a02:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  415a04:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  415a0b:	ff ff ff 
  415a0e:	48 89 df             	mov    %rbx,%rdi
  415a11:	be 40 00 00 00       	mov    $0x40,%esi
  415a16:	48 01 e8             	add    %rbp,%rax
  415a19:	49 89 ef             	mov    %rbp,%r15
  415a1c:	ff d0                	callq  *%rax
  415a1e:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415a25:	ff ff ff 
  415a28:	4c 89 e7             	mov    %r12,%rdi
  415a2b:	48 01 e8             	add    %rbp,%rax
  415a2e:	ff d0                	callq  *%rax
  415a30:	49 89 c4             	mov    %rax,%r12
                T(x)
  415a33:	48 b8 00 8f de ff ff 	movabs $0xffffffffffde8f00,%rax
  415a3a:	ff ff ff 
  415a3d:	48 89 df             	mov    %rbx,%rdi
  415a40:	48 01 e8             	add    %rbp,%rax
  415a43:	ff d0                	callq  *%rax
  415a45:	eb bd                	jmp    415a04 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv+0x114>
  415a47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  415a4e:	00 00 

0000000000415a50 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv>:
            clone() const
  415a50:	4c 8b 17             	mov    (%rdi),%r10
  415a53:	49 03 7a e8          	add    -0x18(%r10),%rdi
  415a57:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 415a57 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv+0x7>
  415a5e:	49 ba a9 55 21 00 00 	movabs $0x2155a9,%r10
  415a65:	00 00 00 
  415a68:	4d 01 d3             	add    %r10,%r11
  415a6b:	49 ba f0 a8 de ff ff 	movabs $0xffffffffffdea8f0,%r10
  415a72:	ff ff ff 
  415a75:	4d 01 da             	add    %r11,%r10
  415a78:	41 ff e2             	jmpq   *%r10
  415a7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415a80 <_ZN5boost3anyaSERKS0_>:
        any & operator=(const any& rhs)
  415a80:	41 57                	push   %r15
  415a82:	55                   	push   %rbp
  415a83:	4c 8d 3d f6 ff ff ff 	lea    -0xa(%rip),%r15        # 415a80 <_ZN5boost3anyaSERKS0_>
  415a8a:	53                   	push   %rbx
          : content(other.content ? other.content->clone() : 0)
  415a8b:	48 8b 1e             	mov    (%rsi),%rbx
  415a8e:	49 bb 80 55 21 00 00 	movabs $0x215580,%r11
  415a95:	00 00 00 
  415a98:	4d 01 df             	add    %r11,%r15
        any & operator=(const any& rhs)
  415a9b:	48 89 fd             	mov    %rdi,%rbp
          : content(other.content ? other.content->clone() : 0)
  415a9e:	48 85 db             	test   %rbx,%rbx
  415aa1:	74 4a                	je     415aed <_ZN5boost3anyaSERKS0_+0x6d>
  415aa3:	48 8b 03             	mov    (%rbx),%rax
  415aa6:	48 ba b0 85 de ff ff 	movabs $0xffffffffffde85b0,%rdx
  415aad:	ff ff ff 
  415ab0:	4c 01 fa             	add    %r15,%rdx
  415ab3:	48 8b 40 18          	mov    0x18(%rax),%rax
  415ab7:	48 39 d0             	cmp    %rdx,%rax
  415aba:	75 54                	jne    415b10 <_ZN5boost3anyaSERKS0_+0x90>
                return new holder(held);
  415abc:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  415ac3:	ff ff ff 
  415ac6:	bf 10 00 00 00       	mov    $0x10,%edi
  415acb:	4c 01 f8             	add    %r15,%rax
  415ace:	ff d0                	callq  *%rax
              : held(value)
  415ad0:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
  415ad5:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  415adc:	ff ff ff 
  415adf:	4c 01 fa             	add    %r15,%rdx
  415ae2:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  415ae7:	48 89 c3             	mov    %rax,%rbx
  415aea:	48 89 10             	mov    %rdx,(%rax)
      __a = _GLIBCXX_MOVE(__b);
  415aed:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
      __b = _GLIBCXX_MOVE(__tmp);
  415af1:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
            delete content;
  415af5:	48 85 ff             	test   %rdi,%rdi
  415af8:	74 06                	je     415b00 <_ZN5boost3anyaSERKS0_+0x80>
  415afa:	48 8b 07             	mov    (%rdi),%rax
  415afd:	ff 50 08             	callq  *0x8(%rax)
        }
  415b00:	48 89 e8             	mov    %rbp,%rax
  415b03:	5b                   	pop    %rbx
  415b04:	5d                   	pop    %rbp
  415b05:	41 5f                	pop    %r15
  415b07:	c3                   	retq   
  415b08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  415b0f:	00 
          : content(other.content ? other.content->clone() : 0)
  415b10:	48 89 df             	mov    %rbx,%rdi
  415b13:	ff d0                	callq  *%rax
  415b15:	48 89 c3             	mov    %rax,%rbx
  415b18:	eb d3                	jmp    415aed <_ZN5boost3anyaSERKS0_+0x6d>
  415b1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000415b20 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE>:
    typed_value<T, charT>::
  415b20:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 415b20 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE>
  415b27:	49 bb e0 54 21 00 00 	movabs $0x2154e0,%r11
  415b2e:	00 00 00 
  415b31:	48 89 f9             	mov    %rdi,%rcx
  415b34:	48 89 f7             	mov    %rsi,%rdi
  415b37:	48 89 d6             	mov    %rdx,%rsi
        if (new_tokens.empty() && !m_implicit_value.empty())
  415b3a:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  415b3e:	4c 01 d8             	add    %r11,%rax
  415b41:	48 39 16             	cmp    %rdx,(%rsi)
  415b44:	74 1a                	je     415b60 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE+0x40>
    typed_value<T, charT>::
  415b46:	41 57                	push   %r15
            validate(value_store, new_tokens, (T*)0, 0);
  415b48:	49 b8 80 e8 dd ff ff 	movabs $0xffffffffffdde880,%r8
  415b4f:	ff ff ff 
  415b52:	31 c9                	xor    %ecx,%ecx
    }
  415b54:	41 5f                	pop    %r15
            validate(value_store, new_tokens, (T*)0, 0);
  415b56:	31 d2                	xor    %edx,%edx
  415b58:	49 01 c0             	add    %rax,%r8
  415b5b:	41 ff e0             	jmpq   *%r8
  415b5e:	66 90                	xchg   %ax,%ax
        if (new_tokens.empty() && !m_implicit_value.empty())
  415b60:	48 83 79 60 00       	cmpq   $0x0,0x60(%rcx)
  415b65:	74 df                	je     415b46 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE+0x26>
            value_store = m_implicit_value;
  415b67:	48 ba 80 aa de ff ff 	movabs $0xffffffffffdeaa80,%rdx
  415b6e:	ff ff ff 
  415b71:	48 8d 71 60          	lea    0x60(%rcx),%rsi
  415b75:	48 01 d0             	add    %rdx,%rax
  415b78:	ff e0                	jmpq   *%rax
  415b7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000415b80 <_ZN5boost6detail15sp_counted_base7releaseEv>:
    bool add_ref_lock() // true on success
    {
        return atomic_conditional_increment( &use_count_ ) != 0;
    }

    void release() // nothrow
  415b80:	55                   	push   %rbp
  415b81:	48 8d 2d f8 ff ff ff 	lea    -0x8(%rip),%rbp        # 415b80 <_ZN5boost6detail15sp_counted_base7releaseEv>
  415b88:	53                   	push   %rbx
  415b89:	49 bb 80 54 21 00 00 	movabs $0x215480,%r11
  415b90:	00 00 00 
  415b93:	48 83 ec 08          	sub    $0x8,%rsp
  415b97:	4c 01 dd             	add    %r11,%rbp
    {
        if( atomic_decrement( &use_count_ ) == 1 )
  415b9a:	f0 83 6f 08 01       	lock subl $0x1,0x8(%rdi)
  415b9f:	74 0f                	je     415bb0 <_ZN5boost6detail15sp_counted_base7releaseEv+0x30>
        {
            dispose();
            weak_release();
        }
    }
  415ba1:	48 83 c4 08          	add    $0x8,%rsp
  415ba5:	5b                   	pop    %rbx
  415ba6:	5d                   	pop    %rbp
  415ba7:	c3                   	retq   
  415ba8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  415baf:	00 
            dispose();
  415bb0:	48 8b 07             	mov    (%rdi),%rax
  415bb3:	48 89 fb             	mov    %rdi,%rbx
  415bb6:	ff 50 10             	callq  *0x10(%rax)
        atomic_increment( &weak_count_ );
    }

    void weak_release() // nothrow
    {
        if( atomic_decrement( &weak_count_ ) == 1 )
  415bb9:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  415bbe:	75 e1                	jne    415ba1 <_ZN5boost6detail15sp_counted_base7releaseEv+0x21>
        {
            destroy();
  415bc0:	48 8b 03             	mov    (%rbx),%rax
  415bc3:	48 b9 80 81 de ff ff 	movabs $0xffffffffffde8180,%rcx
  415bca:	ff ff ff 
  415bcd:	48 01 e9             	add    %rbp,%rcx
  415bd0:	48 8b 50 18          	mov    0x18(%rax),%rdx
  415bd4:	48 39 ca             	cmp    %rcx,%rdx
  415bd7:	75 0f                	jne    415be8 <_ZN5boost6detail15sp_counted_base7releaseEv+0x68>
        delete this;
  415bd9:	48 8b 40 08          	mov    0x8(%rax),%rax
    }
  415bdd:	48 83 c4 08          	add    $0x8,%rsp
        delete this;
  415be1:	48 89 df             	mov    %rbx,%rdi
    }
  415be4:	5b                   	pop    %rbx
  415be5:	5d                   	pop    %rbp
        delete this;
  415be6:	ff e0                	jmpq   *%rax
    }
  415be8:	48 83 c4 08          	add    $0x8,%rsp
            destroy();
  415bec:	48 89 df             	mov    %rbx,%rdi
    }
  415bef:	5b                   	pop    %rbx
  415bf0:	5d                   	pop    %rbp
            destroy();
  415bf1:	ff e2                	jmpq   *%rdx
  415bf3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  415bfa:	00 00 00 
  415bfd:	0f 1f 00             	nopl   (%rax)

0000000000415c00 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv>:
    virtual void dispose() // nothrow
  415c00:	41 57                	push   %r15
  415c02:	55                   	push   %rbp
  415c03:	49 bb 00 54 21 00 00 	movabs $0x215400,%r11
  415c0a:	00 00 00 
  415c0d:	53                   	push   %rbx
        boost::checked_delete( px_ );
  415c0e:	48 8b 6f 10          	mov    0x10(%rdi),%rbp
  415c12:	48 8d 1d e7 ff ff ff 	lea    -0x19(%rip),%rbx        # 415c00 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv>
  415c19:	4c 01 db             	add    %r11,%rbx
template<class T> inline void checked_delete(T * x)
{
    // intentionally complex - simplification causes regressions
    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete x;
  415c1c:	48 85 ed             	test   %rbp,%rbp
  415c1f:	74 37                	je     415c58 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv+0x58>
  415c21:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  415c25:	48 85 ff             	test   %rdi,%rdi
  415c28:	74 0f                	je     415c39 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv+0x39>
  415c2a:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  415c31:	ff ff ff 
  415c34:	48 01 d8             	add    %rbx,%rax
  415c37:	ff d0                	callq  *%rax
  415c39:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  415c40:	ff ff ff 
  415c43:	48 89 ef             	mov    %rbp,%rdi
  415c46:	be 10 00 00 00       	mov    $0x10,%esi
  415c4b:	48 01 d8             	add    %rbx,%rax
    }
  415c4e:	5b                   	pop    %rbx
  415c4f:	5d                   	pop    %rbp
  415c50:	41 5f                	pop    %r15
  415c52:	ff e0                	jmpq   *%rax
  415c54:	0f 1f 40 00          	nopl   0x0(%rax)
  415c58:	5b                   	pop    %rbx
  415c59:	5d                   	pop    %rbp
  415c5a:	41 5f                	pop    %r15
  415c5c:	c3                   	retq   
  415c5d:	0f 1f 00             	nopl   (%rax)

0000000000415c60 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  static const std::string build_what(const Mark& mark,
  415c60:	41 57                	push   %r15
  415c62:	41 56                	push   %r14
  415c64:	49 bb a0 53 21 00 00 	movabs $0x2153a0,%r11
  415c6b:	00 00 00 
  415c6e:	41 55                	push   %r13
  415c70:	41 54                	push   %r12
    std::stringstream output;
  415c72:	48 b8 90 e6 dd ff ff 	movabs $0xffffffffffdde690,%rax
  415c79:	ff ff ff 
  static const std::string build_what(const Mark& mark,
  415c7c:	55                   	push   %rbp
  415c7d:	53                   	push   %rbx
  415c7e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 415c60 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  415c85:	49 89 f4             	mov    %rsi,%r12
  415c88:	49 89 d6             	mov    %rdx,%r14
    std::stringstream output;
  415c8b:	be 18 00 00 00       	mov    $0x18,%esi
  static const std::string build_what(const Mark& mark,
  415c90:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  415c97:	4c 01 db             	add    %r11,%rbx
  415c9a:	48 89 fd             	mov    %rdi,%rbp
    std::stringstream output;
  415c9d:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
  415ca2:	48 01 d8             	add    %rbx,%rax
  415ca5:	49 89 df             	mov    %rbx,%r15
  415ca8:	4c 89 ef             	mov    %r13,%rdi
  415cab:	ff d0                	callq  *%rax
           << mark.column + 1 << ": " << msg;
  415cad:	41 8b 44 24 08       	mov    0x8(%r12),%eax
	__ostream_insert(__out, __s,
  415cb2:	49 8d 7d 10          	lea    0x10(%r13),%rdi
  415cb6:	ba 18 00 00 00       	mov    $0x18,%edx
  415cbb:	83 c0 01             	add    $0x1,%eax
  415cbe:	89 44 24 08          	mov    %eax,0x8(%rsp)
    output << "yaml-cpp: error at line " << mark.line + 1 << ", column "
  415cc2:	41 8b 44 24 04       	mov    0x4(%r12),%eax
  415cc7:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  415cce:	ff ff ff 
  415cd1:	8d 48 01             	lea    0x1(%rax),%ecx
  415cd4:	48 b8 82 83 df ff ff 	movabs $0xffffffffffdf8382,%rax
  415cdb:	ff ff ff 
  415cde:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415ce2:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  415ce6:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
  415cea:	ff d0                	callq  *%rax
  415cec:	48 b8 00 ea dd ff ff 	movabs $0xffffffffffddea00,%rax
  415cf3:	ff ff ff 
  415cf6:	49 8d 7d 10          	lea    0x10(%r13),%rdi
  415cfa:	8b 74 24 10          	mov    0x10(%rsp),%esi
  415cfe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  415d03:	48 01 d8             	add    %rbx,%rax
  415d06:	ff d0                	callq  *%rax
  415d08:	48 89 c1             	mov    %rax,%rcx
  415d0b:	48 b8 9b 83 df ff ff 	movabs $0xffffffffffdf839b,%rax
  415d12:	ff ff ff 
  415d15:	ba 09 00 00 00       	mov    $0x9,%edx
  415d1a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415d1e:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  415d23:	48 89 cf             	mov    %rcx,%rdi
  415d26:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  415d2a:	ff d0                	callq  *%rax
           << mark.column + 1 << ": " << msg;
  415d2c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  415d31:	8b 74 24 08          	mov    0x8(%rsp),%esi
  415d35:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415d3a:	48 01 d8             	add    %rbx,%rax
  415d3d:	ff d0                	callq  *%rax
  415d3f:	48 89 c1             	mov    %rax,%rcx
  415d42:	48 b8 8a 81 df ff ff 	movabs $0xffffffffffdf818a,%rax
  415d49:	ff ff ff 
  415d4c:	ba 02 00 00 00       	mov    $0x2,%edx
  415d51:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415d55:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  415d5a:	48 89 cf             	mov    %rcx,%rdi
  415d5d:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  415d61:	ff d0                	callq  *%rax
    operator<<(basic_ostream<_CharT, _Traits>& __os,
	       const basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 586. string inserter not a formatted function
      return __ostream_insert(__os, __str.data(), __str.size());
  415d63:	49 8b 56 08          	mov    0x8(%r14),%rdx
  415d67:	49 8b 36             	mov    (%r14),%rsi
  415d6a:	49 01 dc             	add    %rbx,%r12
  415d6d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  415d72:	41 ff d4             	callq  *%r12
  415d75:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  415d7c:	00 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  415d7d:	4c 8d 75 10          	lea    0x10(%rbp),%r14
      { _M_string_length = __length; }
  415d81:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
  415d88:	00 
      { __c1 = __c2; }
  415d89:	c6 45 10 00          	movb   $0x0,0x10(%rbp)
	: allocator_type(__a), _M_p(__dat) { }
  415d8d:	4c 89 75 00          	mov    %r14,0x0(%rbp)
      */
      __string_type
      str() const
      {
	__string_type __ret;
	if (this->pptr())
  415d91:	48 85 c0             	test   %rax,%rax
  415d94:	0f 84 f6 00 00 00    	je     415e90 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>
  415d9a:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
  415da1:	00 
	  {
	    // The current egptr() may not be the actual string end.
	    if (this->pptr() > this->egptr())
  415da2:	48 39 d0             	cmp    %rdx,%rax
  415da5:	0f 87 8d 00 00 00    	ja     415e38 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d8>
  415dab:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
          _M_construct(__beg, __end, _Tag());
  415db0:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  415db7:	00 
	: allocator_type(__a), _M_p(__dat) { }
  415db8:	49 8d 44 24 10       	lea    0x10(%r12),%rax
          _M_construct(__beg, __end, _Tag());
  415dbd:	4c 89 e7             	mov    %r12,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  415dc0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
          _M_construct(__beg, __end, _Tag());
  415dc5:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  415dcc:	ff ff ff 
  415dcf:	48 01 d8             	add    %rbx,%rax
  415dd2:	ff d0                	callq  *%rax
	      __ret = __string_type(this->pbase(), this->pptr());
	    else
 	      __ret = __string_type(this->pbase(), this->egptr());
  415dd4:	48 b8 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rax
  415ddb:	ff ff ff 
  415dde:	4c 89 e6             	mov    %r12,%rsi
  415de1:	48 89 ef             	mov    %rbp,%rdi
  415de4:	48 01 d8             	add    %rbx,%rax
  415de7:	49 89 df             	mov    %rbx,%r15
	if (!_M_is_local())
  415dea:	49 83 c4 10          	add    $0x10,%r12
  415dee:	ff d0                	callq  *%rax
  415df0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  415df5:	4c 39 e7             	cmp    %r12,%rdi
  415df8:	74 0f                	je     415e09 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a9>
  415dfa:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  415e01:	ff ff ff 
  415e04:	48 01 d8             	add    %rbx,%rax
  415e07:	ff d0                	callq  *%rax
    std::stringstream output;
  415e09:	48 b8 80 e6 dd ff ff 	movabs $0xffffffffffdde680,%rax
  415e10:	ff ff ff 
  415e13:	49 89 df             	mov    %rbx,%r15
  415e16:	4c 89 ef             	mov    %r13,%rdi
  415e19:	48 01 d8             	add    %rbx,%rax
  415e1c:	ff d0                	callq  *%rax
  }
  415e1e:	48 81 c4 f8 01 00 00 	add    $0x1f8,%rsp
  415e25:	48 89 e8             	mov    %rbp,%rax
  415e28:	5b                   	pop    %rbx
  415e29:	5d                   	pop    %rbp
  415e2a:	41 5c                	pop    %r12
  415e2c:	41 5d                	pop    %r13
  415e2e:	41 5e                	pop    %r14
  415e30:	41 5f                	pop    %r15
  415e32:	c3                   	retq   
  415e33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	: allocator_type(__a), _M_p(__dat) { }
  415e38:	4c 8d 64 24 40       	lea    0x40(%rsp),%r12
          _M_construct(__beg, __end, _Tag());
  415e3d:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  415e44:	00 
	: allocator_type(__a), _M_p(__dat) { }
  415e45:	49 8d 54 24 10       	lea    0x10(%r12),%rdx
          _M_construct(__beg, __end, _Tag());
  415e4a:	4c 89 e7             	mov    %r12,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  415e4d:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
          _M_construct(__beg, __end, _Tag());
  415e52:	48 89 c2             	mov    %rax,%rdx
  415e55:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  415e5c:	ff ff ff 
  415e5f:	48 01 d8             	add    %rbx,%rax
  415e62:	ff d0                	callq  *%rax
	      __ret = __string_type(this->pbase(), this->pptr());
  415e64:	48 b8 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rax
  415e6b:	ff ff ff 
  415e6e:	4c 89 e6             	mov    %r12,%rsi
  415e71:	48 89 ef             	mov    %rbp,%rdi
  415e74:	48 01 d8             	add    %rbx,%rax
	if (!_M_is_local())
  415e77:	49 83 c4 10          	add    $0x10,%r12
  415e7b:	ff d0                	callq  *%rax
  415e7d:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  415e82:	4c 39 e7             	cmp    %r12,%rdi
  415e85:	0f 85 6f ff ff ff    	jne    415dfa <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19a>
  415e8b:	e9 79 ff ff ff       	jmpq   415e09 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a9>
	this->_M_assign(__str);
  415e90:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  415e97:	ff ff ff 
  415e9a:	49 8d 75 60          	lea    0x60(%r13),%rsi
  415e9e:	48 89 ef             	mov    %rbp,%rdi
  415ea1:	49 89 df             	mov    %rbx,%r15
  415ea4:	48 01 d8             	add    %rbx,%rax
  415ea7:	ff d0                	callq  *%rax
  415ea9:	e9 5b ff ff ff       	jmpq   415e09 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a9>
  415eae:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  415eb2:	49 89 c4             	mov    %rax,%r12
	if (!_M_is_local())
  415eb5:	49 39 fe             	cmp    %rdi,%r14
  415eb8:	74 12                	je     415ecc <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26c>
  415eba:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  415ec1:	ff ff ff 
  415ec4:	49 89 df             	mov    %rbx,%r15
  415ec7:	48 01 d8             	add    %rbx,%rax
  415eca:	ff d0                	callq  *%rax
    std::stringstream output;
  415ecc:	48 b8 80 e6 dd ff ff 	movabs $0xffffffffffdde680,%rax
  415ed3:	ff ff ff 
  415ed6:	4c 89 ef             	mov    %r13,%rdi
  415ed9:	49 89 df             	mov    %rbx,%r15
  415edc:	48 01 d8             	add    %rbx,%rax
  415edf:	ff d0                	callq  *%rax
  415ee1:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415ee8:	ff ff ff 
  415eeb:	4c 89 e7             	mov    %r12,%rdi
  415eee:	48 01 d8             	add    %rbx,%rax
  415ef1:	ff d0                	callq  *%rax
  415ef3:	49 89 c4             	mov    %rax,%r12
  415ef6:	eb d4                	jmp    415ecc <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26c>
  415ef8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  415eff:	00 

0000000000415f00 <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  Exception(const Mark& mark_, const std::string& msg_)
  415f00:	41 57                	push   %r15
  415f02:	41 56                	push   %r14
  415f04:	49 bb 00 51 21 00 00 	movabs $0x215100,%r11
  415f0b:	00 00 00 
  415f0e:	41 55                	push   %r13
  415f10:	41 54                	push   %r12
      : std::runtime_error(build_what(mark_, msg_)), mark(mark_), msg(msg_) {}
  415f12:	48 b8 60 ac de ff ff 	movabs $0xffffffffffdeac60,%rax
  415f19:	ff ff ff 
  Exception(const Mark& mark_, const std::string& msg_)
  415f1c:	55                   	push   %rbp
  415f1d:	53                   	push   %rbx
  415f1e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 415f00 <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  415f25:	48 89 fd             	mov    %rdi,%rbp
  415f28:	49 89 f6             	mov    %rsi,%r14
  415f2b:	49 89 d5             	mov    %rdx,%r13
  415f2e:	48 83 ec 28          	sub    $0x28,%rsp
  415f32:	4c 01 db             	add    %r11,%rbx
      : std::runtime_error(build_what(mark_, msg_)), mark(mark_), msg(msg_) {}
  415f35:	48 89 e7             	mov    %rsp,%rdi
  415f38:	48 01 d8             	add    %rbx,%rax
  415f3b:	49 89 e4             	mov    %rsp,%r12
  415f3e:	ff d0                	callq  *%rax
  415f40:	48 b8 40 e8 dd ff ff 	movabs $0xffffffffffdde840,%rax
  415f47:	ff ff ff 
  415f4a:	48 89 e6             	mov    %rsp,%rsi
  415f4d:	48 89 ef             	mov    %rbp,%rdi
  415f50:	49 89 df             	mov    %rbx,%r15
  415f53:	48 01 d8             	add    %rbx,%rax
  415f56:	ff d0                	callq  *%rax
  415f58:	48 8b 3c 24          	mov    (%rsp),%rdi
  415f5c:	49 83 c4 10          	add    $0x10,%r12
  415f60:	4c 39 e7             	cmp    %r12,%rdi
  415f63:	74 0f                	je     415f74 <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x74>
  415f65:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  415f6c:	ff ff ff 
  415f6f:	48 01 d8             	add    %rbx,%rax
  415f72:	ff d0                	callq  *%rax
  415f74:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  415f7b:	ff ff ff 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  415f7e:	48 8d 7d 20          	lea    0x20(%rbp),%rdi
  415f82:	48 01 d8             	add    %rbx,%rax
  415f85:	48 89 45 00          	mov    %rax,0x0(%rbp)
  415f89:	49 8b 06             	mov    (%r14),%rax
  415f8c:	48 89 45 10          	mov    %rax,0x10(%rbp)
  415f90:	41 8b 46 08          	mov    0x8(%r14),%eax
  415f94:	89 45 18             	mov    %eax,0x18(%rbp)
  415f97:	48 8d 45 30          	lea    0x30(%rbp),%rax
  415f9b:	48 89 45 20          	mov    %rax,0x20(%rbp)
  415f9f:	49 8b 75 00          	mov    0x0(%r13),%rsi
          _M_construct(__beg, __end, _Tag());
  415fa3:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  415faa:	ff ff ff 
  415fad:	48 01 d8             	add    %rbx,%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  415fb0:	48 89 f2             	mov    %rsi,%rdx
  415fb3:	49 03 55 08          	add    0x8(%r13),%rdx
          _M_construct(__beg, __end, _Tag());
  415fb7:	ff d0                	callq  *%rax
  415fb9:	48 83 c4 28          	add    $0x28,%rsp
  415fbd:	5b                   	pop    %rbx
  415fbe:	5d                   	pop    %rbp
  415fbf:	41 5c                	pop    %r12
  415fc1:	41 5d                	pop    %r13
  415fc3:	41 5e                	pop    %r14
  415fc5:	41 5f                	pop    %r15
  415fc7:	c3                   	retq   
  415fc8:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  415fcc:	49 83 c4 10          	add    $0x10,%r12
  415fd0:	48 89 c5             	mov    %rax,%rbp
  415fd3:	4c 39 e7             	cmp    %r12,%rdi
  415fd6:	74 12                	je     415fea <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea>
  415fd8:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  415fdf:	ff ff ff 
  415fe2:	49 89 df             	mov    %rbx,%r15
  415fe5:	48 01 da             	add    %rbx,%rdx
  415fe8:	ff d2                	callq  *%rdx
  415fea:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415ff1:	ff ff ff 
  415ff4:	48 89 ef             	mov    %rbp,%rdi
  415ff7:	49 89 df             	mov    %rbx,%r15
  415ffa:	48 01 d8             	add    %rbx,%rax
  415ffd:	ff d0                	callq  *%rax
  415fff:	48 ba 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rdx
  416006:	ff ff ff 
  416009:	49 89 c4             	mov    %rax,%r12
  41600c:	48 89 ef             	mov    %rbp,%rdi
  41600f:	49 89 df             	mov    %rbx,%r15
  416012:	48 01 da             	add    %rbx,%rdx
  416015:	ff d2                	callq  *%rdx
  416017:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41601e:	ff ff ff 
  416021:	4c 89 e7             	mov    %r12,%rdi
  416024:	48 01 d8             	add    %rbx,%rax
  416027:	ff d0                	callq  *%rax
  416029:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000416030 <_ZN4YAML11InvalidNodeC1Ev>:
  InvalidNode()
  416030:	41 57                	push   %r15
  416032:	41 54                	push   %r12
  416034:	49 bb d0 4f 21 00 00 	movabs $0x214fd0,%r11
  41603b:	00 00 00 
  41603e:	55                   	push   %rbp
  41603f:	53                   	push   %rbx
  416040:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 416030 <_ZN4YAML11InvalidNodeC1Ev>
  416047:	49 89 fc             	mov    %rdi,%r12
  41604a:	48 83 ec 38          	sub    $0x38,%rsp
  41604e:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  416051:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  416056:	48 8d 45 10          	lea    0x10(%rbp),%rax
          _M_construct(__beg, __end, _Tag());
  41605a:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41605d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  416062:	48 b8 05 84 df ff ff 	movabs $0xffffffffffdf8405,%rax
  416069:	ff ff ff 
  41606c:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  416070:	48 b8 a8 83 df ff ff 	movabs $0xffffffffffdf83a8,%rax
  416077:	ff ff ff 
  41607a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41607e:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  416085:	ff ff ff 
  416088:	48 01 d8             	add    %rbx,%rax
  41608b:	ff d0                	callq  *%rax
      : Exception(mark_, msg_) {}
  41608d:	48 b8 00 af de ff ff 	movabs $0xffffffffffdeaf00,%rax
  416094:	ff ff ff 
      : RepresentationException(Mark::null_mark(), ErrorMsg::INVALID_NODE) {}
  416097:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
  41609e:	ff 
  41609f:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
  4160a6:	ff 
  4160a7:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  4160ae:	ff 
      : Exception(mark_, msg_) {}
  4160af:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  4160b4:	48 89 ea             	mov    %rbp,%rdx
  4160b7:	4c 89 e7             	mov    %r12,%rdi
  4160ba:	48 01 d8             	add    %rbx,%rax
  4160bd:	ff d0                	callq  *%rax
  4160bf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4160c4:	48 b8 58 fa ff ff ff 	movabs $0xfffffffffffffa58,%rax
  4160cb:	ff ff ff 
	if (!_M_is_local())
  4160ce:	48 83 c5 10          	add    $0x10,%rbp
  4160d2:	48 01 d8             	add    %rbx,%rax
  4160d5:	49 89 04 24          	mov    %rax,(%r12)
  4160d9:	48 39 ef             	cmp    %rbp,%rdi
  4160dc:	74 12                	je     4160f0 <_ZN4YAML11InvalidNodeC1Ev+0xc0>
  4160de:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4160e5:	ff ff ff 
  4160e8:	49 89 df             	mov    %rbx,%r15
  4160eb:	48 01 d8             	add    %rbx,%rax
  4160ee:	ff d0                	callq  *%rax
      : RepresentationException(Mark::null_mark(), ErrorMsg::INVALID_NODE) {}
  4160f0:	48 b8 80 fa ff ff ff 	movabs $0xfffffffffffffa80,%rax
  4160f7:	ff ff ff 
  4160fa:	48 01 d8             	add    %rbx,%rax
  4160fd:	49 89 04 24          	mov    %rax,(%r12)
  416101:	48 83 c4 38          	add    $0x38,%rsp
  416105:	5b                   	pop    %rbx
  416106:	5d                   	pop    %rbp
  416107:	41 5c                	pop    %r12
  416109:	41 5f                	pop    %r15
  41610b:	c3                   	retq   
  41610c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  416111:	48 83 c5 10          	add    $0x10,%rbp
  416115:	49 89 c4             	mov    %rax,%r12
  416118:	48 39 ef             	cmp    %rbp,%rdi
  41611b:	74 12                	je     41612f <_ZN4YAML11InvalidNodeC1Ev+0xff>
  41611d:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  416124:	ff ff ff 
  416127:	49 89 df             	mov    %rbx,%r15
  41612a:	48 01 da             	add    %rbx,%rdx
  41612d:	ff d2                	callq  *%rdx
  41612f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416136:	ff ff ff 
  416139:	4c 89 e7             	mov    %r12,%rdi
  41613c:	49 89 df             	mov    %rbx,%r15
  41613f:	48 01 d8             	add    %rbx,%rax
  416142:	ff d0                	callq  *%rax
  416144:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41614b:	00 00 00 
  41614e:	66 90                	xchg   %ax,%ax

0000000000416150 <_ZN4YAML13BadConversionC1Ev>:
  BadConversion()
  416150:	41 57                	push   %r15
  416152:	41 54                	push   %r12
  416154:	49 bb b0 4e 21 00 00 	movabs $0x214eb0,%r11
  41615b:	00 00 00 
  41615e:	55                   	push   %rbp
  41615f:	53                   	push   %rbx
  416160:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 416150 <_ZN4YAML13BadConversionC1Ev>
  416167:	49 89 fc             	mov    %rdi,%r12
  41616a:	48 83 ec 38          	sub    $0x38,%rsp
  41616e:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  416171:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  416176:	48 8d 45 10          	lea    0x10(%rbp),%rax
          _M_construct(__beg, __end, _Tag());
  41617a:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41617d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  416182:	48 b8 14 84 df ff ff 	movabs $0xffffffffffdf8414,%rax
  416189:	ff ff ff 
  41618c:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  416190:	48 b8 06 84 df ff ff 	movabs $0xffffffffffdf8406,%rax
  416197:	ff ff ff 
  41619a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41619e:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  4161a5:	ff ff ff 
  4161a8:	48 01 d8             	add    %rbx,%rax
  4161ab:	ff d0                	callq  *%rax
      : Exception(mark_, msg_) {}
  4161ad:	48 b8 00 af de ff ff 	movabs $0xffffffffffdeaf00,%rax
  4161b4:	ff ff ff 
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_CONVERSION) {}
  4161b7:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
  4161be:	ff 
  4161bf:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
  4161c6:	ff 
  4161c7:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  4161ce:	ff 
      : Exception(mark_, msg_) {}
  4161cf:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  4161d4:	48 89 ea             	mov    %rbp,%rdx
  4161d7:	4c 89 e7             	mov    %r12,%rdi
  4161da:	48 01 d8             	add    %rbx,%rax
  4161dd:	ff d0                	callq  *%rax
  4161df:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4161e4:	48 b8 58 fa ff ff ff 	movabs $0xfffffffffffffa58,%rax
  4161eb:	ff ff ff 
	if (!_M_is_local())
  4161ee:	48 83 c5 10          	add    $0x10,%rbp
  4161f2:	48 01 d8             	add    %rbx,%rax
  4161f5:	49 89 04 24          	mov    %rax,(%r12)
  4161f9:	48 39 ef             	cmp    %rbp,%rdi
  4161fc:	74 12                	je     416210 <_ZN4YAML13BadConversionC1Ev+0xc0>
  4161fe:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416205:	ff ff ff 
  416208:	49 89 df             	mov    %rbx,%r15
  41620b:	48 01 d8             	add    %rbx,%rax
  41620e:	ff d0                	callq  *%rax
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_CONVERSION) {}
  416210:	48 b8 a8 fa ff ff ff 	movabs $0xfffffffffffffaa8,%rax
  416217:	ff ff ff 
  41621a:	48 01 d8             	add    %rbx,%rax
  41621d:	49 89 04 24          	mov    %rax,(%r12)
  416221:	48 83 c4 38          	add    $0x38,%rsp
  416225:	5b                   	pop    %rbx
  416226:	5d                   	pop    %rbp
  416227:	41 5c                	pop    %r12
  416229:	41 5f                	pop    %r15
  41622b:	c3                   	retq   
  41622c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  416231:	48 83 c5 10          	add    $0x10,%rbp
  416235:	49 89 c4             	mov    %rax,%r12
  416238:	48 39 ef             	cmp    %rbp,%rdi
  41623b:	74 12                	je     41624f <_ZN4YAML13BadConversionC1Ev+0xff>
  41623d:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  416244:	ff ff ff 
  416247:	49 89 df             	mov    %rbx,%r15
  41624a:	48 01 da             	add    %rbx,%rdx
  41624d:	ff d2                	callq  *%rdx
  41624f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416256:	ff ff ff 
  416259:	4c 89 e7             	mov    %r12,%rdi
  41625c:	49 89 df             	mov    %rbx,%r15
  41625f:	48 01 d8             	add    %rbx,%rax
  416262:	ff d0                	callq  *%rax
  416264:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41626b:	00 00 00 
  41626e:	66 90                	xchg   %ax,%ax

0000000000416270 <_ZN4YAML12BadSubscriptC1Ev>:
 public:
  BadSubscript()
  416270:	41 57                	push   %r15
  416272:	41 54                	push   %r12
  416274:	49 bb 90 4d 21 00 00 	movabs $0x214d90,%r11
  41627b:	00 00 00 
  41627e:	55                   	push   %rbp
  41627f:	53                   	push   %rbx
  416280:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 416270 <_ZN4YAML12BadSubscriptC1Ev>
  416287:	49 89 fc             	mov    %rdi,%r12
  41628a:	48 83 ec 38          	sub    $0x38,%rsp
  41628e:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  416291:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  416296:	48 8d 45 10          	lea    0x10(%rbp),%rax
          _M_construct(__beg, __end, _Tag());
  41629a:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41629d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  4162a2:	48 b8 30 84 df ff ff 	movabs $0xffffffffffdf8430,%rax
  4162a9:	ff ff ff 
  4162ac:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4162b0:	48 b8 15 84 df ff ff 	movabs $0xffffffffffdf8415,%rax
  4162b7:	ff ff ff 
  4162ba:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  4162be:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  4162c5:	ff ff ff 
  4162c8:	48 01 d8             	add    %rbx,%rax
  4162cb:	ff d0                	callq  *%rax
      : Exception(mark_, msg_) {}
  4162cd:	48 b8 00 af de ff ff 	movabs $0xffffffffffdeaf00,%rax
  4162d4:	ff ff ff 
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_SUBSCRIPT) {}
  4162d7:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
  4162de:	ff 
  4162df:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
  4162e6:	ff 
  4162e7:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  4162ee:	ff 
      : Exception(mark_, msg_) {}
  4162ef:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  4162f4:	48 89 ea             	mov    %rbp,%rdx
  4162f7:	4c 89 e7             	mov    %r12,%rdi
  4162fa:	48 01 d8             	add    %rbx,%rax
  4162fd:	ff d0                	callq  *%rax
  4162ff:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  416304:	48 b8 58 fa ff ff ff 	movabs $0xfffffffffffffa58,%rax
  41630b:	ff ff ff 
	if (!_M_is_local())
  41630e:	48 83 c5 10          	add    $0x10,%rbp
  416312:	48 01 d8             	add    %rbx,%rax
  416315:	49 89 04 24          	mov    %rax,(%r12)
  416319:	48 39 ef             	cmp    %rbp,%rdi
  41631c:	74 12                	je     416330 <_ZN4YAML12BadSubscriptC1Ev+0xc0>
  41631e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416325:	ff ff ff 
  416328:	49 89 df             	mov    %rbx,%r15
  41632b:	48 01 d8             	add    %rbx,%rax
  41632e:	ff d0                	callq  *%rax
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_SUBSCRIPT) {}
  416330:	48 b8 d0 fa ff ff ff 	movabs $0xfffffffffffffad0,%rax
  416337:	ff ff ff 
  41633a:	48 01 d8             	add    %rbx,%rax
  41633d:	49 89 04 24          	mov    %rax,(%r12)
  416341:	48 83 c4 38          	add    $0x38,%rsp
  416345:	5b                   	pop    %rbx
  416346:	5d                   	pop    %rbp
  416347:	41 5c                	pop    %r12
  416349:	41 5f                	pop    %r15
  41634b:	c3                   	retq   
  41634c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  416351:	48 83 c5 10          	add    $0x10,%rbp
  416355:	49 89 c4             	mov    %rax,%r12
  416358:	48 39 ef             	cmp    %rbp,%rdi
  41635b:	74 12                	je     41636f <_ZN4YAML12BadSubscriptC1Ev+0xff>
  41635d:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  416364:	ff ff ff 
  416367:	49 89 df             	mov    %rbx,%r15
  41636a:	48 01 da             	add    %rbx,%rdx
  41636d:	ff d2                	callq  *%rdx
  41636f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416376:	ff ff ff 
  416379:	4c 89 e7             	mov    %r12,%rdi
  41637c:	49 89 df             	mov    %rbx,%r15
  41637f:	48 01 d8             	add    %rbx,%rax
  416382:	ff d0                	callq  *%rax
  416384:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41638b:	00 00 00 
  41638e:	66 90                	xchg   %ax,%ax

0000000000416390 <_ZN4YAML4Node5beginEv>:
inline iterator Node::begin() {
  416390:	41 57                	push   %r15
  416392:	41 55                	push   %r13
  416394:	49 bb 70 4c 21 00 00 	movabs $0x214c70,%r11
  41639b:	00 00 00 
  41639e:	41 54                	push   %r12
  4163a0:	55                   	push   %rbp
  4163a1:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 416390 <_ZN4YAML4Node5beginEv>
  4163a8:	53                   	push   %rbx
  4163a9:	48 89 fb             	mov    %rdi,%rbx
  4163ac:	4c 01 dd             	add    %r11,%rbp
  4163af:	48 83 ec 20          	sub    $0x20,%rsp
  if (!m_isValid)
  4163b3:	80 3e 00             	cmpb   $0x0,(%rsi)
  4163b6:	0f 84 ac 00 00 00    	je     416468 <_ZN4YAML4Node5beginEv+0xd8>
  return m_pNode ? iterator(m_pNode->begin(), m_pMemory) : iterator();
  4163bc:	48 8b 46 18          	mov    0x18(%rsi),%rax
  4163c0:	48 85 c0             	test   %rax,%rax
  4163c3:	0f 84 9f 00 00 00    	je     416468 <_ZN4YAML4Node5beginEv+0xd8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  4163c9:	4c 8b 66 10          	mov    0x10(%rsi),%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  4163cd:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
        if( pi_ != 0 ) pi_->add_ref_copy();
  4163d1:	4d 85 e4             	test   %r12,%r12
  4163d4:	74 0b                	je     4163e1 <_ZN4YAML4Node5beginEv+0x51>
  4163d6:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
  4163dd:	48 8b 46 18          	mov    0x18(%rsi),%rax
  4163e1:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  4163e4:	48 85 c0             	test   %rax,%rax
  4163e7:	0f 84 c8 00 00 00    	je     4164b5 <_ZN4YAML4Node5beginEv+0x125>
  4163ed:	48 8b 30             	mov    (%rax),%rsi
  4163f0:	48 85 f6             	test   %rsi,%rsi
  4163f3:	0f 84 ad 00 00 00    	je     4164a6 <_ZN4YAML4Node5beginEv+0x116>
  std::size_t size() const { return m_pData->size(); }

  const_node_iterator begin() const {
    return static_cast<const node_data&>(*m_pData).begin();
  }
  node_iterator begin() { return m_pData->begin(); }
  4163f9:	48 b8 f0 e7 dd ff ff 	movabs $0xffffffffffdde7f0,%rax
  416400:	ff ff ff 
  416403:	48 89 e7             	mov    %rsp,%rdi
  416406:	49 89 ef             	mov    %rbp,%r15
  416409:	48 01 e8             	add    %rbp,%rax
  41640c:	ff d0                	callq  *%rax
      >::type super_t;
   public:
      iterator_adaptor() {}

      explicit iterator_adaptor(Base const &iter)
          : m_iterator(iter)
  41640e:	8b 04 24             	mov    (%rsp),%eax
  416411:	4d 85 e4             	test   %r12,%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  416414:	4c 89 6b 20          	mov    %r13,0x20(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416418:	4c 89 63 28          	mov    %r12,0x28(%rbx)
  41641c:	89 03                	mov    %eax,(%rbx)
  41641e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  416423:	48 89 43 08          	mov    %rax,0x8(%rbx)
  416427:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41642c:	48 89 43 10          	mov    %rax,0x10(%rbx)
  416430:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  416435:	48 89 43 18          	mov    %rax,0x18(%rbx)
        if( pi_ != 0 ) pi_->add_ref_copy();
  416439:	74 19                	je     416454 <_ZN4YAML4Node5beginEv+0xc4>
  41643b:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  416442:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  416449:	ff ff ff 
  41644c:	4c 89 e7             	mov    %r12,%rdi
  41644f:	48 01 e8             	add    %rbp,%rax
  416452:	ff d0                	callq  *%rax
}
  416454:	48 83 c4 20          	add    $0x20,%rsp
  416458:	48 89 d8             	mov    %rbx,%rax
  41645b:	5b                   	pop    %rbx
  41645c:	5d                   	pop    %rbp
  41645d:	41 5c                	pop    %r12
  41645f:	41 5d                	pop    %r13
  416461:	41 5f                	pop    %r15
  416463:	c3                   	retq   
  416464:	0f 1f 40 00          	nopl   0x0(%rax)
      : m_type(iterator_type::None), m_seqIt(), m_mapIt(), m_mapEnd() {}
  416468:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
      : _M_current(_Iterator()) { }
  41646e:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  416475:	00 
  416476:	48 89 d8             	mov    %rbx,%rax
      : _M_node() { }
  416479:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  416480:	00 
  416481:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  416488:	00 
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  416489:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  416490:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  416491:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  416498:	00 
  416499:	48 83 c4 20          	add    $0x20,%rsp
  41649d:	5b                   	pop    %rbx
  41649e:	5d                   	pop    %rbp
  41649f:	41 5c                	pop    %r12
  4164a1:	41 5d                	pop    %r13
  4164a3:	41 5f                	pop    %r15
  4164a5:	c3                   	retq   
  4164a6:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  4164ad:	ff ff ff 
  4164b0:	48 01 e8             	add    %rbp,%rax
  4164b3:	ff d0                	callq  *%rax
  4164b5:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  4164bc:	ff ff ff 
  4164bf:	48 01 e8             	add    %rbp,%rax
  4164c2:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  4164c4:	4d 85 e4             	test   %r12,%r12
  4164c7:	48 89 c3             	mov    %rax,%rbx
  4164ca:	74 12                	je     4164de <_ZN4YAML4Node5beginEv+0x14e>
  4164cc:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  4164d3:	ff ff ff 
  4164d6:	4c 89 e7             	mov    %r12,%rdi
  4164d9:	48 01 e8             	add    %rbp,%rax
  4164dc:	ff d0                	callq  *%rax
  4164de:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  4164e5:	ff ff ff 
  4164e8:	48 89 df             	mov    %rbx,%rdi
  4164eb:	49 89 ef             	mov    %rbp,%r15
  4164ee:	48 01 e8             	add    %rbp,%rax
  4164f1:	ff d0                	callq  *%rax
  4164f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4164fa:	00 00 00 
  4164fd:	0f 1f 00             	nopl   (%rax)

0000000000416500 <_ZN4YAML4Node3endEv>:
inline iterator Node::end() {
  416500:	41 57                	push   %r15
  416502:	41 55                	push   %r13
  416504:	49 bb 00 4b 21 00 00 	movabs $0x214b00,%r11
  41650b:	00 00 00 
  41650e:	41 54                	push   %r12
  416510:	55                   	push   %rbp
  416511:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 416500 <_ZN4YAML4Node3endEv>
  416518:	53                   	push   %rbx
  416519:	48 89 fb             	mov    %rdi,%rbx
  41651c:	4c 01 dd             	add    %r11,%rbp
  41651f:	48 83 ec 20          	sub    $0x20,%rsp
  if (!m_isValid)
  416523:	80 3e 00             	cmpb   $0x0,(%rsi)
  416526:	0f 84 ac 00 00 00    	je     4165d8 <_ZN4YAML4Node3endEv+0xd8>
  return m_pNode ? iterator(m_pNode->end(), m_pMemory) : iterator();
  41652c:	48 8b 46 18          	mov    0x18(%rsi),%rax
  416530:	48 85 c0             	test   %rax,%rax
  416533:	0f 84 9f 00 00 00    	je     4165d8 <_ZN4YAML4Node3endEv+0xd8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416539:	4c 8b 66 10          	mov    0x10(%rsi),%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41653d:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
        if( pi_ != 0 ) pi_->add_ref_copy();
  416541:	4d 85 e4             	test   %r12,%r12
  416544:	74 0b                	je     416551 <_ZN4YAML4Node3endEv+0x51>
  416546:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
  41654d:	48 8b 46 18          	mov    0x18(%rsi),%rax
  416551:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  416554:	48 85 c0             	test   %rax,%rax
  416557:	0f 84 c8 00 00 00    	je     416625 <_ZN4YAML4Node3endEv+0x125>
  41655d:	48 8b 30             	mov    (%rax),%rsi
  416560:	48 85 f6             	test   %rsi,%rsi
  416563:	0f 84 ad 00 00 00    	je     416616 <_ZN4YAML4Node3endEv+0x116>

  const_node_iterator end() const {
    return static_cast<const node_data&>(*m_pData).end();
  }
  node_iterator end() { return m_pData->end(); }
  416569:	48 b8 c0 e3 dd ff ff 	movabs $0xffffffffffdde3c0,%rax
  416570:	ff ff ff 
  416573:	48 89 e7             	mov    %rsp,%rdi
  416576:	49 89 ef             	mov    %rbp,%r15
  416579:	48 01 e8             	add    %rbp,%rax
  41657c:	ff d0                	callq  *%rax
  41657e:	8b 04 24             	mov    (%rsp),%eax
  416581:	4d 85 e4             	test   %r12,%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  416584:	4c 89 6b 20          	mov    %r13,0x20(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416588:	4c 89 63 28          	mov    %r12,0x28(%rbx)
  41658c:	89 03                	mov    %eax,(%rbx)
  41658e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  416593:	48 89 43 08          	mov    %rax,0x8(%rbx)
  416597:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41659c:	48 89 43 10          	mov    %rax,0x10(%rbx)
  4165a0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4165a5:	48 89 43 18          	mov    %rax,0x18(%rbx)
        if( pi_ != 0 ) pi_->add_ref_copy();
  4165a9:	74 19                	je     4165c4 <_ZN4YAML4Node3endEv+0xc4>
  4165ab:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  4165b2:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  4165b9:	ff ff ff 
  4165bc:	4c 89 e7             	mov    %r12,%rdi
  4165bf:	48 01 e8             	add    %rbp,%rax
  4165c2:	ff d0                	callq  *%rax
}
  4165c4:	48 83 c4 20          	add    $0x20,%rsp
  4165c8:	48 89 d8             	mov    %rbx,%rax
  4165cb:	5b                   	pop    %rbx
  4165cc:	5d                   	pop    %rbp
  4165cd:	41 5c                	pop    %r12
  4165cf:	41 5d                	pop    %r13
  4165d1:	41 5f                	pop    %r15
  4165d3:	c3                   	retq   
  4165d4:	0f 1f 40 00          	nopl   0x0(%rax)
  4165d8:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  4165de:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  4165e5:	00 
  4165e6:	48 89 d8             	mov    %rbx,%rax
  4165e9:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  4165f0:	00 
  4165f1:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  4165f8:	00 
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  4165f9:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  416600:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  416601:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  416608:	00 
  416609:	48 83 c4 20          	add    $0x20,%rsp
  41660d:	5b                   	pop    %rbx
  41660e:	5d                   	pop    %rbp
  41660f:	41 5c                	pop    %r12
  416611:	41 5d                	pop    %r13
  416613:	41 5f                	pop    %r15
  416615:	c3                   	retq   
  416616:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  41661d:	ff ff ff 
  416620:	48 01 e8             	add    %rbp,%rax
  416623:	ff d0                	callq  *%rax
  416625:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  41662c:	ff ff ff 
  41662f:	48 01 e8             	add    %rbp,%rax
  416632:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  416634:	4d 85 e4             	test   %r12,%r12
  416637:	48 89 c3             	mov    %rax,%rbx
  41663a:	74 12                	je     41664e <_ZN4YAML4Node3endEv+0x14e>
  41663c:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  416643:	ff ff ff 
  416646:	4c 89 e7             	mov    %r12,%rdi
  416649:	48 01 e8             	add    %rbp,%rax
  41664c:	ff d0                	callq  *%rax
  41664e:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416655:	ff ff ff 
  416658:	48 89 df             	mov    %rbx,%rdi
  41665b:	49 89 ef             	mov    %rbp,%r15
  41665e:	48 01 e8             	add    %rbp,%rax
  416661:	ff d0                	callq  *%rax
  416663:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41666a:	00 00 00 
  41666d:	0f 1f 00             	nopl   (%rax)

0000000000416670 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi>:
  YAML_DEFINE_CONVERT_STREAMABLE(type, -)

#define YAML_DEFINE_CONVERT_STREAMABLE_UNSIGNED(type) \
  YAML_DEFINE_CONVERT_STREAMABLE(type, +)

YAML_DEFINE_CONVERT_STREAMABLE_SIGNED(int);
  416670:	41 57                	push   %r15
  416672:	41 54                	push   %r12
  416674:	49 bb 90 49 21 00 00 	movabs $0x214990,%r11
  41667b:	00 00 00 
  41667e:	55                   	push   %rbp
  41667f:	53                   	push   %rbx
  416680:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 416670 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi>
  416687:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  41668e:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  416691:	80 3f 00             	cmpb   $0x0,(%rdi)
  416694:	0f 84 12 01 00 00    	je     4167ac <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x13c>
  return m_pNode ? m_pNode->type() : NodeType::Null;
  41669a:	48 8b 47 18          	mov    0x18(%rdi),%rax
  41669e:	48 85 c0             	test   %rax,%rax
  4166a1:	74 3d                	je     4166e0 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x70>
  4166a3:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  4166a6:	48 85 c0             	test   %rax,%rax
  4166a9:	0f 84 66 01 00 00    	je     416815 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x1a5>
  4166af:	49 89 f4             	mov    %rsi,%r12
  4166b2:	48 8b 30             	mov    (%rax),%rsi
  4166b5:	48 85 f6             	test   %rsi,%rsi
  4166b8:	0f 84 48 01 00 00    	je     416806 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x196>
  4166be:	0f b6 06             	movzbl (%rsi),%eax
    return m_isDefined ? m_type : NodeType::Undefined;
  4166c1:	84 c0                	test   %al,%al
  4166c3:	74 08                	je     4166cd <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x5d>
  4166c5:	31 c0                	xor    %eax,%eax
  4166c7:	83 7e 04 02          	cmpl   $0x2,0x4(%rsi)
  4166cb:	74 23                	je     4166f0 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x80>
  4166cd:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  4166d4:	5b                   	pop    %rbx
  4166d5:	5d                   	pop    %rbp
  4166d6:	41 5c                	pop    %r12
  4166d8:	41 5f                	pop    %r15
  4166da:	c3                   	retq   
  4166db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4166e0:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  4166e7:	31 c0                	xor    %eax,%eax
  4166e9:	5b                   	pop    %rbx
  4166ea:	5d                   	pop    %rbp
  4166eb:	41 5c                	pop    %r12
  4166ed:	41 5f                	pop    %r15
  4166ef:	c3                   	retq   
  4166f0:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  4166f5:	48 b8 50 e9 dd ff ff 	movabs $0xffffffffffdde950,%rax
  4166fc:	ff ff ff 
  const std::string& scalar() const { return m_scalar; }
  4166ff:	48 83 c6 30          	add    $0x30,%rsi
  416703:	48 01 d8             	add    %rbx,%rax
  416706:	ba 18 00 00 00       	mov    $0x18,%edx
  41670b:	49 89 df             	mov    %rbx,%r15
  41670e:	48 89 ef             	mov    %rbp,%rdi
  416711:	ff d0                	callq  *%rax
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
	__pf(*this);
  416713:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  416718:	48 89 e9             	mov    %rbp,%rcx
      _S_ios_fmtflags_min = ~__INT_MAX__
    };

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
  41671b:	83 a4 24 a8 00 00 00 	andl   $0xfffffffd,0xa8(%rsp)
  416722:	fd 
  416723:	4c 89 e6             	mov    %r12,%rsi
  416726:	48 89 ef             	mov    %rbp,%rdi
  416729:	48 03 48 e8          	add    -0x18(%rax),%rcx
  41672d:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  416734:	ff ff ff 
  416737:	48 01 d8             	add    %rbx,%rax
  41673a:	81 61 18 ff ef ff ff 	andl   $0xffffefff,0x18(%rcx)
  416741:	ff d0                	callq  *%rax
  416743:	48 89 c2             	mov    %rax,%rdx
  416746:	48 8b 00             	mov    (%rax),%rax
      _S_ios_iostate_min = ~__INT_MAX__
    };

  inline _GLIBCXX_CONSTEXPR _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
  416749:	48 8b 48 e8          	mov    -0x18(%rax),%rcx
  41674d:	31 c0                	xor    %eax,%eax
  41674f:	f6 44 0a 20 05       	testb  $0x5,0x20(%rdx,%rcx,1)
  416754:	74 32                	je     416788 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x118>
  416756:	48 ba 80 e6 dd ff ff 	movabs $0xffffffffffdde680,%rdx
  41675d:	ff ff ff 
  416760:	88 44 24 0f          	mov    %al,0xf(%rsp)
  416764:	49 89 df             	mov    %rbx,%r15
  416767:	48 89 ef             	mov    %rbp,%rdi
  41676a:	48 01 da             	add    %rbx,%rdx
  41676d:	ff d2                	callq  *%rdx
  41676f:	0f b6 44 24 0f       	movzbl 0xf(%rsp),%eax
  416774:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  41677b:	5b                   	pop    %rbx
  41677c:	5d                   	pop    %rbp
  41677d:	41 5c                	pop    %r12
  41677f:	41 5f                	pop    %r15
  416781:	c3                   	retq   
  416782:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      { return __pf(*this); }
  416788:	48 b8 c0 e6 dd ff ff 	movabs $0xffffffffffdde6c0,%rax
  41678f:	ff ff ff 
  416792:	48 89 ef             	mov    %rbp,%rdi
  416795:	48 01 d8             	add    %rbx,%rax
  416798:	ff d0                	callq  *%rax
  41679a:	48 8b 10             	mov    (%rax),%rdx
  41679d:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  4167a1:	8b 44 10 20          	mov    0x20(%rax,%rdx,1),%eax
  4167a5:	d1 e8                	shr    %eax
  4167a7:	83 e0 01             	and    $0x1,%eax
  4167aa:	eb aa                	jmp    416756 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0xe6>
    throw InvalidNode();
  4167ac:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  4167b3:	ff ff ff 
  4167b6:	bf 40 00 00 00       	mov    $0x40,%edi
  4167bb:	49 89 df             	mov    %rbx,%r15
  4167be:	48 01 d8             	add    %rbx,%rax
  4167c1:	ff d0                	callq  *%rax
  4167c3:	48 89 c5             	mov    %rax,%rbp
  4167c6:	48 89 c7             	mov    %rax,%rdi
  4167c9:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  4167d0:	ff ff ff 
  4167d3:	48 01 d8             	add    %rbx,%rax
  4167d6:	ff d0                	callq  *%rax
  4167d8:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  4167df:	ff ff ff 
  4167e2:	48 89 ef             	mov    %rbp,%rdi
  4167e5:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4167e9:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  4167f0:	ff ff ff 
  4167f3:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  4167f7:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  4167fe:	ff ff ff 
  416801:	48 01 d8             	add    %rbx,%rax
  416804:	ff d0                	callq  *%rax
  416806:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  41680d:	ff ff ff 
  416810:	48 01 d8             	add    %rbx,%rax
  416813:	ff d0                	callq  *%rax
  416815:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  41681c:	ff ff ff 
  41681f:	48 01 d8             	add    %rbx,%rax
  416822:	ff d0                	callq  *%rax
  416824:	49 89 c4             	mov    %rax,%r12
  416827:	48 89 ef             	mov    %rbp,%rdi
  41682a:	49 89 df             	mov    %rbx,%r15
  41682d:	48 ba 80 e6 dd ff ff 	movabs $0xffffffffffdde680,%rdx
  416834:	ff ff ff 
  416837:	48 01 da             	add    %rbx,%rdx
  41683a:	ff d2                	callq  *%rdx
  41683c:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416843:	ff ff ff 
  416846:	4c 89 e7             	mov    %r12,%rdi
  416849:	48 01 d8             	add    %rbx,%rax
  41684c:	ff d0                	callq  *%rax
  41684e:	49 89 c4             	mov    %rax,%r12
  416851:	48 89 ef             	mov    %rbp,%rdi
  416854:	49 89 df             	mov    %rbx,%r15
  416857:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41685e:	ff ff ff 
  416861:	eb d4                	jmp    416837 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x1c7>
  416863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41686a:	00 00 00 
  41686d:	0f 1f 00             	nopl   (%rax)

0000000000416870 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z9enq_uppermS2_miEES2_miEEvmmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
  416870:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 416870 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z9enq_uppermS2_miEES2_miEEvmmmm>
  416877:	49 bb 90 47 21 00 00 	movabs $0x214790,%r11
  41687e:	00 00 00 
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1), uncastArg<V>(arg2));
  416881:	49 b8 30 44 de ff ff 	movabs $0xffffffffffde4430,%r8
  416888:	ff ff ff 
  41688b:	4c 01 d8             	add    %r11,%rax
  41688e:	4c 01 c0             	add    %r8,%rax
  416891:	ff e0                	jmpq   *%rax
  416893:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41689a:	00 00 00 
  41689d:	0f 1f 00             	nopl   (%rax)

00000000004168a0 <_ZN5swarm10bareRunnerIFvmfPK5StateimEXadL_Z10lls_searchmfS3_imEEfPS1_imEEvmmmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3) {
  4168a0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4168a0 <_ZN5swarm10bareRunnerIFvmfPK5StateimEXadL_Z10lls_searchmfS3_imEEfPS1_imEEvmmmmm>
  4168a7:	49 bb 60 47 21 00 00 	movabs $0x214760,%r11
  4168ae:	00 00 00 
  4168b1:	49 89 d1             	mov    %rdx,%r9
    return u.res;
  4168b4:	89 74 24 f4          	mov    %esi,-0xc(%rsp)
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3) {
  4168b8:	48 89 ca             	mov    %rcx,%rdx
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1), uncastArg<V>(arg2), uncastArg<X>(arg3));
  4168bb:	4c 89 c1             	mov    %r8,%rcx
  4168be:	4c 01 d8             	add    %r11,%rax
  4168c1:	49 b8 a0 44 de ff ff 	movabs $0xffffffffffde44a0,%r8
  4168c8:	ff ff ff 
  4168cb:	4c 89 ce             	mov    %r9,%rsi
    return u.res;
  4168ce:	f3 0f 10 44 24 f4    	movss  -0xc(%rsp),%xmm0
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1), uncastArg<V>(arg2), uncastArg<X>(arg3));
  4168d4:	4c 01 c0             	add    %r8,%rax
  4168d7:	ff e0                	jmpq   *%rax
  4168d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004168e0 <_ZN5swarm10bareRunnerIFvmiEXadL_Z6star_tmiEEiEEvmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0) {
  4168e0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4168e0 <_ZN5swarm10bareRunnerIFvmiEXadL_Z6star_tmiEEiEEvmm>
  4168e7:	49 bb 20 47 21 00 00 	movabs $0x214720,%r11
  4168ee:	00 00 00 
    (*f)(ts, uncastArg<T>(arg0));
  4168f1:	48 ba 80 46 de ff ff 	movabs $0xffffffffffde4680,%rdx
  4168f8:	ff ff ff 
  4168fb:	4c 01 d8             	add    %r11,%rax
  4168fe:	48 01 d0             	add    %rdx,%rax
  416901:	ff e0                	jmpq   *%rax
  416903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41690a:	00 00 00 
  41690d:	0f 1f 00             	nopl   (%rax)

0000000000416910 <_ZN5boost15program_options19options_descriptionD1Ev>:
        for options by name.
        
        See @ref a_adding_options "here" for option adding interface discussion.
        @sa option_description
    */
    class BOOST_PROGRAM_OPTIONS_DECL options_description {
  416910:	41 57                	push   %r15
  416912:	41 56                	push   %r14
  416914:	49 bb f0 46 21 00 00 	movabs $0x2146f0,%r11
  41691b:	00 00 00 
  41691e:	41 55                	push   %r13
  416920:	41 54                	push   %r12
  416922:	4c 8d 2d e7 ff ff ff 	lea    -0x19(%rip),%r13        # 416910 <_ZN5boost15program_options19options_descriptionD1Ev>
  416929:	55                   	push   %rbp
  41692a:	53                   	push   %rbx
  41692b:	49 89 fc             	mov    %rdi,%r12
  41692e:	4d 01 dd             	add    %r11,%r13
  416931:	48 83 ec 08          	sub    $0x8,%rsp
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  416935:	4c 8b 7f 70          	mov    0x70(%rdi),%r15
  416939:	48 8b 6f 68          	mov    0x68(%rdi),%rbp
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
  41693d:	49 39 ef             	cmp    %rbp,%r15
  416940:	74 63                	je     4169a5 <_ZN5boost15program_options19options_descriptionD1Ev+0x95>
  416942:	48 b8 80 81 de ff ff 	movabs $0xffffffffffde8180,%rax
  416949:	ff ff ff 
  41694c:	4d 8d 74 05 00       	lea    0x0(%r13,%rax,1),%r14
  416951:	eb 0e                	jmp    416961 <_ZN5boost15program_options19options_descriptionD1Ev+0x51>
  416953:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  416958:	48 83 c5 10          	add    $0x10,%rbp
  41695c:	49 39 ef             	cmp    %rbp,%r15
  41695f:	74 3f                	je     4169a0 <_ZN5boost15program_options19options_descriptionD1Ev+0x90>
  416961:	48 8b 5d 08          	mov    0x8(%rbp),%rbx
  416965:	48 85 db             	test   %rbx,%rbx
  416968:	74 ee                	je     416958 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
        if( atomic_decrement( &use_count_ ) == 1 )
  41696a:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  41696f:	75 e7                	jne    416958 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
            dispose();
  416971:	48 8b 03             	mov    (%rbx),%rax
  416974:	48 89 df             	mov    %rbx,%rdi
  416977:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41697a:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  41697f:	75 d7                	jne    416958 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
            destroy();
  416981:	48 8b 03             	mov    (%rbx),%rax
        delete this;
  416984:	48 89 df             	mov    %rbx,%rdi
            destroy();
  416987:	48 8b 50 18          	mov    0x18(%rax),%rdx
  41698b:	4c 39 f2             	cmp    %r14,%rdx
  41698e:	0f 85 1a 01 00 00    	jne    416aae <_ZN5boost15program_options19options_descriptionD1Ev+0x19e>
  416994:	48 83 c5 10          	add    $0x10,%rbp
        delete this;
  416998:	ff 50 08             	callq  *0x8(%rax)
  41699b:	49 39 ef             	cmp    %rbp,%r15
  41699e:	75 c1                	jne    416961 <_ZN5boost15program_options19options_descriptionD1Ev+0x51>
  4169a0:	49 8b 6c 24 68       	mov    0x68(%r12),%rbp
	if (__p)
  4169a5:	48 85 ed             	test   %rbp,%rbp
  4169a8:	74 15                	je     4169bf <_ZN5boost15program_options19options_descriptionD1Ev+0xaf>
  4169aa:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4169b1:	ff ff ff 
  4169b4:	48 89 ef             	mov    %rbp,%rdi
  4169b7:	4d 89 ef             	mov    %r13,%r15
  4169ba:	4c 01 e8             	add    %r13,%rax
  4169bd:	ff d0                	callq  *%rax
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
	if (_M_impl._M_start._M_p)
  4169bf:	49 8b 7c 24 40       	mov    0x40(%r12),%rdi
  4169c4:	48 85 ff             	test   %rdi,%rdi
  4169c7:	74 12                	je     4169db <_ZN5boost15program_options19options_descriptionD1Ev+0xcb>
  4169c9:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4169d0:	ff ff ff 
  4169d3:	4d 89 ef             	mov    %r13,%r15
  4169d6:	4c 01 e8             	add    %r13,%rax
  4169d9:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4169db:	4d 8b 7c 24 30       	mov    0x30(%r12),%r15
  4169e0:	49 8b 6c 24 28       	mov    0x28(%r12),%rbp
  4169e5:	49 39 ef             	cmp    %rbp,%r15
  4169e8:	74 63                	je     416a4d <_ZN5boost15program_options19options_descriptionD1Ev+0x13d>
  4169ea:	48 b8 80 81 de ff ff 	movabs $0xffffffffffde8180,%rax
  4169f1:	ff ff ff 
  4169f4:	4d 8d 74 05 00       	lea    0x0(%r13,%rax,1),%r14
  4169f9:	eb 0e                	jmp    416a09 <_ZN5boost15program_options19options_descriptionD1Ev+0xf9>
  4169fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  416a00:	48 83 c5 10          	add    $0x10,%rbp
  416a04:	49 39 ef             	cmp    %rbp,%r15
  416a07:	74 3f                	je     416a48 <_ZN5boost15program_options19options_descriptionD1Ev+0x138>
  416a09:	48 8b 5d 08          	mov    0x8(%rbp),%rbx
  416a0d:	48 85 db             	test   %rbx,%rbx
  416a10:	74 ee                	je     416a00 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
        if( atomic_decrement( &use_count_ ) == 1 )
  416a12:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  416a17:	75 e7                	jne    416a00 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
            dispose();
  416a19:	48 8b 03             	mov    (%rbx),%rax
  416a1c:	48 89 df             	mov    %rbx,%rdi
  416a1f:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  416a22:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  416a27:	75 d7                	jne    416a00 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
            destroy();
  416a29:	48 8b 03             	mov    (%rbx),%rax
        delete this;
  416a2c:	48 89 df             	mov    %rbx,%rdi
            destroy();
  416a2f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  416a33:	4c 39 f2             	cmp    %r14,%rdx
  416a36:	75 6f                	jne    416aa7 <_ZN5boost15program_options19options_descriptionD1Ev+0x197>
  416a38:	48 83 c5 10          	add    $0x10,%rbp
        delete this;
  416a3c:	ff 50 08             	callq  *0x8(%rax)
  416a3f:	49 39 ef             	cmp    %rbp,%r15
  416a42:	75 c5                	jne    416a09 <_ZN5boost15program_options19options_descriptionD1Ev+0xf9>
  416a44:	0f 1f 40 00          	nopl   0x0(%rax)
  416a48:	49 8b 6c 24 28       	mov    0x28(%r12),%rbp
	if (__p)
  416a4d:	48 85 ed             	test   %rbp,%rbp
  416a50:	74 15                	je     416a67 <_ZN5boost15program_options19options_descriptionD1Ev+0x157>
  416a52:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416a59:	ff ff ff 
  416a5c:	48 89 ef             	mov    %rbp,%rdi
  416a5f:	4d 89 ef             	mov    %r13,%r15
  416a62:	4c 01 e8             	add    %r13,%rax
  416a65:	ff d0                	callq  *%rax
  416a67:	49 8b 3c 24          	mov    (%r12),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  416a6b:	49 83 c4 10          	add    $0x10,%r12
	if (!_M_is_local())
  416a6f:	4c 39 e7             	cmp    %r12,%rdi
  416a72:	74 24                	je     416a98 <_ZN5boost15program_options19options_descriptionD1Ev+0x188>
  416a74:	48 83 c4 08          	add    $0x8,%rsp
  416a78:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416a7f:	ff ff ff 
  416a82:	5b                   	pop    %rbx
  416a83:	4c 01 e8             	add    %r13,%rax
  416a86:	5d                   	pop    %rbp
  416a87:	41 5c                	pop    %r12
  416a89:	41 5d                	pop    %r13
  416a8b:	41 5e                	pop    %r14
  416a8d:	41 5f                	pop    %r15
  416a8f:	ff e0                	jmpq   *%rax
  416a91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  416a98:	48 83 c4 08          	add    $0x8,%rsp
  416a9c:	5b                   	pop    %rbx
  416a9d:	5d                   	pop    %rbp
  416a9e:	41 5c                	pop    %r12
  416aa0:	41 5d                	pop    %r13
  416aa2:	41 5e                	pop    %r14
  416aa4:	41 5f                	pop    %r15
  416aa6:	c3                   	retq   
            destroy();
  416aa7:	ff d2                	callq  *%rdx
  416aa9:	e9 52 ff ff ff       	jmpq   416a00 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
  416aae:	ff d2                	callq  *%rdx
  416ab0:	e9 a3 fe ff ff       	jmpq   416958 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
  416ab5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  416abc:	00 00 00 
  416abf:	90                   	nop

0000000000416ac0 <_ZN4YAML6detail14iterator_valueD1Ev>:
#include <utility>
#include <vector>

namespace YAML {
namespace detail {
struct iterator_value : public Node, std::pair<Node, Node> {
  416ac0:	55                   	push   %rbp
  416ac1:	53                   	push   %rbx
  416ac2:	48 89 fd             	mov    %rdi,%rbp
  416ac5:	48 8d 1d f4 ff ff ff 	lea    -0xc(%rip),%rbx        # 416ac0 <_ZN4YAML6detail14iterator_valueD1Ev>
  416acc:	49 bb 40 45 21 00 00 	movabs $0x214540,%r11
  416ad3:	00 00 00 
  416ad6:	48 83 ec 08          	sub    $0x8,%rsp
  416ada:	48 8b 7f 50          	mov    0x50(%rdi),%rdi
  416ade:	4c 01 db             	add    %r11,%rbx
  416ae1:	48 85 ff             	test   %rdi,%rdi
  416ae4:	74 0f                	je     416af5 <_ZN4YAML6detail14iterator_valueD1Ev+0x35>
  416ae6:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  416aed:	ff ff ff 
  416af0:	48 01 d8             	add    %rbx,%rax
  416af3:	ff d0                	callq  *%rax
  416af5:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  416af9:	48 85 ff             	test   %rdi,%rdi
  416afc:	74 0f                	je     416b0d <_ZN4YAML6detail14iterator_valueD1Ev+0x4d>
  416afe:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  416b05:	ff ff ff 
  416b08:	48 01 d8             	add    %rbx,%rax
  416b0b:	ff d0                	callq  *%rax
  416b0d:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  416b11:	48 85 ff             	test   %rdi,%rdi
  416b14:	74 1a                	je     416b30 <_ZN4YAML6detail14iterator_valueD1Ev+0x70>
  416b16:	48 83 c4 08          	add    $0x8,%rsp
  416b1a:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  416b21:	ff ff ff 
  416b24:	48 01 d8             	add    %rbx,%rax
  416b27:	5b                   	pop    %rbx
  416b28:	5d                   	pop    %rbp
  416b29:	ff e0                	jmpq   *%rax
  416b2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  416b30:	48 83 c4 08          	add    $0x8,%rsp
  416b34:	5b                   	pop    %rbx
  416b35:	5d                   	pop    %rbp
  416b36:	c3                   	retq   
  416b37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  416b3e:	00 00 

0000000000416b40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  416b40:	41 57                	push   %r15
  416b42:	41 55                	push   %r13
  416b44:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 416b40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
  416b4b:	41 54                	push   %r12
  416b4d:	55                   	push   %rbp
  416b4e:	49 bb c0 44 21 00 00 	movabs $0x2144c0,%r11
  416b55:	00 00 00 
  416b58:	53                   	push   %rbx
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  416b59:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  416b5d:	4d 01 dd             	add    %r11,%r13
  416b60:	48 8b 1f             	mov    (%rdi),%rbx
  416b63:	48 39 dd             	cmp    %rbx,%rbp
  416b66:	74 33                	je     416b9b <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x5b>
  416b68:	49 89 fc             	mov    %rdi,%r12
  416b6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  416b70:	48 8b 3b             	mov    (%rbx),%rdi
  416b73:	48 8d 43 10          	lea    0x10(%rbx),%rax
  416b77:	48 39 c7             	cmp    %rax,%rdi
  416b7a:	74 12                	je     416b8e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x4e>
  416b7c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416b83:	ff ff ff 
  416b86:	4d 89 ef             	mov    %r13,%r15
  416b89:	4c 01 e8             	add    %r13,%rax
  416b8c:	ff d0                	callq  *%rax
  416b8e:	48 83 c3 20          	add    $0x20,%rbx
  416b92:	48 39 dd             	cmp    %rbx,%rbp
  416b95:	75 d9                	jne    416b70 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x30>
  416b97:	49 8b 1c 24          	mov    (%r12),%rbx
	if (__p)
  416b9b:	48 85 db             	test   %rbx,%rbx
  416b9e:	74 20                	je     416bc0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x80>
  416ba0:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416ba7:	ff ff ff 
  416baa:	48 89 df             	mov    %rbx,%rdi
  416bad:	4c 01 e8             	add    %r13,%rax
		      _M_get_Tp_allocator()); }
  416bb0:	5b                   	pop    %rbx
  416bb1:	5d                   	pop    %rbp
  416bb2:	41 5c                	pop    %r12
  416bb4:	41 5d                	pop    %r13
  416bb6:	41 5f                	pop    %r15
  416bb8:	ff e0                	jmpq   *%rax
  416bba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  416bc0:	5b                   	pop    %rbx
  416bc1:	5d                   	pop    %rbp
  416bc2:	41 5c                	pop    %r12
  416bc4:	41 5d                	pop    %r13
  416bc6:	41 5f                	pop    %r15
  416bc8:	c3                   	retq   
  416bc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000416bd0 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev>:
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
  416bd0:	41 57                	push   %r15
  416bd2:	55                   	push   %rbp
  416bd3:	49 bb 30 44 21 00 00 	movabs $0x214430,%r11
  416bda:	00 00 00 
  416bdd:	53                   	push   %rbx
  416bde:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 416bd0 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev>
  416be5:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  416bec:	ff ff ff 
  416bef:	48 89 fd             	mov    %rdi,%rbp
  416bf2:	4c 01 db             	add    %r11,%rbx
  416bf5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416bf9:	48 83 c0 10          	add    $0x10,%rax
  416bfd:	48 89 07             	mov    %rax,(%rdi)
  416c00:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  416c04:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  416c08:	48 39 c7             	cmp    %rax,%rdi
  416c0b:	74 12                	je     416c1f <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev+0x4f>
  416c0d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416c14:	ff ff ff 
  416c17:	49 89 df             	mov    %rbx,%r15
  416c1a:	48 01 d8             	add    %rbx,%rax
  416c1d:	ff d0                	callq  *%rax
  416c1f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  416c26:	ff ff ff 
  416c29:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  416c2d:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416c31:	48 83 c0 10          	add    $0x10,%rax
  416c35:	48 89 45 00          	mov    %rax,0x0(%rbp)
  416c39:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  416c40:	ff ff ff 
  416c43:	48 01 d8             	add    %rbx,%rax
  416c46:	5b                   	pop    %rbx
  416c47:	5d                   	pop    %rbp
  416c48:	41 5f                	pop    %r15
  416c4a:	ff e0                	jmpq   *%rax
  416c4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000416c50 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev>:
  416c50:	41 57                	push   %r15
  416c52:	55                   	push   %rbp
  416c53:	49 bb b0 43 21 00 00 	movabs $0x2143b0,%r11
  416c5a:	00 00 00 
  416c5d:	53                   	push   %rbx
  416c5e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 416c50 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev>
  416c65:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  416c6c:	ff ff ff 
  416c6f:	48 89 fd             	mov    %rdi,%rbp
  416c72:	4c 01 db             	add    %r11,%rbx
  416c75:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416c79:	48 83 c0 10          	add    $0x10,%rax
  416c7d:	48 89 07             	mov    %rax,(%rdi)
  416c80:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  416c84:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  416c88:	48 39 c7             	cmp    %rax,%rdi
  416c8b:	74 12                	je     416c9f <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev+0x4f>
  416c8d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416c94:	ff ff ff 
  416c97:	49 89 df             	mov    %rbx,%r15
  416c9a:	48 01 d8             	add    %rbx,%rax
  416c9d:	ff d0                	callq  *%rax
  416c9f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  416ca6:	ff ff ff 
  416ca9:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  416cad:	49 89 df             	mov    %rbx,%r15
  416cb0:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416cb4:	48 83 c0 10          	add    $0x10,%rax
  416cb8:	48 89 45 00          	mov    %rax,0x0(%rbp)
  416cbc:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  416cc3:	ff ff ff 
  416cc6:	48 01 d8             	add    %rbx,%rax
  416cc9:	ff d0                	callq  *%rax
  416ccb:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  416cd2:	ff ff ff 
  416cd5:	48 89 ef             	mov    %rbp,%rdi
  416cd8:	be 68 00 00 00       	mov    $0x68,%esi
  416cdd:	48 01 d8             	add    %rbx,%rax
  416ce0:	5b                   	pop    %rbx
  416ce1:	5d                   	pop    %rbp
  416ce2:	41 5f                	pop    %r15
  416ce4:	ff e0                	jmpq   *%rax
  416ce6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  416ced:	00 00 00 

0000000000416cf0 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE>:
inline bool node::equals(const T& rhs, shared_memory_holder pMemory) {
  416cf0:	41 57                	push   %r15
  416cf2:	41 56                	push   %r14
  416cf4:	49 bb 10 43 21 00 00 	movabs $0x214310,%r11
  416cfb:	00 00 00 
  416cfe:	41 55                	push   %r13
  416d00:	41 54                	push   %r12
  416d02:	49 89 f6             	mov    %rsi,%r14
  416d05:	55                   	push   %rbp
  416d06:	53                   	push   %rbx
  416d07:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 416cf0 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE>
  416d0e:	48 83 ec 28          	sub    $0x28,%rsp
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416d12:	4c 8b 62 08          	mov    0x8(%rdx),%r12
  416d16:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  416d19:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  416d1e:	48 89 e5             	mov    %rsp,%rbp
      { _M_string_length = __length; }
  416d21:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  416d28:	00 00 
  416d2a:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  416d2f:	4d 85 e4             	test   %r12,%r12
	: allocator_type(__a), _M_p(__dat) { }
  416d32:	48 89 04 24          	mov    %rax,(%rsp)
  416d36:	74 0d                	je     416d45 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x55>
  416d38:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  416d3d:	f0 83 00 01          	lock addl $0x1,(%rax)
  416d41:	f0 83 00 01          	lock addl $0x1,(%rax)
  416d45:	48 8b 07             	mov    (%rdi),%rax
  416d48:	48 85 c0             	test   %rax,%rax
  416d4b:	0f 84 cd 00 00 00    	je     416e1e <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x12e>
  416d51:	48 8b 30             	mov    (%rax),%rsi
  416d54:	48 85 f6             	test   %rsi,%rsi
  416d57:	0f 84 d0 00 00 00    	je     416e2d <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x13d>
  416d5d:	44 0f b6 2e          	movzbl (%rsi),%r13d
    return m_isDefined ? m_type : NodeType::Undefined;
  416d61:	45 84 ed             	test   %r13b,%r13b
  416d64:	74 0d                	je     416d73 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x83>
    if (!node.IsScalar())
  416d66:	83 7e 04 02          	cmpl   $0x2,0x4(%rsi)
  416d6a:	0f 84 90 00 00 00    	je     416e00 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x110>
      return false;
  416d70:	45 31 ed             	xor    %r13d,%r13d
        if( pi_ != 0 ) pi_->release();
  416d73:	4d 85 e4             	test   %r12,%r12
  416d76:	74 1a                	je     416d92 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xa2>
  416d78:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  416d7f:	ff ff ff 
  416d82:	4c 89 e7             	mov    %r12,%rdi
  416d85:	4c 8d 3c 03          	lea    (%rbx,%rax,1),%r15
  416d89:	41 ff d7             	callq  *%r15
  416d8c:	4c 89 e7             	mov    %r12,%rdi
  416d8f:	41 ff d7             	callq  *%r15
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  416d92:	45 84 ed             	test   %r13b,%r13b
  416d95:	4c 8b 24 24          	mov    (%rsp),%r12
  416d99:	75 35                	jne    416dd0 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xe0>
  return false;
  416d9b:	45 31 ed             	xor    %r13d,%r13d
	if (!_M_is_local())
  416d9e:	48 83 c5 10          	add    $0x10,%rbp
  416da2:	49 39 ec             	cmp    %rbp,%r12
  416da5:	74 15                	je     416dbc <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xcc>
  416da7:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416dae:	ff ff ff 
  416db1:	4c 89 e7             	mov    %r12,%rdi
  416db4:	49 89 df             	mov    %rbx,%r15
  416db7:	48 01 d8             	add    %rbx,%rax
  416dba:	ff d0                	callq  *%rax
}
  416dbc:	48 83 c4 28          	add    $0x28,%rsp
  416dc0:	44 89 e8             	mov    %r13d,%eax
  416dc3:	5b                   	pop    %rbx
  416dc4:	5d                   	pop    %rbp
  416dc5:	41 5c                	pop    %r12
  416dc7:	41 5d                	pop    %r13
  416dc9:	41 5e                	pop    %r14
  416dcb:	41 5f                	pop    %r15
  416dcd:	c3                   	retq   
  416dce:	66 90                	xchg   %ax,%ax
  416dd0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  416dd5:	49 3b 56 08          	cmp    0x8(%r14),%rdx
  416dd9:	75 c0                	jne    416d9b <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xab>
	if (__n == 0)
  416ddb:	48 85 d2             	test   %rdx,%rdx
  416dde:	74 be                	je     416d9e <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xae>
	return __builtin_memcmp(__s1, __s2, __n);
  416de0:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  416de7:	ff ff ff 
  416dea:	49 8b 36             	mov    (%r14),%rsi
  416ded:	4c 89 e7             	mov    %r12,%rdi
  416df0:	48 01 d8             	add    %rbx,%rax
  416df3:	49 89 df             	mov    %rbx,%r15
  416df6:	ff d0                	callq  *%rax
  416df8:	85 c0                	test   %eax,%eax
  416dfa:	41 0f 94 c5          	sete   %r13b
  416dfe:	eb 9e                	jmp    416d9e <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xae>
	this->_M_assign(__str);
  416e00:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  416e07:	ff ff ff 
  const std::string& scalar() const { return m_scalar; }
  416e0a:	48 83 c6 30          	add    $0x30,%rsi
  416e0e:	48 89 ef             	mov    %rbp,%rdi
  416e11:	49 89 df             	mov    %rbx,%r15
  416e14:	48 01 d8             	add    %rbx,%rax
  416e17:	ff d0                	callq  *%rax
  416e19:	e9 55 ff ff ff       	jmpq   416d73 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x83>
  416e1e:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  416e25:	ff ff ff 
  416e28:	48 01 d8             	add    %rbx,%rax
  416e2b:	ff d0                	callq  *%rax
  416e2d:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  416e34:	ff ff ff 
  416e37:	48 01 d8             	add    %rbx,%rax
  416e3a:	ff d0                	callq  *%rax
  416e3c:	4d 85 e4             	test   %r12,%r12
  416e3f:	49 89 c5             	mov    %rax,%r13
  416e42:	74 1a                	je     416e5e <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x16e>
  416e44:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  416e4b:	ff ff ff 
  416e4e:	4c 89 e7             	mov    %r12,%rdi
  416e51:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  416e55:	41 ff d6             	callq  *%r14
  416e58:	4c 89 e7             	mov    %r12,%rdi
  416e5b:	41 ff d6             	callq  *%r14
  416e5e:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  416e62:	48 83 c5 10          	add    $0x10,%rbp
  416e66:	48 39 ef             	cmp    %rbp,%rdi
  416e69:	74 12                	je     416e7d <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x18d>
  416e6b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416e72:	ff ff ff 
  416e75:	49 89 df             	mov    %rbx,%r15
  416e78:	48 01 d8             	add    %rbx,%rax
  416e7b:	ff d0                	callq  *%rax
  416e7d:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416e84:	ff ff ff 
  416e87:	4c 89 ef             	mov    %r13,%rdi
  416e8a:	49 89 df             	mov    %rbx,%r15
  416e8d:	48 01 d8             	add    %rbx,%rax
  416e90:	ff d0                	callq  *%rax
  416e92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  416e99:	00 00 00 
  416e9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000416ea0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  416ea0:	41 57                	push   %r15
  416ea2:	41 55                	push   %r13
  416ea4:	49 89 fd             	mov    %rdi,%r13
  416ea7:	41 54                	push   %r12
  416ea9:	55                   	push   %rbp
  416eaa:	48 8d 2d ef ff ff ff 	lea    -0x11(%rip),%rbp        # 416ea0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev>
  416eb1:	53                   	push   %rbx
  416eb2:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  416eb6:	49 bb 60 41 21 00 00 	movabs $0x214160,%r11
  416ebd:	00 00 00 
  416ec0:	4c 01 dd             	add    %r11,%rbp
  416ec3:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  416eca:	ff ff ff 
  416ecd:	49 01 ec             	add    %rbp,%r12
  416ed0:	48 85 ff             	test   %rdi,%rdi
  416ed3:	74 14                	je     416ee9 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev+0x49>
  416ed5:	0f 1f 00             	nopl   (%rax)
  416ed8:	48 8b 1f             	mov    (%rdi),%rbx
  416edb:	49 89 ef             	mov    %rbp,%r15
  416ede:	41 ff d4             	callq  *%r12
  416ee1:	48 85 db             	test   %rbx,%rbx
  416ee4:	48 89 df             	mov    %rbx,%rdi
  416ee7:	75 ef                	jne    416ed8 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev+0x38>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  416ee9:	49 8b 45 08          	mov    0x8(%r13),%rax
  416eed:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  416ef1:	31 f6                	xor    %esi,%esi
  416ef3:	49 89 ef             	mov    %rbp,%r15
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  416ef6:	49 83 c5 30          	add    $0x30,%r13
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  416efa:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  416f01:	00 
  416f02:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  416f09:	ff ff ff 
  416f0c:	48 01 e8             	add    %rbp,%rax
  416f0f:	ff d0                	callq  *%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  416f11:	49 8b 7d d0          	mov    -0x30(%r13),%rdi
      _M_element_count = 0;
  416f15:	49 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%r13)
  416f1c:	00 
      _M_before_begin._M_nxt = nullptr;
  416f1d:	49 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%r13)
  416f24:	00 
	if (_M_uses_single_bucket(__bkts))
  416f25:	4c 39 ef             	cmp    %r13,%rdi
  416f28:	74 17                	je     416f41 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev+0xa1>
  416f2a:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416f31:	ff ff ff 
    }
  416f34:	5b                   	pop    %rbx
  416f35:	48 01 e8             	add    %rbp,%rax
  416f38:	5d                   	pop    %rbp
  416f39:	41 5c                	pop    %r12
  416f3b:	41 5d                	pop    %r13
  416f3d:	41 5f                	pop    %r15
  416f3f:	ff e0                	jmpq   *%rax
  416f41:	5b                   	pop    %rbx
  416f42:	5d                   	pop    %rbp
  416f43:	41 5c                	pop    %r12
  416f45:	41 5d                	pop    %r13
  416f47:	41 5f                	pop    %r15
  416f49:	c3                   	retq   
  416f4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000416f50 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
  416f50:	41 57                	push   %r15
  416f52:	41 56                	push   %r14
  416f54:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 416f50 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_>
  416f5b:	41 55                	push   %r13
  416f5d:	41 54                	push   %r12
  416f5f:	49 bb b0 40 21 00 00 	movabs $0x2140b0,%r11
  416f66:	00 00 00 
  416f69:	55                   	push   %rbp
  416f6a:	53                   	push   %rbx
  416f6b:	4d 01 de             	add    %r11,%r14
  416f6e:	49 89 fc             	mov    %rdi,%r12
  416f71:	48 83 ec 18          	sub    $0x18,%rsp
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
  416f75:	48 39 fe             	cmp    %rdi,%rsi
  416f78:	74 67                	je     416fe1 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x91>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416f7a:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
  416f7e:	48 8b 1e             	mov    (%rsi),%rbx
  416f81:	48 8b 3f             	mov    (%rdi),%rdi
			 - this->_M_impl._M_start); }
  416f84:	49 8b 44 24 10       	mov    0x10(%r12),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416f89:	49 89 ed             	mov    %rbp,%r13
  416f8c:	49 29 dd             	sub    %rbx,%r13
			 - this->_M_impl._M_start); }
  416f8f:	48 29 f8             	sub    %rdi,%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416f92:	4c 89 ee             	mov    %r13,%rsi
			 - this->_M_impl._M_start); }
  416f95:	48 c1 f8 03          	sar    $0x3,%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416f99:	48 c1 fe 03          	sar    $0x3,%rsi
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
  416f9d:	48 39 f0             	cmp    %rsi,%rax
  416fa0:	0f 82 9a 00 00 00    	jb     417040 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xf0>
  416fa6:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
  416fab:	48 89 ca             	mov    %rcx,%rdx
  416fae:	48 29 fa             	sub    %rdi,%rdx
  416fb1:	49 89 d0             	mov    %rdx,%r8
  416fb4:	49 c1 f8 03          	sar    $0x3,%r8
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
	    }
	  else if (size() >= __xlen)
  416fb8:	4c 39 c6             	cmp    %r8,%rsi
  416fbb:	77 3b                	ja     416ff8 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xa8>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  416fbd:	31 c0                	xor    %eax,%eax
  416fbf:	48 85 f6             	test   %rsi,%rsi
  416fc2:	7e 15                	jle    416fd9 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x89>
  416fc4:	0f 1f 40 00          	nopl   0x0(%rax)
	      *__result = *__first;
  416fc8:	48 8b 14 c3          	mov    (%rbx,%rax,8),%rdx
  416fcc:	48 89 14 c7          	mov    %rdx,(%rdi,%rax,8)
  416fd0:	48 83 c0 01          	add    $0x1,%rax
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  416fd4:	48 39 f0             	cmp    %rsi,%rax
  416fd7:	75 ef                	jne    416fc8 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x78>
  416fd9:	4c 01 ef             	add    %r13,%rdi
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
  416fdc:	49 89 7c 24 08       	mov    %rdi,0x8(%r12)
	}
      return *this;
    }
  416fe1:	48 83 c4 18          	add    $0x18,%rsp
  416fe5:	4c 89 e0             	mov    %r12,%rax
  416fe8:	5b                   	pop    %rbx
  416fe9:	5d                   	pop    %rbp
  416fea:	41 5c                	pop    %r12
  416fec:	41 5d                	pop    %r13
  416fee:	41 5e                	pop    %r14
  416ff0:	41 5f                	pop    %r15
  416ff2:	c3                   	retq   
  416ff3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
  416ff8:	48 01 da             	add    %rbx,%rdx
  416ffb:	31 c0                	xor    %eax,%eax
  416ffd:	4d 85 c0             	test   %r8,%r8
  417000:	7e 31                	jle    417033 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xe3>
  417002:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      *__result = *__first;
  417008:	48 8b 34 c3          	mov    (%rbx,%rax,8),%rsi
  41700c:	48 89 34 c7          	mov    %rsi,(%rdi,%rax,8)
  417010:	48 83 c0 01          	add    $0x1,%rax
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  417014:	4c 39 c0             	cmp    %r8,%rax
  417017:	75 ef                	jne    417008 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xb8>
  417019:	48 39 d5             	cmp    %rdx,%rbp
  41701c:	74 bb                	je     416fd9 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x89>
  41701e:	66 90                	xchg   %ax,%ax
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  417020:	48 85 c9             	test   %rcx,%rcx
  417023:	74 06                	je     41702b <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xdb>
  417025:	48 8b 02             	mov    (%rdx),%rax
  417028:	48 89 01             	mov    %rax,(%rcx)
  41702b:	48 83 c2 08          	add    $0x8,%rdx
  41702f:	48 83 c1 08          	add    $0x8,%rcx
  417033:	48 39 d5             	cmp    %rdx,%rbp
  417036:	75 e8                	jne    417020 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xd0>
  417038:	eb 9f                	jmp    416fd9 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x89>
  41703a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  417040:	31 c0                	xor    %eax,%eax
  417042:	48 85 f6             	test   %rsi,%rsi
  417045:	74 28                	je     41706f <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x11f>
	if (__n > this->max_size())
  417047:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41704e:	ff ff 1f 
  417051:	48 39 c6             	cmp    %rax,%rsi
  417054:	77 75                	ja     4170cb <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x17b>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  417056:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41705d:	ff ff ff 
  417060:	4c 89 ef             	mov    %r13,%rdi
  417063:	4d 89 f7             	mov    %r14,%r15
  417066:	4c 01 f0             	add    %r14,%rax
  417069:	ff d0                	callq  *%rax
  41706b:	49 8b 3c 24          	mov    (%r12),%rdi
  41706f:	48 39 eb             	cmp    %rbp,%rbx
  417072:	48 89 c1             	mov    %rax,%rcx
  417075:	48 89 da             	mov    %rbx,%rdx
  417078:	74 1e                	je     417098 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x148>
  41707a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  417080:	48 85 c9             	test   %rcx,%rcx
  417083:	74 06                	je     41708b <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x13b>
  417085:	48 8b 32             	mov    (%rdx),%rsi
  417088:	48 89 31             	mov    %rsi,(%rcx)
	++_M_current;
  41708b:	48 83 c2 08          	add    $0x8,%rdx
  41708f:	48 83 c1 08          	add    $0x8,%rcx
  417093:	48 39 d5             	cmp    %rdx,%rbp
  417096:	75 e8                	jne    417080 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x130>
	if (__p)
  417098:	48 85 ff             	test   %rdi,%rdi
  41709b:	74 1c                	je     4170b9 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x169>
      { ::operator delete(__p); }
  41709d:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  4170a4:	ff ff ff 
  4170a7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4170ac:	4d 89 f7             	mov    %r14,%r15
  4170af:	4c 01 f2             	add    %r14,%rdx
  4170b2:	ff d2                	callq  *%rdx
  4170b4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
  4170b9:	4a 8d 3c 28          	lea    (%rax,%r13,1),%rdi
	      this->_M_impl._M_start = __tmp;
  4170bd:	49 89 04 24          	mov    %rax,(%r12)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
  4170c1:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  4170c6:	e9 11 ff ff ff       	jmpq   416fdc <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x8c>
	  std::__throw_bad_alloc();
  4170cb:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  4170d2:	ff ff ff 
  4170d5:	4d 89 f7             	mov    %r14,%r15
  4170d8:	4c 01 f0             	add    %r14,%rax
  4170db:	ff d0                	callq  *%rax
  4170dd:	0f 1f 00             	nopl   (%rax)

00000000004170e0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm>:
    vector<_Tp, _Alloc>::
  4170e0:	41 57                	push   %r15
  4170e2:	41 56                	push   %r14
  4170e4:	49 bb 20 3f 21 00 00 	movabs $0x213f20,%r11
  4170eb:	00 00 00 
  4170ee:	41 55                	push   %r13
  4170f0:	41 54                	push   %r12
  4170f2:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 4170e0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm>
  4170f9:	55                   	push   %rbp
  4170fa:	53                   	push   %rbx
      if (__n > this->max_size())
  4170fb:	48 b8 cc cc cc cc cc 	movabs $0xccccccccccccccc,%rax
  417102:	cc cc 0c 
  417105:	4d 01 dc             	add    %r11,%r12
    vector<_Tp, _Alloc>::
  417108:	48 83 ec 18          	sub    $0x18,%rsp
      if (__n > this->max_size())
  41710c:	48 39 c6             	cmp    %rax,%rsi
  41710f:	0f 87 ee 00 00 00    	ja     417203 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0x123>
  417115:	48 8b 1f             	mov    (%rdi),%rbx
			 - this->_M_impl._M_start); }
  417118:	48 8b 47 10          	mov    0x10(%rdi),%rax
  41711c:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
  417123:	cc cc cc 
  417126:	49 89 fd             	mov    %rdi,%r13
  417129:	49 89 f6             	mov    %rsi,%r14
  41712c:	48 29 d8             	sub    %rbx,%rax
  41712f:	48 c1 f8 02          	sar    $0x2,%rax
  417133:	48 0f af c2          	imul   %rdx,%rax
      if (this->capacity() < __n)
  417137:	48 39 c6             	cmp    %rax,%rsi
  41713a:	77 14                	ja     417150 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0x70>
    }
  41713c:	48 83 c4 18          	add    $0x18,%rsp
  417140:	5b                   	pop    %rbx
  417141:	5d                   	pop    %rbp
  417142:	41 5c                	pop    %r12
  417144:	41 5d                	pop    %r13
  417146:	41 5e                	pop    %r14
  417148:	41 5f                	pop    %r15
  41714a:	c3                   	retq   
  41714b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  417150:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  417154:	48 89 e8             	mov    %rbp,%rax
  417157:	48 29 d8             	sub    %rbx,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41715a:	48 85 f6             	test   %rsi,%rsi
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41715d:	48 89 04 24          	mov    %rax,(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  417161:	0f 84 95 00 00 00    	je     4171fc <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0x11c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  417167:	4c 8d 34 b6          	lea    (%rsi,%rsi,4),%r14
  41716b:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  417172:	ff ff ff 
  417175:	4d 89 e7             	mov    %r12,%r15
  417178:	4c 01 e0             	add    %r12,%rax
  41717b:	49 c1 e6 02          	shl    $0x2,%r14
  41717f:	4c 89 f7             	mov    %r14,%rdi
  417182:	ff d0                	callq  *%rax
  417184:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  417188:	48 39 eb             	cmp    %rbp,%rbx
  41718b:	48 89 c2             	mov    %rax,%rdx
  41718e:	74 26                	je     4171b6 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xd6>
  417190:	48 85 d2             	test   %rdx,%rdx
  417193:	74 14                	je     4171a9 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xc9>
  417195:	48 8b 0b             	mov    (%rbx),%rcx
  417198:	48 89 0a             	mov    %rcx,(%rdx)
  41719b:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
  41719f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  4171a3:	8b 4b 10             	mov    0x10(%rbx),%ecx
  4171a6:	89 4a 10             	mov    %ecx,0x10(%rdx)
      { return _M_current; }

      move_iterator&
      operator++()
      {
	++_M_current;
  4171a9:	48 83 c3 14          	add    $0x14,%rbx
  4171ad:	48 83 c2 14          	add    $0x14,%rdx
  4171b1:	48 39 dd             	cmp    %rbx,%rbp
  4171b4:	75 da                	jne    417190 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xb0>
	if (__p)
  4171b6:	48 85 ff             	test   %rdi,%rdi
  4171b9:	74 1c                	je     4171d7 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xf7>
      { ::operator delete(__p); }
  4171bb:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  4171c2:	ff ff ff 
  4171c5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4171ca:	4d 89 e7             	mov    %r12,%r15
  4171cd:	4c 01 e2             	add    %r12,%rdx
  4171d0:	ff d2                	callq  *%rdx
  4171d2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	  this->_M_impl._M_finish = __tmp + __old_size;
  4171d7:	48 8b 2c 24          	mov    (%rsp),%rbp
	  this->_M_impl._M_start = __tmp;
  4171db:	49 89 45 00          	mov    %rax,0x0(%r13)
	  this->_M_impl._M_finish = __tmp + __old_size;
  4171df:	48 01 c5             	add    %rax,%rbp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  4171e2:	4c 01 f0             	add    %r14,%rax
	  this->_M_impl._M_finish = __tmp + __old_size;
  4171e5:	49 89 6d 08          	mov    %rbp,0x8(%r13)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  4171e9:	49 89 45 10          	mov    %rax,0x10(%r13)
    }
  4171ed:	48 83 c4 18          	add    $0x18,%rsp
  4171f1:	5b                   	pop    %rbx
  4171f2:	5d                   	pop    %rbp
  4171f3:	41 5c                	pop    %r12
  4171f5:	41 5d                	pop    %r13
  4171f7:	41 5e                	pop    %r14
  4171f9:	41 5f                	pop    %r15
  4171fb:	c3                   	retq   
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  4171fc:	48 89 df             	mov    %rbx,%rdi
  4171ff:	31 c0                	xor    %eax,%eax
  417201:	eb 85                	jmp    417188 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xa8>
	__throw_length_error(__N("vector::reserve"));
  417203:	48 b8 b8 8c df ff ff 	movabs $0xffffffffffdf8cb8,%rax
  41720a:	ff ff ff 
  41720d:	4d 89 e7             	mov    %r12,%r15
  417210:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  417214:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41721b:	ff ff ff 
  41721e:	4c 01 e0             	add    %r12,%rax
  417221:	ff d0                	callq  *%rax
  417223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41722a:	00 00 00 
  41722d:	0f 1f 00             	nopl   (%rax)

0000000000417230 <_ZN5boost15program_options5valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPNS0_11typed_valueIT_cEEPS9_>:
    value(T* v)
  417230:	41 57                	push   %r15
  417232:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 417230 <_ZN5boost15program_options5valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPNS0_11typed_valueIT_cEEPS9_>
  417239:	53                   	push   %rbx
  41723a:	49 bb d0 3d 21 00 00 	movabs $0x213dd0,%r11
  417241:	00 00 00 
        typed_value<T>* r = new typed_value<T>(v);
  417244:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41724b:	ff ff ff 
    value(T* v)
  41724e:	48 89 fb             	mov    %rdi,%rbx
  417251:	4d 01 df             	add    %r11,%r15
  417254:	48 83 ec 08          	sub    $0x8,%rsp
        typed_value<T>* r = new typed_value<T>(v);
  417258:	bf b0 00 00 00       	mov    $0xb0,%edi
  41725d:	4c 01 f8             	add    %r15,%rax
  417260:	ff d0                	callq  *%rax
          m_zero_tokens(false), m_required(false)
  417262:	48 ba f8 fa ff ff ff 	movabs $0xfffffffffffffaf8,%rdx
  417269:	ff ff ff 
  41726c:	48 89 58 10          	mov    %rbx,0x10(%rax)
      { _M_string_length = __length; }
  417270:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  417277:	00 
  417278:	4c 01 fa             	add    %r15,%rdx
      { __c1 = __c2; }
  41727b:	c6 40 28 00          	movb   $0x0,0x28(%rax)
          : content(0)
  41727f:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
  417286:	00 
  417287:	48 89 10             	mov    %rdx,(%rax)
  41728a:	48 83 c2 70          	add    $0x70,%rdx
  41728e:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
  417295:	00 
  417296:	48 89 50 08          	mov    %rdx,0x8(%rax)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41729a:	48 8d 50 28          	lea    0x28(%rax),%rdx
  41729e:	c6 40 50 00          	movb   $0x0,0x50(%rax)
  4172a2:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
  4172a9:	00 
      { _M_string_length = __length; }
  4172aa:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  4172b1:	00 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4172b2:	48 89 50 18          	mov    %rdx,0x18(%rax)
  4172b6:	48 8d 50 50          	lea    0x50(%rax),%rdx
  4172ba:	c6 40 78 00          	movb   $0x0,0x78(%rax)
  4172be:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%rax)
  4172c5:	c6 80 89 00 00 00 00 	movb   $0x0,0x89(%rax)
  4172cc:	48 89 50 40          	mov    %rdx,0x40(%rax)
  4172d0:	48 8d 50 78          	lea    0x78(%rax),%rdx
  4172d4:	c6 80 8a 00 00 00 00 	movb   $0x0,0x8a(%rax)
  4172db:	c6 80 8b 00 00 00 00 	movb   $0x0,0x8b(%rax)
  4172e2:	c6 80 8c 00 00 00 00 	movb   $0x0,0x8c(%rax)
  4172e9:	48 89 50 68          	mov    %rdx,0x68(%rax)
  function_base() : vtable(0) { }
  4172ed:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
  4172f4:	00 00 00 00 

        return r;        
    }
  4172f8:	48 83 c4 08          	add    $0x8,%rsp
  4172fc:	5b                   	pop    %rbx
  4172fd:	41 5f                	pop    %r15
  4172ff:	c3                   	retq   

0000000000417300 <_ZN5boost15program_options6detail7cmdlineD1Ev>:
        line parsing. In addition, it's possible to install additional parser
        which will process custom option styles.

        @todo mininal match length for guessing?
    */
    class BOOST_PROGRAM_OPTIONS_DECL cmdline {
  417300:	55                   	push   %rbp
  417301:	53                   	push   %rbx
  417302:	48 8d 2d f7 ff ff ff 	lea    -0x9(%rip),%rbp        # 417300 <_ZN5boost15program_options6detail7cmdlineD1Ev>
  417309:	49 bb 00 3d 21 00 00 	movabs $0x213d00,%r11
  417310:	00 00 00 
  417313:	48 89 fb             	mov    %rdi,%rbx
  417316:	48 83 ec 08          	sub    $0x8,%rsp
      if (vtable) {
  41731a:	48 8b 47 50          	mov    0x50(%rdi),%rax
  41731e:	4c 01 dd             	add    %r11,%rbp
  417321:	48 85 c0             	test   %rax,%rax
  417324:	74 04                	je     41732a <_ZN5boost15program_options6detail7cmdlineD1Ev+0x2a>
        if (!this->has_trivial_copy_and_destroy())
  417326:	a8 01                	test   $0x1,%al
  417328:	74 46                	je     417370 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x70>
      if (vtable) {
  41732a:	48 8b 43 30          	mov    0x30(%rbx),%rax
  41732e:	48 85 c0             	test   %rax,%rax
  417331:	74 1e                	je     417351 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x51>
        if (!this->has_trivial_copy_and_destroy())
  417333:	a8 01                	test   $0x1,%al
  417335:	75 1a                	jne    417351 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x51>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  417337:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
          get_vtable()->clear(this->functor);
  41733b:	48 8d 7b 38          	lea    0x38(%rbx),%rdi
  41733f:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  417342:	48 85 c0             	test   %rax,%rax
  417345:	74 0a                	je     417351 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x51>
            base.manager(functor, functor, destroy_functor_tag);
  417347:	ba 02 00 00 00       	mov    $0x2,%edx
  41734c:	48 89 fe             	mov    %rdi,%rsi
  41734f:	ff d0                	callq  *%rax
  417351:	48 83 c4 08          	add    $0x8,%rsp
  417355:	48 b8 40 bb de ff ff 	movabs $0xffffffffffdebb40,%rax
  41735c:	ff ff ff 
  41735f:	48 89 df             	mov    %rbx,%rdi
  417362:	48 01 e8             	add    %rbp,%rax
  417365:	5b                   	pop    %rbx
  417366:	5d                   	pop    %rbp
  417367:	ff e0                	jmpq   *%rax
  417369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  417370:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  417374:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  417377:	48 85 c0             	test   %rax,%rax
  41737a:	74 ae                	je     41732a <_ZN5boost15program_options6detail7cmdlineD1Ev+0x2a>
          get_vtable()->clear(this->functor);
  41737c:	48 8d 7f 58          	lea    0x58(%rdi),%rdi
            base.manager(functor, functor, destroy_functor_tag);
  417380:	ba 02 00 00 00       	mov    $0x2,%edx
  417385:	48 89 fe             	mov    %rdi,%rsi
  417388:	ff d0                	callq  *%rax
  41738a:	eb 9e                	jmp    41732a <_ZN5boost15program_options6detail7cmdlineD1Ev+0x2a>
  41738c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000417390 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  417390:	41 57                	push   %r15
  417392:	41 56                	push   %r14
  417394:	49 bb 70 3c 21 00 00 	movabs $0x213c70,%r11
  41739b:	00 00 00 
  41739e:	41 55                	push   %r13
  4173a0:	41 54                	push   %r12
  4173a2:	55                   	push   %rbp
  4173a3:	53                   	push   %rbx
  4173a4:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 417390 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev>
  4173ab:	48 83 ec 18          	sub    $0x18,%rsp
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4173af:	4c 8b 6f 08          	mov    0x8(%rdi),%r13
  4173b3:	4c 8b 27             	mov    (%rdi),%r12
  4173b6:	4c 01 db             	add    %r11,%rbx
      ~vector() _GLIBCXX_NOEXCEPT
  4173b9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	  for (; __first != __last; ++__first)
  4173be:	4d 39 e5             	cmp    %r12,%r13
  4173c1:	0f 84 ec 00 00 00    	je     4174b3 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x123>
  4173c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4173ce:	00 00 
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4173d0:	49 8b 6c 24 48       	mov    0x48(%r12),%rbp
  4173d5:	4d 8b 74 24 40       	mov    0x40(%r12),%r14
  4173da:	4c 39 f5             	cmp    %r14,%rbp
  4173dd:	74 2d                	je     41740c <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x7c>
  4173df:	90                   	nop
  4173e0:	49 8b 3e             	mov    (%r14),%rdi
	if (!_M_is_local())
  4173e3:	49 8d 56 10          	lea    0x10(%r14),%rdx
  4173e7:	48 39 d7             	cmp    %rdx,%rdi
  4173ea:	74 12                	je     4173fe <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x6e>
  4173ec:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  4173f3:	ff ff ff 
  4173f6:	49 89 df             	mov    %rbx,%r15
  4173f9:	48 01 da             	add    %rbx,%rdx
  4173fc:	ff d2                	callq  *%rdx
  4173fe:	49 83 c6 20          	add    $0x20,%r14
  417402:	4c 39 f5             	cmp    %r14,%rbp
  417405:	75 d9                	jne    4173e0 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x50>
  417407:	4d 8b 74 24 40       	mov    0x40(%r12),%r14
	if (__p)
  41740c:	4d 85 f6             	test   %r14,%r14
  41740f:	74 15                	je     417426 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x96>
  417411:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  417418:	ff ff ff 
  41741b:	4c 89 f7             	mov    %r14,%rdi
  41741e:	49 89 df             	mov    %rbx,%r15
  417421:	48 01 d8             	add    %rbx,%rax
  417424:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  417426:	49 8b 6c 24 30       	mov    0x30(%r12),%rbp
  41742b:	4d 8b 74 24 28       	mov    0x28(%r12),%r14
  417430:	4c 39 f5             	cmp    %r14,%rbp
  417433:	74 2f                	je     417464 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xd4>
  417435:	0f 1f 00             	nopl   (%rax)
  417438:	49 8b 3e             	mov    (%r14),%rdi
  41743b:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41743f:	48 39 d7             	cmp    %rdx,%rdi
  417442:	74 12                	je     417456 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xc6>
  417444:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  41744b:	ff ff ff 
  41744e:	49 89 df             	mov    %rbx,%r15
  417451:	48 01 da             	add    %rbx,%rdx
  417454:	ff d2                	callq  *%rdx
  417456:	49 83 c6 20          	add    $0x20,%r14
  41745a:	4c 39 f5             	cmp    %r14,%rbp
  41745d:	75 d9                	jne    417438 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xa8>
  41745f:	4d 8b 74 24 28       	mov    0x28(%r12),%r14
	if (__p)
  417464:	4d 85 f6             	test   %r14,%r14
  417467:	74 15                	je     41747e <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xee>
  417469:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  417470:	ff ff ff 
  417473:	4c 89 f7             	mov    %r14,%rdi
  417476:	49 89 df             	mov    %rbx,%r15
  417479:	48 01 d8             	add    %rbx,%rax
  41747c:	ff d0                	callq  *%rax
  41747e:	49 8b 3c 24          	mov    (%r12),%rdi
  417482:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  417487:	48 39 c7             	cmp    %rax,%rdi
  41748a:	74 12                	je     41749e <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x10e>
  41748c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  417493:	ff ff ff 
  417496:	49 89 df             	mov    %rbx,%r15
  417499:	48 01 d8             	add    %rbx,%rax
  41749c:	ff d0                	callq  *%rax
  41749e:	49 83 c4 60          	add    $0x60,%r12
  4174a2:	4d 39 e5             	cmp    %r12,%r13
  4174a5:	0f 85 25 ff ff ff    	jne    4173d0 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x40>
  4174ab:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4174b0:	4c 8b 20             	mov    (%rax),%r12
  4174b3:	4d 85 e4             	test   %r12,%r12
  4174b6:	74 20                	je     4174d8 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x148>
		      _M_get_Tp_allocator()); }
  4174b8:	48 83 c4 18          	add    $0x18,%rsp
  4174bc:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4174c3:	ff ff ff 
  4174c6:	4c 89 e7             	mov    %r12,%rdi
  4174c9:	48 01 d8             	add    %rbx,%rax
  4174cc:	5b                   	pop    %rbx
  4174cd:	5d                   	pop    %rbp
  4174ce:	41 5c                	pop    %r12
  4174d0:	41 5d                	pop    %r13
  4174d2:	41 5e                	pop    %r14
  4174d4:	41 5f                	pop    %r15
  4174d6:	ff e0                	jmpq   *%rax
  4174d8:	48 83 c4 18          	add    $0x18,%rsp
  4174dc:	5b                   	pop    %rbx
  4174dd:	5d                   	pop    %rbp
  4174de:	41 5c                	pop    %r12
  4174e0:	41 5d                	pop    %r13
  4174e2:	41 5e                	pop    %r14
  4174e4:	41 5f                	pop    %r15
  4174e6:	c3                   	retq   
  4174e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4174ee:	00 00 

00000000004174f0 <_ZNK4YAML4Node2asIiEEKT_v>:
inline const T Node::as() const {
  4174f0:	41 57                	push   %r15
  4174f2:	41 54                	push   %r12
  4174f4:	49 bb 10 3b 21 00 00 	movabs $0x213b10,%r11
  4174fb:	00 00 00 
  4174fe:	55                   	push   %rbp
  4174ff:	53                   	push   %rbx
  417500:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 4174f0 <_ZNK4YAML4Node2asIiEEKT_v>
  417507:	48 83 ec 18          	sub    $0x18,%rsp
  41750b:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41750e:	80 3f 00             	cmpb   $0x0,(%rdi)
  417511:	74 32                	je     417545 <_ZNK4YAML4Node2asIiEEKT_v+0x55>
    if (!node.m_pNode)
  417513:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
  417518:	0f 84 d8 00 00 00    	je     4175f6 <_ZNK4YAML4Node2asIiEEKT_v+0x106>
    if (convert<T>::decode(node, t))
  41751e:	48 b8 70 b6 de ff ff 	movabs $0xffffffffffdeb670,%rax
  417525:	ff ff ff 
  417528:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  41752d:	48 01 d8             	add    %rbx,%rax
  417530:	ff d0                	callq  *%rax
  417532:	84 c0                	test   %al,%al
  417534:	74 69                	je     41759f <_ZNK4YAML4Node2asIiEEKT_v+0xaf>
      return t;
  417536:	8b 44 24 0c          	mov    0xc(%rsp),%eax
}
  41753a:	48 83 c4 18          	add    $0x18,%rsp
  41753e:	5b                   	pop    %rbx
  41753f:	5d                   	pop    %rbp
  417540:	41 5c                	pop    %r12
  417542:	41 5f                	pop    %r15
  417544:	c3                   	retq   
    throw InvalidNode();
  417545:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41754c:	ff ff ff 
  41754f:	bf 40 00 00 00       	mov    $0x40,%edi
  417554:	49 89 df             	mov    %rbx,%r15
  417557:	48 01 d8             	add    %rbx,%rax
  41755a:	ff d0                	callq  *%rax
  41755c:	48 89 c5             	mov    %rax,%rbp
  41755f:	48 89 c7             	mov    %rax,%rdi
  417562:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  417569:	ff ff ff 
  41756c:	48 01 d8             	add    %rbx,%rax
  41756f:	ff d0                	callq  *%rax
  417571:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  417578:	ff ff ff 
  41757b:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41757f:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  417586:	ff ff ff 
      throw TypedBadConversion<T>();
  417589:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41758d:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  417594:	ff ff ff 
  417597:	48 89 ef             	mov    %rbp,%rdi
  41759a:	48 01 d8             	add    %rbx,%rax
  41759d:	ff d0                	callq  *%rax
    throw TypedBadConversion<T>();
  41759f:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  4175a6:	ff ff ff 
  4175a9:	bf 40 00 00 00       	mov    $0x40,%edi
  4175ae:	49 89 df             	mov    %rbx,%r15
  4175b1:	48 01 d8             	add    %rbx,%rax
  4175b4:	ff d0                	callq  *%rax
  4175b6:	48 89 c5             	mov    %rax,%rbp
  TypedBadConversion() : BadConversion() {}
  4175b9:	48 89 c7             	mov    %rax,%rdi
  4175bc:	48 b8 50 b1 de ff ff 	movabs $0xffffffffffdeb150,%rax
  4175c3:	ff ff ff 
  4175c6:	48 01 d8             	add    %rbx,%rax
  4175c9:	ff d0                	callq  *%rax
  4175cb:	48 b8 28 fc ff ff ff 	movabs $0xfffffffffffffc28,%rax
  4175d2:	ff ff ff 
  4175d5:	48 01 d8             	add    %rbx,%rax
  4175d8:	48 89 45 00          	mov    %rax,0x0(%rbp)
      throw TypedBadConversion<T>();
  4175dc:	48 b8 10 96 de ff ff 	movabs $0xffffffffffde9610,%rax
  4175e3:	ff ff ff 
  4175e6:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4175ea:	48 b8 18 f8 ff ff ff 	movabs $0xfffffffffffff818,%rax
  4175f1:	ff ff ff 
  4175f4:	eb 93                	jmp    417589 <_ZNK4YAML4Node2asIiEEKT_v+0x99>
  4175f6:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  4175fd:	ff ff ff 
  417600:	bf 40 00 00 00       	mov    $0x40,%edi
  417605:	49 89 df             	mov    %rbx,%r15
  417608:	48 01 d8             	add    %rbx,%rax
  41760b:	ff d0                	callq  *%rax
  41760d:	48 89 c5             	mov    %rax,%rbp
  417610:	48 89 c7             	mov    %rax,%rdi
  417613:	48 b8 50 b1 de ff ff 	movabs $0xffffffffffdeb150,%rax
  41761a:	ff ff ff 
  41761d:	48 01 d8             	add    %rbx,%rax
  417620:	ff d0                	callq  *%rax
  417622:	eb a7                	jmp    4175cb <_ZNK4YAML4Node2asIiEEKT_v+0xdb>
    throw InvalidNode();
  417624:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41762b:	ff ff ff 
  41762e:	49 89 c4             	mov    %rax,%r12
  417631:	48 89 ef             	mov    %rbp,%rdi
  417634:	49 89 df             	mov    %rbx,%r15
  417637:	48 01 da             	add    %rbx,%rdx
  41763a:	ff d2                	callq  *%rdx
  41763c:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  417643:	ff ff ff 
  417646:	4c 89 e7             	mov    %r12,%rdi
  417649:	48 01 d8             	add    %rbx,%rax
  41764c:	ff d0                	callq  *%rax
  41764e:	eb d4                	jmp    417624 <_ZNK4YAML4Node2asIiEEKT_v+0x134>
  417650:	eb d2                	jmp    417624 <_ZNK4YAML4Node2asIiEEKT_v+0x134>
  417652:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  417659:	00 00 00 
  41765c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000417660 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  417660:	41 57                	push   %r15
  417662:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 417660 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  417669:	41 56                	push   %r14
  41766b:	49 bb a0 39 21 00 00 	movabs $0x2139a0,%r11
  417672:	00 00 00 
  417675:	41 55                	push   %r13
  417677:	41 54                	push   %r12
  417679:	55                   	push   %rbp
  41767a:	53                   	push   %rbx
  41767b:	4d 01 df             	add    %r11,%r15
  41767e:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  417685:	ff ff ff 
  417688:	48 b8 60 c6 de ff ff 	movabs $0xffffffffffdec660,%rax
  41768f:	ff ff ff 
  417692:	48 83 ec 08          	sub    $0x8,%rsp
  417696:	4c 01 fd             	add    %r15,%rbp
      while (__x != 0)
  417699:	48 85 f6             	test   %rsi,%rsi
	  _M_erase(_S_right(__x));
  41769c:	4e 8d 2c 38          	lea    (%rax,%r15,1),%r13
      while (__x != 0)
  4176a0:	74 47                	je     4176e9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x89>
  4176a2:	49 89 fe             	mov    %rdi,%r14
  4176a5:	48 89 f3             	mov    %rsi,%rbx
  4176a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4176af:	00 
	  _M_erase(_S_right(__x));
  4176b0:	4c 89 f7             	mov    %r14,%rdi
  4176b3:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  4176b7:	41 ff d5             	callq  *%r13
  4176ba:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4176be:	48 8d 43 50          	lea    0x50(%rbx),%rax
  4176c2:	4c 8b 63 10          	mov    0x10(%rbx),%r12
	if (!_M_is_local())
  4176c6:	48 39 c7             	cmp    %rax,%rdi
  4176c9:	74 02                	je     4176cd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6d>
  4176cb:	ff d5                	callq  *%rbp
  4176cd:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4176d1:	48 8d 43 30          	lea    0x30(%rbx),%rax
	if (!_M_is_local())
  4176d5:	48 39 c7             	cmp    %rax,%rdi
  4176d8:	74 02                	je     4176dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x7c>
  4176da:	ff d5                	callq  *%rbp
  4176dc:	48 89 df             	mov    %rbx,%rdi
  4176df:	4c 89 e3             	mov    %r12,%rbx
  4176e2:	ff d5                	callq  *%rbp
      while (__x != 0)
  4176e4:	4d 85 e4             	test   %r12,%r12
  4176e7:	75 c7                	jne    4176b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x50>
    }
  4176e9:	48 83 c4 08          	add    $0x8,%rsp
  4176ed:	5b                   	pop    %rbx
  4176ee:	5d                   	pop    %rbp
  4176ef:	41 5c                	pop    %r12
  4176f1:	41 5d                	pop    %r13
  4176f3:	41 5e                	pop    %r14
  4176f5:	41 5f                	pop    %r15
  4176f7:	c3                   	retq   
  4176f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4176ff:	00 

0000000000417700 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  417700:	41 57                	push   %r15
  417702:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 417700 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
  417709:	41 56                	push   %r14
  41770b:	49 bb 00 39 21 00 00 	movabs $0x213900,%r11
  417712:	00 00 00 
  417715:	41 55                	push   %r13
  417717:	41 54                	push   %r12
  417719:	55                   	push   %rbp
  41771a:	53                   	push   %rbx
  41771b:	4d 01 df             	add    %r11,%r15
  41771e:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  417725:	ff ff ff 
  417728:	48 b8 00 c7 de ff ff 	movabs $0xffffffffffdec700,%rax
  41772f:	ff ff ff 
  417732:	48 83 ec 08          	sub    $0x8,%rsp
  417736:	4c 01 fd             	add    %r15,%rbp
      while (__x != 0)
  417739:	48 85 f6             	test   %rsi,%rsi
	  _M_erase(_S_right(__x));
  41773c:	4e 8d 2c 38          	lea    (%rax,%r15,1),%r13
      while (__x != 0)
  417740:	74 56                	je     417798 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x98>
  417742:	49 89 fe             	mov    %rdi,%r14
  417745:	48 89 f3             	mov    %rsi,%rbx
  417748:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41774f:	00 
	  _M_erase(_S_right(__x));
  417750:	4c 89 f7             	mov    %r14,%rdi
  417753:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  417757:	41 ff d5             	callq  *%r13
  41775a:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41775e:	48 8d 43 70          	lea    0x70(%rbx),%rax
  417762:	4c 8b 63 10          	mov    0x10(%rbx),%r12
	if (!_M_is_local())
  417766:	48 39 c7             	cmp    %rax,%rdi
  417769:	74 02                	je     41776d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x6d>
  41776b:	ff d5                	callq  *%rbp
  41776d:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417771:	48 8d 43 50          	lea    0x50(%rbx),%rax
	if (!_M_is_local())
  417775:	48 39 c7             	cmp    %rax,%rdi
  417778:	74 02                	je     41777c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x7c>
  41777a:	ff d5                	callq  *%rbp
  41777c:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417780:	48 8d 43 30          	lea    0x30(%rbx),%rax
	if (!_M_is_local())
  417784:	48 39 c7             	cmp    %rax,%rdi
  417787:	74 02                	je     41778b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x8b>
  417789:	ff d5                	callq  *%rbp
  41778b:	48 89 df             	mov    %rbx,%rdi
  41778e:	4c 89 e3             	mov    %r12,%rbx
  417791:	ff d5                	callq  *%rbp
      while (__x != 0)
  417793:	4d 85 e4             	test   %r12,%r12
  417796:	75 b8                	jne    417750 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x50>
    }
  417798:	48 83 c4 08          	add    $0x8,%rsp
  41779c:	5b                   	pop    %rbx
  41779d:	5d                   	pop    %rbp
  41779e:	41 5c                	pop    %r12
  4177a0:	41 5d                	pop    %r13
  4177a2:	41 5e                	pop    %r14
  4177a4:	41 5f                	pop    %r15
  4177a6:	c3                   	retq   
  4177a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4177ae:	00 00 

00000000004177b0 <_ZN5boost15program_options22error_with_option_nameD1Ev>:
        ~error_with_option_name() throw() {}
  4177b0:	41 57                	push   %r15
  4177b2:	41 56                	push   %r14
  4177b4:	49 bb 50 38 21 00 00 	movabs $0x213850,%r11
  4177bb:	00 00 00 
  4177be:	41 55                	push   %r13
  4177c0:	41 54                	push   %r12
  4177c2:	48 b8 c0 ff ff ff ff 	movabs $0xffffffffffffffc0,%rax
  4177c9:	ff ff ff 
  4177cc:	55                   	push   %rbp
  4177cd:	53                   	push   %rbx
  4177ce:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 4177b0 <_ZN5boost15program_options22error_with_option_nameD1Ev>
  4177d5:	49 89 fd             	mov    %rdi,%r13
  4177d8:	4c 01 db             	add    %r11,%rbx
  4177db:	48 83 ec 18          	sub    $0x18,%rsp
  4177df:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4177e3:	48 83 c0 10          	add    $0x10,%rax
  4177e7:	48 89 07             	mov    %rax,(%rdi)
  4177ea:	48 8b bf 98 00 00 00 	mov    0x98(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4177f1:	49 8d 85 a8 00 00 00 	lea    0xa8(%r13),%rax
	if (!_M_is_local())
  4177f8:	48 39 c7             	cmp    %rax,%rdi
  4177fb:	74 12                	je     41780f <_ZN5boost15program_options22error_with_option_nameD1Ev+0x5f>
  4177fd:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  417804:	ff ff ff 
  417807:	49 89 df             	mov    %rbx,%r15
  41780a:	48 01 dd             	add    %rbx,%rbp
  41780d:	ff d5                	callq  *%rbp
  41780f:	49 8b 7d 78          	mov    0x78(%r13),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417813:	49 8d 85 88 00 00 00 	lea    0x88(%r13),%rax
	if (!_M_is_local())
  41781a:	48 39 c7             	cmp    %rax,%rdi
  41781d:	74 12                	je     417831 <_ZN5boost15program_options22error_with_option_nameD1Ev+0x81>
  41781f:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  417826:	ff ff ff 
  417829:	49 89 df             	mov    %rbx,%r15
  41782c:	48 01 dd             	add    %rbx,%rbp
  41782f:	ff d5                	callq  *%rbp
    class map
  417831:	49 8d 45 48          	lea    0x48(%r13),%rax
  417835:	4d 8b 75 58          	mov    0x58(%r13),%r14
  417839:	48 ba 00 c7 de ff ff 	movabs $0xffffffffffdec700,%rdx
  417840:	ff ff ff 
  417843:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  41784a:	ff ff ff 
  41784d:	48 89 04 24          	mov    %rax,(%rsp)
	  _M_erase(_S_right(__x));
  417851:	48 8d 04 1a          	lea    (%rdx,%rbx,1),%rax
  417855:	48 01 dd             	add    %rbx,%rbp
      while (__x != 0)
  417858:	4d 85 f6             	test   %r14,%r14
	  _M_erase(_S_right(__x));
  41785b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
      while (__x != 0)
  417860:	74 5f                	je     4178c1 <_ZN5boost15program_options22error_with_option_nameD1Ev+0x111>
  417862:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  _M_erase(_S_right(__x));
  417868:	48 8b 3c 24          	mov    (%rsp),%rdi
  41786c:	49 8b 76 18          	mov    0x18(%r14),%rsi
  417870:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  417875:	ff d0                	callq  *%rax
  417877:	49 8b 7e 60          	mov    0x60(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41787b:	49 8d 56 70          	lea    0x70(%r14),%rdx
  41787f:	4d 8b 66 10          	mov    0x10(%r14),%r12
	if (!_M_is_local())
  417883:	48 39 d7             	cmp    %rdx,%rdi
  417886:	74 05                	je     41788d <_ZN5boost15program_options22error_with_option_nameD1Ev+0xdd>
  417888:	49 89 df             	mov    %rbx,%r15
  41788b:	ff d5                	callq  *%rbp
  41788d:	49 8b 7e 40          	mov    0x40(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417891:	49 8d 56 50          	lea    0x50(%r14),%rdx
	if (!_M_is_local())
  417895:	48 39 d7             	cmp    %rdx,%rdi
  417898:	74 05                	je     41789f <_ZN5boost15program_options22error_with_option_nameD1Ev+0xef>
  41789a:	49 89 df             	mov    %rbx,%r15
  41789d:	ff d5                	callq  *%rbp
  41789f:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4178a3:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  4178a7:	48 39 d7             	cmp    %rdx,%rdi
  4178aa:	74 05                	je     4178b1 <_ZN5boost15program_options22error_with_option_nameD1Ev+0x101>
  4178ac:	49 89 df             	mov    %rbx,%r15
  4178af:	ff d5                	callq  *%rbp
  4178b1:	4c 89 f7             	mov    %r14,%rdi
  4178b4:	49 89 df             	mov    %rbx,%r15
  4178b7:	4d 89 e6             	mov    %r12,%r14
  4178ba:	ff d5                	callq  *%rbp
      while (__x != 0)
  4178bc:	4d 85 e4             	test   %r12,%r12
  4178bf:	75 a7                	jne    417868 <_ZN5boost15program_options22error_with_option_nameD1Ev+0xb8>
      { _M_erase(_M_begin()); }
  4178c1:	48 b8 60 c6 de ff ff 	movabs $0xffffffffffdec660,%rax
  4178c8:	ff ff ff 
  4178cb:	49 8d 7d 18          	lea    0x18(%r13),%rdi
  4178cf:	49 8b 75 28          	mov    0x28(%r13),%rsi
  4178d3:	48 01 d8             	add    %rbx,%rax
  4178d6:	ff d0                	callq  *%rax
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  4178d8:	48 b8 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rax
  4178df:	ff ff ff 
  4178e2:	4c 89 ef             	mov    %r13,%rdi
  4178e5:	48 01 d8             	add    %rbx,%rax
  4178e8:	49 89 45 00          	mov    %rax,0x0(%r13)
        ~error_with_option_name() throw() {}
  4178ec:	48 83 c4 18          	add    $0x18,%rsp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  4178f0:	48 b8 40 ea dd ff ff 	movabs $0xffffffffffddea40,%rax
  4178f7:	ff ff ff 
  4178fa:	48 01 d8             	add    %rbx,%rax
        ~error_with_option_name() throw() {}
  4178fd:	5b                   	pop    %rbx
  4178fe:	5d                   	pop    %rbp
  4178ff:	41 5c                	pop    %r12
  417901:	41 5d                	pop    %r13
  417903:	41 5e                	pop    %r14
  417905:	41 5f                	pop    %r15
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  417907:	ff e0                	jmpq   *%rax
  417909:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000417910 <_ZN5boost15program_options22error_with_option_nameD0Ev>:
        ~error_with_option_name() throw() {}
  417910:	41 57                	push   %r15
  417912:	55                   	push   %rbp
  417913:	49 bb f0 36 21 00 00 	movabs $0x2136f0,%r11
  41791a:	00 00 00 
  41791d:	53                   	push   %rbx
  41791e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417910 <_ZN5boost15program_options22error_with_option_nameD0Ev>
  417925:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  41792c:	ff ff ff 
  41792f:	48 89 fd             	mov    %rdi,%rbp
  417932:	4c 01 db             	add    %r11,%rbx
  417935:	48 01 d8             	add    %rbx,%rax
  417938:	ff d0                	callq  *%rax
  41793a:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417941:	ff ff ff 
  417944:	48 89 ef             	mov    %rbp,%rdi
  417947:	be b8 00 00 00       	mov    $0xb8,%esi
  41794c:	48 01 d8             	add    %rbx,%rax
  41794f:	5b                   	pop    %rbx
  417950:	5d                   	pop    %rbp
  417951:	41 5f                	pop    %r15
  417953:	ff e0                	jmpq   *%rax
  417955:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41795c:	00 00 00 
  41795f:	90                   	nop

0000000000417960 <_ZN5boost15program_options16validation_errorD1Ev>:

        ~validation_error() throw() {}
  417960:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 417960 <_ZN5boost15program_options16validation_errorD1Ev>
  417967:	49 bb a0 36 21 00 00 	movabs $0x2136a0,%r11
  41796e:	00 00 00 
  417971:	48 ba 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rdx
  417978:	ff ff ff 
  41797b:	4c 01 d8             	add    %r11,%rax
  41797e:	48 01 c2             	add    %rax,%rdx
  417981:	48 89 17             	mov    %rdx,(%rdi)
  417984:	48 ba b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rdx
  41798b:	ff ff ff 
  41798e:	48 01 d0             	add    %rdx,%rax
  417991:	ff e0                	jmpq   *%rax
  417993:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41799a:	00 00 00 
  41799d:	0f 1f 00             	nopl   (%rax)

00000000004179a0 <_ZN5boost15program_options16validation_errorD0Ev>:
  4179a0:	41 57                	push   %r15
  4179a2:	55                   	push   %rbp
  4179a3:	49 bb 60 36 21 00 00 	movabs $0x213660,%r11
  4179aa:	00 00 00 
  4179ad:	53                   	push   %rbx
  4179ae:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4179a0 <_ZN5boost15program_options16validation_errorD0Ev>
  4179b5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4179bc:	ff ff ff 
  4179bf:	48 89 fd             	mov    %rdi,%rbp
  4179c2:	4c 01 db             	add    %r11,%rbx
  4179c5:	48 01 d8             	add    %rbx,%rax
  4179c8:	48 89 07             	mov    %rax,(%rdi)
  4179cb:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  4179d2:	ff ff ff 
  4179d5:	48 01 d8             	add    %rbx,%rax
  4179d8:	ff d0                	callq  *%rax
  4179da:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4179e1:	ff ff ff 
  4179e4:	48 89 ef             	mov    %rbp,%rdi
  4179e7:	be c0 00 00 00       	mov    $0xc0,%esi
  4179ec:	48 01 d8             	add    %rbx,%rax
  4179ef:	5b                   	pop    %rbx
  4179f0:	5d                   	pop    %rbp
  4179f1:	41 5f                	pop    %r15
  4179f3:	ff e0                	jmpq   *%rax
  4179f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4179fc:	00 00 00 
  4179ff:	90                   	nop

0000000000417a00 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev>:
            ~error_info_injector() throw()
  417a00:	55                   	push   %rbp
  417a01:	53                   	push   %rbx
  417a02:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 417a00 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev>
  417a09:	49 bb 00 36 21 00 00 	movabs $0x213600,%r11
  417a10:	00 00 00 
                }
  417a13:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  417a1a:	ff ff ff 
            ~error_info_injector() throw()
  417a1d:	48 89 fd             	mov    %rdi,%rbp
  417a20:	4c 01 db             	add    %r11,%rbx
  417a23:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417a27:	48 01 d8             	add    %rbx,%rax
  417a2a:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417a2d:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417a34:	ff ff ff 
  417a37:	48 01 d8             	add    %rbx,%rax
  417a3a:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417a41:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417a48:	48 85 ff             	test   %rdi,%rdi
  417a4b:	74 06                	je     417a53 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev+0x53>
  417a4d:	48 8b 07             	mov    (%rdi),%rax
  417a50:	ff 50 20             	callq  *0x20(%rax)
  417a53:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417a5a:	ff ff ff 
  417a5d:	48 89 ef             	mov    %rbp,%rdi
  417a60:	48 01 d8             	add    %rbx,%rax
  417a63:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417a67:	48 83 c4 08          	add    $0x8,%rsp
  417a6b:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  417a72:	ff ff ff 
  417a75:	48 01 d8             	add    %rbx,%rax
  417a78:	5b                   	pop    %rbx
  417a79:	5d                   	pop    %rbp
  417a7a:	ff e0                	jmpq   *%rax
  417a7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000417a80 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev>:
            ~error_info_injector() throw()
  417a80:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417a87:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417a87 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev+0x7>
  417a8e:	49 ba 79 35 21 00 00 	movabs $0x213579,%r10
  417a95:	00 00 00 
  417a98:	4d 01 d3             	add    %r10,%r11
  417a9b:	49 ba 00 ca de ff ff 	movabs $0xffffffffffdeca00,%r10
  417aa2:	ff ff ff 
  417aa5:	4d 01 da             	add    %r11,%r10
  417aa8:	41 ff e2             	jmpq   *%r10
  417aab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417ab0 <_ZN5boost15program_options20invalid_option_valueD1Ev>:
        std::string get_template(kind_t kind);
        kind_t m_kind;
    };

    /** Class thrown if there is an invalid option value given */
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  417ab0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 417ab0 <_ZN5boost15program_options20invalid_option_valueD1Ev>
  417ab7:	49 bb 50 35 21 00 00 	movabs $0x213550,%r11
  417abe:	00 00 00 
        ~validation_error() throw() {}
  417ac1:	48 ba 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rdx
  417ac8:	ff ff ff 
  417acb:	4c 01 d8             	add    %r11,%rax
  417ace:	48 01 c2             	add    %rax,%rdx
  417ad1:	48 89 17             	mov    %rdx,(%rdi)
  417ad4:	48 ba b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rdx
  417adb:	ff ff ff 
  417ade:	48 01 d0             	add    %rdx,%rax
  417ae1:	ff e0                	jmpq   *%rax
  417ae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  417aea:	00 00 00 
  417aed:	0f 1f 00             	nopl   (%rax)

0000000000417af0 <_ZN5boost15program_options20invalid_option_valueD0Ev>:
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  417af0:	41 57                	push   %r15
  417af2:	55                   	push   %rbp
  417af3:	49 bb 10 35 21 00 00 	movabs $0x213510,%r11
  417afa:	00 00 00 
  417afd:	53                   	push   %rbx
  417afe:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417af0 <_ZN5boost15program_options20invalid_option_valueD0Ev>
        ~validation_error() throw() {}
  417b05:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417b0c:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  417b0f:	48 89 fd             	mov    %rdi,%rbp
  417b12:	4c 01 db             	add    %r11,%rbx
        ~validation_error() throw() {}
  417b15:	48 01 d8             	add    %rbx,%rax
  417b18:	48 89 07             	mov    %rax,(%rdi)
  417b1b:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  417b22:	ff ff ff 
  417b25:	48 01 d8             	add    %rbx,%rax
  417b28:	ff d0                	callq  *%rax
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  417b2a:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417b31:	ff ff ff 
  417b34:	48 89 ef             	mov    %rbp,%rdi
  417b37:	be c0 00 00 00       	mov    $0xc0,%esi
  417b3c:	48 01 d8             	add    %rbx,%rax
  417b3f:	5b                   	pop    %rbx
  417b40:	5d                   	pop    %rbp
  417b41:	41 5f                	pop    %r15
  417b43:	ff e0                	jmpq   *%rax
  417b45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  417b4c:	00 00 00 
  417b4f:	90                   	nop

0000000000417b50 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev>:
  417b50:	55                   	push   %rbp
  417b51:	53                   	push   %rbx
  417b52:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 417b50 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev>
  417b59:	49 bb b0 34 21 00 00 	movabs $0x2134b0,%r11
  417b60:	00 00 00 
                }
  417b63:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  417b6a:	ff ff ff 
            ~error_info_injector() throw()
  417b6d:	48 89 fd             	mov    %rdi,%rbp
  417b70:	4c 01 db             	add    %r11,%rbx
  417b73:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417b77:	48 01 d8             	add    %rbx,%rax
  417b7a:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417b7d:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417b84:	ff ff ff 
  417b87:	48 01 d8             	add    %rbx,%rax
  417b8a:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417b91:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417b98:	48 85 ff             	test   %rdi,%rdi
  417b9b:	74 06                	je     417ba3 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev+0x53>
  417b9d:	48 8b 07             	mov    (%rdi),%rax
  417ba0:	ff 50 20             	callq  *0x20(%rax)
        ~validation_error() throw() {}
  417ba3:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417baa:	ff ff ff 
  417bad:	48 89 ef             	mov    %rbp,%rdi
  417bb0:	48 01 d8             	add    %rbx,%rax
  417bb3:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417bb7:	48 83 c4 08          	add    $0x8,%rsp
  417bbb:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  417bc2:	ff ff ff 
  417bc5:	48 01 d8             	add    %rbx,%rax
  417bc8:	5b                   	pop    %rbx
  417bc9:	5d                   	pop    %rbp
  417bca:	ff e0                	jmpq   *%rax
  417bcc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000417bd0 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev>:
            ~error_info_injector() throw()
  417bd0:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417bd7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417bd7 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev+0x7>
  417bde:	49 ba 29 34 21 00 00 	movabs $0x213429,%r10
  417be5:	00 00 00 
  417be8:	4d 01 d3             	add    %r10,%r11
  417beb:	49 ba 50 cb de ff ff 	movabs $0xffffffffffdecb50,%r10
  417bf2:	ff ff ff 
  417bf5:	4d 01 da             	add    %r11,%r10
  417bf8:	41 ff e2             	jmpq   *%r10
  417bfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417c00 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev>:
  417c00:	41 57                	push   %r15
  417c02:	55                   	push   %rbp
  417c03:	49 bb 00 34 21 00 00 	movabs $0x213400,%r11
  417c0a:	00 00 00 
  417c0d:	53                   	push   %rbx
  417c0e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417c00 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev>
                }
  417c15:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  417c1c:	ff ff ff 
            ~error_info_injector() throw()
  417c1f:	48 89 fd             	mov    %rdi,%rbp
  417c22:	4c 01 db             	add    %r11,%rbx
                }
  417c25:	48 01 d8             	add    %rbx,%rax
  417c28:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417c2b:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417c32:	ff ff ff 
  417c35:	48 01 d8             	add    %rbx,%rax
  417c38:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417c3f:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417c46:	48 85 ff             	test   %rdi,%rdi
  417c49:	74 06                	je     417c51 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev+0x51>
  417c4b:	48 8b 07             	mov    (%rdi),%rax
  417c4e:	ff 50 20             	callq  *0x20(%rax)
  417c51:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417c58:	ff ff ff 
  417c5b:	48 89 ef             	mov    %rbp,%rdi
  417c5e:	48 01 d8             	add    %rbx,%rax
  417c61:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417c65:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  417c6c:	ff ff ff 
  417c6f:	48 01 d8             	add    %rbx,%rax
  417c72:	ff d0                	callq  *%rax
                }
  417c74:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417c7b:	ff ff ff 
  417c7e:	48 89 ef             	mov    %rbp,%rdi
  417c81:	be e8 00 00 00       	mov    $0xe8,%esi
  417c86:	48 01 d8             	add    %rbx,%rax
  417c89:	5b                   	pop    %rbx
  417c8a:	5d                   	pop    %rbp
  417c8b:	41 5f                	pop    %r15
  417c8d:	ff e0                	jmpq   *%rax
  417c8f:	90                   	nop

0000000000417c90 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev>:
            ~error_info_injector() throw()
  417c90:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417c97:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417c97 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev+0x7>
  417c9e:	49 ba 69 33 21 00 00 	movabs $0x213369,%r10
  417ca5:	00 00 00 
  417ca8:	4d 01 d3             	add    %r10,%r11
  417cab:	49 ba 00 cc de ff ff 	movabs $0xffffffffffdecc00,%r10
  417cb2:	ff ff ff 
  417cb5:	4d 01 da             	add    %r11,%r10
  417cb8:	41 ff e2             	jmpq   *%r10
  417cbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417cc0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>:
            ~clone_impl() throw()
  417cc0:	55                   	push   %rbp
  417cc1:	53                   	push   %rbx
  417cc2:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 417cc0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>
  417cc9:	49 bb 40 33 21 00 00 	movabs $0x213340,%r11
  417cd0:	00 00 00 
                }
  417cd3:	48 b8 b0 f5 ff ff ff 	movabs $0xfffffffffffff5b0,%rax
  417cda:	ff ff ff 
            ~clone_impl() throw()
  417cdd:	48 89 fd             	mov    %rdi,%rbp
  417ce0:	4c 01 db             	add    %r11,%rbx
  417ce3:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417ce7:	48 01 d8             	add    %rbx,%rax
  417cea:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417cf1:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  417cf8:	ff ff ff 
  417cfb:	48 01 d8             	add    %rbx,%rax
  417cfe:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417d01:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417d08:	ff ff ff 
  417d0b:	48 01 d8             	add    %rbx,%rax
  417d0e:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417d15:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417d1c:	48 85 ff             	test   %rdi,%rdi
  417d1f:	74 06                	je     417d27 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev+0x67>
  417d21:	48 8b 07             	mov    (%rdi),%rax
  417d24:	ff 50 20             	callq  *0x20(%rax)
  417d27:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417d2e:	ff ff ff 
  417d31:	48 89 ef             	mov    %rbp,%rdi
  417d34:	48 01 d8             	add    %rbx,%rax
  417d37:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417d3b:	48 83 c4 08          	add    $0x8,%rsp
  417d3f:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  417d46:	ff ff ff 
  417d49:	48 01 d8             	add    %rbx,%rax
  417d4c:	5b                   	pop    %rbx
  417d4d:	5d                   	pop    %rbp
  417d4e:	ff e0                	jmpq   *%rax

0000000000417d50 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>:
            ~clone_impl() throw()
  417d50:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417d57:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417d57 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev+0x7>
  417d5e:	49 ba a9 32 21 00 00 	movabs $0x2132a9,%r10
  417d65:	00 00 00 
  417d68:	4d 01 d3             	add    %r10,%r11
  417d6b:	49 ba c0 cc de ff ff 	movabs $0xffffffffffdeccc0,%r10
  417d72:	ff ff ff 
  417d75:	4d 01 da             	add    %r11,%r10
  417d78:	41 ff e2             	jmpq   *%r10
  417d7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417d80 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>:
  417d80:	4c 8b 17             	mov    (%rdi),%r10
  417d83:	49 03 7a d8          	add    -0x28(%r10),%rdi
  417d87:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417d87 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev+0x7>
  417d8e:	49 ba 79 32 21 00 00 	movabs $0x213279,%r10
  417d95:	00 00 00 
  417d98:	4d 01 d3             	add    %r10,%r11
  417d9b:	49 ba c0 cc de ff ff 	movabs $0xffffffffffdeccc0,%r10
  417da2:	ff ff ff 
  417da5:	4d 01 da             	add    %r11,%r10
  417da8:	41 ff e2             	jmpq   *%r10
  417dab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417db0 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev>:
            ~error_info_injector() throw()
  417db0:	41 57                	push   %r15
  417db2:	55                   	push   %rbp
  417db3:	49 bb 50 32 21 00 00 	movabs $0x213250,%r11
  417dba:	00 00 00 
  417dbd:	53                   	push   %rbx
  417dbe:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417db0 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev>
                }
  417dc5:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  417dcc:	ff ff ff 
            ~error_info_injector() throw()
  417dcf:	48 89 fd             	mov    %rdi,%rbp
  417dd2:	4c 01 db             	add    %r11,%rbx
                }
  417dd5:	48 01 d8             	add    %rbx,%rax
  417dd8:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417ddb:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417de2:	ff ff ff 
  417de5:	48 01 d8             	add    %rbx,%rax
  417de8:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417def:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417df6:	48 85 ff             	test   %rdi,%rdi
  417df9:	74 06                	je     417e01 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev+0x51>
  417dfb:	48 8b 07             	mov    (%rdi),%rax
  417dfe:	ff 50 20             	callq  *0x20(%rax)
  417e01:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417e08:	ff ff ff 
  417e0b:	48 89 ef             	mov    %rbp,%rdi
  417e0e:	48 01 d8             	add    %rbx,%rax
  417e11:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417e15:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  417e1c:	ff ff ff 
  417e1f:	48 01 d8             	add    %rbx,%rax
  417e22:	ff d0                	callq  *%rax
                }
  417e24:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417e2b:	ff ff ff 
  417e2e:	48 89 ef             	mov    %rbp,%rdi
  417e31:	be e8 00 00 00       	mov    $0xe8,%esi
  417e36:	48 01 d8             	add    %rbx,%rax
  417e39:	5b                   	pop    %rbx
  417e3a:	5d                   	pop    %rbp
  417e3b:	41 5f                	pop    %r15
  417e3d:	ff e0                	jmpq   *%rax
  417e3f:	90                   	nop

0000000000417e40 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev>:
            ~error_info_injector() throw()
  417e40:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417e47:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417e47 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev+0x7>
  417e4e:	49 ba b9 31 21 00 00 	movabs $0x2131b9,%r10
  417e55:	00 00 00 
  417e58:	4d 01 d3             	add    %r10,%r11
  417e5b:	49 ba b0 cd de ff ff 	movabs $0xffffffffffdecdb0,%r10
  417e62:	ff ff ff 
  417e65:	4d 01 da             	add    %r11,%r10
  417e68:	41 ff e2             	jmpq   *%r10
  417e6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417e70 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>:
            ~clone_impl() throw()
  417e70:	55                   	push   %rbp
  417e71:	53                   	push   %rbx
  417e72:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 417e70 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>
  417e79:	49 bb 90 31 21 00 00 	movabs $0x213190,%r11
  417e80:	00 00 00 
                }
  417e83:	48 b8 a0 f4 ff ff ff 	movabs $0xfffffffffffff4a0,%rax
  417e8a:	ff ff ff 
            ~clone_impl() throw()
  417e8d:	48 89 fd             	mov    %rdi,%rbp
  417e90:	4c 01 db             	add    %r11,%rbx
  417e93:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417e97:	48 01 d8             	add    %rbx,%rax
  417e9a:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417ea1:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  417ea8:	ff ff ff 
  417eab:	48 01 d8             	add    %rbx,%rax
  417eae:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417eb1:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417eb8:	ff ff ff 
  417ebb:	48 01 d8             	add    %rbx,%rax
  417ebe:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417ec5:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417ecc:	48 85 ff             	test   %rdi,%rdi
  417ecf:	74 06                	je     417ed7 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev+0x67>
  417ed1:	48 8b 07             	mov    (%rdi),%rax
  417ed4:	ff 50 20             	callq  *0x20(%rax)
  417ed7:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417ede:	ff ff ff 
  417ee1:	48 89 ef             	mov    %rbp,%rdi
  417ee4:	48 01 d8             	add    %rbx,%rax
  417ee7:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417eeb:	48 83 c4 08          	add    $0x8,%rsp
  417eef:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  417ef6:	ff ff ff 
  417ef9:	48 01 d8             	add    %rbx,%rax
  417efc:	5b                   	pop    %rbx
  417efd:	5d                   	pop    %rbp
  417efe:	ff e0                	jmpq   *%rax

0000000000417f00 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>:
            ~clone_impl() throw()
  417f00:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417f07:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417f07 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev+0x7>
  417f0e:	49 ba f9 30 21 00 00 	movabs $0x2130f9,%r10
  417f15:	00 00 00 
  417f18:	4d 01 d3             	add    %r10,%r11
  417f1b:	49 ba 70 ce de ff ff 	movabs $0xffffffffffdece70,%r10
  417f22:	ff ff ff 
  417f25:	4d 01 da             	add    %r11,%r10
  417f28:	41 ff e2             	jmpq   *%r10
  417f2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417f30 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>:
  417f30:	4c 8b 17             	mov    (%rdi),%r10
  417f33:	49 03 7a d8          	add    -0x28(%r10),%rdi
  417f37:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417f37 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev+0x7>
  417f3e:	49 ba c9 30 21 00 00 	movabs $0x2130c9,%r10
  417f45:	00 00 00 
  417f48:	4d 01 d3             	add    %r10,%r11
  417f4b:	49 ba 70 ce de ff ff 	movabs $0xffffffffffdece70,%r10
  417f52:	ff ff ff 
  417f55:	4d 01 da             	add    %r11,%r10
  417f58:	41 ff e2             	jmpq   *%r10
  417f5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417f60 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>:
  417f60:	41 57                	push   %r15
  417f62:	55                   	push   %rbp
  417f63:	49 bb a0 30 21 00 00 	movabs $0x2130a0,%r11
  417f6a:	00 00 00 
  417f6d:	53                   	push   %rbx
  417f6e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417f60 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>
                }
  417f75:	48 b8 a0 f4 ff ff ff 	movabs $0xfffffffffffff4a0,%rax
  417f7c:	ff ff ff 
            ~clone_impl() throw()
  417f7f:	48 89 fd             	mov    %rdi,%rbp
  417f82:	4c 01 db             	add    %r11,%rbx
                }
  417f85:	48 01 d8             	add    %rbx,%rax
  417f88:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417f8f:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  417f96:	ff ff ff 
  417f99:	48 01 d8             	add    %rbx,%rax
  417f9c:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417f9f:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417fa6:	ff ff ff 
  417fa9:	48 01 d8             	add    %rbx,%rax
  417fac:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417fb3:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417fba:	48 85 ff             	test   %rdi,%rdi
  417fbd:	74 06                	je     417fc5 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev+0x65>
  417fbf:	48 8b 07             	mov    (%rdi),%rax
  417fc2:	ff 50 20             	callq  *0x20(%rax)
  417fc5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417fcc:	ff ff ff 
  417fcf:	48 89 ef             	mov    %rbp,%rdi
  417fd2:	48 01 d8             	add    %rbx,%rax
  417fd5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417fd9:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  417fe0:	ff ff ff 
  417fe3:	48 01 d8             	add    %rbx,%rax
  417fe6:	ff d0                	callq  *%rax
                }
  417fe8:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417fef:	ff ff ff 
  417ff2:	48 89 ef             	mov    %rbp,%rdi
  417ff5:	be f0 00 00 00       	mov    $0xf0,%esi
  417ffa:	48 01 d8             	add    %rbx,%rax
  417ffd:	5b                   	pop    %rbx
  417ffe:	5d                   	pop    %rbp
  417fff:	41 5f                	pop    %r15
  418001:	ff e0                	jmpq   *%rax
  418003:	0f 1f 00             	nopl   (%rax)
  418006:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41800d:	00 00 00 

0000000000418010 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>:
            ~clone_impl() throw()
  418010:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  418017:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 418017 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev+0x7>
  41801e:	49 ba e9 2f 21 00 00 	movabs $0x212fe9,%r10
  418025:	00 00 00 
  418028:	4d 01 d3             	add    %r10,%r11
  41802b:	49 ba 60 cf de ff ff 	movabs $0xffffffffffdecf60,%r10
  418032:	ff ff ff 
  418035:	4d 01 da             	add    %r11,%r10
  418038:	41 ff e2             	jmpq   *%r10
  41803b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000418040 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>:
  418040:	4c 8b 17             	mov    (%rdi),%r10
  418043:	49 03 7a d8          	add    -0x28(%r10),%rdi
  418047:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 418047 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev+0x7>
  41804e:	49 ba b9 2f 21 00 00 	movabs $0x212fb9,%r10
  418055:	00 00 00 
  418058:	4d 01 d3             	add    %r10,%r11
  41805b:	49 ba 60 cf de ff ff 	movabs $0xffffffffffdecf60,%r10
  418062:	ff ff ff 
  418065:	4d 01 da             	add    %r11,%r10
  418068:	41 ff e2             	jmpq   *%r10
  41806b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000418070 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>:
  418070:	41 57                	push   %r15
  418072:	55                   	push   %rbp
  418073:	49 bb 90 2f 21 00 00 	movabs $0x212f90,%r11
  41807a:	00 00 00 
  41807d:	53                   	push   %rbx
  41807e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 418070 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>
                }
  418085:	48 b8 b0 f5 ff ff ff 	movabs $0xfffffffffffff5b0,%rax
  41808c:	ff ff ff 
            ~clone_impl() throw()
  41808f:	48 89 fd             	mov    %rdi,%rbp
  418092:	4c 01 db             	add    %r11,%rbx
                }
  418095:	48 01 d8             	add    %rbx,%rax
  418098:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  41809f:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  4180a6:	ff ff ff 
  4180a9:	48 01 d8             	add    %rbx,%rax
  4180ac:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  4180af:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  4180b6:	ff ff ff 
  4180b9:	48 01 d8             	add    %rbx,%rax
  4180bc:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  4180c3:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  4180ca:	48 85 ff             	test   %rdi,%rdi
  4180cd:	74 06                	je     4180d5 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev+0x65>
  4180cf:	48 8b 07             	mov    (%rdi),%rax
  4180d2:	ff 50 20             	callq  *0x20(%rax)
  4180d5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4180dc:	ff ff ff 
  4180df:	48 89 ef             	mov    %rbp,%rdi
  4180e2:	48 01 d8             	add    %rbx,%rax
  4180e5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4180e9:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  4180f0:	ff ff ff 
  4180f3:	48 01 d8             	add    %rbx,%rax
  4180f6:	ff d0                	callq  *%rax
                }
  4180f8:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4180ff:	ff ff ff 
  418102:	48 89 ef             	mov    %rbp,%rdi
  418105:	be f0 00 00 00       	mov    $0xf0,%esi
  41810a:	48 01 d8             	add    %rbx,%rax
  41810d:	5b                   	pop    %rbx
  41810e:	5d                   	pop    %rbp
  41810f:	41 5f                	pop    %r15
  418111:	ff e0                	jmpq   *%rax
  418113:	0f 1f 00             	nopl   (%rax)
  418116:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41811d:	00 00 00 

0000000000418120 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>:
            ~clone_impl() throw()
  418120:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  418127:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 418127 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev+0x7>
  41812e:	49 ba d9 2e 21 00 00 	movabs $0x212ed9,%r10
  418135:	00 00 00 
  418138:	4d 01 d3             	add    %r10,%r11
  41813b:	49 ba 70 d0 de ff ff 	movabs $0xffffffffffded070,%r10
  418142:	ff ff ff 
  418145:	4d 01 da             	add    %r11,%r10
  418148:	41 ff e2             	jmpq   *%r10
  41814b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000418150 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>:
  418150:	4c 8b 17             	mov    (%rdi),%r10
  418153:	49 03 7a d8          	add    -0x28(%r10),%rdi
  418157:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 418157 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev+0x7>
  41815e:	49 ba a9 2e 21 00 00 	movabs $0x212ea9,%r10
  418165:	00 00 00 
  418168:	4d 01 d3             	add    %r10,%r11
  41816b:	49 ba 70 d0 de ff ff 	movabs $0xffffffffffded070,%r10
  418172:	ff ff ff 
  418175:	4d 01 da             	add    %r11,%r10
  418178:	41 ff e2             	jmpq   *%r10
  41817b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000418180 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  418180:	41 57                	push   %r15
  418182:	41 56                	push   %r14
  418184:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 418180 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
  41818b:	41 55                	push   %r13
  41818d:	41 54                	push   %r12
  41818f:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  418196:	ff ff ff 
  418199:	55                   	push   %rbp
  41819a:	53                   	push   %rbx
  41819b:	49 bb 80 2e 21 00 00 	movabs $0x212e80,%r11
  4181a2:	00 00 00 
  4181a5:	4d 01 df             	add    %r11,%r15
  4181a8:	48 83 ec 68          	sub    $0x68,%rsp
      while (__x != 0)
  4181ac:	48 85 f6             	test   %rsi,%rsi
  4181af:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  4181b4:	48 b8 80 d1 de ff ff 	movabs $0xffffffffffded180,%rax
  4181bb:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  4181be:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
	  _M_erase(_S_right(__x));
  4181c3:	4e 8d 34 38          	lea    (%rax,%r15,1),%r14
      while (__x != 0)
  4181c7:	0f 84 12 03 00 00    	je     4184df <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x35f>
  4181cd:	4c 89 f0             	mov    %r14,%rax
  4181d0:	49 89 fe             	mov    %rdi,%r14
  4181d3:	49 89 c5             	mov    %rax,%r13
  4181d6:	48 89 f0             	mov    %rsi,%rax
  4181d9:	48 8b 40 18          	mov    0x18(%rax),%rax
  4181dd:	48 85 c0             	test   %rax,%rax
  4181e0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  4181e5:	0f 84 b7 02 00 00    	je     4184a2 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x322>
  4181eb:	48 8b 40 18          	mov    0x18(%rax),%rax
  4181ef:	48 85 c0             	test   %rax,%rax
  4181f2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  4181f7:	0f 84 68 02 00 00    	je     418465 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2e5>
  4181fd:	48 8b 40 18          	mov    0x18(%rax),%rax
  418201:	48 85 c0             	test   %rax,%rax
  418204:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  418209:	0f 84 19 02 00 00    	je     418428 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2a8>
  41820f:	48 8b 40 18          	mov    0x18(%rax),%rax
  418213:	48 85 c0             	test   %rax,%rax
  418216:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  41821b:	0f 84 ca 01 00 00    	je     4183eb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x26b>
  418221:	48 8b 40 18          	mov    0x18(%rax),%rax
  418225:	48 85 c0             	test   %rax,%rax
  418228:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  41822d:	0f 84 7b 01 00 00    	je     4183ae <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x22e>
  418233:	48 8b 40 18          	mov    0x18(%rax),%rax
  418237:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  41823c:	48 85 c0             	test   %rax,%rax
  41823f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  418244:	4a 8d 2c 39          	lea    (%rcx,%r15,1),%rbp
  418248:	0f 84 23 01 00 00    	je     418371 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1f1>
  41824e:	48 8b 40 18          	mov    0x18(%rax),%rax
  418252:	48 89 c1             	mov    %rax,%rcx
  418255:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41825a:	48 b8 80 81 de ff ff 	movabs $0xffffffffffde8180,%rax
  418261:	ff ff ff 
  418264:	4c 01 f8             	add    %r15,%rax
  418267:	48 85 c9             	test   %rcx,%rcx
  41826a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41826f:	0f 84 c5 00 00 00    	je     41833a <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1ba>
  418275:	0f 1f 00             	nopl   (%rax)
  418278:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41827d:	4c 8b 60 18          	mov    0x18(%rax),%r12
  418281:	4d 85 e4             	test   %r12,%r12
  418284:	75 17                	jne    41829d <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x11d>
  418286:	e9 82 00 00 00       	jmpq   41830d <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x18d>
  41828b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  418290:	4c 89 e7             	mov    %r12,%rdi
  418293:	49 89 dc             	mov    %rbx,%r12
  418296:	ff d5                	callq  *%rbp
  418298:	48 85 db             	test   %rbx,%rbx
  41829b:	74 6b                	je     418308 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x188>
	  _M_erase(_S_right(__x));
  41829d:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
  4182a2:	4c 89 f7             	mov    %r14,%rdi
  4182a5:	41 ff d5             	callq  *%r13
  4182a8:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  4182ad:	49 8b 5c 24 10       	mov    0x10(%r12),%rbx
  4182b2:	48 85 c0             	test   %rax,%rax
  4182b5:	74 d9                	je     418290 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
        if( atomic_decrement( &use_count_ ) == 1 )
  4182b7:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  4182bc:	75 d2                	jne    418290 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
            dispose();
  4182be:	48 8b 10             	mov    (%rax),%rdx
  4182c1:	48 89 c7             	mov    %rax,%rdi
  4182c4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4182c9:	ff 52 10             	callq  *0x10(%rdx)
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_sub(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }
  4182cc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4182d1:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  4182d6:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4182db:	83 fa 01             	cmp    $0x1,%edx
  4182de:	75 b0                	jne    418290 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
            destroy();
  4182e0:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  4182e3:	48 89 c7             	mov    %rax,%rdi
            destroy();
  4182e6:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  4182ea:	48 3b 4c 24 18       	cmp    0x18(%rsp),%rcx
  4182ef:	0f 85 3a 02 00 00    	jne    41852f <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3af>
        delete this;
  4182f5:	ff 52 08             	callq  *0x8(%rdx)
  4182f8:	4c 89 e7             	mov    %r12,%rdi
  4182fb:	49 89 dc             	mov    %rbx,%r12
  4182fe:	ff d5                	callq  *%rbp
      while (__x != 0)
  418300:	48 85 db             	test   %rbx,%rbx
  418303:	75 98                	jne    41829d <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x11d>
  418305:	0f 1f 00             	nopl   (%rax)
  418308:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41830d:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418311:	48 8b 40 28          	mov    0x28(%rax),%rax
  418315:	48 85 c0             	test   %rax,%rax
  418318:	74 0b                	je     418325 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
        if( atomic_decrement( &use_count_ ) == 1 )
  41831a:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  41831f:	0f 84 cb 01 00 00    	je     4184f0 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x370>
  418325:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41832a:	ff d5                	callq  *%rbp
  41832c:	48 85 db             	test   %rbx,%rbx
  41832f:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  418334:	0f 85 3e ff ff ff    	jne    418278 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xf8>
  41833a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41833f:	4c 8b 60 28          	mov    0x28(%rax),%r12
  418343:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418347:	4d 85 e4             	test   %r12,%r12
  41834a:	74 0d                	je     418359 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
  41834c:	f0 41 83 6c 24 08 01 	lock subl $0x1,0x8(%r12)
  418353:	0f 84 dd 01 00 00    	je     418536 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3b6>
  418359:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41835e:	ff d5                	callq  *%rbp
  418360:	48 85 db             	test   %rbx,%rbx
  418363:	48 89 d8             	mov    %rbx,%rax
  418366:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  41836b:	0f 85 dd fe ff ff    	jne    41824e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xce>
  418371:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  418376:	48 8b 58 28          	mov    0x28(%rax),%rbx
  41837a:	48 8b 68 10          	mov    0x10(%rax),%rbp
  41837e:	48 85 db             	test   %rbx,%rbx
  418381:	74 0b                	je     41838e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
  418383:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  418388:	0f 84 eb 01 00 00    	je     418579 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3f9>
  41838e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  418393:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  418398:	4c 01 f8             	add    %r15,%rax
  41839b:	ff d0                	callq  *%rax
  41839d:	48 85 ed             	test   %rbp,%rbp
  4183a0:	48 89 e8             	mov    %rbp,%rax
  4183a3:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
  4183a8:	0f 85 85 fe ff ff    	jne    418233 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xb3>
  4183ae:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  4183b3:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4183b7:	48 8b 68 10          	mov    0x10(%rax),%rbp
  4183bb:	48 85 db             	test   %rbx,%rbx
  4183be:	74 0b                	je     4183cb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
  4183c0:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  4183c5:	0f 84 f4 01 00 00    	je     4185bf <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x43f>
  4183cb:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4183d0:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  4183d5:	4c 01 f8             	add    %r15,%rax
  4183d8:	ff d0                	callq  *%rax
  4183da:	48 85 ed             	test   %rbp,%rbp
  4183dd:	48 89 e8             	mov    %rbp,%rax
  4183e0:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  4183e5:	0f 85 36 fe ff ff    	jne    418221 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa1>
  4183eb:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  4183f0:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4183f4:	48 8b 68 10          	mov    0x10(%rax),%rbp
  4183f8:	48 85 db             	test   %rbx,%rbx
  4183fb:	74 0b                	je     418408 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
  4183fd:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  418402:	0f 84 7b 02 00 00    	je     418683 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x503>
  418408:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41840d:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  418412:	4c 01 f8             	add    %r15,%rax
  418415:	ff d0                	callq  *%rax
  418417:	48 85 ed             	test   %rbp,%rbp
  41841a:	48 89 e8             	mov    %rbp,%rax
  41841d:	48 89 6c 24 48       	mov    %rbp,0x48(%rsp)
  418422:	0f 85 e7 fd ff ff    	jne    41820f <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x8f>
  418428:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  41842d:	48 8b 58 28          	mov    0x28(%rax),%rbx
  418431:	48 8b 68 10          	mov    0x10(%rax),%rbp
  418435:	48 85 db             	test   %rbx,%rbx
  418438:	74 0b                	je     418445 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
  41843a:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  41843f:	0f 84 76 02 00 00    	je     4186bb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x53b>
  418445:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41844a:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41844f:	4c 01 f8             	add    %r15,%rax
  418452:	ff d0                	callq  *%rax
  418454:	48 85 ed             	test   %rbp,%rbp
  418457:	48 89 e8             	mov    %rbp,%rax
  41845a:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  41845f:	0f 85 98 fd ff ff    	jne    4181fd <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x7d>
  418465:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41846a:	48 8b 58 28          	mov    0x28(%rax),%rbx
  41846e:	48 8b 68 10          	mov    0x10(%rax),%rbp
  418472:	48 85 db             	test   %rbx,%rbx
  418475:	74 0b                	je     418482 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
  418477:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  41847c:	0f 84 83 01 00 00    	je     418605 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x485>
  418482:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  418487:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41848c:	4c 01 f8             	add    %r15,%rax
  41848f:	ff d0                	callq  *%rax
  418491:	48 85 ed             	test   %rbp,%rbp
  418494:	48 89 e8             	mov    %rbp,%rax
  418497:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
  41849c:	0f 85 49 fd ff ff    	jne    4181eb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x6b>
  4184a2:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  4184a7:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4184ab:	48 8b 68 10          	mov    0x10(%rax),%rbp
  4184af:	48 85 db             	test   %rbx,%rbx
  4184b2:	74 0b                	je     4184bf <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
  4184b4:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  4184b9:	0f 84 7e 01 00 00    	je     41863d <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x4bd>
  4184bf:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4184c4:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  4184c9:	4c 01 f8             	add    %r15,%rax
  4184cc:	ff d0                	callq  *%rax
  4184ce:	48 85 ed             	test   %rbp,%rbp
  4184d1:	48 89 e8             	mov    %rbp,%rax
  4184d4:	48 89 6c 24 58       	mov    %rbp,0x58(%rsp)
  4184d9:	0f 85 fa fc ff ff    	jne    4181d9 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x59>
    }
  4184df:	48 83 c4 68          	add    $0x68,%rsp
  4184e3:	5b                   	pop    %rbx
  4184e4:	5d                   	pop    %rbp
  4184e5:	41 5c                	pop    %r12
  4184e7:	41 5d                	pop    %r13
  4184e9:	41 5e                	pop    %r14
  4184eb:	41 5f                	pop    %r15
  4184ed:	c3                   	retq   
  4184ee:	66 90                	xchg   %ax,%ax
            dispose();
  4184f0:	48 8b 10             	mov    (%rax),%rdx
  4184f3:	48 89 c7             	mov    %rax,%rdi
  4184f6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4184fb:	ff 52 10             	callq  *0x10(%rdx)
  4184fe:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  418503:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  418508:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41850d:	83 fa 01             	cmp    $0x1,%edx
  418510:	0f 85 0f fe ff ff    	jne    418325 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
            destroy();
  418516:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  418519:	48 89 c7             	mov    %rax,%rdi
            destroy();
  41851c:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  418520:	48 3b 4c 24 18       	cmp    0x18(%rsp),%rcx
  418525:	75 4b                	jne    418572 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3f2>
        delete this;
  418527:	ff 52 08             	callq  *0x8(%rdx)
  41852a:	e9 f6 fd ff ff       	jmpq   418325 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
            destroy();
  41852f:	ff d1                	callq  *%rcx
  418531:	e9 5a fd ff ff       	jmpq   418290 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
            dispose();
  418536:	49 8b 04 24          	mov    (%r12),%rax
  41853a:	4c 89 e7             	mov    %r12,%rdi
  41853d:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418540:	f0 41 83 6c 24 0c 01 	lock subl $0x1,0xc(%r12)
  418547:	0f 85 0c fe ff ff    	jne    418359 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
            destroy();
  41854d:	49 8b 14 24          	mov    (%r12),%rdx
  418551:	48 b9 80 81 de ff ff 	movabs $0xffffffffffde8180,%rcx
  418558:	ff ff ff 
        delete this;
  41855b:	4c 89 e7             	mov    %r12,%rdi
  41855e:	4c 01 f9             	add    %r15,%rcx
            destroy();
  418561:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418565:	48 39 c8             	cmp    %rcx,%rax
  418568:	75 4e                	jne    4185b8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x438>
        delete this;
  41856a:	ff 52 08             	callq  *0x8(%rdx)
  41856d:	e9 e7 fd ff ff       	jmpq   418359 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
            destroy();
  418572:	ff d1                	callq  *%rcx
  418574:	e9 ac fd ff ff       	jmpq   418325 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
            dispose();
  418579:	48 8b 03             	mov    (%rbx),%rax
  41857c:	48 89 df             	mov    %rbx,%rdi
  41857f:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418582:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  418587:	0f 85 01 fe ff ff    	jne    41838e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
            destroy();
  41858d:	48 8b 13             	mov    (%rbx),%rdx
  418590:	48 b9 80 81 de ff ff 	movabs $0xffffffffffde8180,%rcx
  418597:	ff ff ff 
        delete this;
  41859a:	48 89 df             	mov    %rbx,%rdi
  41859d:	4c 01 f9             	add    %r15,%rcx
            destroy();
  4185a0:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4185a4:	48 39 c8             	cmp    %rcx,%rax
  4185a7:	75 4e                	jne    4185f7 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x477>
        delete this;
  4185a9:	ff 52 08             	callq  *0x8(%rdx)
  4185ac:	e9 dd fd ff ff       	jmpq   41838e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
  4185b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            destroy();
  4185b8:	ff d0                	callq  *%rax
  4185ba:	e9 9a fd ff ff       	jmpq   418359 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
            dispose();
  4185bf:	48 8b 03             	mov    (%rbx),%rax
  4185c2:	48 89 df             	mov    %rbx,%rdi
  4185c5:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4185c8:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  4185cd:	0f 85 f8 fd ff ff    	jne    4183cb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
            destroy();
  4185d3:	48 8b 13             	mov    (%rbx),%rdx
  4185d6:	48 b9 80 81 de ff ff 	movabs $0xffffffffffde8180,%rcx
  4185dd:	ff ff ff 
        delete this;
  4185e0:	48 89 df             	mov    %rbx,%rdi
  4185e3:	4c 01 f9             	add    %r15,%rcx
            destroy();
  4185e6:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4185ea:	48 39 c8             	cmp    %rcx,%rax
  4185ed:	75 0f                	jne    4185fe <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x47e>
        delete this;
  4185ef:	ff 52 08             	callq  *0x8(%rdx)
  4185f2:	e9 d4 fd ff ff       	jmpq   4183cb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
            destroy();
  4185f7:	ff d0                	callq  *%rax
  4185f9:	e9 90 fd ff ff       	jmpq   41838e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
  4185fe:	ff d0                	callq  *%rax
  418600:	e9 c6 fd ff ff       	jmpq   4183cb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
            dispose();
  418605:	48 8b 03             	mov    (%rbx),%rax
  418608:	48 89 df             	mov    %rbx,%rdi
  41860b:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41860e:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  418613:	0f 85 69 fe ff ff    	jne    418482 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
            destroy();
  418619:	48 8b 13             	mov    (%rbx),%rdx
  41861c:	48 b9 80 81 de ff ff 	movabs $0xffffffffffde8180,%rcx
  418623:	ff ff ff 
        delete this;
  418626:	48 89 df             	mov    %rbx,%rdi
  418629:	4c 01 f9             	add    %r15,%rcx
            destroy();
  41862c:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418630:	48 39 c8             	cmp    %rcx,%rax
  418633:	75 40                	jne    418675 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x4f5>
        delete this;
  418635:	ff 52 08             	callq  *0x8(%rdx)
  418638:	e9 45 fe ff ff       	jmpq   418482 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
            dispose();
  41863d:	48 8b 03             	mov    (%rbx),%rax
  418640:	48 89 df             	mov    %rbx,%rdi
  418643:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418646:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  41864b:	0f 85 6e fe ff ff    	jne    4184bf <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
            destroy();
  418651:	48 8b 13             	mov    (%rbx),%rdx
  418654:	48 b9 80 81 de ff ff 	movabs $0xffffffffffde8180,%rcx
  41865b:	ff ff ff 
        delete this;
  41865e:	48 89 df             	mov    %rbx,%rdi
  418661:	4c 01 f9             	add    %r15,%rcx
            destroy();
  418664:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418668:	48 39 c8             	cmp    %rcx,%rax
  41866b:	75 0f                	jne    41867c <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x4fc>
        delete this;
  41866d:	ff 52 08             	callq  *0x8(%rdx)
  418670:	e9 4a fe ff ff       	jmpq   4184bf <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
            destroy();
  418675:	ff d0                	callq  *%rax
  418677:	e9 06 fe ff ff       	jmpq   418482 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
  41867c:	ff d0                	callq  *%rax
  41867e:	e9 3c fe ff ff       	jmpq   4184bf <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
            dispose();
  418683:	48 8b 03             	mov    (%rbx),%rax
  418686:	48 89 df             	mov    %rbx,%rdi
  418689:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41868c:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  418691:	0f 85 71 fd ff ff    	jne    418408 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
            destroy();
  418697:	48 8b 13             	mov    (%rbx),%rdx
  41869a:	48 b9 80 81 de ff ff 	movabs $0xffffffffffde8180,%rcx
  4186a1:	ff ff ff 
        delete this;
  4186a4:	48 89 df             	mov    %rbx,%rdi
  4186a7:	4c 01 f9             	add    %r15,%rcx
            destroy();
  4186aa:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4186ae:	48 39 c8             	cmp    %rcx,%rax
  4186b1:	75 40                	jne    4186f3 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x573>
        delete this;
  4186b3:	ff 52 08             	callq  *0x8(%rdx)
  4186b6:	e9 4d fd ff ff       	jmpq   418408 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
            dispose();
  4186bb:	48 8b 03             	mov    (%rbx),%rax
  4186be:	48 89 df             	mov    %rbx,%rdi
  4186c1:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4186c4:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  4186c9:	0f 85 76 fd ff ff    	jne    418445 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
            destroy();
  4186cf:	48 8b 13             	mov    (%rbx),%rdx
  4186d2:	48 b9 80 81 de ff ff 	movabs $0xffffffffffde8180,%rcx
  4186d9:	ff ff ff 
        delete this;
  4186dc:	48 89 df             	mov    %rbx,%rdi
  4186df:	4c 01 f9             	add    %r15,%rcx
            destroy();
  4186e2:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4186e6:	48 39 c8             	cmp    %rcx,%rax
  4186e9:	75 0f                	jne    4186fa <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x57a>
        delete this;
  4186eb:	ff 52 08             	callq  *0x8(%rdx)
  4186ee:	e9 52 fd ff ff       	jmpq   418445 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
            destroy();
  4186f3:	ff d0                	callq  *%rax
  4186f5:	e9 0e fd ff ff       	jmpq   418408 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
  4186fa:	ff d0                	callq  *%rax
  4186fc:	e9 44 fd ff ff       	jmpq   418445 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
  418701:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418708:	00 00 00 
  41870b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000418710 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv>:
    virtual void dispose() // nothrow
  418710:	41 57                	push   %r15
  418712:	41 56                	push   %r14
  418714:	49 bb f0 28 21 00 00 	movabs $0x2128f0,%r11
  41871b:	00 00 00 
  41871e:	41 55                	push   %r13
  418720:	41 54                	push   %r12
  418722:	55                   	push   %rbp
  418723:	53                   	push   %rbx
  418724:	48 8d 2d e5 ff ff ff 	lea    -0x1b(%rip),%rbp        # 418710 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv>
  41872b:	48 83 ec 18          	sub    $0x18,%rsp
        boost::checked_delete( px_ );
  41872f:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  418733:	4c 01 dd             	add    %r11,%rbp
  418736:	4d 85 e4             	test   %r12,%r12
  418739:	0f 84 d1 00 00 00    	je     418810 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x100>
  41873f:	4d 8b 7c 24 10       	mov    0x10(%r12),%r15
      while (__x != 0)
  418744:	4d 85 ff             	test   %r15,%r15
  418747:	0f 84 9b 00 00 00    	je     4187e8 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0xd8>
	  _M_erase(_S_right(__x));
  41874d:	48 b8 80 d1 de ff ff 	movabs $0xffffffffffded180,%rax
  418754:	ff ff ff 
  418757:	49 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r13
  41875e:	ff ff ff 
  418761:	4c 8d 34 28          	lea    (%rax,%rbp,1),%r14
  418765:	48 b8 80 81 de ff ff 	movabs $0xffffffffffde8180,%rax
  41876c:	ff ff ff 
  41876f:	49 01 ed             	add    %rbp,%r13
  418772:	48 01 e8             	add    %rbp,%rax
  418775:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41877a:	eb 15                	jmp    418791 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x81>
  41877c:	0f 1f 40 00          	nopl   0x0(%rax)
  418780:	4c 89 ff             	mov    %r15,%rdi
  418783:	49 89 ef             	mov    %rbp,%r15
  418786:	41 ff d5             	callq  *%r13
      while (__x != 0)
  418789:	48 85 db             	test   %rbx,%rbx
  41878c:	49 89 df             	mov    %rbx,%r15
  41878f:	74 57                	je     4187e8 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0xd8>
	  _M_erase(_S_right(__x));
  418791:	49 8b 77 18          	mov    0x18(%r15),%rsi
  418795:	4c 89 e7             	mov    %r12,%rdi
  418798:	41 ff d6             	callq  *%r14
  41879b:	49 8b 47 28          	mov    0x28(%r15),%rax
  41879f:	49 8b 5f 10          	mov    0x10(%r15),%rbx
  4187a3:	48 85 c0             	test   %rax,%rax
  4187a6:	74 d8                	je     418780 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
        if( atomic_decrement( &use_count_ ) == 1 )
  4187a8:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  4187ad:	75 d1                	jne    418780 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
            dispose();
  4187af:	48 8b 10             	mov    (%rax),%rdx
  4187b2:	48 89 c7             	mov    %rax,%rdi
  4187b5:	48 89 04 24          	mov    %rax,(%rsp)
  4187b9:	ff 52 10             	callq  *0x10(%rdx)
  4187bc:	48 8b 04 24          	mov    (%rsp),%rax
  4187c0:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  4187c5:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4187ca:	83 fa 01             	cmp    $0x1,%edx
  4187cd:	75 b1                	jne    418780 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
            destroy();
  4187cf:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  4187d2:	48 89 c7             	mov    %rax,%rdi
            destroy();
  4187d5:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  4187d9:	48 3b 4c 24 08       	cmp    0x8(%rsp),%rcx
  4187de:	75 3f                	jne    41881f <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x10f>
        delete this;
  4187e0:	ff 52 08             	callq  *0x8(%rdx)
  4187e3:	eb 9b                	jmp    418780 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
  4187e5:	0f 1f 00             	nopl   (%rax)
    }
  4187e8:	48 83 c4 18          	add    $0x18,%rsp
  4187ec:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4187f3:	ff ff ff 
  4187f6:	4c 89 e7             	mov    %r12,%rdi
  4187f9:	5b                   	pop    %rbx
  4187fa:	48 01 e8             	add    %rbp,%rax
  4187fd:	be 30 00 00 00       	mov    $0x30,%esi
  418802:	5d                   	pop    %rbp
  418803:	41 5c                	pop    %r12
  418805:	41 5d                	pop    %r13
  418807:	41 5e                	pop    %r14
  418809:	41 5f                	pop    %r15
  41880b:	ff e0                	jmpq   *%rax
  41880d:	0f 1f 00             	nopl   (%rax)
  418810:	48 83 c4 18          	add    $0x18,%rsp
  418814:	5b                   	pop    %rbx
  418815:	5d                   	pop    %rbp
  418816:	41 5c                	pop    %r12
  418818:	41 5d                	pop    %r13
  41881a:	41 5e                	pop    %r14
  41881c:	41 5f                	pop    %r15
  41881e:	c3                   	retq   
            destroy();
  41881f:	ff d1                	callq  *%rcx
  418821:	e9 5a ff ff ff       	jmpq   418780 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
  418826:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41882d:	00 00 00 

0000000000418830 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  418830:	41 57                	push   %r15
  418832:	41 56                	push   %r14
  418834:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 418830 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
  41883b:	41 55                	push   %r13
  41883d:	41 54                	push   %r12
  41883f:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  418846:	ff ff ff 
  418849:	55                   	push   %rbp
  41884a:	53                   	push   %rbx
  41884b:	49 bb d0 27 21 00 00 	movabs $0x2127d0,%r11
  418852:	00 00 00 
  418855:	4d 01 df             	add    %r11,%r15
  418858:	48 83 ec 58          	sub    $0x58,%rsp
      while (__x != 0)
  41885c:	48 85 f6             	test   %rsi,%rsi
  41885f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  418864:	48 b8 30 d8 de ff ff 	movabs $0xffffffffffded830,%rax
  41886b:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41886e:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
	  _M_erase(_S_right(__x));
  418873:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
      while (__x != 0)
  418877:	0f 84 d3 01 00 00    	je     418a50 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x220>
  41887d:	49 89 fd             	mov    %rdi,%r13
  418880:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  418885:	48 8b 40 18          	mov    0x18(%rax),%rax
  418889:	48 85 c0             	test   %rax,%rax
  41888c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  418891:	0f 84 95 01 00 00    	je     418a2c <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1fc>
  418897:	48 8b 40 18          	mov    0x18(%rax),%rax
  41889b:	48 85 c0             	test   %rax,%rax
  41889e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  4188a3:	0f 84 5c 01 00 00    	je     418a05 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1d5>
  4188a9:	48 8b 40 18          	mov    0x18(%rax),%rax
  4188ad:	48 85 c0             	test   %rax,%rax
  4188b0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  4188b5:	0f 84 23 01 00 00    	je     4189de <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1ae>
  4188bb:	48 8b 40 18          	mov    0x18(%rax),%rax
  4188bf:	48 85 c0             	test   %rax,%rax
  4188c2:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  4188c7:	0f 84 ea 00 00 00    	je     4189b7 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x187>
  4188cd:	48 8b 40 18          	mov    0x18(%rax),%rax
  4188d1:	48 85 c0             	test   %rax,%rax
  4188d4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4188d9:	0f 84 b1 00 00 00    	je     418990 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x160>
  4188df:	48 8b 40 18          	mov    0x18(%rax),%rax
  4188e3:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  4188e8:	48 85 c0             	test   %rax,%rax
  4188eb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4188f0:	4a 8d 2c 3a          	lea    (%rdx,%r15,1),%rbp
  4188f4:	74 73                	je     418969 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x139>
  4188f6:	48 8b 40 18          	mov    0x18(%rax),%rax
  4188fa:	48 85 c0             	test   %rax,%rax
  4188fd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  418902:	74 4a                	je     41894e <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x11e>
  418904:	0f 1f 40 00          	nopl   0x0(%rax)
  418908:	4c 8b 70 18          	mov    0x18(%rax),%r14
  41890c:	4d 85 f6             	test   %r14,%r14
  41890f:	74 27                	je     418938 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x108>
  418911:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  418918:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41891c:	4c 89 ef             	mov    %r13,%rdi
  41891f:	41 ff d4             	callq  *%r12
  418922:	49 8b 5e 10          	mov    0x10(%r14),%rbx
  418926:	4c 89 f7             	mov    %r14,%rdi
  418929:	ff d5                	callq  *%rbp
      while (__x != 0)
  41892b:	48 85 db             	test   %rbx,%rbx
  41892e:	49 89 de             	mov    %rbx,%r14
  418931:	75 e5                	jne    418918 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xe8>
  418933:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  418938:	48 8b 58 10          	mov    0x10(%rax),%rbx
  41893c:	48 89 c7             	mov    %rax,%rdi
  41893f:	ff d5                	callq  *%rbp
  418941:	48 85 db             	test   %rbx,%rbx
  418944:	48 89 d8             	mov    %rbx,%rax
  418947:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  41894c:	75 ba                	jne    418908 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xd8>
  41894e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  418953:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418957:	48 89 c7             	mov    %rax,%rdi
  41895a:	ff d5                	callq  *%rbp
  41895c:	48 85 db             	test   %rbx,%rbx
  41895f:	48 89 d8             	mov    %rbx,%rax
  418962:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  418967:	75 8d                	jne    4188f6 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xc6>
  418969:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41896e:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418972:	48 89 c7             	mov    %rax,%rdi
  418975:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41897a:	4c 01 f8             	add    %r15,%rax
  41897d:	ff d0                	callq  *%rax
  41897f:	48 85 db             	test   %rbx,%rbx
  418982:	48 89 d8             	mov    %rbx,%rax
  418985:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  41898a:	0f 85 4f ff ff ff    	jne    4188df <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xaf>
  418990:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  418995:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418999:	48 89 c7             	mov    %rax,%rdi
  41899c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4189a1:	4c 01 f8             	add    %r15,%rax
  4189a4:	ff d0                	callq  *%rax
  4189a6:	48 85 db             	test   %rbx,%rbx
  4189a9:	48 89 d8             	mov    %rbx,%rax
  4189ac:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  4189b1:	0f 85 16 ff ff ff    	jne    4188cd <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x9d>
  4189b7:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4189bc:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4189c0:	48 89 c7             	mov    %rax,%rdi
  4189c3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4189c8:	4c 01 f8             	add    %r15,%rax
  4189cb:	ff d0                	callq  *%rax
  4189cd:	48 85 db             	test   %rbx,%rbx
  4189d0:	48 89 d8             	mov    %rbx,%rax
  4189d3:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  4189d8:	0f 85 dd fe ff ff    	jne    4188bb <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x8b>
  4189de:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4189e3:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4189e7:	48 89 c7             	mov    %rax,%rdi
  4189ea:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4189ef:	4c 01 f8             	add    %r15,%rax
  4189f2:	ff d0                	callq  *%rax
  4189f4:	48 85 db             	test   %rbx,%rbx
  4189f7:	48 89 d8             	mov    %rbx,%rax
  4189fa:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  4189ff:	0f 85 a4 fe ff ff    	jne    4188a9 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x79>
  418a05:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  418a0a:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418a0e:	48 89 c7             	mov    %rax,%rdi
  418a11:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  418a16:	4c 01 f8             	add    %r15,%rax
  418a19:	ff d0                	callq  *%rax
  418a1b:	48 85 db             	test   %rbx,%rbx
  418a1e:	48 89 d8             	mov    %rbx,%rax
  418a21:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  418a26:	0f 85 6b fe ff ff    	jne    418897 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x67>
  418a2c:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  418a31:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418a35:	48 89 c7             	mov    %rax,%rdi
  418a38:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  418a3d:	4c 01 f8             	add    %r15,%rax
  418a40:	ff d0                	callq  *%rax
  418a42:	48 85 db             	test   %rbx,%rbx
  418a45:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  418a4a:	0f 85 30 fe ff ff    	jne    418880 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x50>
    }
  418a50:	48 83 c4 58          	add    $0x58,%rsp
  418a54:	5b                   	pop    %rbx
  418a55:	5d                   	pop    %rbp
  418a56:	41 5c                	pop    %r12
  418a58:	41 5d                	pop    %r13
  418a5a:	41 5e                	pop    %r14
  418a5c:	41 5f                	pop    %r15
  418a5e:	c3                   	retq   
  418a5f:	90                   	nop

0000000000418a60 <_ZN4YAML6detail4node12mark_definedEv>:

  template <typename T>
  bool equals(const T& rhs, shared_memory_holder pMemory);
  bool equals(const char* rhs, shared_memory_holder pMemory);

  void mark_defined() {
  418a60:	41 57                	push   %r15
  418a62:	41 56                	push   %r14
  418a64:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 418a60 <_ZN4YAML6detail4node12mark_definedEv>
  418a6b:	41 55                	push   %r13
  418a6d:	41 54                	push   %r12
  418a6f:	49 bb a0 25 21 00 00 	movabs $0x2125a0,%r11
  418a76:	00 00 00 
  418a79:	55                   	push   %rbp
  418a7a:	53                   	push   %rbx
  418a7b:	4d 01 df             	add    %r11,%r15
  418a7e:	48 83 ec 18          	sub    $0x18,%rsp
  418a82:	48 8b 07             	mov    (%rdi),%rax
  418a85:	48 85 c0             	test   %rax,%rax
  418a88:	0f 84 ea 00 00 00    	je     418b78 <_ZN4YAML6detail4node12mark_definedEv+0x118>
  418a8e:	49 89 fd             	mov    %rdi,%r13
  418a91:	48 8b 38             	mov    (%rax),%rdi
  418a94:	48 85 ff             	test   %rdi,%rdi
  418a97:	0f 84 ea 00 00 00    	je     418b87 <_ZN4YAML6detail4node12mark_definedEv+0x127>
    if (is_defined())
  418a9d:	80 3f 00             	cmpb   $0x0,(%rdi)
  418aa0:	0f 85 c3 00 00 00    	jne    418b69 <_ZN4YAML6detail4node12mark_definedEv+0x109>
  void mark_defined() { m_pData->mark_defined(); }
  418aa6:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  418aad:	ff ff ff 
      { return const_iterator(&this->_M_impl._M_header); }
  418ab0:	49 8d 6d 18          	lea    0x18(%r13),%rbp
	_M_node = _Rb_tree_increment(_M_node);
  418ab4:	48 bb c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rbx
  418abb:	ff ff ff 
  418abe:	4c 01 f8             	add    %r15,%rax
  418ac1:	4c 01 fb             	add    %r15,%rbx
  418ac4:	ff d0                	callq  *%rax
      return;

    m_pRef->mark_defined();
    for (nodes::iterator it = m_dependencies.begin();
  418ac6:	4d 8b 75 28          	mov    0x28(%r13),%r14
  418aca:	48 b8 60 da de ff ff 	movabs $0xffffffffffdeda60,%rax
  418ad1:	ff ff ff 
         it != m_dependencies.end(); ++it)
      (*it)->mark_defined();
  418ad4:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
    for (nodes::iterator it = m_dependencies.begin();
  418ad8:	49 39 ee             	cmp    %rbp,%r14
  418adb:	74 17                	je     418af4 <_ZN4YAML6detail4node12mark_definedEv+0x94>
  418add:	0f 1f 00             	nopl   (%rax)
      (*it)->mark_defined();
  418ae0:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  418ae4:	41 ff d4             	callq  *%r12
  418ae7:	4c 89 f7             	mov    %r14,%rdi
  418aea:	ff d3                	callq  *%rbx
    for (nodes::iterator it = m_dependencies.begin();
  418aec:	48 39 e8             	cmp    %rbp,%rax
  418aef:	49 89 c6             	mov    %rax,%r14
  418af2:	75 ec                	jne    418ae0 <_ZN4YAML6detail4node12mark_definedEv+0x80>
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
      { _M_t.clear(); }
  418af4:	49 8d 45 10          	lea    0x10(%r13),%rax
  418af8:	48 89 04 24          	mov    %rax,(%rsp)
  418afc:	49 8b 45 20          	mov    0x20(%r13),%rax
      while (__x != 0)
  418b00:	48 85 c0             	test   %rax,%rax
  418b03:	74 4c                	je     418b51 <_ZN4YAML6detail4node12mark_definedEv+0xf1>
  418b05:	48 ba 30 d8 de ff ff 	movabs $0xffffffffffded830,%rdx
  418b0c:	ff ff ff 
  418b0f:	49 89 c6             	mov    %rax,%r14
  418b12:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  418b19:	ff ff ff 
	  _M_erase(_S_right(__x));
  418b1c:	4a 8d 04 3a          	lea    (%rdx,%r15,1),%rax
  418b20:	4d 01 fc             	add    %r15,%r12
  418b23:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  418b28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  418b2f:	00 
  418b30:	49 8b 76 18          	mov    0x18(%r14),%rsi
  418b34:	48 8b 3c 24          	mov    (%rsp),%rdi
  418b38:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  418b3d:	ff d0                	callq  *%rax
  418b3f:	49 8b 5e 10          	mov    0x10(%r14),%rbx
  418b43:	4c 89 f7             	mov    %r14,%rdi
  418b46:	41 ff d4             	callq  *%r12
      while (__x != 0)
  418b49:	48 85 db             	test   %rbx,%rbx
  418b4c:	49 89 de             	mov    %rbx,%r14
  418b4f:	75 df                	jne    418b30 <_ZN4YAML6detail4node12mark_definedEv+0xd0>
	    this->_M_header._M_parent = 0;
  418b51:	49 c7 45 20 00 00 00 	movq   $0x0,0x20(%r13)
  418b58:	00 
	    this->_M_header._M_left = &this->_M_header;
  418b59:	49 89 6d 28          	mov    %rbp,0x28(%r13)
	    this->_M_header._M_right = &this->_M_header;
  418b5d:	49 89 6d 30          	mov    %rbp,0x30(%r13)
	    this->_M_node_count = 0;
  418b61:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
  418b68:	00 
    m_dependencies.clear();
  }
  418b69:	48 83 c4 18          	add    $0x18,%rsp
  418b6d:	5b                   	pop    %rbx
  418b6e:	5d                   	pop    %rbp
  418b6f:	41 5c                	pop    %r12
  418b71:	41 5d                	pop    %r13
  418b73:	41 5e                	pop    %r14
  418b75:	41 5f                	pop    %r15
  418b77:	c3                   	retq   
  418b78:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  418b7f:	ff ff ff 
  418b82:	4c 01 f8             	add    %r15,%rax
  418b85:	ff d0                	callq  *%rax
  418b87:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  418b8e:	ff ff ff 
  418b91:	4c 01 f8             	add    %r15,%rax
  418b94:	ff d0                	callq  *%rax
  418b96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418b9d:	00 00 00 

0000000000418ba0 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  418ba0:	41 57                	push   %r15
  418ba2:	41 56                	push   %r14
  418ba4:	49 bb 60 24 21 00 00 	movabs $0x212460,%r11
  418bab:	00 00 00 
  418bae:	41 55                	push   %r13
  418bb0:	41 54                	push   %r12
  418bb2:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 418ba0 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_>
  418bb9:	55                   	push   %rbp
  418bba:	53                   	push   %rbx
  418bbb:	49 89 fd             	mov    %rdi,%r13
  418bbe:	4d 01 dc             	add    %r11,%r12
  418bc1:	49 89 f6             	mov    %rsi,%r14
      { return &this->_M_impl._M_header; }
  418bc4:	48 8d 6f 08          	lea    0x8(%rdi),%rbp
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  418bc8:	48 83 ec 18          	sub    $0x18,%rsp
  418bcc:	48 8b 57 10          	mov    0x10(%rdi),%rdx
      while (__x != 0)
  418bd0:	48 85 d2             	test   %rdx,%rdx
  418bd3:	74 53                	je     418c28 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x88>
  418bd5:	48 8b 3e             	mov    (%rsi),%rdi
  418bd8:	eb 18                	jmp    418bf2 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x52>
  418bda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  418be0:	48 8b 42 10          	mov    0x10(%rdx),%rax
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  418be4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
      while (__x != 0)
  418bea:	48 85 c0             	test   %rax,%rax
  418bed:	74 18                	je     418c07 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x67>
  418bef:	48 89 c2             	mov    %rax,%rdx
  418bf2:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  418bf6:	48 39 f9             	cmp    %rdi,%rcx
  418bf9:	77 e5                	ja     418be0 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x40>
  418bfb:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418bff:	45 31 c0             	xor    %r8d,%r8d
      while (__x != 0)
  418c02:	48 85 c0             	test   %rax,%rax
  418c05:	75 e8                	jne    418bef <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x4f>
      if (__comp)
  418c07:	45 84 c0             	test   %r8b,%r8b
  418c0a:	48 89 d3             	mov    %rdx,%rbx
  418c0d:	48 89 d0             	mov    %rdx,%rax
  418c10:	75 1e                	jne    418c30 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x90>
      return _Res(iterator(__res.first), false);
  418c12:	31 d2                	xor    %edx,%edx
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
  418c14:	48 39 cf             	cmp    %rcx,%rdi
  418c17:	77 40                	ja     418c59 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0xb9>
    }
  418c19:	48 83 c4 18          	add    $0x18,%rsp
  418c1d:	5b                   	pop    %rbx
  418c1e:	5d                   	pop    %rbp
  418c1f:	41 5c                	pop    %r12
  418c21:	41 5d                	pop    %r13
  418c23:	41 5e                	pop    %r14
  418c25:	41 5f                	pop    %r15
  418c27:	c3                   	retq   
      { return &this->_M_impl._M_header; }
  418c28:	48 89 eb             	mov    %rbp,%rbx
  418c2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  if (__j == begin())
  418c30:	49 39 5d 18          	cmp    %rbx,0x18(%r13)
  418c34:	74 23                	je     418c59 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0xb9>
	_M_node = _Rb_tree_decrement(_M_node);
  418c36:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  418c3d:	ff ff ff 
  418c40:	48 89 df             	mov    %rbx,%rdi
  418c43:	4d 89 e7             	mov    %r12,%r15
  418c46:	4c 01 e0             	add    %r12,%rax
  418c49:	ff d0                	callq  *%rax
  418c4b:	49 8b 3e             	mov    (%r14),%rdi
  418c4e:	48 8b 48 20          	mov    0x20(%rax),%rcx
      return _Res(iterator(__res.first), false);
  418c52:	31 d2                	xor    %edx,%edx
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
  418c54:	48 39 cf             	cmp    %rcx,%rdi
  418c57:	76 c0                	jbe    418c19 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x79>
	bool __insert_left = (__x != 0 || __p == _M_end()
  418c59:	48 39 dd             	cmp    %rbx,%rbp
  418c5c:	74 6b                	je     418cc9 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x129>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
  418c5e:	48 8b 43 20          	mov    0x20(%rbx),%rax
  418c62:	49 39 06             	cmp    %rax,(%r14)
  418c65:	0f 92 44 24 08       	setb   0x8(%rsp)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  418c6a:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  418c71:	ff ff ff 
  418c74:	4d 89 e7             	mov    %r12,%r15
  418c77:	bf 28 00 00 00       	mov    $0x28,%edi
  418c7c:	4c 01 e0             	add    %r12,%rax
  418c7f:	ff d0                	callq  *%rax
  418c81:	49 8b 16             	mov    (%r14),%rdx
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  418c84:	0f b6 7c 24 08       	movzbl 0x8(%rsp),%edi
  418c89:	49 b8 f0 e3 dd ff ff 	movabs $0xffffffffffdde3f0,%r8
  418c90:	ff ff ff 
  418c93:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  418c98:	48 89 e9             	mov    %rbp,%rcx
  418c9b:	48 89 c6             	mov    %rax,%rsi
  418c9e:	4d 01 e0             	add    %r12,%r8
  418ca1:	48 89 50 20          	mov    %rdx,0x20(%rax)
  418ca5:	48 89 da             	mov    %rbx,%rdx
  418ca8:	41 ff d0             	callq  *%r8
	++_M_impl._M_node_count;
  418cab:	49 83 45 28 01       	addq   $0x1,0x28(%r13)
		      true);
  418cb0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  418cb5:	48 83 c4 18          	add    $0x18,%rsp
  418cb9:	5b                   	pop    %rbx
		      true);
  418cba:	ba 01 00 00 00       	mov    $0x1,%edx
    }
  418cbf:	5d                   	pop    %rbp
  418cc0:	41 5c                	pop    %r12
  418cc2:	41 5d                	pop    %r13
  418cc4:	41 5e                	pop    %r14
  418cc6:	41 5f                	pop    %r15
  418cc8:	c3                   	retq   
	bool __insert_left = (__x != 0 || __p == _M_end()
  418cc9:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  418cce:	eb 9a                	jmp    418c6a <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0xca>

0000000000418cd0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  418cd0:	41 57                	push   %r15
  418cd2:	41 55                	push   %r13
  418cd4:	49 89 fd             	mov    %rdi,%r13
  418cd7:	41 54                	push   %r12
  418cd9:	55                   	push   %rbp
  418cda:	48 8d 2d ef ff ff ff 	lea    -0x11(%rip),%rbp        # 418cd0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv>
  418ce1:	53                   	push   %rbx
  418ce2:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  418ce6:	49 bb 30 23 21 00 00 	movabs $0x212330,%r11
  418ced:	00 00 00 
  418cf0:	4c 01 dd             	add    %r11,%rbp
  418cf3:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  418cfa:	ff ff ff 
      { ::operator delete(__p); }
  418cfd:	49 01 ec             	add    %rbp,%r12
  418d00:	48 85 ff             	test   %rdi,%rdi
  418d03:	74 14                	je     418d19 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv+0x49>
  418d05:	0f 1f 00             	nopl   (%rax)
  418d08:	48 8b 1f             	mov    (%rdi),%rbx
  418d0b:	49 89 ef             	mov    %rbp,%r15
  418d0e:	41 ff d4             	callq  *%r12
  418d11:	48 85 db             	test   %rbx,%rbx
  418d14:	48 89 df             	mov    %rbx,%rdi
  418d17:	75 ef                	jne    418d08 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv+0x38>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  418d19:	49 8b 45 08          	mov    0x8(%r13),%rax
  418d1d:	49 89 ef             	mov    %rbp,%r15
  418d20:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  418d24:	31 f6                	xor    %esi,%esi
  418d26:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  418d2d:	00 
  418d2e:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  418d35:	ff ff ff 
  418d38:	48 01 e8             	add    %rbp,%rax
  418d3b:	ff d0                	callq  *%rax
    }
  418d3d:	5b                   	pop    %rbx
      _M_element_count = 0;
  418d3e:	49 c7 45 18 00 00 00 	movq   $0x0,0x18(%r13)
  418d45:	00 
      _M_before_begin._M_nxt = nullptr;
  418d46:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
  418d4d:	00 
    }
  418d4e:	5d                   	pop    %rbp
  418d4f:	41 5c                	pop    %r12
  418d51:	41 5d                	pop    %r13
  418d53:	41 5f                	pop    %r15
  418d55:	c3                   	retq   
  418d56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418d5d:	00 00 00 

0000000000418d60 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  418d60:	41 57                	push   %r15
  418d62:	41 56                	push   %r14
  418d64:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 418d60 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_>
  418d6b:	41 55                	push   %r13
  418d6d:	41 54                	push   %r12
  418d6f:	49 bb a0 22 21 00 00 	movabs $0x2122a0,%r11
  418d76:	00 00 00 
  418d79:	55                   	push   %rbp
  418d7a:	53                   	push   %rbx
  418d7b:	4d 01 de             	add    %r11,%r14
  418d7e:	49 89 fc             	mov    %rdi,%r12
  418d81:	49 89 d5             	mov    %rdx,%r13
  418d84:	48 83 ec 18          	sub    $0x18,%rsp
	if (!_M_buckets)
  418d88:	48 83 3f 00          	cmpq   $0x0,(%rdi)
	__bucket_type* __buckets = nullptr;
  418d8c:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  418d93:	00 
	if (!_M_buckets)
  418d94:	0f 84 05 01 00 00    	je     418e9f <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x13f>
	    if (!__ht._M_before_begin._M_nxt)
  418d9a:	48 8b 5e 10          	mov    0x10(%rsi),%rbx
  418d9e:	48 85 db             	test   %rbx,%rbx
  418da1:	0f 84 b0 00 00 00    	je     418e57 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xf7>
		    { return __roan(__n->_M_v()); });
  418da7:	49 8b 45 00          	mov    0x0(%r13),%rax
	  if (_M_nodes)
  418dab:	48 8b 28             	mov    (%rax),%rbp
  418dae:	48 85 ed             	test   %rbp,%rbp
  418db1:	0f 84 18 01 00 00    	je     418ecf <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x16f>
	      _M_nodes = _M_nodes->_M_next();
  418db7:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  418dbb:	48 89 10             	mov    %rdx,(%rax)
  418dbe:	48 8b 43 08          	mov    0x8(%rbx),%rax
	      __node->_M_nxt = nullptr;
  418dc2:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
  418dc9:	00 
  418dca:	48 89 45 08          	mov    %rax,0x8(%rbp)
  418dce:	48 8b 43 10          	mov    0x10(%rbx),%rax
    { return __num % __den; }
  418dd2:	31 d2                	xor    %edx,%edx
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  418dd4:	49 8b 34 24          	mov    (%r12),%rsi
      { __to->_M_hash_code = __from->_M_hash_code; }
  418dd8:	48 89 45 10          	mov    %rax,0x10(%rbp)
	    _M_before_begin._M_nxt = __this_n;
  418ddc:	49 89 6c 24 10       	mov    %rbp,0x10(%r12)
    { return __num % __den; }
  418de1:	49 f7 74 24 08       	divq   0x8(%r12)
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  418de6:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  418deb:	48 89 04 d6          	mov    %rax,(%rsi,%rdx,8)
  418def:	48 8b 1b             	mov    (%rbx),%rbx
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  418df2:	48 85 db             	test   %rbx,%rbx
  418df5:	75 14                	jne    418e0b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xab>
  418df7:	eb 5e                	jmp    418e57 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xf7>
  418df9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  418e00:	48 8b 1b             	mov    (%rbx),%rbx
  418e03:	48 89 cd             	mov    %rcx,%rbp
  418e06:	48 85 db             	test   %rbx,%rbx
  418e09:	74 4c                	je     418e57 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xf7>
		    { return __roan(__n->_M_v()); });
  418e0b:	49 8b 45 00          	mov    0x0(%r13),%rax
	  if (_M_nodes)
  418e0f:	48 8b 08             	mov    (%rax),%rcx
  418e12:	48 85 c9             	test   %rcx,%rcx
  418e15:	74 59                	je     418e70 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x110>
	      _M_nodes = _M_nodes->_M_next();
  418e17:	48 8b 11             	mov    (%rcx),%rdx
  418e1a:	48 89 10             	mov    %rdx,(%rax)
  418e1d:	48 8b 43 08          	mov    0x8(%rbx),%rax
	      __node->_M_nxt = nullptr;
  418e21:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
  418e28:	48 89 41 08          	mov    %rax,0x8(%rcx)
  418e2c:	48 8b 43 10          	mov    0x10(%rbx),%rax
		__prev_n->_M_nxt = __this_n;
  418e30:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
    { return __num % __den; }
  418e34:	31 d2                	xor    %edx,%edx
      { __to->_M_hash_code = __from->_M_hash_code; }
  418e36:	48 89 41 10          	mov    %rax,0x10(%rcx)
    { return __num % __den; }
  418e3a:	49 f7 74 24 08       	divq   0x8(%r12)
		if (!_M_buckets[__bkt])
  418e3f:	48 8d 04 d6          	lea    (%rsi,%rdx,8),%rax
  418e43:	48 83 38 00          	cmpq   $0x0,(%rax)
  418e47:	75 b7                	jne    418e00 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xa0>
		  _M_buckets[__bkt] = __prev_n;
  418e49:	48 89 28             	mov    %rbp,(%rax)
  418e4c:	48 8b 1b             	mov    (%rbx),%rbx
  418e4f:	48 89 cd             	mov    %rcx,%rbp
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  418e52:	48 85 db             	test   %rbx,%rbx
  418e55:	75 b4                	jne    418e0b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xab>
      }
  418e57:	48 83 c4 18          	add    $0x18,%rsp
  418e5b:	5b                   	pop    %rbx
  418e5c:	5d                   	pop    %rbp
  418e5d:	41 5c                	pop    %r12
  418e5f:	41 5d                	pop    %r13
  418e61:	41 5e                	pop    %r14
  418e63:	41 5f                	pop    %r15
  418e65:	c3                   	retq   
  418e66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418e6d:	00 00 00 
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  418e70:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  418e77:	ff ff ff 
  418e7a:	bf 18 00 00 00       	mov    $0x18,%edi
  418e7f:	4d 89 f7             	mov    %r14,%r15
  418e82:	4c 01 f0             	add    %r14,%rax
  418e85:	ff d0                	callq  *%rax
  418e87:	48 89 c1             	mov    %rax,%rcx
    _Hash_node_base() noexcept : _M_nxt() { }
  418e8a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  418e91:	48 8b 43 08          	mov    0x8(%rbx),%rax
  418e95:	49 8b 34 24          	mov    (%r12),%rsi
  418e99:	48 89 41 08          	mov    %rax,0x8(%rcx)
  418e9d:	eb 8d                	jmp    418e2c <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xcc>
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  418e9f:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
	if (__builtin_expect(__n == 1, false))
  418ea3:	48 83 ff 01          	cmp    $0x1,%rdi
  418ea7:	74 54                	je     418efd <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x19d>
	return __hashtable_alloc::_M_allocate_buckets(__n);
  418ea9:	48 b8 70 2d de ff ff 	movabs $0xffffffffffde2d70,%rax
  418eb0:	ff ff ff 
  418eb3:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  418eb8:	4c 01 f0             	add    %r14,%rax
  418ebb:	ff d0                	callq  *%rax
  418ebd:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  418ec2:	48 89 04 24          	mov    %rax,(%rsp)
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  418ec6:	49 89 04 24          	mov    %rax,(%r12)
  418eca:	e9 cb fe ff ff       	jmpq   418d9a <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x3a>
  418ecf:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  418ed6:	ff ff ff 
  418ed9:	bf 18 00 00 00       	mov    $0x18,%edi
  418ede:	4d 89 f7             	mov    %r14,%r15
  418ee1:	4c 01 f0             	add    %r14,%rax
  418ee4:	ff d0                	callq  *%rax
  418ee6:	48 89 c5             	mov    %rax,%rbp
  418ee9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  418ef0:	48 8b 43 08          	mov    0x8(%rbx),%rax
  418ef4:	48 89 45 08          	mov    %rax,0x8(%rbp)
  418ef8:	e9 d1 fe ff ff       	jmpq   418dce <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x6e>
	    return &_M_single_bucket;
  418efd:	49 8d 44 24 30       	lea    0x30(%r12),%rax
	    _M_single_bucket = nullptr;
  418f02:	49 c7 44 24 30 00 00 	movq   $0x0,0x30(%r12)
  418f09:	00 00 
	    return &_M_single_bucket;
  418f0b:	48 89 04 24          	mov    %rax,(%rsp)
  418f0f:	eb b5                	jmp    418ec6 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x166>
	__catch(...)
  418f11:	48 89 c7             	mov    %rax,%rdi
  418f14:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  418f1b:	ff ff ff 
  418f1e:	4d 89 f7             	mov    %r14,%r15
  418f21:	4c 01 f0             	add    %r14,%rax
  418f24:	ff d0                	callq  *%rax
	    clear();
  418f26:	48 b8 d0 dc de ff ff 	movabs $0xffffffffffdedcd0,%rax
  418f2d:	ff ff ff 
  418f30:	4c 89 e7             	mov    %r12,%rdi
  418f33:	4c 01 f0             	add    %r14,%rax
  418f36:	ff d0                	callq  *%rax
	    if (__buckets)
  418f38:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  418f3d:	74 1c                	je     418f5b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x1fb>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  418f3f:	49 8b 3c 24          	mov    (%r12),%rdi
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  418f43:	49 83 c4 30          	add    $0x30,%r12
	if (_M_uses_single_bucket(__bkts))
  418f47:	4c 39 e7             	cmp    %r12,%rdi
  418f4a:	74 0f                	je     418f5b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x1fb>
      { ::operator delete(__p); }
  418f4c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  418f53:	ff ff ff 
  418f56:	4c 01 f0             	add    %r14,%rax
  418f59:	ff d0                	callq  *%rax
	    __throw_exception_again;
  418f5b:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  418f62:	ff ff ff 
  418f65:	4d 89 f7             	mov    %r14,%r15
  418f68:	4c 01 f0             	add    %r14,%rax
  418f6b:	ff d0                	callq  *%rax
	__catch(...)
  418f6d:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  418f74:	ff ff ff 
  418f77:	48 89 c3             	mov    %rax,%rbx
  418f7a:	4d 89 f7             	mov    %r14,%r15
  418f7d:	4c 01 f2             	add    %r14,%rdx
  418f80:	ff d2                	callq  *%rdx
  418f82:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  418f89:	ff ff ff 
  418f8c:	48 89 df             	mov    %rbx,%rdi
  418f8f:	4c 01 f0             	add    %r14,%rax
  418f92:	ff d0                	callq  *%rax
  418f94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418f9b:	00 00 00 
  418f9e:	66 90                	xchg   %ax,%ax

0000000000418fa0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
  418fa0:	41 57                	push   %r15
  418fa2:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  418fa4:	48 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rcx
  418fab:	cc cc cc 
  418fae:	41 55                	push   %r13
  418fb0:	41 54                	push   %r12
  418fb2:	49 bb 60 20 21 00 00 	movabs $0x212060,%r11
  418fb9:	00 00 00 
  418fbc:	55                   	push   %rbp
  418fbd:	53                   	push   %rbx
  418fbe:	48 89 fd             	mov    %rdi,%rbp
  418fc1:	48 8d 1d d8 ff ff ff 	lea    -0x28(%rip),%rbx        # 418fa0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_>
  418fc8:	49 89 f6             	mov    %rsi,%r14
  418fcb:	48 83 ec 18          	sub    $0x18,%rsp
  418fcf:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  418fd3:	48 8b 3f             	mov    (%rdi),%rdi
  418fd6:	4c 01 db             	add    %r11,%rbx
  418fd9:	4c 89 c2             	mov    %r8,%rdx
  418fdc:	48 29 fa             	sub    %rdi,%rdx
  418fdf:	48 89 d0             	mov    %rdx,%rax
  418fe2:	48 c1 f8 02          	sar    $0x2,%rax
  418fe6:	48 0f af c1          	imul   %rcx,%rax
      if (__a < __b)
  418fea:	48 85 c0             	test   %rax,%rax
  418fed:	74 21                	je     419010 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x70>
  418fef:	48 01 c0             	add    %rax,%rax
  418ff2:	72 13                	jb     419007 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  418ff4:	48 b9 cc cc cc cc cc 	movabs $0xccccccccccccccc,%rcx
  418ffb:	cc cc 0c 
  418ffe:	48 39 c8             	cmp    %rcx,%rax
  419001:	0f 86 e1 00 00 00    	jbe    4190e8 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x148>
  419007:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
  41900e:	eb 06                	jmp    419016 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x76>
  419010:	41 bd 14 00 00 00    	mov    $0x14,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419016:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41901d:	ff ff ff 
  419020:	4c 89 ef             	mov    %r13,%rdi
  419023:	49 89 df             	mov    %rbx,%r15
  419026:	48 01 d8             	add    %rbx,%rax
  419029:	ff d0                	callq  *%rax
  41902b:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  41902f:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  419033:	48 8d 48 14          	lea    0x14(%rax),%rcx
  419037:	49 89 c4             	mov    %rax,%r12
  41903a:	49 01 c5             	add    %rax,%r13
  41903d:	4c 89 c2             	mov    %r8,%rdx
  419040:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419043:	4c 01 e2             	add    %r12,%rdx
  419046:	74 15                	je     41905d <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xbd>
  419048:	49 8b 06             	mov    (%r14),%rax
  41904b:	48 89 02             	mov    %rax,(%rdx)
  41904e:	49 8b 46 08          	mov    0x8(%r14),%rax
  419052:	48 89 42 08          	mov    %rax,0x8(%rdx)
  419056:	41 8b 46 10          	mov    0x10(%r14),%eax
  41905a:	89 42 10             	mov    %eax,0x10(%rdx)
  41905d:	4c 39 c7             	cmp    %r8,%rdi
  419060:	74 44                	je     4190a6 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x106>
  419062:	48 89 fa             	mov    %rdi,%rdx
  419065:	4c 89 e1             	mov    %r12,%rcx
  419068:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41906f:	00 
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  419070:	48 85 c9             	test   %rcx,%rcx
  419073:	74 14                	je     419089 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xe9>
  419075:	48 8b 32             	mov    (%rdx),%rsi
  419078:	48 89 31             	mov    %rsi,(%rcx)
  41907b:	48 8b 72 08          	mov    0x8(%rdx),%rsi
  41907f:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  419083:	8b 72 10             	mov    0x10(%rdx),%esi
  419086:	89 71 10             	mov    %esi,0x10(%rcx)
  419089:	48 83 c2 14          	add    $0x14,%rdx
  41908d:	48 83 c1 14          	add    $0x14,%rcx
  419091:	4c 39 c2             	cmp    %r8,%rdx
  419094:	75 da                	jne    419070 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xd0>
  419096:	48 8d 47 14          	lea    0x14(%rdi),%rax
  41909a:	48 29 c2             	sub    %rax,%rdx
  41909d:	48 c1 ea 02          	shr    $0x2,%rdx
  4190a1:	49 8d 4c 94 28       	lea    0x28(%r12,%rdx,4),%rcx
	if (__p)
  4190a6:	48 85 ff             	test   %rdi,%rdi
  4190a9:	74 1c                	je     4190c7 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x127>
      { ::operator delete(__p); }
  4190ab:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4190b2:	ff ff ff 
  4190b5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  4190ba:	49 89 df             	mov    %rbx,%r15
  4190bd:	48 01 d8             	add    %rbx,%rax
  4190c0:	ff d0                	callq  *%rax
  4190c2:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
  4190c7:	4c 89 65 00          	mov    %r12,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  4190cb:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  4190cf:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
      }
  4190d3:	48 83 c4 18          	add    $0x18,%rsp
  4190d7:	5b                   	pop    %rbx
  4190d8:	5d                   	pop    %rbp
  4190d9:	41 5c                	pop    %r12
  4190db:	41 5d                	pop    %r13
  4190dd:	41 5e                	pop    %r14
  4190df:	41 5f                	pop    %r15
  4190e1:	c3                   	retq   
  4190e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  4190e8:	48 85 c0             	test   %rax,%rax
  4190eb:	75 10                	jne    4190fd <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x15d>
  4190ed:	b9 14 00 00 00       	mov    $0x14,%ecx
  4190f2:	45 31 ed             	xor    %r13d,%r13d
  4190f5:	45 31 e4             	xor    %r12d,%r12d
  4190f8:	e9 46 ff ff ff       	jmpq   419043 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xa3>
  4190fd:	4c 8d 2c 80          	lea    (%rax,%rax,4),%r13
  419101:	49 c1 e5 02          	shl    $0x2,%r13
  419105:	e9 0c ff ff ff       	jmpq   419016 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x76>
  41910a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000419110 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  419110:	48 8d 15 f9 ff ff ff 	lea    -0x7(%rip),%rdx        # 419110 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_>
  419117:	49 bb f0 1e 21 00 00 	movabs $0x211ef0,%r11
  41911e:	00 00 00 
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  419121:	48 8b 47 08          	mov    0x8(%rdi),%rax
  419125:	4c 01 da             	add    %r11,%rdx
  419128:	48 3b 47 10          	cmp    0x10(%rdi),%rax
  41912c:	74 22                	je     419150 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_+0x40>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41912e:	48 85 c0             	test   %rax,%rax
  419131:	74 14                	je     419147 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_+0x37>
  419133:	48 8b 16             	mov    (%rsi),%rdx
  419136:	48 89 10             	mov    %rdx,(%rax)
  419139:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  41913d:	48 89 50 08          	mov    %rdx,0x8(%rax)
  419141:	8b 56 10             	mov    0x10(%rsi),%edx
  419144:	89 50 10             	mov    %edx,0x10(%rax)
	    ++this->_M_impl._M_finish;
  419147:	48 83 c0 14          	add    $0x14,%rax
  41914b:	48 89 47 08          	mov    %rax,0x8(%rdi)
  41914f:	c3                   	retq   
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  419150:	48 b8 a0 df de ff ff 	movabs $0xffffffffffdedfa0,%rax
  419157:	ff ff ff 
  41915a:	48 01 d0             	add    %rdx,%rax
  41915d:	ff e0                	jmpq   *%rax
  41915f:	90                   	nop

0000000000419160 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  419160:	4c 63 0e             	movslq (%rsi),%r9
  419163:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx
  419168:	48 63 56 04          	movslq 0x4(%rsi),%rdx
  41916c:	4c 8b 47 08          	mov    0x8(%rdi),%r8
  419170:	49 8d 04 09          	lea    (%r9,%rcx,1),%rax
  419174:	4d 89 ca             	mov    %r9,%r10
  419177:	49 89 d3             	mov    %rdx,%r11
  41917a:	48 01 ca             	add    %rcx,%rdx
  41917d:	49 89 c1             	mov    %rax,%r9
  419180:	49 c1 e1 06          	shl    $0x6,%r9
  419184:	49 01 d1             	add    %rdx,%r9
  419187:	48 89 c2             	mov    %rax,%rdx
  41918a:	48 c1 ea 02          	shr    $0x2,%rdx
  41918e:	49 01 d1             	add    %rdx,%r9
    { return __num % __den; }
  419191:	31 d2                	xor    %edx,%edx
  419193:	49 31 c1             	xor    %rax,%r9
  419196:	4c 89 c8             	mov    %r9,%rax
  419199:	49 f7 f0             	div    %r8
      __node_base* __prev_p = _M_buckets[__n];
  41919c:	48 8b 07             	mov    (%rdi),%rax
  41919f:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
      if (!__prev_p)
  4191a3:	48 85 c0             	test   %rax,%rax
  4191a6:	74 49                	je     4191f1 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x91>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  4191a8:	53                   	push   %rbx
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  4191a9:	48 8b 08             	mov    (%rax),%rcx
  4191ac:	48 89 d3             	mov    %rdx,%rbx
  4191af:	48 8b 71 10          	mov    0x10(%rcx),%rsi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  4191b3:	49 39 f1             	cmp    %rsi,%r9
  4191b6:	74 28                	je     4191e0 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x80>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  4191b8:	48 8b 01             	mov    (%rcx),%rax
  4191bb:	48 85 c0             	test   %rax,%rax
  4191be:	74 14                	je     4191d4 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x74>
  4191c0:	48 8b 70 10          	mov    0x10(%rax),%rsi
    { return __num % __den; }
  4191c4:	31 d2                	xor    %edx,%edx
  4191c6:	48 89 c1             	mov    %rax,%rcx
  4191c9:	48 89 f0             	mov    %rsi,%rax
  4191cc:	49 f7 f0             	div    %r8
  4191cf:	48 39 d3             	cmp    %rdx,%rbx
  4191d2:	74 df                	je     4191b3 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x53>
      return __p ? const_iterator(__p) : end();
  4191d4:	31 c0                	xor    %eax,%eax
    }
  4191d6:	5b                   	pop    %rbx
  4191d7:	c3                   	retq   
  4191d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4191df:	00 
  4191e0:	44 3b 51 08          	cmp    0x8(%rcx),%r10d
  4191e4:	75 d2                	jne    4191b8 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x58>
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  4191e6:	44 3b 59 0c          	cmp    0xc(%rcx),%r11d
  4191ea:	75 cc                	jne    4191b8 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x58>
      : _M_cur(__p) { }
  4191ec:	48 89 c8             	mov    %rcx,%rax
  4191ef:	5b                   	pop    %rbx
  4191f0:	c3                   	retq   
      return __p ? const_iterator(__p) : end();
  4191f1:	31 c0                	xor    %eax,%eax
  4191f3:	c3                   	retq   
  4191f4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4191fb:	00 00 00 
  4191fe:	66 90                	xchg   %ax,%ax

0000000000419200 <_ZNK11Environment10stateValidERK5StatePK11Constraints>:
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
  419200:	8b 4e 04             	mov    0x4(%rsi),%ecx
  419203:	48 8d 05 f6 ff ff ff 	lea    -0xa(%rip),%rax        # 419200 <_ZNK11Environment10stateValidERK5StatePK11Constraints>
  41920a:	49 bb 00 1e 21 00 00 	movabs $0x211e00,%r11
  419211:	00 00 00 
  419214:	4c 01 d8             	add    %r11,%rax
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  419217:	85 c9                	test   %ecx,%ecx
  419219:	78 14                	js     41922f <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x2f>
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
  41921b:	3b 4f 18             	cmp    0x18(%rdi),%ecx
  41921e:	7d 0f                	jge    41922f <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x2f>
  419220:	44 8b 46 08          	mov    0x8(%rsi),%r8d
  419224:	45 85 c0             	test   %r8d,%r8d
  419227:	78 06                	js     41922f <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x2f>
  419229:	44 3b 47 1c          	cmp    0x1c(%rdi),%r8d
  41922d:	7c 09                	jl     419238 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x38>
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  41922f:	31 c0                	xor    %eax,%eax
  }
  419231:	c3                   	retq   
  419232:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  bool stateValid(const State& s, const Constraints* m_constraints) const{
  419238:	55                   	push   %rbp
  419239:	53                   	push   %rbx
  41923a:	48 89 d5             	mov    %rdx,%rbp
      find(const key_type& __x)
      { return _M_h.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_h.find(__x); }
  41923d:	48 ba 60 e1 de ff ff 	movabs $0xffffffffffdee160,%rdx
  419244:	ff ff ff 
  419247:	48 83 c7 20          	add    $0x20,%rdi
  41924b:	48 89 f3             	mov    %rsi,%rbx
  41924e:	48 83 ec 18          	sub    $0x18,%rsp
  419252:	48 01 d0             	add    %rdx,%rax
  419255:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  419259:	44 89 44 24 0c       	mov    %r8d,0xc(%rsp)
  41925e:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  419263:	ff d0                	callq  *%rax
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
  419265:	48 85 c0             	test   %rax,%rax
  419268:	74 0e                	je     419278 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x78>
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  41926a:	31 c0                	xor    %eax,%eax
  }
  41926c:	48 83 c4 18          	add    $0x18,%rsp
  419270:	5b                   	pop    %rbx
  419271:	5d                   	pop    %rbp
  419272:	c3                   	retq   
  419273:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		for (int i = 0; i < vertexConstraints_size; ++i) {
  419278:	8b 95 40 06 00 00    	mov    0x640(%rbp),%edx
           !m_constraints->isIncluded(VertexConstraint(s.time, s.x, s.y));
  41927e:	8b 7b 08             	mov    0x8(%rbx),%edi
  419281:	8b 73 04             	mov    0x4(%rbx),%esi
  419284:	8b 0b                	mov    (%rbx),%ecx
  419286:	85 d2                	test   %edx,%edx
  419288:	7f 11                	jg     41929b <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x9b>
  41928a:	eb 24                	jmp    4192b0 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0xb0>
  41928c:	0f 1f 40 00          	nopl   0x0(%rax)
  419290:	83 c0 01             	add    $0x1,%eax
  419293:	48 83 c5 0c          	add    $0xc,%rbp
  419297:	39 c2                	cmp    %eax,%edx
  419299:	7e 15                	jle    4192b0 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0xb0>
  41929b:	3b 4d 00             	cmp    0x0(%rbp),%ecx
  41929e:	75 f0                	jne    419290 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x90>
  4192a0:	3b 75 04             	cmp    0x4(%rbp),%esi
  4192a3:	75 eb                	jne    419290 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x90>
  4192a5:	3b 7d 08             	cmp    0x8(%rbp),%edi
  4192a8:	74 c0                	je     41926a <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x6a>
  4192aa:	eb e4                	jmp    419290 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x90>
  4192ac:	0f 1f 40 00          	nopl   0x0(%rax)
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  4192b0:	b8 01 00 00 00       	mov    $0x1,%eax
  4192b5:	eb b5                	jmp    41926c <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x6c>
  4192b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4192be:	00 00 

00000000004192c0 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints>:
  void getNeighbors(const State& s,
  4192c0:	41 57                	push   %r15
  4192c2:	41 56                	push   %r14
  4192c4:	49 89 d7             	mov    %rdx,%r15
  4192c7:	41 55                	push   %r13
  4192c9:	41 54                	push   %r12
  4192cb:	49 bb 40 1d 21 00 00 	movabs $0x211d40,%r11
  4192d2:	00 00 00 
  4192d5:	55                   	push   %rbp
  4192d6:	53                   	push   %rbx
  4192d7:	48 89 cd             	mov    %rcx,%rbp
  4192da:	48 8d 1d df ff ff ff 	lea    -0x21(%rip),%rbx        # 4192c0 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints>
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4192e1:	49 be 00 e2 de ff ff 	movabs $0xffffffffffdee200,%r14
  4192e8:	ff ff ff 
  void getNeighbors(const State& s,
  4192eb:	49 89 f5             	mov    %rsi,%r13
  4192ee:	48 83 ec 48          	sub    $0x48,%rsp
	this->_M_impl._M_finish = __pos;
  4192f2:	48 8b 02             	mov    (%rdx),%rax
      State n(s.time + 1, s.x, s.y);
  4192f5:	8b 4e 04             	mov    0x4(%rsi),%ecx
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4192f8:	4c 8d 64 24 14       	lea    0x14(%rsp),%r12
  4192fd:	4c 01 db             	add    %r11,%rbx
  void getNeighbors(const State& s,
  419300:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  419305:	48 89 42 08          	mov    %rax,0x8(%rdx)
      State n(s.time + 1, s.x, s.y);
  419309:	8b 06                	mov    (%rsi),%eax
  41930b:	8b 56 08             	mov    0x8(%rsi),%edx
  State(int time, int x, int y) : time(time), x(x), y(y) {}
  41930e:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419312:	4c 89 e6             	mov    %r12,%rsi
      State n(s.time + 1, s.x, s.y);
  419315:	83 c0 01             	add    $0x1,%eax
  419318:	89 44 24 14          	mov    %eax,0x14(%rsp)
  41931c:	89 54 24 1c          	mov    %edx,0x1c(%rsp)
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419320:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  419324:	48 89 ea             	mov    %rbp,%rdx
  419327:	ff d0                	callq  *%rax
  419329:	84 c0                	test   %al,%al
  41932b:	0f 85 ef 00 00 00    	jne    419420 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x160>
      State n(s.time + 1, s.x - 1, s.y);
  419331:	41 8b 7d 00          	mov    0x0(%r13),%edi
  419335:	41 8b 45 04          	mov    0x4(%r13),%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419339:	4c 89 e6             	mov    %r12,%rsi
      State n(s.time + 1, s.x - 1, s.y);
  41933c:	41 8b 4d 08          	mov    0x8(%r13),%ecx
  419340:	8d 57 01             	lea    0x1(%rdi),%edx
  419343:	83 e8 01             	sub    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419346:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41934b:	89 44 24 18          	mov    %eax,0x18(%rsp)
  41934f:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
  419353:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  419357:	89 54 24 14          	mov    %edx,0x14(%rsp)
  41935b:	48 89 ea             	mov    %rbp,%rdx
  41935e:	ff d0                	callq  *%rax
  419360:	84 c0                	test   %al,%al
  419362:	0f 85 48 02 00 00    	jne    4195b0 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x2f0>
      State n(s.time + 1, s.x + 1, s.y);
  419368:	41 8b 75 00          	mov    0x0(%r13),%esi
  41936c:	41 8b 45 04          	mov    0x4(%r13),%eax
  419370:	41 8b 4d 08          	mov    0x8(%r13),%ecx
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419374:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
      State n(s.time + 1, s.x + 1, s.y);
  419379:	8d 56 01             	lea    0x1(%rsi),%edx
  41937c:	83 c0 01             	add    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  41937f:	4c 89 e6             	mov    %r12,%rsi
  419382:	89 44 24 18          	mov    %eax,0x18(%rsp)
  419386:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
  41938a:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41938e:	89 54 24 14          	mov    %edx,0x14(%rsp)
  419392:	48 89 ea             	mov    %rbp,%rdx
  419395:	ff d0                	callq  *%rax
  419397:	84 c0                	test   %al,%al
  419399:	0f 85 b1 01 00 00    	jne    419550 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x290>
      State n(s.time + 1, s.x, s.y + 1);
  41939f:	41 8b 7d 00          	mov    0x0(%r13),%edi
  4193a3:	41 8b 45 08          	mov    0x8(%r13),%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4193a7:	4c 89 e6             	mov    %r12,%rsi
      State n(s.time + 1, s.x, s.y + 1);
  4193aa:	41 8b 4d 04          	mov    0x4(%r13),%ecx
  4193ae:	8d 57 01             	lea    0x1(%rdi),%edx
  4193b1:	83 c0 01             	add    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4193b4:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4193b9:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  4193bd:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
  4193c1:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  4193c5:	89 54 24 14          	mov    %edx,0x14(%rsp)
  4193c9:	48 89 ea             	mov    %rbp,%rdx
  4193cc:	ff d0                	callq  *%rax
  4193ce:	84 c0                	test   %al,%al
  4193d0:	0f 85 1a 01 00 00    	jne    4194f0 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x230>
      State n(s.time + 1, s.x, s.y - 1);
  4193d6:	41 8b 75 00          	mov    0x0(%r13),%esi
  4193da:	41 8b 45 08          	mov    0x8(%r13),%eax
  4193de:	41 8b 4d 04          	mov    0x4(%r13),%ecx
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4193e2:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
      State n(s.time + 1, s.x, s.y - 1);
  4193e7:	8d 56 01             	lea    0x1(%rsi),%edx
  4193ea:	83 e8 01             	sub    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4193ed:	4c 89 e6             	mov    %r12,%rsi
  4193f0:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  4193f4:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
  4193f8:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  4193fc:	89 54 24 14          	mov    %edx,0x14(%rsp)
  419400:	48 89 ea             	mov    %rbp,%rdx
  419403:	ff d0                	callq  *%rax
  419405:	84 c0                	test   %al,%al
  419407:	75 77                	jne    419480 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x1c0>
  }
  419409:	48 83 c4 48          	add    $0x48,%rsp
  41940d:	5b                   	pop    %rbx
  41940e:	5d                   	pop    %rbp
  41940f:	41 5c                	pop    %r12
  419411:	41 5d                	pop    %r13
  419413:	41 5e                	pop    %r14
  419415:	41 5f                	pop    %r15
  419417:	c3                   	retq   
  419418:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41941f:	00 
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419420:	48 b8 90 91 de ff ff 	movabs $0xffffffffffde9190,%rax
  419427:	ff ff ff 
  41942a:	48 89 ea             	mov    %rbp,%rdx
  41942d:	4c 89 e6             	mov    %r12,%rsi
  419430:	48 01 d8             	add    %rbx,%rax
  419433:	4c 89 ef             	mov    %r13,%rdi
  419436:	ff d0                	callq  *%rax
  419438:	84 c0                	test   %al,%al
  41943a:	0f 84 f1 fe ff ff    	je     419331 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x71>
    \tparam Cost Custom Cost type (integer or floating point types)
*/
template <typename State, typename Action, typename Cost>
struct Neighbor {
  Neighbor(const State& state, const Action& action, Cost cost)
      : state(state), action(action), cost(cost) {}
  419440:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419445:	c7 44 24 2c 04 00 00 	movl   $0x4,0x2c(%rsp)
  41944c:	00 
            Neighbor<State, Action, int>(n, Action::Wait, 1));
  41944d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  419452:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  419459:	00 
  41945a:	4c 89 ff             	mov    %r15,%rdi
  41945d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419462:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  419466:	89 44 24 28          	mov    %eax,0x28(%rsp)
  41946a:	48 b8 10 e1 de ff ff 	movabs $0xffffffffffdee110,%rax
  419471:	ff ff ff 
  419474:	48 01 d8             	add    %rbx,%rax
  419477:	ff d0                	callq  *%rax
  419479:	e9 b3 fe ff ff       	jmpq   419331 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x71>
  41947e:	66 90                	xchg   %ax,%ax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419480:	48 b8 90 91 de ff ff 	movabs $0xffffffffffde9190,%rax
  419487:	ff ff ff 
  41948a:	48 89 ea             	mov    %rbp,%rdx
  41948d:	4c 89 e6             	mov    %r12,%rsi
  419490:	48 01 d8             	add    %rbx,%rax
  419493:	4c 89 ef             	mov    %r13,%rdi
  419496:	ff d0                	callq  *%rax
  419498:	84 c0                	test   %al,%al
  41949a:	0f 84 69 ff ff ff    	je     419409 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x149>
  4194a0:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  4194a5:	c7 44 24 2c 01 00 00 	movl   $0x1,0x2c(%rsp)
  4194ac:	00 
            Neighbor<State, Action, int>(n, Action::Down, 1));
  4194ad:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4194b2:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  4194b9:	00 
  4194ba:	4c 89 ff             	mov    %r15,%rdi
  4194bd:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4194c2:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  4194c6:	89 44 24 28          	mov    %eax,0x28(%rsp)
  4194ca:	48 b8 10 e1 de ff ff 	movabs $0xffffffffffdee110,%rax
  4194d1:	ff ff ff 
  4194d4:	48 01 d8             	add    %rbx,%rax
  4194d7:	ff d0                	callq  *%rax
  }
  4194d9:	48 83 c4 48          	add    $0x48,%rsp
  4194dd:	5b                   	pop    %rbx
  4194de:	5d                   	pop    %rbp
  4194df:	41 5c                	pop    %r12
  4194e1:	41 5d                	pop    %r13
  4194e3:	41 5e                	pop    %r14
  4194e5:	41 5f                	pop    %r15
  4194e7:	c3                   	retq   
  4194e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4194ef:	00 
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4194f0:	48 b8 90 91 de ff ff 	movabs $0xffffffffffde9190,%rax
  4194f7:	ff ff ff 
  4194fa:	48 89 ea             	mov    %rbp,%rdx
  4194fd:	4c 89 e6             	mov    %r12,%rsi
  419500:	48 01 d8             	add    %rbx,%rax
  419503:	4c 89 ef             	mov    %r13,%rdi
  419506:	ff d0                	callq  *%rax
  419508:	84 c0                	test   %al,%al
  41950a:	0f 84 c6 fe ff ff    	je     4193d6 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x116>
  419510:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419515:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%rsp)
  41951c:	00 
        neighbors.emplace_back(Neighbor<State, Action, int>(n, Action::Up, 1));
  41951d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  419522:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  419529:	00 
  41952a:	4c 89 ff             	mov    %r15,%rdi
  41952d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419532:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  419536:	89 44 24 28          	mov    %eax,0x28(%rsp)
  41953a:	48 b8 10 e1 de ff ff 	movabs $0xffffffffffdee110,%rax
  419541:	ff ff ff 
  419544:	48 01 d8             	add    %rbx,%rax
  419547:	ff d0                	callq  *%rax
  419549:	e9 88 fe ff ff       	jmpq   4193d6 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x116>
  41954e:	66 90                	xchg   %ax,%ax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419550:	48 b8 90 91 de ff ff 	movabs $0xffffffffffde9190,%rax
  419557:	ff ff ff 
  41955a:	48 89 ea             	mov    %rbp,%rdx
  41955d:	4c 89 e6             	mov    %r12,%rsi
  419560:	48 01 d8             	add    %rbx,%rax
  419563:	4c 89 ef             	mov    %r13,%rdi
  419566:	ff d0                	callq  *%rax
  419568:	84 c0                	test   %al,%al
  41956a:	0f 84 2f fe ff ff    	je     41939f <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xdf>
  419570:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419575:	c7 44 24 2c 03 00 00 	movl   $0x3,0x2c(%rsp)
  41957c:	00 
            Neighbor<State, Action, int>(n, Action::Right, 1));
  41957d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  419582:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  419589:	00 
  41958a:	4c 89 ff             	mov    %r15,%rdi
  41958d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419592:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  419596:	89 44 24 28          	mov    %eax,0x28(%rsp)
  41959a:	48 b8 10 e1 de ff ff 	movabs $0xffffffffffdee110,%rax
  4195a1:	ff ff ff 
  4195a4:	48 01 d8             	add    %rbx,%rax
  4195a7:	ff d0                	callq  *%rax
  4195a9:	e9 f1 fd ff ff       	jmpq   41939f <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xdf>
  4195ae:	66 90                	xchg   %ax,%ax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4195b0:	48 b8 90 91 de ff ff 	movabs $0xffffffffffde9190,%rax
  4195b7:	ff ff ff 
  4195ba:	48 89 ea             	mov    %rbp,%rdx
  4195bd:	4c 89 e6             	mov    %r12,%rsi
  4195c0:	48 01 d8             	add    %rbx,%rax
  4195c3:	4c 89 ef             	mov    %r13,%rdi
  4195c6:	ff d0                	callq  *%rax
  4195c8:	84 c0                	test   %al,%al
  4195ca:	0f 84 98 fd ff ff    	je     419368 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xa8>
  4195d0:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  4195d5:	c7 44 24 2c 02 00 00 	movl   $0x2,0x2c(%rsp)
  4195dc:	00 
            Neighbor<State, Action, int>(n, Action::Left, 1));
  4195dd:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4195e2:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  4195e9:	00 
  4195ea:	4c 89 ff             	mov    %r15,%rdi
  4195ed:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4195f2:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  4195f6:	89 44 24 28          	mov    %eax,0x28(%rsp)
  4195fa:	48 b8 10 e1 de ff ff 	movabs $0xffffffffffdee110,%rax
  419601:	ff ff ff 
  419604:	48 01 d8             	add    %rbx,%rax
  419607:	ff d0                	callq  *%rax
  419609:	e9 5a fd ff ff       	jmpq   419368 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xa8>
  41960e:	66 90                	xchg   %ax,%ax

0000000000419610 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
  419610:	41 57                	push   %r15
  419612:	41 56                	push   %r14
  419614:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 419610 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_>
  41961b:	41 55                	push   %r13
  41961d:	41 54                	push   %r12
  41961f:	49 bb f0 19 21 00 00 	movabs $0x2119f0,%r11
  419626:	00 00 00 
  419629:	55                   	push   %rbp
  41962a:	53                   	push   %rbx
  41962b:	4d 01 de             	add    %r11,%r14
  41962e:	48 89 fd             	mov    %rdi,%rbp
  419631:	48 83 ec 18          	sub    $0x18,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419635:	48 8b 47 08          	mov    0x8(%rdi),%rax
  419639:	48 2b 07             	sub    (%rdi),%rax
  41963c:	48 c1 f8 02          	sar    $0x2,%rax
  419640:	48 85 c0             	test   %rax,%rax
  419643:	74 2b                	je     419670 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x60>
  419645:	48 01 c0             	add    %rax,%rax
  419648:	72 13                	jb     41965d <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x4d>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41964a:	48 ba ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rdx
  419651:	ff ff 3f 
  419654:	48 39 d0             	cmp    %rdx,%rax
  419657:	0f 86 cf 00 00 00    	jbe    41972c <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x11c>
  41965d:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  419664:	eb 10                	jmp    419676 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x66>
  419666:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41966d:	00 00 00 
  419670:	41 bd 04 00 00 00    	mov    $0x4,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419676:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41967d:	ff ff ff 
  419680:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  419685:	4c 89 ef             	mov    %r13,%rdi
  419688:	4d 89 f7             	mov    %r14,%r15
  41968b:	4c 01 f0             	add    %r14,%rax
  41968e:	ff d0                	callq  *%rax
  419690:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  419695:	48 89 c3             	mov    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419698:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
  41969c:	4c 8b 65 08          	mov    0x8(%rbp),%r12
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  4196a0:	48 89 da             	mov    %rbx,%rdx
  4196a3:	8b 36                	mov    (%rsi),%esi
  4196a5:	49 29 cc             	sub    %rcx,%r12
  4196a8:	4c 89 e0             	mov    %r12,%rax
  4196ab:	48 c1 f8 02          	sar    $0x2,%rax
  4196af:	4c 01 e2             	add    %r12,%rdx
  4196b2:	74 02                	je     4196b6 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xa6>
  4196b4:	89 32                	mov    %esi,(%rdx)
	  if (_Num)
  4196b6:	48 85 c0             	test   %rax,%rax
  4196b9:	75 45                	jne    419700 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xf0>
	if (__p)
  4196bb:	48 85 c9             	test   %rcx,%rcx
	    ++__new_finish;
  4196be:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  4196c3:	74 15                	je     4196da <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xca>
      { ::operator delete(__p); }
  4196c5:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4196cc:	ff ff ff 
  4196cf:	48 89 cf             	mov    %rcx,%rdi
  4196d2:	4d 89 f7             	mov    %r14,%r15
  4196d5:	4c 01 f0             	add    %r14,%rax
  4196d8:	ff d0                	callq  *%rax
	this->_M_impl._M_start = __new_start;
  4196da:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  4196de:	4c 01 eb             	add    %r13,%rbx
	this->_M_impl._M_finish = __new_finish;
  4196e1:	4c 89 65 08          	mov    %r12,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  4196e5:	48 89 5d 10          	mov    %rbx,0x10(%rbp)
      }
  4196e9:	48 83 c4 18          	add    $0x18,%rsp
  4196ed:	5b                   	pop    %rbx
  4196ee:	5d                   	pop    %rbp
  4196ef:	41 5c                	pop    %r12
  4196f1:	41 5d                	pop    %r13
  4196f3:	41 5e                	pop    %r14
  4196f5:	41 5f                	pop    %r15
  4196f7:	c3                   	retq   
  4196f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4196ff:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  419700:	48 b8 80 e9 dd ff ff 	movabs $0xffffffffffdde980,%rax
  419707:	ff ff ff 
  41970a:	4c 89 e2             	mov    %r12,%rdx
  41970d:	48 89 ce             	mov    %rcx,%rsi
  419710:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  419715:	48 89 df             	mov    %rbx,%rdi
  419718:	4d 89 f7             	mov    %r14,%r15
  41971b:	4c 01 f0             	add    %r14,%rax
	    ++__new_finish;
  41971e:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  419723:	ff d0                	callq  *%rax
  419725:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41972a:	eb 99                	jmp    4196c5 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xb5>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41972c:	45 31 ed             	xor    %r13d,%r13d
  41972f:	31 db                	xor    %ebx,%ebx
  419731:	48 85 c0             	test   %rax,%rax
  419734:	0f 84 5e ff ff ff    	je     419698 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x88>
  41973a:	4c 8d 2c 85 00 00 00 	lea    0x0(,%rax,4),%r13
  419741:	00 
  419742:	e9 2f ff ff ff       	jmpq   419676 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x66>
  419747:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41974e:	00 00 

0000000000419750 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  419750:	41 57                	push   %r15
  419752:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419754:	48 b9 b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rcx
  41975b:	db b6 6d 
  41975e:	41 55                	push   %r13
  419760:	41 54                	push   %r12
  419762:	49 bb b0 18 21 00 00 	movabs $0x2118b0,%r11
  419769:	00 00 00 
  41976c:	55                   	push   %rbp
  41976d:	53                   	push   %rbx
  41976e:	48 89 fd             	mov    %rdi,%rbp
  419771:	48 8d 1d d8 ff ff ff 	lea    -0x28(%rip),%rbx        # 419750 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>
  419778:	49 89 f6             	mov    %rsi,%r14
  41977b:	48 83 ec 18          	sub    $0x18,%rsp
  41977f:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  419783:	48 8b 3f             	mov    (%rdi),%rdi
  419786:	4c 01 db             	add    %r11,%rbx
  419789:	4c 89 c0             	mov    %r8,%rax
  41978c:	48 29 f8             	sub    %rdi,%rax
  41978f:	48 89 c2             	mov    %rax,%rdx
  419792:	48 c1 fa 02          	sar    $0x2,%rdx
  419796:	48 0f af d1          	imul   %rcx,%rdx
      if (__a < __b)
  41979a:	48 85 d2             	test   %rdx,%rdx
  41979d:	74 21                	je     4197c0 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x70>
  41979f:	48 01 d2             	add    %rdx,%rdx
  4197a2:	72 13                	jb     4197b7 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  4197a4:	48 b9 24 49 92 24 49 	movabs $0x924924924924924,%rcx
  4197ab:	92 24 09 
  4197ae:	48 39 ca             	cmp    %rcx,%rdx
  4197b1:	0f 86 19 01 00 00    	jbe    4198d0 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x180>
  4197b7:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
  4197be:	eb 06                	jmp    4197c6 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  4197c0:	41 bd 1c 00 00 00    	mov    $0x1c,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4197c6:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  4197cd:	ff ff ff 
  4197d0:	4c 89 ef             	mov    %r13,%rdi
  4197d3:	49 89 df             	mov    %rbx,%r15
  4197d6:	48 01 d8             	add    %rbx,%rax
  4197d9:	ff d0                	callq  *%rax
  4197db:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  4197df:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  4197e3:	49 89 c4             	mov    %rax,%r12
  4197e6:	49 01 c5             	add    %rax,%r13
  4197e9:	49 8d 54 24 1c       	lea    0x1c(%r12),%rdx
  4197ee:	4c 89 c0             	mov    %r8,%rax
  4197f1:	48 29 f8             	sub    %rdi,%rax
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  4197f4:	4c 01 e0             	add    %r12,%rax
  4197f7:	74 1d                	je     419816 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xc6>
  4197f9:	49 8b 0e             	mov    (%r14),%rcx
  4197fc:	48 89 08             	mov    %rcx,(%rax)
  4197ff:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  419803:	48 89 48 08          	mov    %rcx,0x8(%rax)
  419807:	49 8b 4e 10          	mov    0x10(%r14),%rcx
  41980b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41980f:	41 8b 4e 18          	mov    0x18(%r14),%ecx
  419813:	89 48 18             	mov    %ecx,0x18(%rax)
  419816:	4c 39 c7             	cmp    %r8,%rdi
  419819:	74 75                	je     419890 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x140>
  41981b:	48 89 fa             	mov    %rdi,%rdx
  41981e:	4c 89 e1             	mov    %r12,%rcx
  419821:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  419828:	48 85 c9             	test   %rcx,%rcx
  41982b:	74 1c                	je     419849 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xf9>
  41982d:	48 8b 02             	mov    (%rdx),%rax
  419830:	48 89 01             	mov    %rax,(%rcx)
  419833:	48 8b 42 08          	mov    0x8(%rdx),%rax
  419837:	48 89 41 08          	mov    %rax,0x8(%rcx)
  41983b:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  41983f:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  419843:	8b 72 18             	mov    0x18(%rdx),%esi
  419846:	89 71 18             	mov    %esi,0x18(%rcx)
  419849:	48 83 c2 1c          	add    $0x1c,%rdx
  41984d:	48 83 c1 1c          	add    $0x1c,%rcx
  419851:	4c 39 c2             	cmp    %r8,%rdx
  419854:	75 d2                	jne    419828 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xd8>
  419856:	48 8d 47 1c          	lea    0x1c(%rdi),%rax
  41985a:	48 29 c2             	sub    %rax,%rdx
  41985d:	48 b8 b7 6d db b6 6d 	movabs $0x2db6db6db6db6db7,%rax
  419864:	db b6 2d 
  419867:	48 c1 ea 02          	shr    $0x2,%rdx
  41986b:	48 0f af d0          	imul   %rax,%rdx
  41986f:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
  419876:	ff ff 3f 
  419879:	48 21 c2             	and    %rax,%rdx
  41987c:	48 83 c2 01          	add    $0x1,%rdx
  419880:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  419887:	00 
  419888:	48 29 d0             	sub    %rdx,%rax
  41988b:	49 8d 54 84 1c       	lea    0x1c(%r12,%rax,4),%rdx
	if (__p)
  419890:	48 85 ff             	test   %rdi,%rdi
  419893:	74 1c                	je     4198b1 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x161>
      { ::operator delete(__p); }
  419895:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41989c:	ff ff ff 
  41989f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  4198a4:	49 89 df             	mov    %rbx,%r15
  4198a7:	48 01 d8             	add    %rbx,%rax
  4198aa:	ff d0                	callq  *%rax
  4198ac:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	this->_M_impl._M_start = __new_start;
  4198b1:	4c 89 65 00          	mov    %r12,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  4198b5:	48 89 55 08          	mov    %rdx,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  4198b9:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
      }
  4198bd:	48 83 c4 18          	add    $0x18,%rsp
  4198c1:	5b                   	pop    %rbx
  4198c2:	5d                   	pop    %rbp
  4198c3:	41 5c                	pop    %r12
  4198c5:	41 5d                	pop    %r13
  4198c7:	41 5e                	pop    %r14
  4198c9:	41 5f                	pop    %r15
  4198cb:	c3                   	retq   
  4198cc:	0f 1f 40 00          	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  4198d0:	48 85 d2             	test   %rdx,%rdx
  4198d3:	75 10                	jne    4198e5 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x195>
  4198d5:	ba 1c 00 00 00       	mov    $0x1c,%edx
  4198da:	45 31 ed             	xor    %r13d,%r13d
  4198dd:	45 31 e4             	xor    %r12d,%r12d
  4198e0:	e9 0f ff ff ff       	jmpq   4197f4 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xa4>
  4198e5:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  4198ec:	00 
  4198ed:	49 29 d5             	sub    %rdx,%r13
  4198f0:	49 c1 e5 02          	shl    $0x2,%r13
  4198f4:	e9 cd fe ff ff       	jmpq   4197c6 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  4198f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000419900 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  419900:	41 57                	push   %r15
  419902:	41 56                	push   %r14
  419904:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 419900 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
  41990b:	41 55                	push   %r13
  41990d:	41 54                	push   %r12
  41990f:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  419916:	ff ff ff 
  419919:	55                   	push   %rbp
  41991a:	53                   	push   %rbx
  41991b:	49 bb 00 17 21 00 00 	movabs $0x211700,%r11
  419922:	00 00 00 
  419925:	4d 01 df             	add    %r11,%r15
  419928:	48 83 ec 58          	sub    $0x58,%rsp
      while (__x != 0)
  41992c:	48 85 f6             	test   %rsi,%rsi
  41992f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  419934:	48 b8 00 e9 de ff ff 	movabs $0xffffffffffdee900,%rax
  41993b:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41993e:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
	  _M_erase(_S_right(__x));
  419943:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
      while (__x != 0)
  419947:	0f 84 d3 01 00 00    	je     419b20 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x220>
  41994d:	49 89 fd             	mov    %rdi,%r13
  419950:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  419955:	48 8b 40 18          	mov    0x18(%rax),%rax
  419959:	48 85 c0             	test   %rax,%rax
  41995c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  419961:	0f 84 95 01 00 00    	je     419afc <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1fc>
  419967:	48 8b 40 18          	mov    0x18(%rax),%rax
  41996b:	48 85 c0             	test   %rax,%rax
  41996e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  419973:	0f 84 5c 01 00 00    	je     419ad5 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1d5>
  419979:	48 8b 40 18          	mov    0x18(%rax),%rax
  41997d:	48 85 c0             	test   %rax,%rax
  419980:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  419985:	0f 84 23 01 00 00    	je     419aae <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1ae>
  41998b:	48 8b 40 18          	mov    0x18(%rax),%rax
  41998f:	48 85 c0             	test   %rax,%rax
  419992:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  419997:	0f 84 ea 00 00 00    	je     419a87 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x187>
  41999d:	48 8b 40 18          	mov    0x18(%rax),%rax
  4199a1:	48 85 c0             	test   %rax,%rax
  4199a4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4199a9:	0f 84 b1 00 00 00    	je     419a60 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x160>
  4199af:	48 8b 40 18          	mov    0x18(%rax),%rax
  4199b3:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  4199b8:	48 85 c0             	test   %rax,%rax
  4199bb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4199c0:	4a 8d 2c 3a          	lea    (%rdx,%r15,1),%rbp
  4199c4:	74 73                	je     419a39 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x139>
  4199c6:	48 8b 40 18          	mov    0x18(%rax),%rax
  4199ca:	48 85 c0             	test   %rax,%rax
  4199cd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4199d2:	74 4a                	je     419a1e <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x11e>
  4199d4:	0f 1f 40 00          	nopl   0x0(%rax)
  4199d8:	4c 8b 70 18          	mov    0x18(%rax),%r14
  4199dc:	4d 85 f6             	test   %r14,%r14
  4199df:	74 27                	je     419a08 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x108>
  4199e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  4199e8:	49 8b 76 18          	mov    0x18(%r14),%rsi
  4199ec:	4c 89 ef             	mov    %r13,%rdi
  4199ef:	41 ff d4             	callq  *%r12
  4199f2:	49 8b 5e 10          	mov    0x10(%r14),%rbx
  4199f6:	4c 89 f7             	mov    %r14,%rdi
  4199f9:	ff d5                	callq  *%rbp
      while (__x != 0)
  4199fb:	48 85 db             	test   %rbx,%rbx
  4199fe:	49 89 de             	mov    %rbx,%r14
  419a01:	75 e5                	jne    4199e8 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xe8>
  419a03:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  419a08:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419a0c:	48 89 c7             	mov    %rax,%rdi
  419a0f:	ff d5                	callq  *%rbp
  419a11:	48 85 db             	test   %rbx,%rbx
  419a14:	48 89 d8             	mov    %rbx,%rax
  419a17:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  419a1c:	75 ba                	jne    4199d8 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xd8>
  419a1e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  419a23:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419a27:	48 89 c7             	mov    %rax,%rdi
  419a2a:	ff d5                	callq  *%rbp
  419a2c:	48 85 db             	test   %rbx,%rbx
  419a2f:	48 89 d8             	mov    %rbx,%rax
  419a32:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  419a37:	75 8d                	jne    4199c6 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xc6>
  419a39:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  419a3e:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419a42:	48 89 c7             	mov    %rax,%rdi
  419a45:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419a4a:	4c 01 f8             	add    %r15,%rax
  419a4d:	ff d0                	callq  *%rax
  419a4f:	48 85 db             	test   %rbx,%rbx
  419a52:	48 89 d8             	mov    %rbx,%rax
  419a55:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  419a5a:	0f 85 4f ff ff ff    	jne    4199af <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xaf>
  419a60:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  419a65:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419a69:	48 89 c7             	mov    %rax,%rdi
  419a6c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419a71:	4c 01 f8             	add    %r15,%rax
  419a74:	ff d0                	callq  *%rax
  419a76:	48 85 db             	test   %rbx,%rbx
  419a79:	48 89 d8             	mov    %rbx,%rax
  419a7c:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  419a81:	0f 85 16 ff ff ff    	jne    41999d <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x9d>
  419a87:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  419a8c:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419a90:	48 89 c7             	mov    %rax,%rdi
  419a93:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419a98:	4c 01 f8             	add    %r15,%rax
  419a9b:	ff d0                	callq  *%rax
  419a9d:	48 85 db             	test   %rbx,%rbx
  419aa0:	48 89 d8             	mov    %rbx,%rax
  419aa3:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  419aa8:	0f 85 dd fe ff ff    	jne    41998b <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x8b>
  419aae:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  419ab3:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419ab7:	48 89 c7             	mov    %rax,%rdi
  419aba:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419abf:	4c 01 f8             	add    %r15,%rax
  419ac2:	ff d0                	callq  *%rax
  419ac4:	48 85 db             	test   %rbx,%rbx
  419ac7:	48 89 d8             	mov    %rbx,%rax
  419aca:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  419acf:	0f 85 a4 fe ff ff    	jne    419979 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x79>
  419ad5:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  419ada:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419ade:	48 89 c7             	mov    %rax,%rdi
  419ae1:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419ae6:	4c 01 f8             	add    %r15,%rax
  419ae9:	ff d0                	callq  *%rax
  419aeb:	48 85 db             	test   %rbx,%rbx
  419aee:	48 89 d8             	mov    %rbx,%rax
  419af1:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  419af6:	0f 85 6b fe ff ff    	jne    419967 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x67>
  419afc:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  419b01:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419b05:	48 89 c7             	mov    %rax,%rdi
  419b08:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419b0d:	4c 01 f8             	add    %r15,%rax
  419b10:	ff d0                	callq  *%rax
  419b12:	48 85 db             	test   %rbx,%rbx
  419b15:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  419b1a:	0f 85 30 fe ff ff    	jne    419950 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x50>
    }
  419b20:	48 83 c4 58          	add    $0x58,%rsp
  419b24:	5b                   	pop    %rbx
  419b25:	5d                   	pop    %rbp
  419b26:	41 5c                	pop    %r12
  419b28:	41 5d                	pop    %r13
  419b2a:	41 5e                	pop    %r14
  419b2c:	41 5f                	pop    %r15
  419b2e:	c3                   	retq   
  419b2f:	90                   	nop

0000000000419b30 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE>:
    basic_command_line_parser<charT>::extra_parser(ext_parser ext)
  419b30:	41 57                	push   %r15
  419b32:	41 54                	push   %r12
  419b34:	49 bb d0 14 21 00 00 	movabs $0x2114d0,%r11
  419b3b:	00 00 00 
  419b3e:	55                   	push   %rbp
  419b3f:	53                   	push   %rbx
  419b40:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 419b30 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE>
  419b47:	49 89 fc             	mov    %rdi,%r12
  419b4a:	48 83 ec 28          	sub    $0x28,%rsp
  419b4e:	48 8b 06             	mov    (%rsi),%rax
  419b51:	4c 01 db             	add    %r11,%rbx
  419b54:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  419b5b:	00 
#endif

  private:
    void assign_to_own(const BOOST_FUNCTION_FUNCTION& f)
    {
      if (!f.empty()) {
  419b5c:	48 85 c0             	test   %rax,%rax
  419b5f:	74 23                	je     419b84 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x54>
        this->vtable = f.vtable;
        if (this->has_trivial_copy_and_destroy())
  419b61:	a8 01                	test   $0x1,%al
        this->vtable = f.vtable;
  419b63:	48 89 04 24          	mov    %rax,(%rsp)
        if (this->has_trivial_copy_and_destroy())
  419b67:	74 6f                	je     419bd8 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xa8>
          this->functor = f.functor;
  419b69:	48 8b 46 08          	mov    0x8(%rsi),%rax
  419b6d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  419b72:	48 8b 46 10          	mov    0x10(%rsi),%rax
  419b76:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  419b7b:	48 8b 46 18          	mov    0x18(%rsi),%rax
  419b7f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  419b84:	48 89 e5             	mov    %rsp,%rbp
        detail::cmdline::set_additional_parser(ext);
  419b87:	48 b8 10 ea dd ff ff 	movabs $0xffffffffffddea10,%rax
  419b8e:	ff ff ff 
  419b91:	48 89 ee             	mov    %rbp,%rsi
  419b94:	4c 89 e7             	mov    %r12,%rdi
  419b97:	49 89 df             	mov    %rbx,%r15
  419b9a:	48 01 d8             	add    %rbx,%rax
  419b9d:	ff d0                	callq  *%rax
      if (vtable) {
  419b9f:	48 8b 04 24          	mov    (%rsp),%rax
  419ba3:	48 85 c0             	test   %rax,%rax
  419ba6:	74 1e                	je     419bc6 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x96>
        if (!this->has_trivial_copy_and_destroy())
  419ba8:	a8 01                	test   $0x1,%al
  419baa:	75 1a                	jne    419bc6 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x96>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  419bac:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  419bb0:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  419bb3:	48 85 c0             	test   %rax,%rax
  419bb6:	74 0e                	je     419bc6 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x96>
            base.manager(functor, functor, destroy_functor_tag);
  419bb8:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
  419bbc:	ba 02 00 00 00       	mov    $0x2,%edx
  419bc1:	48 89 fe             	mov    %rdi,%rsi
  419bc4:	ff d0                	callq  *%rax
    }
  419bc6:	48 83 c4 28          	add    $0x28,%rsp
  419bca:	4c 89 e0             	mov    %r12,%rax
  419bcd:	5b                   	pop    %rbx
  419bce:	5d                   	pop    %rbp
  419bcf:	41 5c                	pop    %r12
  419bd1:	41 5f                	pop    %r15
  419bd3:	c3                   	retq   
  419bd4:	0f 1f 40 00          	nopl   0x0(%rax)
        else
          get_vtable()->base.manager(f.functor, this->functor,
  419bd8:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  419bdd:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
          get_vtable()->base.manager(f.functor, this->functor,
  419be1:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
  419be5:	48 89 e5             	mov    %rsp,%rbp
  419be8:	31 d2                	xor    %edx,%edx
  419bea:	48 89 ce             	mov    %rcx,%rsi
  419bed:	ff 10                	callq  *(%rax)
  419bef:	eb 96                	jmp    419b87 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x57>
      if (vtable) {
  419bf1:	48 8b 14 24          	mov    (%rsp),%rdx
  419bf5:	49 89 c4             	mov    %rax,%r12
  419bf8:	48 85 d2             	test   %rdx,%rdx
  419bfb:	74 1f                	je     419c1c <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xec>
        if (!this->has_trivial_copy_and_destroy())
  419bfd:	f6 c2 01             	test   $0x1,%dl
  419c00:	75 1a                	jne    419c1c <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xec>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  419c02:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
  419c06:	48 8b 0a             	mov    (%rdx),%rcx
          if (base.manager)
  419c09:	48 85 c9             	test   %rcx,%rcx
  419c0c:	74 0e                	je     419c1c <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xec>
            base.manager(functor, functor, destroy_functor_tag);
  419c0e:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
  419c12:	ba 02 00 00 00       	mov    $0x2,%edx
  419c17:	48 89 fe             	mov    %rdi,%rsi
  419c1a:	ff d1                	callq  *%rcx
  419c1c:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  419c23:	ff ff ff 
  419c26:	4c 89 e7             	mov    %r12,%rdi
  419c29:	49 89 df             	mov    %rbx,%r15
  419c2c:	48 01 d8             	add    %rbx,%rax
  419c2f:	ff d0                	callq  *%rax
  419c31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  419c38:	00 00 00 
  419c3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000419c40 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  419c40:	41 57                	push   %r15
  419c42:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419c44:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
  419c4b:	aa aa aa 
  419c4e:	41 55                	push   %r13
  419c50:	41 54                	push   %r12
  419c52:	49 bb c0 13 21 00 00 	movabs $0x2113c0,%r11
  419c59:	00 00 00 
  419c5c:	55                   	push   %rbp
  419c5d:	53                   	push   %rbx
  419c5e:	48 89 fb             	mov    %rdi,%rbx
  419c61:	48 8d 2d d8 ff ff ff 	lea    -0x28(%rip),%rbp        # 419c40 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>
  419c68:	49 89 f6             	mov    %rsi,%r14
  419c6b:	48 83 ec 18          	sub    $0x18,%rsp
  419c6f:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  419c73:	48 8b 3f             	mov    (%rdi),%rdi
  419c76:	4c 01 dd             	add    %r11,%rbp
  419c79:	4c 89 c2             	mov    %r8,%rdx
  419c7c:	48 29 fa             	sub    %rdi,%rdx
  419c7f:	48 89 d0             	mov    %rdx,%rax
  419c82:	48 c1 f8 02          	sar    $0x2,%rax
  419c86:	48 0f af c1          	imul   %rcx,%rax
  419c8a:	48 85 c0             	test   %rax,%rax
  419c8d:	74 21                	je     419cb0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x70>
  419c8f:	48 01 c0             	add    %rax,%rax
  419c92:	72 13                	jb     419ca7 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  419c94:	48 b9 55 55 55 55 55 	movabs $0x1555555555555555,%rcx
  419c9b:	55 55 15 
  419c9e:	48 39 c8             	cmp    %rcx,%rax
  419ca1:	0f 86 c9 00 00 00    	jbe    419d70 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x130>
  419ca7:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  419cae:	eb 06                	jmp    419cb6 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  419cb0:	41 bd 0c 00 00 00    	mov    $0xc,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419cb6:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  419cbd:	ff ff ff 
  419cc0:	4c 89 ef             	mov    %r13,%rdi
  419cc3:	49 89 ef             	mov    %rbp,%r15
  419cc6:	48 01 e8             	add    %rbp,%rax
  419cc9:	ff d0                	callq  *%rax
  419ccb:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  419ccf:	48 8b 3b             	mov    (%rbx),%rdi
  419cd2:	48 8d 48 0c          	lea    0xc(%rax),%rcx
  419cd6:	49 89 c4             	mov    %rax,%r12
  419cd9:	49 01 c5             	add    %rax,%r13
  419cdc:	4c 89 c2             	mov    %r8,%rdx
  419cdf:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419ce2:	4c 01 e2             	add    %r12,%rdx
  419ce5:	74 0d                	je     419cf4 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xb4>
  419ce7:	49 8b 06             	mov    (%r14),%rax
  419cea:	48 89 02             	mov    %rax,(%rdx)
  419ced:	41 8b 46 08          	mov    0x8(%r14),%eax
  419cf1:	89 42 08             	mov    %eax,0x8(%rdx)
  419cf4:	4c 39 c7             	cmp    %r8,%rdi
  419cf7:	74 35                	je     419d2e <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xee>
  419cf9:	48 89 fa             	mov    %rdi,%rdx
  419cfc:	4c 89 e1             	mov    %r12,%rcx
  419cff:	90                   	nop
  419d00:	48 85 c9             	test   %rcx,%rcx
  419d03:	74 0c                	je     419d11 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xd1>
  419d05:	48 8b 32             	mov    (%rdx),%rsi
  419d08:	48 89 31             	mov    %rsi,(%rcx)
  419d0b:	8b 72 08             	mov    0x8(%rdx),%esi
  419d0e:	89 71 08             	mov    %esi,0x8(%rcx)
  419d11:	48 83 c2 0c          	add    $0xc,%rdx
  419d15:	48 83 c1 0c          	add    $0xc,%rcx
  419d19:	4c 39 c2             	cmp    %r8,%rdx
  419d1c:	75 e2                	jne    419d00 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xc0>
  419d1e:	48 8d 47 0c          	lea    0xc(%rdi),%rax
  419d22:	48 29 c2             	sub    %rax,%rdx
  419d25:	48 c1 ea 02          	shr    $0x2,%rdx
  419d29:	49 8d 4c 94 18       	lea    0x18(%r12,%rdx,4),%rcx
	if (__p)
  419d2e:	48 85 ff             	test   %rdi,%rdi
  419d31:	74 1c                	je     419d4f <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x10f>
      { ::operator delete(__p); }
  419d33:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  419d3a:	ff ff ff 
  419d3d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  419d42:	49 89 ef             	mov    %rbp,%r15
  419d45:	48 01 e8             	add    %rbp,%rax
  419d48:	ff d0                	callq  *%rax
  419d4a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_start = __new_start;
  419d4f:	4c 89 23             	mov    %r12,(%rbx)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  419d52:	4c 89 6b 10          	mov    %r13,0x10(%rbx)
	this->_M_impl._M_finish = __new_finish;
  419d56:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
      }
  419d5a:	48 83 c4 18          	add    $0x18,%rsp
  419d5e:	5b                   	pop    %rbx
  419d5f:	5d                   	pop    %rbp
  419d60:	41 5c                	pop    %r12
  419d62:	41 5d                	pop    %r13
  419d64:	41 5e                	pop    %r14
  419d66:	41 5f                	pop    %r15
  419d68:	c3                   	retq   
  419d69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  419d70:	48 85 c0             	test   %rax,%rax
  419d73:	75 10                	jne    419d85 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x145>
  419d75:	b9 0c 00 00 00       	mov    $0xc,%ecx
  419d7a:	45 31 ed             	xor    %r13d,%r13d
  419d7d:	45 31 e4             	xor    %r12d,%r12d
  419d80:	e9 5d ff ff ff       	jmpq   419ce2 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xa2>
  419d85:	4c 8d 2c 40          	lea    (%rax,%rax,2),%r13
  419d89:	49 c1 e5 02          	shl    $0x2,%r13
  419d8d:	e9 24 ff ff ff       	jmpq   419cb6 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  419d92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  419d99:	00 00 00 
  419d9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000419da0 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  419da0:	41 57                	push   %r15
  419da2:	41 56                	push   %r14
  419da4:	49 bb 60 12 21 00 00 	movabs $0x211260,%r11
  419dab:	00 00 00 
  419dae:	41 55                	push   %r13
  419db0:	41 54                	push   %r12
  419db2:	49 89 fc             	mov    %rdi,%r12
  419db5:	55                   	push   %rbp
  419db6:	53                   	push   %rbx
  419db7:	48 8d 2d e2 ff ff ff 	lea    -0x1e(%rip),%rbp        # 419da0 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>
  419dbe:	49 89 f6             	mov    %rsi,%r14
  419dc1:	48 83 ec 18          	sub    $0x18,%rsp
  419dc5:	4d 8b 44 24 08       	mov    0x8(%r12),%r8
  419dca:	48 8b 3f             	mov    (%rdi),%rdi
  419dcd:	4c 01 dd             	add    %r11,%rbp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419dd0:	4c 89 c2             	mov    %r8,%rdx
  419dd3:	48 29 fa             	sub    %rdi,%rdx
  419dd6:	48 89 d0             	mov    %rdx,%rax
  419dd9:	48 c1 f8 03          	sar    $0x3,%rax
  419ddd:	48 85 c0             	test   %rax,%rax
  419de0:	74 26                	je     419e08 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x68>
  419de2:	48 01 c0             	add    %rax,%rax
  419de5:	72 13                	jb     419dfa <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x5a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  419de7:	48 b9 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rcx
  419dee:	ff ff 1f 
  419df1:	48 39 c8             	cmp    %rcx,%rax
  419df4:	0f 86 c6 00 00 00    	jbe    419ec0 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x120>
  419dfa:	48 c7 c3 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rbx
  419e01:	eb 0a                	jmp    419e0d <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x6d>
  419e03:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  419e08:	bb 08 00 00 00       	mov    $0x8,%ebx
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419e0d:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  419e14:	ff ff ff 
  419e17:	48 89 df             	mov    %rbx,%rdi
  419e1a:	49 89 ef             	mov    %rbp,%r15
  419e1d:	48 01 e8             	add    %rbp,%rax
  419e20:	ff d0                	callq  *%rax
  419e22:	4d 8b 44 24 08       	mov    0x8(%r12),%r8
  419e27:	49 8b 3c 24          	mov    (%r12),%rdi
  419e2b:	48 8d 48 08          	lea    0x8(%rax),%rcx
  419e2f:	49 89 c5             	mov    %rax,%r13
  419e32:	48 01 c3             	add    %rax,%rbx
  419e35:	4c 89 c2             	mov    %r8,%rdx
  419e38:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419e3b:	4c 01 ea             	add    %r13,%rdx
  419e3e:	74 06                	je     419e46 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xa6>
  419e40:	49 8b 06             	mov    (%r14),%rax
  419e43:	48 89 02             	mov    %rax,(%rdx)
  419e46:	4c 39 c7             	cmp    %r8,%rdi
  419e49:	74 35                	je     419e80 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xe0>
  419e4b:	48 89 fa             	mov    %rdi,%rdx
  419e4e:	4c 89 e9             	mov    %r13,%rcx
  419e51:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  419e58:	48 85 c9             	test   %rcx,%rcx
  419e5b:	74 06                	je     419e63 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xc3>
  419e5d:	48 8b 32             	mov    (%rdx),%rsi
  419e60:	48 89 31             	mov    %rsi,(%rcx)
  419e63:	48 83 c2 08          	add    $0x8,%rdx
  419e67:	48 83 c1 08          	add    $0x8,%rcx
  419e6b:	4c 39 c2             	cmp    %r8,%rdx
  419e6e:	75 e8                	jne    419e58 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xb8>
  419e70:	48 8d 47 08          	lea    0x8(%rdi),%rax
  419e74:	48 29 c2             	sub    %rax,%rdx
  419e77:	48 c1 ea 03          	shr    $0x3,%rdx
  419e7b:	49 8d 4c d5 10       	lea    0x10(%r13,%rdx,8),%rcx
	if (__p)
  419e80:	48 85 ff             	test   %rdi,%rdi
  419e83:	74 1c                	je     419ea1 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x101>
      { ::operator delete(__p); }
  419e85:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  419e8c:	ff ff ff 
  419e8f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  419e94:	49 89 ef             	mov    %rbp,%r15
  419e97:	48 01 e8             	add    %rbp,%rax
  419e9a:	ff d0                	callq  *%rax
  419e9c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_start = __new_start;
  419ea1:	4d 89 2c 24          	mov    %r13,(%r12)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  419ea5:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
	this->_M_impl._M_finish = __new_finish;
  419eaa:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
      }
  419eaf:	48 83 c4 18          	add    $0x18,%rsp
  419eb3:	5b                   	pop    %rbx
  419eb4:	5d                   	pop    %rbp
  419eb5:	41 5c                	pop    %r12
  419eb7:	41 5d                	pop    %r13
  419eb9:	41 5e                	pop    %r14
  419ebb:	41 5f                	pop    %r15
  419ebd:	c3                   	retq   
  419ebe:	66 90                	xchg   %ax,%ax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  419ec0:	48 85 c0             	test   %rax,%rax
  419ec3:	75 0f                	jne    419ed4 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x134>
  419ec5:	b9 08 00 00 00       	mov    $0x8,%ecx
  419eca:	31 db                	xor    %ebx,%ebx
  419ecc:	45 31 ed             	xor    %r13d,%r13d
  419ecf:	e9 67 ff ff ff       	jmpq   419e3b <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x9b>
  419ed4:	48 8d 1c c5 00 00 00 	lea    0x0(,%rax,8),%rbx
  419edb:	00 
  419edc:	e9 2c ff ff ff       	jmpq   419e0d <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x6d>
  419ee1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  419ee8:	00 00 00 
  419eeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000419ef0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  419ef0:	41 57                	push   %r15
  419ef2:	41 56                	push   %r14
  419ef4:	49 bb 10 11 21 00 00 	movabs $0x211110,%r11
  419efb:	00 00 00 
  419efe:	41 55                	push   %r13
  419f00:	4c 8d 2d e9 ff ff ff 	lea    -0x17(%rip),%r13        # 419ef0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_>
  419f07:	41 54                	push   %r12
  419f09:	55                   	push   %rbp
  419f0a:	53                   	push   %rbx
  419f0b:	48 89 fd             	mov    %rdi,%rbp
  419f0e:	4d 01 dd             	add    %r11,%r13
  419f11:	48 83 ec 18          	sub    $0x18,%rsp
	if (!_M_buckets)
  419f15:	48 83 3f 00          	cmpq   $0x0,(%rdi)
	__bucket_type* __buckets = nullptr;
  419f19:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  419f20:	00 
	if (!_M_buckets)
  419f21:	0f 84 ce 00 00 00    	je     419ff5 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x105>
	    if (!__ht._M_before_begin._M_nxt)
  419f27:	48 8b 5e 10          	mov    0x10(%rsi),%rbx
  419f2b:	48 85 db             	test   %rbx,%rbx
  419f2e:	0f 84 b2 00 00 00    	je     419fe6 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xf6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419f34:	49 be 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%r14
  419f3b:	ff ff ff 
  419f3e:	bf 18 00 00 00       	mov    $0x18,%edi
  419f43:	4d 89 ef             	mov    %r13,%r15
  419f46:	4b 8d 04 2e          	lea    (%r14,%r13,1),%rax
  419f4a:	ff d0                	callq  *%rax
    _Hash_node_base() noexcept : _M_nxt() { }
  419f4c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  419f53:	49 89 c4             	mov    %rax,%r12
  419f56:	48 8b 43 08          	mov    0x8(%rbx),%rax
    { return __num % __den; }
  419f5a:	31 d2                	xor    %edx,%edx
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  419f5c:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
  419f60:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  419f65:	48 8b 43 10          	mov    0x10(%rbx),%rax
	    _M_before_begin._M_nxt = __this_n;
  419f69:	4c 89 65 10          	mov    %r12,0x10(%rbp)
      { __to->_M_hash_code = __from->_M_hash_code; }
  419f6d:	49 89 44 24 10       	mov    %rax,0x10(%r12)
    { return __num % __den; }
  419f72:	48 f7 75 08          	divq   0x8(%rbp)
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  419f76:	48 8b 45 00          	mov    0x0(%rbp),%rax
  419f7a:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  419f7e:	48 8b 1b             	mov    (%rbx),%rbx
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  419f81:	48 85 db             	test   %rbx,%rbx
  419f84:	74 60                	je     419fe6 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xf6>
  419f86:	4d 01 ee             	add    %r13,%r14
  419f89:	eb 10                	jmp    419f9b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xab>
  419f8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  419f90:	48 8b 1b             	mov    (%rbx),%rbx
  419f93:	49 89 cc             	mov    %rcx,%r12
  419f96:	48 85 db             	test   %rbx,%rbx
  419f99:	74 4b                	je     419fe6 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xf6>
  419f9b:	bf 18 00 00 00       	mov    $0x18,%edi
  419fa0:	4d 89 ef             	mov    %r13,%r15
  419fa3:	41 ff d6             	callq  *%r14
    _Hash_node_base() noexcept : _M_nxt() { }
  419fa6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  419fad:	48 89 c1             	mov    %rax,%rcx
  419fb0:	48 8b 43 08          	mov    0x8(%rbx),%rax
    { return __num % __den; }
  419fb4:	31 d2                	xor    %edx,%edx
  419fb6:	48 89 41 08          	mov    %rax,0x8(%rcx)
  419fba:	48 8b 43 10          	mov    0x10(%rbx),%rax
		__prev_n->_M_nxt = __this_n;
  419fbe:	49 89 0c 24          	mov    %rcx,(%r12)
      { __to->_M_hash_code = __from->_M_hash_code; }
  419fc2:	48 89 41 10          	mov    %rax,0x10(%rcx)
    { return __num % __den; }
  419fc6:	48 f7 75 08          	divq   0x8(%rbp)
		if (!_M_buckets[__bkt])
  419fca:	48 8b 45 00          	mov    0x0(%rbp),%rax
  419fce:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  419fd2:	48 83 38 00          	cmpq   $0x0,(%rax)
  419fd6:	75 b8                	jne    419f90 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xa0>
		  _M_buckets[__bkt] = __prev_n;
  419fd8:	4c 89 20             	mov    %r12,(%rax)
  419fdb:	48 8b 1b             	mov    (%rbx),%rbx
  419fde:	49 89 cc             	mov    %rcx,%r12
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  419fe1:	48 85 db             	test   %rbx,%rbx
  419fe4:	75 b5                	jne    419f9b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xab>
      }
  419fe6:	48 83 c4 18          	add    $0x18,%rsp
  419fea:	5b                   	pop    %rbx
  419feb:	5d                   	pop    %rbp
  419fec:	41 5c                	pop    %r12
  419fee:	41 5d                	pop    %r13
  419ff0:	41 5e                	pop    %r14
  419ff2:	41 5f                	pop    %r15
  419ff4:	c3                   	retq   
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  419ff5:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
	if (__builtin_expect(__n == 1, false))
  419ff9:	48 83 ff 01          	cmp    $0x1,%rdi
  419ffd:	74 26                	je     41a025 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x135>
	return __hashtable_alloc::_M_allocate_buckets(__n);
  419fff:	48 b8 70 2d de ff ff 	movabs $0xffffffffffde2d70,%rax
  41a006:	ff ff ff 
  41a009:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41a00e:	4c 01 e8             	add    %r13,%rax
  41a011:	ff d0                	callq  *%rax
  41a013:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41a018:	48 89 04 24          	mov    %rax,(%rsp)
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  41a01c:	48 89 45 00          	mov    %rax,0x0(%rbp)
  41a020:	e9 02 ff ff ff       	jmpq   419f27 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x37>
	    return &_M_single_bucket;
  41a025:	48 8d 45 30          	lea    0x30(%rbp),%rax
	    _M_single_bucket = nullptr;
  41a029:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
  41a030:	00 
	    return &_M_single_bucket;
  41a031:	48 89 04 24          	mov    %rax,(%rsp)
  41a035:	eb e5                	jmp    41a01c <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x12c>
	__catch(...)
  41a037:	48 89 c7             	mov    %rax,%rdi
  41a03a:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41a041:	ff ff ff 
  41a044:	4d 89 ef             	mov    %r13,%r15
  41a047:	4c 01 e8             	add    %r13,%rax
  41a04a:	ff d0                	callq  *%rax
	    clear();
  41a04c:	48 b8 d0 dc de ff ff 	movabs $0xffffffffffdedcd0,%rax
  41a053:	ff ff ff 
  41a056:	48 89 ef             	mov    %rbp,%rdi
  41a059:	4c 01 e8             	add    %r13,%rax
  41a05c:	ff d0                	callq  *%rax
	    if (__buckets)
  41a05e:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  41a063:	74 1c                	je     41a081 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x191>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41a065:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  41a069:	48 83 c5 30          	add    $0x30,%rbp
	if (_M_uses_single_bucket(__bkts))
  41a06d:	48 39 ef             	cmp    %rbp,%rdi
  41a070:	74 0f                	je     41a081 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x191>
      { ::operator delete(__p); }
  41a072:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41a079:	ff ff ff 
  41a07c:	4c 01 e8             	add    %r13,%rax
  41a07f:	ff d0                	callq  *%rax
	    __throw_exception_again;
  41a081:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41a088:	ff ff ff 
  41a08b:	4d 89 ef             	mov    %r13,%r15
  41a08e:	4c 01 e8             	add    %r13,%rax
  41a091:	ff d0                	callq  *%rax
	__catch(...)
  41a093:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41a09a:	ff ff ff 
  41a09d:	48 89 c3             	mov    %rax,%rbx
  41a0a0:	4d 89 ef             	mov    %r13,%r15
  41a0a3:	4c 01 ea             	add    %r13,%rdx
  41a0a6:	ff d2                	callq  *%rdx
  41a0a8:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41a0af:	ff ff ff 
  41a0b2:	48 89 df             	mov    %rbx,%rdi
  41a0b5:	4c 01 e8             	add    %r13,%rax
  41a0b8:	ff d0                	callq  *%rax
  41a0ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000041a0c0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41a0c0:	41 57                	push   %r15
  41a0c2:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a0c4:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
  41a0cb:	aa aa aa 
  41a0ce:	41 55                	push   %r13
  41a0d0:	41 54                	push   %r12
  41a0d2:	49 bb 40 0f 21 00 00 	movabs $0x210f40,%r11
  41a0d9:	00 00 00 
  41a0dc:	55                   	push   %rbp
  41a0dd:	53                   	push   %rbx
  41a0de:	48 89 fb             	mov    %rdi,%rbx
  41a0e1:	48 8d 2d d8 ff ff ff 	lea    -0x28(%rip),%rbp        # 41a0c0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>
  41a0e8:	49 89 f6             	mov    %rsi,%r14
  41a0eb:	48 83 ec 18          	sub    $0x18,%rsp
  41a0ef:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  41a0f3:	48 8b 3f             	mov    (%rdi),%rdi
  41a0f6:	4c 01 dd             	add    %r11,%rbp
  41a0f9:	4c 89 c2             	mov    %r8,%rdx
  41a0fc:	48 29 fa             	sub    %rdi,%rdx
  41a0ff:	48 89 d0             	mov    %rdx,%rax
  41a102:	48 c1 f8 02          	sar    $0x2,%rax
  41a106:	48 0f af c1          	imul   %rcx,%rax
  41a10a:	48 85 c0             	test   %rax,%rax
  41a10d:	74 21                	je     41a130 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x70>
  41a10f:	48 01 c0             	add    %rax,%rax
  41a112:	72 13                	jb     41a127 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41a114:	48 b9 55 55 55 55 55 	movabs $0x1555555555555555,%rcx
  41a11b:	55 55 15 
  41a11e:	48 39 c8             	cmp    %rcx,%rax
  41a121:	0f 86 c9 00 00 00    	jbe    41a1f0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x130>
  41a127:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  41a12e:	eb 06                	jmp    41a136 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  41a130:	41 bd 0c 00 00 00    	mov    $0xc,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41a136:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41a13d:	ff ff ff 
  41a140:	4c 89 ef             	mov    %r13,%rdi
  41a143:	49 89 ef             	mov    %rbp,%r15
  41a146:	48 01 e8             	add    %rbp,%rax
  41a149:	ff d0                	callq  *%rax
  41a14b:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  41a14f:	48 8b 3b             	mov    (%rbx),%rdi
  41a152:	48 8d 48 0c          	lea    0xc(%rax),%rcx
  41a156:	49 89 c4             	mov    %rax,%r12
  41a159:	49 01 c5             	add    %rax,%r13
  41a15c:	4c 89 c2             	mov    %r8,%rdx
  41a15f:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41a162:	4c 01 e2             	add    %r12,%rdx
  41a165:	74 0d                	je     41a174 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xb4>
  41a167:	49 8b 06             	mov    (%r14),%rax
  41a16a:	48 89 02             	mov    %rax,(%rdx)
  41a16d:	41 8b 46 08          	mov    0x8(%r14),%eax
  41a171:	89 42 08             	mov    %eax,0x8(%rdx)
  41a174:	4c 39 c7             	cmp    %r8,%rdi
  41a177:	74 35                	je     41a1ae <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xee>
  41a179:	48 89 fa             	mov    %rdi,%rdx
  41a17c:	4c 89 e1             	mov    %r12,%rcx
  41a17f:	90                   	nop
  41a180:	48 85 c9             	test   %rcx,%rcx
  41a183:	74 0c                	je     41a191 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xd1>
  41a185:	48 8b 32             	mov    (%rdx),%rsi
  41a188:	48 89 31             	mov    %rsi,(%rcx)
  41a18b:	8b 72 08             	mov    0x8(%rdx),%esi
  41a18e:	89 71 08             	mov    %esi,0x8(%rcx)
  41a191:	48 83 c2 0c          	add    $0xc,%rdx
  41a195:	48 83 c1 0c          	add    $0xc,%rcx
  41a199:	4c 39 c2             	cmp    %r8,%rdx
  41a19c:	75 e2                	jne    41a180 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xc0>
  41a19e:	48 8d 47 0c          	lea    0xc(%rdi),%rax
  41a1a2:	48 29 c2             	sub    %rax,%rdx
  41a1a5:	48 c1 ea 02          	shr    $0x2,%rdx
  41a1a9:	49 8d 4c 94 18       	lea    0x18(%r12,%rdx,4),%rcx
	if (__p)
  41a1ae:	48 85 ff             	test   %rdi,%rdi
  41a1b1:	74 1c                	je     41a1cf <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x10f>
      { ::operator delete(__p); }
  41a1b3:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41a1ba:	ff ff ff 
  41a1bd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41a1c2:	49 89 ef             	mov    %rbp,%r15
  41a1c5:	48 01 e8             	add    %rbp,%rax
  41a1c8:	ff d0                	callq  *%rax
  41a1ca:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_start = __new_start;
  41a1cf:	4c 89 23             	mov    %r12,(%rbx)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a1d2:	4c 89 6b 10          	mov    %r13,0x10(%rbx)
	this->_M_impl._M_finish = __new_finish;
  41a1d6:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
      }
  41a1da:	48 83 c4 18          	add    $0x18,%rsp
  41a1de:	5b                   	pop    %rbx
  41a1df:	5d                   	pop    %rbp
  41a1e0:	41 5c                	pop    %r12
  41a1e2:	41 5d                	pop    %r13
  41a1e4:	41 5e                	pop    %r14
  41a1e6:	41 5f                	pop    %r15
  41a1e8:	c3                   	retq   
  41a1e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41a1f0:	48 85 c0             	test   %rax,%rax
  41a1f3:	75 10                	jne    41a205 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x145>
  41a1f5:	b9 0c 00 00 00       	mov    $0xc,%ecx
  41a1fa:	45 31 ed             	xor    %r13d,%r13d
  41a1fd:	45 31 e4             	xor    %r12d,%r12d
  41a200:	e9 5d ff ff ff       	jmpq   41a162 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xa2>
  41a205:	4c 8d 2c 40          	lea    (%rax,%rax,2),%r13
  41a209:	49 c1 e5 02          	shl    $0x2,%r13
  41a20d:	e9 24 ff ff ff       	jmpq   41a136 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  41a212:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a219:	00 00 00 
  41a21c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041a220 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41a220:	41 57                	push   %r15
  41a222:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a224:	48 b9 b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rcx
  41a22b:	db b6 6d 
  41a22e:	41 55                	push   %r13
  41a230:	41 54                	push   %r12
  41a232:	49 bb e0 0d 21 00 00 	movabs $0x210de0,%r11
  41a239:	00 00 00 
  41a23c:	55                   	push   %rbp
  41a23d:	53                   	push   %rbx
  41a23e:	48 89 fd             	mov    %rdi,%rbp
  41a241:	48 8d 1d d8 ff ff ff 	lea    -0x28(%rip),%rbx        # 41a220 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>
  41a248:	49 89 f6             	mov    %rsi,%r14
  41a24b:	48 83 ec 18          	sub    $0x18,%rsp
  41a24f:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  41a253:	48 8b 3f             	mov    (%rdi),%rdi
  41a256:	4c 01 db             	add    %r11,%rbx
  41a259:	4c 89 c0             	mov    %r8,%rax
  41a25c:	48 29 f8             	sub    %rdi,%rax
  41a25f:	48 89 c2             	mov    %rax,%rdx
  41a262:	48 c1 fa 02          	sar    $0x2,%rdx
  41a266:	48 0f af d1          	imul   %rcx,%rdx
  41a26a:	48 85 d2             	test   %rdx,%rdx
  41a26d:	74 21                	je     41a290 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x70>
  41a26f:	48 01 d2             	add    %rdx,%rdx
  41a272:	72 13                	jb     41a287 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41a274:	48 b9 24 49 92 24 49 	movabs $0x924924924924924,%rcx
  41a27b:	92 24 09 
  41a27e:	48 39 ca             	cmp    %rcx,%rdx
  41a281:	0f 86 19 01 00 00    	jbe    41a3a0 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x180>
  41a287:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
  41a28e:	eb 06                	jmp    41a296 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  41a290:	41 bd 1c 00 00 00    	mov    $0x1c,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41a296:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41a29d:	ff ff ff 
  41a2a0:	4c 89 ef             	mov    %r13,%rdi
  41a2a3:	49 89 df             	mov    %rbx,%r15
  41a2a6:	48 01 d8             	add    %rbx,%rax
  41a2a9:	ff d0                	callq  *%rax
  41a2ab:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  41a2af:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  41a2b3:	49 89 c4             	mov    %rax,%r12
  41a2b6:	49 01 c5             	add    %rax,%r13
  41a2b9:	49 8d 54 24 1c       	lea    0x1c(%r12),%rdx
  41a2be:	4c 89 c0             	mov    %r8,%rax
  41a2c1:	48 29 f8             	sub    %rdi,%rax
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41a2c4:	4c 01 e0             	add    %r12,%rax
  41a2c7:	74 1d                	je     41a2e6 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xc6>
  41a2c9:	49 8b 0e             	mov    (%r14),%rcx
  41a2cc:	48 89 08             	mov    %rcx,(%rax)
  41a2cf:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  41a2d3:	48 89 48 08          	mov    %rcx,0x8(%rax)
  41a2d7:	49 8b 4e 10          	mov    0x10(%r14),%rcx
  41a2db:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41a2df:	41 8b 4e 18          	mov    0x18(%r14),%ecx
  41a2e3:	89 48 18             	mov    %ecx,0x18(%rax)
  41a2e6:	4c 39 c7             	cmp    %r8,%rdi
  41a2e9:	74 75                	je     41a360 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x140>
  41a2eb:	48 89 fa             	mov    %rdi,%rdx
  41a2ee:	4c 89 e1             	mov    %r12,%rcx
  41a2f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41a2f8:	48 85 c9             	test   %rcx,%rcx
  41a2fb:	74 1c                	je     41a319 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xf9>
  41a2fd:	48 8b 02             	mov    (%rdx),%rax
  41a300:	48 89 01             	mov    %rax,(%rcx)
  41a303:	48 8b 42 08          	mov    0x8(%rdx),%rax
  41a307:	48 89 41 08          	mov    %rax,0x8(%rcx)
  41a30b:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  41a30f:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  41a313:	8b 72 18             	mov    0x18(%rdx),%esi
  41a316:	89 71 18             	mov    %esi,0x18(%rcx)
  41a319:	48 83 c2 1c          	add    $0x1c,%rdx
  41a31d:	48 83 c1 1c          	add    $0x1c,%rcx
  41a321:	4c 39 c2             	cmp    %r8,%rdx
  41a324:	75 d2                	jne    41a2f8 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xd8>
  41a326:	48 8d 47 1c          	lea    0x1c(%rdi),%rax
  41a32a:	48 29 c2             	sub    %rax,%rdx
  41a32d:	48 b8 b7 6d db b6 6d 	movabs $0x2db6db6db6db6db7,%rax
  41a334:	db b6 2d 
  41a337:	48 c1 ea 02          	shr    $0x2,%rdx
  41a33b:	48 0f af d0          	imul   %rax,%rdx
  41a33f:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
  41a346:	ff ff 3f 
  41a349:	48 21 c2             	and    %rax,%rdx
  41a34c:	48 83 c2 01          	add    $0x1,%rdx
  41a350:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  41a357:	00 
  41a358:	48 29 d0             	sub    %rdx,%rax
  41a35b:	49 8d 54 84 1c       	lea    0x1c(%r12,%rax,4),%rdx
	if (__p)
  41a360:	48 85 ff             	test   %rdi,%rdi
  41a363:	74 1c                	je     41a381 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x161>
      { ::operator delete(__p); }
  41a365:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41a36c:	ff ff ff 
  41a36f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41a374:	49 89 df             	mov    %rbx,%r15
  41a377:	48 01 d8             	add    %rbx,%rax
  41a37a:	ff d0                	callq  *%rax
  41a37c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	this->_M_impl._M_start = __new_start;
  41a381:	4c 89 65 00          	mov    %r12,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  41a385:	48 89 55 08          	mov    %rdx,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a389:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
      }
  41a38d:	48 83 c4 18          	add    $0x18,%rsp
  41a391:	5b                   	pop    %rbx
  41a392:	5d                   	pop    %rbp
  41a393:	41 5c                	pop    %r12
  41a395:	41 5d                	pop    %r13
  41a397:	41 5e                	pop    %r14
  41a399:	41 5f                	pop    %r15
  41a39b:	c3                   	retq   
  41a39c:	0f 1f 40 00          	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41a3a0:	48 85 d2             	test   %rdx,%rdx
  41a3a3:	75 10                	jne    41a3b5 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x195>
  41a3a5:	ba 1c 00 00 00       	mov    $0x1c,%edx
  41a3aa:	45 31 ed             	xor    %r13d,%r13d
  41a3ad:	45 31 e4             	xor    %r12d,%r12d
  41a3b0:	e9 0f ff ff ff       	jmpq   41a2c4 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xa4>
  41a3b5:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  41a3bc:	00 
  41a3bd:	49 29 d5             	sub    %rdx,%r13
  41a3c0:	49 c1 e5 02          	shl    $0x2,%r13
  41a3c4:	e9 cd fe ff ff       	jmpq   41a296 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  41a3c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041a3d0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41a3d0:	41 57                	push   %r15
  41a3d2:	41 56                	push   %r14
  41a3d4:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 41a3d0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_>
  41a3db:	41 55                	push   %r13
  41a3dd:	41 54                	push   %r12
  41a3df:	49 bb 30 0c 21 00 00 	movabs $0x210c30,%r11
  41a3e6:	00 00 00 
  41a3e9:	55                   	push   %rbp
  41a3ea:	53                   	push   %rbx
  41a3eb:	4d 01 de             	add    %r11,%r14
  41a3ee:	48 89 fd             	mov    %rdi,%rbp
  41a3f1:	48 83 ec 18          	sub    $0x18,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a3f5:	48 8b 47 08          	mov    0x8(%rdi),%rax
  41a3f9:	48 2b 07             	sub    (%rdi),%rax
  41a3fc:	48 c1 f8 02          	sar    $0x2,%rax
  41a400:	48 85 c0             	test   %rax,%rax
  41a403:	74 2b                	je     41a430 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x60>
  41a405:	48 01 c0             	add    %rax,%rax
  41a408:	72 13                	jb     41a41d <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x4d>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41a40a:	48 ba ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rdx
  41a411:	ff ff 3f 
  41a414:	48 39 d0             	cmp    %rdx,%rax
  41a417:	0f 86 cf 00 00 00    	jbe    41a4ec <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x11c>
  41a41d:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  41a424:	eb 10                	jmp    41a436 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x66>
  41a426:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a42d:	00 00 00 
  41a430:	41 bd 04 00 00 00    	mov    $0x4,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41a436:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41a43d:	ff ff ff 
  41a440:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41a445:	4c 89 ef             	mov    %r13,%rdi
  41a448:	4d 89 f7             	mov    %r14,%r15
  41a44b:	4c 01 f0             	add    %r14,%rax
  41a44e:	ff d0                	callq  *%rax
  41a450:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41a455:	48 89 c3             	mov    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a458:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
  41a45c:	4c 8b 65 08          	mov    0x8(%rbp),%r12
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41a460:	48 89 da             	mov    %rbx,%rdx
  41a463:	8b 36                	mov    (%rsi),%esi
  41a465:	49 29 cc             	sub    %rcx,%r12
  41a468:	4c 89 e0             	mov    %r12,%rax
  41a46b:	48 c1 f8 02          	sar    $0x2,%rax
  41a46f:	4c 01 e2             	add    %r12,%rdx
  41a472:	74 02                	je     41a476 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xa6>
  41a474:	89 32                	mov    %esi,(%rdx)
	  if (_Num)
  41a476:	48 85 c0             	test   %rax,%rax
  41a479:	75 45                	jne    41a4c0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xf0>
	if (__p)
  41a47b:	48 85 c9             	test   %rcx,%rcx
	    ++__new_finish;
  41a47e:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  41a483:	74 15                	je     41a49a <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xca>
      { ::operator delete(__p); }
  41a485:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41a48c:	ff ff ff 
  41a48f:	48 89 cf             	mov    %rcx,%rdi
  41a492:	4d 89 f7             	mov    %r14,%r15
  41a495:	4c 01 f0             	add    %r14,%rax
  41a498:	ff d0                	callq  *%rax
	this->_M_impl._M_start = __new_start;
  41a49a:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a49e:	4c 01 eb             	add    %r13,%rbx
	this->_M_impl._M_finish = __new_finish;
  41a4a1:	4c 89 65 08          	mov    %r12,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a4a5:	48 89 5d 10          	mov    %rbx,0x10(%rbp)
      }
  41a4a9:	48 83 c4 18          	add    $0x18,%rsp
  41a4ad:	5b                   	pop    %rbx
  41a4ae:	5d                   	pop    %rbp
  41a4af:	41 5c                	pop    %r12
  41a4b1:	41 5d                	pop    %r13
  41a4b3:	41 5e                	pop    %r14
  41a4b5:	41 5f                	pop    %r15
  41a4b7:	c3                   	retq   
  41a4b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41a4bf:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  41a4c0:	48 b8 80 e9 dd ff ff 	movabs $0xffffffffffdde980,%rax
  41a4c7:	ff ff ff 
  41a4ca:	4c 89 e2             	mov    %r12,%rdx
  41a4cd:	48 89 ce             	mov    %rcx,%rsi
  41a4d0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41a4d5:	48 89 df             	mov    %rbx,%rdi
  41a4d8:	4d 89 f7             	mov    %r14,%r15
  41a4db:	4c 01 f0             	add    %r14,%rax
	    ++__new_finish;
  41a4de:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  41a4e3:	ff d0                	callq  *%rax
  41a4e5:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41a4ea:	eb 99                	jmp    41a485 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xb5>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41a4ec:	45 31 ed             	xor    %r13d,%r13d
  41a4ef:	31 db                	xor    %ebx,%ebx
  41a4f1:	48 85 c0             	test   %rax,%rax
  41a4f4:	0f 84 5e ff ff ff    	je     41a458 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x88>
  41a4fa:	4c 8d 2c 85 00 00 00 	lea    0x0(,%rax,4),%r13
  41a501:	00 
  41a502:	e9 2f ff ff ff       	jmpq   41a436 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x66>
  41a507:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41a50e:	00 00 

000000000041a510 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv>:

  value_type dereference() const {
  41a510:	41 57                	push   %r15
  41a512:	41 56                	push   %r14
  41a514:	49 bb f0 0a 21 00 00 	movabs $0x210af0,%r11
  41a51b:	00 00 00 
  41a51e:	41 55                	push   %r13
  41a520:	41 54                	push   %r12
  41a522:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41a510 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv>
  41a529:	55                   	push   %rbp
  41a52a:	53                   	push   %rbx
  41a52b:	48 89 fb             	mov    %rdi,%rbx
  41a52e:	4d 01 dc             	add    %r11,%r12
  41a531:	48 83 ec 08          	sub    $0x8,%rsp
    switch (m_type) {
  41a535:	8b 06                	mov    (%rsi),%eax
  41a537:	83 f8 01             	cmp    $0x1,%eax
  41a53a:	0f 84 d8 00 00 00    	je     41a618 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x108>
  41a540:	83 f8 02             	cmp    $0x2,%eax
  41a543:	0f 85 8f 01 00 00    	jne    41a6d8 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
  41a549:	48 8b 46 10          	mov    0x10(%rsi),%rax
        return value_type(*m_mapIt->first, *m_mapIt->second);
  41a54d:	48 8b 50 28          	mov    0x28(%rax),%rdx
  41a551:	48 8b 40 20          	mov    0x20(%rax),%rax
    const typename base_type::value_type& v = *this->base();
    if (v.pNode)
      return value_type(Node(*v, m_pMemory));
    if (v.first && v.second)
  41a555:	48 85 d2             	test   %rdx,%rdx
  41a558:	0f 84 7a 01 00 00    	je     41a6d8 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
  41a55e:	48 85 c0             	test   %rax,%rax
  41a561:	0f 84 71 01 00 00    	je     41a6d8 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a567:	48 8b 6e 28          	mov    0x28(%rsi),%rbp
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a56b:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a56f:	48 85 ed             	test   %rbp,%rbp
  41a572:	0f 84 b8 01 00 00    	je     41a730 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x220>
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  41a578:	48 8d 4d 08          	lea    0x8(%rbp),%rcx
  41a57c:	f0 83 01 01          	lock addl $0x1,(%rcx)
  41a580:	f0 83 01 01          	lock addl $0x1,(%rcx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a584:	4c 8b 6e 28          	mov    0x28(%rsi),%r13
  41a588:	4c 8b 46 20          	mov    0x20(%rsi),%r8
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a58c:	4d 85 ed             	test   %r13,%r13
  41a58f:	0f 84 9e 01 00 00    	je     41a733 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x223>
  41a595:	49 8d 75 08          	lea    0x8(%r13),%rsi
  41a599:	f0 83 06 01          	lock addl $0x1,(%rsi)
  41a59d:	f0 83 06 01          	lock addl $0x1,(%rsi)
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  41a5a1:	c6 03 00             	movb   $0x0,(%rbx)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41a5a4:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  41a5ab:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41a5ac:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  41a5b3:	00 
  41a5b4:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  41a5bb:	00 
      m_pNode(rhs.m_pNode) {}
  41a5bc:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a5c0:	4c 89 43 28          	mov    %r8,0x28(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a5c4:	4c 89 6b 30          	mov    %r13,0x30(%rbx)
  41a5c8:	f0 83 06 01          	lock addl $0x1,(%rsi)
  41a5cc:	48 89 43 38          	mov    %rax,0x38(%rbx)
  41a5d0:	c6 43 40 01          	movb   $0x1,0x40(%rbx)
  41a5d4:	48 89 7b 48          	mov    %rdi,0x48(%rbx)
  41a5d8:	48 89 6b 50          	mov    %rbp,0x50(%rbx)
  41a5dc:	f0 83 01 01          	lock addl $0x1,(%rcx)
        if( pi_ != 0 ) pi_->release();
  41a5e0:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  41a5e7:	ff ff ff 
  41a5ea:	4c 89 ef             	mov    %r13,%rdi
  41a5ed:	48 89 53 58          	mov    %rdx,0x58(%rbx)
  41a5f1:	4f 8d 3c 26          	lea    (%r14,%r12,1),%r15
  41a5f5:	41 ff d7             	callq  *%r15
  41a5f8:	4c 89 ef             	mov    %r13,%rdi
  41a5fb:	41 ff d7             	callq  *%r15
  41a5fe:	48 89 ef             	mov    %rbp,%rdi
  41a601:	4d 01 f4             	add    %r14,%r12
  41a604:	41 ff d4             	callq  *%r12
  41a607:	48 89 ef             	mov    %rbp,%rdi
  41a60a:	41 ff d4             	callq  *%r12
  41a60d:	e9 9c 00 00 00       	jmpq   41a6ae <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
  41a612:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return value_type(**m_seqIt);
  41a618:	48 8b 46 08          	mov    0x8(%rsi),%rax
  41a61c:	48 8b 08             	mov    (%rax),%rcx
    if (v.pNode)
  41a61f:	48 85 c9             	test   %rcx,%rcx
  41a622:	0f 84 b0 00 00 00    	je     41a6d8 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a628:	48 8b 6e 28          	mov    0x28(%rsi),%rbp
  41a62c:	48 8b 56 20          	mov    0x20(%rsi),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a630:	48 85 ed             	test   %rbp,%rbp
  41a633:	0f 84 87 00 00 00    	je     41a6c0 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1b0>
  41a639:	48 8d 45 08          	lea    0x8(%rbp),%rax
  41a63d:	f0 83 00 01          	lock addl $0x1,(%rax)
  41a641:	f0 83 00 01          	lock addl $0x1,(%rax)
  41a645:	c6 07 01             	movb   $0x1,(%rdi)
  41a648:	48 89 57 08          	mov    %rdx,0x8(%rdi)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a64c:	48 89 6f 10          	mov    %rbp,0x10(%rdi)
  41a650:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41a654:	48 85 ed             	test   %rbp,%rbp
  41a657:	48 89 4b 18          	mov    %rcx,0x18(%rbx)
  41a65b:	c6 43 20 00          	movb   $0x0,0x20(%rbx)
  41a65f:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  41a666:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a667:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  41a66e:	00 
  41a66f:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  41a676:	00 
  41a677:	c6 43 40 00          	movb   $0x0,0x40(%rbx)
  41a67b:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
  41a682:	00 
  41a683:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
  41a68a:	00 
  41a68b:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  41a692:	00 
        if( pi_ != 0 ) pi_->release();
  41a693:	74 19                	je     41a6ae <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
  41a695:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41a69c:	ff ff ff 
  41a69f:	48 89 ef             	mov    %rbp,%rdi
  41a6a2:	49 01 c4             	add    %rax,%r12
  41a6a5:	41 ff d4             	callq  *%r12
  41a6a8:	48 89 ef             	mov    %rbp,%rdi
  41a6ab:	41 ff d4             	callq  *%r12
      return value_type(Node(*v.first, m_pMemory), Node(*v.second, m_pMemory));
    return value_type();
  }
  41a6ae:	48 83 c4 08          	add    $0x8,%rsp
  41a6b2:	48 89 d8             	mov    %rbx,%rax
  41a6b5:	5b                   	pop    %rbx
  41a6b6:	5d                   	pop    %rbp
  41a6b7:	41 5c                	pop    %r12
  41a6b9:	41 5d                	pop    %r13
  41a6bb:	41 5e                	pop    %r14
  41a6bd:	41 5f                	pop    %r15
  41a6bf:	c3                   	retq   
  41a6c0:	c6 07 01             	movb   $0x1,(%rdi)
  41a6c3:	48 89 57 08          	mov    %rdx,0x8(%rdi)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a6c7:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  41a6ce:	00 
  41a6cf:	e9 80 ff ff ff       	jmpq   41a654 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x144>
  41a6d4:	0f 1f 40 00          	nopl   0x0(%rax)
inline Node::Node() : m_isValid(true), m_pNode(NULL) {}
  41a6d8:	c6 03 01             	movb   $0x1,(%rbx)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41a6db:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  41a6e2:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41a6e3:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  41a6ea:	00 
  41a6eb:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  41a6f2:	00 
  41a6f3:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
  41a6f7:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  41a6fe:	00 
  41a6ff:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  41a706:	00 
  41a707:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  41a70e:	00 
  41a70f:	c6 43 40 01          	movb   $0x1,0x40(%rbx)
  41a713:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
  41a71a:	00 
  41a71b:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
  41a722:	00 
  41a723:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  41a72a:	00 
  41a72b:	e9 7e ff ff ff       	jmpq   41a6ae <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a730:	49 89 f8             	mov    %rdi,%r8
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a733:	48 85 ed             	test   %rbp,%rbp
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  41a736:	c6 03 00             	movb   $0x0,(%rbx)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41a739:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  41a740:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41a741:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  41a748:	00 
  41a749:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  41a750:	00 
      m_pNode(rhs.m_pNode) {}
  41a751:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a755:	4c 89 43 28          	mov    %r8,0x28(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a759:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  41a760:	00 
  41a761:	48 89 43 38          	mov    %rax,0x38(%rbx)
  41a765:	c6 43 40 01          	movb   $0x1,0x40(%rbx)
  41a769:	48 89 7b 48          	mov    %rdi,0x48(%rbx)
  41a76d:	48 89 6b 50          	mov    %rbp,0x50(%rbx)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a771:	75 09                	jne    41a77c <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x26c>
  41a773:	48 89 53 58          	mov    %rdx,0x58(%rbx)
  41a777:	e9 32 ff ff ff       	jmpq   41a6ae <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
  41a77c:	f0 83 45 08 01       	lock addl $0x1,0x8(%rbp)
  41a781:	49 be 80 ab de ff ff 	movabs $0xffffffffffdeab80,%r14
  41a788:	ff ff ff 
  41a78b:	48 89 53 58          	mov    %rdx,0x58(%rbx)
  41a78f:	e9 6a fe ff ff       	jmpq   41a5fe <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0xee>
  41a794:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a79b:	00 00 00 
  41a79e:	66 90                	xchg   %ax,%ax

000000000041a7a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41a7a0:	41 57                	push   %r15
  41a7a2:	41 56                	push   %r14
  41a7a4:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 41a7a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
  41a7ab:	41 55                	push   %r13
  41a7ad:	41 54                	push   %r12
  41a7af:	49 bb 60 08 21 00 00 	movabs $0x210860,%r11
  41a7b6:	00 00 00 
  41a7b9:	55                   	push   %rbp
  41a7ba:	53                   	push   %rbx
  41a7bb:	4d 01 de             	add    %r11,%r14
  41a7be:	48 83 ec 18          	sub    $0x18,%rsp
  41a7c2:	48 8b 5f 10          	mov    0x10(%rdi),%rbx
  41a7c6:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  41a7cb:	48 89 34 24          	mov    %rsi,(%rsp)
      while (__x != 0)
  41a7cf:	48 85 db             	test   %rbx,%rbx
  41a7d2:	0f 84 b6 00 00 00    	je     41a88e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xee>
  41a7d8:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
  41a7dc:	4c 8b 26             	mov    (%rsi),%r12
  41a7df:	eb 36                	jmp    41a817 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x77>
  41a7e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __builtin_memcmp(__s1, __s2, __n);
  41a7e8:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  41a7ef:	ff ff ff 
  41a7f2:	48 8b 73 20          	mov    0x20(%rbx),%rsi
  41a7f6:	4c 89 e7             	mov    %r12,%rdi
  41a7f9:	4c 01 f0             	add    %r14,%rax
  41a7fc:	4d 89 f7             	mov    %r14,%r15
  41a7ff:	ff d0                	callq  *%rax
	if (!__r)
  41a801:	85 c0                	test   %eax,%eax
  41a803:	74 25                	je     41a82a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x8a>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  41a805:	85 c0                	test   %eax,%eax
  41a807:	78 37                	js     41a840 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xa0>
  41a809:	48 8b 43 18          	mov    0x18(%rbx),%rax
  41a80d:	31 f6                	xor    %esi,%esi
      while (__x != 0)
  41a80f:	48 85 c0             	test   %rax,%rax
  41a812:	74 3a                	je     41a84e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xae>
  41a814:	48 89 c3             	mov    %rax,%rbx
  41a817:	48 8b 6b 28          	mov    0x28(%rbx),%rbp
  41a81b:	4c 89 ea             	mov    %r13,%rdx
  41a81e:	4c 39 ed             	cmp    %r13,%rbp
  41a821:	48 0f 46 d5          	cmovbe %rbp,%rdx
	if (__n == 0)
  41a825:	48 85 d2             	test   %rdx,%rdx
  41a828:	75 be                	jne    41a7e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x48>
	const difference_type __d = difference_type(__n1 - __n2);
  41a82a:	4c 89 e8             	mov    %r13,%rax
  41a82d:	48 29 e8             	sub    %rbp,%rax
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
  41a830:	48 3d ff ff ff 7f    	cmp    $0x7fffffff,%rax
  41a836:	7f d1                	jg     41a809 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x69>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
  41a838:	48 3d 00 00 00 80    	cmp    $0xffffffff80000000,%rax
  41a83e:	7d c5                	jge    41a805 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x65>
  41a840:	48 8b 43 10          	mov    0x10(%rbx),%rax
  41a844:	be 01 00 00 00       	mov    $0x1,%esi
  41a849:	48 85 c0             	test   %rax,%rax
  41a84c:	75 c6                	jne    41a814 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x74>
      if (__comp)
  41a84e:	40 84 f6             	test   %sil,%sil
  41a851:	48 89 dd             	mov    %rbx,%rbp
  41a854:	75 42                	jne    41a898 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xf8>
    { return __lhs.compare(__rhs) < 0; }
  41a856:	48 b8 a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rax
  41a85d:	ff ff ff 
  41a860:	48 8d 7d 20          	lea    0x20(%rbp),%rdi
  41a864:	48 8b 34 24          	mov    (%rsp),%rsi
  41a868:	4c 01 f0             	add    %r14,%rax
  41a86b:	4d 89 f7             	mov    %r14,%r15
  41a86e:	ff d0                	callq  *%rax
	return _Res(__x, __y);
  41a870:	31 d2                	xor    %edx,%edx
  41a872:	85 c0                	test   %eax,%eax
  41a874:	48 0f 48 ea          	cmovs  %rdx,%rbp
  41a878:	48 0f 48 d3          	cmovs  %rbx,%rdx
    }
  41a87c:	48 83 c4 18          	add    $0x18,%rsp
  41a880:	48 89 e8             	mov    %rbp,%rax
  41a883:	5b                   	pop    %rbx
  41a884:	5d                   	pop    %rbp
  41a885:	41 5c                	pop    %r12
  41a887:	41 5d                	pop    %r13
  41a889:	41 5e                	pop    %r14
  41a88b:	41 5f                	pop    %r15
  41a88d:	c3                   	retq   
      { return &this->_M_impl._M_header; }
  41a88e:	48 8d 5f 08          	lea    0x8(%rdi),%rbx
  41a892:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  if (__j == begin())
  41a898:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	    return _Res(__x, __y);
  41a89d:	31 ed                	xor    %ebp,%ebp
  41a89f:	48 89 da             	mov    %rbx,%rdx
	  if (__j == begin())
  41a8a2:	48 39 58 18          	cmp    %rbx,0x18(%rax)
  41a8a6:	74 d4                	je     41a87c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xdc>
	_M_node = _Rb_tree_decrement(_M_node);
  41a8a8:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  41a8af:	ff ff ff 
  41a8b2:	48 89 df             	mov    %rbx,%rdi
  41a8b5:	4d 89 f7             	mov    %r14,%r15
  41a8b8:	4c 01 f0             	add    %r14,%rax
  41a8bb:	ff d0                	callq  *%rax
  41a8bd:	48 89 c5             	mov    %rax,%rbp
  41a8c0:	eb 94                	jmp    41a856 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xb6>
  41a8c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a8c9:	00 00 00 
  41a8cc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041a8d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41a8d0:	41 57                	push   %r15
      { return &this->_M_impl._M_header; }
  41a8d2:	48 8d 47 08          	lea    0x8(%rdi),%rax
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41a8d6:	41 56                	push   %r14
  41a8d8:	4c 8d 3d f1 ff ff ff 	lea    -0xf(%rip),%r15        # 41a8d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>
  41a8df:	41 55                	push   %r13
  41a8e1:	41 54                	push   %r12
  41a8e3:	55                   	push   %rbp
  41a8e4:	53                   	push   %rbx
  41a8e5:	49 bb 30 07 21 00 00 	movabs $0x210730,%r11
  41a8ec:	00 00 00 
  41a8ef:	4d 01 df             	add    %r11,%r15
  41a8f2:	49 89 fd             	mov    %rdi,%r13
  41a8f5:	49 89 d4             	mov    %rdx,%r12
  41a8f8:	48 83 ec 08          	sub    $0x8,%rsp
      if (__pos._M_node == _M_end())
  41a8fc:	48 39 c6             	cmp    %rax,%rsi
  41a8ff:	0f 84 93 00 00 00    	je     41a998 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xc8>
  41a905:	4c 8d 76 20          	lea    0x20(%rsi),%r14
  41a909:	48 bb a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rbx
  41a910:	ff ff ff 
  41a913:	48 89 f5             	mov    %rsi,%rbp
  41a916:	4c 01 fb             	add    %r15,%rbx
  41a919:	48 89 d7             	mov    %rdx,%rdi
  41a91c:	4c 89 f6             	mov    %r14,%rsi
  41a91f:	ff d3                	callq  *%rbx
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
  41a921:	85 c0                	test   %eax,%eax
  41a923:	78 2b                	js     41a950 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x80>
  41a925:	4c 89 e6             	mov    %r12,%rsi
  41a928:	4c 89 f7             	mov    %r14,%rdi
  41a92b:	ff d3                	callq  *%rbx
  41a92d:	89 c1                	mov    %eax,%ecx
	return _Res(__pos._M_node, 0);
  41a92f:	31 d2                	xor    %edx,%edx
  41a931:	48 89 e8             	mov    %rbp,%rax
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
  41a934:	85 c9                	test   %ecx,%ecx
  41a936:	0f 88 ac 00 00 00    	js     41a9e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x118>
    }
  41a93c:	48 83 c4 08          	add    $0x8,%rsp
  41a940:	5b                   	pop    %rbx
  41a941:	5d                   	pop    %rbp
  41a942:	41 5c                	pop    %r12
  41a944:	41 5d                	pop    %r13
  41a946:	41 5e                	pop    %r14
  41a948:	41 5f                	pop    %r15
  41a94a:	c3                   	retq   
  41a94b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  if (__pos._M_node == _M_leftmost()) // begin()
  41a950:	49 8b 45 18          	mov    0x18(%r13),%rax
  41a954:	48 39 e8             	cmp    %rbp,%rax
	    return _Res(_M_leftmost(), _M_leftmost());
  41a957:	48 89 c2             	mov    %rax,%rdx
	  if (__pos._M_node == _M_leftmost()) // begin()
  41a95a:	74 e0                	je     41a93c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
	_M_node = _Rb_tree_decrement(_M_node);
  41a95c:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  41a963:	ff ff ff 
  41a966:	48 89 ef             	mov    %rbp,%rdi
  41a969:	4c 01 f8             	add    %r15,%rax
  41a96c:	ff d0                	callq  *%rax
  41a96e:	4c 89 e6             	mov    %r12,%rsi
  41a971:	49 89 c6             	mov    %rax,%r14
  41a974:	48 8d 78 20          	lea    0x20(%rax),%rdi
  41a978:	ff d3                	callq  *%rbx
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
  41a97a:	85 c0                	test   %eax,%eax
  41a97c:	79 3f                	jns    41a9bd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xed>
	      if (_S_right(__before._M_node) == 0)
  41a97e:	49 83 7e 18 00       	cmpq   $0x0,0x18(%r14)
		return _Res(__pos._M_node, __pos._M_node);
  41a983:	48 89 e8             	mov    %rbp,%rax
  41a986:	48 89 ea             	mov    %rbp,%rdx
	      if (_S_right(__before._M_node) == 0)
  41a989:	75 b1                	jne    41a93c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
		return _Res(0, __before._M_node);
  41a98b:	31 c0                	xor    %eax,%eax
  41a98d:	4c 89 f2             	mov    %r14,%rdx
  41a990:	eb aa                	jmp    41a93c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
  41a992:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
  41a998:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
  41a99d:	74 1e                	je     41a9bd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xed>
  41a99f:	48 8b 5f 20          	mov    0x20(%rdi),%rbx
  41a9a3:	48 b8 a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rax
  41a9aa:	ff ff ff 
  41a9ad:	48 89 d6             	mov    %rdx,%rsi
  41a9b0:	4c 01 f8             	add    %r15,%rax
  41a9b3:	48 8d 7b 20          	lea    0x20(%rbx),%rdi
  41a9b7:	ff d0                	callq  *%rax
  41a9b9:	85 c0                	test   %eax,%eax
  41a9bb:	78 73                	js     41aa30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x160>
	    return _M_get_insert_unique_pos(__k);
  41a9bd:	48 b8 a0 f7 de ff ff 	movabs $0xffffffffffdef7a0,%rax
  41a9c4:	ff ff ff 
  41a9c7:	4c 89 e6             	mov    %r12,%rsi
  41a9ca:	4c 89 ef             	mov    %r13,%rdi
  41a9cd:	4c 01 f8             	add    %r15,%rax
  41a9d0:	ff d0                	callq  *%rax
    }
  41a9d2:	48 83 c4 08          	add    $0x8,%rsp
  41a9d6:	5b                   	pop    %rbx
  41a9d7:	5d                   	pop    %rbp
  41a9d8:	41 5c                	pop    %r12
  41a9da:	41 5d                	pop    %r13
  41a9dc:	41 5e                	pop    %r14
  41a9de:	41 5f                	pop    %r15
  41a9e0:	c3                   	retq   
  41a9e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  if (__pos._M_node == _M_rightmost())
  41a9e8:	49 8b 55 20          	mov    0x20(%r13),%rdx
  41a9ec:	48 39 ea             	cmp    %rbp,%rdx
  41a9ef:	74 57                	je     41aa48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x178>
	_M_node = _Rb_tree_increment(_M_node);
  41a9f1:	48 b8 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%rax
  41a9f8:	ff ff ff 
  41a9fb:	48 89 ef             	mov    %rbp,%rdi
  41a9fe:	4c 01 f8             	add    %r15,%rax
  41aa01:	ff d0                	callq  *%rax
  41aa03:	4c 89 e7             	mov    %r12,%rdi
  41aa06:	49 89 c6             	mov    %rax,%r14
  41aa09:	48 8d 70 20          	lea    0x20(%rax),%rsi
  41aa0d:	ff d3                	callq  *%rbx
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
  41aa0f:	85 c0                	test   %eax,%eax
  41aa11:	79 aa                	jns    41a9bd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xed>
	      if (_S_right(__pos._M_node) == 0)
  41aa13:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
		return _Res(__after._M_node, __after._M_node);
  41aa18:	4c 89 f0             	mov    %r14,%rax
  41aa1b:	4c 89 f2             	mov    %r14,%rdx
	      if (_S_right(__pos._M_node) == 0)
  41aa1e:	0f 85 18 ff ff ff    	jne    41a93c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
		return _Res(0, __pos._M_node);
  41aa24:	31 c0                	xor    %eax,%eax
  41aa26:	48 89 ea             	mov    %rbp,%rdx
  41aa29:	e9 0e ff ff ff       	jmpq   41a93c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
  41aa2e:	66 90                	xchg   %ax,%ax
    }
  41aa30:	48 83 c4 08          	add    $0x8,%rsp
	    return _Res(0, _M_rightmost());
  41aa34:	48 89 da             	mov    %rbx,%rdx
  41aa37:	31 c0                	xor    %eax,%eax
    }
  41aa39:	5b                   	pop    %rbx
  41aa3a:	5d                   	pop    %rbp
  41aa3b:	41 5c                	pop    %r12
  41aa3d:	41 5d                	pop    %r13
  41aa3f:	41 5e                	pop    %r14
  41aa41:	41 5f                	pop    %r15
  41aa43:	c3                   	retq   
  41aa44:	0f 1f 40 00          	nopl   0x0(%rax)
	    return _Res(0, _M_rightmost());
  41aa48:	31 c0                	xor    %eax,%eax
  41aa4a:	e9 ed fe ff ff       	jmpq   41a93c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
  41aa4f:	90                   	nop

000000000041aa50 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
        virtual void set_option_name(const std::string& option_name)
  41aa50:	41 57                	push   %r15
  41aa52:	41 56                	push   %r14
  41aa54:	49 bb b0 05 21 00 00 	movabs $0x2105b0,%r11
  41aa5b:	00 00 00 
  41aa5e:	41 55                	push   %r13
  41aa60:	41 54                	push   %r12
  41aa62:	49 89 ff             	mov    %rdi,%r15
  41aa65:	55                   	push   %rbp
  41aa66:	53                   	push   %rbx
  41aa67:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41aa50 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  41aa6e:	48 83 ec 58          	sub    $0x58,%rsp
  41aa72:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  41aa75:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  41aa7a:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  41aa7f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41aa84:	48 89 c8             	mov    %rcx,%rax
  41aa87:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  41aa8c:	48 89 cf             	mov    %rcx,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41aa8f:	48 83 c0 10          	add    $0x10,%rax
  41aa93:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
          _M_construct(__beg, __end, _Tag());
  41aa98:	48 b8 ce 8c df ff ff 	movabs $0xffffffffffdf8cce,%rax
  41aa9f:	ff ff ff 
  41aaa2:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41aaa6:	48 b8 c8 8c df ff ff 	movabs $0xffffffffffdf8cc8,%rax
  41aaad:	ff ff ff 
  41aab0:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41aab4:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  41aabb:	ff ff ff 
  41aabe:	48 01 d8             	add    %rbx,%rax
  41aac1:	ff d0                	callq  *%rax
      { return &this->_M_impl._M_header; }
  41aac3:	49 8d 4f 20          	lea    0x20(%r15),%rcx
  41aac7:	48 89 cd             	mov    %rcx,%rbp
  41aaca:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  41aacf:	49 8b 4f 28          	mov    0x28(%r15),%rcx
      while (__x != 0)
  41aad3:	48 85 c9             	test   %rcx,%rcx
  41aad6:	0f 84 f4 00 00 00    	je     41abd0 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
  41aadc:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41aae1:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  41aae6:	49 89 ce             	mov    %rcx,%r14
  41aae9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41aaee:	eb 2f                	jmp    41ab1f <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf>
	return __builtin_memcmp(__s1, __s2, __n);
  41aaf0:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  41aaf7:	ff ff ff 
  41aafa:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  41aafe:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41ab03:	48 01 d8             	add    %rbx,%rax
  41ab06:	49 89 df             	mov    %rbx,%r15
  41ab09:	ff d0                	callq  *%rax
	if (!__r)
  41ab0b:	85 c0                	test   %eax,%eax
  41ab0d:	74 23                	je     41ab32 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe2>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41ab0f:	85 c0                	test   %eax,%eax
  41ab11:	78 3e                	js     41ab51 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x101>
	  __x = _S_right(__x);
  41ab13:	4c 89 f5             	mov    %r14,%rbp
	  __y = __x, __x = _S_left(__x);
  41ab16:	4d 8b 76 10          	mov    0x10(%r14),%r14
      while (__x != 0)
  41ab1a:	4d 85 f6             	test   %r14,%r14
  41ab1d:	74 3b                	je     41ab5a <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10a>
  41ab1f:	4d 8b 6e 28          	mov    0x28(%r14),%r13
  41ab23:	4c 89 e2             	mov    %r12,%rdx
  41ab26:	4d 39 e5             	cmp    %r12,%r13
  41ab29:	49 0f 46 d5          	cmovbe %r13,%rdx
	if (__n == 0)
  41ab2d:	48 85 d2             	test   %rdx,%rdx
  41ab30:	75 be                	jne    41aaf0 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>
	const difference_type __d = difference_type(__n1 - __n2);
  41ab32:	4d 89 e8             	mov    %r13,%r8
  41ab35:	4d 29 e0             	sub    %r12,%r8
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
  41ab38:	49 81 f8 ff ff ff 7f 	cmp    $0x7fffffff,%r8
  41ab3f:	7f d2                	jg     41ab13 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc3>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
  41ab41:	49 81 f8 00 00 00 80 	cmp    $0xffffffff80000000,%r8
  41ab48:	7c 07                	jl     41ab51 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x101>
	  return int(__d);
  41ab4a:	44 89 c0             	mov    %r8d,%eax
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41ab4d:	85 c0                	test   %eax,%eax
  41ab4f:	79 c2                	jns    41ab13 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc3>
  41ab51:	4d 8b 76 18          	mov    0x18(%r14),%r14
      while (__x != 0)
  41ab55:	4d 85 f6             	test   %r14,%r14
  41ab58:	75 c5                	jne    41ab1f <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf>
	if (__i == end() || key_comp()(__k, (*__i).first))
  41ab5a:	48 39 6c 24 18       	cmp    %rbp,0x18(%rsp)
  41ab5f:	74 6f                	je     41abd0 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
    { return __lhs.compare(__rhs) < 0; }
  41ab61:	48 b8 a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rax
  41ab68:	ff ff ff 
  41ab6b:	48 8d 75 20          	lea    0x20(%rbp),%rsi
  41ab6f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41ab74:	48 01 d8             	add    %rbx,%rax
  41ab77:	49 89 df             	mov    %rbx,%r15
  41ab7a:	ff d0                	callq  *%rax
  41ab7c:	85 c0                	test   %eax,%eax
  41ab7e:	78 50                	js     41abd0 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
	this->_M_assign(__str);
  41ab80:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41ab87:	ff ff ff 
	return (*__i).second;
  41ab8a:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
  41ab8e:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  41ab93:	49 89 df             	mov    %rbx,%r15
  41ab96:	48 01 d8             	add    %rbx,%rax
  41ab99:	ff d0                	callq  *%rax
	if (!_M_is_local())
  41ab9b:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  41aba0:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41aba5:	49 83 c4 10          	add    $0x10,%r12
  41aba9:	4c 39 e7             	cmp    %r12,%rdi
  41abac:	74 0f                	je     41abbd <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16d>
  41abae:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41abb5:	ff ff ff 
  41abb8:	48 01 d8             	add    %rbx,%rax
  41abbb:	ff d0                	callq  *%rax
        {           set_substitute("option", option_name);}
  41abbd:	48 83 c4 58          	add    $0x58,%rsp
  41abc1:	5b                   	pop    %rbx
  41abc2:	5d                   	pop    %rbp
  41abc3:	41 5c                	pop    %r12
  41abc5:	41 5d                	pop    %r13
  41abc7:	41 5e                	pop    %r14
  41abc9:	41 5f                	pop    %r15
  41abcb:	c3                   	retq   
  41abcc:	0f 1f 40 00          	nopl   0x0(%rax)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41abd0:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41abd7:	ff ff ff 
  41abda:	bf 60 00 00 00       	mov    $0x60,%edi
  41abdf:	49 89 df             	mov    %rbx,%r15
  41abe2:	48 01 d8             	add    %rbx,%rax
  41abe5:	ff d0                	callq  *%rax
  41abe7:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  41abec:	49 89 c5             	mov    %rax,%r13
      { return static_cast<void*>(&_M_storage); }
  41abef:	4c 8d 78 20          	lea    0x20(%rax),%r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41abf3:	48 8d 40 30          	lea    0x30(%rax),%rax
          _M_construct(__beg, __end, _Tag());
  41abf7:	4c 89 ff             	mov    %r15,%rdi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41abfa:	49 89 c4             	mov    %rax,%r12
	: allocator_type(__a), _M_p(__dat) { }
  41abfd:	49 89 45 20          	mov    %rax,0x20(%r13)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41ac01:	48 89 f2             	mov    %rsi,%rdx
          _M_construct(__beg, __end, _Tag());
  41ac04:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  41ac0b:	ff ff ff 
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41ac0e:	48 03 54 24 38       	add    0x38(%rsp),%rdx
          _M_construct(__beg, __end, _Tag());
  41ac13:	48 01 d8             	add    %rbx,%rax
  41ac16:	ff d0                	callq  *%rax
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
  41ac18:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ac1d:	49 8d 4d 50          	lea    0x50(%r13),%rcx
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
  41ac21:	48 89 ee             	mov    %rbp,%rsi
      { _M_string_length = __length; }
  41ac24:	49 c7 45 48 00 00 00 	movq   $0x0,0x48(%r13)
  41ac2b:	00 
      { __c1 = __c2; }
  41ac2c:	41 c6 45 50 00       	movb   $0x0,0x50(%r13)
  41ac31:	4c 89 fa             	mov    %r15,%rdx
	: allocator_type(__a), _M_p(__dat) { }
  41ac34:	49 89 4d 40          	mov    %rcx,0x40(%r13)
  41ac38:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41ac3d:	48 8d 78 18          	lea    0x18(%rax),%rdi
  41ac41:	48 b8 d0 f8 de ff ff 	movabs $0xffffffffffdef8d0,%rax
  41ac48:	ff ff ff 
  41ac4b:	48 01 d8             	add    %rbx,%rax
  41ac4e:	ff d0                	callq  *%rax
	    if (__res.second)
  41ac50:	48 85 d2             	test   %rdx,%rdx
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
  41ac53:	48 89 c5             	mov    %rax,%rbp
	    if (__res.second)
  41ac56:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41ac5b:	74 6c                	je     41acc9 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x279>
      bool __insert_left = (__x != 0 || __p == _M_end()
  41ac5d:	48 39 54 24 18       	cmp    %rdx,0x18(%rsp)
  41ac62:	40 0f 94 c7          	sete   %dil
			    || _M_impl._M_key_compare(_S_key(__z),
  41ac66:	48 85 c0             	test   %rax,%rax
  41ac69:	0f 95 c0             	setne  %al
      bool __insert_left = (__x != 0 || __p == _M_end()
  41ac6c:	40 08 c7             	or     %al,%dil
  41ac6f:	75 28                	jne    41ac99 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x249>
    { return __lhs.compare(__rhs) < 0; }
  41ac71:	48 b8 a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rax
  41ac78:	ff ff ff 
  41ac7b:	4c 89 ff             	mov    %r15,%rdi
  41ac7e:	48 8d 72 20          	lea    0x20(%rdx),%rsi
  41ac82:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41ac87:	49 89 df             	mov    %rbx,%r15
  41ac8a:	48 01 d8             	add    %rbx,%rax
  41ac8d:	ff d0                	callq  *%rax
			    || _M_impl._M_key_compare(_S_key(__z),
  41ac8f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  41ac94:	c1 e8 1f             	shr    $0x1f,%eax
  41ac97:	89 c7                	mov    %eax,%edi
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  41ac99:	48 b8 f0 e3 dd ff ff 	movabs $0xffffffffffdde3f0,%rax
  41aca0:	ff ff ff 
  41aca3:	40 0f b6 ff          	movzbl %dil,%edi
  41aca7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  41acac:	48 01 d8             	add    %rbx,%rax
  41acaf:	4c 89 ee             	mov    %r13,%rsi
  41acb2:	49 89 df             	mov    %rbx,%r15
  41acb5:	ff d0                	callq  *%rax
      ++_M_impl._M_node_count;
  41acb7:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41acbc:	4c 89 ed             	mov    %r13,%rbp
  41acbf:	48 83 40 40 01       	addq   $0x1,0x40(%rax)
  41acc4:	e9 b7 fe ff ff       	jmpq   41ab80 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x130>
  41acc9:	49 8b 7d 40          	mov    0x40(%r13),%rdi
  41accd:	49 be 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r14
  41acd4:	ff ff ff 
	if (!_M_is_local())
  41acd7:	48 39 f9             	cmp    %rdi,%rcx
  41acda:	74 09                	je     41ace5 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x295>
      { ::operator delete(__p); }
  41acdc:	49 89 df             	mov    %rbx,%r15
  41acdf:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41ace3:	ff d0                	callq  *%rax
  41ace5:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  41ace9:	49 39 fc             	cmp    %rdi,%r12
  41acec:	74 09                	je     41acf7 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a7>
  41acee:	49 89 df             	mov    %rbx,%r15
  41acf1:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41acf5:	ff d0                	callq  *%rax
  41acf7:	4c 89 ef             	mov    %r13,%rdi
  41acfa:	49 89 df             	mov    %rbx,%r15
  41acfd:	49 01 de             	add    %rbx,%r14
  41ad00:	41 ff d6             	callq  *%r14
  41ad03:	e9 78 fe ff ff       	jmpq   41ab80 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x130>
	  __catch(...)
  41ad08:	48 89 c7             	mov    %rax,%rdi
  41ad0b:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41ad12:	ff ff ff 
  41ad15:	49 89 df             	mov    %rbx,%r15
  41ad18:	48 01 d8             	add    %rbx,%rax
  41ad1b:	ff d0                	callq  *%rax
  41ad1d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ad24:	ff ff ff 
  41ad27:	4c 89 ef             	mov    %r13,%rdi
  41ad2a:	48 01 d8             	add    %rbx,%rax
  41ad2d:	ff d0                	callq  *%rax
	      __throw_exception_again;
  41ad2f:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41ad36:	ff ff ff 
  41ad39:	48 01 d8             	add    %rbx,%rax
  41ad3c:	ff d0                	callq  *%rax
  41ad3e:	48 89 c5             	mov    %rax,%rbp
  41ad41:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  41ad46:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41ad4b:	49 83 c4 10          	add    $0x10,%r12
  41ad4f:	4c 39 e7             	cmp    %r12,%rdi
  41ad52:	74 12                	je     41ad66 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x316>
  41ad54:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ad5b:	ff ff ff 
  41ad5e:	49 89 df             	mov    %rbx,%r15
  41ad61:	48 01 d8             	add    %rbx,%rax
  41ad64:	ff d0                	callq  *%rax
  41ad66:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41ad6d:	ff ff ff 
  41ad70:	48 89 ef             	mov    %rbp,%rdi
  41ad73:	49 89 df             	mov    %rbx,%r15
  41ad76:	48 01 d8             	add    %rbx,%rax
  41ad79:	ff d0                	callq  *%rax
  41ad7b:	48 89 c5             	mov    %rax,%rbp
	  __catch(...)
  41ad7e:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  41ad85:	ff ff ff 
  41ad88:	49 89 df             	mov    %rbx,%r15
  41ad8b:	48 01 d8             	add    %rbx,%rax
  41ad8e:	ff d0                	callq  *%rax
  41ad90:	eb af                	jmp    41ad41 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f1>
  41ad92:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ad99:	00 00 00 
  41ad9c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041ada0 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_>:
template<class T> inline void checked_delete(T * x)
  41ada0:	41 57                	push   %r15
  41ada2:	41 56                	push   %r14
  41ada4:	49 bb 60 02 21 00 00 	movabs $0x210260,%r11
  41adab:	00 00 00 
  41adae:	41 55                	push   %r13
  41adb0:	41 54                	push   %r12
  41adb2:	55                   	push   %rbp
  41adb3:	48 8d 2d e6 ff ff ff 	lea    -0x1a(%rip),%rbp        # 41ada0 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_>
  41adba:	53                   	push   %rbx
  41adbb:	4c 01 dd             	add    %r11,%rbp
  41adbe:	48 83 ec 18          	sub    $0x18,%rsp
    delete x;
  41adc2:	48 85 ff             	test   %rdi,%rdi
  41adc5:	0f 84 d5 00 00 00    	je     41aea0 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x100>
  41adcb:	4c 8b 7f 10          	mov    0x10(%rdi),%r15
  41adcf:	49 89 fc             	mov    %rdi,%r12
      while (__x != 0)
  41add2:	4d 85 ff             	test   %r15,%r15
  41add5:	0f 84 9d 00 00 00    	je     41ae78 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0xd8>
	  _M_erase(_S_right(__x));
  41addb:	48 b8 80 d1 de ff ff 	movabs $0xffffffffffded180,%rax
  41ade2:	ff ff ff 
  41ade5:	49 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r13
  41adec:	ff ff ff 
  41adef:	4c 8d 34 28          	lea    (%rax,%rbp,1),%r14
  41adf3:	48 b8 80 81 de ff ff 	movabs $0xffffffffffde8180,%rax
  41adfa:	ff ff ff 
  41adfd:	49 01 ed             	add    %rbp,%r13
  41ae00:	48 01 e8             	add    %rbp,%rax
  41ae03:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41ae08:	eb 17                	jmp    41ae21 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x81>
  41ae0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41ae10:	4c 89 ff             	mov    %r15,%rdi
  41ae13:	49 89 ef             	mov    %rbp,%r15
  41ae16:	41 ff d5             	callq  *%r13
      while (__x != 0)
  41ae19:	48 85 db             	test   %rbx,%rbx
  41ae1c:	49 89 df             	mov    %rbx,%r15
  41ae1f:	74 57                	je     41ae78 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0xd8>
	  _M_erase(_S_right(__x));
  41ae21:	49 8b 77 18          	mov    0x18(%r15),%rsi
  41ae25:	4c 89 e7             	mov    %r12,%rdi
  41ae28:	41 ff d6             	callq  *%r14
        if( pi_ != 0 ) pi_->release();
  41ae2b:	49 8b 47 28          	mov    0x28(%r15),%rax
  41ae2f:	49 8b 5f 10          	mov    0x10(%r15),%rbx
  41ae33:	48 85 c0             	test   %rax,%rax
  41ae36:	74 d8                	je     41ae10 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
        if( atomic_decrement( &use_count_ ) == 1 )
  41ae38:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  41ae3d:	75 d1                	jne    41ae10 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
            dispose();
  41ae3f:	48 8b 10             	mov    (%rax),%rdx
  41ae42:	48 89 c7             	mov    %rax,%rdi
  41ae45:	48 89 04 24          	mov    %rax,(%rsp)
  41ae49:	ff 52 10             	callq  *0x10(%rdx)
      { return __atomic_fetch_sub(&_M_i, __i, __m); }
  41ae4c:	48 8b 04 24          	mov    (%rsp),%rax
  41ae50:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  41ae55:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41ae5a:	83 fa 01             	cmp    $0x1,%edx
  41ae5d:	75 b1                	jne    41ae10 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
            destroy();
  41ae5f:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  41ae62:	48 89 c7             	mov    %rax,%rdi
            destroy();
  41ae65:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  41ae69:	48 3b 4c 24 08       	cmp    0x8(%rsp),%rcx
  41ae6e:	75 3f                	jne    41aeaf <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x10f>
        delete this;
  41ae70:	ff 52 08             	callq  *0x8(%rdx)
  41ae73:	eb 9b                	jmp    41ae10 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
  41ae75:	0f 1f 00             	nopl   (%rax)
}
  41ae78:	48 83 c4 18          	add    $0x18,%rsp
    delete x;
  41ae7c:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41ae83:	ff ff ff 
  41ae86:	4c 89 e7             	mov    %r12,%rdi
}
  41ae89:	5b                   	pop    %rbx
    delete x;
  41ae8a:	48 01 e8             	add    %rbp,%rax
  41ae8d:	be 30 00 00 00       	mov    $0x30,%esi
}
  41ae92:	5d                   	pop    %rbp
  41ae93:	41 5c                	pop    %r12
  41ae95:	41 5d                	pop    %r13
  41ae97:	41 5e                	pop    %r14
  41ae99:	41 5f                	pop    %r15
    delete x;
  41ae9b:	ff e0                	jmpq   *%rax
  41ae9d:	0f 1f 00             	nopl   (%rax)
}
  41aea0:	48 83 c4 18          	add    $0x18,%rsp
  41aea4:	5b                   	pop    %rbx
  41aea5:	5d                   	pop    %rbp
  41aea6:	41 5c                	pop    %r12
  41aea8:	41 5d                	pop    %r13
  41aeaa:	41 5e                	pop    %r14
  41aeac:	41 5f                	pop    %r15
  41aeae:	c3                   	retq   
            destroy();
  41aeaf:	ff d1                	callq  *%rcx
  41aeb1:	e9 5a ff ff ff       	jmpq   41ae10 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
  41aeb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41aebd:	00 00 00 

000000000041aec0 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_>:
template<class T> inline void checked_delete(T * x)
  41aec0:	41 57                	push   %r15
  41aec2:	55                   	push   %rbp
  41aec3:	48 8d 2d f6 ff ff ff 	lea    -0xa(%rip),%rbp        # 41aec0 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_>
  41aeca:	49 bb 40 01 21 00 00 	movabs $0x210140,%r11
  41aed1:	00 00 00 
  41aed4:	53                   	push   %rbx
  41aed5:	4c 01 dd             	add    %r11,%rbp
    delete x;
  41aed8:	48 85 ff             	test   %rdi,%rdi
  41aedb:	74 3b                	je     41af18 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_+0x58>
  41aedd:	48 89 fb             	mov    %rdi,%rbx
  41aee0:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  41aee4:	48 85 ff             	test   %rdi,%rdi
  41aee7:	74 0f                	je     41aef8 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_+0x38>
  41aee9:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41aef0:	ff ff ff 
  41aef3:	48 01 e8             	add    %rbp,%rax
  41aef6:	ff d0                	callq  *%rax
  41aef8:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41aeff:	ff ff ff 
  41af02:	48 89 df             	mov    %rbx,%rdi
  41af05:	be 10 00 00 00       	mov    $0x10,%esi
}
  41af0a:	5b                   	pop    %rbx
    delete x;
  41af0b:	48 01 e8             	add    %rbp,%rax
}
  41af0e:	5d                   	pop    %rbp
  41af0f:	41 5f                	pop    %r15
    delete x;
  41af11:	ff e0                	jmpq   *%rax
  41af13:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
}
  41af18:	5b                   	pop    %rbx
  41af19:	5d                   	pop    %rbp
  41af1a:	41 5f                	pop    %r15
  41af1c:	c3                   	retq   
  41af1d:	0f 1f 00             	nopl   (%rax)

000000000041af20 <_ZNK4YAML4Node16EnsureNodeExistsEv>:
inline void Node::EnsureNodeExists() const {
  41af20:	41 57                	push   %r15
  41af22:	41 56                	push   %r14
  41af24:	49 bb e0 00 21 00 00 	movabs $0x2100e0,%r11
  41af2b:	00 00 00 
  41af2e:	41 55                	push   %r13
  41af30:	41 54                	push   %r12
  41af32:	55                   	push   %rbp
  41af33:	53                   	push   %rbx
  41af34:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41af20 <_ZNK4YAML4Node16EnsureNodeExistsEv>
  41af3b:	48 83 ec 08          	sub    $0x8,%rsp
  41af3f:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41af42:	80 3f 00             	cmpb   $0x0,(%rdi)
  41af45:	0f 84 90 01 00 00    	je     41b0db <_ZNK4YAML4Node16EnsureNodeExistsEv+0x1bb>
  if (!m_pNode) {
  41af4b:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
  41af50:	48 89 fd             	mov    %rdi,%rbp
  41af53:	74 13                	je     41af68 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x48>
}
  41af55:	48 83 c4 08          	add    $0x8,%rsp
  41af59:	5b                   	pop    %rbx
  41af5a:	5d                   	pop    %rbp
  41af5b:	41 5c                	pop    %r12
  41af5d:	41 5d                	pop    %r13
  41af5f:	41 5e                	pop    %r14
  41af61:	41 5f                	pop    %r15
  41af63:	c3                   	retq   
  41af64:	0f 1f 40 00          	nopl   0x0(%rax)
    m_pMemory.reset(new detail::memory_holder);
  41af68:	49 be 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%r14
  41af6f:	ff ff ff 
  41af72:	bf 10 00 00 00       	mov    $0x10,%edi
  41af77:	49 89 df             	mov    %rbx,%r15
  41af7a:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  41af7e:	41 ff d5             	callq  *%r13
  Nodes m_nodes;
};

class YAML_CPP_API memory_holder {
 public:
  memory_holder() : m_pMemory(new memory) {}
  41af81:	bf 30 00 00 00       	mov    $0x30,%edi
  41af86:	49 89 c4             	mov    %rax,%r12
  41af89:	41 ff d5             	callq  *%r13
  41af8c:	49 89 c5             	mov    %rax,%r13
	    _M_node_count(0)
  41af8f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  41af96:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41af9d:	00 
  41af9e:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  41afa5:	00 
	    this->_M_header._M_left = &this->_M_header;
  41afa6:	48 8d 40 08          	lea    0x8(%rax),%rax
    explicit shared_ptr( Y * p ): px( p ), pn() // Y must be complete
  41afaa:	4d 89 2c 24          	mov    %r13,(%r12)
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41afae:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
  41afb5:	00 00 
            pi_ = new sp_counted_impl_p<Y>( p );
  41afb7:	bf 18 00 00 00       	mov    $0x18,%edi
  41afbc:	49 89 45 18          	mov    %rax,0x18(%r13)
	    this->_M_header._M_right = &this->_M_header;
  41afc0:	49 89 45 20          	mov    %rax,0x20(%r13)
  41afc4:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41afc8:	ff d0                	callq  *%rax
        return *this;
    }

    void swap(shared_count & r) // nothrow
    {
        sp_counted_base * tmp = r.pi_;
  41afca:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    explicit sp_counted_impl_p( X * px ): px_( px )
  41afcf:	48 ba c0 ef ff ff ff 	movabs $0xffffffffffffefc0,%rdx
  41afd6:	ff ff ff 
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
  41afd9:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41afe0:	48 01 da             	add    %rbx,%rdx
  41afe3:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41afea:	4c 89 68 10          	mov    %r13,0x10(%rax)
  41afee:	48 89 10             	mov    %rdx,(%rax)
        r.pi_ = pi_;
  41aff1:	49 89 44 24 08       	mov    %rax,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  41aff6:	48 85 ff             	test   %rdi,%rdi
  41aff9:	74 0f                	je     41b00a <_ZNK4YAML4Node16EnsureNodeExistsEv+0xea>
  41affb:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41b002:	ff ff ff 
  41b005:	48 01 d8             	add    %rbx,%rax
  41b008:	ff d0                	callq  *%rax
        BOOST_ASSERT( p == 0 || p != px ); // catch self-reset errors
  41b00a:	4c 3b 65 08          	cmp    0x8(%rbp),%r12
  41b00e:	0f 84 66 01 00 00    	je     41b17a <_ZNK4YAML4Node16EnsureNodeExistsEv+0x25a>
            pi_ = new sp_counted_impl_p<Y>( p );
  41b014:	bf 18 00 00 00       	mov    $0x18,%edi
  41b019:	49 89 df             	mov    %rbx,%r15
  41b01c:	49 01 de             	add    %rbx,%r14
  41b01f:	41 ff d6             	callq  *%r14
        sp_counted_base * tmp = r.pi_;
  41b022:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41b026:	48 ba 08 f0 ff ff ff 	movabs $0xfffffffffffff008,%rdx
  41b02d:	ff ff ff 
  41b030:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41b037:	48 01 da             	add    %rbx,%rdx
  41b03a:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41b041:	4c 89 60 10          	mov    %r12,0x10(%rax)
  41b045:	48 89 10             	mov    %rdx,(%rax)
  41b048:	4c 89 65 08          	mov    %r12,0x8(%rbp)
        if( pi_ != 0 ) pi_->release();
  41b04c:	48 85 ff             	test   %rdi,%rdi
        r.pi_ = pi_;
  41b04f:	48 89 45 10          	mov    %rax,0x10(%rbp)
        if( pi_ != 0 ) pi_->release();
  41b053:	74 1c                	je     41b071 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x151>
  41b055:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41b05c:	ff ff ff 
  41b05f:	48 01 d8             	add    %rbx,%rax
  41b062:	ff d0                	callq  *%rax
  41b064:	4c 8b 65 08          	mov    0x8(%rbp),%r12
        BOOST_ASSERT( px != 0 );
  41b068:	4d 85 e4             	test   %r12,%r12
  41b06b:	0f 84 36 02 00 00    	je     41b2a7 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x387>
  41b071:	49 8b 3c 24          	mov    (%r12),%rdi
  41b075:	48 85 ff             	test   %rdi,%rdi
  41b078:	0f 84 f9 01 00 00    	je     41b277 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x357>

  node& create_node() { return m_pMemory->create_node(); }
  41b07e:	48 b8 a0 e4 dd ff ff 	movabs $0xffffffffffdde4a0,%rax
  41b085:	ff ff ff 
  41b088:	49 89 df             	mov    %rbx,%r15
  41b08b:	48 01 d8             	add    %rbx,%rax
  41b08e:	ff d0                	callq  *%rax
  41b090:	49 89 c4             	mov    %rax,%r12
    m_pNode = &m_pMemory->create_node();
  41b093:	48 89 45 18          	mov    %rax,0x18(%rbp)
    if (type != NodeType::Undefined)
      mark_defined();
    m_pRef->set_type(type);
  }
  void set_null() {
    mark_defined();
  41b097:	48 89 c7             	mov    %rax,%rdi
  41b09a:	48 b8 60 da de ff ff 	movabs $0xffffffffffdeda60,%rax
  41b0a1:	ff ff ff 
  41b0a4:	48 01 d8             	add    %rbx,%rax
  41b0a7:	ff d0                	callq  *%rax
  41b0a9:	49 8b 04 24          	mov    (%r12),%rax
  41b0ad:	48 85 c0             	test   %rax,%rax
  41b0b0:	0f 84 00 02 00 00    	je     41b2b6 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x396>
  41b0b6:	48 8b 38             	mov    (%rax),%rdi
  41b0b9:	48 85 ff             	test   %rdi,%rdi
  41b0bc:	74 77                	je     41b135 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x215>
}
  41b0be:	48 83 c4 08          	add    $0x8,%rsp
  void set_null() { m_pData->set_null(); }
  41b0c2:	48 b8 60 e4 dd ff ff 	movabs $0xffffffffffdde460,%rax
  41b0c9:	ff ff ff 
  41b0cc:	48 01 d8             	add    %rbx,%rax
  41b0cf:	5b                   	pop    %rbx
  41b0d0:	5d                   	pop    %rbp
  41b0d1:	41 5c                	pop    %r12
  41b0d3:	41 5d                	pop    %r13
  41b0d5:	41 5e                	pop    %r14
  41b0d7:	41 5f                	pop    %r15
  41b0d9:	ff e0                	jmpq   *%rax
    throw InvalidNode();
  41b0db:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41b0e2:	ff ff ff 
  41b0e5:	bf 40 00 00 00       	mov    $0x40,%edi
  41b0ea:	49 89 df             	mov    %rbx,%r15
  41b0ed:	48 01 d8             	add    %rbx,%rax
  41b0f0:	ff d0                	callq  *%rax
  41b0f2:	48 89 c5             	mov    %rax,%rbp
  41b0f5:	48 89 c7             	mov    %rax,%rdi
  41b0f8:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  41b0ff:	ff ff ff 
  41b102:	48 01 d8             	add    %rbx,%rax
  41b105:	ff d0                	callq  *%rax
  41b107:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  41b10e:	ff ff ff 
  41b111:	48 89 ef             	mov    %rbp,%rdi
  41b114:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41b118:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41b11f:	ff ff ff 
  41b122:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41b126:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41b12d:	ff ff ff 
  41b130:	48 01 d8             	add    %rbx,%rax
  41b133:	ff d0                	callq  *%rax
  41b135:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  41b13c:	ff ff ff 
  41b13f:	48 01 d8             	add    %rbx,%rax
  41b142:	ff d0                	callq  *%rax
        catch(...)
  41b144:	48 89 c7             	mov    %rax,%rdi
  41b147:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41b14e:	ff ff ff 
  41b151:	49 89 df             	mov    %rbx,%r15
  41b154:	48 01 d8             	add    %rbx,%rax
  41b157:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41b159:	48 b8 c0 fe de ff ff 	movabs $0xffffffffffdefec0,%rax
  41b160:	ff ff ff 
  41b163:	4c 89 e7             	mov    %r12,%rdi
  41b166:	48 01 d8             	add    %rbx,%rax
  41b169:	ff d0                	callq  *%rax
            throw;
  41b16b:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41b172:	ff ff ff 
  41b175:	48 01 d8             	add    %rbx,%rax
  41b178:	ff d0                	callq  *%rax
        BOOST_ASSERT( p == 0 || p != px ); // catch self-reset errors
  41b17a:	48 b8 a0 8b df ff ff 	movabs $0xffffffffffdf8ba0,%rax
  41b181:	ff ff ff 
  41b184:	ba ba 02 00 00       	mov    $0x2ba,%edx
  41b189:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  41b18d:	48 b8 20 7d df ff ff 	movabs $0xffffffffffdf7d20,%rax
  41b194:	ff ff ff 
  41b197:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41b19b:	48 b8 cf 8c df ff ff 	movabs $0xffffffffffdf8ccf,%rax
  41b1a2:	ff ff ff 
        BOOST_ASSERT( px != 0 );
  41b1a5:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41b1a9:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  41b1b0:	ff ff ff 
  41b1b3:	49 89 df             	mov    %rbx,%r15
  41b1b6:	48 01 d8             	add    %rbx,%rax
  41b1b9:	ff d0                	callq  *%rax
        catch(...)
  41b1bb:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41b1c2:	ff ff ff 
  41b1c5:	48 89 c5             	mov    %rax,%rbp
  41b1c8:	49 89 df             	mov    %rbx,%r15
  41b1cb:	48 01 da             	add    %rbx,%rdx
  41b1ce:	ff d2                	callq  *%rdx
  41b1d0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41b1d7:	ff ff ff 
  41b1da:	48 89 ef             	mov    %rbp,%rdi
  41b1dd:	48 01 d8             	add    %rbx,%rax
  41b1e0:	ff d0                	callq  *%rax
  41b1e2:	48 89 c7             	mov    %rax,%rdi
  41b1e5:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41b1ec:	ff ff ff 
  41b1ef:	49 89 df             	mov    %rbx,%r15
  41b1f2:	48 01 d8             	add    %rbx,%rax
  41b1f5:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41b1f7:	48 b8 a0 fd de ff ff 	movabs $0xffffffffffdefda0,%rax
  41b1fe:	ff ff ff 
  41b201:	4c 89 ef             	mov    %r13,%rdi
  41b204:	48 01 d8             	add    %rbx,%rax
  41b207:	ff d0                	callq  *%rax
            throw;
  41b209:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41b210:	ff ff ff 
  41b213:	48 01 d8             	add    %rbx,%rax
  41b216:	ff d0                	callq  *%rax
  41b218:	48 89 c5             	mov    %rax,%rbp
    m_pMemory.reset(new detail::memory_holder);
  41b21b:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41b222:	ff ff ff 
  41b225:	4c 89 e7             	mov    %r12,%rdi
  41b228:	be 10 00 00 00       	mov    $0x10,%esi
  41b22d:	48 01 d8             	add    %rbx,%rax
  41b230:	49 89 df             	mov    %rbx,%r15
  41b233:	ff d0                	callq  *%rax
  41b235:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41b23c:	ff ff ff 
  41b23f:	48 89 ef             	mov    %rbp,%rdi
  41b242:	48 01 d8             	add    %rbx,%rax
  41b245:	ff d0                	callq  *%rax
  41b247:	48 89 c5             	mov    %rax,%rbp
        catch(...)
  41b24a:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  41b251:	ff ff ff 
  41b254:	49 89 df             	mov    %rbx,%r15
  41b257:	48 01 d8             	add    %rbx,%rax
  41b25a:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41b25c:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  41b261:	48 85 ff             	test   %rdi,%rdi
  41b264:	74 b5                	je     41b21b <_ZNK4YAML4Node16EnsureNodeExistsEv+0x2fb>
  41b266:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41b26d:	ff ff ff 
  41b270:	48 01 d8             	add    %rbx,%rax
  41b273:	ff d0                	callq  *%rax
  41b275:	eb a4                	jmp    41b21b <_ZNK4YAML4Node16EnsureNodeExistsEv+0x2fb>
  41b277:	48 b8 e0 89 df ff ff 	movabs $0xffffffffffdf89e0,%rax
  41b27e:	ff ff ff 
  41b281:	ba de 02 00 00       	mov    $0x2de,%edx
  41b286:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  41b28a:	48 b8 20 7d df ff ff 	movabs $0xffffffffffdf7d20,%rax
  41b291:	ff ff ff 
  41b294:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41b298:	48 b8 e9 80 df ff ff 	movabs $0xffffffffffdf80e9,%rax
  41b29f:	ff ff ff 
  41b2a2:	e9 fe fe ff ff       	jmpq   41b1a5 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x285>
  41b2a7:	48 b8 8e ec dd ff ff 	movabs $0xffffffffffddec8e,%rax
  41b2ae:	ff ff ff 
  41b2b1:	48 01 d8             	add    %rbx,%rax
  41b2b4:	ff d0                	callq  *%rax
  41b2b6:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  41b2bd:	ff ff ff 
  41b2c0:	48 01 d8             	add    %rbx,%rax
  41b2c3:	ff d0                	callq  *%rax
    throw InvalidNode();
  41b2c5:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41b2cc:	ff ff ff 
  41b2cf:	49 89 c4             	mov    %rax,%r12
  41b2d2:	48 89 ef             	mov    %rbp,%rdi
  41b2d5:	49 89 df             	mov    %rbx,%r15
  41b2d8:	48 01 da             	add    %rbx,%rdx
  41b2db:	ff d2                	callq  *%rdx
  41b2dd:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41b2e4:	ff ff ff 
  41b2e7:	4c 89 e7             	mov    %r12,%rdi
  41b2ea:	48 01 d8             	add    %rbx,%rax
  41b2ed:	ff d0                	callq  *%rax
  41b2ef:	90                   	nop

000000000041b2f0 <_ZNK4YAML4NodeixIiEEKS0_RKT_>:
inline const Node Node::operator[](const Key& key) const {
  41b2f0:	41 57                	push   %r15
  41b2f2:	41 56                	push   %r14
  41b2f4:	49 bb 10 fd 20 00 00 	movabs $0x20fd10,%r11
  41b2fb:	00 00 00 
  41b2fe:	41 55                	push   %r13
  41b300:	4c 8d 2d e9 ff ff ff 	lea    -0x17(%rip),%r13        # 41b2f0 <_ZNK4YAML4NodeixIiEEKS0_RKT_>
  41b307:	41 54                	push   %r12
  41b309:	55                   	push   %rbp
  41b30a:	53                   	push   %rbx
  41b30b:	4d 01 dd             	add    %r11,%r13
  41b30e:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  if (!m_isValid)
  41b315:	80 3e 00             	cmpb   $0x0,(%rsi)
inline const Node Node::operator[](const Key& key) const {
  41b318:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  41b31d:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  41b322:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  if (!m_isValid)
  41b327:	0f 84 3f 04 00 00    	je     41b76c <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x47c>
  41b32d:	48 89 f3             	mov    %rsi,%rbx
  EnsureNodeExists();
  41b330:	48 b8 20 ff de ff ff 	movabs $0xffffffffffdeff20,%rax
  41b337:	ff ff ff 
  41b33a:	48 89 f7             	mov    %rsi,%rdi
  41b33d:	4c 01 e8             	add    %r13,%rax
  41b340:	ff d0                	callq  *%rax
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41b342:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  41b346:	48 89 de             	mov    %rbx,%rsi
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b349:	48 8b 5b 10          	mov    0x10(%rbx),%rbx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41b34d:	48 85 db             	test   %rbx,%rbx
  41b350:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41b355:	0f 84 55 01 00 00    	je     41b4b0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1c0>
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  41b35b:	48 8d 43 08          	lea    0x8(%rbx),%rax
  41b35f:	f0 83 00 01          	lock addl $0x1,(%rax)
  detail::node* value = static_cast<const detail::node&>(*m_pNode)
  41b363:	48 8b 56 18          	mov    0x18(%rsi),%rdx
  41b367:	f0 83 00 01          	lock addl $0x1,(%rax)
  41b36b:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  41b36e:	48 85 d2             	test   %rdx,%rdx
  41b371:	0f 84 60 04 00 00    	je     41b7d7 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x4e7>
  41b377:	f0 83 00 01          	lock addl $0x1,(%rax)
  41b37b:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  41b380:	48 8b 02             	mov    (%rdx),%rax
  41b383:	48 85 c0             	test   %rax,%rax
  41b386:	0f 84 3c 04 00 00    	je     41b7c8 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x4d8>
  switch (m_type) {
  41b38c:	8b 50 04             	mov    0x4(%rax),%edx
  41b38f:	83 fa 02             	cmp    $0x2,%edx
  41b392:	0f 84 40 01 00 00    	je     41b4d8 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1e8>
  41b398:	0f 82 82 00 00 00    	jb     41b420 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x130>
  41b39e:	83 fa 03             	cmp    $0x3,%edx
  41b3a1:	0f 85 91 01 00 00    	jne    41b538 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x248>
  41b3a7:	48 85 db             	test   %rbx,%rbx
  41b3aa:	0f 84 00 03 00 00    	je     41b6b0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3c0>
  41b3b0:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  41b3b4:	f0 83 02 01          	lock addl $0x1,(%rdx)
    return key >= 0 ? get_idx<std::size_t>::get(
  41b3b8:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  41b3bd:	45 31 e4             	xor    %r12d,%r12d
  41b3c0:	48 bd 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rbp
  41b3c7:	ff ff ff 
  41b3ca:	8b 0e                	mov    (%rsi),%ecx
  41b3cc:	85 c9                	test   %ecx,%ecx
  41b3ce:	78 41                	js     41b411 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x121>
  41b3d0:	f0 83 02 01          	lock addl $0x1,(%rdx)
  41b3d4:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  41b3d9:	48 8b 48 50          	mov    0x50(%rax),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41b3dd:	48 8b 40 58          	mov    0x58(%rax),%rax
  41b3e1:	48 63 12             	movslq (%rdx),%rdx
  41b3e4:	48 29 c8             	sub    %rcx,%rax
  41b3e7:	48 c1 f8 03          	sar    $0x3,%rax
    return key < sequence.size() ? sequence[key] : 0;
  41b3eb:	48 39 d0             	cmp    %rdx,%rax
  41b3ee:	0f 86 1c 04 00 00    	jbe    41b810 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x520>
        if( pi_ != 0 ) pi_->release();
  41b3f4:	48 85 db             	test   %rbx,%rbx
  41b3f7:	4c 8b 24 d1          	mov    (%rcx,%rdx,8),%r12
  41b3fb:	74 49                	je     41b446 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x156>
  41b3fd:	48 bd 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rbp
  41b404:	ff ff ff 
  41b407:	48 89 df             	mov    %rbx,%rdi
  41b40a:	4a 8d 44 2d 00       	lea    0x0(%rbp,%r13,1),%rax
  41b40f:	ff d0                	callq  *%rax
  41b411:	48 89 df             	mov    %rbx,%rdi
  41b414:	4a 8d 44 2d 00       	lea    0x0(%rbp,%r13,1),%rax
  41b419:	ff d0                	callq  *%rax
  41b41b:	eb 06                	jmp    41b423 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x133>
  41b41d:	0f 1f 00             	nopl   (%rax)
      return NULL;
  41b420:	45 31 e4             	xor    %r12d,%r12d
  41b423:	48 85 db             	test   %rbx,%rbx
  41b426:	74 1e                	je     41b446 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x156>
  41b428:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41b42f:	ff ff ff 
  41b432:	48 89 df             	mov    %rbx,%rdi
  41b435:	49 8d 6c 05 00       	lea    0x0(%r13,%rax,1),%rbp
  41b43a:	ff d5                	callq  *%rbp
  41b43c:	48 89 df             	mov    %rbx,%rdi
  41b43f:	ff d5                	callq  *%rbp
  41b441:	48 89 df             	mov    %rbx,%rdi
  41b444:	ff d5                	callq  *%rbp
  if (!value) {
  41b446:	4d 85 e4             	test   %r12,%r12
  41b449:	0f 84 85 02 00 00    	je     41b6d4 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3e4>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41b44f:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b454:	48 8b 78 10          	mov    0x10(%rax),%rdi
  41b458:	48 8b 50 08          	mov    0x8(%rax),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41b45c:	48 85 ff             	test   %rdi,%rdi
  41b45f:	0f 84 2b 02 00 00    	je     41b690 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3a0>
  41b465:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41b469:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41b46d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  41b472:	c6 01 01             	movb   $0x1,(%rcx)
  41b475:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b479:	48 89 79 10          	mov    %rdi,0x10(%rcx)
  41b47d:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41b481:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41b488:	ff ff ff 
  41b48b:	4c 01 e8             	add    %r13,%rax
  41b48e:	4c 89 61 18          	mov    %r12,0x18(%rcx)
  41b492:	ff d0                	callq  *%rax
  41b494:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    return Node(ZombieNode);
  }
  return Node(*value, m_pMemory);
}
  41b499:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  41b4a0:	5b                   	pop    %rbx
  41b4a1:	5d                   	pop    %rbp
  41b4a2:	41 5c                	pop    %r12
  41b4a4:	41 5d                	pop    %r13
  41b4a6:	41 5e                	pop    %r14
  41b4a8:	41 5f                	pop    %r15
  41b4aa:	c3                   	retq   
  41b4ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  41b4b0:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41b4b5:	48 8b 40 18          	mov    0x18(%rax),%rax
  41b4b9:	48 8b 10             	mov    (%rax),%rdx
        BOOST_ASSERT( px != 0 );
  41b4bc:	48 85 d2             	test   %rdx,%rdx
  41b4bf:	0f 84 12 03 00 00    	je     41b7d7 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x4e7>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b4c5:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  41b4cc:	00 00 
  41b4ce:	e9 ad fe ff ff       	jmpq   41b380 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x90>
  41b4d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      throw BadSubscript();
  41b4d8:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41b4df:	ff ff ff 
  41b4e2:	bf 40 00 00 00       	mov    $0x40,%edi
  41b4e7:	4d 89 ef             	mov    %r13,%r15
  41b4ea:	4c 01 e8             	add    %r13,%rax
  41b4ed:	ff d0                	callq  *%rax
  41b4ef:	48 89 c5             	mov    %rax,%rbp
  41b4f2:	48 89 c7             	mov    %rax,%rdi
  41b4f5:	48 b8 70 b2 de ff ff 	movabs $0xffffffffffdeb270,%rax
  41b4fc:	ff ff ff 
  41b4ff:	4c 01 e8             	add    %r13,%rax
  41b502:	ff d0                	callq  *%rax
  41b504:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  41b50b:	ff ff ff 
  41b50e:	48 89 ef             	mov    %rbp,%rdi
  41b511:	49 8d 54 05 00       	lea    0x0(%r13,%rax,1),%rdx
  41b516:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  41b51d:	ff ff ff 
  41b520:	49 8d 74 05 00       	lea    0x0(%r13,%rax,1),%rsi
  41b525:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41b52c:	ff ff ff 
  41b52f:	4c 01 e8             	add    %r13,%rax
  41b532:	ff d0                	callq  *%rax
  41b534:	0f 1f 40 00          	nopl   0x0(%rax)
  41b538:	4c 8b a0 88 00 00 00 	mov    0x88(%rax),%r12
      { return const_iterator(&this->_M_impl._M_header); }
  41b53f:	48 83 c0 78          	add    $0x78,%rax
  41b543:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41b548:	49 39 c4             	cmp    %rax,%r12
  41b54b:	0f 84 cf fe ff ff    	je     41b420 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x130>
  41b551:	48 8d 44 24 5c       	lea    0x5c(%rsp),%rax
  41b556:	48 8d 6b 08          	lea    0x8(%rbx),%rbp
  41b55a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41b55f:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  41b564:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  41b569:	48 b8 70 b6 de ff ff 	movabs $0xffffffffffdeb670,%rax
  41b570:	ff ff ff 
  41b573:	4c 01 e8             	add    %r13,%rax
  41b576:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        if( pi_ != 0 ) pi_->release();
  41b57b:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41b582:	ff ff ff 
  41b585:	4d 8d 74 05 00       	lea    0x0(%r13,%rax,1),%r14
  41b58a:	e9 a4 00 00 00       	jmpq   41b633 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x343>
  41b58f:	90                   	nop
  41b590:	f0 83 45 00 01       	lock addl $0x1,0x0(%rbp)
    if (it->first->equals(key, pMemory)) {
  41b595:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  41b59a:	f0 83 45 00 01       	lock addl $0x1,0x0(%rbp)
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41b59f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41b5a4:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b5a9:	48 89 5c 24 70       	mov    %rbx,0x70(%rsp)
  41b5ae:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  41b5b3:	f0 83 45 00 01       	lock addl $0x1,0x0(%rbp)
  41b5b8:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  41b5bd:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  41b5c2:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41b5c7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41b5cc:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41b5ce:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41b5d3:	41 89 c7             	mov    %eax,%r15d
  41b5d6:	48 85 ff             	test   %rdi,%rdi
  41b5d9:	74 03                	je     41b5de <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x2ee>
  41b5db:	41 ff d6             	callq  *%r14
  41b5de:	48 85 db             	test   %rbx,%rbx
  41b5e1:	0f 84 89 00 00 00    	je     41b670 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x380>
  41b5e7:	48 89 df             	mov    %rbx,%rdi
  41b5ea:	41 ff d6             	callq  *%r14
  41b5ed:	45 84 ff             	test   %r15b,%r15b
  41b5f0:	74 6e                	je     41b660 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x370>
    return lhs == rhs;
  41b5f2:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41b5f7:	8b 4c 24 5c          	mov    0x5c(%rsp),%ecx
  41b5fb:	48 89 df             	mov    %rbx,%rdi
  41b5fe:	39 08                	cmp    %ecx,(%rax)
  41b600:	41 0f 94 c7          	sete   %r15b
  41b604:	41 ff d6             	callq  *%r14
    if (it->first->equals(key, pMemory)) {
  41b607:	45 84 ff             	test   %r15b,%r15b
  41b60a:	0f 85 f0 00 00 00    	jne    41b700 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x410>
	_M_node = _Rb_tree_increment(_M_node);
  41b610:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41b617:	ff ff ff 
  41b61a:	4c 89 e7             	mov    %r12,%rdi
  41b61d:	4d 89 ef             	mov    %r13,%r15
  41b620:	4c 01 e8             	add    %r13,%rax
  41b623:	ff d0                	callq  *%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41b625:	48 3b 44 24 28       	cmp    0x28(%rsp),%rax
  41b62a:	49 89 c4             	mov    %rax,%r12
  41b62d:	0f 84 ed fd ff ff    	je     41b420 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x130>
        if( pi_ != 0 ) pi_->add_ref_copy();
  41b633:	48 85 db             	test   %rbx,%rbx
  41b636:	0f 85 54 ff ff ff    	jne    41b590 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x2a0>
  41b63c:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    if (it->first->equals(key, pMemory)) {
  41b641:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  41b646:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b64b:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  41b652:	00 00 
  41b654:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  41b659:	e9 5a ff ff ff       	jmpq   41b5b8 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x2c8>
  41b65e:	66 90                	xchg   %ax,%ax
        if( pi_ != 0 ) pi_->release();
  41b660:	48 89 df             	mov    %rbx,%rdi
  41b663:	41 ff d6             	callq  *%r14
  41b666:	eb a8                	jmp    41b610 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x320>
  41b668:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41b66f:	00 
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  41b670:	45 84 ff             	test   %r15b,%r15b
  41b673:	74 9b                	je     41b610 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x320>
    return lhs == rhs;
  41b675:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41b67a:	8b 74 24 5c          	mov    0x5c(%rsp),%esi
  41b67e:	39 30                	cmp    %esi,(%rax)
  41b680:	41 0f 94 c7          	sete   %r15b
  41b684:	e9 7e ff ff ff       	jmpq   41b607 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x317>
  41b689:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41b690:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41b695:	c6 00 01             	movb   $0x1,(%rax)
  41b698:	48 89 50 08          	mov    %rdx,0x8(%rax)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b69c:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41b6a3:	00 
  41b6a4:	4c 89 60 18          	mov    %r12,0x18(%rax)
  41b6a8:	e9 ec fd ff ff       	jmpq   41b499 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1a9>
  41b6ad:	0f 1f 00             	nopl   (%rax)
    return key >= 0 ? get_idx<std::size_t>::get(
  41b6b0:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  41b6b5:	48 63 12             	movslq (%rdx),%rdx
  41b6b8:	85 d2                	test   %edx,%edx
  41b6ba:	78 18                	js     41b6d4 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3e4>
  41b6bc:	48 8b 48 50          	mov    0x50(%rax),%rcx
  41b6c0:	48 8b 40 58          	mov    0x58(%rax),%rax
  41b6c4:	48 29 c8             	sub    %rcx,%rax
  41b6c7:	48 c1 f8 03          	sar    $0x3,%rax
    return key < sequence.size() ? sequence[key] : 0;
  41b6cb:	48 39 d0             	cmp    %rdx,%rax
  41b6ce:	0f 87 20 fd ff ff    	ja     41b3f4 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x104>
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  41b6d4:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41b6d9:	c6 00 00             	movb   $0x0,(%rax)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41b6dc:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41b6e3:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41b6e4:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41b6eb:	00 
  41b6ec:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  41b6f3:	00 
  41b6f4:	e9 a0 fd ff ff       	jmpq   41b499 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1a9>
  41b6f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      return it->second;
  41b700:	4d 8b 64 24 28       	mov    0x28(%r12),%r12
  41b705:	e9 19 fd ff ff       	jmpq   41b423 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x133>
  41b70a:	49 89 c4             	mov    %rax,%r12
        if( pi_ != 0 ) pi_->release();
  41b70d:	48 85 db             	test   %rbx,%rbx
  41b710:	74 12                	je     41b724 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x434>
  41b712:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41b719:	ff ff ff 
  41b71c:	48 89 df             	mov    %rbx,%rdi
  41b71f:	4c 01 e8             	add    %r13,%rax
  41b722:	ff d0                	callq  *%rax
  41b724:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  41b729:	48 85 c0             	test   %rax,%rax
  41b72c:	74 12                	je     41b740 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x450>
  41b72e:	48 89 c7             	mov    %rax,%rdi
  41b731:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41b738:	ff ff ff 
  41b73b:	4c 01 e8             	add    %r13,%rax
  41b73e:	ff d0                	callq  *%rax
  41b740:	48 85 db             	test   %rbx,%rbx
  41b743:	74 12                	je     41b757 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x467>
  41b745:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41b74c:	ff ff ff 
  41b74f:	48 89 df             	mov    %rbx,%rdi
  41b752:	4c 01 e8             	add    %r13,%rax
  41b755:	ff d0                	callq  *%rax
  41b757:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41b75e:	ff ff ff 
  41b761:	4c 89 e7             	mov    %r12,%rdi
  41b764:	4d 89 ef             	mov    %r13,%r15
  41b767:	4c 01 e8             	add    %r13,%rax
  41b76a:	ff d0                	callq  *%rax
    throw InvalidNode();
  41b76c:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41b773:	ff ff ff 
  41b776:	bf 40 00 00 00       	mov    $0x40,%edi
  41b77b:	4d 89 ef             	mov    %r13,%r15
  41b77e:	4c 01 e8             	add    %r13,%rax
  41b781:	ff d0                	callq  *%rax
  41b783:	48 89 c3             	mov    %rax,%rbx
  41b786:	48 89 c7             	mov    %rax,%rdi
  41b789:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  41b790:	ff ff ff 
  41b793:	4c 01 e8             	add    %r13,%rax
  41b796:	ff d0                	callq  *%rax
  41b798:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  41b79f:	ff ff ff 
  41b7a2:	48 89 df             	mov    %rbx,%rdi
  41b7a5:	49 8d 54 05 00       	lea    0x0(%r13,%rax,1),%rdx
  41b7aa:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41b7b1:	ff ff ff 
  41b7b4:	49 8d 74 05 00       	lea    0x0(%r13,%rax,1),%rsi
  41b7b9:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41b7c0:	ff ff ff 
  41b7c3:	4c 01 e8             	add    %r13,%rax
  41b7c6:	ff d0                	callq  *%rax
  41b7c8:	48 b8 8c eb dd ff ff 	movabs $0xffffffffffddeb8c,%rax
  41b7cf:	ff ff ff 
  41b7d2:	4c 01 e8             	add    %r13,%rax
  41b7d5:	ff d0                	callq  *%rax
  41b7d7:	48 b8 38 ec dd ff ff 	movabs $0xffffffffffddec38,%rax
  41b7de:	ff ff ff 
  41b7e1:	4c 01 e8             	add    %r13,%rax
  41b7e4:	ff d0                	callq  *%rax
  41b7e6:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41b7ed:	ff ff ff 
  41b7f0:	48 89 c5             	mov    %rax,%rbp
  41b7f3:	48 89 df             	mov    %rbx,%rdi
  41b7f6:	4d 89 ef             	mov    %r13,%r15
  41b7f9:	4c 01 ea             	add    %r13,%rdx
  41b7fc:	ff d2                	callq  *%rdx
  41b7fe:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41b805:	ff ff ff 
  41b808:	48 89 ef             	mov    %rbp,%rdi
  41b80b:	4c 01 e8             	add    %r13,%rax
  41b80e:	ff d0                	callq  *%rax
    return key < sequence.size() ? sequence[key] : 0;
  41b810:	45 31 e4             	xor    %r12d,%r12d
  41b813:	e9 e5 fb ff ff       	jmpq   41b3fd <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x10d>
      throw BadSubscript();
  41b818:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41b81f:	ff ff ff 
  41b822:	49 89 c4             	mov    %rax,%r12
  41b825:	48 89 ef             	mov    %rbp,%rdi
  41b828:	4d 89 ef             	mov    %r13,%r15
  41b82b:	4c 01 ea             	add    %r13,%rdx
  41b82e:	ff d2                	callq  *%rdx
  41b830:	e9 d8 fe ff ff       	jmpq   41b70d <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x41d>
  41b835:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41b83a:	49 89 c4             	mov    %rax,%r12
  41b83d:	48 85 ff             	test   %rdi,%rdi
  41b840:	74 0f                	je     41b851 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x561>
  41b842:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41b849:	ff ff ff 
  41b84c:	4c 01 e8             	add    %r13,%rax
  41b84f:	ff d0                	callq  *%rax
  41b851:	48 85 db             	test   %rbx,%rbx
  41b854:	0f 84 b3 fe ff ff    	je     41b70d <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x41d>
  41b85a:	48 bd 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rbp
  41b861:	ff ff ff 
  41b864:	48 89 df             	mov    %rbx,%rdi
  41b867:	4c 01 ed             	add    %r13,%rbp
  41b86a:	ff d5                	callq  *%rbp
  41b86c:	48 89 df             	mov    %rbx,%rdi
  41b86f:	ff d5                	callq  *%rbp
  41b871:	e9 97 fe ff ff       	jmpq   41b70d <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x41d>
  41b876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41b87d:	00 00 00 

000000000041b880 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41b880:	41 57                	push   %r15
  41b882:	55                   	push   %rbp
  41b883:	4c 8d 15 f6 ff ff ff 	lea    -0xa(%rip),%r10        # 41b880 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_>
  41b88a:	53                   	push   %rbx
  41b88b:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  41b88f:	49 bb 80 f7 20 00 00 	movabs $0x20f780,%r11
  41b896:	00 00 00 
  41b899:	4d 01 da             	add    %r11,%r10
      { return &this->_M_impl._M_header; }
  41b89c:	48 8d 5f 08          	lea    0x8(%rdi),%rbx
      while (__x != 0)
  41b8a0:	48 85 d2             	test   %rdx,%rdx
  41b8a3:	74 53                	je     41b8f8 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x78>
  41b8a5:	4c 8b 06             	mov    (%rsi),%r8
  41b8a8:	eb 18                	jmp    41b8c2 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x42>
  41b8aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41b8b0:	48 8b 42 10          	mov    0x10(%rdx),%rax
  41b8b4:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  41b8ba:	48 85 c0             	test   %rax,%rax
  41b8bd:	74 18                	je     41b8d7 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x57>
  41b8bf:	48 89 c2             	mov    %rax,%rdx
  41b8c2:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  41b8c6:	49 39 c8             	cmp    %rcx,%r8
  41b8c9:	72 e5                	jb     41b8b0 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x30>
  41b8cb:	48 8b 42 18          	mov    0x18(%rdx),%rax
  41b8cf:	45 31 c9             	xor    %r9d,%r9d
      while (__x != 0)
  41b8d2:	48 85 c0             	test   %rax,%rax
  41b8d5:	75 e8                	jne    41b8bf <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x3f>
      if (__comp)
  41b8d7:	45 84 c9             	test   %r9b,%r9b
  41b8da:	48 89 d3             	mov    %rdx,%rbx
  41b8dd:	48 89 d0             	mov    %rdx,%rax
  41b8e0:	75 16                	jne    41b8f8 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x78>
	return _Res(__x, __y);
  41b8e2:	31 d2                	xor    %edx,%edx
  41b8e4:	4c 39 c1             	cmp    %r8,%rcx
  41b8e7:	48 0f 42 c2          	cmovb  %rdx,%rax
  41b8eb:	48 0f 42 d3          	cmovb  %rbx,%rdx
    }
  41b8ef:	5b                   	pop    %rbx
  41b8f0:	5d                   	pop    %rbp
  41b8f1:	41 5f                	pop    %r15
  41b8f3:	c3                   	retq   
  41b8f4:	0f 1f 40 00          	nopl   0x0(%rax)
	    return _Res(__x, __y);
  41b8f8:	31 c0                	xor    %eax,%eax
	  if (__j == begin())
  41b8fa:	48 3b 5f 18          	cmp    0x18(%rdi),%rbx
	    return _Res(__x, __y);
  41b8fe:	48 89 da             	mov    %rbx,%rdx
	  if (__j == begin())
  41b901:	74 ec                	je     41b8ef <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x6f>
  41b903:	48 89 f5             	mov    %rsi,%rbp
	_M_node = _Rb_tree_decrement(_M_node);
  41b906:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  41b90d:	ff ff ff 
  41b910:	48 89 df             	mov    %rbx,%rdi
  41b913:	4d 89 d7             	mov    %r10,%r15
  41b916:	4c 01 d0             	add    %r10,%rax
  41b919:	ff d0                	callq  *%rax
  41b91b:	4c 8b 45 00          	mov    0x0(%rbp),%r8
  41b91f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  41b923:	eb bd                	jmp    41b8e2 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x62>
  41b925:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41b92c:	00 00 00 
  41b92f:	90                   	nop

000000000041b930 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_>:
      operator[](const key_type& __k)
  41b930:	41 57                	push   %r15
  41b932:	41 56                	push   %r14
  41b934:	49 bb d0 f6 20 00 00 	movabs $0x20f6d0,%r11
  41b93b:	00 00 00 
  41b93e:	41 55                	push   %r13
  41b940:	41 54                	push   %r12
      { return &this->_M_impl._M_header; }
  41b942:	4c 8d 77 08          	lea    0x8(%rdi),%r14
  41b946:	55                   	push   %rbp
  41b947:	53                   	push   %rbx
  41b948:	48 8d 2d e1 ff ff ff 	lea    -0x1f(%rip),%rbp        # 41b930 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_>
  41b94f:	49 89 fc             	mov    %rdi,%r12
  41b952:	48 83 ec 28          	sub    $0x28,%rsp
  41b956:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  41b95a:	4c 01 dd             	add    %r11,%rbp
      while (__x != 0)
  41b95d:	48 85 d2             	test   %rdx,%rdx
  41b960:	0f 84 92 01 00 00    	je     41baf8 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x1c8>
  41b966:	48 8b 06             	mov    (%rsi),%rax
      { return &this->_M_impl._M_header; }
  41b969:	4c 89 f3             	mov    %r14,%rbx
  41b96c:	eb 0e                	jmp    41b97c <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x4c>
  41b96e:	66 90                	xchg   %ax,%ax
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41b970:	48 89 d3             	mov    %rdx,%rbx
	  __y = __x, __x = _S_left(__x);
  41b973:	48 8b 52 10          	mov    0x10(%rdx),%rdx
      while (__x != 0)
  41b977:	48 85 d2             	test   %rdx,%rdx
  41b97a:	74 0f                	je     41b98b <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x5b>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41b97c:	48 39 42 20          	cmp    %rax,0x20(%rdx)
  41b980:	73 ee                	jae    41b970 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x40>
  41b982:	48 8b 52 18          	mov    0x18(%rdx),%rdx
      while (__x != 0)
  41b986:	48 85 d2             	test   %rdx,%rdx
  41b989:	75 f1                	jne    41b97c <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x4c>
	if (__i == end() || key_comp()(__k, (*__i).first))
  41b98b:	49 39 de             	cmp    %rbx,%r14
  41b98e:	0f 84 64 01 00 00    	je     41baf8 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x1c8>
  41b994:	48 39 43 20          	cmp    %rax,0x20(%rbx)
  41b998:	0f 86 df 00 00 00    	jbe    41ba7d <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x14d>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41b99e:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41b9a5:	ff ff ff 
  41b9a8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41b9ad:	bf a8 06 00 00       	mov    $0x6a8,%edi
  41b9b2:	48 01 e8             	add    %rbp,%rax
  41b9b5:	49 89 ef             	mov    %rbp,%r15
  41b9b8:	ff d0                	callq  *%rax
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
  41b9ba:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41b9bf:	49 89 c5             	mov    %rax,%r13
  41b9c2:	4c 8d 40 20          	lea    0x20(%rax),%r8
		vertexConstraints_size = 0;
  41b9c6:	c7 80 68 06 00 00 00 	movl   $0x0,0x668(%rax)
  41b9cd:	00 00 00 
		edgeConstraints_size = 0;
  41b9d0:	c7 80 6c 06 00 00 00 	movl   $0x0,0x66c(%rax)
  41b9d7:	00 00 00 
  41b9da:	48 8b 0e             	mov    (%rsi),%rcx
  41b9dd:	48 89 48 20          	mov    %rcx,0x20(%rax)
  41b9e1:	48 8b 53 20          	mov    0x20(%rbx),%rdx
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
  41b9e5:	48 39 ca             	cmp    %rcx,%rdx
  41b9e8:	0f 86 a2 00 00 00    	jbe    41ba90 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x160>
	  if (__pos._M_node == _M_leftmost()) // begin()
  41b9ee:	49 39 5c 24 18       	cmp    %rbx,0x18(%r12)
  41b9f3:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  41b9f8:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  41b9fd:	74 34                	je     41ba33 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x103>
	_M_node = _Rb_tree_decrement(_M_node);
  41b9ff:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  41ba06:	ff ff ff 
  41ba09:	48 89 df             	mov    %rbx,%rdi
  41ba0c:	49 89 ef             	mov    %rbp,%r15
  41ba0f:	48 01 e8             	add    %rbp,%rax
  41ba12:	ff d0                	callq  *%rax
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
  41ba14:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  41ba19:	48 39 48 20          	cmp    %rcx,0x20(%rax)
  41ba1d:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  41ba22:	0f 83 75 01 00 00    	jae    41bb9d <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x26d>
	      if (_S_right(__before._M_node) == 0)
  41ba28:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
  41ba2d:	0f 84 59 01 00 00    	je     41bb8c <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x25c>
	  if (__pos._M_node == _M_leftmost()) // begin()
  41ba33:	48 89 d8             	mov    %rbx,%rax
      bool __insert_left = (__x != 0 || __p == _M_end()
  41ba36:	49 39 c6             	cmp    %rax,%r14
  41ba39:	0f 84 54 01 00 00    	je     41bb93 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x263>
  41ba3f:	48 85 db             	test   %rbx,%rbx
  41ba42:	0f 85 4b 01 00 00    	jne    41bb93 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x263>
  41ba48:	49 8b 4d 20          	mov    0x20(%r13),%rcx
  41ba4c:	48 8b 50 20          	mov    0x20(%rax),%rdx
			    || _M_impl._M_key_compare(_S_key(__z),
  41ba50:	31 ff                	xor    %edi,%edi
  41ba52:	48 39 d1             	cmp    %rdx,%rcx
  41ba55:	40 0f 92 c7          	setb   %dil
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  41ba59:	48 89 c2             	mov    %rax,%rdx
  41ba5c:	48 b8 f0 e3 dd ff ff 	movabs $0xffffffffffdde3f0,%rax
  41ba63:	ff ff ff 
  41ba66:	4c 89 f1             	mov    %r14,%rcx
  41ba69:	4c 89 ee             	mov    %r13,%rsi
  41ba6c:	49 89 ef             	mov    %rbp,%r15
  41ba6f:	48 01 e8             	add    %rbp,%rax
  41ba72:	ff d0                	callq  *%rax
      ++_M_impl._M_node_count;
  41ba74:	49 83 44 24 28 01    	addq   $0x1,0x28(%r12)
  41ba7a:	4c 89 eb             	mov    %r13,%rbx
      }
  41ba7d:	48 83 c4 28          	add    $0x28,%rsp
	return (*__i).second;
  41ba81:	48 8d 43 28          	lea    0x28(%rbx),%rax
      }
  41ba85:	5b                   	pop    %rbx
  41ba86:	5d                   	pop    %rbp
  41ba87:	41 5c                	pop    %r12
  41ba89:	41 5d                	pop    %r13
  41ba8b:	41 5e                	pop    %r14
  41ba8d:	41 5f                	pop    %r15
  41ba8f:	c3                   	retq   
  41ba90:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
  41ba95:	0f 83 d7 00 00 00    	jae    41bb72 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x242>
	  if (__pos._M_node == _M_rightmost())
  41ba9b:	49 39 5c 24 20       	cmp    %rbx,0x20(%r12)
  41baa0:	0f 84 fc 00 00 00    	je     41bba2 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x272>
	_M_node = _Rb_tree_increment(_M_node);
  41baa6:	48 b8 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%rax
  41baad:	ff ff ff 
  41bab0:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  41bab5:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  41baba:	48 01 e8             	add    %rbp,%rax
  41babd:	48 89 df             	mov    %rbx,%rdi
  41bac0:	49 89 ef             	mov    %rbp,%r15
  41bac3:	ff d0                	callq  *%rax
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
  41bac5:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  41baca:	48 39 48 20          	cmp    %rcx,0x20(%rax)
  41bace:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  41bad3:	0f 86 c4 00 00 00    	jbe    41bb9d <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x26d>
	      if (_S_right(__pos._M_node) == 0)
  41bad9:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
  41bade:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  41bae3:	0f 84 b9 00 00 00    	je     41bba2 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x272>
  41bae9:	48 89 c3             	mov    %rax,%rbx
  41baec:	e9 45 ff ff ff       	jmpq   41ba36 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x106>
  41baf1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41baf8:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41baff:	ff ff ff 
  41bb02:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41bb07:	bf a8 06 00 00       	mov    $0x6a8,%edi
  41bb0c:	48 01 e8             	add    %rbp,%rax
  41bb0f:	49 89 ef             	mov    %rbp,%r15
  41bb12:	ff d0                	callq  *%rax
  41bb14:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41bb19:	49 89 c5             	mov    %rax,%r13
  41bb1c:	48 8d 48 20          	lea    0x20(%rax),%rcx
  41bb20:	48 8b 16             	mov    (%rsi),%rdx
		vertexConstraints_size = 0;
  41bb23:	c7 80 68 06 00 00 00 	movl   $0x0,0x668(%rax)
  41bb2a:	00 00 00 
		edgeConstraints_size = 0;
  41bb2d:	c7 80 6c 06 00 00 00 	movl   $0x0,0x66c(%rax)
  41bb34:	00 00 00 
  41bb37:	48 89 50 20          	mov    %rdx,0x20(%rax)
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
  41bb3b:	49 83 7c 24 28 00    	cmpq   $0x0,0x28(%r12)
  41bb41:	74 0b                	je     41bb4e <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x21e>
  41bb43:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  41bb48:	48 39 50 20          	cmp    %rdx,0x20(%rax)
  41bb4c:	72 3e                	jb     41bb8c <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x25c>
	    return _M_get_insert_unique_pos(__k);
  41bb4e:	48 89 ce             	mov    %rcx,%rsi
	    return _M_get_insert_unique_pos(__k);
  41bb51:	48 b8 80 08 df ff ff 	movabs $0xffffffffffdf0880,%rax
  41bb58:	ff ff ff 
  41bb5b:	4c 89 e7             	mov    %r12,%rdi
  41bb5e:	48 01 e8             	add    %rbp,%rax
  41bb61:	ff d0                	callq  *%rax
	    if (__res.second)
  41bb63:	48 85 d2             	test   %rdx,%rdx
	    return _M_get_insert_unique_pos(__k);
  41bb66:	48 89 c3             	mov    %rax,%rbx
  41bb69:	48 89 d0             	mov    %rdx,%rax
	    if (__res.second)
  41bb6c:	0f 85 c4 fe ff ff    	jne    41ba36 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x106>
      { ::operator delete(__p); }
  41bb72:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41bb79:	ff ff ff 
  41bb7c:	4c 89 ef             	mov    %r13,%rdi
  41bb7f:	49 89 ef             	mov    %rbp,%r15
  41bb82:	48 01 e8             	add    %rbp,%rax
  41bb85:	ff d0                	callq  *%rax
  41bb87:	e9 f1 fe ff ff       	jmpq   41ba7d <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x14d>
		return _Res(0, __before._M_node);
  41bb8c:	31 db                	xor    %ebx,%ebx
  41bb8e:	e9 a3 fe ff ff       	jmpq   41ba36 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x106>
      bool __insert_left = (__x != 0 || __p == _M_end()
  41bb93:	bf 01 00 00 00       	mov    $0x1,%edi
  41bb98:	e9 bc fe ff ff       	jmpq   41ba59 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x129>
	    return _M_get_insert_unique_pos(__k);
  41bb9d:	4c 89 c6             	mov    %r8,%rsi
  41bba0:	eb af                	jmp    41bb51 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x221>
	      if (_S_right(__pos._M_node) == 0)
  41bba2:	48 89 d8             	mov    %rbx,%rax
  41bba5:	e9 a6 fe ff ff       	jmpq   41ba50 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x120>
  41bbaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000041bbb0 <_ZN5swarm10bareRunnerIFvmiEXadL_Z19main_loop_task_paramiEEiEEvmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0) {
  41bbb0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 41bbb0 <_ZN5swarm10bareRunnerIFvmiEXadL_Z19main_loop_task_paramiEEiEEvmm>
  41bbb7:	49 bb 50 f4 20 00 00 	movabs $0x20f450,%r11
  41bbbe:	00 00 00 
    (*f)(ts, uncastArg<T>(arg0));
  41bbc1:	48 ba c0 46 de ff ff 	movabs $0xffffffffffde46c0,%rdx
  41bbc8:	ff ff ff 
  41bbcb:	4c 01 d8             	add    %r11,%rax
  41bbce:	48 01 d0             	add    %rdx,%rax
  41bbd1:	ff e0                	jmpq   *%rax
  41bbd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41bbda:	00 00 00 
  41bbdd:	0f 1f 00             	nopl   (%rax)

000000000041bbe0 <_ZNKSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m>:
      __node_base* __prev_p = _M_buckets[__n];
  41bbe0:	48 8b 07             	mov    (%rdi),%rax
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41bbe3:	49 89 d3             	mov    %rdx,%r11
      __node_base* __prev_p = _M_buckets[__n];
  41bbe6:	4c 8b 14 f0          	mov    (%rax,%rsi,8),%r10
      if (!__prev_p)
  41bbea:	4d 85 d2             	test   %r10,%r10
  41bbed:	74 2f                	je     41bc1e <_ZNKSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  41bbef:	4d 8b 0a             	mov    (%r10),%r9
  41bbf2:	4d 8b 41 30          	mov    0x30(%r9),%r8
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  41bbf6:	49 39 c8             	cmp    %rcx,%r8
  41bbf9:	74 2d                	je     41bc28 <_ZNKSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x48>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  41bbfb:	49 8b 01             	mov    (%r9),%rax
  41bbfe:	48 85 c0             	test   %rax,%rax
  41bc01:	74 18                	je     41bc1b <_ZNKSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3b>
  41bc03:	4c 8b 40 30          	mov    0x30(%rax),%r8
    { return __num % __den; }
  41bc07:	31 d2                	xor    %edx,%edx
  41bc09:	4d 89 ca             	mov    %r9,%r10
  41bc0c:	49 89 c1             	mov    %rax,%r9
  41bc0f:	4c 89 c0             	mov    %r8,%rax
  41bc12:	48 f7 77 08          	divq   0x8(%rdi)
  41bc16:	48 39 d6             	cmp    %rdx,%rsi
  41bc19:	74 db                	je     41bbf6 <_ZNKSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x16>
	return nullptr;
  41bc1b:	45 31 d2             	xor    %r10d,%r10d
    }
  41bc1e:	4c 89 d0             	mov    %r10,%rax
  41bc21:	c3                   	retq   
  41bc22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    return time == s.time && x == s.x && y == s.y;
  41bc28:	41 8b 03             	mov    (%r11),%eax
  41bc2b:	41 39 41 08          	cmp    %eax,0x8(%r9)
  41bc2f:	75 ca                	jne    41bbfb <_ZNKSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bc31:	41 8b 41 0c          	mov    0xc(%r9),%eax
  41bc35:	41 39 43 04          	cmp    %eax,0x4(%r11)
  41bc39:	75 c0                	jne    41bbfb <_ZNKSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bc3b:	41 8b 41 10          	mov    0x10(%r9),%eax
  41bc3f:	41 39 43 08          	cmp    %eax,0x8(%r11)
  41bc43:	75 b6                	jne    41bbfb <_ZNKSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bc45:	eb d7                	jmp    41bc1e <_ZNKSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3e>
  41bc47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41bc4e:	00 00 

000000000041bc50 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41bc50:	48 83 ec 08          	sub    $0x8,%rsp
  41bc54:	48 63 16             	movslq (%rsi),%rdx
  41bc57:	4c 63 46 04          	movslq 0x4(%rsi),%r8
  41bc5b:	41 ba b9 79 37 9e    	mov    $0x9e3779b9,%r10d
  41bc61:	48 63 46 08          	movslq 0x8(%rsi),%rax
  41bc65:	4c 8d 0d e4 ff ff ff 	lea    -0x1c(%rip),%r9        # 41bc50 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_>
  41bc6c:	49 bb b0 f3 20 00 00 	movabs $0x20f3b0,%r11
  41bc73:	00 00 00 
  41bc76:	4d 01 d9             	add    %r11,%r9
  41bc79:	4c 01 d2             	add    %r10,%rdx
  41bc7c:	4d 01 d0             	add    %r10,%r8
  41bc7f:	48 89 d1             	mov    %rdx,%rcx
  41bc82:	4c 01 d0             	add    %r10,%rax
  41bc85:	48 c1 e1 06          	shl    $0x6,%rcx
  41bc89:	49 01 c8             	add    %rcx,%r8
  41bc8c:	48 89 d1             	mov    %rdx,%rcx
  41bc8f:	48 c1 e9 02          	shr    $0x2,%rcx
  41bc93:	4c 01 c1             	add    %r8,%rcx
  41bc96:	48 31 ca             	xor    %rcx,%rdx
  41bc99:	48 89 d1             	mov    %rdx,%rcx
  41bc9c:	48 c1 e1 06          	shl    $0x6,%rcx
  41bca0:	48 01 c8             	add    %rcx,%rax
  41bca3:	48 89 d1             	mov    %rdx,%rcx
  41bca6:	48 c1 e9 02          	shr    $0x2,%rcx
  41bcaa:	48 01 c1             	add    %rax,%rcx
  41bcad:	48 31 d1             	xor    %rdx,%rcx
  41bcb0:	31 d2                	xor    %edx,%edx
  41bcb2:	48 89 c8             	mov    %rcx,%rax
  41bcb5:	48 f7 77 08          	divq   0x8(%rdi)
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  41bcb9:	48 b8 e0 0b df ff ff 	movabs $0xffffffffffdf0be0,%rax
  41bcc0:	ff ff ff 
  41bcc3:	4c 01 c8             	add    %r9,%rax
  41bcc6:	49 89 d0             	mov    %rdx,%r8
  41bcc9:	48 89 f2             	mov    %rsi,%rdx
  41bccc:	4c 89 c6             	mov    %r8,%rsi
  41bccf:	ff d0                	callq  *%rax
	if (__before_n)
  41bcd1:	48 85 c0             	test   %rax,%rax
  41bcd4:	74 12                	je     41bce8 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x98>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  41bcd6:	48 8b 00             	mov    (%rax),%rax
      return __p ? iterator(__p) : end();
  41bcd9:	48 85 c0             	test   %rax,%rax
  41bcdc:	74 0a                	je     41bce8 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x98>
    }
  41bcde:	48 83 c4 08          	add    $0x8,%rsp
  41bce2:	c3                   	retq   
  41bce3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return __p ? iterator(__p) : end();
  41bce8:	31 c0                	xor    %eax,%eax
    }
  41bcea:	48 83 c4 08          	add    $0x8,%rsp
  41bcee:	c3                   	retq   
  41bcef:	90                   	nop

000000000041bcf0 <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m>:
      __node_base* __prev_p = _M_buckets[__n];
  41bcf0:	48 8b 07             	mov    (%rdi),%rax
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41bcf3:	49 89 d3             	mov    %rdx,%r11
      __node_base* __prev_p = _M_buckets[__n];
  41bcf6:	4c 8b 14 f0          	mov    (%rax,%rsi,8),%r10
      if (!__prev_p)
  41bcfa:	4d 85 d2             	test   %r10,%r10
  41bcfd:	74 2f                	je     41bd2e <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  41bcff:	4d 8b 0a             	mov    (%r10),%r9
  41bd02:	4d 8b 41 18          	mov    0x18(%r9),%r8
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  41bd06:	49 39 c8             	cmp    %rcx,%r8
  41bd09:	74 2d                	je     41bd38 <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x48>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  41bd0b:	49 8b 01             	mov    (%r9),%rax
  41bd0e:	48 85 c0             	test   %rax,%rax
  41bd11:	74 18                	je     41bd2b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3b>
  41bd13:	4c 8b 40 18          	mov    0x18(%rax),%r8
    { return __num % __den; }
  41bd17:	31 d2                	xor    %edx,%edx
  41bd19:	4d 89 ca             	mov    %r9,%r10
  41bd1c:	49 89 c1             	mov    %rax,%r9
  41bd1f:	4c 89 c0             	mov    %r8,%rax
  41bd22:	48 f7 77 08          	divq   0x8(%rdi)
  41bd26:	48 39 d6             	cmp    %rdx,%rsi
  41bd29:	74 db                	je     41bd06 <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x16>
	return nullptr;
  41bd2b:	45 31 d2             	xor    %r10d,%r10d
    }
  41bd2e:	4c 89 d0             	mov    %r10,%rax
  41bd31:	c3                   	retq   
  41bd32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41bd38:	41 8b 03             	mov    (%r11),%eax
  41bd3b:	41 39 41 08          	cmp    %eax,0x8(%r9)
  41bd3f:	75 ca                	jne    41bd0b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bd41:	41 8b 41 0c          	mov    0xc(%r9),%eax
  41bd45:	41 39 43 04          	cmp    %eax,0x4(%r11)
  41bd49:	75 c0                	jne    41bd0b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bd4b:	41 8b 41 10          	mov    0x10(%r9),%eax
  41bd4f:	41 39 43 08          	cmp    %eax,0x8(%r11)
  41bd53:	75 b6                	jne    41bd0b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bd55:	eb d7                	jmp    41bd2e <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3e>
  41bd57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41bd5e:	00 00 

000000000041bd60 <_ZN5boost15throw_exceptionINS_16bad_lexical_castEEEvRKT_>:

#else

inline void throw_exception_assert_compatibility( std::exception const & ) { }

template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  41bd60:	41 57                	push   %r15
  41bd62:	41 55                	push   %r13
  41bd64:	49 bb a0 f2 20 00 00 	movabs $0x20f2a0,%r11
  41bd6b:	00 00 00 
  41bd6e:	41 54                	push   %r12
  41bd70:	55                   	push   %rbp
  41bd71:	49 89 fc             	mov    %rdi,%r12
  41bd74:	53                   	push   %rbx
  41bd75:	48 8d 1d e4 ff ff ff 	lea    -0x1c(%rip),%rbx        # 41bd60 <_ZN5boost15throw_exceptionINS_16bad_lexical_castEEEvRKT_>
    //All boost exceptions are required to derive from std::exception,
    //to ensure compatibility with BOOST_NO_EXCEPTIONS.
    throw_exception_assert_compatibility(e);

#ifndef BOOST_EXCEPTION_DISABLE
    throw enable_current_exception(enable_error_info(e));
  41bd7c:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41bd83:	ff ff ff 
  41bd86:	bf 48 00 00 00       	mov    $0x48,%edi
  41bd8b:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  41bd8e:	48 83 ec 40          	sub    $0x40,%rsp
    throw enable_current_exception(enable_error_info(e));
  41bd92:	49 89 df             	mov    %rbx,%r15
  41bd95:	48 01 d8             	add    %rbx,%rax
  41bd98:	ff d0                	callq  *%rax
  41bd9a:	48 89 c5             	mov    %rax,%rbp
  41bd9d:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  41bda2:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
                T(x)
  41bda7:	48 b9 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rcx
  41bdae:	ff ff ff 
                px_(0)
  41bdb1:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  41bdb8:	00 00 
            throw_line_(-1)
  41bdba:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  41bdc1:	00 00 
                T(x)
  41bdc3:	48 01 d9             	add    %rbx,%rcx
            throw_line_(-1)
  41bdc6:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41bdcd:	00 00 
  41bdcf:	c7 44 24 38 ff ff ff 	movl   $0xffffffff,0x38(%rsp)
  41bdd6:	ff 
    class BOOST_SYMBOL_VISIBLE bad_lexical_cast :
  41bdd7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41bddc:	48 89 45 10          	mov    %rax,0x10(%rbp)
                T(x)
  41bde0:	48 b8 b0 f0 ff ff ff 	movabs $0xfffffffffffff0b0,%rax
  41bde7:	ff ff ff 
  41bdea:	48 01 d8             	add    %rbx,%rax
  41bded:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41bdf2:	48 89 55 08          	mov    %rdx,0x8(%rbp)
  41bdf6:	48 89 45 00          	mov    %rax,0x0(%rbp)
  41bdfa:	48 8d 50 38          	lea    0x38(%rax),%rdx
  41bdfe:	48 83 c0 70          	add    $0x70,%rax
                T(x)
  41be02:	48 89 0c 24          	mov    %rcx,(%rsp)
                T(x)
  41be06:	48 89 45 40          	mov    %rax,0x40(%rbp)
                T(x)
  41be0a:	48 83 c1 28          	add    $0x28,%rcx
                copy_boost_exception(this,&x);
  41be0e:	48 b8 40 a6 de ff ff 	movabs $0xffffffffffdea640,%rax
  41be15:	ff ff ff 
                T(x)
  41be18:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
                px_(x.px_)
  41be1d:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
  41be24:	00 
    exception
  41be25:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
  41be2c:	00 
  41be2d:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
  41be34:	00 
                copy_boost_exception(this,&x);
  41be35:	49 89 e4             	mov    %rsp,%r12
    exception
  41be38:	c7 45 38 ff ff ff ff 	movl   $0xffffffff,0x38(%rbp)
                T(x)
  41be3f:	48 89 55 18          	mov    %rdx,0x18(%rbp)
                copy_boost_exception(this,&x);
  41be43:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  41be48:	48 8d 7d 18          	lea    0x18(%rbp),%rdi
  41be4c:	48 01 d8             	add    %rbx,%rax
  41be4f:	ff d0                	callq  *%rax
  41be51:	48 b8 40 8c de ff ff 	movabs $0xffffffffffde8c40,%rax
  41be58:	ff ff ff 
  41be5b:	48 89 e7             	mov    %rsp,%rdi
  41be5e:	49 89 df             	mov    %rbx,%r15
  41be61:	48 01 d8             	add    %rbx,%rax
  41be64:	ff d0                	callq  *%rax
  41be66:	48 b8 60 9e de ff ff 	movabs $0xffffffffffde9e60,%rax
  41be6d:	ff ff ff 
  41be70:	48 89 ef             	mov    %rbp,%rdi
  41be73:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41be77:	48 b8 d8 f8 ff ff ff 	movabs $0xfffffffffffff8d8,%rax
  41be7e:	ff ff ff 
  41be81:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41be85:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41be8c:	ff ff ff 
  41be8f:	48 01 d8             	add    %rbx,%rax
  41be92:	ff d0                	callq  *%rax
                T(x)
  41be94:	48 ba 40 8c de ff ff 	movabs $0xffffffffffde8c40,%rdx
  41be9b:	ff ff ff 
  41be9e:	49 89 c5             	mov    %rax,%r13
  41bea1:	48 89 ef             	mov    %rbp,%rdi
  41bea4:	48 01 da             	add    %rbx,%rdx
  41bea7:	49 89 df             	mov    %rbx,%r15
  41beaa:	ff d2                	callq  *%rdx
  41beac:	48 ba 40 8c de ff ff 	movabs $0xffffffffffde8c40,%rdx
  41beb3:	ff ff ff 
  41beb6:	4c 89 e7             	mov    %r12,%rdi
  41beb9:	48 01 da             	add    %rbx,%rdx
  41bebc:	ff d2                	callq  *%rdx
  41bebe:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41bec5:	ff ff ff 
  41bec8:	48 89 ef             	mov    %rbp,%rdi
  41becb:	48 01 da             	add    %rbx,%rdx
  41bece:	ff d2                	callq  *%rdx
  41bed0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41bed7:	ff ff ff 
  41beda:	4c 89 ef             	mov    %r13,%rdi
  41bedd:	48 01 d8             	add    %rbx,%rax
  41bee0:	ff d0                	callq  *%rax
  41bee2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41bee9:	00 00 00 
  41beec:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041bef0 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE>:

  return NULL;
}

template <typename Key>
inline node& node_data::get(const Key& key, shared_memory_holder pMemory) {
  41bef0:	41 57                	push   %r15
  41bef2:	41 56                	push   %r14
  41bef4:	49 bb 10 f1 20 00 00 	movabs $0x20f110,%r11
  41befb:	00 00 00 
  41befe:	41 55                	push   %r13
  41bf00:	41 54                	push   %r12
  41bf02:	55                   	push   %rbp
  41bf03:	53                   	push   %rbx
  41bf04:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41bef0 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE>
  41bf0b:	48 83 ec 48          	sub    $0x48,%rsp
  switch (m_type) {
  41bf0f:	8b 47 04             	mov    0x4(%rdi),%eax
  41bf12:	4c 01 db             	add    %r11,%rbx
inline node& node_data::get(const Key& key, shared_memory_holder pMemory) {
  41bf15:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  switch (m_type) {
  41bf1a:	83 f8 02             	cmp    $0x2,%eax
  41bf1d:	0f 84 05 04 00 00    	je     41c328 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x438>
  41bf23:	49 89 f5             	mov    %rsi,%r13
  41bf26:	48 89 d5             	mov    %rdx,%rbp
  41bf29:	0f 82 d9 00 00 00    	jb     41c008 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x118>
  41bf2f:	83 f8 03             	cmp    $0x3,%eax
  41bf32:	0f 84 d0 00 00 00    	je     41c008 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x118>
      { return iterator(&this->_M_impl._M_header); }
  41bf38:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  41bf3d:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
  41bf42:	48 89 f0             	mov    %rsi,%rax
      break;
    case NodeType::Scalar:
      throw BadSubscript();
  }

  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41bf45:	4c 8b be 88 00 00 00 	mov    0x88(%rsi),%r15
  41bf4c:	48 83 c0 78          	add    $0x78,%rax
  41bf50:	48 89 c1             	mov    %rax,%rcx
  41bf53:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41bf58:	48 b8 f0 bc de ff ff 	movabs $0xffffffffffdebcf0,%rax
  41bf5f:	ff ff ff 
    if (it->first->equals(key, pMemory)) {
  41bf62:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  41bf66:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41bf6d:	ff ff ff 
  41bf70:	48 01 d8             	add    %rbx,%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41bf73:	49 39 cf             	cmp    %rcx,%r15
  41bf76:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41bf7b:	75 2e                	jne    41bfab <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xbb>
  41bf7d:	e9 0e 01 00 00       	jmpq   41c090 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x1a0>
  41bf82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	_M_node = _Rb_tree_increment(_M_node);
  41bf88:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41bf8f:	ff ff ff 
  41bf92:	4c 89 ff             	mov    %r15,%rdi
  41bf95:	49 89 df             	mov    %rbx,%r15
  41bf98:	48 01 d8             	add    %rbx,%rax
  41bf9b:	ff d0                	callq  *%rax
  41bf9d:	48 3b 44 24 08       	cmp    0x8(%rsp),%rax
  41bfa2:	49 89 c7             	mov    %rax,%r15
  41bfa5:	0f 84 e5 00 00 00    	je     41c090 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x1a0>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41bfab:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41bfaf:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41bfb4:	48 8b 45 08          	mov    0x8(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41bfb8:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41bfbb:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41bfc0:	74 05                	je     41bfc7 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xd7>
  41bfc2:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
    if (it->first->equals(key, pMemory)) {
  41bfc7:	49 8b 7f 20          	mov    0x20(%r15),%rdi
  41bfcb:	4c 89 e2             	mov    %r12,%rdx
  41bfce:	4c 89 ee             	mov    %r13,%rsi
  41bfd1:	41 ff d6             	callq  *%r14
        if( pi_ != 0 ) pi_->release();
  41bfd4:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41bfd9:	48 85 ff             	test   %rdi,%rdi
  41bfdc:	74 0e                	je     41bfec <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xfc>
  41bfde:	88 04 24             	mov    %al,(%rsp)
  41bfe1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41bfe6:	ff d0                	callq  *%rax
  41bfe8:	0f b6 04 24          	movzbl (%rsp),%eax
  41bfec:	84 c0                	test   %al,%al
  41bfee:	74 98                	je     41bf88 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x98>
      return *it->second;
  41bff0:	49 8b 47 28          	mov    0x28(%r15),%rax

  node& k = convert_to_node(key, pMemory);
  node& v = pMemory->create_node();
  insert_map_pair(k, v);
  return v;
}
  41bff4:	48 83 c4 48          	add    $0x48,%rsp
  41bff8:	5b                   	pop    %rbx
  41bff9:	5d                   	pop    %rbp
  41bffa:	41 5c                	pop    %r12
  41bffc:	41 5d                	pop    %r13
  41bffe:	41 5e                	pop    %r14
  41c000:	41 5f                	pop    %r15
  41c002:	c3                   	retq   
  41c003:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c008:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c00c:	48 85 ff             	test   %rdi,%rdi
  41c00f:	0f 84 6d 03 00 00    	je     41c382 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x492>
  41c015:	f0 83 47 08 01       	lock addl $0x1,0x8(%rdi)
        if( pi_ != 0 ) pi_->release();
  41c01a:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c021:	ff ff ff 
  41c024:	48 01 d8             	add    %rbx,%rax
  41c027:	ff d0                	callq  *%rax
  41c029:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41c02d:	48 8b 55 00          	mov    0x0(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c031:	48 85 c0             	test   %rax,%rax
  41c034:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c039:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c03e:	74 05                	je     41c045 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x155>
  41c040:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
      convert_to_map(pMemory);
  41c045:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
  41c04a:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  41c051:	ff ff ff 
  41c054:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41c059:	49 89 df             	mov    %rbx,%r15
  41c05c:	48 01 d8             	add    %rbx,%rax
  41c05f:	4c 89 e6             	mov    %r12,%rsi
  41c062:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c064:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41c069:	48 85 ff             	test   %rdi,%rdi
  41c06c:	0f 84 c6 fe ff ff    	je     41bf38 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x48>
  41c072:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c079:	ff ff ff 
  41c07c:	48 01 d8             	add    %rbx,%rax
  41c07f:	ff d0                	callq  *%rax
      break;
  41c081:	e9 b2 fe ff ff       	jmpq   41bf38 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x48>
  41c086:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41c08d:	00 00 00 
  41c090:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41c094:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c099:	48 8b 45 08          	mov    0x8(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c09d:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c0a0:	48 89 04 24          	mov    %rax,(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c0a4:	74 05                	je     41c0ab <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x1bb>
  41c0a6:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
      m_pMemory(new detail::memory_holder),
  41c0ab:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41c0b2:	ff ff ff 
      m_pNode(&m_pMemory->create_node()) {
  41c0b5:	c6 44 24 20 01       	movb   $0x1,0x20(%rsp)
      m_pMemory(new detail::memory_holder),
  41c0ba:	bf 10 00 00 00       	mov    $0x10,%edi
  41c0bf:	49 89 c4             	mov    %rax,%r12
  41c0c2:	49 89 df             	mov    %rbx,%r15
  41c0c5:	48 01 d8             	add    %rbx,%rax
  41c0c8:	ff d0                	callq  *%rax
  41c0ca:	49 89 c6             	mov    %rax,%r14
  memory_holder() : m_pMemory(new memory) {}
  41c0cd:	4c 89 e0             	mov    %r12,%rax
  41c0d0:	bf 30 00 00 00       	mov    $0x30,%edi
  41c0d5:	4c 89 64 24 08       	mov    %r12,0x8(%rsp)
  41c0da:	48 01 d8             	add    %rbx,%rax
  41c0dd:	ff d0                	callq  *%rax
  41c0df:	49 89 c4             	mov    %rax,%r12
	    _M_node_count(0)
  41c0e2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  41c0e9:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41c0f0:	00 
  41c0f1:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  41c0f8:	00 
	    this->_M_header._M_left = &this->_M_header;
  41c0f9:	48 8d 40 08          	lea    0x8(%rax),%rax
    explicit shared_ptr( Y * p ): px( p ), pn() // Y must be complete
  41c0fd:	4d 89 26             	mov    %r12,(%r14)
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41c100:	49 c7 46 08 00 00 00 	movq   $0x0,0x8(%r14)
  41c107:	00 
            pi_ = new sp_counted_impl_p<Y>( p );
  41c108:	bf 18 00 00 00       	mov    $0x18,%edi
  41c10d:	49 89 44 24 18       	mov    %rax,0x18(%r12)
	    this->_M_header._M_right = &this->_M_header;
  41c112:	49 89 44 24 20       	mov    %rax,0x20(%r12)
  41c117:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41c11c:	48 01 d8             	add    %rbx,%rax
  41c11f:	ff d0                	callq  *%rax
        sp_counted_base * tmp = r.pi_;
  41c121:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  41c125:	48 ba c0 ef ff ff ff 	movabs $0xffffffffffffefc0,%rdx
  41c12c:	ff ff ff 
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
  41c12f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41c136:	48 01 da             	add    %rbx,%rdx
  41c139:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41c140:	4c 89 60 10          	mov    %r12,0x10(%rax)
  41c144:	48 89 10             	mov    %rdx,(%rax)
        r.pi_ = pi_;
  41c147:	49 89 46 08          	mov    %rax,0x8(%r14)
        if( pi_ != 0 ) pi_->release();
  41c14b:	48 85 ff             	test   %rdi,%rdi
  41c14e:	74 0f                	je     41c15f <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x26f>
  41c150:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c157:	ff ff ff 
  41c15a:	48 01 d8             	add    %rbx,%rax
  41c15d:	ff d0                	callq  *%rax
            pi_ = new sp_counted_impl_p<Y>( p );
  41c15f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41c164:	4c 89 74 24 28       	mov    %r14,0x28(%rsp)
  41c169:	bf 18 00 00 00       	mov    $0x18,%edi
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41c16e:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41c175:	00 00 
            pi_ = new sp_counted_impl_p<Y>( p );
  41c177:	49 89 df             	mov    %rbx,%r15
  41c17a:	48 01 d8             	add    %rbx,%rax
  41c17d:	ff d0                	callq  *%rax
        sp_counted_base * tmp = r.pi_;
  41c17f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c184:	48 ba 08 f0 ff ff ff 	movabs $0xfffffffffffff008,%rdx
  41c18b:	ff ff ff 
  41c18e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41c195:	48 01 da             	add    %rbx,%rdx
  41c198:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41c19f:	4c 89 70 10          	mov    %r14,0x10(%rax)
  41c1a3:	48 89 10             	mov    %rdx,(%rax)
        r.pi_ = pi_;
  41c1a6:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        if( pi_ != 0 ) pi_->release();
  41c1ab:	48 85 ff             	test   %rdi,%rdi
  41c1ae:	74 0f                	je     41c1bf <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x2cf>
  41c1b0:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c1b7:	ff ff ff 
  41c1ba:	48 01 d8             	add    %rbx,%rax
  41c1bd:	ff d0                	callq  *%rax
  41c1bf:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        BOOST_ASSERT( px != 0 );
  41c1c4:	48 85 c0             	test   %rax,%rax
  41c1c7:	0f 84 c6 02 00 00    	je     41c493 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x5a3>
  41c1cd:	48 8b 38             	mov    (%rax),%rdi
  41c1d0:	48 85 ff             	test   %rdi,%rdi
  41c1d3:	0f 84 36 03 00 00    	je     41c50f <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x61f>
  node& create_node() { return m_pMemory->create_node(); }
  41c1d9:	48 b8 a0 e4 dd ff ff 	movabs $0xffffffffffdde4a0,%rax
  41c1e0:	ff ff ff 
  41c1e3:	49 89 df             	mov    %rbx,%r15
  41c1e6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41c1eb:	48 01 d8             	add    %rbx,%rax
  41c1ee:	ff d0                	callq  *%rax
  if (!m_isValid)
  41c1f0:	80 7c 24 20 00       	cmpb   $0x0,0x20(%rsp)
      m_pNode(&m_pMemory->create_node()) {
  41c1f5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  if (!m_isValid)
  41c1fa:	0f 84 75 03 00 00    	je     41c575 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x685>
  EnsureNodeExists();
  41c200:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
  41c205:	49 be 20 ff de ff ff 	movabs $0xffffffffffdeff20,%r14
  41c20c:	ff ff ff 
  41c20f:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41c213:	4c 89 e7             	mov    %r12,%rdi
  41c216:	ff d0                	callq  *%rax
  m_pNode->set_scalar(rhs);
  41c218:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
    m_pRef->set_null();
  }
  void set_scalar(const std::string& scalar) {
    mark_defined();
  41c21d:	48 b8 60 da de ff ff 	movabs $0xffffffffffdeda60,%rax
  41c224:	ff ff ff 
  41c227:	48 01 d8             	add    %rbx,%rax
  41c22a:	4c 89 ff             	mov    %r15,%rdi
  41c22d:	ff d0                	callq  *%rax
  41c22f:	49 8b 07             	mov    (%r15),%rax
  41c232:	48 85 c0             	test   %rax,%rax
  41c235:	0f 84 91 03 00 00    	je     41c5cc <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x6dc>
  41c23b:	48 8b 38             	mov    (%rax),%rdi
  41c23e:	48 85 ff             	test   %rdi,%rdi
  41c241:	0f 84 b1 03 00 00    	je     41c5f8 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x708>
  void set_scalar(const std::string& scalar) { m_pData->set_scalar(scalar); }
  41c247:	48 b8 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%rax
  41c24e:	ff ff ff 
  41c251:	4c 89 ee             	mov    %r13,%rsi
  41c254:	49 89 df             	mov    %rbx,%r15
  41c257:	48 01 d8             	add    %rbx,%rax
  41c25a:	ff d0                	callq  *%rax

template <typename T>
inline node& node_data::convert_to_node(const T& rhs,
                                        shared_memory_holder pMemory) {
  Node value = convert<T>::encode(rhs);
  value.EnsureNodeExists();
  41c25c:	4c 89 e7             	mov    %r12,%rdi
  41c25f:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41c263:	ff d0                	callq  *%rax
  41c265:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
        BOOST_ASSERT( px != 0 );
  41c26a:	48 85 f6             	test   %rsi,%rsi
  41c26d:	0f 84 b9 03 00 00    	je     41c62c <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x73c>
        BOOST_ASSERT( px != 0 );
  41c273:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41c278:	48 85 c0             	test   %rax,%rax
  41c27b:	0f 84 12 02 00 00    	je     41c493 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x5a3>
  pMemory->merge(*value.m_pMemory);
  41c281:	48 89 c7             	mov    %rax,%rdi
  41c284:	48 b8 10 e9 dd ff ff 	movabs $0xffffffffffdde910,%rax
  41c28b:	ff ff ff 
  41c28e:	49 89 df             	mov    %rbx,%r15
  41c291:	48 01 d8             	add    %rbx,%rax
  41c294:	ff d0                	callq  *%rax
  41c296:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  return *value.m_pNode;
  41c29b:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  41c2a0:	48 85 ff             	test   %rdi,%rdi
  41c2a3:	74 0f                	je     41c2b4 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x3c4>
  41c2a5:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c2ac:	ff ff ff 
  41c2af:	48 01 d8             	add    %rbx,%rax
  41c2b2:	ff d0                	callq  *%rax
  41c2b4:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  41c2b9:	74 13                	je     41c2ce <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x3de>
  41c2bb:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c2c2:	ff ff ff 
  41c2c5:	48 8b 3c 24          	mov    (%rsp),%rdi
  41c2c9:	48 01 d8             	add    %rbx,%rax
  41c2cc:	ff d0                	callq  *%rax
  41c2ce:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41c2d2:	48 85 c0             	test   %rax,%rax
  41c2d5:	0f 84 b8 01 00 00    	je     41c493 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x5a3>
  41c2db:	48 8b 38             	mov    (%rax),%rdi
  41c2de:	48 85 ff             	test   %rdi,%rdi
  41c2e1:	0f 84 28 02 00 00    	je     41c50f <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x61f>
  41c2e7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41c2ec:	49 89 df             	mov    %rbx,%r15
  41c2ef:	48 01 d8             	add    %rbx,%rax
  41c2f2:	ff d0                	callq  *%rax
  insert_map_pair(k, v);
  41c2f4:	48 b9 70 e7 dd ff ff 	movabs $0xffffffffffdde770,%rcx
  41c2fb:	ff ff ff 
  41c2fe:	48 89 04 24          	mov    %rax,(%rsp)
  41c302:	48 89 c2             	mov    %rax,%rdx
  41c305:	4c 89 e6             	mov    %r12,%rsi
  41c308:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41c30d:	48 01 d9             	add    %rbx,%rcx
  41c310:	ff d1                	callq  *%rcx
  return v;
  41c312:	48 8b 04 24          	mov    (%rsp),%rax
}
  41c316:	48 83 c4 48          	add    $0x48,%rsp
  41c31a:	5b                   	pop    %rbx
  41c31b:	5d                   	pop    %rbp
  41c31c:	41 5c                	pop    %r12
  41c31e:	41 5d                	pop    %r13
  41c320:	41 5e                	pop    %r14
  41c322:	41 5f                	pop    %r15
  41c324:	c3                   	retq   
  41c325:	0f 1f 00             	nopl   (%rax)
      throw BadSubscript();
  41c328:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41c32f:	ff ff ff 
  41c332:	bf 40 00 00 00       	mov    $0x40,%edi
  41c337:	49 89 df             	mov    %rbx,%r15
  41c33a:	48 01 d8             	add    %rbx,%rax
  41c33d:	ff d0                	callq  *%rax
  41c33f:	48 89 c5             	mov    %rax,%rbp
  41c342:	48 89 c7             	mov    %rax,%rdi
  41c345:	48 b8 70 b2 de ff ff 	movabs $0xffffffffffdeb270,%rax
  41c34c:	ff ff ff 
  41c34f:	48 01 d8             	add    %rbx,%rax
  41c352:	ff d0                	callq  *%rax
  41c354:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  41c35b:	ff ff ff 
  41c35e:	48 89 ef             	mov    %rbp,%rdi
  41c361:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41c365:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  41c36c:	ff ff ff 
  41c36f:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c373:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41c37a:	ff ff ff 
  41c37d:	48 01 d8             	add    %rbx,%rax
  41c380:	ff d0                	callq  *%rax
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c382:	48 8b 45 00          	mov    0x0(%rbp),%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c386:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  41c38d:	00 00 
  41c38f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41c394:	e9 ac fc ff ff       	jmpq   41c045 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x155>
        if( pi_ != 0 ) pi_->release();
  41c399:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41c39e:	48 89 c5             	mov    %rax,%rbp
  41c3a1:	48 85 ff             	test   %rdi,%rdi
  41c3a4:	74 0f                	je     41c3b5 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c3a6:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c3ad:	ff ff ff 
  41c3b0:	48 01 d8             	add    %rbx,%rax
  41c3b3:	ff d0                	callq  *%rax
  41c3b5:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41c3bc:	ff ff ff 
  41c3bf:	48 89 ef             	mov    %rbp,%rdi
  41c3c2:	49 89 df             	mov    %rbx,%r15
  41c3c5:	48 01 d8             	add    %rbx,%rax
  41c3c8:	ff d0                	callq  *%rax
  41c3ca:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41c3cf:	48 89 c5             	mov    %rax,%rbp
  41c3d2:	48 85 ff             	test   %rdi,%rdi
  41c3d5:	74 de                	je     41c3b5 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c3d7:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c3de:	ff ff ff 
  41c3e1:	48 01 d8             	add    %rbx,%rax
  41c3e4:	ff d0                	callq  *%rax
  41c3e6:	eb cd                	jmp    41c3b5 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c3e8:	48 89 c5             	mov    %rax,%rbp
  41c3eb:	48 8b 04 24          	mov    (%rsp),%rax
  41c3ef:	48 85 c0             	test   %rax,%rax
  41c3f2:	74 c1                	je     41c3b5 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c3f4:	48 89 c7             	mov    %rax,%rdi
  41c3f7:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c3fe:	ff ff ff 
  41c401:	48 01 d8             	add    %rbx,%rax
  41c404:	ff d0                	callq  *%rax
  41c406:	eb ad                	jmp    41c3b5 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c408:	48 89 c5             	mov    %rax,%rbp
      m_pMemory(new detail::memory_holder),
  41c40b:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41c412:	ff ff ff 
  41c415:	be 10 00 00 00       	mov    $0x10,%esi
  41c41a:	4c 89 f7             	mov    %r14,%rdi
  41c41d:	49 89 df             	mov    %rbx,%r15
  41c420:	48 01 d8             	add    %rbx,%rax
  41c423:	ff d0                	callq  *%rax
  41c425:	eb c4                	jmp    41c3eb <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
        catch(...)
  41c427:	48 89 c7             	mov    %rax,%rdi
  41c42a:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41c431:	ff ff ff 
  41c434:	49 89 df             	mov    %rbx,%r15
  41c437:	48 01 d8             	add    %rbx,%rax
  41c43a:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41c43c:	48 b8 a0 fd de ff ff 	movabs $0xffffffffffdefda0,%rax
  41c443:	ff ff ff 
  41c446:	4c 89 e7             	mov    %r12,%rdi
  41c449:	48 01 d8             	add    %rbx,%rax
  41c44c:	ff d0                	callq  *%rax
            throw;
  41c44e:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41c455:	ff ff ff 
  41c458:	48 01 d8             	add    %rbx,%rax
  41c45b:	ff d0                	callq  *%rax
        catch(...)
  41c45d:	48 89 c7             	mov    %rax,%rdi
  41c460:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41c467:	ff ff ff 
  41c46a:	49 89 df             	mov    %rbx,%r15
  41c46d:	48 01 d8             	add    %rbx,%rax
  41c470:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41c472:	48 b8 c0 fe de ff ff 	movabs $0xffffffffffdefec0,%rax
  41c479:	ff ff ff 
  41c47c:	4c 89 f7             	mov    %r14,%rdi
  41c47f:	48 01 d8             	add    %rbx,%rax
  41c482:	ff d0                	callq  *%rax
            throw;
  41c484:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41c48b:	ff ff ff 
  41c48e:	48 01 d8             	add    %rbx,%rax
  41c491:	ff d0                	callq  *%rax
  41c493:	48 b8 8e ec dd ff ff 	movabs $0xffffffffffddec8e,%rax
  41c49a:	ff ff ff 
  41c49d:	48 01 d8             	add    %rbx,%rax
  41c4a0:	ff d0                	callq  *%rax
  41c4a2:	48 89 c5             	mov    %rax,%rbp
        catch(...)
  41c4a5:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  41c4ac:	ff ff ff 
  41c4af:	49 89 df             	mov    %rbx,%r15
  41c4b2:	48 01 d8             	add    %rbx,%rax
  41c4b5:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c4b7:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  41c4bb:	48 85 ff             	test   %rdi,%rdi
  41c4be:	0f 84 47 ff ff ff    	je     41c40b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x51b>
  41c4c4:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c4cb:	ff ff ff 
  41c4ce:	48 01 d8             	add    %rbx,%rax
  41c4d1:	ff d0                	callq  *%rax
  41c4d3:	e9 33 ff ff ff       	jmpq   41c40b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x51b>
  41c4d8:	48 89 c5             	mov    %rax,%rbp
        catch(...)
  41c4db:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  41c4e2:	ff ff ff 
  41c4e5:	49 89 df             	mov    %rbx,%r15
  41c4e8:	48 01 d8             	add    %rbx,%rax
  41c4eb:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c4ed:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c4f2:	48 85 ff             	test   %rdi,%rdi
  41c4f5:	0f 84 f0 fe ff ff    	je     41c3eb <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c4fb:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c502:	ff ff ff 
  41c505:	48 01 d8             	add    %rbx,%rax
  41c508:	ff d0                	callq  *%rax
  41c50a:	e9 dc fe ff ff       	jmpq   41c3eb <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
        BOOST_ASSERT( px != 0 );
  41c50f:	48 b8 e0 89 df ff ff 	movabs $0xffffffffffdf89e0,%rax
  41c516:	ff ff ff 
  41c519:	ba de 02 00 00       	mov    $0x2de,%edx
  41c51e:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
        BOOST_ASSERT( px != 0 );
  41c522:	48 b8 20 7d df ff ff 	movabs $0xffffffffffdf7d20,%rax
  41c529:	ff ff ff 
  41c52c:	49 89 df             	mov    %rbx,%r15
  41c52f:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c533:	48 b8 e9 80 df ff ff 	movabs $0xffffffffffdf80e9,%rax
  41c53a:	ff ff ff 
  41c53d:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41c541:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  41c548:	ff ff ff 
  41c54b:	48 01 d8             	add    %rbx,%rax
  41c54e:	ff d0                	callq  *%rax
  41c550:	48 89 c5             	mov    %rax,%rbp
  41c553:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c558:	48 85 ff             	test   %rdi,%rdi
  41c55b:	0f 84 8a fe ff ff    	je     41c3eb <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c561:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c568:	ff ff ff 
  41c56b:	48 01 d8             	add    %rbx,%rax
  41c56e:	ff d0                	callq  *%rax
  41c570:	e9 76 fe ff ff       	jmpq   41c3eb <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
    throw InvalidNode();
  41c575:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41c57c:	ff ff ff 
  41c57f:	bf 40 00 00 00       	mov    $0x40,%edi
  41c584:	48 01 d8             	add    %rbx,%rax
  41c587:	ff d0                	callq  *%rax
  41c589:	49 89 c4             	mov    %rax,%r12
  41c58c:	48 89 c7             	mov    %rax,%rdi
  41c58f:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  41c596:	ff ff ff 
  41c599:	48 01 d8             	add    %rbx,%rax
  41c59c:	ff d0                	callq  *%rax
  41c59e:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  41c5a5:	ff ff ff 
  41c5a8:	4c 89 e7             	mov    %r12,%rdi
  41c5ab:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41c5af:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41c5b6:	ff ff ff 
  41c5b9:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c5bd:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41c5c4:	ff ff ff 
  41c5c7:	48 01 d8             	add    %rbx,%rax
  41c5ca:	ff d0                	callq  *%rax
  41c5cc:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  41c5d3:	ff ff ff 
  41c5d6:	48 01 d8             	add    %rbx,%rax
  41c5d9:	ff d0                	callq  *%rax
  41c5db:	48 89 c5             	mov    %rax,%rbp
  41c5de:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  41c5e5:	ff ff ff 
  41c5e8:	4c 89 e7             	mov    %r12,%rdi
  41c5eb:	49 89 df             	mov    %rbx,%r15
  41c5ee:	48 01 d8             	add    %rbx,%rax
  41c5f1:	ff d0                	callq  *%rax
  41c5f3:	e9 5b ff ff ff       	jmpq   41c553 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x663>
  41c5f8:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  41c5ff:	ff ff ff 
  41c602:	48 01 d8             	add    %rbx,%rax
  41c605:	ff d0                	callq  *%rax
  41c607:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c60c:	48 89 c5             	mov    %rax,%rbp
  41c60f:	48 85 ff             	test   %rdi,%rdi
  41c612:	0f 84 d3 fd ff ff    	je     41c3eb <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c618:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c61f:	ff ff ff 
  41c622:	48 01 d8             	add    %rbx,%rax
  41c625:	ff d0                	callq  *%rax
  41c627:	e9 bf fd ff ff       	jmpq   41c3eb <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c62c:	48 b8 40 87 df ff ff 	movabs $0xffffffffffdf8740,%rax
  41c633:	ff ff ff 
  41c636:	ba d8 02 00 00       	mov    $0x2d8,%edx
  41c63b:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  41c63f:	e9 de fe ff ff       	jmpq   41c522 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x632>
  41c644:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41c64b:	ff ff ff 
  41c64e:	49 89 c4             	mov    %rax,%r12
  41c651:	48 89 ef             	mov    %rbp,%rdi
  41c654:	49 89 df             	mov    %rbx,%r15
  41c657:	48 01 da             	add    %rbx,%rdx
  41c65a:	ff d2                	callq  *%rdx
  41c65c:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41c663:	ff ff ff 
  41c666:	4c 89 e7             	mov    %r12,%rdi
  41c669:	48 01 d8             	add    %rbx,%rax
  41c66c:	ff d0                	callq  *%rax
  41c66e:	66 90                	xchg   %ax,%ax

000000000041c670 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE>:
    // it, and returns a pointer so that it can be NULL (if there is no such
    // key).
    return static_cast<const node_ref&>(*m_pRef).get(key, pMemory);
  }
  template <typename Key>
  node& get(const Key& key, shared_memory_holder pMemory) {
  41c670:	41 57                	push   %r15
  41c672:	41 56                	push   %r14
  41c674:	49 bb 90 e9 20 00 00 	movabs $0x20e990,%r11
  41c67b:	00 00 00 
  41c67e:	41 55                	push   %r13
  41c680:	41 54                	push   %r12
  41c682:	49 89 fd             	mov    %rdi,%r13
  41c685:	55                   	push   %rbp
  41c686:	53                   	push   %rbx
  41c687:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41c670 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE>
  41c68e:	48 83 ec 18          	sub    $0x18,%rsp
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c692:	48 8b 6a 08          	mov    0x8(%rdx),%rbp
  41c696:	4c 01 db             	add    %r11,%rbx
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c699:	48 8b 0a             	mov    (%rdx),%rcx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c69c:	48 85 ed             	test   %rbp,%rbp
  41c69f:	0f 84 d3 00 00 00    	je     41c778 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x108>
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  41c6a5:	48 8d 45 08          	lea    0x8(%rbp),%rax
  41c6a9:	f0 83 00 01          	lock addl $0x1,(%rax)
  41c6ad:	48 8b 17             	mov    (%rdi),%rdx
        BOOST_ASSERT( px != 0 );
  41c6b0:	48 85 d2             	test   %rdx,%rdx
  41c6b3:	0f 84 d9 00 00 00    	je     41c792 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x122>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c6b9:	48 89 0c 24          	mov    %rcx,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c6bd:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  41c6c2:	f0 83 00 01          	lock addl $0x1,(%rax)
  41c6c6:	48 8b 3a             	mov    (%rdx),%rdi
        BOOST_ASSERT( px != 0 );
  41c6c9:	48 85 ff             	test   %rdi,%rdi
  41c6cc:	0f 84 cf 00 00 00    	je     41c7a1 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x131>
  node* get(const Key& key, shared_memory_holder pMemory) const {
    return static_cast<const node_data&>(*m_pData).get(key, pMemory);
  }
  template <typename Key>
  node& get(const Key& key, shared_memory_holder pMemory) {
    return m_pData->get(key, pMemory);
  41c6d2:	48 b8 f0 0e df ff ff 	movabs $0xffffffffffdf0ef0,%rax
  41c6d9:	ff ff ff 
  41c6dc:	49 89 e6             	mov    %rsp,%r14
  41c6df:	48 89 e2             	mov    %rsp,%rdx
  41c6e2:	48 01 d8             	add    %rbx,%rax
  41c6e5:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c6e7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c6ec:	49 89 c4             	mov    %rax,%r12
  41c6ef:	48 85 ff             	test   %rdi,%rdi
  41c6f2:	74 0f                	je     41c703 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x93>
  41c6f4:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c6fb:	ff ff ff 
  41c6fe:	48 01 d8             	add    %rbx,%rax
  41c701:	ff d0                	callq  *%rax
  41c703:	48 85 ed             	test   %rbp,%rbp
  41c706:	74 12                	je     41c71a <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xaa>
  41c708:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c70f:	ff ff ff 
  41c712:	48 89 ef             	mov    %rbp,%rdi
  41c715:	48 01 d8             	add    %rbx,%rax
  41c718:	ff d0                	callq  *%rax
  41c71a:	49 8b 04 24          	mov    (%r12),%rax
  41c71e:	48 85 c0             	test   %rax,%rax
  41c721:	74 6f                	je     41c792 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x122>
  41c723:	48 8b 00             	mov    (%rax),%rax
  41c726:	48 85 c0             	test   %rax,%rax
  41c729:	74 76                	je     41c7a1 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x131>
    if (is_defined())
  41c72b:	80 38 00             	cmpb   $0x0,(%rax)
  41c72e:	75 30                	jne    41c760 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xf0>
	  _M_t._M_insert_unique(std::move(__x));
  41c730:	48 b8 a0 db de ff ff 	movabs $0xffffffffffdedba0,%rax
  41c737:	ff ff ff 
      m_dependencies.insert(&rhs);
  41c73a:	4c 89 2c 24          	mov    %r13,(%rsp)
  41c73e:	49 8d 7c 24 10       	lea    0x10(%r12),%rdi
  41c743:	4c 89 f6             	mov    %r14,%rsi
  41c746:	48 01 d8             	add    %rbx,%rax
  41c749:	ff d0                	callq  *%rax
    node& value = m_pRef->get(key, pMemory);
    value.add_dependency(*this);
    return value;
  }
  41c74b:	48 83 c4 18          	add    $0x18,%rsp
  41c74f:	4c 89 e0             	mov    %r12,%rax
  41c752:	5b                   	pop    %rbx
  41c753:	5d                   	pop    %rbp
  41c754:	41 5c                	pop    %r12
  41c756:	41 5d                	pop    %r13
  41c758:	41 5e                	pop    %r14
  41c75a:	41 5f                	pop    %r15
  41c75c:	c3                   	retq   
  41c75d:	0f 1f 00             	nopl   (%rax)
      rhs.mark_defined();
  41c760:	48 b8 60 da de ff ff 	movabs $0xffffffffffdeda60,%rax
  41c767:	ff ff ff 
  41c76a:	4c 89 ef             	mov    %r13,%rdi
  41c76d:	48 01 d8             	add    %rbx,%rax
  41c770:	ff d0                	callq  *%rax
  41c772:	eb d7                	jmp    41c74b <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xdb>
  41c774:	0f 1f 40 00          	nopl   0x0(%rax)
  41c778:	48 8b 17             	mov    (%rdi),%rdx
  41c77b:	48 85 d2             	test   %rdx,%rdx
  41c77e:	74 12                	je     41c792 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x122>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c780:	48 89 0c 24          	mov    %rcx,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c784:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  41c78b:	00 00 
  41c78d:	e9 34 ff ff ff       	jmpq   41c6c6 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x56>
  41c792:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  41c799:	ff ff ff 
  41c79c:	48 01 d8             	add    %rbx,%rax
  41c79f:	ff d0                	callq  *%rax
  41c7a1:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  41c7a8:	ff ff ff 
  41c7ab:	48 01 d8             	add    %rbx,%rax
  41c7ae:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c7b0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c7b5:	49 89 c4             	mov    %rax,%r12
  41c7b8:	48 85 ff             	test   %rdi,%rdi
  41c7bb:	74 0f                	je     41c7cc <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x15c>
  41c7bd:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c7c4:	ff ff ff 
  41c7c7:	48 01 d8             	add    %rbx,%rax
  41c7ca:	ff d0                	callq  *%rax
  41c7cc:	48 85 ed             	test   %rbp,%rbp
  41c7cf:	74 12                	je     41c7e3 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x173>
  41c7d1:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c7d8:	ff ff ff 
  41c7db:	48 89 ef             	mov    %rbp,%rdi
  41c7de:	48 01 d8             	add    %rbx,%rax
  41c7e1:	ff d0                	callq  *%rax
  41c7e3:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41c7ea:	ff ff ff 
  41c7ed:	4c 89 e7             	mov    %r12,%rdi
  41c7f0:	49 89 df             	mov    %rbx,%r15
  41c7f3:	48 01 d8             	add    %rbx,%rax
  41c7f6:	ff d0                	callq  *%rax
  41c7f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41c7ff:	00 

000000000041c800 <_ZN4YAML4NodeixIA11_cEES0_RKT_>:

template <typename Key>
inline Node Node::operator[](const Key& key) {
  41c800:	41 57                	push   %r15
  41c802:	41 56                	push   %r14
  41c804:	49 bb 00 e8 20 00 00 	movabs $0x20e800,%r11
  41c80b:	00 00 00 
  41c80e:	41 55                	push   %r13
  41c810:	41 54                	push   %r12
  41c812:	55                   	push   %rbp
  41c813:	53                   	push   %rbx
  41c814:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41c800 <_ZN4YAML4NodeixIA11_cEES0_RKT_>
  41c81b:	48 83 ec 38          	sub    $0x38,%rsp
  41c81f:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41c822:	80 3e 00             	cmpb   $0x0,(%rsi)
  41c825:	0f 84 0f 01 00 00    	je     41c93a <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x13a>
  41c82b:	48 89 f5             	mov    %rsi,%rbp
    throw InvalidNode();
  EnsureNodeExists();
  41c82e:	48 b8 20 ff de ff ff 	movabs $0xffffffffffdeff20,%rax
  41c835:	ff ff ff 
  41c838:	49 89 fc             	mov    %rdi,%r12
  41c83b:	48 01 d8             	add    %rbx,%rax
  41c83e:	49 89 d6             	mov    %rdx,%r14
  41c841:	48 89 f7             	mov    %rsi,%rdi
  41c844:	ff d0                	callq  *%rax
  41c846:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41c84a:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c84e:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c852:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c855:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c85a:	74 05                	je     41c861 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x61>
  41c85c:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41c861:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41c866:	48 b8 10 2d de ff ff 	movabs $0xffffffffffde2d10,%rax
  41c86d:	ff ff ff 
  41c870:	4c 89 f6             	mov    %r14,%rsi
  41c873:	48 01 d8             	add    %rbx,%rax
  41c876:	4c 89 ef             	mov    %r13,%rdi
  41c879:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41c87b:	48 b8 70 16 df ff ff 	movabs $0xffffffffffdf1670,%rax
  41c882:	ff ff ff 
  41c885:	48 89 e2             	mov    %rsp,%rdx
  41c888:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41c88c:	4c 89 ee             	mov    %r13,%rsi
  41c88f:	48 01 d8             	add    %rbx,%rax
  41c892:	ff d0                	callq  *%rax
  41c894:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41c899:	49 83 c5 10          	add    $0x10,%r13
  41c89d:	49 89 c6             	mov    %rax,%r14
  41c8a0:	4c 39 ef             	cmp    %r13,%rdi
  41c8a3:	74 12                	je     41c8b7 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0xb7>
  41c8a5:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41c8ac:	ff ff ff 
  41c8af:	49 89 df             	mov    %rbx,%r15
  41c8b2:	48 01 d8             	add    %rbx,%rax
  41c8b5:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c8b7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c8bc:	48 85 ff             	test   %rdi,%rdi
  41c8bf:	74 0f                	je     41c8d0 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0xd0>
  41c8c1:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c8c8:	ff ff ff 
  41c8cb:	48 01 d8             	add    %rbx,%rax
  41c8ce:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c8d0:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41c8d4:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c8d8:	48 85 ff             	test   %rdi,%rdi
  41c8db:	74 43                	je     41c920 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x120>
  41c8dd:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41c8e1:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41c8e5:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41c8ea:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c8ef:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41c8f4:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41c8f8:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c8ff:	ff ff ff 
  41c902:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41c907:	48 01 d8             	add    %rbx,%rax
  41c90a:	ff d0                	callq  *%rax
  return Node(value, m_pMemory);
}
  41c90c:	48 83 c4 38          	add    $0x38,%rsp
  41c910:	4c 89 e0             	mov    %r12,%rax
  41c913:	5b                   	pop    %rbx
  41c914:	5d                   	pop    %rbp
  41c915:	41 5c                	pop    %r12
  41c917:	41 5d                	pop    %r13
  41c919:	41 5e                	pop    %r14
  41c91b:	41 5f                	pop    %r15
  41c91d:	c3                   	retq   
  41c91e:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41c920:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41c925:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c92a:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41c931:	00 00 
  41c933:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41c938:	eb d2                	jmp    41c90c <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41c93a:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41c941:	ff ff ff 
  41c944:	bf 40 00 00 00       	mov    $0x40,%edi
  41c949:	49 89 df             	mov    %rbx,%r15
  41c94c:	48 01 d8             	add    %rbx,%rax
  41c94f:	ff d0                	callq  *%rax
  41c951:	48 89 c5             	mov    %rax,%rbp
  41c954:	48 89 c7             	mov    %rax,%rdi
  41c957:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  41c95e:	ff ff ff 
  41c961:	48 01 d8             	add    %rbx,%rax
  41c964:	ff d0                	callq  *%rax
  41c966:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  41c96d:	ff ff ff 
  41c970:	48 89 ef             	mov    %rbp,%rdi
  41c973:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41c977:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41c97e:	ff ff ff 
  41c981:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c985:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41c98c:	ff ff ff 
  41c98f:	48 01 d8             	add    %rbx,%rax
  41c992:	ff d0                	callq  *%rax
  41c994:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41c999:	49 83 c5 10          	add    $0x10,%r13
  41c99d:	48 89 c5             	mov    %rax,%rbp
  41c9a0:	4c 39 ef             	cmp    %r13,%rdi
  41c9a3:	74 12                	je     41c9b7 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x1b7>
  41c9a5:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41c9ac:	ff ff ff 
  41c9af:	49 89 df             	mov    %rbx,%r15
  41c9b2:	48 01 d8             	add    %rbx,%rax
  41c9b5:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c9b7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c9bc:	48 85 ff             	test   %rdi,%rdi
  41c9bf:	74 0f                	je     41c9d0 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x1d0>
  41c9c1:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41c9c8:	ff ff ff 
  41c9cb:	48 01 d8             	add    %rbx,%rax
  41c9ce:	ff d0                	callq  *%rax
  41c9d0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41c9d7:	ff ff ff 
  41c9da:	48 89 ef             	mov    %rbp,%rdi
  41c9dd:	49 89 df             	mov    %rbx,%r15
  41c9e0:	48 01 d8             	add    %rbx,%rax
  41c9e3:	ff d0                	callq  *%rax
  41c9e5:	48 89 c5             	mov    %rax,%rbp
  41c9e8:	eb cd                	jmp    41c9b7 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x1b7>
  41c9ea:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41c9f1:	ff ff ff 
  41c9f4:	49 89 c4             	mov    %rax,%r12
  41c9f7:	48 89 ef             	mov    %rbp,%rdi
  41c9fa:	49 89 df             	mov    %rbx,%r15
  41c9fd:	48 01 da             	add    %rbx,%rdx
  41ca00:	ff d2                	callq  *%rdx
  41ca02:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41ca09:	ff ff ff 
  41ca0c:	4c 89 e7             	mov    %r12,%rdi
  41ca0f:	48 01 d8             	add    %rbx,%rax
  41ca12:	ff d0                	callq  *%rax
  41ca14:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ca1b:	00 00 00 
  41ca1e:	66 90                	xchg   %ax,%ax

000000000041ca20 <_ZN4YAML4NodeixIA4_cEES0_RKT_>:
inline Node Node::operator[](const Key& key) {
  41ca20:	41 57                	push   %r15
  41ca22:	41 56                	push   %r14
  41ca24:	49 bb e0 e5 20 00 00 	movabs $0x20e5e0,%r11
  41ca2b:	00 00 00 
  41ca2e:	41 55                	push   %r13
  41ca30:	41 54                	push   %r12
  41ca32:	55                   	push   %rbp
  41ca33:	53                   	push   %rbx
  41ca34:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41ca20 <_ZN4YAML4NodeixIA4_cEES0_RKT_>
  41ca3b:	48 83 ec 38          	sub    $0x38,%rsp
  41ca3f:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41ca42:	80 3e 00             	cmpb   $0x0,(%rsi)
  41ca45:	0f 84 0f 01 00 00    	je     41cb5a <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x13a>
  41ca4b:	48 89 f5             	mov    %rsi,%rbp
  EnsureNodeExists();
  41ca4e:	48 b8 20 ff de ff ff 	movabs $0xffffffffffdeff20,%rax
  41ca55:	ff ff ff 
  41ca58:	49 89 fc             	mov    %rdi,%r12
  41ca5b:	48 01 d8             	add    %rbx,%rax
  41ca5e:	49 89 d6             	mov    %rdx,%r14
  41ca61:	48 89 f7             	mov    %rsi,%rdi
  41ca64:	ff d0                	callq  *%rax
  41ca66:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41ca6a:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ca6e:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41ca72:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ca75:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41ca7a:	74 05                	je     41ca81 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x61>
  41ca7c:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41ca81:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41ca86:	48 b8 10 2d de ff ff 	movabs $0xffffffffffde2d10,%rax
  41ca8d:	ff ff ff 
  41ca90:	4c 89 f6             	mov    %r14,%rsi
  41ca93:	48 01 d8             	add    %rbx,%rax
  41ca96:	4c 89 ef             	mov    %r13,%rdi
  41ca99:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41ca9b:	48 b8 70 16 df ff ff 	movabs $0xffffffffffdf1670,%rax
  41caa2:	ff ff ff 
  41caa5:	48 89 e2             	mov    %rsp,%rdx
  41caa8:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41caac:	4c 89 ee             	mov    %r13,%rsi
  41caaf:	48 01 d8             	add    %rbx,%rax
  41cab2:	ff d0                	callq  *%rax
  41cab4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cab9:	49 83 c5 10          	add    $0x10,%r13
  41cabd:	49 89 c6             	mov    %rax,%r14
  41cac0:	4c 39 ef             	cmp    %r13,%rdi
  41cac3:	74 12                	je     41cad7 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0xb7>
  41cac5:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41cacc:	ff ff ff 
  41cacf:	49 89 df             	mov    %rbx,%r15
  41cad2:	48 01 d8             	add    %rbx,%rax
  41cad5:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cad7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cadc:	48 85 ff             	test   %rdi,%rdi
  41cadf:	74 0f                	je     41caf0 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0xd0>
  41cae1:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41cae8:	ff ff ff 
  41caeb:	48 01 d8             	add    %rbx,%rax
  41caee:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41caf0:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41caf4:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41caf8:	48 85 ff             	test   %rdi,%rdi
  41cafb:	74 43                	je     41cb40 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x120>
  41cafd:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41cb01:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cb05:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cb0a:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cb0f:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41cb14:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41cb18:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41cb1f:	ff ff ff 
  41cb22:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cb27:	48 01 d8             	add    %rbx,%rax
  41cb2a:	ff d0                	callq  *%rax
}
  41cb2c:	48 83 c4 38          	add    $0x38,%rsp
  41cb30:	4c 89 e0             	mov    %r12,%rax
  41cb33:	5b                   	pop    %rbx
  41cb34:	5d                   	pop    %rbp
  41cb35:	41 5c                	pop    %r12
  41cb37:	41 5d                	pop    %r13
  41cb39:	41 5e                	pop    %r14
  41cb3b:	41 5f                	pop    %r15
  41cb3d:	c3                   	retq   
  41cb3e:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cb40:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cb45:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cb4a:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41cb51:	00 00 
  41cb53:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cb58:	eb d2                	jmp    41cb2c <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41cb5a:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41cb61:	ff ff ff 
  41cb64:	bf 40 00 00 00       	mov    $0x40,%edi
  41cb69:	49 89 df             	mov    %rbx,%r15
  41cb6c:	48 01 d8             	add    %rbx,%rax
  41cb6f:	ff d0                	callq  *%rax
  41cb71:	48 89 c5             	mov    %rax,%rbp
  41cb74:	48 89 c7             	mov    %rax,%rdi
  41cb77:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  41cb7e:	ff ff ff 
  41cb81:	48 01 d8             	add    %rbx,%rax
  41cb84:	ff d0                	callq  *%rax
  41cb86:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  41cb8d:	ff ff ff 
  41cb90:	48 89 ef             	mov    %rbp,%rdi
  41cb93:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41cb97:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41cb9e:	ff ff ff 
  41cba1:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41cba5:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41cbac:	ff ff ff 
  41cbaf:	48 01 d8             	add    %rbx,%rax
  41cbb2:	ff d0                	callq  *%rax
  41cbb4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cbb9:	49 83 c5 10          	add    $0x10,%r13
  41cbbd:	48 89 c5             	mov    %rax,%rbp
  41cbc0:	4c 39 ef             	cmp    %r13,%rdi
  41cbc3:	74 12                	je     41cbd7 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x1b7>
  41cbc5:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41cbcc:	ff ff ff 
  41cbcf:	49 89 df             	mov    %rbx,%r15
  41cbd2:	48 01 d8             	add    %rbx,%rax
  41cbd5:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cbd7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cbdc:	48 85 ff             	test   %rdi,%rdi
  41cbdf:	74 0f                	je     41cbf0 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x1d0>
  41cbe1:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41cbe8:	ff ff ff 
  41cbeb:	48 01 d8             	add    %rbx,%rax
  41cbee:	ff d0                	callq  *%rax
  41cbf0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41cbf7:	ff ff ff 
  41cbfa:	48 89 ef             	mov    %rbp,%rdi
  41cbfd:	49 89 df             	mov    %rbx,%r15
  41cc00:	48 01 d8             	add    %rbx,%rax
  41cc03:	ff d0                	callq  *%rax
  41cc05:	48 89 c5             	mov    %rax,%rbp
  41cc08:	eb cd                	jmp    41cbd7 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x1b7>
  41cc0a:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41cc11:	ff ff ff 
  41cc14:	49 89 c4             	mov    %rax,%r12
  41cc17:	48 89 ef             	mov    %rbp,%rdi
  41cc1a:	49 89 df             	mov    %rbx,%r15
  41cc1d:	48 01 da             	add    %rbx,%rdx
  41cc20:	ff d2                	callq  *%rdx
  41cc22:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41cc29:	ff ff ff 
  41cc2c:	4c 89 e7             	mov    %r12,%rdi
  41cc2f:	48 01 d8             	add    %rbx,%rax
  41cc32:	ff d0                	callq  *%rax
  41cc34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41cc3b:	00 00 00 
  41cc3e:	66 90                	xchg   %ax,%ax

000000000041cc40 <_ZN4YAML4NodeixIA10_cEES0_RKT_>:
inline Node Node::operator[](const Key& key) {
  41cc40:	41 57                	push   %r15
  41cc42:	41 56                	push   %r14
  41cc44:	49 bb c0 e3 20 00 00 	movabs $0x20e3c0,%r11
  41cc4b:	00 00 00 
  41cc4e:	41 55                	push   %r13
  41cc50:	41 54                	push   %r12
  41cc52:	55                   	push   %rbp
  41cc53:	53                   	push   %rbx
  41cc54:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41cc40 <_ZN4YAML4NodeixIA10_cEES0_RKT_>
  41cc5b:	48 83 ec 38          	sub    $0x38,%rsp
  41cc5f:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41cc62:	80 3e 00             	cmpb   $0x0,(%rsi)
  41cc65:	0f 84 0f 01 00 00    	je     41cd7a <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x13a>
  41cc6b:	48 89 f5             	mov    %rsi,%rbp
  EnsureNodeExists();
  41cc6e:	48 b8 20 ff de ff ff 	movabs $0xffffffffffdeff20,%rax
  41cc75:	ff ff ff 
  41cc78:	49 89 fc             	mov    %rdi,%r12
  41cc7b:	48 01 d8             	add    %rbx,%rax
  41cc7e:	49 89 d6             	mov    %rdx,%r14
  41cc81:	48 89 f7             	mov    %rsi,%rdi
  41cc84:	ff d0                	callq  *%rax
  41cc86:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41cc8a:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cc8e:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cc92:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cc95:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cc9a:	74 05                	je     41cca1 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x61>
  41cc9c:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41cca1:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41cca6:	48 b8 10 2d de ff ff 	movabs $0xffffffffffde2d10,%rax
  41ccad:	ff ff ff 
  41ccb0:	4c 89 f6             	mov    %r14,%rsi
  41ccb3:	48 01 d8             	add    %rbx,%rax
  41ccb6:	4c 89 ef             	mov    %r13,%rdi
  41ccb9:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41ccbb:	48 b8 70 16 df ff ff 	movabs $0xffffffffffdf1670,%rax
  41ccc2:	ff ff ff 
  41ccc5:	48 89 e2             	mov    %rsp,%rdx
  41ccc8:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41cccc:	4c 89 ee             	mov    %r13,%rsi
  41cccf:	48 01 d8             	add    %rbx,%rax
  41ccd2:	ff d0                	callq  *%rax
  41ccd4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41ccd9:	49 83 c5 10          	add    $0x10,%r13
  41ccdd:	49 89 c6             	mov    %rax,%r14
  41cce0:	4c 39 ef             	cmp    %r13,%rdi
  41cce3:	74 12                	je     41ccf7 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0xb7>
  41cce5:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ccec:	ff ff ff 
  41ccef:	49 89 df             	mov    %rbx,%r15
  41ccf2:	48 01 d8             	add    %rbx,%rax
  41ccf5:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41ccf7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41ccfc:	48 85 ff             	test   %rdi,%rdi
  41ccff:	74 0f                	je     41cd10 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0xd0>
  41cd01:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41cd08:	ff ff ff 
  41cd0b:	48 01 d8             	add    %rbx,%rax
  41cd0e:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cd10:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41cd14:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cd18:	48 85 ff             	test   %rdi,%rdi
  41cd1b:	74 43                	je     41cd60 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x120>
  41cd1d:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41cd21:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cd25:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cd2a:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cd2f:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41cd34:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41cd38:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41cd3f:	ff ff ff 
  41cd42:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cd47:	48 01 d8             	add    %rbx,%rax
  41cd4a:	ff d0                	callq  *%rax
}
  41cd4c:	48 83 c4 38          	add    $0x38,%rsp
  41cd50:	4c 89 e0             	mov    %r12,%rax
  41cd53:	5b                   	pop    %rbx
  41cd54:	5d                   	pop    %rbp
  41cd55:	41 5c                	pop    %r12
  41cd57:	41 5d                	pop    %r13
  41cd59:	41 5e                	pop    %r14
  41cd5b:	41 5f                	pop    %r15
  41cd5d:	c3                   	retq   
  41cd5e:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cd60:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cd65:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cd6a:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41cd71:	00 00 
  41cd73:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cd78:	eb d2                	jmp    41cd4c <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41cd7a:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41cd81:	ff ff ff 
  41cd84:	bf 40 00 00 00       	mov    $0x40,%edi
  41cd89:	49 89 df             	mov    %rbx,%r15
  41cd8c:	48 01 d8             	add    %rbx,%rax
  41cd8f:	ff d0                	callq  *%rax
  41cd91:	48 89 c5             	mov    %rax,%rbp
  41cd94:	48 89 c7             	mov    %rax,%rdi
  41cd97:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  41cd9e:	ff ff ff 
  41cda1:	48 01 d8             	add    %rbx,%rax
  41cda4:	ff d0                	callq  *%rax
  41cda6:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  41cdad:	ff ff ff 
  41cdb0:	48 89 ef             	mov    %rbp,%rdi
  41cdb3:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41cdb7:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41cdbe:	ff ff ff 
  41cdc1:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41cdc5:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41cdcc:	ff ff ff 
  41cdcf:	48 01 d8             	add    %rbx,%rax
  41cdd2:	ff d0                	callq  *%rax
  41cdd4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cdd9:	49 83 c5 10          	add    $0x10,%r13
  41cddd:	48 89 c5             	mov    %rax,%rbp
  41cde0:	4c 39 ef             	cmp    %r13,%rdi
  41cde3:	74 12                	je     41cdf7 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x1b7>
  41cde5:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41cdec:	ff ff ff 
  41cdef:	49 89 df             	mov    %rbx,%r15
  41cdf2:	48 01 d8             	add    %rbx,%rax
  41cdf5:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cdf7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cdfc:	48 85 ff             	test   %rdi,%rdi
  41cdff:	74 0f                	je     41ce10 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x1d0>
  41ce01:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41ce08:	ff ff ff 
  41ce0b:	48 01 d8             	add    %rbx,%rax
  41ce0e:	ff d0                	callq  *%rax
  41ce10:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41ce17:	ff ff ff 
  41ce1a:	48 89 ef             	mov    %rbp,%rdi
  41ce1d:	49 89 df             	mov    %rbx,%r15
  41ce20:	48 01 d8             	add    %rbx,%rax
  41ce23:	ff d0                	callq  *%rax
  41ce25:	48 89 c5             	mov    %rax,%rbp
  41ce28:	eb cd                	jmp    41cdf7 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x1b7>
  41ce2a:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41ce31:	ff ff ff 
  41ce34:	49 89 c4             	mov    %rax,%r12
  41ce37:	48 89 ef             	mov    %rbp,%rdi
  41ce3a:	49 89 df             	mov    %rbx,%r15
  41ce3d:	48 01 da             	add    %rbx,%rdx
  41ce40:	ff d2                	callq  *%rdx
  41ce42:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41ce49:	ff ff ff 
  41ce4c:	4c 89 e7             	mov    %r12,%rdi
  41ce4f:	48 01 d8             	add    %rbx,%rax
  41ce52:	ff d0                	callq  *%rax
  41ce54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ce5b:	00 00 00 
  41ce5e:	66 90                	xchg   %ax,%ax

000000000041ce60 <_ZN4YAML4NodeixIA7_cEES0_RKT_>:
inline Node Node::operator[](const Key& key) {
  41ce60:	41 57                	push   %r15
  41ce62:	41 56                	push   %r14
  41ce64:	49 bb a0 e1 20 00 00 	movabs $0x20e1a0,%r11
  41ce6b:	00 00 00 
  41ce6e:	41 55                	push   %r13
  41ce70:	41 54                	push   %r12
  41ce72:	55                   	push   %rbp
  41ce73:	53                   	push   %rbx
  41ce74:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41ce60 <_ZN4YAML4NodeixIA7_cEES0_RKT_>
  41ce7b:	48 83 ec 38          	sub    $0x38,%rsp
  41ce7f:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41ce82:	80 3e 00             	cmpb   $0x0,(%rsi)
  41ce85:	0f 84 0f 01 00 00    	je     41cf9a <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x13a>
  41ce8b:	48 89 f5             	mov    %rsi,%rbp
  EnsureNodeExists();
  41ce8e:	48 b8 20 ff de ff ff 	movabs $0xffffffffffdeff20,%rax
  41ce95:	ff ff ff 
  41ce98:	49 89 fc             	mov    %rdi,%r12
  41ce9b:	48 01 d8             	add    %rbx,%rax
  41ce9e:	49 89 d6             	mov    %rdx,%r14
  41cea1:	48 89 f7             	mov    %rsi,%rdi
  41cea4:	ff d0                	callq  *%rax
  41cea6:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41ceaa:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ceae:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41ceb2:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ceb5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41ceba:	74 05                	je     41cec1 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x61>
  41cebc:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41cec1:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41cec6:	48 b8 10 2d de ff ff 	movabs $0xffffffffffde2d10,%rax
  41cecd:	ff ff ff 
  41ced0:	4c 89 f6             	mov    %r14,%rsi
  41ced3:	48 01 d8             	add    %rbx,%rax
  41ced6:	4c 89 ef             	mov    %r13,%rdi
  41ced9:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41cedb:	48 b8 70 16 df ff ff 	movabs $0xffffffffffdf1670,%rax
  41cee2:	ff ff ff 
  41cee5:	48 89 e2             	mov    %rsp,%rdx
  41cee8:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41ceec:	4c 89 ee             	mov    %r13,%rsi
  41ceef:	48 01 d8             	add    %rbx,%rax
  41cef2:	ff d0                	callq  *%rax
  41cef4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cef9:	49 83 c5 10          	add    $0x10,%r13
  41cefd:	49 89 c6             	mov    %rax,%r14
  41cf00:	4c 39 ef             	cmp    %r13,%rdi
  41cf03:	74 12                	je     41cf17 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0xb7>
  41cf05:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41cf0c:	ff ff ff 
  41cf0f:	49 89 df             	mov    %rbx,%r15
  41cf12:	48 01 d8             	add    %rbx,%rax
  41cf15:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cf17:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cf1c:	48 85 ff             	test   %rdi,%rdi
  41cf1f:	74 0f                	je     41cf30 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0xd0>
  41cf21:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41cf28:	ff ff ff 
  41cf2b:	48 01 d8             	add    %rbx,%rax
  41cf2e:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cf30:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41cf34:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cf38:	48 85 ff             	test   %rdi,%rdi
  41cf3b:	74 43                	je     41cf80 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x120>
  41cf3d:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41cf41:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cf45:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cf4a:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cf4f:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41cf54:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41cf58:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41cf5f:	ff ff ff 
  41cf62:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cf67:	48 01 d8             	add    %rbx,%rax
  41cf6a:	ff d0                	callq  *%rax
}
  41cf6c:	48 83 c4 38          	add    $0x38,%rsp
  41cf70:	4c 89 e0             	mov    %r12,%rax
  41cf73:	5b                   	pop    %rbx
  41cf74:	5d                   	pop    %rbp
  41cf75:	41 5c                	pop    %r12
  41cf77:	41 5d                	pop    %r13
  41cf79:	41 5e                	pop    %r14
  41cf7b:	41 5f                	pop    %r15
  41cf7d:	c3                   	retq   
  41cf7e:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cf80:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cf85:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cf8a:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41cf91:	00 00 
  41cf93:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cf98:	eb d2                	jmp    41cf6c <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41cf9a:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41cfa1:	ff ff ff 
  41cfa4:	bf 40 00 00 00       	mov    $0x40,%edi
  41cfa9:	49 89 df             	mov    %rbx,%r15
  41cfac:	48 01 d8             	add    %rbx,%rax
  41cfaf:	ff d0                	callq  *%rax
  41cfb1:	48 89 c5             	mov    %rax,%rbp
  41cfb4:	48 89 c7             	mov    %rax,%rdi
  41cfb7:	48 b8 30 b0 de ff ff 	movabs $0xffffffffffdeb030,%rax
  41cfbe:	ff ff ff 
  41cfc1:	48 01 d8             	add    %rbx,%rax
  41cfc4:	ff d0                	callq  *%rax
  41cfc6:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  41cfcd:	ff ff ff 
  41cfd0:	48 89 ef             	mov    %rbp,%rdi
  41cfd3:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41cfd7:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41cfde:	ff ff ff 
  41cfe1:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41cfe5:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41cfec:	ff ff ff 
  41cfef:	48 01 d8             	add    %rbx,%rax
  41cff2:	ff d0                	callq  *%rax
  41cff4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cff9:	49 83 c5 10          	add    $0x10,%r13
  41cffd:	48 89 c5             	mov    %rax,%rbp
  41d000:	4c 39 ef             	cmp    %r13,%rdi
  41d003:	74 12                	je     41d017 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x1b7>
  41d005:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d00c:	ff ff ff 
  41d00f:	49 89 df             	mov    %rbx,%r15
  41d012:	48 01 d8             	add    %rbx,%rax
  41d015:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41d017:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41d01c:	48 85 ff             	test   %rdi,%rdi
  41d01f:	74 0f                	je     41d030 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x1d0>
  41d021:	48 b8 80 ab de ff ff 	movabs $0xffffffffffdeab80,%rax
  41d028:	ff ff ff 
  41d02b:	48 01 d8             	add    %rbx,%rax
  41d02e:	ff d0                	callq  *%rax
  41d030:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41d037:	ff ff ff 
  41d03a:	48 89 ef             	mov    %rbp,%rdi
  41d03d:	49 89 df             	mov    %rbx,%r15
  41d040:	48 01 d8             	add    %rbx,%rax
  41d043:	ff d0                	callq  *%rax
  41d045:	48 89 c5             	mov    %rax,%rbp
  41d048:	eb cd                	jmp    41d017 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x1b7>
  41d04a:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41d051:	ff ff ff 
  41d054:	49 89 c4             	mov    %rax,%r12
  41d057:	48 89 ef             	mov    %rbp,%rdi
  41d05a:	49 89 df             	mov    %rbx,%r15
  41d05d:	48 01 da             	add    %rbx,%rdx
  41d060:	ff d2                	callq  *%rdx
  41d062:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41d069:	ff ff ff 
  41d06c:	4c 89 e7             	mov    %r12,%rdi
  41d06f:	48 01 d8             	add    %rbx,%rax
  41d072:	ff d0                	callq  *%rax
  41d074:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d07b:	00 00 00 
  41d07e:	66 90                	xchg   %ax,%ax

000000000041d080 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d080:	41 57                	push   %r15
  41d082:	41 56                	push   %r14
  41d084:	49 bb 80 df 20 00 00 	movabs $0x20df80,%r11
  41d08b:	00 00 00 
  41d08e:	41 55                	push   %r13
  41d090:	41 54                	push   %r12
  41d092:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41d080 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>
  41d099:	55                   	push   %rbp
  41d09a:	53                   	push   %rbx
  41d09b:	48 89 fd             	mov    %rdi,%rbp
  41d09e:	4d 01 dc             	add    %r11,%r12
  41d0a1:	48 89 f3             	mov    %rsi,%rbx
  41d0a4:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41d0a8:	48 83 fe 01          	cmp    $0x1,%rsi
  41d0ac:	0f 84 06 01 00 00    	je     41d1b8 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41d0b2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41d0b9:	ff ff 1f 
  41d0bc:	49 89 d5             	mov    %rdx,%r13
  41d0bf:	48 39 c6             	cmp    %rax,%rsi
  41d0c2:	0f 87 04 01 00 00    	ja     41d1cc <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d0c8:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41d0cf:	00 
  41d0d0:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41d0d7:	ff ff ff 
  41d0da:	4d 89 e7             	mov    %r12,%r15
  41d0dd:	4c 01 e0             	add    %r12,%rax
  41d0e0:	4c 89 f7             	mov    %r14,%rdi
  41d0e3:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41d0e5:	48 89 c7             	mov    %rax,%rdi
  41d0e8:	49 89 c5             	mov    %rax,%r13
  41d0eb:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  41d0f2:	ff ff ff 
  41d0f5:	4c 89 f2             	mov    %r14,%rdx
  41d0f8:	31 f6                	xor    %esi,%esi
  41d0fa:	4c 01 e0             	add    %r12,%rax
  41d0fd:	ff d0                	callq  *%rax
  41d0ff:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41d103:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __n, std::true_type)
    {
      __bucket_type* __new_buckets = _M_allocate_buckets(__n);
      __node_type* __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
  41d107:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41d10e:	00 
      std::size_t __bbegin_bkt = 0;
      while (__p)
  41d10f:	48 85 c9             	test   %rcx,%rcx
  41d112:	74 64                	je     41d178 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
  41d114:	45 31 c0             	xor    %r8d,%r8d
	  std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);
	  if (!__new_buckets[__bkt])
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
	      _M_before_begin._M_nxt = __p;
	      __new_buckets[__bkt] = &_M_before_begin;
  41d117:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41d11b:	eb 17                	jmp    41d134 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d11d:	0f 1f 00             	nopl   (%rax)
		__new_buckets[__bbegin_bkt] = __p;
	      __bbegin_bkt = __bkt;
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41d120:	48 8b 16             	mov    (%rsi),%rdx
  41d123:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41d126:	48 8b 00             	mov    (%rax),%rax
  41d129:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41d12c:	48 85 ff             	test   %rdi,%rdi
  41d12f:	48 89 f9             	mov    %rdi,%rcx
  41d132:	74 44                	je     41d178 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41d134:	48 8b 41 18          	mov    0x18(%rcx),%rax
  41d138:	31 d2                	xor    %edx,%edx
  41d13a:	48 8b 39             	mov    (%rcx),%rdi
  41d13d:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41d140:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41d145:	48 8b 30             	mov    (%rax),%rsi
  41d148:	48 85 f6             	test   %rsi,%rsi
  41d14b:	75 d3                	jne    41d120 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41d14d:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41d151:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41d154:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41d158:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41d15b:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41d15f:	74 4f                	je     41d1b0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41d161:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41d164:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41d169:	49 89 d0             	mov    %rdx,%r8
  41d16c:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41d16f:	75 c3                	jne    41d134 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d171:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41d178:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41d17c:	4c 39 d7             	cmp    %r10,%rdi
  41d17f:	74 12                	je     41d193 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41d181:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d188:	ff ff ff 
  41d18b:	4d 89 e7             	mov    %r12,%r15
  41d18e:	4c 01 e0             	add    %r12,%rax
  41d191:	ff d0                	callq  *%rax
	    }
	  __p = __next;
	}

      _M_deallocate_buckets();
      _M_bucket_count = __n;
  41d193:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41d197:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41d19b:	48 83 c4 08          	add    $0x8,%rsp
  41d19f:	5b                   	pop    %rbx
  41d1a0:	5d                   	pop    %rbp
  41d1a1:	41 5c                	pop    %r12
  41d1a3:	41 5d                	pop    %r13
  41d1a5:	41 5e                	pop    %r14
  41d1a7:	41 5f                	pop    %r15
  41d1a9:	c3                   	retq   
  41d1aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41d1b0:	49 89 d0             	mov    %rdx,%r8
  41d1b3:	e9 74 ff ff ff       	jmpq   41d12c <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41d1b8:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41d1bc:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41d1c3:	00 
	    return &_M_single_bucket;
  41d1c4:	4d 89 ea             	mov    %r13,%r10
  41d1c7:	e9 37 ff ff ff       	jmpq   41d103 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41d1cc:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41d1d3:	ff ff ff 
  41d1d6:	4d 89 e7             	mov    %r12,%r15
  41d1d9:	4c 01 e0             	add    %r12,%rax
  41d1dc:	ff d0                	callq  *%rax
      __catch(...)
  41d1de:	48 89 c7             	mov    %rax,%rdi
  41d1e1:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41d1e8:	ff ff ff 
  41d1eb:	4d 89 e7             	mov    %r12,%r15
  41d1ee:	4c 01 e0             	add    %r12,%rax
  41d1f1:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41d1f3:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41d1f7:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41d1fb:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41d202:	ff ff ff 
  41d205:	4c 01 e0             	add    %r12,%rax
  41d208:	ff d0                	callq  *%rax
      __catch(...)
  41d20a:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41d211:	ff ff ff 
  41d214:	48 89 c3             	mov    %rax,%rbx
  41d217:	4d 89 e7             	mov    %r12,%r15
  41d21a:	4c 01 e2             	add    %r12,%rdx
  41d21d:	ff d2                	callq  *%rdx
  41d21f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41d226:	ff ff ff 
  41d229:	48 89 df             	mov    %rbx,%rdi
  41d22c:	4c 01 e0             	add    %r12,%rax
  41d22f:	ff d0                	callq  *%rax
  41d231:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d238:	00 00 00 
  41d23b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d240 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d240:	41 57                	push   %r15
  41d242:	41 56                	push   %r14
  41d244:	49 bb c0 dd 20 00 00 	movabs $0x20ddc0,%r11
  41d24b:	00 00 00 
  41d24e:	41 55                	push   %r13
  41d250:	41 54                	push   %r12
  41d252:	49 89 f6             	mov    %rsi,%r14
  41d255:	55                   	push   %rbp
  41d256:	53                   	push   %rbx
  41d257:	48 8d 2d e2 ff ff ff 	lea    -0x1e(%rip),%rbp        # 41d240 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE>
  41d25e:	48 89 fb             	mov    %rdi,%rbx
  41d261:	49 89 d5             	mov    %rdx,%r13
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d264:	48 83 c7 20          	add    $0x20,%rdi
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d268:	48 83 ec 18          	sub    $0x18,%rsp
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  41d26c:	48 8b 47 08          	mov    0x8(%rdi),%rax
  41d270:	4c 01 dd             	add    %r11,%rbp
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d273:	48 8b 57 f8          	mov    -0x8(%rdi),%rdx
  41d277:	48 8b 77 e8          	mov    -0x18(%rdi),%rsi
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d27b:	49 89 cc             	mov    %rcx,%r12
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d27e:	49 89 ef             	mov    %rbp,%r15
  41d281:	b9 01 00 00 00       	mov    $0x1,%ecx
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  41d286:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d28b:	48 b8 90 e8 dd ff ff 	movabs $0xffffffffffdde890,%rax
  41d292:	ff ff ff 
  41d295:	48 01 e8             	add    %rbp,%rax
  41d298:	ff d0                	callq  *%rax
	  if (__do_rehash.first)
  41d29a:	84 c0                	test   %al,%al
  41d29c:	74 26                	je     41d2c4 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0x84>
	      _M_rehash(__do_rehash.second, __saved_state);
  41d29e:	48 b8 80 20 df ff ff 	movabs $0xffffffffffdf2080,%rax
  41d2a5:	ff ff ff 
  41d2a8:	48 89 d6             	mov    %rdx,%rsi
  41d2ab:	48 89 df             	mov    %rbx,%rdi
  41d2ae:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  41d2b3:	48 01 e8             	add    %rbp,%rax
  41d2b6:	ff d0                	callq  *%rax
    { return __num % __den; }
  41d2b8:	4c 89 e8             	mov    %r13,%rax
  41d2bb:	31 d2                	xor    %edx,%edx
  41d2bd:	48 f7 73 08          	divq   0x8(%rbx)
  41d2c1:	49 89 d6             	mov    %rdx,%r14
      if (_M_buckets[__bkt])
  41d2c4:	48 8b 33             	mov    (%rbx),%rsi
      { __n->_M_hash_code = __c; }
  41d2c7:	4d 89 6c 24 18       	mov    %r13,0x18(%r12)
  41d2cc:	4a 8d 0c f6          	lea    (%rsi,%r14,8),%rcx
  41d2d0:	48 8b 01             	mov    (%rcx),%rax
  41d2d3:	48 85 c0             	test   %rax,%rax
  41d2d6:	74 28                	je     41d300 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0xc0>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  41d2d8:	48 8b 00             	mov    (%rax),%rax
  41d2db:	49 89 04 24          	mov    %rax,(%r12)
	  _M_buckets[__bkt]->_M_nxt = __node;
  41d2df:	48 8b 01             	mov    (%rcx),%rax
  41d2e2:	4c 89 20             	mov    %r12,(%rax)
	  ++_M_element_count;
  41d2e5:	48 83 43 18 01       	addq   $0x1,0x18(%rbx)
    }
  41d2ea:	48 83 c4 18          	add    $0x18,%rsp
  41d2ee:	4c 89 e0             	mov    %r12,%rax
  41d2f1:	5b                   	pop    %rbx
  41d2f2:	5d                   	pop    %rbp
  41d2f3:	41 5c                	pop    %r12
  41d2f5:	41 5d                	pop    %r13
  41d2f7:	41 5e                	pop    %r14
  41d2f9:	41 5f                	pop    %r15
  41d2fb:	c3                   	retq   
  41d2fc:	0f 1f 40 00          	nopl   0x0(%rax)
	  __node->_M_nxt = _M_before_begin._M_nxt;
  41d300:	48 8b 43 10          	mov    0x10(%rbx),%rax
	  if (__node->_M_nxt)
  41d304:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  41d307:	49 89 04 24          	mov    %rax,(%r12)
	  _M_before_begin._M_nxt = __node;
  41d30b:	4c 89 63 10          	mov    %r12,0x10(%rbx)
	  if (__node->_M_nxt)
  41d30f:	74 12                	je     41d323 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0xe3>
    { return __num % __den; }
  41d311:	49 8b 04 24          	mov    (%r12),%rax
  41d315:	31 d2                	xor    %edx,%edx
  41d317:	48 8b 40 18          	mov    0x18(%rax),%rax
  41d31b:	48 f7 73 08          	divq   0x8(%rbx)
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  41d31f:	4c 89 24 d6          	mov    %r12,(%rsi,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  41d323:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41d327:	48 89 01             	mov    %rax,(%rcx)
  41d32a:	eb b9                	jmp    41d2e5 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0xa5>
      __catch(...)
  41d32c:	48 89 c7             	mov    %rax,%rdi
  41d32f:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41d336:	ff ff ff 
  41d339:	49 89 ef             	mov    %rbp,%r15
  41d33c:	48 01 e8             	add    %rbp,%rax
  41d33f:	ff d0                	callq  *%rax
      { ::operator delete(__p); }
  41d341:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d348:	ff ff ff 
  41d34b:	4c 89 e7             	mov    %r12,%rdi
  41d34e:	48 01 e8             	add    %rbp,%rax
  41d351:	ff d0                	callq  *%rax
	  __throw_exception_again;
  41d353:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41d35a:	ff ff ff 
  41d35d:	48 01 e8             	add    %rbp,%rax
  41d360:	ff d0                	callq  *%rax
      __catch(...)
  41d362:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41d369:	ff ff ff 
  41d36c:	48 89 c3             	mov    %rax,%rbx
  41d36f:	49 89 ef             	mov    %rbp,%r15
  41d372:	48 01 ea             	add    %rbp,%rdx
  41d375:	ff d2                	callq  *%rdx
  41d377:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41d37e:	ff ff ff 
  41d381:	48 89 df             	mov    %rbx,%rdi
  41d384:	48 01 e8             	add    %rbp,%rax
  41d387:	ff d0                	callq  *%rax
  41d389:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041d390 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d390:	41 57                	push   %r15
  41d392:	41 56                	push   %r14
  41d394:	49 bb 70 dc 20 00 00 	movabs $0x20dc70,%r11
  41d39b:	00 00 00 
  41d39e:	41 55                	push   %r13
  41d3a0:	41 54                	push   %r12
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d3a2:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41d3a9:	ff ff ff 
  41d3ac:	55                   	push   %rbp
  41d3ad:	48 8d 2d dc ff ff ff 	lea    -0x24(%rip),%rbp        # 41d390 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>
  41d3b4:	53                   	push   %rbx
  41d3b5:	49 89 f4             	mov    %rsi,%r12
  41d3b8:	48 89 fb             	mov    %rdi,%rbx
  41d3bb:	bf 20 00 00 00       	mov    $0x20,%edi
  41d3c0:	4c 01 dd             	add    %r11,%rbp
  41d3c3:	48 83 ec 08          	sub    $0x8,%rsp
  41d3c7:	49 89 ef             	mov    %rbp,%r15
  41d3ca:	48 01 e8             	add    %rbp,%rax
  41d3cd:	ff d0                	callq  *%rax
	  second(std::forward<_U2>(__p.second)) { }
  41d3cf:	49 8b 14 24          	mov    (%r12),%rdx
  41d3d3:	41 8b 4c 24 08       	mov    0x8(%r12),%ecx
  41d3d8:	49 89 c5             	mov    %rax,%r13
    _Hash_node_base() noexcept : _M_nxt() { }
  41d3db:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  41d3e2:	bf b9 79 37 9e       	mov    $0x9e3779b9,%edi
  41d3e7:	48 89 50 08          	mov    %rdx,0x8(%rax)
  41d3eb:	89 48 10             	mov    %ecx,0x10(%rax)
  41d3ee:	41 8b 44 24 0c       	mov    0xc(%r12),%eax
  41d3f3:	4c 63 e1             	movslq %ecx,%r12
  41d3f6:	49 01 fc             	add    %rdi,%r12
  41d3f9:	41 89 45 14          	mov    %eax,0x14(%r13)
  41d3fd:	48 63 c2             	movslq %edx,%rax
  41d400:	48 c1 fa 20          	sar    $0x20,%rdx
  41d404:	48 8d 34 38          	lea    (%rax,%rdi,1),%rsi
  41d408:	48 01 fa             	add    %rdi,%rdx
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  41d40b:	48 89 df             	mov    %rbx,%rdi
  41d40e:	48 89 f0             	mov    %rsi,%rax
  41d411:	48 c1 e0 06          	shl    $0x6,%rax
  41d415:	48 01 c2             	add    %rax,%rdx
  41d418:	48 89 f0             	mov    %rsi,%rax
  41d41b:	48 c1 e8 02          	shr    $0x2,%rax
  41d41f:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  41d422:	31 d2                	xor    %edx,%edx
  41d424:	48 31 f0             	xor    %rsi,%rax
  41d427:	48 89 c1             	mov    %rax,%rcx
  41d42a:	48 c1 e1 06          	shl    $0x6,%rcx
  41d42e:	49 01 cc             	add    %rcx,%r12
  41d431:	48 89 c1             	mov    %rax,%rcx
  41d434:	48 c1 e9 02          	shr    $0x2,%rcx
  41d438:	49 01 cc             	add    %rcx,%r12
  41d43b:	49 31 c4             	xor    %rax,%r12
  41d43e:	4c 89 e0             	mov    %r12,%rax
  41d441:	4c 89 e1             	mov    %r12,%rcx
  41d444:	48 f7 73 08          	divq   0x8(%rbx)
  41d448:	48 b8 f0 0c df ff ff 	movabs $0xffffffffffdf0cf0,%rax
  41d44f:	ff ff ff 
  41d452:	48 01 e8             	add    %rbp,%rax
  41d455:	49 89 d7             	mov    %rdx,%r15
        return static_cast<void*>(&_M_storage);
  41d458:	49 8d 55 08          	lea    0x8(%r13),%rdx
  41d45c:	4c 89 fe             	mov    %r15,%rsi
  41d45f:	ff d0                	callq  *%rax
	if (__before_n)
  41d461:	48 85 c0             	test   %rax,%rax
  41d464:	74 3a                	je     41d4a0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  41d466:	4c 8b 30             	mov    (%rax),%r14
	if (__node_type* __p = _M_find_node(__bkt, __k, __code))
  41d469:	4d 85 f6             	test   %r14,%r14
  41d46c:	74 32                	je     41d4a0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
      { ::operator delete(__p); }
  41d46e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d475:	ff ff ff 
  41d478:	49 89 ef             	mov    %rbp,%r15
  41d47b:	4c 89 ef             	mov    %r13,%rdi
  41d47e:	48 01 e8             	add    %rbp,%rax
  41d481:	ff d0                	callq  *%rax
      }
  41d483:	48 83 c4 08          	add    $0x8,%rsp
  41d487:	4c 89 f0             	mov    %r14,%rax
  41d48a:	31 d2                	xor    %edx,%edx
  41d48c:	5b                   	pop    %rbx
  41d48d:	5d                   	pop    %rbp
  41d48e:	41 5c                	pop    %r12
  41d490:	41 5d                	pop    %r13
  41d492:	41 5e                	pop    %r14
  41d494:	41 5f                	pop    %r15
  41d496:	c3                   	retq   
  41d497:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41d49e:	00 00 
	return std::make_pair(_M_insert_unique_node(__bkt, __code, __node),
  41d4a0:	48 b8 40 22 df ff ff 	movabs $0xffffffffffdf2240,%rax
  41d4a7:	ff ff ff 
  41d4aa:	4c 89 e2             	mov    %r12,%rdx
  41d4ad:	4c 89 e9             	mov    %r13,%rcx
  41d4b0:	4c 89 fe             	mov    %r15,%rsi
  41d4b3:	48 89 df             	mov    %rbx,%rdi
  41d4b6:	48 01 e8             	add    %rbp,%rax
  41d4b9:	ff d0                	callq  *%rax
      }
  41d4bb:	48 83 c4 08          	add    $0x8,%rsp
  41d4bf:	ba 01 00 00 00       	mov    $0x1,%edx
  41d4c4:	5b                   	pop    %rbx
  41d4c5:	5d                   	pop    %rbp
  41d4c6:	41 5c                	pop    %r12
  41d4c8:	41 5d                	pop    %r13
  41d4ca:	41 5e                	pop    %r14
  41d4cc:	41 5f                	pop    %r15
  41d4ce:	c3                   	retq   
  41d4cf:	90                   	nop

000000000041d4d0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d4d0:	41 57                	push   %r15
  41d4d2:	41 56                	push   %r14
  41d4d4:	49 bb 30 db 20 00 00 	movabs $0x20db30,%r11
  41d4db:	00 00 00 
  41d4de:	41 55                	push   %r13
  41d4e0:	41 54                	push   %r12
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d4e2:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41d4e9:	ff ff ff 
  41d4ec:	55                   	push   %rbp
  41d4ed:	48 8d 2d dc ff ff ff 	lea    -0x24(%rip),%rbp        # 41d4d0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>
  41d4f4:	53                   	push   %rbx
  41d4f5:	49 89 f4             	mov    %rsi,%r12
  41d4f8:	48 89 fb             	mov    %rdi,%rbx
  41d4fb:	bf 20 00 00 00       	mov    $0x20,%edi
  41d500:	4c 01 dd             	add    %r11,%rbp
  41d503:	48 83 ec 08          	sub    $0x8,%rsp
  41d507:	49 89 ef             	mov    %rbp,%r15
  41d50a:	48 01 e8             	add    %rbp,%rax
  41d50d:	ff d0                	callq  *%rax
  41d50f:	49 8b 14 24          	mov    (%r12),%rdx
  41d513:	41 8b 4c 24 08       	mov    0x8(%r12),%ecx
  41d518:	49 89 c5             	mov    %rax,%r13
    _Hash_node_base() noexcept : _M_nxt() { }
  41d51b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  41d522:	bf b9 79 37 9e       	mov    $0x9e3779b9,%edi
  41d527:	48 89 50 08          	mov    %rdx,0x8(%rax)
  41d52b:	89 48 10             	mov    %ecx,0x10(%rax)
  41d52e:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  41d533:	4c 63 e1             	movslq %ecx,%r12
  41d536:	49 01 fc             	add    %rdi,%r12
  41d539:	41 89 45 14          	mov    %eax,0x14(%r13)
  41d53d:	48 63 c2             	movslq %edx,%rax
  41d540:	48 c1 fa 20          	sar    $0x20,%rdx
  41d544:	48 8d 34 38          	lea    (%rax,%rdi,1),%rsi
  41d548:	48 01 fa             	add    %rdi,%rdx
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  41d54b:	48 89 df             	mov    %rbx,%rdi
  41d54e:	48 89 f0             	mov    %rsi,%rax
  41d551:	48 c1 e0 06          	shl    $0x6,%rax
  41d555:	48 01 c2             	add    %rax,%rdx
  41d558:	48 89 f0             	mov    %rsi,%rax
  41d55b:	48 c1 e8 02          	shr    $0x2,%rax
  41d55f:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  41d562:	31 d2                	xor    %edx,%edx
  41d564:	48 31 f0             	xor    %rsi,%rax
  41d567:	48 89 c1             	mov    %rax,%rcx
  41d56a:	48 c1 e1 06          	shl    $0x6,%rcx
  41d56e:	49 01 cc             	add    %rcx,%r12
  41d571:	48 89 c1             	mov    %rax,%rcx
  41d574:	48 c1 e9 02          	shr    $0x2,%rcx
  41d578:	49 01 cc             	add    %rcx,%r12
  41d57b:	49 31 c4             	xor    %rax,%r12
  41d57e:	4c 89 e0             	mov    %r12,%rax
  41d581:	4c 89 e1             	mov    %r12,%rcx
  41d584:	48 f7 73 08          	divq   0x8(%rbx)
  41d588:	48 b8 f0 0c df ff ff 	movabs $0xffffffffffdf0cf0,%rax
  41d58f:	ff ff ff 
  41d592:	48 01 e8             	add    %rbp,%rax
  41d595:	49 89 d7             	mov    %rdx,%r15
  41d598:	49 8d 55 08          	lea    0x8(%r13),%rdx
  41d59c:	4c 89 fe             	mov    %r15,%rsi
  41d59f:	ff d0                	callq  *%rax
	if (__before_n)
  41d5a1:	48 85 c0             	test   %rax,%rax
  41d5a4:	74 3a                	je     41d5e0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  41d5a6:	4c 8b 30             	mov    (%rax),%r14
	if (__node_type* __p = _M_find_node(__bkt, __k, __code))
  41d5a9:	4d 85 f6             	test   %r14,%r14
  41d5ac:	74 32                	je     41d5e0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
      { ::operator delete(__p); }
  41d5ae:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d5b5:	ff ff ff 
  41d5b8:	49 89 ef             	mov    %rbp,%r15
  41d5bb:	4c 89 ef             	mov    %r13,%rdi
  41d5be:	48 01 e8             	add    %rbp,%rax
  41d5c1:	ff d0                	callq  *%rax
      }
  41d5c3:	48 83 c4 08          	add    $0x8,%rsp
  41d5c7:	4c 89 f0             	mov    %r14,%rax
  41d5ca:	31 d2                	xor    %edx,%edx
  41d5cc:	5b                   	pop    %rbx
  41d5cd:	5d                   	pop    %rbp
  41d5ce:	41 5c                	pop    %r12
  41d5d0:	41 5d                	pop    %r13
  41d5d2:	41 5e                	pop    %r14
  41d5d4:	41 5f                	pop    %r15
  41d5d6:	c3                   	retq   
  41d5d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41d5de:	00 00 
	return std::make_pair(_M_insert_unique_node(__bkt, __code, __node),
  41d5e0:	48 b8 40 22 df ff ff 	movabs $0xffffffffffdf2240,%rax
  41d5e7:	ff ff ff 
  41d5ea:	4c 89 e2             	mov    %r12,%rdx
  41d5ed:	4c 89 e9             	mov    %r13,%rcx
  41d5f0:	4c 89 fe             	mov    %r15,%rsi
  41d5f3:	48 89 df             	mov    %rbx,%rdi
  41d5f6:	48 01 e8             	add    %rbp,%rax
  41d5f9:	ff d0                	callq  *%rax
      }
  41d5fb:	48 83 c4 08          	add    $0x8,%rsp
  41d5ff:	ba 01 00 00 00       	mov    $0x1,%edx
  41d604:	5b                   	pop    %rbx
  41d605:	5d                   	pop    %rbp
  41d606:	41 5c                	pop    %r12
  41d608:	41 5d                	pop    %r13
  41d60a:	41 5e                	pop    %r14
  41d60c:	41 5f                	pop    %r15
  41d60e:	c3                   	retq   
  41d60f:	90                   	nop

000000000041d610 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d610:	41 57                	push   %r15
  41d612:	41 56                	push   %r14
  41d614:	49 bb f0 d9 20 00 00 	movabs $0x20d9f0,%r11
  41d61b:	00 00 00 
  41d61e:	41 55                	push   %r13
  41d620:	41 54                	push   %r12
  41d622:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41d610 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>
  41d629:	55                   	push   %rbp
  41d62a:	53                   	push   %rbx
  41d62b:	48 89 fd             	mov    %rdi,%rbp
  41d62e:	4d 01 dc             	add    %r11,%r12
  41d631:	48 89 f3             	mov    %rsi,%rbx
  41d634:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41d638:	48 83 fe 01          	cmp    $0x1,%rsi
  41d63c:	0f 84 06 01 00 00    	je     41d748 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41d642:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41d649:	ff ff 1f 
  41d64c:	49 89 d5             	mov    %rdx,%r13
  41d64f:	48 39 c6             	cmp    %rax,%rsi
  41d652:	0f 87 04 01 00 00    	ja     41d75c <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d658:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41d65f:	00 
  41d660:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41d667:	ff ff ff 
  41d66a:	4d 89 e7             	mov    %r12,%r15
  41d66d:	4c 01 e0             	add    %r12,%rax
  41d670:	4c 89 f7             	mov    %r14,%rdi
  41d673:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41d675:	48 89 c7             	mov    %rax,%rdi
  41d678:	49 89 c5             	mov    %rax,%r13
  41d67b:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  41d682:	ff ff ff 
  41d685:	4c 89 f2             	mov    %r14,%rdx
  41d688:	31 f6                	xor    %esi,%esi
  41d68a:	4c 01 e0             	add    %r12,%rax
  41d68d:	ff d0                	callq  *%rax
  41d68f:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41d693:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
      _M_before_begin._M_nxt = nullptr;
  41d697:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41d69e:	00 
      while (__p)
  41d69f:	48 85 c9             	test   %rcx,%rcx
  41d6a2:	74 64                	je     41d708 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
  41d6a4:	45 31 c0             	xor    %r8d,%r8d
	      __new_buckets[__bkt] = &_M_before_begin;
  41d6a7:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41d6ab:	eb 17                	jmp    41d6c4 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d6ad:	0f 1f 00             	nopl   (%rax)
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41d6b0:	48 8b 16             	mov    (%rsi),%rdx
  41d6b3:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41d6b6:	48 8b 00             	mov    (%rax),%rax
  41d6b9:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41d6bc:	48 85 ff             	test   %rdi,%rdi
  41d6bf:	48 89 f9             	mov    %rdi,%rcx
  41d6c2:	74 44                	je     41d708 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41d6c4:	48 8b 41 18          	mov    0x18(%rcx),%rax
  41d6c8:	31 d2                	xor    %edx,%edx
  41d6ca:	48 8b 39             	mov    (%rcx),%rdi
  41d6cd:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41d6d0:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41d6d5:	48 8b 30             	mov    (%rax),%rsi
  41d6d8:	48 85 f6             	test   %rsi,%rsi
  41d6db:	75 d3                	jne    41d6b0 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41d6dd:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41d6e1:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41d6e4:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41d6e8:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41d6eb:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41d6ef:	74 4f                	je     41d740 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41d6f1:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41d6f4:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41d6f9:	49 89 d0             	mov    %rdx,%r8
  41d6fc:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41d6ff:	75 c3                	jne    41d6c4 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d701:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41d708:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41d70c:	4c 39 d7             	cmp    %r10,%rdi
  41d70f:	74 12                	je     41d723 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41d711:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d718:	ff ff ff 
  41d71b:	4d 89 e7             	mov    %r12,%r15
  41d71e:	4c 01 e0             	add    %r12,%rax
  41d721:	ff d0                	callq  *%rax
      _M_bucket_count = __n;
  41d723:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41d727:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41d72b:	48 83 c4 08          	add    $0x8,%rsp
  41d72f:	5b                   	pop    %rbx
  41d730:	5d                   	pop    %rbp
  41d731:	41 5c                	pop    %r12
  41d733:	41 5d                	pop    %r13
  41d735:	41 5e                	pop    %r14
  41d737:	41 5f                	pop    %r15
  41d739:	c3                   	retq   
  41d73a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41d740:	49 89 d0             	mov    %rdx,%r8
  41d743:	e9 74 ff ff ff       	jmpq   41d6bc <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41d748:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41d74c:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41d753:	00 
	    return &_M_single_bucket;
  41d754:	4d 89 ea             	mov    %r13,%r10
  41d757:	e9 37 ff ff ff       	jmpq   41d693 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41d75c:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41d763:	ff ff ff 
  41d766:	4d 89 e7             	mov    %r12,%r15
  41d769:	4c 01 e0             	add    %r12,%rax
  41d76c:	ff d0                	callq  *%rax
      __catch(...)
  41d76e:	48 89 c7             	mov    %rax,%rdi
  41d771:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41d778:	ff ff ff 
  41d77b:	4d 89 e7             	mov    %r12,%r15
  41d77e:	4c 01 e0             	add    %r12,%rax
  41d781:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41d783:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41d787:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41d78b:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41d792:	ff ff ff 
  41d795:	4c 01 e0             	add    %r12,%rax
  41d798:	ff d0                	callq  *%rax
      __catch(...)
  41d79a:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41d7a1:	ff ff ff 
  41d7a4:	48 89 c3             	mov    %rax,%rbx
  41d7a7:	4d 89 e7             	mov    %r12,%r15
  41d7aa:	4c 01 e2             	add    %r12,%rdx
  41d7ad:	ff d2                	callq  *%rdx
  41d7af:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41d7b6:	ff ff ff 
  41d7b9:	48 89 df             	mov    %rbx,%rdi
  41d7bc:	4c 01 e0             	add    %r12,%rax
  41d7bf:	ff d0                	callq  *%rax
  41d7c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d7c8:	00 00 00 
  41d7cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d7d0 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d7d0:	41 57                	push   %r15
  41d7d2:	41 56                	push   %r14
  41d7d4:	49 bb 30 d8 20 00 00 	movabs $0x20d830,%r11
  41d7db:	00 00 00 
  41d7de:	41 55                	push   %r13
  41d7e0:	41 54                	push   %r12
  41d7e2:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41d7d0 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>
  41d7e9:	55                   	push   %rbp
  41d7ea:	53                   	push   %rbx
  41d7eb:	48 89 fd             	mov    %rdi,%rbp
  41d7ee:	4d 01 dc             	add    %r11,%r12
  41d7f1:	48 89 f3             	mov    %rsi,%rbx
  41d7f4:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41d7f8:	48 83 fe 01          	cmp    $0x1,%rsi
  41d7fc:	0f 84 06 01 00 00    	je     41d908 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41d802:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41d809:	ff ff 1f 
  41d80c:	49 89 d5             	mov    %rdx,%r13
  41d80f:	48 39 c6             	cmp    %rax,%rsi
  41d812:	0f 87 04 01 00 00    	ja     41d91c <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d818:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41d81f:	00 
  41d820:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41d827:	ff ff ff 
  41d82a:	4d 89 e7             	mov    %r12,%r15
  41d82d:	4c 01 e0             	add    %r12,%rax
  41d830:	4c 89 f7             	mov    %r14,%rdi
  41d833:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41d835:	48 89 c7             	mov    %rax,%rdi
  41d838:	49 89 c5             	mov    %rax,%r13
  41d83b:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  41d842:	ff ff ff 
  41d845:	4c 89 f2             	mov    %r14,%rdx
  41d848:	31 f6                	xor    %esi,%esi
  41d84a:	4c 01 e0             	add    %r12,%rax
  41d84d:	ff d0                	callq  *%rax
  41d84f:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41d853:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
      _M_before_begin._M_nxt = nullptr;
  41d857:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41d85e:	00 
      while (__p)
  41d85f:	48 85 c9             	test   %rcx,%rcx
  41d862:	74 64                	je     41d8c8 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
  41d864:	45 31 c0             	xor    %r8d,%r8d
	      __new_buckets[__bkt] = &_M_before_begin;
  41d867:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41d86b:	eb 17                	jmp    41d884 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d86d:	0f 1f 00             	nopl   (%rax)
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41d870:	48 8b 16             	mov    (%rsi),%rdx
  41d873:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41d876:	48 8b 00             	mov    (%rax),%rax
  41d879:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41d87c:	48 85 ff             	test   %rdi,%rdi
  41d87f:	48 89 f9             	mov    %rdi,%rcx
  41d882:	74 44                	je     41d8c8 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41d884:	48 8b 41 30          	mov    0x30(%rcx),%rax
  41d888:	31 d2                	xor    %edx,%edx
  41d88a:	48 8b 39             	mov    (%rcx),%rdi
  41d88d:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41d890:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41d895:	48 8b 30             	mov    (%rax),%rsi
  41d898:	48 85 f6             	test   %rsi,%rsi
  41d89b:	75 d3                	jne    41d870 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41d89d:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41d8a1:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41d8a4:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41d8a8:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41d8ab:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41d8af:	74 4f                	je     41d900 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41d8b1:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41d8b4:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41d8b9:	49 89 d0             	mov    %rdx,%r8
  41d8bc:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41d8bf:	75 c3                	jne    41d884 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d8c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41d8c8:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41d8cc:	4c 39 d7             	cmp    %r10,%rdi
  41d8cf:	74 12                	je     41d8e3 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41d8d1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d8d8:	ff ff ff 
  41d8db:	4d 89 e7             	mov    %r12,%r15
  41d8de:	4c 01 e0             	add    %r12,%rax
  41d8e1:	ff d0                	callq  *%rax
      _M_bucket_count = __n;
  41d8e3:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41d8e7:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41d8eb:	48 83 c4 08          	add    $0x8,%rsp
  41d8ef:	5b                   	pop    %rbx
  41d8f0:	5d                   	pop    %rbp
  41d8f1:	41 5c                	pop    %r12
  41d8f3:	41 5d                	pop    %r13
  41d8f5:	41 5e                	pop    %r14
  41d8f7:	41 5f                	pop    %r15
  41d8f9:	c3                   	retq   
  41d8fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41d900:	49 89 d0             	mov    %rdx,%r8
  41d903:	e9 74 ff ff ff       	jmpq   41d87c <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41d908:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41d90c:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41d913:	00 
	    return &_M_single_bucket;
  41d914:	4d 89 ea             	mov    %r13,%r10
  41d917:	e9 37 ff ff ff       	jmpq   41d853 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41d91c:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41d923:	ff ff ff 
  41d926:	4d 89 e7             	mov    %r12,%r15
  41d929:	4c 01 e0             	add    %r12,%rax
  41d92c:	ff d0                	callq  *%rax
      __catch(...)
  41d92e:	48 89 c7             	mov    %rax,%rdi
  41d931:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41d938:	ff ff ff 
  41d93b:	4d 89 e7             	mov    %r12,%r15
  41d93e:	4c 01 e0             	add    %r12,%rax
  41d941:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41d943:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41d947:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41d94b:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41d952:	ff ff ff 
  41d955:	4c 01 e0             	add    %r12,%rax
  41d958:	ff d0                	callq  *%rax
      __catch(...)
  41d95a:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41d961:	ff ff ff 
  41d964:	48 89 c3             	mov    %rax,%rbx
  41d967:	4d 89 e7             	mov    %r12,%r15
  41d96a:	4c 01 e2             	add    %r12,%rdx
  41d96d:	ff d2                	callq  *%rdx
  41d96f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41d976:	ff ff ff 
  41d979:	48 89 df             	mov    %rbx,%rdi
  41d97c:	4c 01 e0             	add    %r12,%rax
  41d97f:	ff d0                	callq  *%rax
  41d981:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d988:	00 00 00 
  41d98b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d990 <_ZN5swarm14memTupleRunnerIFvm9AstarNode7LLNodee19LowLevelEnvironmentEXadL_Z6LL_pllmS1_S2_S3_EEJS1_S2_S3_EEEvmm>:
inline void memTupleRunner(Timestamp ts, uint64_t t0) {
  41d990:	41 57                	push   %r15
  41d992:	55                   	push   %rbp
  41d993:	48 89 f8             	mov    %rdi,%rax
  41d996:	53                   	push   %rbx
  41d997:	48 89 f5             	mov    %rsi,%rbp
    callFunc(f, ts, *tup, typename gens<sizeof...(Args)>::type());
  41d99a:	b9 11 00 00 00       	mov    $0x11,%ecx
  41d99f:	48 8d 1d ea ff ff ff 	lea    -0x16(%rip),%rbx        # 41d990 <_ZN5swarm14memTupleRunnerIFvm9AstarNode7LLNodee19LowLevelEnvironmentEXadL_Z6LL_pllmS1_S2_S3_EEJS1_S2_S3_EEEvmm>
  41d9a6:	49 bb 70 d6 20 00 00 	movabs $0x20d670,%r11
  41d9ad:	00 00 00 
inline void memTupleRunner(Timestamp ts, uint64_t t0) {
  41d9b0:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    callFunc(f, ts, *tup, typename gens<sizeof...(Args)>::type());
  41d9b7:	48 89 e7             	mov    %rsp,%rdi
template<int N, int... S> struct gens : gens<N-1, N-1, S...> {};
template<int...S> struct gens<0, S...>{ typedef seq<S...> type; };

template<typename F, typename FirstArg, typename Tuple, int... S>
inline void callFunc(F f, FirstArg ts, Tuple tup, seq<S...>) {
    f(ts, std::get<S>(tup)...);
  41d9ba:	48 83 ec 08          	sub    $0x8,%rsp
  41d9be:	4c 01 db             	add    %r11,%rbx
  41d9c1:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  41d9c4:	48 89 c7             	mov    %rax,%rdi
  41d9c7:	48 b8 b0 76 de ff ff 	movabs $0xffffffffffde76b0,%rax
  41d9ce:	ff ff ff 
  41d9d1:	48 01 d8             	add    %rbx,%rax
  41d9d4:	ff 74 24 28          	pushq  0x28(%rsp)
  41d9d8:	ff 74 24 28          	pushq  0x28(%rsp)
  41d9dc:	ff 74 24 28          	pushq  0x28(%rsp)
  41d9e0:	ff 74 24 28          	pushq  0x28(%rsp)
  41d9e4:	ff 74 24 28          	pushq  0x28(%rsp)
  41d9e8:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41d9ef:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41d9f6:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41d9fd:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41da04:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41da0b:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41da12:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41da19:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41da20:	48 83 ec 20          	sub    $0x20,%rsp
  41da24:	48 8b 94 24 f8 00 00 	mov    0xf8(%rsp),%rdx
  41da2b:	00 
  41da2c:	48 89 14 24          	mov    %rdx,(%rsp)
  41da30:	48 8b 94 24 00 01 00 	mov    0x100(%rsp),%rdx
  41da37:	00 
  41da38:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41da3d:	48 8b 94 24 08 01 00 	mov    0x108(%rsp),%rdx
  41da44:	00 
  41da45:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  41da4a:	8b 94 24 10 01 00 00 	mov    0x110(%rsp),%edx
  41da51:	89 54 24 18          	mov    %edx,0x18(%rsp)
  41da55:	ff d0                	callq  *%rax
}
  41da57:	48 81 c4 20 01 00 00 	add    $0x120,%rsp
    delete tup;
  41da5e:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41da65:	ff ff ff 
  41da68:	48 89 ef             	mov    %rbp,%rdi
  41da6b:	48 01 d8             	add    %rbx,%rax
  41da6e:	be 88 00 00 00       	mov    $0x88,%esi
}
  41da73:	5b                   	pop    %rbx
  41da74:	5d                   	pop    %rbp
  41da75:	41 5f                	pop    %r15
    delete tup;
  41da77:	ff e0                	jmpq   *%rax
  41da79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041da80 <_ZN5boost15program_options12basic_optionIcED1Ev>:
        is specified. The latter is only possible for command line.
        The template parameter specifies the type of char used for storing the
        option's value.
    */
    template<class charT>
    class basic_option {
  41da80:	41 57                	push   %r15
  41da82:	41 55                	push   %r13
  41da84:	49 bb 80 d5 20 00 00 	movabs $0x20d580,%r11
  41da8b:	00 00 00 
  41da8e:	41 54                	push   %r12
  41da90:	55                   	push   %rbp
  41da91:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 41da80 <_ZN5boost15program_options12basic_optionIcED1Ev>
  41da98:	53                   	push   %rbx
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41da99:	4c 8b 6f 48          	mov    0x48(%rdi),%r13
  41da9d:	49 89 fc             	mov    %rdi,%r12
  41daa0:	48 8b 5f 40          	mov    0x40(%rdi),%rbx
  41daa4:	4c 01 dd             	add    %r11,%rbp
	  for (; __first != __last; ++__first)
  41daa7:	49 39 dd             	cmp    %rbx,%r13
  41daaa:	74 30                	je     41dadc <_ZN5boost15program_options12basic_optionIcED1Ev+0x5c>
  41daac:	0f 1f 40 00          	nopl   0x0(%rax)
  41dab0:	48 8b 3b             	mov    (%rbx),%rdi
  41dab3:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41dab7:	48 39 c7             	cmp    %rax,%rdi
  41daba:	74 12                	je     41dace <_ZN5boost15program_options12basic_optionIcED1Ev+0x4e>
      { ::operator delete(__p); }
  41dabc:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41dac3:	ff ff ff 
  41dac6:	49 89 ef             	mov    %rbp,%r15
  41dac9:	48 01 e8             	add    %rbp,%rax
  41dacc:	ff d0                	callq  *%rax
  41dace:	48 83 c3 20          	add    $0x20,%rbx
  41dad2:	49 39 dd             	cmp    %rbx,%r13
  41dad5:	75 d9                	jne    41dab0 <_ZN5boost15program_options12basic_optionIcED1Ev+0x30>
  41dad7:	49 8b 5c 24 40       	mov    0x40(%r12),%rbx
	if (__p)
  41dadc:	48 85 db             	test   %rbx,%rbx
  41dadf:	74 15                	je     41daf6 <_ZN5boost15program_options12basic_optionIcED1Ev+0x76>
  41dae1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41dae8:	ff ff ff 
  41daeb:	48 89 df             	mov    %rbx,%rdi
  41daee:	49 89 ef             	mov    %rbp,%r15
  41daf1:	48 01 e8             	add    %rbp,%rax
  41daf4:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41daf6:	4d 8b 6c 24 30       	mov    0x30(%r12),%r13
  41dafb:	49 8b 5c 24 28       	mov    0x28(%r12),%rbx
  41db00:	49 39 dd             	cmp    %rbx,%r13
  41db03:	74 2f                	je     41db34 <_ZN5boost15program_options12basic_optionIcED1Ev+0xb4>
  41db05:	0f 1f 00             	nopl   (%rax)
  41db08:	48 8b 3b             	mov    (%rbx),%rdi
  41db0b:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41db0f:	48 39 c7             	cmp    %rax,%rdi
  41db12:	74 12                	je     41db26 <_ZN5boost15program_options12basic_optionIcED1Ev+0xa6>
  41db14:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41db1b:	ff ff ff 
  41db1e:	49 89 ef             	mov    %rbp,%r15
  41db21:	48 01 e8             	add    %rbp,%rax
  41db24:	ff d0                	callq  *%rax
  41db26:	48 83 c3 20          	add    $0x20,%rbx
  41db2a:	49 39 dd             	cmp    %rbx,%r13
  41db2d:	75 d9                	jne    41db08 <_ZN5boost15program_options12basic_optionIcED1Ev+0x88>
  41db2f:	49 8b 5c 24 28       	mov    0x28(%r12),%rbx
	if (__p)
  41db34:	48 85 db             	test   %rbx,%rbx
  41db37:	74 15                	je     41db4e <_ZN5boost15program_options12basic_optionIcED1Ev+0xce>
  41db39:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41db40:	ff ff ff 
  41db43:	48 89 df             	mov    %rbx,%rdi
  41db46:	49 89 ef             	mov    %rbp,%r15
  41db49:	48 01 e8             	add    %rbp,%rax
  41db4c:	ff d0                	callq  *%rax
  41db4e:	49 8b 3c 24          	mov    (%r12),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41db52:	49 83 c4 10          	add    $0x10,%r12
	if (!_M_is_local())
  41db56:	4c 39 e7             	cmp    %r12,%rdi
  41db59:	74 1d                	je     41db78 <_ZN5boost15program_options12basic_optionIcED1Ev+0xf8>
  41db5b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41db62:	ff ff ff 
  41db65:	5b                   	pop    %rbx
  41db66:	48 01 e8             	add    %rbp,%rax
  41db69:	5d                   	pop    %rbp
  41db6a:	41 5c                	pop    %r12
  41db6c:	41 5d                	pop    %r13
  41db6e:	41 5f                	pop    %r15
  41db70:	ff e0                	jmpq   *%rax
  41db72:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41db78:	5b                   	pop    %rbx
  41db79:	5d                   	pop    %rbp
  41db7a:	41 5c                	pop    %r12
  41db7c:	41 5d                	pop    %r13
  41db7e:	41 5f                	pop    %r15
  41db80:	c3                   	retq   
  41db81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41db88:	00 00 00 
  41db8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041db90 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv>:
    basic_command_line_parser<charT>::run()
  41db90:	41 57                	push   %r15
  41db92:	41 56                	push   %r14
  41db94:	49 bb 70 d4 20 00 00 	movabs $0x20d470,%r11
  41db9b:	00 00 00 
  41db9e:	41 55                	push   %r13
  41dba0:	41 54                	push   %r12
        parsed_options result(m_desc, detail::cmdline::get_canonical_option_prefix());
  41dba2:	48 b8 30 e8 dd ff ff 	movabs $0xffffffffffdde830,%rax
  41dba9:	ff ff ff 
    basic_command_line_parser<charT>::run()
  41dbac:	55                   	push   %rbp
  41dbad:	48 8d 2d dc ff ff ff 	lea    -0x24(%rip),%rbp        # 41db90 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv>
  41dbb4:	53                   	push   %rbx
  41dbb5:	48 89 f3             	mov    %rsi,%rbx
  41dbb8:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  41dbbf:	4c 01 dd             	add    %r11,%rbp
  41dbc2:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        parsed_options result(m_desc, detail::cmdline::get_canonical_option_prefix());
  41dbc7:	49 89 ef             	mov    %rbp,%r15
  41dbca:	48 89 f7             	mov    %rsi,%rdi
  41dbcd:	48 01 e8             	add    %rbp,%rax
  41dbd0:	ff d0                	callq  *%rax
  41dbd2:	48 8b 53 70          	mov    0x70(%rbx),%rdx
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  41dbd6:	66 0f ef c0          	pxor   %xmm0,%xmm0
        result.options = detail::cmdline::run();
  41dbda:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
        : description(xdescription), m_options_prefix(options_prefix) {}
  41dbdf:	89 84 24 80 00 00 00 	mov    %eax,0x80(%rsp)
  41dbe6:	48 b9 90 c3 de ff ff 	movabs $0xffffffffffdec390,%rcx
  41dbed:	ff ff ff 
  41dbf0:	48 b8 10 e4 dd ff ff 	movabs $0xffffffffffdde410,%rax
  41dbf7:	ff ff ff 
  41dbfa:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  41dc01:	00 00 
  41dc03:	48 89 de             	mov    %rbx,%rsi
  41dc06:	0f 29 44 24 60       	movaps %xmm0,0x60(%rsp)
  41dc0b:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)
  41dc10:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  41dc15:	48 01 e8             	add    %rbp,%rax
  41dc18:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  41dc1d:	ff d0                	callq  *%rax
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  41dc1f:	48 8b 44 24 60       	mov    0x60(%rsp),%rax
  41dc24:	4c 8b 6c 24 68       	mov    0x68(%rsp),%r13
  41dc29:	48 89 c1             	mov    %rax,%rcx
  41dc2c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
      __a = _GLIBCXX_MOVE(__b);
  41dc31:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41dc36:	4c 39 e9             	cmp    %r13,%rcx
      __b = _GLIBCXX_MOVE(__tmp);
  41dc39:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  41dc40:	00 00 
  41dc42:	49 89 cc             	mov    %rcx,%r12
      __a = _GLIBCXX_MOVE(__b);
  41dc45:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  41dc4a:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
      __b = _GLIBCXX_MOVE(__tmp);
  41dc4f:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  41dc56:	00 00 
      __a = _GLIBCXX_MOVE(__b);
  41dc58:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  41dc5d:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
      __b = _GLIBCXX_MOVE(__tmp);
  41dc62:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  41dc69:	00 00 
      __a = _GLIBCXX_MOVE(__b);
  41dc6b:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  41dc70:	0f 84 e5 00 00 00    	je     41dd5b <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x1cb>
  41dc76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41dc7d:	00 00 00 
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41dc80:	4d 8b 74 24 48       	mov    0x48(%r12),%r14
  41dc85:	49 8b 5c 24 40       	mov    0x40(%r12),%rbx
  41dc8a:	49 39 de             	cmp    %rbx,%r14
  41dc8d:	74 2d                	je     41dcbc <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x12c>
  41dc8f:	90                   	nop
  41dc90:	48 8b 3b             	mov    (%rbx),%rdi
  41dc93:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41dc97:	48 39 c7             	cmp    %rax,%rdi
  41dc9a:	74 12                	je     41dcae <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x11e>
  41dc9c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41dca3:	ff ff ff 
  41dca6:	49 89 ef             	mov    %rbp,%r15
  41dca9:	48 01 e8             	add    %rbp,%rax
  41dcac:	ff d0                	callq  *%rax
  41dcae:	48 83 c3 20          	add    $0x20,%rbx
  41dcb2:	49 39 de             	cmp    %rbx,%r14
  41dcb5:	75 d9                	jne    41dc90 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x100>
  41dcb7:	49 8b 5c 24 40       	mov    0x40(%r12),%rbx
	if (__p)
  41dcbc:	48 85 db             	test   %rbx,%rbx
  41dcbf:	74 15                	je     41dcd6 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x146>
  41dcc1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41dcc8:	ff ff ff 
  41dccb:	48 89 df             	mov    %rbx,%rdi
  41dcce:	49 89 ef             	mov    %rbp,%r15
  41dcd1:	48 01 e8             	add    %rbp,%rax
  41dcd4:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41dcd6:	4d 8b 74 24 30       	mov    0x30(%r12),%r14
  41dcdb:	49 8b 5c 24 28       	mov    0x28(%r12),%rbx
  41dce0:	49 39 de             	cmp    %rbx,%r14
  41dce3:	74 2f                	je     41dd14 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x184>
  41dce5:	0f 1f 00             	nopl   (%rax)
  41dce8:	48 8b 3b             	mov    (%rbx),%rdi
  41dceb:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41dcef:	48 39 c7             	cmp    %rax,%rdi
  41dcf2:	74 12                	je     41dd06 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x176>
  41dcf4:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41dcfb:	ff ff ff 
  41dcfe:	49 89 ef             	mov    %rbp,%r15
  41dd01:	48 01 e8             	add    %rbp,%rax
  41dd04:	ff d0                	callq  *%rax
  41dd06:	48 83 c3 20          	add    $0x20,%rbx
  41dd0a:	49 39 de             	cmp    %rbx,%r14
  41dd0d:	75 d9                	jne    41dce8 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x158>
  41dd0f:	49 8b 5c 24 28       	mov    0x28(%r12),%rbx
	if (__p)
  41dd14:	48 85 db             	test   %rbx,%rbx
  41dd17:	74 15                	je     41dd2e <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x19e>
  41dd19:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41dd20:	ff ff ff 
  41dd23:	48 89 df             	mov    %rbx,%rdi
  41dd26:	49 89 ef             	mov    %rbp,%r15
  41dd29:	48 01 e8             	add    %rbp,%rax
  41dd2c:	ff d0                	callq  *%rax
  41dd2e:	49 8b 3c 24          	mov    (%r12),%rdi
  41dd32:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  41dd37:	48 39 c7             	cmp    %rax,%rdi
  41dd3a:	74 12                	je     41dd4e <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x1be>
  41dd3c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41dd43:	ff ff ff 
  41dd46:	49 89 ef             	mov    %rbp,%r15
  41dd49:	48 01 e8             	add    %rbp,%rax
  41dd4c:	ff d0                	callq  *%rax
  41dd4e:	49 83 c4 60          	add    $0x60,%r12
  41dd52:	4d 39 e5             	cmp    %r12,%r13
  41dd55:	0f 85 25 ff ff ff    	jne    41dc80 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0xf0>
  41dd5b:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
  41dd61:	74 17                	je     41dd7a <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x1ea>
  41dd63:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41dd6a:	ff ff ff 
  41dd6d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41dd72:	49 89 ef             	mov    %rbp,%r15
  41dd75:	48 01 e8             	add    %rbp,%rax
  41dd78:	ff d0                	callq  *%rax
  41dd7a:	48 b8 90 c3 de ff ff 	movabs $0xffffffffffdec390,%rax
  41dd81:	ff ff ff 
  41dd84:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41dd89:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  41dd8e:	48 01 e8             	add    %rbp,%rax
  41dd91:	ff d0                	callq  *%rax
  41dd93:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  41dd98:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41dd9d:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
  41dda4:	aa aa aa 
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41dda7:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41ddac:	49 89 c4             	mov    %rax,%r12
  41ddaf:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41ddb4:	49 29 dc             	sub    %rbx,%r12
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41ddb7:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
  41ddbe:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
  41ddc5:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41ddc6:	4c 89 e0             	mov    %r12,%rax
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41ddc9:	48 c7 41 10 00 00 00 	movq   $0x0,0x10(%rcx)
  41ddd0:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41ddd1:	48 c1 f8 05          	sar    $0x5,%rax
  41ddd5:	48 0f af c2          	imul   %rdx,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41ddd9:	48 85 c0             	test   %rax,%rax
  41dddc:	0f 84 d6 03 00 00    	je     41e1b8 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x628>
	if (__n > this->max_size())
  41dde2:	48 ba aa aa aa aa aa 	movabs $0x2aaaaaaaaaaaaaa,%rdx
  41dde9:	aa aa 02 
  41ddec:	48 39 d0             	cmp    %rdx,%rax
  41ddef:	0f 87 f0 03 00 00    	ja     41e1e5 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x655>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41ddf5:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41ddfc:	ff ff ff 
  41ddff:	4c 89 e7             	mov    %r12,%rdi
  41de02:	49 89 ef             	mov    %rbp,%r15
  41de05:	48 01 e8             	add    %rbp,%rax
  41de08:	ff d0                	callq  *%rax
  41de0a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  41de0f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  41de14:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
  41de19:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  41de1e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
	this->_M_impl._M_start = this->_M_allocate(__n);
  41de23:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41de28:	49 01 c4             	add    %rax,%r12
  41de2b:	48 39 5c 24 18       	cmp    %rbx,0x18(%rsp)
	this->_M_impl._M_start = this->_M_allocate(__n);
  41de30:	48 89 01             	mov    %rax,(%rcx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  41de33:	48 89 41 08          	mov    %rax,0x8(%rcx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41de37:	4c 89 61 10          	mov    %r12,0x10(%rcx)
  41de3b:	0f 84 85 03 00 00    	je     41e1c6 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x636>
  41de41:	49 89 c5             	mov    %rax,%r13
          _M_construct(__beg, __end, _Tag());
  41de44:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  41de4b:	ff ff ff 
  41de4e:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  41de53:	4c 8d 24 28          	lea    (%rax,%rbp,1),%r12
  41de57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41de5e:	00 00 
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  41de60:	4d 85 ed             	test   %r13,%r13
  41de63:	0f 84 b1 01 00 00    	je     41e01a <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x48a>
  41de69:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  41de6e:	49 8d 45 10          	lea    0x10(%r13),%rax
  41de72:	4c 89 ef             	mov    %r13,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41de75:	49 89 45 00          	mov    %rax,0x0(%r13)
  41de79:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41de7e:	48 8b 33             	mov    (%rbx),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41de81:	48 89 f2             	mov    %rsi,%rdx
  41de84:	48 03 53 08          	add    0x8(%rbx),%rdx
          _M_construct(__beg, __end, _Tag());
  41de88:	41 ff d4             	callq  *%r12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41de8b:	48 89 d9             	mov    %rbx,%rcx
  41de8e:	8b 43 20             	mov    0x20(%rbx),%eax
  41de91:	48 8b 5b 30          	mov    0x30(%rbx),%rbx
  41de95:	48 2b 59 28          	sub    0x28(%rcx),%rbx
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41de99:	49 c7 45 28 00 00 00 	movq   $0x0,0x28(%r13)
  41dea0:	00 
  41dea1:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
  41dea8:	00 
  41dea9:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
  41deb0:	00 
  41deb1:	41 89 45 20          	mov    %eax,0x20(%r13)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41deb5:	48 89 d8             	mov    %rbx,%rax
  41deb8:	48 c1 f8 05          	sar    $0x5,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41debc:	48 85 c0             	test   %rax,%rax
  41debf:	0f 84 c5 02 00 00    	je     41e18a <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x5fa>
	if (__n > this->max_size())
  41dec5:	48 b9 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rcx
  41decc:	ff ff 07 
  41decf:	48 39 c8             	cmp    %rcx,%rax
  41ded2:	0f 87 1f 03 00 00    	ja     41e1f7 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x667>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41ded8:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41dedf:	ff ff ff 
  41dee2:	48 89 df             	mov    %rbx,%rdi
  41dee5:	49 89 ef             	mov    %rbp,%r15
  41dee8:	48 01 e8             	add    %rbp,%rax
  41deeb:	ff d0                	callq  *%rax
  41deed:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41def2:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41def7:	48 01 c3             	add    %rax,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
  41defa:	49 89 45 28          	mov    %rax,0x28(%r13)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41defe:	49 89 5d 38          	mov    %rbx,0x38(%r13)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  41df02:	49 89 45 30          	mov    %rax,0x30(%r13)
  41df06:	48 89 c3             	mov    %rax,%rbx
  41df09:	4c 8b 79 30          	mov    0x30(%rcx),%r15
  41df0d:	4c 8b 71 28          	mov    0x28(%rcx),%r14
  41df11:	4d 39 f7             	cmp    %r14,%r15
  41df14:	0f 84 96 02 00 00    	je     41e1b0 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x620>
  41df1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41df20:	48 85 db             	test   %rbx,%rbx
  41df23:	74 17                	je     41df3c <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x3ac>
	: allocator_type(__a), _M_p(__dat) { }
  41df25:	48 8d 43 10          	lea    0x10(%rbx),%rax
          _M_construct(__beg, __end, _Tag());
  41df29:	48 89 df             	mov    %rbx,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41df2c:	48 89 03             	mov    %rax,(%rbx)
  41df2f:	49 8b 36             	mov    (%r14),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41df32:	48 89 f2             	mov    %rsi,%rdx
  41df35:	49 03 56 08          	add    0x8(%r14),%rdx
          _M_construct(__beg, __end, _Tag());
  41df39:	41 ff d4             	callq  *%r12
  41df3c:	49 83 c6 20          	add    $0x20,%r14
  41df40:	48 83 c3 20          	add    $0x20,%rbx
  41df44:	4d 39 f7             	cmp    %r14,%r15
  41df47:	75 d7                	jne    41df20 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x390>
  41df49:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      { this->_M_impl._M_finish =
  41df4e:	49 89 5d 30          	mov    %rbx,0x30(%r13)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41df52:	48 8b 58 48          	mov    0x48(%rax),%rbx
  41df56:	48 2b 58 40          	sub    0x40(%rax),%rbx
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41df5a:	49 c7 45 40 00 00 00 	movq   $0x0,0x40(%r13)
  41df61:	00 
  41df62:	49 c7 45 48 00 00 00 	movq   $0x0,0x48(%r13)
  41df69:	00 
  41df6a:	49 c7 45 50 00 00 00 	movq   $0x0,0x50(%r13)
  41df71:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41df72:	48 89 d8             	mov    %rbx,%rax
  41df75:	48 c1 f8 05          	sar    $0x5,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41df79:	48 85 c0             	test   %rax,%rax
  41df7c:	0f 84 1b 02 00 00    	je     41e19d <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x60d>
	if (__n > this->max_size())
  41df82:	48 b9 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rcx
  41df89:	ff ff 07 
  41df8c:	48 39 c8             	cmp    %rcx,%rax
  41df8f:	0f 87 33 03 00 00    	ja     41e2c8 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x738>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41df95:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41df9c:	ff ff ff 
  41df9f:	48 89 df             	mov    %rbx,%rdi
  41dfa2:	49 89 ef             	mov    %rbp,%r15
  41dfa5:	48 01 e8             	add    %rbp,%rax
  41dfa8:	ff d0                	callq  *%rax
  41dfaa:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41dfaf:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dfb4:	48 01 c3             	add    %rax,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
  41dfb7:	49 89 45 40          	mov    %rax,0x40(%r13)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dfbb:	49 89 5d 50          	mov    %rbx,0x50(%r13)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  41dfbf:	49 89 45 48          	mov    %rax,0x48(%r13)
  41dfc3:	48 89 c3             	mov    %rax,%rbx
  41dfc6:	4c 8b 79 48          	mov    0x48(%rcx),%r15
  41dfca:	4c 8b 71 40          	mov    0x40(%rcx),%r14
  41dfce:	4d 39 f7             	cmp    %r14,%r15
  41dfd1:	74 33                	je     41e006 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x476>
  41dfd3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  41dfd8:	48 85 db             	test   %rbx,%rbx
  41dfdb:	74 17                	je     41dff4 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x464>
	: allocator_type(__a), _M_p(__dat) { }
  41dfdd:	48 8d 43 10          	lea    0x10(%rbx),%rax
          _M_construct(__beg, __end, _Tag());
  41dfe1:	48 89 df             	mov    %rbx,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41dfe4:	48 89 03             	mov    %rax,(%rbx)
  41dfe7:	49 8b 36             	mov    (%r14),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41dfea:	48 89 f2             	mov    %rsi,%rdx
  41dfed:	49 03 56 08          	add    0x8(%r14),%rdx
          _M_construct(__beg, __end, _Tag());
  41dff1:	41 ff d4             	callq  *%r12
  41dff4:	49 83 c6 20          	add    $0x20,%r14
  41dff8:	48 83 c3 20          	add    $0x20,%rbx
  41dffc:	4d 39 f7             	cmp    %r14,%r15
  41dfff:	75 d7                	jne    41dfd8 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x448>
  41e001:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e006:	0f b6 41 58          	movzbl 0x58(%rcx),%eax
      { this->_M_impl._M_finish =
  41e00a:	49 89 5d 48          	mov    %rbx,0x48(%r13)
  41e00e:	41 88 45 58          	mov    %al,0x58(%r13)
  41e012:	0f b6 41 59          	movzbl 0x59(%rcx),%eax
  41e016:	41 88 45 59          	mov    %al,0x59(%r13)
  41e01a:	48 83 44 24 08 60    	addq   $0x60,0x8(%rsp)
  41e020:	49 83 c5 60          	add    $0x60,%r13
  41e024:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41e029:	48 39 44 24 18       	cmp    %rax,0x18(%rsp)
  41e02e:	0f 85 2c fe ff ff    	jne    41de60 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x2d0>
  41e034:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
    class basic_parsed_options {
  41e039:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  41e03e:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  41e043:	4c 8b 64 24 60       	mov    0x60(%rsp),%r12
  41e048:	48 89 41 18          	mov    %rax,0x18(%rcx)
  41e04c:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
	  for (; __first != __last; ++__first)
  41e053:	4c 39 e3             	cmp    %r12,%rbx
  41e056:	4c 89 69 08          	mov    %r13,0x8(%rcx)
  41e05a:	89 41 20             	mov    %eax,0x20(%rcx)
  41e05d:	0f 84 f6 00 00 00    	je     41e159 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x5c9>
  41e063:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41e068:	4d 8b 74 24 48       	mov    0x48(%r12),%r14
  41e06d:	4d 8b 6c 24 40       	mov    0x40(%r12),%r13
  41e072:	4d 39 ee             	cmp    %r13,%r14
  41e075:	74 36                	je     41e0ad <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x51d>
  41e077:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41e07e:	00 00 
  41e080:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	if (!_M_is_local())
  41e084:	49 8d 45 10          	lea    0x10(%r13),%rax
  41e088:	48 39 c7             	cmp    %rax,%rdi
  41e08b:	74 12                	je     41e09f <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x50f>
      { ::operator delete(__p); }
  41e08d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e094:	ff ff ff 
  41e097:	49 89 ef             	mov    %rbp,%r15
  41e09a:	48 01 e8             	add    %rbp,%rax
  41e09d:	ff d0                	callq  *%rax
  41e09f:	49 83 c5 20          	add    $0x20,%r13
  41e0a3:	4d 39 ee             	cmp    %r13,%r14
  41e0a6:	75 d8                	jne    41e080 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x4f0>
  41e0a8:	4d 8b 6c 24 40       	mov    0x40(%r12),%r13
	if (__p)
  41e0ad:	4d 85 ed             	test   %r13,%r13
  41e0b0:	74 15                	je     41e0c7 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x537>
  41e0b2:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e0b9:	ff ff ff 
  41e0bc:	4c 89 ef             	mov    %r13,%rdi
  41e0bf:	49 89 ef             	mov    %rbp,%r15
  41e0c2:	48 01 e8             	add    %rbp,%rax
  41e0c5:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41e0c7:	4d 8b 74 24 30       	mov    0x30(%r12),%r14
  41e0cc:	4d 8b 6c 24 28       	mov    0x28(%r12),%r13
  41e0d1:	4d 39 ee             	cmp    %r13,%r14
  41e0d4:	74 37                	je     41e10d <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x57d>
  41e0d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41e0dd:	00 00 00 
  41e0e0:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  41e0e4:	49 8d 45 10          	lea    0x10(%r13),%rax
  41e0e8:	48 39 c7             	cmp    %rax,%rdi
  41e0eb:	74 12                	je     41e0ff <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x56f>
  41e0ed:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e0f4:	ff ff ff 
  41e0f7:	49 89 ef             	mov    %rbp,%r15
  41e0fa:	48 01 e8             	add    %rbp,%rax
  41e0fd:	ff d0                	callq  *%rax
  41e0ff:	49 83 c5 20          	add    $0x20,%r13
  41e103:	4d 39 ee             	cmp    %r13,%r14
  41e106:	75 d8                	jne    41e0e0 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x550>
  41e108:	4d 8b 6c 24 28       	mov    0x28(%r12),%r13
	if (__p)
  41e10d:	4d 85 ed             	test   %r13,%r13
  41e110:	74 15                	je     41e127 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x597>
  41e112:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e119:	ff ff ff 
  41e11c:	4c 89 ef             	mov    %r13,%rdi
  41e11f:	49 89 ef             	mov    %rbp,%r15
  41e122:	48 01 e8             	add    %rbp,%rax
  41e125:	ff d0                	callq  *%rax
  41e127:	49 8b 3c 24          	mov    (%r12),%rdi
  41e12b:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  41e130:	48 39 c7             	cmp    %rax,%rdi
  41e133:	74 12                	je     41e147 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x5b7>
  41e135:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e13c:	ff ff ff 
  41e13f:	49 89 ef             	mov    %rbp,%r15
  41e142:	48 01 e8             	add    %rbp,%rax
  41e145:	ff d0                	callq  *%rax
  41e147:	49 83 c4 60          	add    $0x60,%r12
  41e14b:	4c 39 e3             	cmp    %r12,%rbx
  41e14e:	0f 85 14 ff ff ff    	jne    41e068 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x4d8>
  41e154:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
  41e159:	48 85 db             	test   %rbx,%rbx
  41e15c:	74 15                	je     41e173 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x5e3>
  41e15e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e165:	ff ff ff 
  41e168:	48 89 df             	mov    %rbx,%rdi
  41e16b:	49 89 ef             	mov    %rbp,%r15
  41e16e:	48 01 e8             	add    %rbp,%rax
  41e171:	ff d0                	callq  *%rax
    }
  41e173:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41e178:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  41e17f:	5b                   	pop    %rbx
  41e180:	5d                   	pop    %rbp
  41e181:	41 5c                	pop    %r12
  41e183:	41 5d                	pop    %r13
  41e185:	41 5e                	pop    %r14
  41e187:	41 5f                	pop    %r15
  41e189:	c3                   	retq   
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41e18a:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  41e191:	00 00 
  41e193:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41e198:	e9 55 fd ff ff       	jmpq   41def2 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x362>
  41e19d:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  41e1a4:	00 00 
  41e1a6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41e1ab:	e9 ff fd ff ff       	jmpq   41dfaf <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x41f>
  41e1b0:	48 89 c8             	mov    %rcx,%rax
  41e1b3:	e9 96 fd ff ff       	jmpq   41df4e <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x3be>
  41e1b8:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41e1bf:	00 00 
  41e1c1:	e9 5d fc ff ff       	jmpq   41de23 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x293>
  41e1c6:	48 89 c6             	mov    %rax,%rsi
  41e1c9:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
      { this->_M_impl._M_finish =
  41e1ce:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  41e1d2:	48 89 41 18          	mov    %rax,0x18(%rcx)
  41e1d6:	8b 84 24 80 00 00 00 	mov    0x80(%rsp),%eax
  41e1dd:	89 41 20             	mov    %eax,0x20(%rcx)
  41e1e0:	e9 74 ff ff ff       	jmpq   41e159 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x5c9>
	  std::__throw_bad_alloc();
  41e1e5:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41e1ec:	ff ff ff 
  41e1ef:	49 89 ef             	mov    %rbp,%r15
  41e1f2:	48 01 e8             	add    %rbp,%rax
  41e1f5:	ff d0                	callq  *%rax
  41e1f7:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41e1fe:	ff ff ff 
  41e201:	49 89 ef             	mov    %rbp,%r15
  41e204:	48 01 e8             	add    %rbp,%rax
  41e207:	ff d0                	callq  *%rax
  41e209:	49 bc b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%r12
  41e210:	ff ff ff 
  41e213:	49 be e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%r14
  41e21a:	ff ff ff 
  41e21d:	48 bb 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rbx
  41e224:	ff ff ff 
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
	    }
	  __catch(...)
  41e227:	49 01 ec             	add    %rbp,%r12
  41e22a:	49 89 ef             	mov    %rbp,%r15
  41e22d:	48 89 c7             	mov    %rax,%rdi
  41e230:	41 ff d4             	callq  *%r12
  41e233:	4c 39 6c 24 30       	cmp    %r13,0x30(%rsp)
  41e238:	48 b8 80 2a df ff ff 	movabs $0xffffffffffdf2a80,%rax
  41e23f:	ff ff ff 
  41e242:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
    { __pointer->~_Tp(); }
  41e247:	4c 8d 24 28          	lea    (%rax,%rbp,1),%r12
	  for (; __first != __last; ++__first)
  41e24b:	74 0f                	je     41e25c <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x6cc>
    { __pointer->~_Tp(); }
  41e24d:	4c 89 ff             	mov    %r15,%rdi
	  for (; __first != __last; ++__first)
  41e250:	49 83 c7 60          	add    $0x60,%r15
    { __pointer->~_Tp(); }
  41e254:	41 ff d4             	callq  *%r12
	  for (; __first != __last; ++__first)
  41e257:	4d 39 ef             	cmp    %r13,%r15
  41e25a:	75 f1                	jne    41e24d <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x6bd>
	    {
	      std::_Destroy(__result, __cur);
	      __throw_exception_again;
  41e25c:	49 89 ef             	mov    %rbp,%r15
  41e25f:	49 01 ee             	add    %rbp,%r14
  41e262:	41 ff d6             	callq  *%r14
  41e265:	49 89 c7             	mov    %rax,%r15
  41e268:	49 bc b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%r12
  41e26f:	ff ff ff 
  41e272:	49 be e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%r14
  41e279:	ff ff ff 
  41e27c:	48 bb 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rbx
  41e283:	ff ff ff 
  41e286:	48 b8 40 bb de ff ff 	movabs $0xffffffffffdebb40,%rax
  41e28d:	ff ff ff 
  41e290:	49 8d 7d 28          	lea    0x28(%r13),%rdi
  41e294:	48 01 e8             	add    %rbp,%rax
  41e297:	ff d0                	callq  *%rax
  41e299:	4c 89 f8             	mov    %r15,%rax
  41e29c:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  41e2a0:	48 3b 7c 24 20       	cmp    0x20(%rsp),%rdi
  41e2a5:	74 80                	je     41e227 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x697>
      { ::operator delete(__p); }
  41e2a7:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  41e2ae:	ff ff ff 
  41e2b1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41e2b6:	49 89 ef             	mov    %rbp,%r15
  41e2b9:	48 01 ea             	add    %rbp,%rdx
  41e2bc:	ff d2                	callq  *%rdx
  41e2be:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41e2c3:	e9 5f ff ff ff       	jmpq   41e227 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x697>
	  std::__throw_bad_alloc();
  41e2c8:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41e2cf:	ff ff ff 
  41e2d2:	49 89 ef             	mov    %rbp,%r15
  41e2d5:	48 01 e8             	add    %rbp,%rax
  41e2d8:	ff d0                	callq  *%rax
  41e2da:	49 89 c4             	mov    %rax,%r12
  41e2dd:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41e2e2:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  41e2e7:	49 89 ef             	mov    %rbp,%r15
  41e2ea:	48 01 e8             	add    %rbp,%rax
  41e2ed:	ff d0                	callq  *%rax
  41e2ef:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41e2f6:	ff ff ff 
  41e2f9:	4c 89 e7             	mov    %r12,%rdi
  41e2fc:	48 01 e8             	add    %rbp,%rax
  41e2ff:	ff d0                	callq  *%rax
	  __catch(...)
  41e301:	49 bc b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%r12
  41e308:	ff ff ff 
  41e30b:	48 89 c7             	mov    %rax,%rdi
  41e30e:	49 89 ef             	mov    %rbp,%r15
  41e311:	49 8d 04 2c          	lea    (%r12,%rbp,1),%rax
  41e315:	ff d0                	callq  *%rax
  41e317:	48 39 5c 24 10       	cmp    %rbx,0x10(%rsp)
  41e31c:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  41e321:	74 27                	je     41e34a <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x7ba>
  41e323:	49 8b 3e             	mov    (%r14),%rdi
  41e326:	49 8d 46 10          	lea    0x10(%r14),%rax
  41e32a:	48 39 c7             	cmp    %rax,%rdi
  41e32d:	74 12                	je     41e341 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x7b1>
      { ::operator delete(__p); }
  41e32f:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e336:	ff ff ff 
  41e339:	49 89 ef             	mov    %rbp,%r15
  41e33c:	48 01 e8             	add    %rbp,%rax
  41e33f:	ff d0                	callq  *%rax
  41e341:	49 83 c6 20          	add    $0x20,%r14
  41e345:	49 39 de             	cmp    %rbx,%r14
  41e348:	75 d9                	jne    41e323 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x793>
	      __throw_exception_again;
  41e34a:	49 be e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%r14
  41e351:	ff ff ff 
  41e354:	49 89 ef             	mov    %rbp,%r15
  41e357:	49 8d 04 2e          	lea    (%r14,%rbp,1),%rax
  41e35b:	ff d0                	callq  *%rax
  41e35d:	49 bc b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%r12
  41e364:	ff ff ff 
  41e367:	49 be e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%r14
  41e36e:	ff ff ff 
  41e371:	48 bb 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rbx
  41e378:	ff ff ff 
  41e37b:	e9 1c ff ff ff       	jmpq   41e29c <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x70c>
	  __catch(...)
  41e380:	48 bb 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rbx
  41e387:	ff ff ff 
  41e38a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41e38f:	49 89 ef             	mov    %rbp,%r15
  41e392:	48 8d 04 2b          	lea    (%rbx,%rbp,1),%rax
  41e396:	ff d0                	callq  *%rax
		      - this->_M_impl._M_start); }
  41e398:	49 8b 7d 28          	mov    0x28(%r13),%rdi
	if (__p)
  41e39c:	48 85 ff             	test   %rdi,%rdi
  41e39f:	74 0f                	je     41e3b0 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x820>
  41e3a1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e3a8:	ff ff ff 
  41e3ab:	48 01 e8             	add    %rbp,%rax
  41e3ae:	ff d0                	callq  *%rax
  41e3b0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41e3b5:	e9 e2 fe ff ff       	jmpq   41e29c <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x70c>
  41e3ba:	49 bc b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%r12
  41e3c1:	ff ff ff 
  41e3c4:	48 89 c7             	mov    %rax,%rdi
  41e3c7:	49 89 ef             	mov    %rbp,%r15
  41e3ca:	49 8d 04 2c          	lea    (%r12,%rbp,1),%rax
  41e3ce:	ff d0                	callq  *%rax
  41e3d0:	48 39 5c 24 10       	cmp    %rbx,0x10(%rsp)
  41e3d5:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  41e3da:	74 27                	je     41e403 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x873>
  41e3dc:	49 8b 3e             	mov    (%r14),%rdi
  41e3df:	49 8d 46 10          	lea    0x10(%r14),%rax
  41e3e3:	48 39 c7             	cmp    %rax,%rdi
  41e3e6:	74 12                	je     41e3fa <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x86a>
  41e3e8:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e3ef:	ff ff ff 
  41e3f2:	49 89 ef             	mov    %rbp,%r15
  41e3f5:	48 01 e8             	add    %rbp,%rax
  41e3f8:	ff d0                	callq  *%rax
  41e3fa:	49 83 c6 20          	add    $0x20,%r14
  41e3fe:	49 39 de             	cmp    %rbx,%r14
  41e401:	75 d9                	jne    41e3dc <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x84c>
	      __throw_exception_again;
  41e403:	49 be e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%r14
  41e40a:	ff ff ff 
  41e40d:	49 89 ef             	mov    %rbp,%r15
  41e410:	49 8d 04 2e          	lea    (%r14,%rbp,1),%rax
  41e414:	ff d0                	callq  *%rax
  41e416:	49 89 c4             	mov    %rax,%r12
	  __catch(...)
  41e419:	48 01 eb             	add    %rbp,%rbx
  41e41c:	49 89 ef             	mov    %rbp,%r15
  41e41f:	ff d3                	callq  *%rbx
		      - this->_M_impl._M_start); }
  41e421:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41e426:	48 8b 38             	mov    (%rax),%rdi
	if (__p)
  41e429:	48 85 ff             	test   %rdi,%rdi
  41e42c:	0f 84 ab fe ff ff    	je     41e2dd <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x74d>
  41e432:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e439:	ff ff ff 
  41e43c:	48 01 e8             	add    %rbp,%rax
  41e43f:	ff d0                	callq  *%rax
  41e441:	e9 97 fe ff ff       	jmpq   41e2dd <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x74d>
  41e446:	48 bb 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rbx
  41e44d:	ff ff ff 
  41e450:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41e455:	49 89 ef             	mov    %rbp,%r15
  41e458:	48 8d 04 2b          	lea    (%rbx,%rbp,1),%rax
  41e45c:	ff d0                	callq  *%rax
		      - this->_M_impl._M_start); }
  41e45e:	49 8b 7d 40          	mov    0x40(%r13),%rdi
	if (__p)
  41e462:	48 85 ff             	test   %rdi,%rdi
  41e465:	74 0f                	je     41e476 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x8e6>
  41e467:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e46e:	ff ff ff 
  41e471:	48 01 e8             	add    %rbp,%rax
  41e474:	ff d0                	callq  *%rax
  41e476:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
  41e47b:	e9 06 fe ff ff       	jmpq   41e286 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x6f6>

000000000041e480 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41e480:	41 57                	push   %r15
  41e482:	41 56                	push   %r14
  41e484:	49 bb 80 cb 20 00 00 	movabs $0x20cb80,%r11
  41e48b:	00 00 00 
  41e48e:	41 55                	push   %r13
  41e490:	41 54                	push   %r12
  41e492:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41e480 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>
  41e499:	55                   	push   %rbp
  41e49a:	53                   	push   %rbx
  41e49b:	48 89 fd             	mov    %rdi,%rbp
  41e49e:	4d 01 dc             	add    %r11,%r12
  41e4a1:	48 89 f3             	mov    %rsi,%rbx
  41e4a4:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41e4a8:	48 83 fe 01          	cmp    $0x1,%rsi
  41e4ac:	0f 84 06 01 00 00    	je     41e5b8 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41e4b2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41e4b9:	ff ff 1f 
  41e4bc:	49 89 d5             	mov    %rdx,%r13
  41e4bf:	48 39 c6             	cmp    %rax,%rsi
  41e4c2:	0f 87 04 01 00 00    	ja     41e5cc <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41e4c8:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41e4cf:	00 
  41e4d0:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41e4d7:	ff ff ff 
  41e4da:	4d 89 e7             	mov    %r12,%r15
  41e4dd:	4c 01 e0             	add    %r12,%rax
  41e4e0:	4c 89 f7             	mov    %r14,%rdi
  41e4e3:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41e4e5:	48 89 c7             	mov    %rax,%rdi
  41e4e8:	49 89 c5             	mov    %rax,%r13
  41e4eb:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  41e4f2:	ff ff ff 
  41e4f5:	4c 89 f2             	mov    %r14,%rdx
  41e4f8:	31 f6                	xor    %esi,%esi
  41e4fa:	4c 01 e0             	add    %r12,%rax
  41e4fd:	ff d0                	callq  *%rax
  41e4ff:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41e503:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
      _M_before_begin._M_nxt = nullptr;
  41e507:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41e50e:	00 
      while (__p)
  41e50f:	48 85 c9             	test   %rcx,%rcx
  41e512:	74 64                	je     41e578 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
  41e514:	45 31 c0             	xor    %r8d,%r8d
	      __new_buckets[__bkt] = &_M_before_begin;
  41e517:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41e51b:	eb 17                	jmp    41e534 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41e51d:	0f 1f 00             	nopl   (%rax)
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41e520:	48 8b 16             	mov    (%rsi),%rdx
  41e523:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41e526:	48 8b 00             	mov    (%rax),%rax
  41e529:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41e52c:	48 85 ff             	test   %rdi,%rdi
  41e52f:	48 89 f9             	mov    %rdi,%rcx
  41e532:	74 44                	je     41e578 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41e534:	48 8b 41 10          	mov    0x10(%rcx),%rax
  41e538:	31 d2                	xor    %edx,%edx
  41e53a:	48 8b 39             	mov    (%rcx),%rdi
  41e53d:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41e540:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41e545:	48 8b 30             	mov    (%rax),%rsi
  41e548:	48 85 f6             	test   %rsi,%rsi
  41e54b:	75 d3                	jne    41e520 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41e54d:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41e551:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41e554:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41e558:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41e55b:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41e55f:	74 4f                	je     41e5b0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41e561:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41e564:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41e569:	49 89 d0             	mov    %rdx,%r8
  41e56c:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41e56f:	75 c3                	jne    41e534 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41e571:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41e578:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41e57c:	4c 39 d7             	cmp    %r10,%rdi
  41e57f:	74 12                	je     41e593 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41e581:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e588:	ff ff ff 
  41e58b:	4d 89 e7             	mov    %r12,%r15
  41e58e:	4c 01 e0             	add    %r12,%rax
  41e591:	ff d0                	callq  *%rax
      _M_bucket_count = __n;
  41e593:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41e597:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41e59b:	48 83 c4 08          	add    $0x8,%rsp
  41e59f:	5b                   	pop    %rbx
  41e5a0:	5d                   	pop    %rbp
  41e5a1:	41 5c                	pop    %r12
  41e5a3:	41 5d                	pop    %r13
  41e5a5:	41 5e                	pop    %r14
  41e5a7:	41 5f                	pop    %r15
  41e5a9:	c3                   	retq   
  41e5aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41e5b0:	49 89 d0             	mov    %rdx,%r8
  41e5b3:	e9 74 ff ff ff       	jmpq   41e52c <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41e5b8:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41e5bc:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41e5c3:	00 
	    return &_M_single_bucket;
  41e5c4:	4d 89 ea             	mov    %r13,%r10
  41e5c7:	e9 37 ff ff ff       	jmpq   41e503 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41e5cc:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41e5d3:	ff ff ff 
  41e5d6:	4d 89 e7             	mov    %r12,%r15
  41e5d9:	4c 01 e0             	add    %r12,%rax
  41e5dc:	ff d0                	callq  *%rax
      __catch(...)
  41e5de:	48 89 c7             	mov    %rax,%rdi
  41e5e1:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41e5e8:	ff ff ff 
  41e5eb:	4d 89 e7             	mov    %r12,%r15
  41e5ee:	4c 01 e0             	add    %r12,%rax
  41e5f1:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41e5f3:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41e5f7:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41e5fb:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41e602:	ff ff ff 
  41e605:	4c 01 e0             	add    %r12,%rax
  41e608:	ff d0                	callq  *%rax
      __catch(...)
  41e60a:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41e611:	ff ff ff 
  41e614:	48 89 c3             	mov    %rax,%rbx
  41e617:	4d 89 e7             	mov    %r12,%r15
  41e61a:	4c 01 e2             	add    %r12,%rdx
  41e61d:	ff d2                	callq  *%rdx
  41e61f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41e626:	ff ff ff 
  41e629:	48 89 df             	mov    %rbx,%rdi
  41e62c:	4c 01 e0             	add    %r12,%rax
  41e62f:	ff d0                	callq  *%rax
  41e631:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41e638:	00 00 00 
  41e63b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041e640 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41e640:	41 57                	push   %r15
  41e642:	41 56                	push   %r14
  41e644:	49 bb c0 c9 20 00 00 	movabs $0x20c9c0,%r11
  41e64b:	00 00 00 
  41e64e:	41 55                	push   %r13
  41e650:	41 54                	push   %r12
  41e652:	55                   	push   %rbp
  41e653:	53                   	push   %rbx
  41e654:	48 89 fd             	mov    %rdi,%rbp
  41e657:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41e640 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_>
  41e65e:	48 83 ec 28          	sub    $0x28,%rsp
  41e662:	4c 8b 37             	mov    (%rdi),%r14
  41e665:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  41e669:	4c 01 db             	add    %r11,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41e66c:	48 89 f8             	mov    %rdi,%rax
  41e66f:	4c 29 f0             	sub    %r14,%rax
  41e672:	48 89 c1             	mov    %rax,%rcx
  41e675:	48 c1 f9 05          	sar    $0x5,%rcx
      if (__a < __b)
  41e679:	48 85 c9             	test   %rcx,%rcx
  41e67c:	74 22                	je     41e6a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x60>
  41e67e:	48 01 c9             	add    %rcx,%rcx
  41e681:	72 13                	jb     41e696 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41e683:	49 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%r8
  41e68a:	ff ff 07 
  41e68d:	4c 39 c1             	cmp    %r8,%rcx
  41e690:	0f 86 b2 01 00 00    	jbe    41e848 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x208>
  41e696:	49 c7 c4 e0 ff ff ff 	mov    $0xffffffffffffffe0,%r12
  41e69d:	eb 07                	jmp    41e6a6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x66>
  41e69f:	90                   	nop
  41e6a0:	41 bc 20 00 00 00    	mov    $0x20,%r12d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41e6a6:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41e6ad:	ff ff ff 
  41e6b0:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  41e6b5:	4c 89 e7             	mov    %r12,%rdi
  41e6b8:	49 89 df             	mov    %rbx,%r15
  41e6bb:	48 01 d8             	add    %rbx,%rax
  41e6be:	ff d0                	callq  *%rax
  41e6c0:	49 89 c5             	mov    %rax,%r13
  41e6c3:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  41e6c7:	4a 8d 04 20          	lea    (%rax,%r12,1),%rax
  41e6cb:	49 8d 75 20          	lea    0x20(%r13),%rsi
  41e6cf:	4c 8b 75 00          	mov    0x0(%rbp),%r14
  41e6d3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41e6d8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41e6dd:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  41e6e2:	48 89 f8             	mov    %rdi,%rax
  41e6e5:	4c 29 f0             	sub    %r14,%rax
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41e6e8:	4c 01 e8             	add    %r13,%rax
  41e6eb:	74 41                	je     41e72e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0xee>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41e6ed:	48 8d 50 10          	lea    0x10(%rax),%rdx
  41e6f1:	48 8b 0e             	mov    (%rsi),%rcx
  41e6f4:	48 89 10             	mov    %rdx,(%rax)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41e6f7:	48 8d 56 10          	lea    0x10(%rsi),%rdx
	if (__str._M_is_local())
  41e6fb:	48 39 d1             	cmp    %rdx,%rcx
  41e6fe:	0f 84 2c 01 00 00    	je     41e830 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1f0>
      { _M_dataplus._M_p = __p; }
  41e704:	48 89 08             	mov    %rcx,(%rax)
      { _M_allocated_capacity = __capacity; }
  41e707:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  41e70b:	48 89 48 10          	mov    %rcx,0x10(%rax)
      { _M_string_length = __length; }
  41e70f:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  41e713:	c6 46 10 00          	movb   $0x0,0x10(%rsi)
  41e717:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  41e71b:	4c 8b 75 00          	mov    0x0(%rbp),%r14
      { _M_dataplus._M_p = __p; }
  41e71f:	48 89 16             	mov    %rdx,(%rsi)
      { _M_string_length = __length; }
  41e722:	48 c7 46 08 00 00 00 	movq   $0x0,0x8(%rsi)
  41e729:	00 
  41e72a:	48 89 48 08          	mov    %rcx,0x8(%rax)
	      for (; __first != __last; ++__first, (void)++__cur)
  41e72e:	4c 39 f7             	cmp    %r14,%rdi
  41e731:	0f 84 b4 00 00 00    	je     41e7eb <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1ab>
  41e737:	49 8d 4e 20          	lea    0x20(%r14),%rcx
  41e73b:	49 8d 46 10          	lea    0x10(%r14),%rax
  41e73f:	4c 89 ea             	mov    %r13,%rdx
  41e742:	48 29 cf             	sub    %rcx,%rdi
  41e745:	49 8d 74 3e 30       	lea    0x30(%r14,%rdi,1),%rsi
  41e74a:	eb 32                	jmp    41e77e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x13e>
  41e74c:	0f 1f 40 00          	nopl   0x0(%rax)
      { _M_dataplus._M_p = __p; }
  41e750:	48 89 0a             	mov    %rcx,(%rdx)
	    _M_capacity(__str._M_allocated_capacity);
  41e753:	48 8b 08             	mov    (%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41e756:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  41e75a:	48 8b 48 f8          	mov    -0x8(%rax),%rcx
      { _M_string_length = __length; }
  41e75e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
      { _M_dataplus._M_p = __p; }
  41e762:	48 89 40 f0          	mov    %rax,-0x10(%rax)
      { _M_string_length = __length; }
  41e766:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
  41e76d:	00 
  41e76e:	c6 00 00             	movb   $0x0,(%rax)
  41e771:	48 83 c0 20          	add    $0x20,%rax
  41e775:	48 83 c2 20          	add    $0x20,%rdx
  41e779:	48 39 f0             	cmp    %rsi,%rax
  41e77c:	74 2a                	je     41e7a8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x168>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  41e77e:	48 85 d2             	test   %rdx,%rdx
  41e781:	74 ee                	je     41e771 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x131>
	: allocator_type(__a), _M_p(__dat) { }
  41e783:	48 8d 4a 10          	lea    0x10(%rdx),%rcx
  41e787:	48 89 0a             	mov    %rcx,(%rdx)
  41e78a:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
	if (__str._M_is_local())
  41e78e:	48 39 c1             	cmp    %rax,%rcx
  41e791:	75 bd                	jne    41e750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x110>
  41e793:	4c 8b 08             	mov    (%rax),%r9
  41e796:	4c 8b 50 08          	mov    0x8(%rax),%r10
  41e79a:	4c 89 4a 10          	mov    %r9,0x10(%rdx)
  41e79e:	4c 89 52 18          	mov    %r10,0x18(%rdx)
  41e7a2:	eb b6                	jmp    41e75a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x11a>
  41e7a4:	0f 1f 40 00          	nopl   0x0(%rax)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41e7a8:	4c 8b 65 08          	mov    0x8(%rbp),%r12
  41e7ac:	4c 8b 75 00          	mov    0x0(%rbp),%r14
	    ++__new_finish;
  41e7b0:	49 8d 44 3d 40       	lea    0x40(%r13,%rdi,1),%rax
  41e7b5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	  for (; __first != __last; ++__first)
  41e7ba:	4d 39 f4             	cmp    %r14,%r12
  41e7bd:	74 2c                	je     41e7eb <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1ab>
  41e7bf:	90                   	nop
  41e7c0:	49 8b 3e             	mov    (%r14),%rdi
	if (!_M_is_local())
  41e7c3:	49 8d 46 10          	lea    0x10(%r14),%rax
  41e7c7:	48 39 c7             	cmp    %rax,%rdi
  41e7ca:	74 12                	je     41e7de <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x19e>
      { ::operator delete(__p); }
  41e7cc:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e7d3:	ff ff ff 
  41e7d6:	49 89 df             	mov    %rbx,%r15
  41e7d9:	48 01 d8             	add    %rbx,%rax
  41e7dc:	ff d0                	callq  *%rax
  41e7de:	49 83 c6 20          	add    $0x20,%r14
  41e7e2:	4d 39 e6             	cmp    %r12,%r14
  41e7e5:	75 d9                	jne    41e7c0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x180>
  41e7e7:	4c 8b 75 00          	mov    0x0(%rbp),%r14
	if (__p)
  41e7eb:	4d 85 f6             	test   %r14,%r14
  41e7ee:	74 15                	je     41e805 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1c5>
  41e7f0:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e7f7:	ff ff ff 
  41e7fa:	4c 89 f7             	mov    %r14,%rdi
  41e7fd:	49 89 df             	mov    %rbx,%r15
  41e800:	48 01 d8             	add    %rbx,%rax
  41e803:	ff d0                	callq  *%rax
	this->_M_impl._M_finish = __new_finish;
  41e805:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	this->_M_impl._M_start = __new_start;
  41e80a:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  41e80e:	48 89 45 08          	mov    %rax,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41e812:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41e817:	48 89 45 10          	mov    %rax,0x10(%rbp)
      }
  41e81b:	48 83 c4 28          	add    $0x28,%rsp
  41e81f:	5b                   	pop    %rbx
  41e820:	5d                   	pop    %rbp
  41e821:	41 5c                	pop    %r12
  41e823:	41 5d                	pop    %r13
  41e825:	41 5e                	pop    %r14
  41e827:	41 5f                	pop    %r15
  41e829:	c3                   	retq   
  41e82a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41e830:	4c 8b 4e 10          	mov    0x10(%rsi),%r9
  41e834:	4c 8b 56 18          	mov    0x18(%rsi),%r10
  41e838:	4c 89 48 10          	mov    %r9,0x10(%rax)
  41e83c:	4c 89 50 18          	mov    %r10,0x18(%rax)
  41e840:	e9 ca fe ff ff       	jmpq   41e70f <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0xcf>
  41e845:	0f 1f 00             	nopl   (%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41e848:	48 85 c9             	test   %rcx,%rcx
  41e84b:	75 1a                	jne    41e867 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x227>
  41e84d:	48 c7 44 24 08 20 00 	movq   $0x20,0x8(%rsp)
  41e854:	00 00 
  41e856:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  41e85d:	00 00 
  41e85f:	45 31 ed             	xor    %r13d,%r13d
  41e862:	e9 81 fe ff ff       	jmpq   41e6e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0xa8>
  41e867:	48 c1 e1 05          	shl    $0x5,%rcx
  41e86b:	49 89 cc             	mov    %rcx,%r12
  41e86e:	e9 33 fe ff ff       	jmpq   41e6a6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x66>
  41e873:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41e87a:	00 00 00 
  41e87d:	0f 1f 00             	nopl   (%rax)

000000000041e880 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc>:
    basic_command_line_parser<charT>::
  41e880:	41 57                	push   %r15
  41e882:	41 56                	push   %r14
  41e884:	49 bb 80 c7 20 00 00 	movabs $0x20c780,%r11
  41e88b:	00 00 00 
  41e88e:	41 55                	push   %r13
  41e890:	41 54                	push   %r12
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e892:	31 c0                	xor    %eax,%eax
    basic_command_line_parser<charT>::
  41e894:	55                   	push   %rbp
  41e895:	53                   	push   %rbx
  41e896:	48 8d 1d e3 ff ff ff 	lea    -0x1d(%rip),%rbx        # 41e880 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc>
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e89d:	48 63 ce             	movslq %esi,%rcx
        m_desc()
  41e8a0:	4c 8d 62 08          	lea    0x8(%rdx),%r12
    basic_command_line_parser<charT>::
  41e8a4:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  41e8ab:	4c 01 db             	add    %r11,%rbx
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e8ae:	85 f6                	test   %esi,%esi
  41e8b0:	0f 94 c0             	sete   %al
    basic_command_line_parser<charT>::
  41e8b3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  41e8b8:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  41e8bf:	00 00 
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e8c1:	48 c1 e0 03          	shl    $0x3,%rax
  41e8c5:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  41e8cc:	00 00 
  41e8ce:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
  41e8d5:	00 00 
  41e8d7:	48 8d 04 c8          	lea    (%rax,%rcx,8),%rax
        m_desc()
  41e8db:	48 01 d0             	add    %rdx,%rax
            for(; i != e; ++i)
  41e8de:	4c 39 e0             	cmp    %r12,%rax
        m_desc()
  41e8e1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            for(; i != e; ++i)
  41e8e6:	0f 84 f9 02 00 00    	je     41ebe5 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x365>
  41e8ec:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  41e8f1:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41e8f6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
          _M_construct(__beg, __end, _Tag());
  41e8fb:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  41e902:	ff ff ff 
	: allocator_type(__a), _M_p(__dat) { }
  41e905:	49 8d 6d 10          	lea    0x10(%r13),%rbp
          _M_construct(__beg, __end, _Tag());
  41e909:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  41e90d:	48 b8 40 36 df ff ff 	movabs $0xffffffffffdf3640,%rax
  41e914:	ff ff ff 
  41e917:	48 01 d8             	add    %rbx,%rax
  41e91a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41e91f:	eb 67                	jmp    41e988 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x108>
  41e921:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_dataplus._M_p = __p; }
  41e928:	48 89 10             	mov    %rdx,(%rax)
	    _M_capacity(__str._M_allocated_capacity);
  41e92b:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  41e932:	00 
      { _M_allocated_capacity = __capacity; }
  41e933:	48 89 50 10          	mov    %rdx,0x10(%rax)
  41e937:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  41e93c:	48 89 ef             	mov    %rbp,%rdi
      { _M_string_length = __length; }
  41e93f:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { _M_dataplus._M_p = __p; }
  41e943:	48 89 6c 24 70       	mov    %rbp,0x70(%rsp)
      { _M_string_length = __length; }
  41e948:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  41e94f:	00 00 
  41e951:	c6 84 24 80 00 00 00 	movb   $0x0,0x80(%rsp)
  41e958:	00 
	    ++this->_M_impl._M_finish;
  41e959:	48 83 c0 20          	add    $0x20,%rax
  41e95d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
	if (!_M_is_local())
  41e962:	48 39 ef             	cmp    %rbp,%rdi
  41e965:	74 12                	je     41e979 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xf9>
  41e967:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e96e:	ff ff ff 
  41e971:	49 89 df             	mov    %rbx,%r15
  41e974:	48 01 d8             	add    %rbx,%rax
  41e977:	ff d0                	callq  *%rax
  41e979:	49 83 c4 08          	add    $0x8,%r12
  41e97d:	4c 39 64 24 10       	cmp    %r12,0x10(%rsp)
  41e982:	0f 84 b0 00 00 00    	je     41ea38 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x1b8>
                result.push_back(*i);
  41e988:	49 8b 34 24          	mov    (%r12),%rsi
	: allocator_type(__a), _M_p(__dat) { }
  41e98c:	48 89 6c 24 70       	mov    %rbp,0x70(%rsp)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  41e991:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  41e998:	48 85 f6             	test   %rsi,%rsi
  41e99b:	74 23                	je     41e9c0 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x140>
      { return __builtin_strlen(__s); }
  41e99d:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41e9a4:	ff ff ff 
  41e9a7:	48 89 f7             	mov    %rsi,%rdi
  41e9aa:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41e9af:	49 89 df             	mov    %rbx,%r15
  41e9b2:	48 01 d8             	add    %rbx,%rax
  41e9b5:	ff d0                	callq  *%rax
  41e9b7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41e9bc:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
          _M_construct(__beg, __end, _Tag());
  41e9c0:	4c 89 ef             	mov    %r13,%rdi
  41e9c3:	41 ff d6             	callq  *%r14
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  41e9c6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  41e9cb:	48 3b 44 24 60       	cmp    0x60(%rsp),%rax
  41e9d0:	74 46                	je     41ea18 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x198>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41e9d2:	48 85 c0             	test   %rax,%rax
  41e9d5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e9da:	0f 84 79 ff ff ff    	je     41e959 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xd9>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41e9e0:	48 8d 50 10          	lea    0x10(%rax),%rdx
  41e9e4:	48 89 10             	mov    %rdx,(%rax)
  41e9e7:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
	if (__str._M_is_local())
  41e9ec:	48 39 ea             	cmp    %rbp,%rdx
  41e9ef:	0f 85 33 ff ff ff    	jne    41e928 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xa8>
  41e9f5:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  41e9fc:	00 
  41e9fd:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  41ea04:	00 
  41ea05:	48 89 70 10          	mov    %rsi,0x10(%rax)
  41ea09:	48 89 78 18          	mov    %rdi,0x18(%rax)
  41ea0d:	e9 25 ff ff ff       	jmpq   41e937 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xb7>
  41ea12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  41ea18:	4c 89 ee             	mov    %r13,%rsi
  41ea1b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41ea20:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41ea25:	ff d0                	callq  *%rax
  41ea27:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41ea2c:	e9 31 ff ff ff       	jmpq   41e962 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xe2>
  41ea31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41ea38:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  41ea3d:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  41ea42:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41ea49:	00 00 
  41ea4b:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  41ea52:	00 00 
  41ea54:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  41ea5b:	00 00 
  41ea5d:	48 29 f0             	sub    %rsi,%rax
  41ea60:	48 c1 f8 05          	sar    $0x5,%rax

        template<class T>
        std::vector<std::string> to_internal(const std::vector<T>& s)
        {
            std::vector<std::string> result;
            for (unsigned i = 0; i < s.size(); ++i)
  41ea64:	48 85 c0             	test   %rax,%rax
  41ea67:	0f 84 11 02 00 00    	je     41ec7e <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3fe>
  41ea6d:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
                result.push_back(to_internal(s[i]));            
  41ea72:	49 be 10 e7 dd ff ff 	movabs $0xffffffffffdde710,%r14
  41ea79:	ff ff ff 
            for (unsigned i = 0; i < s.size(); ++i)
  41ea7c:	31 d2                	xor    %edx,%edx
  41ea7e:	45 31 e4             	xor    %r12d,%r12d
                result.push_back(to_internal(s[i]));            
  41ea81:	49 01 de             	add    %rbx,%r14
  41ea84:	49 8d 6d 10          	lea    0x10(%r13),%rbp
  41ea88:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41ea8d:	48 b8 40 36 df ff ff 	movabs $0xffffffffffdf3640,%rax
  41ea94:	ff ff ff 
  41ea97:	48 01 d8             	add    %rbx,%rax
  41ea9a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41ea9f:	eb 76                	jmp    41eb17 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x297>
  41eaa1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_dataplus._M_p = __p; }
  41eaa8:	48 89 10             	mov    %rdx,(%rax)
	    _M_capacity(__str._M_allocated_capacity);
  41eaab:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  41eab2:	00 
      { _M_allocated_capacity = __capacity; }
  41eab3:	48 89 50 10          	mov    %rdx,0x10(%rax)
  41eab7:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
      { __c1 = __c2; }
  41eabc:	48 89 ef             	mov    %rbp,%rdi
      { _M_string_length = __length; }
  41eabf:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { _M_dataplus._M_p = __p; }
  41eac3:	48 89 6c 24 70       	mov    %rbp,0x70(%rsp)
      { _M_string_length = __length; }
  41eac8:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  41eacf:	00 00 
  41ead1:	c6 84 24 80 00 00 00 	movb   $0x0,0x80(%rsp)
  41ead8:	00 
	    ++this->_M_impl._M_finish;
  41ead9:	48 83 c0 20          	add    $0x20,%rax
  41eadd:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
	if (!_M_is_local())
  41eae2:	48 39 ef             	cmp    %rbp,%rdi
  41eae5:	74 12                	je     41eaf9 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x279>
      { ::operator delete(__p); }
  41eae7:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41eaee:	ff ff ff 
  41eaf1:	49 89 df             	mov    %rbx,%r15
  41eaf4:	48 01 d8             	add    %rbx,%rax
  41eaf7:	ff d0                	callq  *%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41eaf9:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  41eafe:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
            for (unsigned i = 0; i < s.size(); ++i)
  41eb03:	41 8d 54 24 01       	lea    0x1(%r12),%edx
  41eb08:	49 89 d4             	mov    %rdx,%r12
  41eb0b:	48 29 f0             	sub    %rsi,%rax
  41eb0e:	48 c1 f8 05          	sar    $0x5,%rax
  41eb12:	48 39 c2             	cmp    %rax,%rdx
  41eb15:	73 79                	jae    41eb90 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x310>
      { return *(this->_M_impl._M_start + __n); }
  41eb17:	48 c1 e2 05          	shl    $0x5,%rdx
                result.push_back(to_internal(s[i]));            
  41eb1b:	4c 89 ef             	mov    %r13,%rdi
  41eb1e:	49 89 df             	mov    %rbx,%r15
  41eb21:	48 01 d6             	add    %rdx,%rsi
  41eb24:	41 ff d6             	callq  *%r14
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  41eb27:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41eb2c:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  41eb31:	74 3d                	je     41eb70 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x2f0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41eb33:	48 85 c0             	test   %rax,%rax
  41eb36:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41eb3b:	74 9c                	je     41ead9 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x259>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41eb3d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  41eb41:	48 89 10             	mov    %rdx,(%rax)
  41eb44:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
	if (__str._M_is_local())
  41eb49:	48 39 ea             	cmp    %rbp,%rdx
  41eb4c:	0f 85 56 ff ff ff    	jne    41eaa8 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x228>
  41eb52:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  41eb59:	00 
  41eb5a:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  41eb61:	00 
  41eb62:	48 89 70 10          	mov    %rsi,0x10(%rax)
  41eb66:	48 89 78 18          	mov    %rdi,0x18(%rax)
  41eb6a:	e9 48 ff ff ff       	jmpq   41eab7 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x237>
  41eb6f:	90                   	nop
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  41eb70:	4c 89 ee             	mov    %r13,%rsi
  41eb73:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41eb78:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41eb7d:	ff d0                	callq  *%rax
  41eb7f:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41eb84:	e9 59 ff ff ff       	jmpq   41eae2 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x262>
  41eb89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41eb90:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  41eb95:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
        m_desc()
  41eb9a:	48 b8 e0 e5 dd ff ff 	movabs $0xffffffffffdde5e0,%rax
  41eba1:	ff ff ff 
  41eba4:	48 89 ee             	mov    %rbp,%rsi
  41eba7:	4c 89 f7             	mov    %r14,%rdi
  41ebaa:	49 89 df             	mov    %rbx,%r15
  41ebad:	48 01 d8             	add    %rbx,%rax
  41ebb0:	ff d0                	callq  *%rax
  41ebb2:	48 b8 40 bb de ff ff 	movabs $0xffffffffffdebb40,%rax
  41ebb9:	ff ff ff 
  41ebbc:	48 89 ef             	mov    %rbp,%rdi
  41ebbf:	48 01 c3             	add    %rax,%rbx
  41ebc2:	ff d3                	callq  *%rbx
  41ebc4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41ebc9:	ff d3                	callq  *%rbx
  41ebcb:	49 c7 46 70 00 00 00 	movq   $0x0,0x70(%r14)
  41ebd2:	00 
    {}
  41ebd3:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  41ebda:	5b                   	pop    %rbx
  41ebdb:	5d                   	pop    %rbp
  41ebdc:	41 5c                	pop    %r12
  41ebde:	41 5d                	pop    %r13
  41ebe0:	41 5e                	pop    %r14
  41ebe2:	41 5f                	pop    %r15
  41ebe4:	c3                   	retq   
  41ebe5:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  41ebea:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41ebf1:	00 00 
  41ebf3:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  41ebfa:	00 00 
  41ebfc:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  41ec03:	00 00 
  41ec05:	49 89 fe             	mov    %rdi,%r14
  41ec08:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41ec0d:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  41ec12:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41ec17:	48 89 c5             	mov    %rax,%rbp
  41ec1a:	e9 7b ff ff ff       	jmpq   41eb9a <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x31a>
  41ec1f:	48 89 c5             	mov    %rax,%rbp
        m_desc()
  41ec22:	49 bc 40 bb de ff ff 	movabs $0xffffffffffdebb40,%r12
  41ec29:	ff ff ff 
  41ec2c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41ec31:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  41ec35:	ff d0                	callq  *%rax
  41ec37:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41ec3c:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  41ec40:	ff d0                	callq  *%rax
  41ec42:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41ec49:	ff ff ff 
  41ec4c:	48 89 ef             	mov    %rbp,%rdi
  41ec4f:	49 89 df             	mov    %rbx,%r15
  41ec52:	48 01 d8             	add    %rbx,%rax
  41ec55:	ff d0                	callq  *%rax
  41ec57:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
  41ec5c:	49 83 c5 10          	add    $0x10,%r13
  41ec60:	48 89 c5             	mov    %rax,%rbp
  41ec63:	4c 39 ef             	cmp    %r13,%rdi
  41ec66:	74 ba                	je     41ec22 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3a2>
      { ::operator delete(__p); }
  41ec68:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ec6f:	ff ff ff 
  41ec72:	49 89 df             	mov    %rbx,%r15
  41ec75:	48 01 d8             	add    %rbx,%rax
  41ec78:	ff d0                	callq  *%rax
  41ec7a:	eb a6                	jmp    41ec22 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3a2>
  41ec7c:	eb a1                	jmp    41ec1f <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x39f>
  41ec7e:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  41ec83:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
  41ec88:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41ec8d:	48 89 c5             	mov    %rax,%rbp
  41ec90:	e9 05 ff ff ff       	jmpq   41eb9a <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x31a>
  41ec95:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41ec9a:	49 83 c5 10          	add    $0x10,%r13
  41ec9e:	48 89 c5             	mov    %rax,%rbp
  41eca1:	4c 39 ef             	cmp    %r13,%rdi
  41eca4:	74 12                	je     41ecb8 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x438>
  41eca6:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ecad:	ff ff ff 
  41ecb0:	49 89 df             	mov    %rbx,%r15
  41ecb3:	48 01 d8             	add    %rbx,%rax
  41ecb6:	ff d0                	callq  *%rax
  41ecb8:	48 b8 40 bb de ff ff 	movabs $0xffffffffffdebb40,%rax
  41ecbf:	ff ff ff 
  41ecc2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41ecc7:	48 01 d8             	add    %rbx,%rax
  41ecca:	e9 71 ff ff ff       	jmpq   41ec40 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3c0>
  41eccf:	48 89 c5             	mov    %rax,%rbp
  41ecd2:	eb e4                	jmp    41ecb8 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x438>
  41ecd4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ecdb:	00 00 00 
  41ecde:	66 90                	xchg   %ax,%ax

000000000041ece0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
  41ece0:	41 57                	push   %r15
  41ece2:	41 55                	push   %r13
  41ece4:	49 bb 20 c3 20 00 00 	movabs $0x20c320,%r11
  41eceb:	00 00 00 
  41ecee:	41 54                	push   %r12
  41ecf0:	55                   	push   %rbp
  41ecf1:	49 89 f4             	mov    %rsi,%r12
  41ecf4:	53                   	push   %rbx
  41ecf5:	48 8d 1d e4 ff ff ff 	lea    -0x1c(%rip),%rbx        # 41ece0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
      { return __builtin_strlen(__s); }
  41ecfc:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41ed03:	ff ff ff 
  41ed06:	48 89 fd             	mov    %rdi,%rbp
  41ed09:	49 89 d5             	mov    %rdx,%r13
  41ed0c:	48 89 d7             	mov    %rdx,%rdi
  41ed0f:	4c 01 db             	add    %r11,%rbx
  41ed12:	48 01 d8             	add    %rbx,%rax
  41ed15:	49 89 df             	mov    %rbx,%r15
  41ed18:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41ed1a:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
  41ed21:	ff ff 7f 
  41ed24:	49 2b 4c 24 08       	sub    0x8(%r12),%rcx
  41ed29:	48 39 c8             	cmp    %rcx,%rax
  41ed2c:	77 74                	ja     41eda2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_+0xc2>
	return _M_append(__s, __n);
  41ed2e:	48 89 c2             	mov    %rax,%rdx
  41ed31:	48 b8 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rax
  41ed38:	ff ff ff 
  41ed3b:	4c 89 ee             	mov    %r13,%rsi
  41ed3e:	48 01 d8             	add    %rbx,%rax
  41ed41:	4c 89 e7             	mov    %r12,%rdi
  41ed44:	49 89 df             	mov    %rbx,%r15
  41ed47:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ed49:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  41ed4d:	48 89 55 00          	mov    %rdx,0x0(%rbp)
  41ed51:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ed54:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41ed58:	48 39 d1             	cmp    %rdx,%rcx
  41ed5b:	74 33                	je     41ed90 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_+0xb0>
      { _M_dataplus._M_p = __p; }
  41ed5d:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
	    _M_capacity(__str._M_allocated_capacity);
  41ed61:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41ed65:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
  41ed69:	48 8b 48 08          	mov    0x8(%rax),%rcx
      { _M_string_length = __length; }
  41ed6d:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
      { _M_dataplus._M_p = __p; }
  41ed71:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41ed74:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41ed7b:	00 
      { __c1 = __c2; }
  41ed7c:	c6 40 10 00          	movb   $0x0,0x10(%rax)
    { return std::move(__lhs.append(__rhs)); }
  41ed80:	48 89 e8             	mov    %rbp,%rax
  41ed83:	5b                   	pop    %rbx
  41ed84:	5d                   	pop    %rbp
  41ed85:	41 5c                	pop    %r12
  41ed87:	41 5d                	pop    %r13
  41ed89:	41 5f                	pop    %r15
  41ed8b:	c3                   	retq   
  41ed8c:	0f 1f 40 00          	nopl   0x0(%rax)
  41ed90:	48 8b 48 10          	mov    0x10(%rax),%rcx
  41ed94:	48 8b 58 18          	mov    0x18(%rax),%rbx
  41ed98:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
  41ed9c:	48 89 5d 18          	mov    %rbx,0x18(%rbp)
  41eda0:	eb c7                	jmp    41ed69 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_+0x89>
	  __throw_length_error(__N(__s));
  41eda2:	48 b8 e1 8c df ff ff 	movabs $0xffffffffffdf8ce1,%rax
  41eda9:	ff ff ff 
  41edac:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41edb0:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41edb7:	ff ff ff 
  41edba:	48 01 d8             	add    %rbx,%rax
  41edbd:	ff d0                	callq  *%rax
  41edbf:	90                   	nop

000000000041edc0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
  41edc0:	41 57                	push   %r15
  41edc2:	41 56                	push   %r14
  41edc4:	49 bb 40 c2 20 00 00 	movabs $0x20c240,%r11
  41edcb:	00 00 00 
  41edce:	41 55                	push   %r13
  41edd0:	41 54                	push   %r12
      { return __builtin_strlen(__s); }
  41edd2:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41edd9:	ff ff ff 
  41eddc:	55                   	push   %rbp
  41eddd:	53                   	push   %rbx
  41edde:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 41edc0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
  41ede5:	48 89 fd             	mov    %rdi,%rbp
  41ede8:	49 89 f6             	mov    %rsi,%r14
  41edeb:	48 89 f7             	mov    %rsi,%rdi
  41edee:	4c 01 db             	add    %r11,%rbx
  41edf1:	48 83 ec 18          	sub    $0x18,%rsp
  41edf5:	49 89 d5             	mov    %rdx,%r13
  41edf8:	49 89 df             	mov    %rbx,%r15
  41edfb:	48 01 d8             	add    %rbx,%rax
  41edfe:	ff d0                	callq  *%rax
  41ee00:	49 89 c4             	mov    %rax,%r12
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ee03:	48 8d 45 10          	lea    0x10(%rbp),%rax
      { _M_string_length = __length; }
  41ee07:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
  41ee0e:	00 
      { __c1 = __c2; }
  41ee0f:	c6 45 10 00          	movb   $0x0,0x10(%rbp)
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
  41ee13:	4c 89 e6             	mov    %r12,%rsi
  41ee16:	49 03 75 08          	add    0x8(%r13),%rsi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ee1a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	: allocator_type(__a), _M_p(__dat) { }
  41ee1f:	48 89 45 00          	mov    %rax,0x0(%rbp)
  41ee23:	48 b8 30 e9 dd ff ff 	movabs $0xffffffffffdde930,%rax
  41ee2a:	ff ff ff 
  41ee2d:	48 89 ef             	mov    %rbp,%rdi
  41ee30:	48 01 d8             	add    %rbx,%rax
  41ee33:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41ee35:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  41ee3c:	ff ff 7f 
  41ee3f:	48 2b 45 08          	sub    0x8(%rbp),%rax
  41ee43:	49 39 c4             	cmp    %rax,%r12
  41ee46:	77 3f                	ja     41ee87 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_+0xc7>
	return _M_append(__s, __n);
  41ee48:	4c 89 e2             	mov    %r12,%rdx
  41ee4b:	49 bc 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%r12
  41ee52:	ff ff ff 
  41ee55:	4c 89 f6             	mov    %r14,%rsi
  41ee58:	48 89 ef             	mov    %rbp,%rdi
  41ee5b:	49 89 df             	mov    %rbx,%r15
  41ee5e:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  41ee62:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41ee64:	49 8b 55 08          	mov    0x8(%r13),%rdx
  41ee68:	49 8b 75 00          	mov    0x0(%r13),%rsi
  41ee6c:	48 89 ef             	mov    %rbp,%rdi
  41ee6f:	49 01 dc             	add    %rbx,%r12
  41ee72:	41 ff d4             	callq  *%r12
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }
  41ee75:	48 83 c4 18          	add    $0x18,%rsp
  41ee79:	48 89 e8             	mov    %rbp,%rax
  41ee7c:	5b                   	pop    %rbx
  41ee7d:	5d                   	pop    %rbp
  41ee7e:	41 5c                	pop    %r12
  41ee80:	41 5d                	pop    %r13
  41ee82:	41 5e                	pop    %r14
  41ee84:	41 5f                	pop    %r15
  41ee86:	c3                   	retq   
	  __throw_length_error(__N(__s));
  41ee87:	48 b8 e1 8c df ff ff 	movabs $0xffffffffffdf8ce1,%rax
  41ee8e:	ff ff ff 
  41ee91:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41ee95:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41ee9c:	ff ff ff 
  41ee9f:	48 01 d8             	add    %rbx,%rax
  41eea2:	ff d0                	callq  *%rax
  41eea4:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (!_M_is_local())
  41eea8:	48 39 7c 24 08       	cmp    %rdi,0x8(%rsp)
  41eead:	49 89 c4             	mov    %rax,%r12
  41eeb0:	74 12                	je     41eec4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_+0x104>
  41eeb2:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  41eeb9:	ff ff ff 
  41eebc:	49 89 df             	mov    %rbx,%r15
  41eebf:	48 01 da             	add    %rbx,%rdx
  41eec2:	ff d2                	callq  *%rdx
  41eec4:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41eecb:	ff ff ff 
  41eece:	4c 89 e7             	mov    %r12,%rdi
  41eed1:	49 89 df             	mov    %rbx,%r15
  41eed4:	48 01 d8             	add    %rbx,%rax
  41eed7:	ff d0                	callq  *%rax
  41eed9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041eee0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev>:
    typed_value<T, charT>::name() const
  41eee0:	41 57                	push   %r15
  41eee2:	41 56                	push   %r14
  41eee4:	49 bb 20 c1 20 00 00 	movabs $0x20c120,%r11
  41eeeb:	00 00 00 
  41eeee:	41 55                	push   %r13
  41eef0:	41 54                	push   %r12
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41eef2:	48 8d 56 18          	lea    0x18(%rsi),%rdx
    typed_value<T, charT>::name() const
  41eef6:	55                   	push   %rbp
  41eef7:	53                   	push   %rbx
  41eef8:	48 8d 1d e1 ff ff ff 	lea    -0x1f(%rip),%rbx        # 41eee0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev>
  41eeff:	49 89 fc             	mov    %rdi,%r12
  41ef02:	48 89 f5             	mov    %rsi,%rbp
  41ef05:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  41ef0c:	4c 01 db             	add    %r11,%rbx
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41ef0f:	48 83 7e 20 00       	cmpq   $0x0,0x20(%rsi)
  41ef14:	75 0e                	jne    41ef24 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x44>
  41ef16:	48 b8 98 ff ff ff ff 	movabs $0xffffffffffffff98,%rax
  41ef1d:	ff ff ff 
  41ef20:	48 8b 14 03          	mov    (%rbx,%rax,1),%rdx
        if (!m_implicit_value.empty() && !m_implicit_value_as_text.empty()) {
  41ef24:	48 83 7d 60 00       	cmpq   $0x0,0x60(%rbp)
  41ef29:	0f 84 61 02 00 00    	je     41f190 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x2b0>
  41ef2f:	48 83 7d 70 00       	cmpq   $0x0,0x70(%rbp)
  41ef34:	0f 84 56 02 00 00    	je     41f190 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x2b0>
            std::string msg = "[=" + var + "(=" + m_implicit_value_as_text + ")]";
  41ef3a:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  41ef3f:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41ef44:	49 89 c7             	mov    %rax,%r15
  41ef47:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41ef4c:	48 b8 fd 8c df ff ff 	movabs $0xffffffffffdf8cfd,%rax
  41ef53:	ff ff ff 
  41ef56:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41ef5a:	48 b8 c0 3d df ff ff 	movabs $0xffffffffffdf3dc0,%rax
  41ef61:	ff ff ff 
  41ef64:	4c 89 ff             	mov    %r15,%rdi
  41ef67:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41ef6c:	48 01 d8             	add    %rbx,%rax
  41ef6f:	ff d0                	callq  *%rax
  41ef71:	48 b8 fa 8c df ff ff 	movabs $0xffffffffffdf8cfa,%rax
  41ef78:	ff ff ff 
  41ef7b:	4c 89 fe             	mov    %r15,%rsi
  41ef7e:	4c 89 ef             	mov    %r13,%rdi
  41ef81:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41ef85:	48 b8 e0 3c df ff ff 	movabs $0xffffffffffdf3ce0,%rax
  41ef8c:	ff ff ff 
  41ef8f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41ef94:	48 01 d8             	add    %rbx,%rax
  41ef97:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41ef99:	48 b8 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rax
  41efa0:	ff ff ff 
  41efa3:	48 8b 55 70          	mov    0x70(%rbp),%rdx
  41efa7:	48 8b 75 68          	mov    0x68(%rbp),%rsi
  41efab:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  41efb0:	4c 89 ef             	mov    %r13,%rdi
  41efb3:	49 89 df             	mov    %rbx,%r15
  41efb6:	48 01 d8             	add    %rbx,%rax
  41efb9:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41efbb:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41efc2:	00 
  41efc3:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41efc7:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41efce:	00 
  41efcf:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41efd2:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41efd6:	48 39 d1             	cmp    %rdx,%rcx
  41efd9:	0f 84 89 03 00 00    	je     41f368 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x488>
      { _M_dataplus._M_p = __p; }
  41efdf:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41efe6:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41efe7:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41efeb:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41eff2:	00 
  41eff3:	48 8b 48 08          	mov    0x8(%rax),%rcx
  41eff7:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  41effc:	4c 89 f6             	mov    %r14,%rsi
  41efff:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
      { _M_string_length = __length; }
  41f004:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41f00b:	00 
      { _M_dataplus._M_p = __p; }
  41f00c:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41f00f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41f016:	00 
  41f017:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41f01b:	48 b8 f6 8c df ff ff 	movabs $0xffffffffffdf8cf6,%rax
  41f022:	ff ff ff 
  41f025:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f029:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41f02e:	48 01 d8             	add    %rbx,%rax
  41f031:	ff d0                	callq  *%rax
  41f033:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f03a:	00 
	if (!_M_is_local())
  41f03b:	49 8d 46 10          	lea    0x10(%r14),%rax
  41f03f:	48 39 c7             	cmp    %rax,%rdi
  41f042:	74 12                	je     41f056 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x176>
  41f044:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f04b:	ff ff ff 
  41f04e:	49 89 df             	mov    %rbx,%r15
  41f051:	48 01 d8             	add    %rbx,%rax
  41f054:	ff d0                	callq  *%rax
  41f056:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f05b:	49 8d 45 10          	lea    0x10(%r13),%rax
  41f05f:	48 39 c7             	cmp    %rax,%rdi
  41f062:	74 12                	je     41f076 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x196>
  41f064:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f06b:	ff ff ff 
  41f06e:	49 89 df             	mov    %rbx,%r15
  41f071:	48 01 d8             	add    %rbx,%rax
  41f074:	ff d0                	callq  *%rax
  41f076:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41f07b:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41f080:	48 83 c0 10          	add    $0x10,%rax
  41f084:	48 39 c7             	cmp    %rax,%rdi
  41f087:	74 12                	je     41f09b <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x1bb>
  41f089:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f090:	ff ff ff 
  41f093:	49 89 df             	mov    %rbx,%r15
  41f096:	48 01 d8             	add    %rbx,%rax
  41f099:	ff d0                	callq  *%rax
            if (!m_default_value.empty() && !m_default_value_as_text.empty())
  41f09b:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41f0a0:	0f 84 aa 00 00 00    	je     41f150 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x270>
  41f0a6:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41f0ab:	0f 84 9f 00 00 00    	je     41f150 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x270>
                msg += " (=" + m_default_value_as_text + ")";
  41f0b1:	48 b8 f9 8c df ff ff 	movabs $0xffffffffffdf8cf9,%rax
  41f0b8:	ff ff ff 
  41f0bb:	48 8d 55 40          	lea    0x40(%rbp),%rdx
  41f0bf:	4c 89 ef             	mov    %r13,%rdi
  41f0c2:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f0c6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41f0cb:	48 01 d8             	add    %rbx,%rax
  41f0ce:	ff d0                	callq  *%rax
  41f0d0:	48 b8 03 82 df ff ff 	movabs $0xffffffffffdf8203,%rax
  41f0d7:	ff ff ff 
  41f0da:	4c 89 ee             	mov    %r13,%rsi
  41f0dd:	4c 89 f7             	mov    %r14,%rdi
  41f0e0:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f0e4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41f0e9:	48 01 d8             	add    %rbx,%rax
  41f0ec:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f0ee:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41f0f3:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  41f0fa:	00 
  41f0fb:	49 89 df             	mov    %rbx,%r15
  41f0fe:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  41f105:	00 
  41f106:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41f10b:	48 01 d8             	add    %rbx,%rax
  41f10e:	ff d0                	callq  *%rax
  41f110:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f117:	00 
	if (!_M_is_local())
  41f118:	49 83 c6 10          	add    $0x10,%r14
  41f11c:	4c 39 f7             	cmp    %r14,%rdi
  41f11f:	74 0f                	je     41f130 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x250>
  41f121:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f128:	ff ff ff 
  41f12b:	48 01 d8             	add    %rbx,%rax
  41f12e:	ff d0                	callq  *%rax
  41f130:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f135:	49 83 c5 10          	add    $0x10,%r13
  41f139:	4c 39 ef             	cmp    %r13,%rdi
  41f13c:	74 12                	je     41f150 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x270>
  41f13e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f145:	ff ff ff 
  41f148:	49 89 df             	mov    %rbx,%r15
  41f14b:	48 01 d8             	add    %rbx,%rax
  41f14e:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f150:	49 8d 44 24 10       	lea    0x10(%r12),%rax
	if (__str._M_is_local())
  41f155:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f15a:	49 89 04 24          	mov    %rax,(%r12)
  41f15e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
	if (__str._M_is_local())
  41f163:	48 83 c2 10          	add    $0x10,%rdx
  41f167:	48 39 d0             	cmp    %rdx,%rax
  41f16a:	0f 84 b8 01 00 00    	je     41f328 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x448>
      { _M_dataplus._M_p = __p; }
  41f170:	49 89 04 24          	mov    %rax,(%r12)
      { _M_allocated_capacity = __capacity; }
  41f174:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41f179:	49 89 44 24 10       	mov    %rax,0x10(%r12)
      { _M_string_length = __length; }
  41f17e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41f183:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  41f188:	e9 83 01 00 00       	jmpq   41f310 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x430>
  41f18d:	0f 1f 00             	nopl   (%rax)
        else if (!m_default_value.empty() && !m_default_value_as_text.empty()) {
  41f190:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41f195:	0f 84 4d 01 00 00    	je     41f2e8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x408>
  41f19b:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41f1a0:	0f 84 42 01 00 00    	je     41f2e8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x408>
	: allocator_type(__a), _M_p(__dat) { }
  41f1a6:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41f1ab:	48 8b 32             	mov    (%rdx),%rsi
  41f1ae:	49 8d 45 10          	lea    0x10(%r13),%rax
          _M_construct(__beg, __end, _Tag());
  41f1b2:	4c 89 ef             	mov    %r13,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41f1b5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41f1ba:	48 89 f0             	mov    %rsi,%rax
  41f1bd:	48 03 42 08          	add    0x8(%rdx),%rax
  41f1c1:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41f1c4:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  41f1cb:	ff ff ff 
  41f1ce:	48 01 d8             	add    %rbx,%rax
  41f1d1:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41f1d3:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  41f1da:	ff ff 7f 
  41f1dd:	48 2b 44 24 78       	sub    0x78(%rsp),%rax
  41f1e2:	48 83 f8 02          	cmp    $0x2,%rax
  41f1e6:	0f 86 99 01 00 00    	jbe    41f385 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4a5>
	return _M_append(__s, __n);
  41f1ec:	48 b8 f9 8c df ff ff 	movabs $0xffffffffffdf8cf9,%rax
  41f1f3:	ff ff ff 
  41f1f6:	ba 03 00 00 00       	mov    $0x3,%edx
  41f1fb:	4c 89 ef             	mov    %r13,%rdi
  41f1fe:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f202:	48 b8 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rax
  41f209:	ff ff ff 
  41f20c:	49 89 df             	mov    %rbx,%r15
  41f20f:	49 89 c6             	mov    %rax,%r14
  41f212:	48 01 d8             	add    %rbx,%rax
  41f215:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f217:	4c 89 f0             	mov    %r14,%rax
  41f21a:	48 8b 55 48          	mov    0x48(%rbp),%rdx
  41f21e:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  41f222:	4c 89 ef             	mov    %r13,%rdi
  41f225:	48 01 d8             	add    %rbx,%rax
  41f228:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41f22a:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41f231:	00 
  41f232:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41f236:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41f23d:	00 
  41f23e:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41f241:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41f245:	48 39 d1             	cmp    %rdx,%rcx
  41f248:	0f 84 fa 00 00 00    	je     41f348 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x468>
      { _M_dataplus._M_p = __p; }
  41f24e:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41f255:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41f256:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41f25a:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41f261:	00 
  41f262:	48 8b 48 08          	mov    0x8(%rax),%rcx
            return var + " (=" + m_default_value_as_text + ")";
  41f266:	4c 89 f6             	mov    %r14,%rsi
  41f269:	4c 89 e7             	mov    %r12,%rdi
      { _M_string_length = __length; }
  41f26c:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41f273:	00 
      { _M_dataplus._M_p = __p; }
  41f274:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41f277:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41f27e:	00 
  41f27f:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41f283:	48 b8 03 82 df ff ff 	movabs $0xffffffffffdf8203,%rax
  41f28a:	ff ff ff 
  41f28d:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f291:	48 b8 e0 3c df ff ff 	movabs $0xffffffffffdf3ce0,%rax
  41f298:	ff ff ff 
  41f29b:	48 01 d8             	add    %rbx,%rax
  41f29e:	ff d0                	callq  *%rax
  41f2a0:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f2a7:	00 
	if (!_M_is_local())
  41f2a8:	49 83 c6 10          	add    $0x10,%r14
  41f2ac:	4c 39 f7             	cmp    %r14,%rdi
  41f2af:	74 12                	je     41f2c3 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x3e3>
  41f2b1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f2b8:	ff ff ff 
  41f2bb:	49 89 df             	mov    %rbx,%r15
  41f2be:	48 01 d8             	add    %rbx,%rax
  41f2c1:	ff d0                	callq  *%rax
  41f2c3:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f2c8:	49 83 c5 10          	add    $0x10,%r13
  41f2cc:	4c 39 ef             	cmp    %r13,%rdi
  41f2cf:	74 3f                	je     41f310 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x430>
  41f2d1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f2d8:	ff ff ff 
  41f2db:	49 89 df             	mov    %rbx,%r15
  41f2de:	48 01 d8             	add    %rbx,%rax
  41f2e1:	ff d0                	callq  *%rax
  41f2e3:	eb 2b                	jmp    41f310 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x430>
  41f2e5:	0f 1f 00             	nopl   (%rax)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f2e8:	49 8d 44 24 10       	lea    0x10(%r12),%rax
          _M_construct(__beg, __end, _Tag());
  41f2ed:	4c 89 e7             	mov    %r12,%rdi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f2f0:	49 89 04 24          	mov    %rax,(%r12)
  41f2f4:	48 8b 32             	mov    (%rdx),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41f2f7:	48 89 f0             	mov    %rsi,%rax
  41f2fa:	48 03 42 08          	add    0x8(%rdx),%rax
  41f2fe:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41f301:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  41f308:	ff ff ff 
  41f30b:	48 01 d8             	add    %rbx,%rax
  41f30e:	ff d0                	callq  *%rax
    }
  41f310:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  41f317:	4c 89 e0             	mov    %r12,%rax
  41f31a:	5b                   	pop    %rbx
  41f31b:	5d                   	pop    %rbp
  41f31c:	41 5c                	pop    %r12
  41f31e:	41 5d                	pop    %r13
  41f320:	41 5e                	pop    %r14
  41f322:	41 5f                	pop    %r15
  41f324:	c3                   	retq   
  41f325:	0f 1f 00             	nopl   (%rax)
  41f328:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41f32d:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  41f332:	49 89 44 24 10       	mov    %rax,0x10(%r12)
  41f337:	49 89 54 24 18       	mov    %rdx,0x18(%r12)
  41f33c:	e9 3d fe ff ff       	jmpq   41f17e <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x29e>
  41f341:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41f348:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f34c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f350:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f357:	00 
  41f358:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f35f:	00 
  41f360:	e9 fd fe ff ff       	jmpq   41f262 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x382>
  41f365:	0f 1f 00             	nopl   (%rax)
  41f368:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f36c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f370:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f377:	00 
  41f378:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f37f:	00 
  41f380:	e9 6e fc ff ff       	jmpq   41eff3 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x113>
	  __throw_length_error(__N(__s));
  41f385:	48 b8 e1 8c df ff ff 	movabs $0xffffffffffdf8ce1,%rax
  41f38c:	ff ff ff 
  41f38f:	49 89 df             	mov    %rbx,%r15
  41f392:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41f396:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41f39d:	ff ff ff 
  41f3a0:	48 01 d8             	add    %rbx,%rax
  41f3a3:	ff d0                	callq  *%rax
  41f3a5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
  41f3aa:	49 83 c5 10          	add    $0x10,%r13
  41f3ae:	48 89 c5             	mov    %rax,%rbp
  41f3b1:	4c 39 ef             	cmp    %r13,%rdi
  41f3b4:	74 12                	je     41f3c8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f3b6:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  41f3bd:	ff ff ff 
  41f3c0:	49 89 df             	mov    %rbx,%r15
  41f3c3:	48 01 da             	add    %rbx,%rdx
  41f3c6:	ff d2                	callq  *%rdx
  41f3c8:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41f3cf:	ff ff ff 
  41f3d2:	48 89 ef             	mov    %rbp,%rdi
  41f3d5:	49 89 df             	mov    %rbx,%r15
  41f3d8:	48 01 d8             	add    %rbx,%rax
  41f3db:	ff d0                	callq  *%rax
  41f3dd:	48 89 c5             	mov    %rax,%rbp
  41f3e0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f3e5:	49 83 c5 10          	add    $0x10,%r13
  41f3e9:	4c 39 ef             	cmp    %r13,%rdi
  41f3ec:	74 12                	je     41f400 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x520>
  41f3ee:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f3f5:	ff ff ff 
  41f3f8:	49 89 df             	mov    %rbx,%r15
  41f3fb:	48 01 d8             	add    %rbx,%rax
  41f3fe:	ff d0                	callq  *%rax
  41f400:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41f405:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41f40a:	48 83 c0 10          	add    $0x10,%rax
  41f40e:	48 39 c7             	cmp    %rax,%rdi
  41f411:	74 b5                	je     41f3c8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f413:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f41a:	ff ff ff 
  41f41d:	49 89 df             	mov    %rbx,%r15
  41f420:	48 01 d8             	add    %rbx,%rax
  41f423:	ff d0                	callq  *%rax
  41f425:	eb a1                	jmp    41f3c8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f427:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f42e:	00 
  41f42f:	49 83 c6 10          	add    $0x10,%r14
  41f433:	48 89 c5             	mov    %rax,%rbp
  41f436:	4c 39 f7             	cmp    %r14,%rdi
  41f439:	74 12                	je     41f44d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x56d>
  41f43b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f442:	ff ff ff 
  41f445:	49 89 df             	mov    %rbx,%r15
  41f448:	48 01 d8             	add    %rbx,%rax
  41f44b:	ff d0                	callq  *%rax
  41f44d:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f452:	49 83 c5 10          	add    $0x10,%r13
  41f456:	4c 39 ef             	cmp    %r13,%rdi
  41f459:	74 12                	je     41f46d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x58d>
  41f45b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f462:	ff ff ff 
  41f465:	49 89 df             	mov    %rbx,%r15
  41f468:	48 01 d8             	add    %rbx,%rax
  41f46b:	ff d0                	callq  *%rax
  41f46d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41f472:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41f477:	48 83 c0 10          	add    $0x10,%rax
  41f47b:	48 39 c7             	cmp    %rax,%rdi
  41f47e:	75 93                	jne    41f413 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x533>
  41f480:	e9 43 ff ff ff       	jmpq   41f3c8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f485:	48 89 c5             	mov    %rax,%rbp
  41f488:	eb c3                	jmp    41f44d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x56d>
  41f48a:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f491:	00 
  41f492:	49 83 c6 10          	add    $0x10,%r14
  41f496:	48 89 c5             	mov    %rax,%rbp
  41f499:	4c 39 f7             	cmp    %r14,%rdi
  41f49c:	74 12                	je     41f4b0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x5d0>
  41f49e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f4a5:	ff ff ff 
  41f4a8:	49 89 df             	mov    %rbx,%r15
  41f4ab:	48 01 d8             	add    %rbx,%rax
  41f4ae:	ff d0                	callq  *%rax
  41f4b0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f4b5:	49 83 c5 10          	add    $0x10,%r13
  41f4b9:	4c 39 ef             	cmp    %r13,%rdi
  41f4bc:	0f 85 51 ff ff ff    	jne    41f413 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x533>
  41f4c2:	e9 01 ff ff ff       	jmpq   41f3c8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f4c7:	48 89 c5             	mov    %rax,%rbp
  41f4ca:	eb a1                	jmp    41f46d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x58d>
  41f4cc:	48 89 c5             	mov    %rax,%rbp
  41f4cf:	eb df                	jmp    41f4b0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x5d0>
  41f4d1:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f4d8:	00 
  41f4d9:	49 83 c6 10          	add    $0x10,%r14
  41f4dd:	48 89 c5             	mov    %rax,%rbp
  41f4e0:	4c 39 f7             	cmp    %r14,%rdi
  41f4e3:	0f 84 f7 fe ff ff    	je     41f3e0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x500>
  41f4e9:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f4f0:	ff ff ff 
  41f4f3:	49 89 df             	mov    %rbx,%r15
  41f4f6:	48 01 d8             	add    %rbx,%rax
  41f4f9:	ff d0                	callq  *%rax
  41f4fb:	e9 e0 fe ff ff       	jmpq   41f3e0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x500>
  41f500:	48 89 c5             	mov    %rax,%rbp
  41f503:	e9 f8 fe ff ff       	jmpq   41f400 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x520>
  41f508:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41f50f:	00 

000000000041f510 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev>:
    typed_value<T, charT>::name() const
  41f510:	41 57                	push   %r15
  41f512:	41 56                	push   %r14
  41f514:	49 bb f0 ba 20 00 00 	movabs $0x20baf0,%r11
  41f51b:	00 00 00 
  41f51e:	41 55                	push   %r13
  41f520:	41 54                	push   %r12
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41f522:	48 8d 56 18          	lea    0x18(%rsi),%rdx
    typed_value<T, charT>::name() const
  41f526:	55                   	push   %rbp
  41f527:	53                   	push   %rbx
  41f528:	48 8d 1d e1 ff ff ff 	lea    -0x1f(%rip),%rbx        # 41f510 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev>
  41f52f:	49 89 fc             	mov    %rdi,%r12
  41f532:	48 89 f5             	mov    %rsi,%rbp
  41f535:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  41f53c:	4c 01 db             	add    %r11,%rbx
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41f53f:	48 83 7e 20 00       	cmpq   $0x0,0x20(%rsi)
  41f544:	75 0e                	jne    41f554 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x44>
  41f546:	48 b8 98 ff ff ff ff 	movabs $0xffffffffffffff98,%rax
  41f54d:	ff ff ff 
  41f550:	48 8b 14 03          	mov    (%rbx,%rax,1),%rdx
        if (!m_implicit_value.empty() && !m_implicit_value_as_text.empty()) {
  41f554:	48 83 7d 60 00       	cmpq   $0x0,0x60(%rbp)
  41f559:	0f 84 61 02 00 00    	je     41f7c0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x2b0>
  41f55f:	48 83 7d 70 00       	cmpq   $0x0,0x70(%rbp)
  41f564:	0f 84 56 02 00 00    	je     41f7c0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x2b0>
            std::string msg = "[=" + var + "(=" + m_implicit_value_as_text + ")]";
  41f56a:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  41f56f:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41f574:	49 89 c7             	mov    %rax,%r15
  41f577:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41f57c:	48 b8 fd 8c df ff ff 	movabs $0xffffffffffdf8cfd,%rax
  41f583:	ff ff ff 
  41f586:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f58a:	48 b8 c0 3d df ff ff 	movabs $0xffffffffffdf3dc0,%rax
  41f591:	ff ff ff 
  41f594:	4c 89 ff             	mov    %r15,%rdi
  41f597:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41f59c:	48 01 d8             	add    %rbx,%rax
  41f59f:	ff d0                	callq  *%rax
  41f5a1:	48 b8 fa 8c df ff ff 	movabs $0xffffffffffdf8cfa,%rax
  41f5a8:	ff ff ff 
  41f5ab:	4c 89 fe             	mov    %r15,%rsi
  41f5ae:	4c 89 ef             	mov    %r13,%rdi
  41f5b1:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f5b5:	48 b8 e0 3c df ff ff 	movabs $0xffffffffffdf3ce0,%rax
  41f5bc:	ff ff ff 
  41f5bf:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41f5c4:	48 01 d8             	add    %rbx,%rax
  41f5c7:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f5c9:	48 b8 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rax
  41f5d0:	ff ff ff 
  41f5d3:	48 8b 55 70          	mov    0x70(%rbp),%rdx
  41f5d7:	48 8b 75 68          	mov    0x68(%rbp),%rsi
  41f5db:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  41f5e0:	4c 89 ef             	mov    %r13,%rdi
  41f5e3:	49 89 df             	mov    %rbx,%r15
  41f5e6:	48 01 d8             	add    %rbx,%rax
  41f5e9:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41f5eb:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41f5f2:	00 
  41f5f3:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41f5f7:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41f5fe:	00 
  41f5ff:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41f602:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41f606:	48 39 d1             	cmp    %rdx,%rcx
  41f609:	0f 84 89 03 00 00    	je     41f998 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x488>
      { _M_dataplus._M_p = __p; }
  41f60f:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41f616:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41f617:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41f61b:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41f622:	00 
  41f623:	48 8b 48 08          	mov    0x8(%rax),%rcx
  41f627:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  41f62c:	4c 89 f6             	mov    %r14,%rsi
  41f62f:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
      { _M_string_length = __length; }
  41f634:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41f63b:	00 
      { _M_dataplus._M_p = __p; }
  41f63c:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41f63f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41f646:	00 
  41f647:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41f64b:	48 b8 f6 8c df ff ff 	movabs $0xffffffffffdf8cf6,%rax
  41f652:	ff ff ff 
  41f655:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f659:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41f65e:	48 01 d8             	add    %rbx,%rax
  41f661:	ff d0                	callq  *%rax
  41f663:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f66a:	00 
	if (!_M_is_local())
  41f66b:	49 8d 46 10          	lea    0x10(%r14),%rax
  41f66f:	48 39 c7             	cmp    %rax,%rdi
  41f672:	74 12                	je     41f686 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x176>
  41f674:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f67b:	ff ff ff 
  41f67e:	49 89 df             	mov    %rbx,%r15
  41f681:	48 01 d8             	add    %rbx,%rax
  41f684:	ff d0                	callq  *%rax
  41f686:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f68b:	49 8d 45 10          	lea    0x10(%r13),%rax
  41f68f:	48 39 c7             	cmp    %rax,%rdi
  41f692:	74 12                	je     41f6a6 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x196>
  41f694:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f69b:	ff ff ff 
  41f69e:	49 89 df             	mov    %rbx,%r15
  41f6a1:	48 01 d8             	add    %rbx,%rax
  41f6a4:	ff d0                	callq  *%rax
  41f6a6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41f6ab:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41f6b0:	48 83 c0 10          	add    $0x10,%rax
  41f6b4:	48 39 c7             	cmp    %rax,%rdi
  41f6b7:	74 12                	je     41f6cb <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x1bb>
  41f6b9:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f6c0:	ff ff ff 
  41f6c3:	49 89 df             	mov    %rbx,%r15
  41f6c6:	48 01 d8             	add    %rbx,%rax
  41f6c9:	ff d0                	callq  *%rax
            if (!m_default_value.empty() && !m_default_value_as_text.empty())
  41f6cb:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41f6d0:	0f 84 aa 00 00 00    	je     41f780 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x270>
  41f6d6:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41f6db:	0f 84 9f 00 00 00    	je     41f780 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x270>
                msg += " (=" + m_default_value_as_text + ")";
  41f6e1:	48 b8 f9 8c df ff ff 	movabs $0xffffffffffdf8cf9,%rax
  41f6e8:	ff ff ff 
  41f6eb:	48 8d 55 40          	lea    0x40(%rbp),%rdx
  41f6ef:	4c 89 ef             	mov    %r13,%rdi
  41f6f2:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f6f6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41f6fb:	48 01 d8             	add    %rbx,%rax
  41f6fe:	ff d0                	callq  *%rax
  41f700:	48 b8 03 82 df ff ff 	movabs $0xffffffffffdf8203,%rax
  41f707:	ff ff ff 
  41f70a:	4c 89 ee             	mov    %r13,%rsi
  41f70d:	4c 89 f7             	mov    %r14,%rdi
  41f710:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f714:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41f719:	48 01 d8             	add    %rbx,%rax
  41f71c:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f71e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41f723:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  41f72a:	00 
  41f72b:	49 89 df             	mov    %rbx,%r15
  41f72e:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  41f735:	00 
  41f736:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41f73b:	48 01 d8             	add    %rbx,%rax
  41f73e:	ff d0                	callq  *%rax
  41f740:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f747:	00 
	if (!_M_is_local())
  41f748:	49 83 c6 10          	add    $0x10,%r14
  41f74c:	4c 39 f7             	cmp    %r14,%rdi
  41f74f:	74 0f                	je     41f760 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x250>
  41f751:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f758:	ff ff ff 
  41f75b:	48 01 d8             	add    %rbx,%rax
  41f75e:	ff d0                	callq  *%rax
  41f760:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f765:	49 83 c5 10          	add    $0x10,%r13
  41f769:	4c 39 ef             	cmp    %r13,%rdi
  41f76c:	74 12                	je     41f780 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x270>
  41f76e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f775:	ff ff ff 
  41f778:	49 89 df             	mov    %rbx,%r15
  41f77b:	48 01 d8             	add    %rbx,%rax
  41f77e:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f780:	49 8d 44 24 10       	lea    0x10(%r12),%rax
	if (__str._M_is_local())
  41f785:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f78a:	49 89 04 24          	mov    %rax,(%r12)
  41f78e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
	if (__str._M_is_local())
  41f793:	48 83 c2 10          	add    $0x10,%rdx
  41f797:	48 39 d0             	cmp    %rdx,%rax
  41f79a:	0f 84 b8 01 00 00    	je     41f958 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x448>
      { _M_dataplus._M_p = __p; }
  41f7a0:	49 89 04 24          	mov    %rax,(%r12)
      { _M_allocated_capacity = __capacity; }
  41f7a4:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41f7a9:	49 89 44 24 10       	mov    %rax,0x10(%r12)
      { _M_string_length = __length; }
  41f7ae:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41f7b3:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  41f7b8:	e9 83 01 00 00       	jmpq   41f940 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x430>
  41f7bd:	0f 1f 00             	nopl   (%rax)
        else if (!m_default_value.empty() && !m_default_value_as_text.empty()) {
  41f7c0:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41f7c5:	0f 84 4d 01 00 00    	je     41f918 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x408>
  41f7cb:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41f7d0:	0f 84 42 01 00 00    	je     41f918 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x408>
	: allocator_type(__a), _M_p(__dat) { }
  41f7d6:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41f7db:	48 8b 32             	mov    (%rdx),%rsi
  41f7de:	49 8d 45 10          	lea    0x10(%r13),%rax
          _M_construct(__beg, __end, _Tag());
  41f7e2:	4c 89 ef             	mov    %r13,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41f7e5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41f7ea:	48 89 f0             	mov    %rsi,%rax
  41f7ed:	48 03 42 08          	add    0x8(%rdx),%rax
  41f7f1:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41f7f4:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  41f7fb:	ff ff ff 
  41f7fe:	48 01 d8             	add    %rbx,%rax
  41f801:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41f803:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  41f80a:	ff ff 7f 
  41f80d:	48 2b 44 24 78       	sub    0x78(%rsp),%rax
  41f812:	48 83 f8 02          	cmp    $0x2,%rax
  41f816:	0f 86 99 01 00 00    	jbe    41f9b5 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4a5>
	return _M_append(__s, __n);
  41f81c:	48 b8 f9 8c df ff ff 	movabs $0xffffffffffdf8cf9,%rax
  41f823:	ff ff ff 
  41f826:	ba 03 00 00 00       	mov    $0x3,%edx
  41f82b:	4c 89 ef             	mov    %r13,%rdi
  41f82e:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f832:	48 b8 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rax
  41f839:	ff ff ff 
  41f83c:	49 89 df             	mov    %rbx,%r15
  41f83f:	49 89 c6             	mov    %rax,%r14
  41f842:	48 01 d8             	add    %rbx,%rax
  41f845:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f847:	4c 89 f0             	mov    %r14,%rax
  41f84a:	48 8b 55 48          	mov    0x48(%rbp),%rdx
  41f84e:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  41f852:	4c 89 ef             	mov    %r13,%rdi
  41f855:	48 01 d8             	add    %rbx,%rax
  41f858:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41f85a:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41f861:	00 
  41f862:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41f866:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41f86d:	00 
  41f86e:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41f871:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41f875:	48 39 d1             	cmp    %rdx,%rcx
  41f878:	0f 84 fa 00 00 00    	je     41f978 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x468>
      { _M_dataplus._M_p = __p; }
  41f87e:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41f885:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41f886:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41f88a:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41f891:	00 
  41f892:	48 8b 48 08          	mov    0x8(%rax),%rcx
            return var + " (=" + m_default_value_as_text + ")";
  41f896:	4c 89 f6             	mov    %r14,%rsi
  41f899:	4c 89 e7             	mov    %r12,%rdi
      { _M_string_length = __length; }
  41f89c:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41f8a3:	00 
      { _M_dataplus._M_p = __p; }
  41f8a4:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41f8a7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41f8ae:	00 
  41f8af:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41f8b3:	48 b8 03 82 df ff ff 	movabs $0xffffffffffdf8203,%rax
  41f8ba:	ff ff ff 
  41f8bd:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f8c1:	48 b8 e0 3c df ff ff 	movabs $0xffffffffffdf3ce0,%rax
  41f8c8:	ff ff ff 
  41f8cb:	48 01 d8             	add    %rbx,%rax
  41f8ce:	ff d0                	callq  *%rax
  41f8d0:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f8d7:	00 
	if (!_M_is_local())
  41f8d8:	49 83 c6 10          	add    $0x10,%r14
  41f8dc:	4c 39 f7             	cmp    %r14,%rdi
  41f8df:	74 12                	je     41f8f3 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x3e3>
  41f8e1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f8e8:	ff ff ff 
  41f8eb:	49 89 df             	mov    %rbx,%r15
  41f8ee:	48 01 d8             	add    %rbx,%rax
  41f8f1:	ff d0                	callq  *%rax
  41f8f3:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f8f8:	49 83 c5 10          	add    $0x10,%r13
  41f8fc:	4c 39 ef             	cmp    %r13,%rdi
  41f8ff:	74 3f                	je     41f940 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x430>
  41f901:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f908:	ff ff ff 
  41f90b:	49 89 df             	mov    %rbx,%r15
  41f90e:	48 01 d8             	add    %rbx,%rax
  41f911:	ff d0                	callq  *%rax
  41f913:	eb 2b                	jmp    41f940 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x430>
  41f915:	0f 1f 00             	nopl   (%rax)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f918:	49 8d 44 24 10       	lea    0x10(%r12),%rax
          _M_construct(__beg, __end, _Tag());
  41f91d:	4c 89 e7             	mov    %r12,%rdi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f920:	49 89 04 24          	mov    %rax,(%r12)
  41f924:	48 8b 32             	mov    (%rdx),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41f927:	48 89 f0             	mov    %rsi,%rax
  41f92a:	48 03 42 08          	add    0x8(%rdx),%rax
  41f92e:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41f931:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  41f938:	ff ff ff 
  41f93b:	48 01 d8             	add    %rbx,%rax
  41f93e:	ff d0                	callq  *%rax
    }
  41f940:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  41f947:	4c 89 e0             	mov    %r12,%rax
  41f94a:	5b                   	pop    %rbx
  41f94b:	5d                   	pop    %rbp
  41f94c:	41 5c                	pop    %r12
  41f94e:	41 5d                	pop    %r13
  41f950:	41 5e                	pop    %r14
  41f952:	41 5f                	pop    %r15
  41f954:	c3                   	retq   
  41f955:	0f 1f 00             	nopl   (%rax)
  41f958:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41f95d:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  41f962:	49 89 44 24 10       	mov    %rax,0x10(%r12)
  41f967:	49 89 54 24 18       	mov    %rdx,0x18(%r12)
  41f96c:	e9 3d fe ff ff       	jmpq   41f7ae <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x29e>
  41f971:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41f978:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f97c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f980:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f987:	00 
  41f988:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f98f:	00 
  41f990:	e9 fd fe ff ff       	jmpq   41f892 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x382>
  41f995:	0f 1f 00             	nopl   (%rax)
  41f998:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f99c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f9a0:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f9a7:	00 
  41f9a8:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f9af:	00 
  41f9b0:	e9 6e fc ff ff       	jmpq   41f623 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x113>
	  __throw_length_error(__N(__s));
  41f9b5:	48 b8 e1 8c df ff ff 	movabs $0xffffffffffdf8ce1,%rax
  41f9bc:	ff ff ff 
  41f9bf:	49 89 df             	mov    %rbx,%r15
  41f9c2:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41f9c6:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41f9cd:	ff ff ff 
  41f9d0:	48 01 d8             	add    %rbx,%rax
  41f9d3:	ff d0                	callq  *%rax
  41f9d5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
  41f9da:	49 83 c5 10          	add    $0x10,%r13
  41f9de:	48 89 c5             	mov    %rax,%rbp
  41f9e1:	4c 39 ef             	cmp    %r13,%rdi
  41f9e4:	74 12                	je     41f9f8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f9e6:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  41f9ed:	ff ff ff 
  41f9f0:	49 89 df             	mov    %rbx,%r15
  41f9f3:	48 01 da             	add    %rbx,%rdx
  41f9f6:	ff d2                	callq  *%rdx
  41f9f8:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41f9ff:	ff ff ff 
  41fa02:	48 89 ef             	mov    %rbp,%rdi
  41fa05:	49 89 df             	mov    %rbx,%r15
  41fa08:	48 01 d8             	add    %rbx,%rax
  41fa0b:	ff d0                	callq  *%rax
  41fa0d:	48 89 c5             	mov    %rax,%rbp
  41fa10:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41fa15:	49 83 c5 10          	add    $0x10,%r13
  41fa19:	4c 39 ef             	cmp    %r13,%rdi
  41fa1c:	74 12                	je     41fa30 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x520>
  41fa1e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41fa25:	ff ff ff 
  41fa28:	49 89 df             	mov    %rbx,%r15
  41fa2b:	48 01 d8             	add    %rbx,%rax
  41fa2e:	ff d0                	callq  *%rax
  41fa30:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41fa35:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41fa3a:	48 83 c0 10          	add    $0x10,%rax
  41fa3e:	48 39 c7             	cmp    %rax,%rdi
  41fa41:	74 b5                	je     41f9f8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41fa43:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41fa4a:	ff ff ff 
  41fa4d:	49 89 df             	mov    %rbx,%r15
  41fa50:	48 01 d8             	add    %rbx,%rax
  41fa53:	ff d0                	callq  *%rax
  41fa55:	eb a1                	jmp    41f9f8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41fa57:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41fa5e:	00 
  41fa5f:	49 83 c6 10          	add    $0x10,%r14
  41fa63:	48 89 c5             	mov    %rax,%rbp
  41fa66:	4c 39 f7             	cmp    %r14,%rdi
  41fa69:	74 12                	je     41fa7d <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x56d>
  41fa6b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41fa72:	ff ff ff 
  41fa75:	49 89 df             	mov    %rbx,%r15
  41fa78:	48 01 d8             	add    %rbx,%rax
  41fa7b:	ff d0                	callq  *%rax
  41fa7d:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41fa82:	49 83 c5 10          	add    $0x10,%r13
  41fa86:	4c 39 ef             	cmp    %r13,%rdi
  41fa89:	74 12                	je     41fa9d <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x58d>
  41fa8b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41fa92:	ff ff ff 
  41fa95:	49 89 df             	mov    %rbx,%r15
  41fa98:	48 01 d8             	add    %rbx,%rax
  41fa9b:	ff d0                	callq  *%rax
  41fa9d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41faa2:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41faa7:	48 83 c0 10          	add    $0x10,%rax
  41faab:	48 39 c7             	cmp    %rax,%rdi
  41faae:	75 93                	jne    41fa43 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x533>
  41fab0:	e9 43 ff ff ff       	jmpq   41f9f8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41fab5:	48 89 c5             	mov    %rax,%rbp
  41fab8:	eb c3                	jmp    41fa7d <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x56d>
  41faba:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41fac1:	00 
  41fac2:	49 83 c6 10          	add    $0x10,%r14
  41fac6:	48 89 c5             	mov    %rax,%rbp
  41fac9:	4c 39 f7             	cmp    %r14,%rdi
  41facc:	74 12                	je     41fae0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x5d0>
  41face:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41fad5:	ff ff ff 
  41fad8:	49 89 df             	mov    %rbx,%r15
  41fadb:	48 01 d8             	add    %rbx,%rax
  41fade:	ff d0                	callq  *%rax
  41fae0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41fae5:	49 83 c5 10          	add    $0x10,%r13
  41fae9:	4c 39 ef             	cmp    %r13,%rdi
  41faec:	0f 85 51 ff ff ff    	jne    41fa43 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x533>
  41faf2:	e9 01 ff ff ff       	jmpq   41f9f8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41faf7:	48 89 c5             	mov    %rax,%rbp
  41fafa:	eb a1                	jmp    41fa9d <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x58d>
  41fafc:	48 89 c5             	mov    %rax,%rbp
  41faff:	eb df                	jmp    41fae0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x5d0>
  41fb01:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41fb08:	00 
  41fb09:	49 83 c6 10          	add    $0x10,%r14
  41fb0d:	48 89 c5             	mov    %rax,%rbp
  41fb10:	4c 39 f7             	cmp    %r14,%rdi
  41fb13:	0f 84 f7 fe ff ff    	je     41fa10 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x500>
  41fb19:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41fb20:	ff ff ff 
  41fb23:	49 89 df             	mov    %rbx,%r15
  41fb26:	48 01 d8             	add    %rbx,%rax
  41fb29:	ff d0                	callq  *%rax
  41fb2b:	e9 e0 fe ff ff       	jmpq   41fa10 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x500>
  41fb30:	48 89 c5             	mov    %rax,%rbp
  41fb33:	e9 f8 fe ff ff       	jmpq   41fa30 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x520>
  41fb38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41fb3f:	00 

000000000041fb40 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41fb40:	41 57                	push   %r15
  41fb42:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 41fb40 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
  41fb49:	41 56                	push   %r14
  41fb4b:	41 55                	push   %r13
  41fb4d:	41 54                	push   %r12
  41fb4f:	49 bb c0 b4 20 00 00 	movabs $0x20b4c0,%r11
  41fb56:	00 00 00 
  41fb59:	55                   	push   %rbp
  41fb5a:	53                   	push   %rbx
  41fb5b:	4d 01 df             	add    %r11,%r15
  41fb5e:	48 83 ec 18          	sub    $0x18,%rsp
      while (__x != 0)
  41fb62:	48 85 f6             	test   %rsi,%rsi
  41fb65:	0f 84 c5 00 00 00    	je     41fc30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xf0>
	  _M_erase(_S_right(__x));
  41fb6b:	48 ba 40 4b df ff ff 	movabs $0xffffffffffdf4b40,%rdx
  41fb72:	ff ff ff 
  41fb75:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  41fb7c:	ff ff ff 
  41fb7f:	49 89 fc             	mov    %rdi,%r12
  41fb82:	4e 8d 2c 3a          	lea    (%rdx,%r15,1),%r13
  41fb86:	48 ba 80 81 de ff ff 	movabs $0xffffffffffde8180,%rdx
  41fb8d:	ff ff ff 
  41fb90:	49 89 f6             	mov    %rsi,%r14
  41fb93:	49 8d 04 17          	lea    (%r15,%rdx,1),%rax
  41fb97:	4c 01 fb             	add    %r15,%rbx
  41fb9a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41fb9f:	eb 32                	jmp    41fbd3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x93>
  41fba1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            delete content;
  41fba8:	49 8b 7e 40          	mov    0x40(%r14),%rdi
  41fbac:	48 85 ff             	test   %rdi,%rdi
  41fbaf:	74 06                	je     41fbb7 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x77>
  41fbb1:	48 8b 17             	mov    (%rdi),%rdx
  41fbb4:	ff 52 08             	callq  *0x8(%rdx)
  41fbb7:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fbbb:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  41fbbf:	48 39 d7             	cmp    %rdx,%rdi
  41fbc2:	74 02                	je     41fbc6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x86>
  41fbc4:	ff d3                	callq  *%rbx
  41fbc6:	4c 89 f7             	mov    %r14,%rdi
  41fbc9:	49 89 ee             	mov    %rbp,%r14
  41fbcc:	ff d3                	callq  *%rbx
      while (__x != 0)
  41fbce:	48 85 ed             	test   %rbp,%rbp
  41fbd1:	74 5d                	je     41fc30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xf0>
	  _M_erase(_S_right(__x));
  41fbd3:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41fbd7:	4c 89 e7             	mov    %r12,%rdi
  41fbda:	41 ff d5             	callq  *%r13
  41fbdd:	49 8b 56 58          	mov    0x58(%r14),%rdx
  41fbe1:	49 8b 6e 10          	mov    0x10(%r14),%rbp
  41fbe5:	48 85 d2             	test   %rdx,%rdx
  41fbe8:	74 be                	je     41fba8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
        if( atomic_decrement( &use_count_ ) == 1 )
  41fbea:	f0 83 6a 08 01       	lock subl $0x1,0x8(%rdx)
  41fbef:	75 b7                	jne    41fba8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
            dispose();
  41fbf1:	48 8b 0a             	mov    (%rdx),%rcx
  41fbf4:	48 89 d7             	mov    %rdx,%rdi
  41fbf7:	48 89 14 24          	mov    %rdx,(%rsp)
  41fbfb:	ff 51 10             	callq  *0x10(%rcx)
      { return __atomic_fetch_sub(&_M_i, __i, __m); }
  41fbfe:	48 8b 14 24          	mov    (%rsp),%rdx
  41fc02:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  41fc07:	f0 0f c1 4a 0c       	lock xadd %ecx,0xc(%rdx)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41fc0c:	83 f9 01             	cmp    $0x1,%ecx
  41fc0f:	75 97                	jne    41fba8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
            destroy();
  41fc11:	48 8b 0a             	mov    (%rdx),%rcx
        delete this;
  41fc14:	48 89 d7             	mov    %rdx,%rdi
            destroy();
  41fc17:	48 8b 71 18          	mov    0x18(%rcx),%rsi
  41fc1b:	48 3b 74 24 08       	cmp    0x8(%rsp),%rsi
  41fc20:	75 1d                	jne    41fc3f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xff>
        delete this;
  41fc22:	ff 51 08             	callq  *0x8(%rcx)
  41fc25:	eb 81                	jmp    41fba8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
  41fc27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41fc2e:	00 00 
    }
  41fc30:	48 83 c4 18          	add    $0x18,%rsp
  41fc34:	5b                   	pop    %rbx
  41fc35:	5d                   	pop    %rbp
  41fc36:	41 5c                	pop    %r12
  41fc38:	41 5d                	pop    %r13
  41fc3a:	41 5e                	pop    %r14
  41fc3c:	41 5f                	pop    %r15
  41fc3e:	c3                   	retq   
            destroy();
  41fc3f:	ff d6                	callq  *%rsi
  41fc41:	e9 62 ff ff ff       	jmpq   41fba8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
  41fc46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41fc4d:	00 00 00 

000000000041fc50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41fc50:	41 57                	push   %r15
  41fc52:	41 56                	push   %r14
  41fc54:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 41fc50 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
  41fc5b:	41 55                	push   %r13
  41fc5d:	41 54                	push   %r12
  41fc5f:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41fc66:	ff ff ff 
  41fc69:	55                   	push   %rbp
  41fc6a:	53                   	push   %rbx
  41fc6b:	49 bb b0 b3 20 00 00 	movabs $0x20b3b0,%r11
  41fc72:	00 00 00 
  41fc75:	4d 01 df             	add    %r11,%r15
  41fc78:	48 83 ec 58          	sub    $0x58,%rsp
      while (__x != 0)
  41fc7c:	48 85 f6             	test   %rsi,%rsi
  41fc7f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41fc84:	48 b8 50 4c df ff ff 	movabs $0xffffffffffdf4c50,%rax
  41fc8b:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41fc8e:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
	  _M_erase(_S_right(__x));
  41fc93:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
      while (__x != 0)
  41fc97:	0f 84 a6 02 00 00    	je     41ff43 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2f3>
  41fc9d:	49 89 fe             	mov    %rdi,%r14
  41fca0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  41fca5:	48 8b 40 18          	mov    0x18(%rax),%rax
  41fca9:	48 85 c0             	test   %rax,%rax
  41fcac:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  41fcb1:	0f 84 4f 02 00 00    	je     41ff06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2b6>
  41fcb7:	48 8b 40 18          	mov    0x18(%rax),%rax
  41fcbb:	48 85 c0             	test   %rax,%rax
  41fcbe:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  41fcc3:	0f 84 fd 01 00 00    	je     41fec6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x276>
  41fcc9:	48 8b 40 18          	mov    0x18(%rax),%rax
  41fccd:	48 85 c0             	test   %rax,%rax
  41fcd0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  41fcd5:	0f 84 ab 01 00 00    	je     41fe86 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x236>
  41fcdb:	48 8b 40 18          	mov    0x18(%rax),%rax
  41fcdf:	48 85 c0             	test   %rax,%rax
  41fce2:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  41fce7:	0f 84 59 01 00 00    	je     41fe46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1f6>
  41fced:	48 8b 40 18          	mov    0x18(%rax),%rax
  41fcf1:	48 85 c0             	test   %rax,%rax
  41fcf4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41fcf9:	0f 84 07 01 00 00    	je     41fe06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1b6>
  41fcff:	48 8b 40 18          	mov    0x18(%rax),%rax
  41fd03:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  41fd08:	48 85 c0             	test   %rax,%rax
  41fd0b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41fd10:	4a 8d 2c 3a          	lea    (%rdx,%r15,1),%rbp
  41fd14:	0f 84 ac 00 00 00    	je     41fdc6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x176>
  41fd1a:	48 8b 40 18          	mov    0x18(%rax),%rax
  41fd1e:	48 85 c0             	test   %rax,%rax
  41fd21:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41fd26:	74 6e                	je     41fd96 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x146>
  41fd28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41fd2f:	00 
  41fd30:	4c 8b 68 18          	mov    0x18(%rax),%r13
  41fd34:	4d 85 ed             	test   %r13,%r13
  41fd37:	74 36                	je     41fd6f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x11f>
  41fd39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  41fd40:	4c 89 f7             	mov    %r14,%rdi
  41fd43:	49 8b 75 18          	mov    0x18(%r13),%rsi
  41fd47:	41 ff d4             	callq  *%r12
  41fd4a:	49 8b 7d 20          	mov    0x20(%r13),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fd4e:	49 8d 45 30          	lea    0x30(%r13),%rax
  41fd52:	49 8b 5d 10          	mov    0x10(%r13),%rbx
	if (!_M_is_local())
  41fd56:	48 39 c7             	cmp    %rax,%rdi
  41fd59:	74 02                	je     41fd5d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x10d>
  41fd5b:	ff d5                	callq  *%rbp
  41fd5d:	4c 89 ef             	mov    %r13,%rdi
  41fd60:	49 89 dd             	mov    %rbx,%r13
  41fd63:	ff d5                	callq  *%rbp
      while (__x != 0)
  41fd65:	48 85 db             	test   %rbx,%rbx
  41fd68:	75 d6                	jne    41fd40 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xf0>
  41fd6a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41fd6f:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fd73:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fd77:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fd7b:	48 39 c7             	cmp    %rax,%rdi
  41fd7e:	74 02                	je     41fd82 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x132>
  41fd80:	ff d5                	callq  *%rbp
  41fd82:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41fd87:	ff d5                	callq  *%rbp
  41fd89:	48 85 db             	test   %rbx,%rbx
  41fd8c:	48 89 d8             	mov    %rbx,%rax
  41fd8f:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  41fd94:	75 9a                	jne    41fd30 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xe0>
  41fd96:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41fd9b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fd9f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fda3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fda7:	48 39 c7             	cmp    %rax,%rdi
  41fdaa:	74 02                	je     41fdae <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x15e>
  41fdac:	ff d5                	callq  *%rbp
  41fdae:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41fdb3:	ff d5                	callq  *%rbp
  41fdb5:	48 85 db             	test   %rbx,%rbx
  41fdb8:	48 89 d8             	mov    %rbx,%rax
  41fdbb:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  41fdc0:	0f 85 54 ff ff ff    	jne    41fd1a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xca>
  41fdc6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41fdcb:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fdcf:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fdd3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fdd7:	48 39 c7             	cmp    %rax,%rdi
  41fdda:	74 0a                	je     41fde6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x196>
  41fddc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fde1:	4c 01 f8             	add    %r15,%rax
  41fde4:	ff d0                	callq  *%rax
  41fde6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fdeb:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41fdf0:	4c 01 f8             	add    %r15,%rax
  41fdf3:	ff d0                	callq  *%rax
  41fdf5:	48 85 db             	test   %rbx,%rbx
  41fdf8:	48 89 d8             	mov    %rbx,%rax
  41fdfb:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  41fe00:	0f 85 f9 fe ff ff    	jne    41fcff <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xaf>
  41fe06:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41fe0b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fe0f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fe13:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fe17:	48 39 c7             	cmp    %rax,%rdi
  41fe1a:	74 0a                	je     41fe26 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d6>
  41fe1c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fe21:	4c 01 f8             	add    %r15,%rax
  41fe24:	ff d0                	callq  *%rax
  41fe26:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fe2b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41fe30:	4c 01 f8             	add    %r15,%rax
  41fe33:	ff d0                	callq  *%rax
  41fe35:	48 85 db             	test   %rbx,%rbx
  41fe38:	48 89 d8             	mov    %rbx,%rax
  41fe3b:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  41fe40:	0f 85 a7 fe ff ff    	jne    41fced <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x9d>
  41fe46:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41fe4b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fe4f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fe53:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fe57:	48 39 c7             	cmp    %rax,%rdi
  41fe5a:	74 0a                	je     41fe66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x216>
  41fe5c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fe61:	4c 01 f8             	add    %r15,%rax
  41fe64:	ff d0                	callq  *%rax
  41fe66:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fe6b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41fe70:	4c 01 f8             	add    %r15,%rax
  41fe73:	ff d0                	callq  *%rax
  41fe75:	48 85 db             	test   %rbx,%rbx
  41fe78:	48 89 d8             	mov    %rbx,%rax
  41fe7b:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  41fe80:	0f 85 55 fe ff ff    	jne    41fcdb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x8b>
  41fe86:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41fe8b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fe8f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fe93:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fe97:	48 39 c7             	cmp    %rax,%rdi
  41fe9a:	74 0a                	je     41fea6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x256>
  41fe9c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fea1:	4c 01 f8             	add    %r15,%rax
  41fea4:	ff d0                	callq  *%rax
  41fea6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41feab:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  41feb0:	4c 01 f8             	add    %r15,%rax
  41feb3:	ff d0                	callq  *%rax
  41feb5:	48 85 db             	test   %rbx,%rbx
  41feb8:	48 89 d8             	mov    %rbx,%rax
  41febb:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  41fec0:	0f 85 03 fe ff ff    	jne    41fcc9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x79>
  41fec6:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41fecb:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fecf:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fed3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fed7:	48 39 c7             	cmp    %rax,%rdi
  41feda:	74 0a                	je     41fee6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x296>
  41fedc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fee1:	4c 01 f8             	add    %r15,%rax
  41fee4:	ff d0                	callq  *%rax
  41fee6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41feeb:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  41fef0:	4c 01 f8             	add    %r15,%rax
  41fef3:	ff d0                	callq  *%rax
  41fef5:	48 85 db             	test   %rbx,%rbx
  41fef8:	48 89 d8             	mov    %rbx,%rax
  41fefb:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  41ff00:	0f 85 b1 fd ff ff    	jne    41fcb7 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x67>
  41ff06:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  41ff0b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41ff0f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ff13:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41ff17:	48 39 c7             	cmp    %rax,%rdi
  41ff1a:	74 0a                	je     41ff26 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2d6>
  41ff1c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41ff21:	4c 01 f8             	add    %r15,%rax
  41ff24:	ff d0                	callq  *%rax
  41ff26:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41ff2b:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  41ff30:	4c 01 f8             	add    %r15,%rax
  41ff33:	ff d0                	callq  *%rax
  41ff35:	48 85 db             	test   %rbx,%rbx
  41ff38:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  41ff3d:	0f 85 5d fd ff ff    	jne    41fca0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x50>
    }
  41ff43:	48 83 c4 58          	add    $0x58,%rsp
  41ff47:	5b                   	pop    %rbx
  41ff48:	5d                   	pop    %rbp
  41ff49:	41 5c                	pop    %r12
  41ff4b:	41 5d                	pop    %r13
  41ff4d:	41 5e                	pop    %r14
  41ff4f:	41 5f                	pop    %r15
  41ff51:	c3                   	retq   
  41ff52:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ff59:	00 00 00 
  41ff5c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041ff60 <_ZN5boost15program_options13variables_mapD0Ev>:
    /** Concrete variables map which store variables in real map.

        This class is derived from std::map<std::string, variable_value>,
        so you can use all map operators to examine its content.
    */
    class BOOST_PROGRAM_OPTIONS_DECL variables_map : public abstract_variables_map,
  41ff60:	41 57                	push   %r15
  41ff62:	41 56                	push   %r14
  41ff64:	49 bb a0 b0 20 00 00 	movabs $0x20b0a0,%r11
  41ff6b:	00 00 00 
  41ff6e:	41 55                	push   %r13
  41ff70:	41 54                	push   %r12
  41ff72:	48 b8 d0 ff ff ff ff 	movabs $0xffffffffffffffd0,%rax
  41ff79:	ff ff ff 
  41ff7c:	55                   	push   %rbp
  41ff7d:	53                   	push   %rbx
  41ff7e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 41ff60 <_ZN5boost15program_options13variables_mapD0Ev>
  41ff85:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  41ff8c:	ff ff ff 
	  _M_erase(_S_right(__x));
  41ff8f:	48 ba 60 c6 de ff ff 	movabs $0xffffffffffdec660,%rdx
  41ff96:	ff ff ff 
  41ff99:	4c 01 db             	add    %r11,%rbx
  41ff9c:	48 83 ec 28          	sub    $0x28,%rsp
  41ffa0:	4c 8b b7 80 00 00 00 	mov    0x80(%rdi),%r14
  41ffa7:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  41ffab:	48 01 dd             	add    %rbx,%rbp
  41ffae:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  41ffb3:	4c 8d 2c 1a          	lea    (%rdx,%rbx,1),%r13
  41ffb7:	48 83 c0 10          	add    $0x10,%rax
      while (__x != 0)
  41ffbb:	4d 85 f6             	test   %r14,%r14
  41ffbe:	48 89 07             	mov    %rax,(%rdi)
    class map
  41ffc1:	48 8d 47 70          	lea    0x70(%rdi),%rax
  41ffc5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41ffca:	74 48                	je     420014 <_ZN5boost15program_options13variables_mapD0Ev+0xb4>
  41ffcc:	0f 1f 40 00          	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  41ffd0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41ffd5:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41ffd9:	41 ff d5             	callq  *%r13
  41ffdc:	49 8b 7e 40          	mov    0x40(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ffe0:	49 8d 56 50          	lea    0x50(%r14),%rdx
  41ffe4:	4d 8b 66 10          	mov    0x10(%r14),%r12
	if (!_M_is_local())
  41ffe8:	48 39 d7             	cmp    %rdx,%rdi
  41ffeb:	74 05                	je     41fff2 <_ZN5boost15program_options13variables_mapD0Ev+0x92>
  41ffed:	49 89 df             	mov    %rbx,%r15
  41fff0:	ff d5                	callq  *%rbp
  41fff2:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fff6:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  41fffa:	48 39 d7             	cmp    %rdx,%rdi
  41fffd:	74 05                	je     420004 <_ZN5boost15program_options13variables_mapD0Ev+0xa4>
  41ffff:	49 89 df             	mov    %rbx,%r15
  420002:	ff d5                	callq  *%rbp
  420004:	4c 89 f7             	mov    %r14,%rdi
  420007:	49 89 df             	mov    %rbx,%r15
  42000a:	4d 89 e6             	mov    %r12,%r14
  42000d:	ff d5                	callq  *%rbp
      while (__x != 0)
  42000f:	4d 85 e4             	test   %r12,%r12
  420012:	75 bc                	jne    41ffd0 <_ZN5boost15program_options13variables_mapD0Ev+0x70>
    class set
  420014:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  420019:	48 8d 48 40          	lea    0x40(%rax),%rcx
  42001d:	48 8b 40 50          	mov    0x50(%rax),%rax
  420021:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  420026:	48 85 c0             	test   %rax,%rax
  420029:	74 57                	je     420082 <_ZN5boost15program_options13variables_mapD0Ev+0x122>
  42002b:	48 ba 50 4c df ff ff 	movabs $0xffffffffffdf4c50,%rdx
  420032:	ff ff ff 
  420035:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  42003c:	ff ff ff 
  42003f:	49 89 c6             	mov    %rax,%r14
	  _M_erase(_S_right(__x));
  420042:	4c 8d 2c 1a          	lea    (%rdx,%rbx,1),%r13
  420046:	48 01 dd             	add    %rbx,%rbp
  420049:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  420050:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  420055:	49 8b 76 18          	mov    0x18(%r14),%rsi
  420059:	41 ff d5             	callq  *%r13
  42005c:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  420060:	49 8d 56 30          	lea    0x30(%r14),%rdx
  420064:	4d 8b 66 10          	mov    0x10(%r14),%r12
	if (!_M_is_local())
  420068:	48 39 d7             	cmp    %rdx,%rdi
  42006b:	74 05                	je     420072 <_ZN5boost15program_options13variables_mapD0Ev+0x112>
  42006d:	49 89 df             	mov    %rbx,%r15
  420070:	ff d5                	callq  *%rbp
  420072:	4c 89 f7             	mov    %r14,%rdi
  420075:	49 89 df             	mov    %rbx,%r15
  420078:	4d 89 e6             	mov    %r12,%r14
  42007b:	ff d5                	callq  *%rbp
      while (__x != 0)
  42007d:	4d 85 e4             	test   %r12,%r12
  420080:	75 ce                	jne    420050 <_ZN5boost15program_options13variables_mapD0Ev+0xf0>
  420082:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  420087:	48 8d 48 10          	lea    0x10(%rax),%rcx
  42008b:	48 8b 40 20          	mov    0x20(%rax),%rax
  42008f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  420094:	48 85 c0             	test   %rax,%rax
  420097:	0f 84 b3 00 00 00    	je     420150 <_ZN5boost15program_options13variables_mapD0Ev+0x1f0>
  42009d:	48 ba 40 4b df ff ff 	movabs $0xffffffffffdf4b40,%rdx
  4200a4:	ff ff ff 
  4200a7:	49 89 c6             	mov    %rax,%r14
  4200aa:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  4200b1:	ff ff ff 
	  _M_erase(_S_right(__x));
  4200b4:	4c 8d 2c 1a          	lea    (%rdx,%rbx,1),%r13
  4200b8:	48 ba 80 81 de ff ff 	movabs $0xffffffffffde8180,%rdx
  4200bf:	ff ff ff 
  4200c2:	48 01 dd             	add    %rbx,%rbp
  4200c5:	48 8d 04 13          	lea    (%rbx,%rdx,1),%rax
  4200c9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  4200ce:	eb 31                	jmp    420101 <_ZN5boost15program_options13variables_mapD0Ev+0x1a1>
  4200d0:	49 8b 7e 40          	mov    0x40(%r14),%rdi
  4200d4:	48 85 ff             	test   %rdi,%rdi
  4200d7:	74 06                	je     4200df <_ZN5boost15program_options13variables_mapD0Ev+0x17f>
  4200d9:	48 8b 17             	mov    (%rdi),%rdx
  4200dc:	ff 52 08             	callq  *0x8(%rdx)
  4200df:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4200e3:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  4200e7:	48 39 d7             	cmp    %rdx,%rdi
  4200ea:	74 05                	je     4200f1 <_ZN5boost15program_options13variables_mapD0Ev+0x191>
  4200ec:	49 89 df             	mov    %rbx,%r15
  4200ef:	ff d5                	callq  *%rbp
  4200f1:	4c 89 f7             	mov    %r14,%rdi
  4200f4:	49 89 df             	mov    %rbx,%r15
  4200f7:	4d 89 e6             	mov    %r12,%r14
  4200fa:	ff d5                	callq  *%rbp
      while (__x != 0)
  4200fc:	4d 85 e4             	test   %r12,%r12
  4200ff:	74 4f                	je     420150 <_ZN5boost15program_options13variables_mapD0Ev+0x1f0>
	  _M_erase(_S_right(__x));
  420101:	49 8b 76 18          	mov    0x18(%r14),%rsi
  420105:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  42010a:	41 ff d5             	callq  *%r13
  42010d:	4d 8b 7e 58          	mov    0x58(%r14),%r15
  420111:	4d 8b 66 10          	mov    0x10(%r14),%r12
  420115:	4d 85 ff             	test   %r15,%r15
  420118:	74 b6                	je     4200d0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
        if( atomic_decrement( &use_count_ ) == 1 )
  42011a:	f0 41 83 6f 08 01    	lock subl $0x1,0x8(%r15)
  420120:	75 ae                	jne    4200d0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
            dispose();
  420122:	49 8b 17             	mov    (%r15),%rdx
  420125:	4c 89 ff             	mov    %r15,%rdi
  420128:	ff 52 10             	callq  *0x10(%rdx)
        if( atomic_decrement( &weak_count_ ) == 1 )
  42012b:	f0 41 83 6f 0c 01    	lock subl $0x1,0xc(%r15)
  420131:	75 9d                	jne    4200d0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
            destroy();
  420133:	49 8b 17             	mov    (%r15),%rdx
        delete this;
  420136:	4c 89 ff             	mov    %r15,%rdi
            destroy();
  420139:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  42013d:	48 3b 4c 24 18       	cmp    0x18(%rsp),%rcx
  420142:	75 33                	jne    420177 <_ZN5boost15program_options13variables_mapD0Ev+0x217>
        delete this;
  420144:	ff 52 08             	callq  *0x8(%rdx)
  420147:	eb 87                	jmp    4200d0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
  420149:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  420150:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  420155:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  42015c:	ff ff ff 
  42015f:	48 83 c4 28          	add    $0x28,%rsp
  420163:	48 01 d8             	add    %rbx,%rax
  420166:	be a0 00 00 00       	mov    $0xa0,%esi
  42016b:	5b                   	pop    %rbx
  42016c:	5d                   	pop    %rbp
  42016d:	41 5c                	pop    %r12
  42016f:	41 5d                	pop    %r13
  420171:	41 5e                	pop    %r14
  420173:	41 5f                	pop    %r15
  420175:	ff e0                	jmpq   *%rax
            destroy();
  420177:	ff d1                	callq  *%rcx
  420179:	e9 52 ff ff ff       	jmpq   4200d0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
  42017e:	66 90                	xchg   %ax,%ax

0000000000420180 <_ZN5boost15program_options13variables_mapD1Ev>:
  420180:	41 57                	push   %r15
  420182:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 420180 <_ZN5boost15program_options13variables_mapD1Ev>
  420189:	41 56                	push   %r14
  42018b:	49 bb 80 ae 20 00 00 	movabs $0x20ae80,%r11
  420192:	00 00 00 
  420195:	41 55                	push   %r13
  420197:	41 54                	push   %r12
  420199:	55                   	push   %rbp
  42019a:	53                   	push   %rbx
  42019b:	4d 01 df             	add    %r11,%r15
  42019e:	48 b8 d0 ff ff ff ff 	movabs $0xffffffffffffffd0,%rax
  4201a5:	ff ff ff 
  4201a8:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  4201af:	ff ff ff 
  4201b2:	48 ba 60 c6 de ff ff 	movabs $0xffffffffffdec660,%rdx
  4201b9:	ff ff ff 
  4201bc:	48 83 ec 18          	sub    $0x18,%rsp
  4201c0:	49 8b 04 07          	mov    (%r15,%rax,1),%rax
  4201c4:	4c 8b b7 80 00 00 00 	mov    0x80(%rdi),%r14
  4201cb:	4c 01 fb             	add    %r15,%rbx
  4201ce:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  4201d3:	4e 8d 24 3a          	lea    (%rdx,%r15,1),%r12
  4201d7:	4c 8d 6f 70          	lea    0x70(%rdi),%r13
  4201db:	48 83 c0 10          	add    $0x10,%rax
      while (__x != 0)
  4201df:	4d 85 f6             	test   %r14,%r14
  4201e2:	48 89 07             	mov    %rax,(%rdi)
  4201e5:	74 42                	je     420229 <_ZN5boost15program_options13variables_mapD1Ev+0xa9>
  4201e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4201ee:	00 00 
	  _M_erase(_S_right(__x));
  4201f0:	4c 89 ef             	mov    %r13,%rdi
  4201f3:	49 8b 76 18          	mov    0x18(%r14),%rsi
  4201f7:	41 ff d4             	callq  *%r12
  4201fa:	49 8b 7e 40          	mov    0x40(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4201fe:	49 8d 56 50          	lea    0x50(%r14),%rdx
  420202:	49 8b 6e 10          	mov    0x10(%r14),%rbp
	if (!_M_is_local())
  420206:	48 39 d7             	cmp    %rdx,%rdi
  420209:	74 02                	je     42020d <_ZN5boost15program_options13variables_mapD1Ev+0x8d>
  42020b:	ff d3                	callq  *%rbx
  42020d:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  420211:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  420215:	48 39 d7             	cmp    %rdx,%rdi
  420218:	74 02                	je     42021c <_ZN5boost15program_options13variables_mapD1Ev+0x9c>
  42021a:	ff d3                	callq  *%rbx
  42021c:	4c 89 f7             	mov    %r14,%rdi
  42021f:	49 89 ee             	mov    %rbp,%r14
  420222:	ff d3                	callq  *%rbx
      while (__x != 0)
  420224:	48 85 ed             	test   %rbp,%rbp
  420227:	75 c7                	jne    4201f0 <_ZN5boost15program_options13variables_mapD1Ev+0x70>
  420229:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  42022e:	4c 8d 60 40          	lea    0x40(%rax),%r12
  420232:	48 8b 40 50          	mov    0x50(%rax),%rax
  420236:	48 85 c0             	test   %rax,%rax
  420239:	74 4f                	je     42028a <_ZN5boost15program_options13variables_mapD1Ev+0x10a>
  42023b:	48 ba 50 4c df ff ff 	movabs $0xffffffffffdf4c50,%rdx
  420242:	ff ff ff 
  420245:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  42024c:	ff ff ff 
  42024f:	49 89 c6             	mov    %rax,%r14
	  _M_erase(_S_right(__x));
  420252:	4e 8d 2c 3a          	lea    (%rdx,%r15,1),%r13
  420256:	4c 01 fb             	add    %r15,%rbx
  420259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  420260:	4c 89 e7             	mov    %r12,%rdi
  420263:	49 8b 76 18          	mov    0x18(%r14),%rsi
  420267:	41 ff d5             	callq  *%r13
  42026a:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  42026e:	49 8d 56 30          	lea    0x30(%r14),%rdx
  420272:	49 8b 6e 10          	mov    0x10(%r14),%rbp
	if (!_M_is_local())
  420276:	48 39 d7             	cmp    %rdx,%rdi
  420279:	74 02                	je     42027d <_ZN5boost15program_options13variables_mapD1Ev+0xfd>
  42027b:	ff d3                	callq  *%rbx
  42027d:	4c 89 f7             	mov    %r14,%rdi
  420280:	49 89 ee             	mov    %rbp,%r14
  420283:	ff d3                	callq  *%rbx
      while (__x != 0)
  420285:	48 85 ed             	test   %rbp,%rbp
  420288:	75 d6                	jne    420260 <_ZN5boost15program_options13variables_mapD1Ev+0xe0>
      { _M_erase(_M_begin()); }
  42028a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  42028f:	48 8b 70 20          	mov    0x20(%rax),%rsi
  420293:	48 8d 78 10          	lea    0x10(%rax),%rdi
  420297:	48 83 c4 18          	add    $0x18,%rsp
  42029b:	48 b8 40 4b df ff ff 	movabs $0xffffffffffdf4b40,%rax
  4202a2:	ff ff ff 
  4202a5:	5b                   	pop    %rbx
  4202a6:	4c 01 f8             	add    %r15,%rax
  4202a9:	5d                   	pop    %rbp
  4202aa:	41 5c                	pop    %r12
  4202ac:	41 5d                	pop    %r13
  4202ae:	41 5e                	pop    %r14
  4202b0:	41 5f                	pop    %r15
  4202b2:	ff e0                	jmpq   *%rax
  4202b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4202bb:	00 00 00 
  4202be:	66 90                	xchg   %ax,%ax

00000000004202c0 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_>:
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  4202c0:	41 57                	push   %r15
  4202c2:	41 56                	push   %r14
  4202c4:	49 bb 40 ad 20 00 00 	movabs $0x20ad40,%r11
  4202cb:	00 00 00 
  4202ce:	41 55                	push   %r13
  4202d0:	41 54                	push   %r12
  4202d2:	49 89 fd             	mov    %rdi,%r13
  4202d5:	55                   	push   %rbp
  4202d6:	53                   	push   %rbx
  4202d7:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 4202c0 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_>
    throw enable_current_exception(enable_error_info(e));
  4202de:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  4202e5:	ff ff ff 
  4202e8:	bf 40 00 00 00       	mov    $0x40,%edi
  4202ed:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  4202f0:	48 83 ec 48          	sub    $0x48,%rsp
    throw enable_current_exception(enable_error_info(e));
  4202f4:	49 89 df             	mov    %rbx,%r15
  4202f7:	48 01 d8             	add    %rbx,%rax
class bad_function_call : public std::runtime_error
  4202fa:	49 89 e4             	mov    %rsp,%r12
  4202fd:	ff d0                	callq  *%rax
  4202ff:	4c 89 ee             	mov    %r13,%rsi
  420302:	49 bd 60 e8 dd ff ff 	movabs $0xffffffffffdde860,%r13
  420309:	ff ff ff 
  42030c:	48 89 c5             	mov    %rax,%rbp
  42030f:	49 01 dd             	add    %rbx,%r13
  420312:	48 89 e7             	mov    %rsp,%rdi
  420315:	41 ff d5             	callq  *%r13
                T(x)
  420318:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  42031f:	ff ff ff 
  420322:	48 89 ef             	mov    %rbp,%rdi
                px_(0)
  420325:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  42032c:	00 00 
                T(x)
  42032e:	48 01 d8             	add    %rbx,%rax
            throw_line_(-1)
  420331:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  420338:	00 00 
  42033a:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  420341:	00 00 
                T(x)
  420343:	48 89 04 24          	mov    %rax,(%rsp)
  420347:	48 83 c0 28          	add    $0x28,%rax
            throw_line_(-1)
  42034b:	c7 44 24 30 ff ff ff 	movl   $0xffffffff,0x30(%rsp)
  420352:	ff 
                T(x)
  420353:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        clone_base
  420358:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  42035f:	ff ff ff 
  420362:	48 89 e6             	mov    %rsp,%rsi
  420365:	48 01 d8             	add    %rbx,%rax
  420368:	48 89 45 38          	mov    %rax,0x38(%rbp)
  42036c:	41 ff d5             	callq  *%r13
  42036f:	49 bd 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%r13
  420376:	ff ff ff 
                px_(x.px_)
  420379:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  42037e:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  420383:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  420387:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  42038e:	ff ff ff 
                px_(x.px_)
  420391:	48 89 7d 18          	mov    %rdi,0x18(%rbp)
    exception
  420395:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  420398:	48 85 ff             	test   %rdi,%rdi
    exception
  42039b:	48 89 45 10          	mov    %rax,0x10(%rbp)
                if( px_ )
  42039f:	74 06                	je     4203a7 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_+0xe7>
                    px_->add_ref();
  4203a1:	48 8b 07             	mov    (%rdi),%rax
  4203a4:	ff 50 18             	callq  *0x18(%rax)
    exception
  4203a7:	8b 44 24 30          	mov    0x30(%rsp),%eax
                copy_boost_exception(this,&x);
  4203ab:	49 8d 74 24 10       	lea    0x10(%r12),%rsi
  4203b0:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
    exception
  4203b4:	66 0f 6f 44 24 20    	movdqa 0x20(%rsp),%xmm0
  4203ba:	89 45 30             	mov    %eax,0x30(%rbp)
                T(x)
  4203bd:	48 b8 20 f3 ff ff ff 	movabs $0xfffffffffffff320,%rax
  4203c4:	ff ff ff 
  4203c7:	48 01 d8             	add    %rbx,%rax
  4203ca:	48 8d 50 38          	lea    0x38(%rax),%rdx
  4203ce:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4203d2:	48 83 c0 70          	add    $0x70,%rax
  4203d6:	48 89 45 38          	mov    %rax,0x38(%rbp)
                copy_boost_exception(this,&x);
  4203da:	48 b8 40 a6 de ff ff 	movabs $0xffffffffffdea640,%rax
  4203e1:	ff ff ff 
    exception
  4203e4:	0f 11 45 20          	movups %xmm0,0x20(%rbp)
                T(x)
  4203e8:	48 89 55 10          	mov    %rdx,0x10(%rbp)
                copy_boost_exception(this,&x);
  4203ec:	48 01 d8             	add    %rbx,%rax
  4203ef:	ff d0                	callq  *%rax
  4203f1:	48 b8 00 8f de ff ff 	movabs $0xffffffffffde8f00,%rax
  4203f8:	ff ff ff 
  4203fb:	4c 89 e7             	mov    %r12,%rdi
  4203fe:	49 89 df             	mov    %rbx,%r15
  420401:	48 01 d8             	add    %rbx,%rax
  420404:	ff d0                	callq  *%rax
  420406:	48 b8 50 9f de ff ff 	movabs $0xffffffffffde9f50,%rax
  42040d:	ff ff ff 
  420410:	48 89 ef             	mov    %rbp,%rdi
  420413:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  420417:	48 b8 78 f1 ff ff ff 	movabs $0xfffffffffffff178,%rax
  42041e:	ff ff ff 
  420421:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  420425:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  42042c:	ff ff ff 
  42042f:	48 01 d8             	add    %rbx,%rax
  420432:	ff d0                	callq  *%rax
  420434:	49 8d 54 1d 00       	lea    0x0(%r13,%rbx,1),%rdx
  420439:	49 89 c6             	mov    %rax,%r14
  42043c:	48 89 ef             	mov    %rbp,%rdi
  42043f:	4d 89 f5             	mov    %r14,%r13
  420442:	49 89 df             	mov    %rbx,%r15
  420445:	48 89 55 00          	mov    %rdx,0x0(%rbp)
  420449:	48 ba 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rdx
  420450:	ff ff ff 
  420453:	48 01 da             	add    %rbx,%rdx
  420456:	ff d2                	callq  *%rdx
  420458:	48 b8 00 8f de ff ff 	movabs $0xffffffffffde8f00,%rax
  42045f:	ff ff ff 
  420462:	4c 89 e7             	mov    %r12,%rdi
  420465:	49 89 df             	mov    %rbx,%r15
  420468:	48 01 d8             	add    %rbx,%rax
  42046b:	ff d0                	callq  *%rax
  42046d:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  420474:	ff ff ff 
  420477:	48 89 ef             	mov    %rbp,%rdi
  42047a:	48 01 d8             	add    %rbx,%rax
  42047d:	ff d0                	callq  *%rax
  42047f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  420486:	ff ff ff 
  420489:	4c 89 ef             	mov    %r13,%rdi
  42048c:	48 01 d8             	add    %rbx,%rax
  42048f:	ff d0                	callq  *%rax
  420491:	49 89 c5             	mov    %rax,%r13
                T(x)
  420494:	48 b8 00 8f de ff ff 	movabs $0xffffffffffde8f00,%rax
  42049b:	ff ff ff 
  42049e:	48 89 ef             	mov    %rbp,%rdi
  4204a1:	48 01 d8             	add    %rbx,%rax
  4204a4:	ff d0                	callq  *%rax
  4204a6:	eb b0                	jmp    420458 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_+0x198>
  4204a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4204af:	00 

00000000004204b0 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE>:
    typed_value<T, charT>::notify(const boost::any& value_store) const
  4204b0:	41 57                	push   %r15
  4204b2:	41 54                	push   %r12
  4204b4:	49 bb 50 ab 20 00 00 	movabs $0x20ab50,%r11
  4204bb:	00 00 00 
  4204be:	55                   	push   %rbp
  4204bf:	53                   	push   %rbx
  4204c0:	48 89 fd             	mov    %rdi,%rbp
  4204c3:	48 8d 1d e6 ff ff ff 	lea    -0x1a(%rip),%rbx        # 4204b0 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE>
  4204ca:	49 89 f4             	mov    %rsi,%r12
  4204cd:	48 83 ec 08          	sub    $0x8,%rsp
            return content ? content->type() : boost::typeindex::type_id<void>().type_info();
  4204d1:	48 8b 3e             	mov    (%rsi),%rdi
  4204d4:	4c 01 db             	add    %r11,%rbx
  4204d7:	48 85 ff             	test   %rdi,%rdi
  4204da:	0f 84 a8 00 00 00    	je     420588 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xd8>
  4204e0:	48 8b 07             	mov    (%rdi),%rax
  4204e3:	48 ba 00 83 de ff ff 	movabs $0xffffffffffde8300,%rdx
  4204ea:	ff ff ff 
  4204ed:	48 01 da             	add    %rbx,%rdx
  4204f0:	48 8b 40 10          	mov    0x10(%rax),%rax
  4204f4:	48 39 d0             	cmp    %rdx,%rax
  4204f7:	0f 85 bb 00 00 00    	jne    4205b8 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x108>
  4204fd:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  420504:	ff ff ff 
  420507:	48 8b 04 1a          	mov    (%rdx,%rbx,1),%rax
  42050b:	48 8b 78 08          	mov    0x8(%rax),%rdi
  42050f:	48 8b 04 1a          	mov    (%rdx,%rbx,1),%rax
  420513:	48 8b 70 08          	mov    0x8(%rax),%rsi
	: __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    {
      return ((__name == __arg.__name)
	      || (__name[0] != '*' &&
  420517:	48 39 f7             	cmp    %rsi,%rdi
  42051a:	74 5c                	je     420578 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xc8>
  42051c:	80 3f 2a             	cmpb   $0x2a,(%rdi)
  42051f:	74 16                	je     420537 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x87>
		  __builtin_strcmp (__name, __arg.__name) == 0));
  420521:	48 b8 c0 e8 dd ff ff 	movabs $0xffffffffffdde8c0,%rax
  420528:	ff ff ff 
  42052b:	49 89 df             	mov    %rbx,%r15
  42052e:	48 01 d8             	add    %rbx,%rax
  420531:	ff d0                	callq  *%rax
	      || (__name[0] != '*' &&
  420533:	85 c0                	test   %eax,%eax
  420535:	74 41                	je     420578 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xc8>

    template<typename ValueType>
    ValueType * any_cast(any * operand) BOOST_NOEXCEPT
    {
        return operand && operand->type() == boost::typeindex::type_id<ValueType>()
            ? boost::addressof(
  420537:	31 f6                	xor    %esi,%esi
        if (m_store_to) {
  420539:	48 8b 45 10          	mov    0x10(%rbp),%rax
  42053d:	48 85 c0             	test   %rax,%rax
  420540:	74 08                	je     42054a <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x9a>
            *m_store_to = *value;
  420542:	f3 0f 10 06          	movss  (%rsi),%xmm0
  420546:	f3 0f 11 00          	movss  %xmm0,(%rax)
  42054a:	48 8b 85 90 00 00 00 	mov    0x90(%rbp),%rax
      { return (this->empty())? 0 : &dummy::nonnull; }
  420551:	48 85 c0             	test   %rax,%rax
  420554:	74 52                	je     4205a8 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xf8>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  420556:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
      return get_vtable()->invoker
  42055a:	48 8d bd 98 00 00 00 	lea    0x98(%rbp),%rdi
               (this->functor BOOST_FUNCTION_COMMA BOOST_FUNCTION_ARGS);
  420561:	48 8b 40 08          	mov    0x8(%rax),%rax
    }
  420565:	48 83 c4 08          	add    $0x8,%rsp
  420569:	5b                   	pop    %rbx
  42056a:	5d                   	pop    %rbp
  42056b:	41 5c                	pop    %r12
  42056d:	41 5f                	pop    %r15
  42056f:	ff e0                	jmpq   *%rax
  420571:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  420578:	49 8b 34 24          	mov    (%r12),%rsi
  42057c:	48 83 c6 08          	add    $0x8,%rsi
  420580:	eb b7                	jmp    420539 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x89>
  420582:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            return content ? content->type() : boost::typeindex::type_id<void>().type_info();
  420588:	48 b8 a0 ff ff ff ff 	movabs $0xffffffffffffffa0,%rax
  42058f:	ff ff ff 
  420592:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  420599:	ff ff ff 
  42059c:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4205a0:	e9 66 ff ff ff       	jmpq   42050b <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x5b>
  4205a5:	0f 1f 00             	nopl   (%rax)
  4205a8:	48 83 c4 08          	add    $0x8,%rsp
  4205ac:	5b                   	pop    %rbx
  4205ad:	5d                   	pop    %rbp
  4205ae:	41 5c                	pop    %r12
  4205b0:	41 5f                	pop    %r15
  4205b2:	c3                   	retq   
  4205b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4205b8:	ff d0                	callq  *%rax
  4205ba:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  4205c1:	ff ff ff 
  4205c4:	e9 42 ff ff ff       	jmpq   42050b <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x5b>
  4205c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004205d0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE>:
    typed_value<T, charT>::notify(const boost::any& value_store) const
  4205d0:	41 57                	push   %r15
  4205d2:	41 54                	push   %r12
  4205d4:	49 bb 30 aa 20 00 00 	movabs $0x20aa30,%r11
  4205db:	00 00 00 
  4205de:	55                   	push   %rbp
  4205df:	53                   	push   %rbx
  4205e0:	48 89 fd             	mov    %rdi,%rbp
  4205e3:	48 8d 1d e6 ff ff ff 	lea    -0x1a(%rip),%rbx        # 4205d0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE>
  4205ea:	49 89 f4             	mov    %rsi,%r12
  4205ed:	48 83 ec 08          	sub    $0x8,%rsp
  4205f1:	48 8b 3e             	mov    (%rsi),%rdi
  4205f4:	4c 01 db             	add    %r11,%rbx
  4205f7:	48 85 ff             	test   %rdi,%rdi
  4205fa:	0f 84 b0 00 00 00    	je     4206b0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xe0>
  420600:	48 8b 07             	mov    (%rdi),%rax
  420603:	48 ba 00 83 de ff ff 	movabs $0xffffffffffde8300,%rdx
  42060a:	ff ff ff 
  42060d:	48 01 da             	add    %rbx,%rdx
  420610:	48 8b 40 10          	mov    0x10(%rax),%rax
  420614:	48 39 d0             	cmp    %rdx,%rax
  420617:	0f 85 bb 00 00 00    	jne    4206d8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x108>
  42061d:	48 b8 b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rax
  420624:	ff ff ff 
  420627:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  42062b:	48 8b 70 08          	mov    0x8(%rax),%rsi
  42062f:	48 b8 60 94 df ff ff 	movabs $0xffffffffffdf9460,%rax
  420636:	ff ff ff 
  420639:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  42063d:	48 39 fe             	cmp    %rdi,%rsi
  420640:	74 5e                	je     4206a0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xd0>
  420642:	80 3e 2a             	cmpb   $0x2a,(%rsi)
  420645:	74 09                	je     420650 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x80>
		  __builtin_strcmp (__name, __arg.__name) == 0));
  420647:	b9 35 00 00 00       	mov    $0x35,%ecx
	      || (__name[0] != '*' &&
  42064c:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  42064e:	74 50                	je     4206a0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xd0>
            ? boost::addressof(
  420650:	45 31 e4             	xor    %r12d,%r12d
        if (m_store_to) {
  420653:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  420657:	48 85 ff             	test   %rdi,%rdi
  42065a:	74 15                	je     420671 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xa1>
	this->_M_assign(__str);
  42065c:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  420663:	ff ff ff 
  420666:	4c 89 e6             	mov    %r12,%rsi
  420669:	49 89 df             	mov    %rbx,%r15
  42066c:	48 01 d8             	add    %rbx,%rax
  42066f:	ff d0                	callq  *%rax
  420671:	48 8b 85 90 00 00 00 	mov    0x90(%rbp),%rax
      { return (this->empty())? 0 : &dummy::nonnull; }
  420678:	48 85 c0             	test   %rax,%rax
  42067b:	74 4b                	je     4206c8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xf8>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  42067d:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
      return get_vtable()->invoker
  420681:	48 8d bd 98 00 00 00 	lea    0x98(%rbp),%rdi
               (this->functor BOOST_FUNCTION_COMMA BOOST_FUNCTION_ARGS);
  420688:	4c 89 e6             	mov    %r12,%rsi
  42068b:	48 8b 40 08          	mov    0x8(%rax),%rax
    }
  42068f:	48 83 c4 08          	add    $0x8,%rsp
  420693:	5b                   	pop    %rbx
  420694:	5d                   	pop    %rbp
  420695:	41 5c                	pop    %r12
  420697:	41 5f                	pop    %r15
  420699:	ff e0                	jmpq   *%rax
  42069b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4206a0:	4d 8b 24 24          	mov    (%r12),%r12
  4206a4:	49 83 c4 08          	add    $0x8,%r12
  4206a8:	eb a9                	jmp    420653 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x83>
  4206aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            return content ? content->type() : boost::typeindex::type_id<void>().type_info();
  4206b0:	48 b8 a0 ff ff ff ff 	movabs $0xffffffffffffffa0,%rax
  4206b7:	ff ff ff 
  4206ba:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4206be:	e9 68 ff ff ff       	jmpq   42062b <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x5b>
  4206c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4206c8:	48 83 c4 08          	add    $0x8,%rsp
  4206cc:	5b                   	pop    %rbx
  4206cd:	5d                   	pop    %rbp
  4206ce:	41 5c                	pop    %r12
  4206d0:	41 5f                	pop    %r15
  4206d2:	c3                   	retq   
  4206d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4206d8:	ff d0                	callq  *%rax
  4206da:	e9 4c ff ff ff       	jmpq   42062b <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x5b>
  4206df:	90                   	nop

00000000004206e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_>:
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
  4206e0:	41 57                	push   %r15
  4206e2:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 4206e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_>
  4206e9:	41 56                	push   %r14
  4206eb:	41 55                	push   %r13
  4206ed:	41 54                	push   %r12
  4206ef:	49 bb 20 a9 20 00 00 	movabs $0x20a920,%r11
  4206f6:	00 00 00 
  4206f9:	55                   	push   %rbp
  4206fa:	53                   	push   %rbx
  4206fb:	4c 01 d8             	add    %r11,%rax
  4206fe:	48 89 f3             	mov    %rsi,%rbx
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  420701:	49 bd 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%r13
  420708:	ff ff ff 
  42070b:	49 89 c7             	mov    %rax,%r15
  42070e:	48 83 ec 38          	sub    $0x38,%rsp
  420712:	49 89 d4             	mov    %rdx,%r12
          _M_construct(__beg, __end, _Tag());
  420715:	49 be 10 2c de ff ff 	movabs $0xffffffffffde2c10,%r14
  42071c:	ff ff ff 
  42071f:	48 89 04 24          	mov    %rax,(%rsp)
  420723:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  420728:	4c 01 e8             	add    %r13,%rax
  42072b:	bf 60 00 00 00       	mov    $0x60,%edi
  420730:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  420735:	ff d0                	callq  *%rax
  420737:	48 8b 73 20          	mov    0x20(%rbx),%rsi
  42073b:	4c 8b 3c 24          	mov    (%rsp),%r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  42073f:	48 8d 68 30          	lea    0x30(%rax),%rbp
  420743:	48 8d 78 20          	lea    0x20(%rax),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420747:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  42074c:	48 89 68 20          	mov    %rbp,0x20(%rax)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420750:	48 89 f2             	mov    %rsi,%rdx
          _M_construct(__beg, __end, _Tag());
  420753:	4c 89 f8             	mov    %r15,%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420756:	48 03 53 28          	add    0x28(%rbx),%rdx
          _M_construct(__beg, __end, _Tag());
  42075a:	4c 01 f0             	add    %r14,%rax
  42075d:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  42075f:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  420764:	48 8b 73 40          	mov    0x40(%rbx),%rsi
  420768:	48 8d 41 50          	lea    0x50(%rcx),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  42076c:	48 89 f2             	mov    %rsi,%rdx
  42076f:	48 03 53 48          	add    0x48(%rbx),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420773:	48 8d 79 40          	lea    0x40(%rcx),%rdi
  420777:	48 89 41 40          	mov    %rax,0x40(%rcx)
          _M_construct(__beg, __end, _Tag());
  42077b:	4c 89 f8             	mov    %r15,%rax
  42077e:	4c 01 f0             	add    %r14,%rax
  420781:	ff d0                	callq  *%rax
	    if (__x->_M_right)
  420783:	48 8b 73 18          	mov    0x18(%rbx),%rsi
	  __tmp->_M_color = __x->_M_color;
  420787:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  42078c:	8b 03                	mov    (%rbx),%eax
	    if (__x->_M_right)
  42078e:	48 85 f6             	test   %rsi,%rsi
	  __tmp->_M_left = 0;
  420791:	48 c7 41 10 00 00 00 	movq   $0x0,0x10(%rcx)
  420798:	00 
	  __tmp->_M_right = 0;
  420799:	49 89 cf             	mov    %rcx,%r15
	  __tmp->_M_color = __x->_M_color;
  42079c:	89 01                	mov    %eax,(%rcx)
	  __tmp->_M_right = 0;
  42079e:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
  4207a5:	00 
	__top->_M_parent = __p;
  4207a6:	4c 89 61 08          	mov    %r12,0x8(%rcx)
	    if (__x->_M_right)
  4207aa:	74 24                	je     4207d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0xf0>
	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
  4207ac:	4c 8b 04 24          	mov    (%rsp),%r8
  4207b0:	48 b8 e0 56 df ff ff 	movabs $0xffffffffffdf56e0,%rax
  4207b7:	ff ff ff 
  4207ba:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  4207bf:	4c 89 fa             	mov    %r15,%rdx
  4207c2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4207c7:	4c 01 c0             	add    %r8,%rax
  4207ca:	ff d0                	callq  *%rax
  4207cc:	49 89 47 18          	mov    %rax,0x18(%r15)
	    while (__x != 0)
  4207d0:	48 8b 6b 10          	mov    0x10(%rbx),%rbp
  4207d4:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
  4207d9:	48 85 ed             	test   %rbp,%rbp
  4207dc:	0f 84 bc 00 00 00    	je     42089e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x1be>
  4207e2:	48 8b 0c 24          	mov    (%rsp),%rcx
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  4207e6:	48 b8 e0 56 df ff ff 	movabs $0xffffffffffdf56e0,%rax
  4207ed:	ff ff ff 
  4207f0:	49 01 cd             	add    %rcx,%r13
  4207f3:	48 01 c8             	add    %rcx,%rax
  4207f6:	49 01 ce             	add    %rcx,%r14
  4207f9:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  4207fe:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  420803:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  420808:	bf 60 00 00 00       	mov    $0x60,%edi
  42080d:	4c 8b 3c 24          	mov    (%rsp),%r15
  420811:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420816:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420818:	4c 8d 68 30          	lea    0x30(%rax),%r13
  42081c:	48 89 c3             	mov    %rax,%rbx
  42081f:	48 8d 78 20          	lea    0x20(%rax),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420823:	4c 89 68 20          	mov    %r13,0x20(%rax)
  420827:	48 8b 75 20          	mov    0x20(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  42082b:	48 89 f2             	mov    %rsi,%rdx
  42082e:	48 03 55 28          	add    0x28(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420832:	41 ff d6             	callq  *%r14
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420835:	48 8d 43 50          	lea    0x50(%rbx),%rax
  420839:	48 8d 7b 40          	lea    0x40(%rbx),%rdi
  42083d:	48 89 43 40          	mov    %rax,0x40(%rbx)
  420841:	48 8b 75 40          	mov    0x40(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420845:	48 89 f2             	mov    %rsi,%rdx
  420848:	48 03 55 48          	add    0x48(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  42084c:	41 ff d6             	callq  *%r14
	  __tmp->_M_color = __x->_M_color;
  42084f:	8b 45 00             	mov    0x0(%rbp),%eax
	  __tmp->_M_right = 0;
  420852:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  420859:	00 
		if (__x->_M_right)
  42085a:	48 8b 75 18          	mov    0x18(%rbp),%rsi
	  __tmp->_M_left = 0;
  42085e:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  420865:	00 
	  __tmp->_M_color = __x->_M_color;
  420866:	89 03                	mov    %eax,(%rbx)
		__p->_M_left = __y;
  420868:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
		if (__x->_M_right)
  42086d:	48 85 f6             	test   %rsi,%rsi
		__y->_M_parent = __p;
  420870:	4c 89 63 08          	mov    %r12,0x8(%rbx)
		if (__x->_M_right)
  420874:	74 18                	je     42088e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x1ae>
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  420876:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  42087b:	48 89 da             	mov    %rbx,%rdx
  42087e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  420883:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  420888:	ff d0                	callq  *%rax
  42088a:	48 89 43 18          	mov    %rax,0x18(%rbx)
  42088e:	48 8b 6d 10          	mov    0x10(%rbp),%rbp
  420892:	49 89 dc             	mov    %rbx,%r12
	    while (__x != 0)
  420895:	48 85 ed             	test   %rbp,%rbp
  420898:	0f 85 6a ff ff ff    	jne    420808 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x128>
      }
  42089e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4208a3:	48 83 c4 38          	add    $0x38,%rsp
  4208a7:	5b                   	pop    %rbx
  4208a8:	5d                   	pop    %rbp
  4208a9:	41 5c                	pop    %r12
  4208ab:	41 5d                	pop    %r13
  4208ad:	41 5e                	pop    %r14
  4208af:	41 5f                	pop    %r15
  4208b1:	c3                   	retq   
  4208b2:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  4208b9:	ff ff ff 
	  __catch(...)
  4208bc:	48 8b 1c 24          	mov    (%rsp),%rbx
  4208c0:	48 89 c7             	mov    %rax,%rdi
  4208c3:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  4208ca:	ff ff ff 
  4208cd:	49 89 df             	mov    %rbx,%r15
  4208d0:	48 01 d8             	add    %rbx,%rax
      { ::operator delete(__p); }
  4208d3:	49 01 dc             	add    %rbx,%r12
  4208d6:	ff d0                	callq  *%rax
  4208d8:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  4208dd:	41 ff d4             	callq  *%r12
	      __throw_exception_again;
  4208e0:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  4208e7:	ff ff ff 
  4208ea:	48 01 d8             	add    %rbx,%rax
  4208ed:	ff d0                	callq  *%rax
  4208ef:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  4208f3:	48 89 c5             	mov    %rax,%rbp
  4208f6:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  4208fd:	ff ff ff 
	if (!_M_is_local())
  420900:	49 39 fd             	cmp    %rdi,%r13
  420903:	74 0c                	je     420911 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x231>
  420905:	48 8b 04 24          	mov    (%rsp),%rax
  420909:	49 89 c7             	mov    %rax,%r15
  42090c:	4c 01 e0             	add    %r12,%rax
  42090f:	ff d0                	callq  *%rax
  420911:	48 89 e8             	mov    %rbp,%rax
	  __catch(...)
  420914:	4c 8b 34 24          	mov    (%rsp),%r14
  420918:	48 89 c7             	mov    %rax,%rdi
  42091b:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  420922:	ff ff ff 
  420925:	4c 89 f0             	mov    %r14,%rax
  420928:	4d 89 f7             	mov    %r14,%r15
  42092b:	4d 01 f4             	add    %r14,%r12
  42092e:	48 01 e8             	add    %rbp,%rax
  420931:	ff d0                	callq  *%rax
  420933:	48 89 df             	mov    %rbx,%rdi
	      __throw_exception_again;
  420936:	48 bb e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rbx
  42093d:	ff ff ff 
  420940:	41 ff d4             	callq  *%r12
  420943:	4c 89 f0             	mov    %r14,%rax
  420946:	48 01 d8             	add    %rbx,%rax
  420949:	ff d0                	callq  *%rax
  42094b:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  420952:	ff ff ff 
  420955:	48 bb e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rbx
  42095c:	ff ff ff 
  42095f:	49 bc 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%r12
  420966:	ff ff ff 
	__catch(...)
  420969:	4c 8b 34 24          	mov    (%rsp),%r14
  42096d:	48 89 c7             	mov    %rax,%rdi
  420970:	4d 89 f7             	mov    %r14,%r15
  420973:	4c 01 f5             	add    %r14,%rbp
	    __throw_exception_again;
  420976:	4c 01 f3             	add    %r14,%rbx
	__catch(...)
  420979:	ff d5                	callq  *%rbp
	    _M_erase(__top);
  42097b:	48 b8 60 c6 de ff ff 	movabs $0xffffffffffdec660,%rax
  420982:	ff ff ff 
  420985:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  42098a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  42098f:	4c 01 f0             	add    %r14,%rax
  420992:	ff d0                	callq  *%rax
	    __throw_exception_again;
  420994:	ff d3                	callq  *%rbx
  420996:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  42099d:	ff ff ff 
  4209a0:	e9 6f ff ff ff       	jmpq   420914 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x234>
  4209a5:	48 89 c3             	mov    %rax,%rbx
  4209a8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4209ad:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  4209b4:	ff ff ff 
  4209b7:	48 8b 78 20          	mov    0x20(%rax),%rdi
  4209bb:	48 39 fd             	cmp    %rdi,%rbp
  4209be:	74 0c                	je     4209cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x2ec>
  4209c0:	48 8b 04 24          	mov    (%rsp),%rax
  4209c4:	49 89 c7             	mov    %rax,%r15
  4209c7:	4c 01 e0             	add    %r12,%rax
  4209ca:	ff d0                	callq  *%rax
  4209cc:	48 89 d8             	mov    %rbx,%rax
  4209cf:	e9 e8 fe ff ff       	jmpq   4208bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x1dc>
  4209d4:	49 89 c5             	mov    %rax,%r13
	  __catch(...)
  4209d7:	48 8b 04 24          	mov    (%rsp),%rax
  4209db:	49 bc 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%r12
  4209e2:	ff ff ff 
  4209e5:	49 89 c7             	mov    %rax,%r15
  4209e8:	4c 01 e0             	add    %r12,%rax
  4209eb:	ff d0                	callq  *%rax
  4209ed:	4c 89 e8             	mov    %r13,%rax
  4209f0:	e9 74 ff ff ff       	jmpq   420969 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x289>
  4209f5:	4c 8b 34 24          	mov    (%rsp),%r14
  4209f9:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  420a00:	ff ff ff 
  420a03:	48 89 c3             	mov    %rax,%rbx
  420a06:	4d 89 f7             	mov    %r14,%r15
  420a09:	4c 01 f2             	add    %r14,%rdx
  420a0c:	ff d2                	callq  *%rdx
  420a0e:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  420a15:	ff ff ff 
  420a18:	48 89 df             	mov    %rbx,%rdi
  420a1b:	4c 01 f0             	add    %r14,%rax
  420a1e:	ff d0                	callq  *%rax
	__catch(...)
  420a20:	4c 8b 34 24          	mov    (%rsp),%r14
  420a24:	48 89 c3             	mov    %rax,%rbx
  420a27:	4d 89 f7             	mov    %r14,%r15
  420a2a:	4d 01 f4             	add    %r14,%r12
  420a2d:	41 ff d4             	callq  *%r12
  420a30:	eb dc                	jmp    420a0e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x32e>
  420a32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  420a39:	00 00 00 
  420a3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000420a40 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_>:
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
  420a40:	41 57                	push   %r15
  420a42:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 420a40 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_>
  420a49:	41 56                	push   %r14
  420a4b:	41 55                	push   %r13
  420a4d:	41 54                	push   %r12
  420a4f:	49 bb c0 a5 20 00 00 	movabs $0x20a5c0,%r11
  420a56:	00 00 00 
  420a59:	55                   	push   %rbp
  420a5a:	53                   	push   %rbx
  420a5b:	4c 01 d8             	add    %r11,%rax
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  420a5e:	49 bd 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%r13
  420a65:	ff ff ff 
  420a68:	48 89 f3             	mov    %rsi,%rbx
  420a6b:	49 89 c7             	mov    %rax,%r15
  420a6e:	48 83 ec 48          	sub    $0x48,%rsp
  420a72:	49 89 d4             	mov    %rdx,%r12
  420a75:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  420a7a:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  420a7f:	4c 01 e8             	add    %r13,%rax
  420a82:	bf 80 00 00 00       	mov    $0x80,%edi
  420a87:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  420a8c:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420a8e:	48 8d 68 30          	lea    0x30(%rax),%rbp
  420a92:	48 8b 73 20          	mov    0x20(%rbx),%rsi
  420a96:	49 89 c6             	mov    %rax,%r14
  420a99:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  420a9e:	48 8d 78 20          	lea    0x20(%rax),%rdi
          _M_construct(__beg, __end, _Tag());
  420aa2:	49 bf 10 2c de ff ff 	movabs $0xffffffffffde2c10,%r15
  420aa9:	ff ff ff 
	: allocator_type(__a), _M_p(__dat) { }
  420aac:	48 89 68 20          	mov    %rbp,0x20(%rax)
          _M_construct(__beg, __end, _Tag());
  420ab0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420ab5:	48 89 f2             	mov    %rsi,%rdx
  420ab8:	48 03 53 28          	add    0x28(%rbx),%rdx
          _M_construct(__beg, __end, _Tag());
  420abc:	4c 01 f8             	add    %r15,%rax
  420abf:	ff d0                	callq  *%rax
  420ac1:	48 8b 73 40          	mov    0x40(%rbx),%rsi
  420ac5:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420aca:	4c 89 f0             	mov    %r14,%rax
  420acd:	49 8d 7e 40          	lea    0x40(%r14),%rdi
  420ad1:	4d 8d 76 50          	lea    0x50(%r14),%r14
	: allocator_type(__a), _M_p(__dat) { }
  420ad5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420ada:	48 89 f2             	mov    %rsi,%rdx
  420add:	48 03 53 48          	add    0x48(%rbx),%rdx
	: allocator_type(__a), _M_p(__dat) { }
  420ae1:	4c 89 70 40          	mov    %r14,0x40(%rax)
          _M_construct(__beg, __end, _Tag());
  420ae5:	4b 8d 04 07          	lea    (%r15,%r8,1),%rax
  420ae9:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420aeb:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  420af0:	48 8b 73 60          	mov    0x60(%rbx),%rsi
          _M_construct(__beg, __end, _Tag());
  420af4:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420af9:	48 89 c8             	mov    %rcx,%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420afc:	48 89 f2             	mov    %rsi,%rdx
  420aff:	48 03 53 68          	add    0x68(%rbx),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420b03:	48 83 c0 70          	add    $0x70,%rax
  420b07:	48 8d 79 60          	lea    0x60(%rcx),%rdi
  420b0b:	48 89 41 60          	mov    %rax,0x60(%rcx)
          _M_construct(__beg, __end, _Tag());
  420b0f:	4b 8d 04 07          	lea    (%r15,%r8,1),%rax
  420b13:	ff d0                	callq  *%rax
	    if (__x->_M_right)
  420b15:	48 8b 73 18          	mov    0x18(%rbx),%rsi
	  __tmp->_M_color = __x->_M_color;
  420b19:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
  420b1e:	8b 03                	mov    (%rbx),%eax
	    if (__x->_M_right)
  420b20:	48 85 f6             	test   %rsi,%rsi
	  __tmp->_M_left = 0;
  420b23:	49 c7 46 10 00 00 00 	movq   $0x0,0x10(%r14)
  420b2a:	00 
	  __tmp->_M_right = 0;
  420b2b:	49 c7 46 18 00 00 00 	movq   $0x0,0x18(%r14)
  420b32:	00 
	  __tmp->_M_color = __x->_M_color;
  420b33:	41 89 06             	mov    %eax,(%r14)
	__top->_M_parent = __p;
  420b36:	4d 89 66 08          	mov    %r12,0x8(%r14)
	    if (__x->_M_right)
  420b3a:	74 25                	je     420b61 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x121>
	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
  420b3c:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  420b41:	48 b8 40 5a df ff ff 	movabs $0xffffffffffdf5a40,%rax
  420b48:	ff ff ff 
  420b4b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  420b50:	4c 89 f2             	mov    %r14,%rdx
  420b53:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  420b58:	4c 01 c8             	add    %r9,%rax
  420b5b:	ff d0                	callq  *%rax
  420b5d:	49 89 46 18          	mov    %rax,0x18(%r14)
	    while (__x != 0)
  420b61:	48 8b 6b 10          	mov    0x10(%rbx),%rbp
  420b65:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  420b6a:	48 85 ed             	test   %rbp,%rbp
  420b6d:	0f 84 e3 00 00 00    	je     420c56 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x216>
  420b73:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  420b78:	48 b8 40 5a df ff ff 	movabs $0xffffffffffdf5a40,%rax
  420b7f:	ff ff ff 
  420b82:	49 01 cd             	add    %rcx,%r13
  420b85:	48 01 c8             	add    %rcx,%rax
  420b88:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  420b8d:	4d 8d 2c 0f          	lea    (%r15,%rcx,1),%r13
  420b91:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  420b96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  420b9d:	00 00 00 
  420ba0:	bf 80 00 00 00       	mov    $0x80,%edi
  420ba5:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
  420baa:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  420baf:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420bb1:	4c 8d 70 30          	lea    0x30(%rax),%r14
  420bb5:	48 89 c3             	mov    %rax,%rbx
  420bb8:	48 8d 78 20          	lea    0x20(%rax),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420bbc:	4c 89 70 20          	mov    %r14,0x20(%rax)
  420bc0:	48 8b 75 20          	mov    0x20(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420bc4:	48 89 f2             	mov    %rsi,%rdx
  420bc7:	48 03 55 28          	add    0x28(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420bcb:	41 ff d5             	callq  *%r13
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420bce:	48 8d 43 50          	lea    0x50(%rbx),%rax
  420bd2:	48 8d 7b 40          	lea    0x40(%rbx),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420bd6:	48 89 43 40          	mov    %rax,0x40(%rbx)
  420bda:	48 8b 75 40          	mov    0x40(%rbp),%rsi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420bde:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420be3:	48 89 f2             	mov    %rsi,%rdx
  420be6:	48 03 55 48          	add    0x48(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420bea:	41 ff d5             	callq  *%r13
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420bed:	48 8d 43 70          	lea    0x70(%rbx),%rax
  420bf1:	48 8d 7b 60          	lea    0x60(%rbx),%rdi
  420bf5:	48 89 43 60          	mov    %rax,0x60(%rbx)
  420bf9:	48 8b 75 60          	mov    0x60(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420bfd:	48 89 f2             	mov    %rsi,%rdx
  420c00:	48 03 55 68          	add    0x68(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420c04:	41 ff d5             	callq  *%r13
	  __tmp->_M_color = __x->_M_color;
  420c07:	8b 45 00             	mov    0x0(%rbp),%eax
	  __tmp->_M_right = 0;
  420c0a:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  420c11:	00 
		if (__x->_M_right)
  420c12:	48 8b 75 18          	mov    0x18(%rbp),%rsi
	  __tmp->_M_left = 0;
  420c16:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  420c1d:	00 
	  __tmp->_M_color = __x->_M_color;
  420c1e:	89 03                	mov    %eax,(%rbx)
		__p->_M_left = __y;
  420c20:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
		if (__x->_M_right)
  420c25:	48 85 f6             	test   %rsi,%rsi
		__y->_M_parent = __p;
  420c28:	4c 89 63 08          	mov    %r12,0x8(%rbx)
		if (__x->_M_right)
  420c2c:	74 18                	je     420c46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x206>
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  420c2e:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  420c33:	48 89 da             	mov    %rbx,%rdx
  420c36:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  420c3b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  420c40:	ff d0                	callq  *%rax
  420c42:	48 89 43 18          	mov    %rax,0x18(%rbx)
  420c46:	48 8b 6d 10          	mov    0x10(%rbp),%rbp
  420c4a:	49 89 dc             	mov    %rbx,%r12
	    while (__x != 0)
  420c4d:	48 85 ed             	test   %rbp,%rbp
  420c50:	0f 85 4a ff ff ff    	jne    420ba0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x160>
      }
  420c56:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  420c5b:	48 83 c4 48          	add    $0x48,%rsp
  420c5f:	5b                   	pop    %rbx
  420c60:	5d                   	pop    %rbp
  420c61:	41 5c                	pop    %r12
  420c63:	41 5d                	pop    %r13
  420c65:	41 5e                	pop    %r14
  420c67:	41 5f                	pop    %r15
  420c69:	c3                   	retq   
  420c6a:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420c71:	ff ff ff 
	  __catch(...)
  420c74:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  420c79:	48 89 c7             	mov    %rax,%rdi
  420c7c:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  420c83:	ff ff ff 
  420c86:	49 89 df             	mov    %rbx,%r15
  420c89:	48 01 d8             	add    %rbx,%rax
      { ::operator delete(__p); }
  420c8c:	49 01 dc             	add    %rbx,%r12
  420c8f:	ff d0                	callq  *%rax
  420c91:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  420c96:	41 ff d4             	callq  *%r12
	      __throw_exception_again;
  420c99:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  420ca0:	ff ff ff 
  420ca3:	48 01 d8             	add    %rbx,%rax
  420ca6:	ff d0                	callq  *%rax
  420ca8:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	if (!_M_is_local())
  420cac:	48 39 7c 24 18       	cmp    %rdi,0x18(%rsp)
  420cb1:	48 89 c5             	mov    %rax,%rbp
  420cb4:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420cbb:	ff ff ff 
  420cbe:	74 0d                	je     420ccd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x28d>
  420cc0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420cc5:	49 89 c7             	mov    %rax,%r15
  420cc8:	4c 01 e0             	add    %r12,%rax
  420ccb:	ff d0                	callq  *%rax
  420ccd:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  420cd1:	49 39 fe             	cmp    %rdi,%r14
  420cd4:	74 0d                	je     420ce3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x2a3>
  420cd6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420cdb:	49 89 c7             	mov    %rax,%r15
  420cde:	4c 01 e0             	add    %r12,%rax
  420ce1:	ff d0                	callq  *%rax
  420ce3:	48 89 e8             	mov    %rbp,%rax
	  __catch(...)
  420ce6:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  420ceb:	48 89 c7             	mov    %rax,%rdi
  420cee:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  420cf5:	ff ff ff 
  420cf8:	4c 89 f0             	mov    %r14,%rax
  420cfb:	4d 89 f7             	mov    %r14,%r15
  420cfe:	4d 01 f4             	add    %r14,%r12
  420d01:	48 01 e8             	add    %rbp,%rax
  420d04:	ff d0                	callq  *%rax
  420d06:	48 89 df             	mov    %rbx,%rdi
	      __throw_exception_again;
  420d09:	48 bb e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rbx
  420d10:	ff ff ff 
  420d13:	41 ff d4             	callq  *%r12
  420d16:	4c 89 f0             	mov    %r14,%rax
  420d19:	48 01 d8             	add    %rbx,%rax
  420d1c:	ff d0                	callq  *%rax
  420d1e:	48 89 c5             	mov    %rax,%rbp
  420d21:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420d28:	ff ff ff 
  420d2b:	eb a0                	jmp    420ccd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x28d>
	  __catch(...)
  420d2d:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  420d32:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  420d39:	ff ff ff 
  420d3c:	48 89 c3             	mov    %rax,%rbx
  420d3f:	4d 89 f7             	mov    %r14,%r15
  420d42:	4c 01 f2             	add    %r14,%rdx
  420d45:	ff d2                	callq  *%rdx
  420d47:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  420d4e:	ff ff ff 
  420d51:	48 89 df             	mov    %rbx,%rdi
  420d54:	4c 01 f0             	add    %r14,%rax
  420d57:	ff d0                	callq  *%rax
  420d59:	49 89 c5             	mov    %rax,%r13
  420d5c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420d61:	49 bc 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%r12
  420d68:	ff ff ff 
  420d6b:	49 89 c7             	mov    %rax,%r15
  420d6e:	4c 01 e0             	add    %r12,%rax
  420d71:	ff d0                	callq  *%rax
  420d73:	4c 89 e8             	mov    %r13,%rax
	__catch(...)
  420d76:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  420d7b:	48 89 c7             	mov    %rax,%rdi
  420d7e:	4d 89 f7             	mov    %r14,%r15
  420d81:	4c 01 f5             	add    %r14,%rbp
	    __throw_exception_again;
  420d84:	4c 01 f3             	add    %r14,%rbx
	__catch(...)
  420d87:	ff d5                	callq  *%rbp
	    _M_erase(__top);
  420d89:	48 b8 00 c7 de ff ff 	movabs $0xffffffffffdec700,%rax
  420d90:	ff ff ff 
  420d93:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  420d98:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  420d9d:	4c 01 f0             	add    %r14,%rax
  420da0:	ff d0                	callq  *%rax
	    __throw_exception_again;
  420da2:	ff d3                	callq  *%rbx
  420da4:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420dab:	ff ff ff 
  420dae:	e9 33 ff ff ff       	jmpq   420ce6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x2a6>
  420db3:	48 89 c3             	mov    %rax,%rbx
  420db6:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  420dbb:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420dc2:	ff ff ff 
  420dc5:	48 8b 78 40          	mov    0x40(%rax),%rdi
  420dc9:	49 39 fe             	cmp    %rdi,%r14
  420dcc:	74 12                	je     420de0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x3a0>
  420dce:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420dd3:	49 89 c7             	mov    %rax,%r15
  420dd6:	4c 01 e0             	add    %r12,%rax
  420dd9:	ff d0                	callq  *%rax
  420ddb:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  420de0:	48 8b 78 20          	mov    0x20(%rax),%rdi
  420de4:	48 39 fd             	cmp    %rdi,%rbp
  420de7:	74 0d                	je     420df6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x3b6>
  420de9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420dee:	49 89 c7             	mov    %rax,%r15
  420df1:	4c 01 e0             	add    %r12,%rax
  420df4:	ff d0                	callq  *%rax
  420df6:	48 89 d8             	mov    %rbx,%rax
  420df9:	e9 76 fe ff ff       	jmpq   420c74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x234>
  420dfe:	48 89 c3             	mov    %rax,%rbx
  420e01:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420e08:	ff ff ff 
  420e0b:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  420e10:	eb ce                	jmp    420de0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x3a0>
  420e12:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  420e19:	ff ff ff 
  420e1c:	48 bb e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rbx
  420e23:	ff ff ff 
  420e26:	49 bc 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%r12
  420e2d:	ff ff ff 
  420e30:	e9 41 ff ff ff       	jmpq   420d76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x336>
	__catch(...)
  420e35:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  420e3a:	48 89 c3             	mov    %rax,%rbx
  420e3d:	4d 89 f7             	mov    %r14,%r15
  420e40:	4d 01 f4             	add    %r14,%r12
  420e43:	41 ff d4             	callq  *%r12
  420e46:	e9 fc fe ff ff       	jmpq   420d47 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x307>
  420e4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000420e50 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_>:
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420e50:	41 57                	push   %r15
  420e52:	41 56                	push   %r14
  420e54:	49 bb b0 a1 20 00 00 	movabs $0x20a1b0,%r11
  420e5b:	00 00 00 
  420e5e:	41 55                	push   %r13
  420e60:	41 54                	push   %r12
  420e62:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 420e50 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_>
  420e69:	55                   	push   %rbp
  420e6a:	53                   	push   %rbx
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420e6b:	48 b8 d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rax
  420e72:	ff ff ff 
  420e75:	4d 01 dc             	add    %r11,%r12
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420e78:	48 89 fb             	mov    %rdi,%rbx
  420e7b:	48 89 f5             	mov    %rsi,%rbp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420e7e:	4c 01 e0             	add    %r12,%rax
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420e81:	48 83 ec 28          	sub    $0x28,%rsp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420e85:	4d 89 e7             	mov    %r12,%r15
  420e88:	ff d0                	callq  *%rax
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420e8a:	48 b8 c0 ff ff ff ff 	movabs $0xffffffffffffffc0,%rax
  420e91:	ff ff ff 
	    this->_M_header._M_left = &this->_M_header;
  420e94:	48 8d 53 20          	lea    0x20(%rbx),%rdx
      : _M_t(__x._M_t) { }
  420e98:	4c 8d 6b 18          	lea    0x18(%rbx),%r13
  420e9c:	49 8b 04 04          	mov    (%r12,%rax,1),%rax
  420ea0:	48 83 c0 10          	add    $0x10,%rax
  420ea4:	48 89 03             	mov    %rax,(%rbx)
  420ea7:	8b 45 10             	mov    0x10(%rbp),%eax
	    _M_header(), _M_node_count(0)
  420eaa:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  420eb1:	00 
	    this->_M_header._M_left = &this->_M_header;
  420eb2:	48 89 53 30          	mov    %rdx,0x30(%rbx)
	    this->_M_header._M_right = &this->_M_header;
  420eb6:	48 89 53 38          	mov    %rdx,0x38(%rbx)
  420eba:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  420ebe:	89 43 10             	mov    %eax,0x10(%rbx)
	    _M_header(), _M_node_count(0)
  420ec1:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  420ec8:	48 c7 43 40 00 00 00 	movq   $0x0,0x40(%rbx)
  420ecf:	00 
	if (__x._M_root() != 0)
  420ed0:	48 85 f6             	test   %rsi,%rsi
  420ed3:	74 5b                	je     420f30 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xe0>
	return _M_copy(__x, __p, __an);
  420ed5:	48 b8 e0 56 df ff ff 	movabs $0xffffffffffdf56e0,%rax
  420edc:	ff ff ff 
	  : _M_t(__t) { }
  420edf:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
	return _M_copy(__x, __p, __an);
  420ee4:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  420ee9:	4c 89 ef             	mov    %r13,%rdi
  420eec:	4c 01 e0             	add    %r12,%rax
  420eef:	ff d0                	callq  *%rax
	    _M_root() = _M_copy(__x._M_begin(), _M_end());
  420ef1:	48 89 43 28          	mov    %rax,0x28(%rbx)
  420ef5:	48 89 c1             	mov    %rax,%rcx
  420ef8:	eb 09                	jmp    420f03 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xb3>
  420efa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      while (__x->_M_left != 0) __x = __x->_M_left;
  420f00:	48 89 d1             	mov    %rdx,%rcx
  420f03:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  420f07:	48 85 d2             	test   %rdx,%rdx
  420f0a:	75 f4                	jne    420f00 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xb0>
	    _M_leftmost() = _S_minimum(_M_root());
  420f0c:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
  420f10:	eb 09                	jmp    420f1b <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xcb>
  420f12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      while (__x->_M_right != 0) __x = __x->_M_right;
  420f18:	48 89 d0             	mov    %rdx,%rax
  420f1b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  420f1f:	48 85 d2             	test   %rdx,%rdx
  420f22:	75 f4                	jne    420f18 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xc8>
	    _M_rightmost() = _S_maximum(_M_root());
  420f24:	48 89 43 38          	mov    %rax,0x38(%rbx)
	    _M_impl._M_node_count = __x._M_impl._M_node_count;
  420f28:	48 8b 45 40          	mov    0x40(%rbp),%rax
  420f2c:	48 89 43 40          	mov    %rax,0x40(%rbx)
	    this->_M_header._M_left = &this->_M_header;
  420f30:	48 8d 53 50          	lea    0x50(%rbx),%rdx
	    _M_header(), _M_node_count(0)
  420f34:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  420f3b:	00 
  420f3c:	4c 8d 73 48          	lea    0x48(%rbx),%r14
  420f40:	c7 43 50 00 00 00 00 	movl   $0x0,0x50(%rbx)
  420f47:	48 c7 43 70 00 00 00 	movq   $0x0,0x70(%rbx)
  420f4e:	00 
	    this->_M_header._M_left = &this->_M_header;
  420f4f:	48 89 53 60          	mov    %rdx,0x60(%rbx)
	    this->_M_header._M_right = &this->_M_header;
  420f53:	48 89 53 68          	mov    %rdx,0x68(%rbx)
  420f57:	48 8b 75 58          	mov    0x58(%rbp),%rsi
	if (__x._M_root() != 0)
  420f5b:	48 85 f6             	test   %rsi,%rsi
  420f5e:	74 58                	je     420fb8 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x168>
	return _M_copy(__x, __p, __an);
  420f60:	48 b8 40 5a df ff ff 	movabs $0xffffffffffdf5a40,%rax
  420f67:	ff ff ff 
	  : _M_t(__t) { }
  420f6a:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
	return _M_copy(__x, __p, __an);
  420f6f:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  420f74:	4c 89 f7             	mov    %r14,%rdi
  420f77:	4c 01 e0             	add    %r12,%rax
  420f7a:	ff d0                	callq  *%rax
	    _M_root() = _M_copy(__x._M_begin(), _M_end());
  420f7c:	48 89 43 58          	mov    %rax,0x58(%rbx)
  420f80:	48 89 c1             	mov    %rax,%rcx
  420f83:	eb 06                	jmp    420f8b <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x13b>
  420f85:	0f 1f 00             	nopl   (%rax)
      while (__x->_M_left != 0) __x = __x->_M_left;
  420f88:	48 89 d1             	mov    %rdx,%rcx
  420f8b:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  420f8f:	48 85 d2             	test   %rdx,%rdx
  420f92:	75 f4                	jne    420f88 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x138>
	    _M_leftmost() = _S_minimum(_M_root());
  420f94:	48 89 4b 60          	mov    %rcx,0x60(%rbx)
  420f98:	eb 09                	jmp    420fa3 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x153>
  420f9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      while (__x->_M_right != 0) __x = __x->_M_right;
  420fa0:	48 89 d0             	mov    %rdx,%rax
  420fa3:	48 8b 50 18          	mov    0x18(%rax),%rdx
  420fa7:	48 85 d2             	test   %rdx,%rdx
  420faa:	75 f4                	jne    420fa0 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x150>
	    _M_rightmost() = _S_maximum(_M_root());
  420fac:	48 89 43 68          	mov    %rax,0x68(%rbx)
	    _M_impl._M_node_count = __x._M_impl._M_node_count;
  420fb0:	48 8b 45 70          	mov    0x70(%rbp),%rax
  420fb4:	48 89 43 70          	mov    %rax,0x70(%rbx)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420fb8:	48 8d 83 88 00 00 00 	lea    0x88(%rbx),%rax
          _M_construct(__beg, __end, _Tag());
  420fbf:	49 bf 10 2c de ff ff 	movabs $0xffffffffffde2c10,%r15
  420fc6:	ff ff ff 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420fc9:	48 8d 7b 78          	lea    0x78(%rbx),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420fcd:	48 89 43 78          	mov    %rax,0x78(%rbx)
  420fd1:	48 8b 75 78          	mov    0x78(%rbp),%rsi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420fd5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
          _M_construct(__beg, __end, _Tag());
  420fda:	4b 8d 04 27          	lea    (%r15,%r12,1),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420fde:	48 89 f2             	mov    %rsi,%rdx
  420fe1:	48 03 95 80 00 00 00 	add    0x80(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420fe8:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420fea:	48 8d 83 a8 00 00 00 	lea    0xa8(%rbx),%rax
  420ff1:	48 8d bb 98 00 00 00 	lea    0x98(%rbx),%rdi
  420ff8:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  420fff:	48 8b b5 98 00 00 00 	mov    0x98(%rbp),%rsi
          _M_construct(__beg, __end, _Tag());
  421006:	4b 8d 04 27          	lea    (%r15,%r12,1),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  42100a:	48 89 f2             	mov    %rsi,%rdx
  42100d:	48 03 95 a0 00 00 00 	add    0xa0(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  421014:	ff d0                	callq  *%rax
  421016:	48 83 c4 28          	add    $0x28,%rsp
  42101a:	5b                   	pop    %rbx
  42101b:	5d                   	pop    %rbp
  42101c:	41 5c                	pop    %r12
  42101e:	41 5d                	pop    %r13
  421020:	41 5e                	pop    %r14
  421022:	41 5f                	pop    %r15
  421024:	c3                   	retq   
  421025:	48 89 c5             	mov    %rax,%rbp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  421028:	48 b8 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rax
  42102f:	ff ff ff 
  421032:	48 89 df             	mov    %rbx,%rdi
  421035:	4d 89 e7             	mov    %r12,%r15
  421038:	4c 01 e0             	add    %r12,%rax
  42103b:	48 89 03             	mov    %rax,(%rbx)
  42103e:	48 b8 40 ea dd ff ff 	movabs $0xffffffffffddea40,%rax
  421045:	ff ff ff 
  421048:	4c 01 e0             	add    %r12,%rax
  42104b:	ff d0                	callq  *%rax
  42104d:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  421054:	ff ff ff 
  421057:	48 89 ef             	mov    %rbp,%rdi
  42105a:	4c 01 e0             	add    %r12,%rax
  42105d:	ff d0                	callq  *%rax
  42105f:	48 8b 7b 78          	mov    0x78(%rbx),%rdi
	if (!_M_is_local())
  421063:	48 39 7c 24 08       	cmp    %rdi,0x8(%rsp)
  421068:	48 89 c5             	mov    %rax,%rbp
  42106b:	74 12                	je     42107f <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x22f>
  42106d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  421074:	ff ff ff 
  421077:	4d 89 e7             	mov    %r12,%r15
  42107a:	4c 01 e0             	add    %r12,%rax
  42107d:	ff d0                	callq  *%rax
      { _M_erase(_M_begin()); }
  42107f:	48 b8 00 c7 de ff ff 	movabs $0xffffffffffdec700,%rax
  421086:	ff ff ff 
  421089:	48 8b 73 58          	mov    0x58(%rbx),%rsi
  42108d:	4c 89 f7             	mov    %r14,%rdi
  421090:	4c 01 e0             	add    %r12,%rax
  421093:	ff d0                	callq  *%rax
  421095:	48 b8 60 c6 de ff ff 	movabs $0xffffffffffdec660,%rax
  42109c:	ff ff ff 
  42109f:	48 8b 73 28          	mov    0x28(%rbx),%rsi
  4210a3:	4c 89 ef             	mov    %r13,%rdi
  4210a6:	4c 01 e0             	add    %r12,%rax
  4210a9:	ff d0                	callq  *%rax
  4210ab:	e9 78 ff ff ff       	jmpq   421028 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x1d8>
  4210b0:	48 89 c5             	mov    %rax,%rbp
  4210b3:	eb ca                	jmp    42107f <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x22f>
  4210b5:	48 89 c5             	mov    %rax,%rbp
  4210b8:	eb db                	jmp    421095 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x245>
  4210ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004210c0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv>:
            rethrow() const
  4210c0:	41 57                	push   %r15
  4210c2:	41 55                	push   %r13
  4210c4:	49 bb 40 9f 20 00 00 	movabs $0x209f40,%r11
  4210cb:	00 00 00 
  4210ce:	41 54                	push   %r12
  4210d0:	55                   	push   %rbp
                throw*this;
  4210d1:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  4210d8:	ff ff ff 
            rethrow() const
  4210db:	53                   	push   %rbx
  4210dc:	48 8d 1d dd ff ff ff 	lea    -0x23(%rip),%rbx        # 4210c0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv>
  4210e3:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  4210e6:	bf f0 00 00 00       	mov    $0xf0,%edi
  4210eb:	4c 01 db             	add    %r11,%rbx
  4210ee:	49 89 df             	mov    %rbx,%r15
  4210f1:	48 01 d8             	add    %rbx,%rax
  4210f4:	ff d0                	callq  *%rax
  4210f6:	48 89 c5             	mov    %rax,%rbp
        clone_base
  4210f9:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421100:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  421103:	4c 89 e6             	mov    %r12,%rsi
  421106:	48 01 d8             	add    %rbx,%rax
  421109:	48 89 ef             	mov    %rbp,%rdi
  42110c:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  421113:	48 b8 50 5e df ff ff 	movabs $0xffffffffffdf5e50,%rax
  42111a:	ff ff ff 
  42111d:	48 01 d8             	add    %rbx,%rax
  421120:	ff d0                	callq  *%rax
  421122:	49 bd 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%r13
  421129:	ff ff ff 
                px_(x.px_)
  42112c:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  421133:	00 
  421134:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  421139:	48 89 45 00          	mov    %rax,0x0(%rbp)
  42113d:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  421144:	00 
  421145:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  42114c:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    exception
  421152:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  421159:	ff ff ff 
  42115c:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  42115f:	48 85 ff             	test   %rdi,%rdi
    exception
  421162:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  421169:	74 06                	je     421171 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv+0xb1>
                    px_->add_ref();
  42116b:	48 8b 07             	mov    (%rdi),%rax
  42116e:	ff 50 18             	callq  *0x18(%rax)
    exception
  421171:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  421178:	00 
                throw*this;
  421179:	48 89 ef             	mov    %rbp,%rdi
  42117c:	49 89 df             	mov    %rbx,%r15
    exception
  42117f:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  421186:	00 00 00 
  421189:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
        clone_impl:
  42118f:	48 b8 30 f5 ff ff ff 	movabs $0xfffffffffffff530,%rax
  421196:	ff ff ff 
  421199:	48 01 d8             	add    %rbx,%rax
  42119c:	48 8d 50 48          	lea    0x48(%rax),%rdx
  4211a0:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4211a4:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  4211a8:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                throw*this;
  4211af:	48 b8 c0 cc de ff ff 	movabs $0xffffffffffdeccc0,%rax
  4211b6:	ff ff ff 
        clone_impl:
  4211b9:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                throw*this;
  4211c0:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4211c4:	48 b8 58 f2 ff ff ff 	movabs $0xfffffffffffff258,%rax
  4211cb:	ff ff ff 
  4211ce:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  4211d2:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  4211d9:	ff ff ff 
    exception
  4211dc:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                throw*this;
  4211e3:	48 01 d8             	add    %rbx,%rax
  4211e6:	ff d0                	callq  *%rax
  4211e8:	49 89 c4             	mov    %rax,%r12
  4211eb:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  4211f2:	ff ff ff 
  4211f5:	48 89 ef             	mov    %rbp,%rdi
  4211f8:	49 89 df             	mov    %rbx,%r15
  4211fb:	48 01 d8             	add    %rbx,%rax
  4211fe:	ff d0                	callq  *%rax
  421200:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  421207:	ff ff ff 
  42120a:	4c 89 e7             	mov    %r12,%rdi
  42120d:	48 01 d8             	add    %rbx,%rax
  421210:	ff d0                	callq  *%rax
  421212:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  421215:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  42121a:	48 89 ef             	mov    %rbp,%rdi
  42121d:	48 89 45 00          	mov    %rax,0x0(%rbp)
  421221:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  421228:	ff ff ff 
  42122b:	48 01 d8             	add    %rbx,%rax
  42122e:	ff d0                	callq  *%rax
  421230:	eb b9                	jmp    4211eb <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv+0x12b>
  421232:	0f 1f 40 00          	nopl   0x0(%rax)
  421236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42123d:	00 00 00 

0000000000421240 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv>:
            rethrow() const
  421240:	4c 8b 17             	mov    (%rdi),%r10
  421243:	49 03 7a e0          	add    -0x20(%r10),%rdi
  421247:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 421247 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv+0x7>
  42124e:	49 ba b9 9d 20 00 00 	movabs $0x209db9,%r10
  421255:	00 00 00 
  421258:	4d 01 d3             	add    %r10,%r11
  42125b:	49 ba c0 60 df ff ff 	movabs $0xffffffffffdf60c0,%r10
  421262:	ff ff ff 
  421265:	4d 01 da             	add    %r11,%r10
  421268:	41 ff e2             	jmpq   *%r10
  42126b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000421270 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv>:
  421270:	41 57                	push   %r15
  421272:	41 54                	push   %r12
  421274:	49 bb 90 9d 20 00 00 	movabs $0x209d90,%r11
  42127b:	00 00 00 
  42127e:	55                   	push   %rbp
  42127f:	53                   	push   %rbx
  421280:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 421270 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv>
                throw*this;
  421287:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  42128e:	ff ff ff 
            rethrow() const
  421291:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  421294:	bf f0 00 00 00       	mov    $0xf0,%edi
  421299:	4c 01 db             	add    %r11,%rbx
            rethrow() const
  42129c:	48 83 ec 08          	sub    $0x8,%rsp
                throw*this;
  4212a0:	49 89 df             	mov    %rbx,%r15
  4212a3:	48 01 d8             	add    %rbx,%rax
  4212a6:	ff d0                	callq  *%rax
  4212a8:	48 89 c5             	mov    %rax,%rbp
        clone_base
  4212ab:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  4212b2:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  4212b5:	4c 89 e6             	mov    %r12,%rsi
  4212b8:	48 01 d8             	add    %rbx,%rax
  4212bb:	48 89 ef             	mov    %rbp,%rdi
  4212be:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  4212c5:	48 b8 50 5e df ff ff 	movabs $0xffffffffffdf5e50,%rax
  4212cc:	ff ff ff 
  4212cf:	48 01 d8             	add    %rbx,%rax
  4212d2:	ff d0                	callq  *%rax
  4212d4:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  4212db:	00 
                px_(x.px_)
  4212dc:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  4212e3:	00 
  4212e4:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  4212ea:	48 b8 80 f9 ff ff ff 	movabs $0xfffffffffffff980,%rax
  4212f1:	ff ff ff 
  4212f4:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  4212fb:	48 01 d8             	add    %rbx,%rax
  4212fe:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  421302:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  421309:	ff ff ff 
  42130c:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  42130f:	48 85 ff             	test   %rdi,%rdi
    exception
  421312:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  421319:	74 06                	je     421321 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv+0xb1>
                    px_->add_ref();
  42131b:	48 8b 07             	mov    (%rdi),%rax
  42131e:	ff 50 18             	callq  *0x18(%rax)
    exception
  421321:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  421328:	00 
                throw*this;
  421329:	48 89 ef             	mov    %rbp,%rdi
  42132c:	49 89 df             	mov    %rbx,%r15
    exception
  42132f:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  421336:	00 00 00 
  421339:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
        clone_impl:
  42133f:	48 b8 20 f4 ff ff ff 	movabs $0xfffffffffffff420,%rax
  421346:	ff ff ff 
  421349:	48 01 d8             	add    %rbx,%rax
  42134c:	48 8d 50 48          	lea    0x48(%rax),%rdx
  421350:	48 89 45 00          	mov    %rax,0x0(%rbp)
  421354:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  421358:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                throw*this;
  42135f:	48 b8 70 ce de ff ff 	movabs $0xffffffffffdece70,%rax
  421366:	ff ff ff 
        clone_impl:
  421369:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                throw*this;
  421370:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  421374:	48 b8 e8 f1 ff ff ff 	movabs $0xfffffffffffff1e8,%rax
  42137b:	ff ff ff 
  42137e:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  421382:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  421389:	ff ff ff 
    exception
  42138c:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                throw*this;
  421393:	48 01 d8             	add    %rbx,%rax
  421396:	ff d0                	callq  *%rax
  421398:	49 89 c4             	mov    %rax,%r12
  42139b:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  4213a2:	ff ff ff 
  4213a5:	48 89 ef             	mov    %rbp,%rdi
  4213a8:	49 89 df             	mov    %rbx,%r15
  4213ab:	48 01 d8             	add    %rbx,%rax
  4213ae:	ff d0                	callq  *%rax
  4213b0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  4213b7:	ff ff ff 
  4213ba:	4c 89 e7             	mov    %r12,%rdi
  4213bd:	48 01 d8             	add    %rbx,%rax
  4213c0:	ff d0                	callq  *%rax
  4213c2:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  4213c5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4213cc:	ff ff ff 
  4213cf:	48 89 ef             	mov    %rbp,%rdi
  4213d2:	48 01 d8             	add    %rbx,%rax
  4213d5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4213d9:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  4213e0:	ff ff ff 
  4213e3:	48 01 d8             	add    %rbx,%rax
  4213e6:	ff d0                	callq  *%rax
  4213e8:	eb b1                	jmp    42139b <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv+0x12b>
  4213ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004213f0 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv>:
            rethrow() const
  4213f0:	4c 8b 17             	mov    (%rdi),%r10
  4213f3:	49 03 7a e0          	add    -0x20(%r10),%rdi
  4213f7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4213f7 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv+0x7>
  4213fe:	49 ba 09 9c 20 00 00 	movabs $0x209c09,%r10
  421405:	00 00 00 
  421408:	4d 01 d3             	add    %r10,%r11
  42140b:	49 ba 70 62 df ff ff 	movabs $0xffffffffffdf6270,%r10
  421412:	ff ff ff 
  421415:	4d 01 da             	add    %r11,%r10
  421418:	41 ff e2             	jmpq   *%r10
  42141b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000421420 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv>:
            clone() const
  421420:	41 57                	push   %r15
  421422:	41 55                	push   %r13
  421424:	49 bb e0 9b 20 00 00 	movabs $0x209be0,%r11
  42142b:	00 00 00 
  42142e:	41 54                	push   %r12
  421430:	55                   	push   %rbp
  421431:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 421420 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv>
                return new clone_impl(*this,clone_tag());
  421438:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  42143f:	ff ff ff 
            clone() const
  421442:	53                   	push   %rbx
  421443:	49 89 fc             	mov    %rdi,%r12
  421446:	4c 01 dd             	add    %r11,%rbp
                return new clone_impl(*this,clone_tag());
  421449:	bf f0 00 00 00       	mov    $0xf0,%edi
  42144e:	49 89 ef             	mov    %rbp,%r15
  421451:	48 01 e8             	add    %rbp,%rax
  421454:	ff d0                	callq  *%rax
  421456:	48 89 c3             	mov    %rax,%rbx
        clone_base
  421459:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421460:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  421463:	4c 89 e6             	mov    %r12,%rsi
  421466:	48 01 e8             	add    %rbp,%rax
  421469:	48 89 df             	mov    %rbx,%rdi
  42146c:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
  421473:	48 b8 50 5e df ff ff 	movabs $0xffffffffffdf5e50,%rax
  42147a:	ff ff ff 
  42147d:	48 01 e8             	add    %rbp,%rax
  421480:	ff d0                	callq  *%rax
  421482:	49 bd 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%r13
  421489:	ff ff ff 
                px_(x.px_)
  42148c:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  421493:	00 
  421494:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  421499:	48 89 03             	mov    %rax,(%rbx)
  42149c:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  4214a3:	00 
  4214a4:	48 89 bb c8 00 00 00 	mov    %rdi,0xc8(%rbx)
  4214ab:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
    exception
  4214b1:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  4214b8:	ff ff ff 
  4214bb:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  4214be:	48 85 ff             	test   %rdi,%rdi
    exception
  4214c1:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
                if( px_ )
  4214c8:	74 06                	je     4214d0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0xb0>
                    px_->add_ref();
  4214ca:	48 8b 07             	mov    (%rdi),%rax
  4214cd:	ff 50 18             	callq  *0x18(%rax)
    exception
  4214d0:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  4214d7:	00 
                copy_boost_exception(this,&x);
  4214d8:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  4214df:	00 
  4214e0:	48 8d bb c0 00 00 00 	lea    0xc0(%rbx),%rdi
    exception
  4214e7:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  4214ee:	00 00 00 
  4214f1:	89 83 e0 00 00 00    	mov    %eax,0xe0(%rbx)
                T(x)
  4214f7:	48 b8 30 f5 ff ff ff 	movabs $0xfffffffffffff530,%rax
  4214fe:	ff ff ff 
  421501:	48 01 e8             	add    %rbp,%rax
  421504:	48 8d 50 48          	lea    0x48(%rax),%rdx
  421508:	48 89 03             	mov    %rax,(%rbx)
  42150b:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  42150f:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
                copy_boost_exception(this,&x);
  421516:	48 b8 40 a6 de ff ff 	movabs $0xffffffffffdea640,%rax
  42151d:	ff ff ff 
    exception
  421520:	0f 11 83 d0 00 00 00 	movups %xmm0,0xd0(%rbx)
                T(x)
  421527:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
                copy_boost_exception(this,&x);
  42152e:	48 01 e8             	add    %rbp,%rax
  421531:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  421533:	48 8b 03             	mov    (%rbx),%rax
  421536:	48 03 58 e8          	add    -0x18(%rax),%rbx
  42153a:	48 89 d8             	mov    %rbx,%rax
                }
  42153d:	5b                   	pop    %rbx
  42153e:	5d                   	pop    %rbp
  42153f:	41 5c                	pop    %r12
  421541:	41 5d                	pop    %r13
  421543:	41 5f                	pop    %r15
  421545:	c3                   	retq   
  421546:	49 89 c4             	mov    %rax,%r12
                return new clone_impl(*this,clone_tag());
  421549:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  421550:	ff ff ff 
  421553:	48 89 df             	mov    %rbx,%rdi
  421556:	be f0 00 00 00       	mov    $0xf0,%esi
  42155b:	48 01 e8             	add    %rbp,%rax
  42155e:	49 89 ef             	mov    %rbp,%r15
  421561:	ff d0                	callq  *%rax
  421563:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  42156a:	ff ff ff 
  42156d:	4c 89 e7             	mov    %r12,%rdi
  421570:	48 01 e8             	add    %rbp,%rax
  421573:	ff d0                	callq  *%rax
  421575:	49 89 c4             	mov    %rax,%r12
                T(x)
  421578:	48 b8 00 ca de ff ff 	movabs $0xffffffffffdeca00,%rax
  42157f:	ff ff ff 
  421582:	48 89 df             	mov    %rbx,%rdi
  421585:	48 01 e8             	add    %rbp,%rax
  421588:	ff d0                	callq  *%rax
  42158a:	eb bd                	jmp    421549 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0x129>
  42158c:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  42158f:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  421594:	48 89 df             	mov    %rbx,%rdi
  421597:	48 89 03             	mov    %rax,(%rbx)
  42159a:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  4215a1:	ff ff ff 
  4215a4:	48 01 e8             	add    %rbp,%rax
  4215a7:	ff d0                	callq  *%rax
  4215a9:	eb 9e                	jmp    421549 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0x129>
  4215ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004215b0 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv>:
            clone() const
  4215b0:	4c 8b 17             	mov    (%rdi),%r10
  4215b3:	49 03 7a e8          	add    -0x18(%r10),%rdi
  4215b7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4215b7 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0x7>
  4215be:	49 ba 49 9a 20 00 00 	movabs $0x209a49,%r10
  4215c5:	00 00 00 
  4215c8:	4d 01 d3             	add    %r10,%r11
  4215cb:	49 ba 20 64 df ff ff 	movabs $0xffffffffffdf6420,%r10
  4215d2:	ff ff ff 
  4215d5:	4d 01 da             	add    %r11,%r10
  4215d8:	41 ff e2             	jmpq   *%r10
  4215db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004215e0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv>:
  4215e0:	41 57                	push   %r15
  4215e2:	41 54                	push   %r12
  4215e4:	49 bb 20 9a 20 00 00 	movabs $0x209a20,%r11
  4215eb:	00 00 00 
  4215ee:	55                   	push   %rbp
  4215ef:	48 8d 2d ea ff ff ff 	lea    -0x16(%rip),%rbp        # 4215e0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv>
  4215f6:	53                   	push   %rbx
                return new clone_impl(*this,clone_tag());
  4215f7:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  4215fe:	ff ff ff 
            clone() const
  421601:	49 89 fc             	mov    %rdi,%r12
                return new clone_impl(*this,clone_tag());
  421604:	bf f0 00 00 00       	mov    $0xf0,%edi
  421609:	4c 01 dd             	add    %r11,%rbp
            clone() const
  42160c:	48 83 ec 08          	sub    $0x8,%rsp
                return new clone_impl(*this,clone_tag());
  421610:	49 89 ef             	mov    %rbp,%r15
  421613:	48 01 e8             	add    %rbp,%rax
  421616:	ff d0                	callq  *%rax
  421618:	48 89 c3             	mov    %rax,%rbx
        clone_base
  42161b:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421622:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  421625:	4c 89 e6             	mov    %r12,%rsi
  421628:	48 01 e8             	add    %rbp,%rax
  42162b:	48 89 df             	mov    %rbx,%rdi
  42162e:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
  421635:	48 b8 50 5e df ff ff 	movabs $0xffffffffffdf5e50,%rax
  42163c:	ff ff ff 
  42163f:	48 01 e8             	add    %rbp,%rax
  421642:	ff d0                	callq  *%rax
  421644:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  42164b:	00 
                px_(x.px_)
  42164c:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  421653:	00 
  421654:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  42165a:	48 b8 80 f9 ff ff ff 	movabs $0xfffffffffffff980,%rax
  421661:	ff ff ff 
  421664:	48 89 bb c8 00 00 00 	mov    %rdi,0xc8(%rbx)
  42166b:	48 01 e8             	add    %rbp,%rax
  42166e:	48 89 03             	mov    %rax,(%rbx)
    exception
  421671:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  421678:	ff ff ff 
  42167b:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  42167e:	48 85 ff             	test   %rdi,%rdi
    exception
  421681:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
                if( px_ )
  421688:	74 06                	je     421690 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0xb0>
                    px_->add_ref();
  42168a:	48 8b 07             	mov    (%rdi),%rax
  42168d:	ff 50 18             	callq  *0x18(%rax)
    exception
  421690:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  421697:	00 
                copy_boost_exception(this,&x);
  421698:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  42169f:	00 
  4216a0:	48 8d bb c0 00 00 00 	lea    0xc0(%rbx),%rdi
    exception
  4216a7:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  4216ae:	00 00 00 
  4216b1:	89 83 e0 00 00 00    	mov    %eax,0xe0(%rbx)
                T(x)
  4216b7:	48 b8 20 f4 ff ff ff 	movabs $0xfffffffffffff420,%rax
  4216be:	ff ff ff 
  4216c1:	48 01 e8             	add    %rbp,%rax
  4216c4:	48 8d 50 48          	lea    0x48(%rax),%rdx
  4216c8:	48 89 03             	mov    %rax,(%rbx)
  4216cb:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  4216cf:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
                copy_boost_exception(this,&x);
  4216d6:	48 b8 40 a6 de ff ff 	movabs $0xffffffffffdea640,%rax
  4216dd:	ff ff ff 
    exception
  4216e0:	0f 11 83 d0 00 00 00 	movups %xmm0,0xd0(%rbx)
                T(x)
  4216e7:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
                copy_boost_exception(this,&x);
  4216ee:	48 01 e8             	add    %rbp,%rax
  4216f1:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  4216f3:	48 8b 03             	mov    (%rbx),%rax
  4216f6:	48 03 58 e8          	add    -0x18(%rax),%rbx
                }
  4216fa:	48 83 c4 08          	add    $0x8,%rsp
                return new clone_impl(*this,clone_tag());
  4216fe:	48 89 d8             	mov    %rbx,%rax
                }
  421701:	5b                   	pop    %rbx
  421702:	5d                   	pop    %rbp
  421703:	41 5c                	pop    %r12
  421705:	41 5f                	pop    %r15
  421707:	c3                   	retq   
  421708:	49 89 c4             	mov    %rax,%r12
                return new clone_impl(*this,clone_tag());
  42170b:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  421712:	ff ff ff 
  421715:	48 89 df             	mov    %rbx,%rdi
  421718:	be f0 00 00 00       	mov    $0xf0,%esi
  42171d:	48 01 e8             	add    %rbp,%rax
  421720:	49 89 ef             	mov    %rbp,%r15
  421723:	ff d0                	callq  *%rax
  421725:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  42172c:	ff ff ff 
  42172f:	4c 89 e7             	mov    %r12,%rdi
  421732:	48 01 e8             	add    %rbp,%rax
  421735:	ff d0                	callq  *%rax
  421737:	49 89 c4             	mov    %rax,%r12
                T(x)
  42173a:	48 b8 50 cb de ff ff 	movabs $0xffffffffffdecb50,%rax
  421741:	ff ff ff 
  421744:	48 89 df             	mov    %rbx,%rdi
  421747:	48 01 e8             	add    %rbp,%rax
  42174a:	ff d0                	callq  *%rax
  42174c:	eb bd                	jmp    42170b <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0x12b>
  42174e:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  421751:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  421758:	ff ff ff 
  42175b:	48 89 df             	mov    %rbx,%rdi
  42175e:	48 01 e8             	add    %rbp,%rax
  421761:	48 89 03             	mov    %rax,(%rbx)
  421764:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  42176b:	ff ff ff 
  42176e:	48 01 e8             	add    %rbp,%rax
  421771:	ff d0                	callq  *%rax
  421773:	eb 96                	jmp    42170b <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0x12b>
  421775:	90                   	nop
  421776:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42177d:	00 00 00 

0000000000421780 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv>:
            clone() const
  421780:	4c 8b 17             	mov    (%rdi),%r10
  421783:	49 03 7a e8          	add    -0x18(%r10),%rdi
  421787:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 421787 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0x7>
  42178e:	49 ba 79 98 20 00 00 	movabs $0x209879,%r10
  421795:	00 00 00 
  421798:	4d 01 d3             	add    %r10,%r11
  42179b:	49 ba e0 65 df ff ff 	movabs $0xffffffffffdf65e0,%r10
  4217a2:	ff ff ff 
  4217a5:	4d 01 da             	add    %r11,%r10
  4217a8:	41 ff e2             	jmpq   *%r10
  4217ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004217b0 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_>:
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  4217b0:	41 57                	push   %r15
  4217b2:	41 56                	push   %r14
  4217b4:	49 bb 50 98 20 00 00 	movabs $0x209850,%r11
  4217bb:	00 00 00 
  4217be:	41 55                	push   %r13
  4217c0:	41 54                	push   %r12
  4217c2:	49 89 fd             	mov    %rdi,%r13
  4217c5:	55                   	push   %rbp
  4217c6:	53                   	push   %rbx
  4217c7:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 4217b0 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_>
    throw enable_current_exception(enable_error_info(e));
  4217ce:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  4217d5:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  4217d8:	49 be 50 5e df ff ff 	movabs $0xffffffffffdf5e50,%r14
  4217df:	ff ff ff 
  4217e2:	bf f0 00 00 00       	mov    $0xf0,%edi
  4217e7:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  4217ea:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    throw enable_current_exception(enable_error_info(e));
  4217f1:	49 89 df             	mov    %rbx,%r15
  4217f4:	48 01 d8             	add    %rbx,%rax
  4217f7:	49 89 e4             	mov    %rsp,%r12
  4217fa:	ff d0                	callq  *%rax
  4217fc:	4c 89 ee             	mov    %r13,%rsi
  4217ff:	48 89 c5             	mov    %rax,%rbp
  421802:	48 89 e7             	mov    %rsp,%rdi
  421805:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  421809:	ff d0                	callq  *%rax
  42180b:	41 8b 85 b8 00 00 00 	mov    0xb8(%r13),%eax
                px_(0)
  421812:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  421819:	00 00 00 00 00 
  42181e:	48 89 e6             	mov    %rsp,%rsi
            throw_line_(-1)
  421821:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  421828:	00 00 00 00 00 
  42182d:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
  421834:	00 00 00 00 00 
  421839:	48 89 ef             	mov    %rbp,%rdi
  42183c:	c7 84 24 e0 00 00 00 	movl   $0xffffffff,0xe0(%rsp)
  421843:	ff ff ff ff 
  421847:	89 84 24 b8 00 00 00 	mov    %eax,0xb8(%rsp)
                T(x)
  42184e:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  421855:	ff ff ff 
  421858:	48 01 d8             	add    %rbx,%rax
  42185b:	48 89 04 24          	mov    %rax,(%rsp)
  42185f:	48 83 c0 38          	add    $0x38,%rax
  421863:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  42186a:	00 
        clone_base
  42186b:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421872:	ff ff ff 
  421875:	48 01 d8             	add    %rbx,%rax
  421878:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  42187f:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  421883:	ff d0                	callq  *%rax
  421885:	8b 84 24 b8 00 00 00 	mov    0xb8(%rsp),%eax
                px_(x.px_)
  42188c:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  421893:	00 
  421894:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  42189a:	48 b8 80 f9 ff ff ff 	movabs $0xfffffffffffff980,%rax
  4218a1:	ff ff ff 
  4218a4:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  4218ab:	48 01 d8             	add    %rbx,%rax
  4218ae:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  4218b2:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  4218b9:	ff ff ff 
  4218bc:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  4218bf:	48 85 ff             	test   %rdi,%rdi
    exception
  4218c2:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  4218c9:	74 06                	je     4218d1 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x121>
                    px_->add_ref();
  4218cb:	48 8b 07             	mov    (%rdi),%rax
  4218ce:	ff 50 18             	callq  *0x18(%rax)
    exception
  4218d1:	8b 84 24 e0 00 00 00 	mov    0xe0(%rsp),%eax
                copy_boost_exception(this,&x);
  4218d8:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  4218df:	00 
  4218e0:	48 8d bd c0 00 00 00 	lea    0xc0(%rbp),%rdi
    exception
  4218e7:	66 0f 6f 84 24 d0 00 	movdqa 0xd0(%rsp),%xmm0
  4218ee:	00 00 
  4218f0:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
                T(x)
  4218f6:	48 b8 20 f4 ff ff ff 	movabs $0xfffffffffffff420,%rax
  4218fd:	ff ff ff 
  421900:	48 01 d8             	add    %rbx,%rax
  421903:	48 8d 50 48          	lea    0x48(%rax),%rdx
  421907:	48 89 45 00          	mov    %rax,0x0(%rbp)
  42190b:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  42190f:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                copy_boost_exception(this,&x);
  421916:	48 b8 40 a6 de ff ff 	movabs $0xffffffffffdea640,%rax
  42191d:	ff ff ff 
    exception
  421920:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                T(x)
  421927:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                copy_boost_exception(this,&x);
  42192e:	48 01 d8             	add    %rbx,%rax
  421931:	ff d0                	callq  *%rax
  421933:	48 b8 50 cb de ff ff 	movabs $0xffffffffffdecb50,%rax
  42193a:	ff ff ff 
  42193d:	4c 89 e7             	mov    %r12,%rdi
  421940:	49 89 df             	mov    %rbx,%r15
  421943:	48 01 d8             	add    %rbx,%rax
  421946:	ff d0                	callq  *%rax
  421948:	48 b8 70 ce de ff ff 	movabs $0xffffffffffdece70,%rax
  42194f:	ff ff ff 
  421952:	48 89 ef             	mov    %rbp,%rdi
  421955:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  421959:	48 b8 e8 f1 ff ff ff 	movabs $0xfffffffffffff1e8,%rax
  421960:	ff ff ff 
  421963:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  421967:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  42196e:	ff ff ff 
  421971:	48 01 d8             	add    %rbx,%rax
  421974:	ff d0                	callq  *%rax
  421976:	49 89 c5             	mov    %rax,%r13
  421979:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  421980:	ff ff ff 
  421983:	48 89 ef             	mov    %rbp,%rdi
  421986:	49 89 df             	mov    %rbx,%r15
  421989:	48 01 d8             	add    %rbx,%rax
  42198c:	ff d0                	callq  *%rax
  42198e:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  421995:	ff ff ff 
  421998:	4c 89 ef             	mov    %r13,%rdi
  42199b:	48 01 d8             	add    %rbx,%rax
  42199e:	ff d0                	callq  *%rax
  4219a0:	49 89 c5             	mov    %rax,%r13
                T(x)
  4219a3:	48 b8 50 cb de ff ff 	movabs $0xffffffffffdecb50,%rax
  4219aa:	ff ff ff 
  4219ad:	48 89 ef             	mov    %rbp,%rdi
  4219b0:	48 01 d8             	add    %rbx,%rax
  4219b3:	ff d0                	callq  *%rax
  4219b5:	48 b8 50 cb de ff ff 	movabs $0xffffffffffdecb50,%rax
  4219bc:	ff ff ff 
  4219bf:	4c 89 e7             	mov    %r12,%rdi
  4219c2:	48 01 d8             	add    %rbx,%rax
  4219c5:	ff d0                	callq  *%rax
  4219c7:	eb b0                	jmp    421979 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x1c9>
  4219c9:	49 89 c5             	mov    %rax,%r13
        ~validation_error() throw() {}
  4219cc:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4219d3:	ff ff ff 
  4219d6:	48 89 ef             	mov    %rbp,%rdi
  4219d9:	48 01 d8             	add    %rbx,%rax
  4219dc:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4219e0:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  4219e7:	ff ff ff 
  4219ea:	48 01 d8             	add    %rbx,%rax
  4219ed:	ff d0                	callq  *%rax
  4219ef:	eb c4                	jmp    4219b5 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x205>
  4219f1:	49 89 c5             	mov    %rax,%r13
  4219f4:	eb bf                	jmp    4219b5 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x205>
  4219f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4219fd:	00 00 00 

0000000000421a00 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_>:
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  421a00:	41 57                	push   %r15
  421a02:	41 56                	push   %r14
  421a04:	49 bb 00 96 20 00 00 	movabs $0x209600,%r11
  421a0b:	00 00 00 
  421a0e:	41 55                	push   %r13
  421a10:	41 54                	push   %r12
  421a12:	49 89 fd             	mov    %rdi,%r13
  421a15:	55                   	push   %rbp
  421a16:	53                   	push   %rbx
  421a17:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 421a00 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_>
    throw enable_current_exception(enable_error_info(e));
  421a1e:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  421a25:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  421a28:	49 be 50 5e df ff ff 	movabs $0xffffffffffdf5e50,%r14
  421a2f:	ff ff ff 
  421a32:	bf f0 00 00 00       	mov    $0xf0,%edi
  421a37:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  421a3a:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    throw enable_current_exception(enable_error_info(e));
  421a41:	49 89 df             	mov    %rbx,%r15
  421a44:	48 01 d8             	add    %rbx,%rax
  421a47:	49 89 e4             	mov    %rsp,%r12
  421a4a:	ff d0                	callq  *%rax
  421a4c:	4c 89 ee             	mov    %r13,%rsi
  421a4f:	48 89 c5             	mov    %rax,%rbp
  421a52:	48 89 e7             	mov    %rsp,%rdi
  421a55:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  421a59:	ff d0                	callq  *%rax
  421a5b:	41 8b 85 b8 00 00 00 	mov    0xb8(%r13),%eax
                px_(0)
  421a62:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  421a69:	00 00 00 00 00 
  421a6e:	48 89 e6             	mov    %rsp,%rsi
            throw_line_(-1)
  421a71:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  421a78:	00 00 00 00 00 
  421a7d:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
  421a84:	00 00 00 00 00 
  421a89:	48 89 ef             	mov    %rbp,%rdi
  421a8c:	c7 84 24 e0 00 00 00 	movl   $0xffffffff,0xe0(%rsp)
  421a93:	ff ff ff ff 
  421a97:	89 84 24 b8 00 00 00 	mov    %eax,0xb8(%rsp)
                T(x)
  421a9e:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  421aa5:	ff ff ff 
  421aa8:	48 01 d8             	add    %rbx,%rax
  421aab:	48 89 04 24          	mov    %rax,(%rsp)
  421aaf:	48 83 c0 38          	add    $0x38,%rax
  421ab3:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  421aba:	00 
        clone_base
  421abb:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421ac2:	ff ff ff 
  421ac5:	48 01 d8             	add    %rbx,%rax
  421ac8:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  421acf:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  421ad3:	ff d0                	callq  *%rax
  421ad5:	49 bd 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%r13
  421adc:	ff ff ff 
                px_(x.px_)
  421adf:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  421ae6:	00 
  421ae7:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  421aec:	48 89 45 00          	mov    %rax,0x0(%rbp)
  421af0:	8b 84 24 b8 00 00 00 	mov    0xb8(%rsp),%eax
  421af7:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  421afe:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    exception
  421b04:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  421b0b:	ff ff ff 
  421b0e:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  421b11:	48 85 ff             	test   %rdi,%rdi
    exception
  421b14:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  421b1b:	74 06                	je     421b23 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x123>
                    px_->add_ref();
  421b1d:	48 8b 07             	mov    (%rdi),%rax
  421b20:	ff 50 18             	callq  *0x18(%rax)
    exception
  421b23:	8b 84 24 e0 00 00 00 	mov    0xe0(%rsp),%eax
                copy_boost_exception(this,&x);
  421b2a:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  421b31:	00 
  421b32:	48 8d bd c0 00 00 00 	lea    0xc0(%rbp),%rdi
    exception
  421b39:	66 0f 6f 84 24 d0 00 	movdqa 0xd0(%rsp),%xmm0
  421b40:	00 00 
  421b42:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
                T(x)
  421b48:	48 b8 30 f5 ff ff ff 	movabs $0xfffffffffffff530,%rax
  421b4f:	ff ff ff 
  421b52:	48 01 d8             	add    %rbx,%rax
  421b55:	48 8d 50 48          	lea    0x48(%rax),%rdx
  421b59:	48 89 45 00          	mov    %rax,0x0(%rbp)
  421b5d:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  421b61:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                copy_boost_exception(this,&x);
  421b68:	48 b8 40 a6 de ff ff 	movabs $0xffffffffffdea640,%rax
  421b6f:	ff ff ff 
    exception
  421b72:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                T(x)
  421b79:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                copy_boost_exception(this,&x);
  421b80:	48 01 d8             	add    %rbx,%rax
  421b83:	ff d0                	callq  *%rax
  421b85:	48 b8 00 ca de ff ff 	movabs $0xffffffffffdeca00,%rax
  421b8c:	ff ff ff 
  421b8f:	4c 89 e7             	mov    %r12,%rdi
  421b92:	49 89 df             	mov    %rbx,%r15
  421b95:	48 01 d8             	add    %rbx,%rax
  421b98:	ff d0                	callq  *%rax
  421b9a:	48 b8 c0 cc de ff ff 	movabs $0xffffffffffdeccc0,%rax
  421ba1:	ff ff ff 
  421ba4:	48 89 ef             	mov    %rbp,%rdi
  421ba7:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  421bab:	48 b8 58 f2 ff ff ff 	movabs $0xfffffffffffff258,%rax
  421bb2:	ff ff ff 
  421bb5:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  421bb9:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  421bc0:	ff ff ff 
  421bc3:	48 01 d8             	add    %rbx,%rax
  421bc6:	ff d0                	callq  *%rax
  421bc8:	49 89 c5             	mov    %rax,%r13
  421bcb:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  421bd2:	ff ff ff 
  421bd5:	48 89 ef             	mov    %rbp,%rdi
  421bd8:	49 89 df             	mov    %rbx,%r15
  421bdb:	48 01 d8             	add    %rbx,%rax
  421bde:	ff d0                	callq  *%rax
  421be0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  421be7:	ff ff ff 
  421bea:	4c 89 ef             	mov    %r13,%rdi
  421bed:	48 01 d8             	add    %rbx,%rax
  421bf0:	ff d0                	callq  *%rax
  421bf2:	49 89 c5             	mov    %rax,%r13
                T(x)
  421bf5:	48 b8 00 ca de ff ff 	movabs $0xffffffffffdeca00,%rax
  421bfc:	ff ff ff 
  421bff:	48 89 ef             	mov    %rbp,%rdi
  421c02:	48 01 d8             	add    %rbx,%rax
  421c05:	ff d0                	callq  *%rax
  421c07:	48 b8 00 ca de ff ff 	movabs $0xffffffffffdeca00,%rax
  421c0e:	ff ff ff 
  421c11:	4c 89 e7             	mov    %r12,%rdi
  421c14:	48 01 d8             	add    %rbx,%rax
  421c17:	ff d0                	callq  *%rax
  421c19:	eb b0                	jmp    421bcb <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x1cb>
  421c1b:	49 89 c6             	mov    %rax,%r14
        ~validation_error() throw() {}
  421c1e:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  421c23:	48 89 ef             	mov    %rbp,%rdi
  421c26:	4d 89 f5             	mov    %r14,%r13
  421c29:	48 89 45 00          	mov    %rax,0x0(%rbp)
  421c2d:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  421c34:	ff ff ff 
  421c37:	48 01 d8             	add    %rbx,%rax
  421c3a:	ff d0                	callq  *%rax
  421c3c:	eb c9                	jmp    421c07 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x207>
  421c3e:	49 89 c5             	mov    %rax,%r13
  421c41:	eb c4                	jmp    421c07 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x207>
  421c43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  421c4a:	00 00 00 
  421c4d:	0f 1f 00             	nopl   (%rax)

0000000000421c50 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb>:
        const std::basic_string<charT>& get_single_string(
  421c50:	41 57                	push   %r15
  421c52:	41 56                	push   %r14
  421c54:	49 bb b0 93 20 00 00 	movabs $0x2093b0,%r11
  421c5b:	00 00 00 
  421c5e:	41 55                	push   %r13
  421c60:	41 54                	push   %r12
            static std::basic_string<charT> empty;
  421c62:	49 bc 20 3e 85 01 00 	movabs $0x1853e20,%r12
  421c69:	00 00 00 
        const std::basic_string<charT>& get_single_string(
  421c6c:	55                   	push   %rbp
  421c6d:	53                   	push   %rbx
  421c6e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 421c50 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb>
  421c75:	48 89 fd             	mov    %rdi,%rbp
  421c78:	41 89 f5             	mov    %esi,%r13d
  421c7b:	4c 01 db             	add    %r11,%rbx
  421c7e:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
            static std::basic_string<charT> empty;
  421c85:	42 0f b6 04 23       	movzbl (%rbx,%r12,1),%eax
  421c8a:	84 c0                	test   %al,%al
  421c8c:	74 4a                	je     421cd8 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x88>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  421c8e:	48 8b 45 00          	mov    0x0(%rbp),%rax
  421c92:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  421c96:	48 29 c2             	sub    %rax,%rdx
  421c99:	48 c1 fa 05          	sar    $0x5,%rdx
            if (v.size() > 1)
  421c9d:	48 83 fa 01          	cmp    $0x1,%rdx
  421ca1:	0f 87 bc 00 00 00    	ja     421d63 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x113>
            else if (v.size() == 1)
  421ca7:	74 16                	je     421cbf <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x6f>
            else if (!allow_empty)
  421ca9:	45 84 ed             	test   %r13b,%r13b
  421cac:	0f 84 97 01 00 00    	je     421e49 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1f9>
            return empty;
  421cb2:	48 b8 40 3e 85 01 00 	movabs $0x1853e40,%rax
  421cb9:	00 00 00 
  421cbc:	48 01 d8             	add    %rbx,%rax
        }
  421cbf:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  421cc6:	5b                   	pop    %rbx
  421cc7:	5d                   	pop    %rbp
  421cc8:	41 5c                	pop    %r12
  421cca:	41 5d                	pop    %r13
  421ccc:	41 5e                	pop    %r14
  421cce:	41 5f                	pop    %r15
  421cd0:	c3                   	retq   
  421cd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            static std::basic_string<charT> empty;
  421cd8:	48 b8 60 ea dd ff ff 	movabs $0xffffffffffddea60,%rax
  421cdf:	ff ff ff 
  421ce2:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
  421ce6:	49 89 df             	mov    %rbx,%r15
  421ce9:	48 01 d8             	add    %rbx,%rax
  421cec:	ff d0                	callq  *%rax
  421cee:	85 c0                	test   %eax,%eax
  421cf0:	74 9c                	je     421c8e <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x3e>
	: allocator_type(__a), _M_p(__dat) { }
  421cf2:	48 b8 50 3e 85 01 00 	movabs $0x1853e50,%rax
  421cf9:	00 00 00 
  421cfc:	49 be 40 3e 85 01 00 	movabs $0x1853e40,%r14
  421d03:	00 00 00 
  421d06:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
  421d0a:	48 01 d8             	add    %rbx,%rax
      { _M_string_length = __length; }
  421d0d:	4a c7 44 33 08 00 00 	movq   $0x0,0x8(%rbx,%r14,1)
  421d14:	00 00 
  421d16:	42 c6 44 33 10 00    	movb   $0x0,0x10(%rbx,%r14,1)
	: allocator_type(__a), _M_p(__dat) { }
  421d1c:	4a 89 04 33          	mov    %rax,(%rbx,%r14,1)
  421d20:	48 b8 d0 e5 dd ff ff 	movabs $0xffffffffffdde5d0,%rax
  421d27:	ff ff ff 
  421d2a:	48 01 d8             	add    %rbx,%rax
  421d2d:	ff d0                	callq  *%rax
  421d2f:	48 b8 d0 03 00 00 00 	movabs $0x3d0,%rax
  421d36:	00 00 00 
  421d39:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421d3d:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  421d41:	48 b8 88 ff ff ff ff 	movabs $0xffffffffffffff88,%rax
  421d48:	ff ff ff 
  421d4b:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  421d4f:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  421d56:	ff ff ff 
  421d59:	48 01 d8             	add    %rbx,%rax
  421d5c:	ff d0                	callq  *%rax
  421d5e:	e9 2b ff ff ff       	jmpq   421c8e <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x3e>
                boost::throw_exception(validation_error(validation_error::multiple_values_not_allowed));
  421d63:	48 8d 6c 24 20       	lea    0x20(%rsp),%rbp
  421d68:	49 be c2 80 df ff ff 	movabs $0xffffffffffdf80c2,%r14
  421d6f:	ff ff ff 
  421d72:	48 b8 10 2d de ff ff 	movabs $0xffffffffffde2d10,%rax
  421d79:	ff ff ff 
  421d7c:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421d80:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  421d84:	49 89 e4             	mov    %rsp,%r12
  421d87:	48 89 ef             	mov    %rbp,%rdi
  421d8a:	41 ff d5             	callq  *%r13
  421d8d:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421d91:	48 89 e7             	mov    %rsp,%rdi
  421d94:	41 ff d5             	callq  *%r13
  421d97:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
  421d9c:	48 b8 50 a5 de ff ff 	movabs $0xffffffffffdea550,%rax
  421da3:	ff ff ff 
  421da6:	45 31 c0             	xor    %r8d,%r8d
  421da9:	48 89 e9             	mov    %rbp,%rcx
  421dac:	48 89 e2             	mov    %rsp,%rdx
  421daf:	be 1e 00 00 00       	mov    $0x1e,%esi
  421db4:	4c 89 f7             	mov    %r14,%rdi
  421db7:	48 01 d8             	add    %rbx,%rax
  421dba:	ff d0                	callq  *%rax
  421dbc:	48 b8 00 6a df ff ff 	movabs $0xffffffffffdf6a00,%rax
  421dc3:	ff ff ff 
  421dc6:	4c 89 f7             	mov    %r14,%rdi
  421dc9:	48 01 d8             	add    %rbx,%rax
  421dcc:	ff d0                	callq  *%rax
  421dce:	49 89 c5             	mov    %rax,%r13
  421dd1:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  421dd8:	ff ff ff 
  421ddb:	4c 89 f7             	mov    %r14,%rdi
  421dde:	48 01 d8             	add    %rbx,%rax
  421de1:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  421de6:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  421ded:	ff ff ff 
  421df0:	48 01 d8             	add    %rbx,%rax
  421df3:	ff d0                	callq  *%rax
  421df5:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  421df9:	49 83 c4 10          	add    $0x10,%r12
  421dfd:	4c 39 e7             	cmp    %r12,%rdi
  421e00:	74 12                	je     421e14 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1c4>
  421e02:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  421e09:	ff ff ff 
  421e0c:	49 89 df             	mov    %rbx,%r15
  421e0f:	48 01 d8             	add    %rbx,%rax
  421e12:	ff d0                	callq  *%rax
  421e14:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  421e19:	48 83 c5 10          	add    $0x10,%rbp
  421e1d:	48 39 ef             	cmp    %rbp,%rdi
  421e20:	74 12                	je     421e34 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1e4>
  421e22:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  421e29:	ff ff ff 
  421e2c:	49 89 df             	mov    %rbx,%r15
  421e2f:	48 01 d8             	add    %rbx,%rax
  421e32:	ff d0                	callq  *%rax
  421e34:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  421e3b:	ff ff ff 
  421e3e:	4c 89 ef             	mov    %r13,%rdi
  421e41:	49 89 df             	mov    %rbx,%r15
  421e44:	48 01 d8             	add    %rbx,%rax
  421e47:	ff d0                	callq  *%rax
                boost::throw_exception(validation_error(validation_error::at_least_one_value_required));
  421e49:	48 8d 6c 24 20       	lea    0x20(%rsp),%rbp
  421e4e:	49 be c2 80 df ff ff 	movabs $0xffffffffffdf80c2,%r14
  421e55:	ff ff ff 
  421e58:	48 b8 10 2d de ff ff 	movabs $0xffffffffffde2d10,%rax
  421e5f:	ff ff ff 
  421e62:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421e66:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  421e6a:	49 89 e4             	mov    %rsp,%r12
  421e6d:	48 89 ef             	mov    %rbp,%rdi
  421e70:	41 ff d5             	callq  *%r13
  421e73:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421e77:	48 89 e7             	mov    %rsp,%rdi
  421e7a:	41 ff d5             	callq  *%r13
  421e7d:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
  421e82:	48 b8 50 a5 de ff ff 	movabs $0xffffffffffdea550,%rax
  421e89:	ff ff ff 
  421e8c:	45 31 c0             	xor    %r8d,%r8d
  421e8f:	48 89 e9             	mov    %rbp,%rcx
  421e92:	48 89 e2             	mov    %rsp,%rdx
  421e95:	be 1f 00 00 00       	mov    $0x1f,%esi
  421e9a:	4c 89 f7             	mov    %r14,%rdi
  421e9d:	48 01 d8             	add    %rbx,%rax
  421ea0:	ff d0                	callq  *%rax
  421ea2:	48 b8 00 6a df ff ff 	movabs $0xffffffffffdf6a00,%rax
  421ea9:	ff ff ff 
  421eac:	4c 89 f7             	mov    %r14,%rdi
  421eaf:	48 01 d8             	add    %rbx,%rax
  421eb2:	ff d0                	callq  *%rax
  421eb4:	e9 15 ff ff ff       	jmpq   421dce <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x17e>
  421eb9:	49 89 c5             	mov    %rax,%r13
  421ebc:	e9 34 ff ff ff       	jmpq   421df5 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1a5>
  421ec1:	49 89 c5             	mov    %rax,%r13
  421ec4:	e9 4b ff ff ff       	jmpq   421e14 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1c4>
  421ec9:	eb ee                	jmp    421eb9 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x269>
  421ecb:	eb f4                	jmp    421ec1 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x271>
  421ecd:	0f 1f 00             	nopl   (%rax)

0000000000421ed0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l>:
    void validate(boost::any& v, 
  421ed0:	41 57                	push   %r15
  421ed2:	41 56                	push   %r14
  421ed4:	49 bb 30 91 20 00 00 	movabs $0x209130,%r11
  421edb:	00 00 00 
  421ede:	41 55                	push   %r13
  421ee0:	41 54                	push   %r12
        validators::check_first_occurrence(v);
  421ee2:	48 b8 a0 e9 dd ff ff 	movabs $0xffffffffffdde9a0,%rax
  421ee9:	ff ff ff 
    void validate(boost::any& v, 
  421eec:	55                   	push   %rbp
  421eed:	53                   	push   %rbx
  421eee:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 421ed0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l>
  421ef5:	48 89 f5             	mov    %rsi,%rbp
  421ef8:	49 89 fd             	mov    %rdi,%r13
  421efb:	48 81 ec 98 02 00 00 	sub    $0x298,%rsp
  421f02:	4c 01 db             	add    %r11,%rbx
        validators::check_first_occurrence(v);
  421f05:	48 01 d8             	add    %rbx,%rax
  421f08:	49 89 df             	mov    %rbx,%r15
  421f0b:	ff d0                	callq  *%rax
        std::basic_string<charT> s(validators::get_single_string(xs));
  421f0d:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  421f10:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  421f15:	48 b8 50 6c df ff ff 	movabs $0xffffffffffdf6c50,%rax
  421f1c:	ff ff ff 
  421f1f:	31 f6                	xor    %esi,%esi
  421f21:	48 01 d8             	add    %rbx,%rax
  421f24:	ff d0                	callq  *%rax
  421f26:	48 8d 55 10          	lea    0x10(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  421f2a:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  421f2d:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  421f32:	48 8b 30             	mov    (%rax),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  421f35:	48 89 f2             	mov    %rsi,%rdx
  421f38:	48 03 50 08          	add    0x8(%rax),%rdx
          _M_construct(__beg, __end, _Tag());
  421f3c:	48 b8 10 2c de ff ff 	movabs $0xffffffffffde2c10,%rax
  421f43:	ff ff ff 
  421f46:	48 01 d8             	add    %rbx,%rax
  421f49:	ff d0                	callq  *%rax
  421f4b:	4c 8b 74 24 50       	mov    0x50(%rsp),%r14
namespace boost 
{
    template <typename Target, typename Source>
    inline Target lexical_cast(const Source &arg)
    {
        Target result = Target();
  421f50:	48 b8 4c 96 df ff ff 	movabs $0xffffffffffdf964c,%rax
  421f57:	ff ff ff 
  421f5a:	f3 0f 10 04 03       	movss  (%rbx,%rax,1),%xmm0
  421f5f:	f3 0f 11 44 24 2c    	movss  %xmm0,0x2c(%rsp)
/************************************ OPERATORS << ( ... ) ********************************/
        public:
            template<class Alloc>
            bool operator<<(std::basic_string<CharT,Traits,Alloc> const& str) BOOST_NOEXCEPT {
                start = str.data();
                finish = start + str.length();
  421f65:	4d 89 f4             	mov    %r14,%r12
  421f68:	4c 03 64 24 58       	add    0x58(%rsp),%r12
            , const CharT* lc_NAN, const CharT* lc_nan
            , const CharT* lc_INFINITY, const CharT* lc_infinity
            , const CharT opening_brace, const CharT closing_brace) BOOST_NOEXCEPT
        {
            using namespace std;
            if (begin == end) return false;
  421f6d:	4d 39 e6             	cmp    %r12,%r14
  421f70:	0f 84 8a 00 00 00    	je     422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
            const CharT minus = lcast_char_constants<CharT>::minus;
            const CharT plus = lcast_char_constants<CharT>::plus;
            const int inifinity_size = 8; // == sizeof("infinity") - 1

            /* Parsing +/- */
            bool const has_minus = (*begin == minus);
  421f76:	41 0f b6 0e          	movzbl (%r14),%ecx
            if (has_minus || *begin == plus) {
                ++ begin;
            }

            if (end - begin < 3) return false;
  421f7a:	4c 89 e2             	mov    %r12,%rdx
            if (has_minus || *begin == plus) {
  421f7d:	8d 41 d5             	lea    -0x2b(%rcx),%eax
  421f80:	83 e0 fd             	and    $0xfffffffd,%eax
                ++ begin;
  421f83:	3c 01                	cmp    $0x1,%al
  421f85:	4c 89 f0             	mov    %r14,%rax
  421f88:	48 83 d0 00          	adc    $0x0,%rax
            if (end - begin < 3) return false;
  421f8c:	48 29 c2             	sub    %rax,%rdx
  421f8f:	48 83 fa 02          	cmp    $0x2,%rdx
  421f93:	7e 6b                	jle    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                if ( val[i] != lcase[i] && val[i] != ucase[i] ) return false;
  421f95:	0f b6 30             	movzbl (%rax),%esi
  421f98:	40 80 fe 6e          	cmp    $0x6e,%sil
  421f9c:	74 0a                	je     421fa8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0xd8>
  421f9e:	40 80 fe 4e          	cmp    $0x4e,%sil
  421fa2:	0f 85 f8 02 00 00    	jne    4222a0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3d0>
  421fa8:	0f b6 78 01          	movzbl 0x1(%rax),%edi
  421fac:	40 80 ff 61          	cmp    $0x61,%dil
  421fb0:	74 0a                	je     421fbc <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0xec>
  421fb2:	40 80 ff 41          	cmp    $0x41,%dil
  421fb6:	0f 85 e4 02 00 00    	jne    4222a0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3d0>
  421fbc:	0f b6 78 02          	movzbl 0x2(%rax),%edi
  421fc0:	40 80 ff 6e          	cmp    $0x6e,%dil
  421fc4:	74 0a                	je     421fd0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x100>
  421fc6:	40 80 ff 4e          	cmp    $0x4e,%dil
  421fca:	0f 85 d0 02 00 00    	jne    4222a0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3d0>
            if (lc_iequal(begin, lc_nan, lc_NAN, 3)) {
                begin += 3;
  421fd0:	48 8d 50 03          	lea    0x3(%rax),%rdx
                if (end != begin) {
  421fd4:	49 39 d4             	cmp    %rdx,%r12
  421fd7:	0f 84 3b 04 00 00    	je     422418 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x548>
                    /* It is 'nan(...)' or some bad input*/
                    
                    if (end - begin < 2) return false; // bad input
  421fdd:	4c 89 e6             	mov    %r12,%rsi
  421fe0:	48 29 d6             	sub    %rdx,%rsi
  421fe3:	48 83 fe 01          	cmp    $0x1,%rsi
  421fe7:	7e 17                	jle    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                    -- end;
                    if (*begin != opening_brace || *end != closing_brace) return false; // bad input
  421fe9:	80 78 03 28          	cmpb   $0x28,0x3(%rax)
  421fed:	75 11                	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421fef:	41 80 7c 24 ff 29    	cmpb   $0x29,-0x1(%r12)
  421ff5:	0f 84 1d 04 00 00    	je     422418 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x548>
  421ffb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      _M_buf_locale(locale())
  422000:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  422007:	ff ff ff 
  42200a:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  422011:	00 
  422012:	49 89 df             	mov    %rbx,%r15
  422015:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  42201a:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  42201e:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  422025:	00 00 
  422027:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  42202e:	00 00 00 00 00 
  422033:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  42203a:	00 00 00 00 00 
  42203f:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
  422046:	00 00 00 00 00 
  42204b:	48 83 c0 10          	add    $0x10,%rax
  42204f:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
  422056:	00 00 00 00 00 
  42205b:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
  422062:	00 00 00 00 00 
  422067:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  42206c:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
  422071:	48 89 04 24          	mov    %rax,(%rsp)
  422075:	48 b8 d0 ea dd ff ff 	movabs $0xffffffffffddead0,%rax
  42207c:	ff ff ff 
  42207f:	48 01 d8             	add    %rbx,%rax
  422082:	ff d0                	callq  *%rax
	_M_in_beg = __gbeg;
  422084:	4c 89 74 24 78       	mov    %r14,0x78(%rsp)
	_M_in_cur = __gnext;
  422089:	4c 89 b4 24 80 00 00 	mov    %r14,0x80(%rsp)
  422090:	00 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
  422091:	4c 8d b4 24 70 01 00 	lea    0x170(%rsp),%r14
  422098:	00 
        class basic_unlockedbuf : public basic_pointerbuf<CharT, BufferType> {
  422099:	48 b8 e0 f5 ff ff ff 	movabs $0xfffffffffffff5e0,%rax
  4220a0:	ff ff ff 
	_M_in_end = __gend;
  4220a3:	4c 89 a4 24 88 00 00 	mov    %r12,0x88(%rsp)
  4220aa:	00 
  4220ab:	49 8d 56 10          	lea    0x10(%r14),%rdx
  4220af:	48 01 d8             	add    %rbx,%rax
  4220b2:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  4220b7:	48 b8 40 e4 dd ff ff 	movabs $0xffffffffffdde440,%rax
  4220be:	ff ff ff 
  4220c1:	48 89 d7             	mov    %rdx,%rdi
  4220c4:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  4220c9:	48 01 d8             	add    %rbx,%rax
  4220cc:	ff d0                	callq  *%rax
      : _M_gcount(streamsize(0))
  4220ce:	48 b9 c8 ff ff ff ff 	movabs $0xffffffffffffffc8,%rcx
  4220d5:	ff ff ff 
      { this->init(__sb); }
  4220d8:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  4220dd:	48 c7 84 24 58 02 00 	movq   $0x0,0x258(%rsp)
  4220e4:	00 00 00 00 00 
      : _M_gcount(streamsize(0))
  4220e9:	48 8b 04 19          	mov    (%rcx,%rbx,1),%rax
  4220ed:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  4220f2:	c6 84 24 60 02 00 00 	movb   $0x0,0x260(%rsp)
  4220f9:	00 
  4220fa:	c6 84 24 61 02 00 00 	movb   $0x0,0x261(%rsp)
  422101:	00 
  422102:	48 c7 84 24 68 02 00 	movq   $0x0,0x268(%rsp)
  422109:	00 00 00 00 00 
  42210e:	48 c7 84 24 70 02 00 	movq   $0x0,0x270(%rsp)
  422115:	00 00 00 00 00 
      { this->init(__sb); }
  42211a:	48 89 d7             	mov    %rdx,%rdi
      : _M_gcount(streamsize(0))
  42211d:	48 8d 48 18          	lea    0x18(%rax),%rcx
  422121:	48 83 c0 40          	add    $0x40,%rax
  422125:	48 c7 84 24 78 02 00 	movq   $0x0,0x278(%rsp)
  42212c:	00 00 00 00 00 
  422131:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  422138:	00 
      { this->init(__sb); }
  422139:	48 b8 a0 e8 dd ff ff 	movabs $0xffffffffffdde8a0,%rax
  422140:	ff ff ff 
  422143:	48 c7 84 24 80 02 00 	movq   $0x0,0x280(%rsp)
  42214a:	00 00 00 00 00 
      : _M_gcount(streamsize(0))
  42214f:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
  422156:	00 
  422157:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  42215e:	00 00 00 00 00 
      { this->init(__sb); }
  422163:	48 01 d8             	add    %rbx,%rax
  422166:	48 8b 34 24          	mov    (%rsp),%rsi
  42216a:	ff d0                	callq  *%rax
        this->clear(_M_streambuf_state);
  42216c:	48 b8 e0 e9 dd ff ff 	movabs $0xffffffffffdde9e0,%rax
  422173:	ff ff ff 
        _M_exception = __except;
  422176:	c7 84 24 9c 01 00 00 	movl   $0x1,0x19c(%rsp)
  42217d:	01 00 00 00 
        this->clear(_M_streambuf_state);
  422181:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  422185:	8b b4 24 a0 01 00 00 	mov    0x1a0(%rsp),%esi
  42218c:	49 89 df             	mov    %rbx,%r15
  42218f:	48 01 d8             	add    %rbx,%rax
  422192:	ff d0                	callq  *%rax
       *  These functions use the stream's current locale (specifically, the
       *  @c num_get facet) to parse the input data.
      */
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }
  422194:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  42219b:	ff ff ff 
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
  42219e:	81 a4 24 98 01 00 00 	andl   $0xffffefff,0x198(%rsp)
  4221a5:	ff ef ff ff 
    */
    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
  4221a9:	48 c7 84 24 88 01 00 	movq   $0x9,0x188(%rsp)
  4221b0:	00 09 00 00 00 
  4221b5:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  4221ba:	4c 89 f7             	mov    %r14,%rdi
  4221bd:	48 01 d8             	add    %rbx,%rax
  4221c0:	ff d0                	callq  *%rax
#endif
                stream.unsetf(std::ios::skipws);
                lcast_set_precision(stream, static_cast<InputStreamable*>(0));

                return (stream >> output) 
                    && (stream.get() == Traits::eof());
  4221c2:	48 8b 10             	mov    (%rax),%rdx
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
  4221c5:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  4221c9:	f6 44 10 20 05       	testb  $0x5,0x20(%rax,%rdx,1)
  4221ce:	0f 84 6c 02 00 00    	je     422440 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x570>
      { _M_gcount = streamsize(0); }
  4221d4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      ~basic_ios() { }
  4221d9:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  4221dd:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  4221e4:	00 00 00 00 00 
  4221e9:	49 89 df             	mov    %rbx,%r15
  4221ec:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  4221f0:	48 83 c0 18          	add    $0x18,%rax
  4221f4:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  4221fb:	00 
  4221fc:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  422203:	ff ff ff 
  422206:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  42220a:	48 83 c0 10          	add    $0x10,%rax
  42220e:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  422215:	00 
  422216:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  42221d:	ff ff ff 
  422220:	48 01 d8             	add    %rbx,%rax
  422223:	ff d0                	callq  *%rax
      { }
  422225:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  42222a:	48 8b 3c 24          	mov    (%rsp),%rdi
  42222e:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  422232:	48 83 c7 38          	add    $0x38,%rdi
  422236:	48 83 c0 10          	add    $0x10,%rax
  42223a:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  42223f:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  422246:	ff ff ff 
  422249:	48 01 d8             	add    %rbx,%rax
  42224c:	ff d0                	callq  *%rax
            : source(&source_type_arg), target(&target_type_arg)
  42224e:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  422255:	ff ff ff 
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  422258:	4c 8d 64 24 30       	lea    0x30(%rsp),%r12
            : source(&source_type_arg), target(&target_type_arg)
  42225d:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  422261:	48 b8 60 f8 ff ff ff 	movabs $0xfffffffffffff860,%rax
  422268:	ff ff ff 
  42226b:	48 01 d8             	add    %rbx,%rax
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  42226e:	4c 89 e7             	mov    %r12,%rdi
            : source(&source_type_arg), target(&target_type_arg)
  422271:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  422276:	48 b8 b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rax
  42227d:	ff ff ff 
  422280:	4c 89 6c 24 30       	mov    %r13,0x30(%rsp)
  422285:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  422289:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  42228e:	48 b8 60 0d df ff ff 	movabs $0xffffffffffdf0d60,%rax
  422295:	ff ff ff 
  422298:	48 01 d8             	add    %rbx,%rax
  42229b:	ff d0                	callq  *%rax
  42229d:	0f 1f 00             	nopl   (%rax)
            } else if (
                ( /* 'INF' or 'inf' */
                  end - begin == 3      // 3 == sizeof('inf') - 1
                  && lc_iequal(begin, lc_infinity, lc_INFINITY, 3)
                )
                ||
  4222a0:	48 83 fa 03          	cmp    $0x3,%rdx
  4222a4:	0f 84 2e 01 00 00    	je     4223d8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x508>
  4222aa:	48 83 fa 08          	cmp    $0x8,%rdx
  4222ae:	0f 85 4c fd ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                if ( val[i] != lcase[i] && val[i] != ucase[i] ) return false;
  4222b4:	40 80 fe 69          	cmp    $0x69,%sil
  4222b8:	74 0a                	je     4222c4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3f4>
  4222ba:	40 80 fe 49          	cmp    $0x49,%sil
  4222be:	0f 85 3c fd ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  4222c4:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  4222c8:	80 fa 6e             	cmp    $0x6e,%dl
  4222cb:	74 09                	je     4222d6 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x406>
  4222cd:	80 fa 4e             	cmp    $0x4e,%dl
  4222d0:	0f 85 2a fd ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  4222d6:	0f b6 50 02          	movzbl 0x2(%rax),%edx
  4222da:	80 fa 66             	cmp    $0x66,%dl
  4222dd:	74 09                	je     4222e8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x418>
  4222df:	80 fa 46             	cmp    $0x46,%dl
  4222e2:	0f 85 18 fd ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  4222e8:	0f b6 50 03          	movzbl 0x3(%rax),%edx
  4222ec:	80 fa 69             	cmp    $0x69,%dl
  4222ef:	74 09                	je     4222fa <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x42a>
  4222f1:	80 fa 49             	cmp    $0x49,%dl
  4222f4:	0f 85 06 fd ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  4222fa:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  4222fe:	80 fa 6e             	cmp    $0x6e,%dl
  422301:	74 09                	je     42230c <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x43c>
  422303:	80 fa 4e             	cmp    $0x4e,%dl
  422306:	0f 85 f4 fc ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  42230c:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  422310:	80 fa 69             	cmp    $0x69,%dl
  422313:	74 09                	je     42231e <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x44e>
  422315:	80 fa 49             	cmp    $0x49,%dl
  422318:	0f 85 e2 fc ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  42231e:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  422322:	80 fa 74             	cmp    $0x74,%dl
  422325:	74 09                	je     422330 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x460>
  422327:	80 fa 54             	cmp    $0x54,%dl
  42232a:	0f 85 d0 fc ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  422330:	0f b6 40 07          	movzbl 0x7(%rax),%eax
  422334:	3c 79                	cmp    $0x79,%al
  422336:	74 08                	je     422340 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x470>
  422338:	3c 59                	cmp    $0x59,%al
  42233a:	0f 85 c0 fc ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                  end - begin == inifinity_size
                  && lc_iequal(begin, lc_infinity, lc_INFINITY, inifinity_size)
                )
             )
            {
                if( !has_minus ) value = std::numeric_limits<T>::infinity();
  422340:	80 f9 2d             	cmp    $0x2d,%cl
  422343:	0f 84 bf 01 00 00    	je     422508 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x638>
  422349:	48 b8 48 96 df ff ff 	movabs $0xffffffffffdf9648,%rax
  422350:	ff ff ff 
  422353:	f3 0f 10 1c 03       	movss  (%rbx,%rax,1),%xmm3
  422358:	f3 0f 11 1c 24       	movss  %xmm3,(%rsp)
          : content(new holder< typename decay<ValueType>::type >(static_cast<ValueType&&>(value)))
  42235d:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  422364:	ff ff ff 
  422367:	bf 10 00 00 00       	mov    $0x10,%edi
  42236c:	49 89 df             	mov    %rbx,%r15
  42236f:	48 01 d8             	add    %rbx,%rax
  422372:	ff d0                	callq  *%rax
  422374:	49 8b 7d 00          	mov    0x0(%r13),%rdi
              : held(static_cast< ValueType&& >(value))
  422378:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  42237f:	ff ff ff 
      __b = _GLIBCXX_MOVE(__tmp);
  422382:	49 89 45 00          	mov    %rax,0x0(%r13)
  422386:	48 01 da             	add    %rbx,%rdx
  422389:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
  42238e:	48 89 10             	mov    %rdx,(%rax)
  422391:	f3 0f 11 48 08       	movss  %xmm1,0x8(%rax)
            delete content;
  422396:	48 85 ff             	test   %rdi,%rdi
  422399:	74 06                	je     4223a1 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x4d1>
  42239b:	48 8b 07             	mov    (%rdi),%rax
  42239e:	ff 50 08             	callq  *0x8(%rax)
  4223a1:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
	if (!_M_is_local())
  4223a6:	48 83 c5 10          	add    $0x10,%rbp
  4223aa:	48 39 ef             	cmp    %rbp,%rdi
  4223ad:	74 12                	je     4223c1 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x4f1>
  4223af:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4223b6:	ff ff ff 
  4223b9:	49 89 df             	mov    %rbx,%r15
  4223bc:	48 01 d8             	add    %rbx,%rax
  4223bf:	ff d0                	callq  *%rax
    }
  4223c1:	48 81 c4 98 02 00 00 	add    $0x298,%rsp
  4223c8:	5b                   	pop    %rbx
  4223c9:	5d                   	pop    %rbp
  4223ca:	41 5c                	pop    %r12
  4223cc:	41 5d                	pop    %r13
  4223ce:	41 5e                	pop    %r14
  4223d0:	41 5f                	pop    %r15
  4223d2:	c3                   	retq   
  4223d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                if ( val[i] != lcase[i] && val[i] != ucase[i] ) return false;
  4223d8:	40 80 fe 69          	cmp    $0x69,%sil
  4223dc:	74 0a                	je     4223e8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x518>
  4223de:	40 80 fe 49          	cmp    $0x49,%sil
  4223e2:	0f 85 18 fc ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  4223e8:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  4223ec:	80 fa 6e             	cmp    $0x6e,%dl
  4223ef:	74 09                	je     4223fa <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x52a>
  4223f1:	80 fa 4e             	cmp    $0x4e,%dl
  4223f4:	0f 85 06 fc ff ff    	jne    422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  4223fa:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  4223fe:	3c 66                	cmp    $0x66,%al
  422400:	0f 84 3a ff ff ff    	je     422340 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x470>
  422406:	3c 46                	cmp    $0x46,%al
  422408:	0f 84 32 ff ff ff    	je     422340 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x470>
  42240e:	e9 ed fb ff ff       	jmpq   422000 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  422413:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                if( !has_minus ) value = std::numeric_limits<T>::quiet_NaN();
  422418:	80 f9 2d             	cmp    $0x2d,%cl
  42241b:	0f 84 7f 01 00 00    	je     4225a0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x6d0>
  422421:	48 b8 3c 96 df ff ff 	movabs $0xffffffffffdf963c,%rax
  422428:	ff ff ff 
  42242b:	f3 0f 10 2c 03       	movss  (%rbx,%rax,1),%xmm5
  422430:	f3 0f 11 2c 24       	movss  %xmm5,(%rsp)
  422435:	e9 23 ff ff ff       	jmpq   42235d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  42243a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  422440:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  422447:	ff ff ff 
  42244a:	4c 89 f7             	mov    %r14,%rdi
  42244d:	48 01 d8             	add    %rbx,%rax
  422450:	ff d0                	callq  *%rax
  422452:	83 f8 ff             	cmp    $0xffffffff,%eax
  422455:	0f 85 79 fd ff ff    	jne    4221d4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x304>
  42245b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  422460:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  422464:	49 89 df             	mov    %rbx,%r15
  422467:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  42246e:	00 00 00 00 00 
  422473:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  422477:	48 83 c0 18          	add    $0x18,%rax
  42247b:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  422482:	00 
  422483:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  42248a:	ff ff ff 
  42248d:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  422491:	48 83 c0 10          	add    $0x10,%rax
  422495:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  42249c:	00 
  42249d:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  4224a4:	ff ff ff 
  4224a7:	48 01 d8             	add    %rbx,%rax
  4224aa:	ff d0                	callq  *%rax
  4224ac:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4224b1:	48 8b 3c 24          	mov    (%rsp),%rdi
  4224b5:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  4224b9:	48 83 c7 38          	add    $0x38,%rdi
  4224bd:	48 83 c0 10          	add    $0x10,%rax
  4224c1:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  4224c6:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  4224cd:	ff ff ff 
  4224d0:	48 01 d8             	add    %rbx,%rax
  4224d3:	ff d0                	callq  *%rax
  4224d5:	41 0f b6 44 24 ff    	movzbl -0x1(%r12),%eax
                if ( return_value &&
                     (
                        Traits::eq(*(finish-1), lowercase_e)                   // 1.0e
                        || Traits::eq(*(finish-1), capital_e)                  // 1.0E
                        || Traits::eq(*(finish-1), minus)                      // 1.0e- or 1.0E-
                        || Traits::eq(*(finish-1), plus)                       // 1.0e+ or 1.0E+
  4224db:	8d 50 d5             	lea    -0x2b(%rax),%edx
                    return false;

                o_interpreter_type out(i_interpreter.cbegin(), i_interpreter.cend());

                // Disabling ADL, by directly specifying operators.
                if(!(out.operator >>(result)))
  4224de:	81 e2 fd 00 00 00    	and    $0xfd,%edx
  4224e4:	0f 84 64 fd ff ff    	je     42224e <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x37e>
                        || Traits::eq(*(finish-1), capital_e)                  // 1.0E
  4224ea:	83 e0 df             	and    $0xffffffdf,%eax
  4224ed:	3c 45                	cmp    $0x45,%al
  4224ef:	0f 84 59 fd ff ff    	je     42224e <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x37e>
  4224f5:	f3 0f 10 54 24 2c    	movss  0x2c(%rsp),%xmm2
  4224fb:	f3 0f 11 14 24       	movss  %xmm2,(%rsp)
  422500:	e9 58 fe ff ff       	jmpq   42235d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  422505:	0f 1f 00             	nopl   (%rax)
                if( !has_minus ) value = std::numeric_limits<T>::infinity();
  422508:	48 b8 40 96 df ff ff 	movabs $0xffffffffffdf9640,%rax
  42250f:	ff ff ff 
  422512:	f3 0f 10 24 03       	movss  (%rbx,%rax,1),%xmm4
  422517:	f3 0f 11 24 24       	movss  %xmm4,(%rsp)
  42251c:	e9 3c fe ff ff       	jmpq   42235d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  422521:	49 89 d6             	mov    %rdx,%r14
        {}
  422524:	48 ba 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rdx
  42252b:	ff ff ff 
  42252e:	48 89 04 24          	mov    %rax,(%rsp)
  422532:	48 01 da             	add    %rbx,%rdx
  422535:	4c 89 6c 24 30       	mov    %r13,0x30(%rsp)
  42253a:	4c 89 e7             	mov    %r12,%rdi
  42253d:	49 89 df             	mov    %rbx,%r15
  422540:	ff d2                	callq  *%rdx
  422542:	48 8b 04 24          	mov    (%rsp),%rax
  422546:	4c 89 f2             	mov    %r14,%rdx
  422549:	48 83 ea 01          	sub    $0x1,%rdx
  42254d:	49 89 c4             	mov    %rax,%r12
  422550:	0f 85 9f 00 00 00    	jne    4225f5 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x725>
        catch(const bad_lexical_cast&) {
  422556:	48 89 c7             	mov    %rax,%rdi
            boost::throw_exception(invalid_option_value(s));
  422559:	4c 8d ac 24 b0 00 00 	lea    0xb0(%rsp),%r13
  422560:	00 
        catch(const bad_lexical_cast&) {
  422561:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  422568:	ff ff ff 
  42256b:	49 89 df             	mov    %rbx,%r15
  42256e:	48 01 d8             	add    %rbx,%rax
  422571:	ff d0                	callq  *%rax
            boost::throw_exception(invalid_option_value(s));
  422573:	48 b8 90 e5 dd ff ff 	movabs $0xffffffffffdde590,%rax
  42257a:	ff ff ff 
  42257d:	48 89 ee             	mov    %rbp,%rsi
  422580:	4c 89 ef             	mov    %r13,%rdi
  422583:	48 01 d8             	add    %rbx,%rax
  422586:	ff d0                	callq  *%rax
  422588:	48 b8 b0 67 df ff ff 	movabs $0xffffffffffdf67b0,%rax
  42258f:	ff ff ff 
  422592:	4c 89 ef             	mov    %r13,%rdi
  422595:	48 01 d8             	add    %rbx,%rax
  422598:	ff d0                	callq  *%rax
  42259a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                if( !has_minus ) value = std::numeric_limits<T>::quiet_NaN();
  4225a0:	48 b8 44 96 df ff ff 	movabs $0xffffffffffdf9644,%rax
  4225a7:	ff ff ff 
  4225aa:	f3 0f 10 34 03       	movss  (%rbx,%rax,1),%xmm6
  4225af:	f3 0f 11 34 24       	movss  %xmm6,(%rsp)
  4225b4:	e9 a4 fd ff ff       	jmpq   42235d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  4225b9:	49 89 c4             	mov    %rax,%r12
  4225bc:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4225c3:	ff ff ff 
  4225c6:	4c 89 ef             	mov    %r13,%rdi
  4225c9:	48 01 d8             	add    %rbx,%rax
  4225cc:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  4225d3:	00 
  4225d4:	48 b8 b0 c7 de ff ff 	movabs $0xffffffffffdec7b0,%rax
  4225db:	ff ff ff 
  4225de:	48 01 d8             	add    %rbx,%rax
  4225e1:	ff d0                	callq  *%rax
        catch(const bad_lexical_cast&) {
  4225e3:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  4225ea:	ff ff ff 
  4225ed:	49 89 df             	mov    %rbx,%r15
  4225f0:	48 01 d8             	add    %rbx,%rax
  4225f3:	ff d0                	callq  *%rax
  4225f5:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  4225fa:	48 83 c5 10          	add    $0x10,%rbp
  4225fe:	48 39 ef             	cmp    %rbp,%rdi
  422601:	74 12                	je     422615 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x745>
  422603:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  42260a:	ff ff ff 
  42260d:	49 89 df             	mov    %rbx,%r15
  422610:	48 01 d8             	add    %rbx,%rax
  422613:	ff d0                	callq  *%rax
  422615:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  42261c:	ff ff ff 
  42261f:	4c 89 e7             	mov    %r12,%rdi
  422622:	49 89 df             	mov    %rbx,%r15
  422625:	48 01 d8             	add    %rbx,%rax
  422628:	ff d0                	callq  *%rax
  42262a:	49 89 c4             	mov    %rax,%r12
  42262d:	eb b4                	jmp    4225e3 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x713>
  42262f:	e9 15 ff ff ff       	jmpq   422549 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x679>
  422634:	48 83 fa 02          	cmp    $0x2,%rdx
  422638:	0f 85 96 00 00 00    	jne    4226d4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x804>
                } catch (const ::std::ios_base::failure& /*f*/) {
  42263e:	48 89 c7             	mov    %rax,%rdi
  422641:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  422648:	ff ff ff 
  42264b:	49 89 df             	mov    %rbx,%r15
  42264e:	48 01 d8             	add    %rbx,%rax
  422651:	ff d0                	callq  *%rax
  422653:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  42265a:	ff ff ff 
  42265d:	48 01 d8             	add    %rbx,%rax
  422660:	ff d0                	callq  *%rax
  422662:	e9 6d fb ff ff       	jmpq   4221d4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x304>
  422667:	49 89 c4             	mov    %rax,%r12
  42266a:	49 89 d5             	mov    %rdx,%r13
  42266d:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  422674:	ff ff ff 
  422677:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  42267b:	49 89 df             	mov    %rbx,%r15
  42267e:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  422682:	48 83 c0 10          	add    $0x10,%rax
  422686:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  42268d:	00 
  42268e:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  422695:	ff ff ff 
  422698:	48 01 d8             	add    %rbx,%rax
  42269b:	ff d0                	callq  *%rax
  42269d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4226a2:	48 8b 3c 24          	mov    (%rsp),%rdi
  4226a6:	49 89 df             	mov    %rbx,%r15
  4226a9:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  4226ad:	48 83 c7 38          	add    $0x38,%rdi
  4226b1:	48 83 c0 10          	add    $0x10,%rax
  4226b5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  4226ba:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  4226c1:	ff ff ff 
  4226c4:	48 01 d8             	add    %rbx,%rax
  4226c7:	ff d0                	callq  *%rax
  4226c9:	4c 89 e0             	mov    %r12,%rax
  4226cc:	4c 89 ea             	mov    %r13,%rdx
  4226cf:	e9 75 fe ff ff       	jmpq   422549 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x679>
  4226d4:	49 89 c4             	mov    %rax,%r12
  4226d7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4226dc:	49 89 d5             	mov    %rdx,%r13
  4226df:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  4226e6:	00 00 00 00 00 
  4226eb:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  4226ef:	48 83 c0 18          	add    $0x18,%rax
  4226f3:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  4226fa:	00 
  4226fb:	e9 6d ff ff ff       	jmpq   42266d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x79d>

0000000000422700 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE>:
    typed_value<T, charT>::
  422700:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 422700 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE>
  422707:	49 bb 00 89 20 00 00 	movabs $0x208900,%r11
  42270e:	00 00 00 
  422711:	48 89 f9             	mov    %rdi,%rcx
  422714:	48 89 f7             	mov    %rsi,%rdi
  422717:	48 89 d6             	mov    %rdx,%rsi
        if (new_tokens.empty() && !m_implicit_value.empty())
  42271a:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  42271e:	4c 01 d8             	add    %r11,%rax
  422721:	48 39 16             	cmp    %rdx,(%rsi)
  422724:	74 1a                	je     422740 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE+0x40>
            validate(value_store, new_tokens, (T*)0, 0);
  422726:	49 b8 d0 6e df ff ff 	movabs $0xffffffffffdf6ed0,%r8
  42272d:	ff ff ff 
  422730:	31 c9                	xor    %ecx,%ecx
  422732:	31 d2                	xor    %edx,%edx
  422734:	4c 01 c0             	add    %r8,%rax
  422737:	ff e0                	jmpq   *%rax
  422739:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if (new_tokens.empty() && !m_implicit_value.empty())
  422740:	48 83 79 60 00       	cmpq   $0x0,0x60(%rcx)
  422745:	74 df                	je     422726 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE+0x26>
            value_store = m_implicit_value;
  422747:	48 ba 80 aa de ff ff 	movabs $0xffffffffffdeaa80,%rdx
  42274e:	ff ff ff 
  422751:	48 8d 71 60          	lea    0x60(%rcx),%rsi
  422755:	48 01 d0             	add    %rdx,%rax
  422758:	ff e0                	jmpq   *%rax
  42275a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000422760 <_ZL19abort_unimplementedPKc>:
}

/* Unimplemented functions below. Programs rarely use these, so rather than
 * implementing the library in full, we do these on demand */

static void abort_unimplemented(const char* fn) {
  422760:	53                   	push   %rbx
  422761:	4c 8d 05 e8 1e 00 00 	lea    0x1ee8(%rip),%r8        # 424650 <_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEEE+0x90>
  422768:	49 89 f9             	mov    %rdi,%r9
  42276b:	b9 00 04 00 00       	mov    $0x400,%ecx
  422770:	ba 01 00 00 00       	mov    $0x1,%edx
  422775:	be 00 04 00 00       	mov    $0x400,%esi
  42277a:	48 81 ec 10 04 00 00 	sub    $0x410,%rsp
  422781:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  422788:	00 00 
  42278a:	48 89 84 24 08 04 00 	mov    %rax,0x408(%rsp)
  422791:	00 
  422792:	31 c0                	xor    %eax,%eax
  422794:	48 89 e7             	mov    %rsp,%rdi
  422797:	e8 14 6e fe ff       	callq  4095b0 <__snprintf_chk@plt>
    COMPILER_BARRIER();
}

static inline void sim_magic_op_1(uint64_t op, uint64_t arg0) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  42279c:	b9 05 04 00 00       	mov    $0x405,%ecx
  4227a1:	48 89 e7             	mov    %rsp,%rdi
  4227a4:	48 87 c9             	xchg   %rcx,%rcx
    char buf[1024];
    snprintf(buf, sizeof(buf), "Aborting: sim-alloc function unimplemented: %s", fn);
    sim_magic_op_1(MAGIC_OP_WRITE_STD_OUT, reinterpret_cast<uint64_t>(&buf[0]));
    std::abort();
  4227a7:	e8 a4 6d fe ff       	callq  409550 <abort@plt>
  4227ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004227b0 <malloc>:
void* malloc(size_t size) {
  4227b0:	48 83 ec 18          	sub    $0x18,%rsp
  4227b4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4227bb:	00 00 
  4227bd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4227c2:	31 c0                	xor    %eax,%eax
    if (size > 0) {
  4227c4:	48 85 ff             	test   %rdi,%rdi
  4227c7:	74 27                	je     4227f0 <malloc+0x40>
  4227c9:	48 89 fe             	mov    %rdi,%rsi
    COMPILER_BARRIER();
}

static inline void sim_magic_op_2(uint64_t op, uint64_t arg0, uint64_t arg1) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  4227cc:	b9 00 20 00 00       	mov    $0x2000,%ecx
        sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), size);
  4227d1:	48 89 e7             	mov    %rsp,%rdi
  4227d4:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  4227d7:	48 8b 04 24          	mov    (%rsp),%rax
}
  4227db:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  4227e0:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  4227e7:	00 00 
  4227e9:	75 09                	jne    4227f4 <malloc+0x44>
  4227eb:	48 83 c4 18          	add    $0x18,%rsp
  4227ef:	c3                   	retq   
        return nullptr;
  4227f0:	31 c0                	xor    %eax,%eax
  4227f2:	eb e7                	jmp    4227db <malloc+0x2b>
}
  4227f4:	e8 97 6f fe ff       	callq  409790 <__stack_chk_fail@plt>
  4227f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000422800 <calloc>:
void* calloc(size_t nmemb, size_t size) {
  422800:	48 83 ec 18          	sub    $0x18,%rsp
  422804:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42280b:	00 00 
  42280d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422812:	31 c0                	xor    %eax,%eax
    const size_t total = nmemb * size;
  422814:	48 0f af f7          	imul   %rdi,%rsi
  422818:	b9 00 20 00 00       	mov    $0x2000,%ecx
    sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), total);
  42281d:	48 89 e7             	mov    %rsp,%rdi
  422820:	48 87 c9             	xchg   %rcx,%rcx
    {
      __warn_memset_zero_len ();
      return __dest;
    }
#endif
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
  422823:	48 8b 3c 24          	mov    (%rsp),%rdi
  422827:	48 89 f2             	mov    %rsi,%rdx
  42282a:	31 f6                	xor    %esi,%esi
  42282c:	e8 0f 6d fe ff       	callq  409540 <memset@plt>
}
  422831:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  422836:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  42283d:	00 00 
  42283f:	48 8b 04 24          	mov    (%rsp),%rax
  422843:	75 05                	jne    42284a <calloc+0x4a>
  422845:	48 83 c4 18          	add    $0x18,%rsp
  422849:	c3                   	retq   
  42284a:	e8 41 6f fe ff       	callq  409790 <__stack_chk_fail@plt>
  42284f:	90                   	nop

0000000000422850 <realloc>:
void* realloc(void* ptr, size_t size) {
  422850:	53                   	push   %rbx
  422851:	48 89 f0             	mov    %rsi,%rax
  422854:	48 83 ec 10          	sub    $0x10,%rsp
  422858:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  42285f:	00 00 
  422861:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  422866:	31 d2                	xor    %edx,%edx
    if (!ptr) {
  422868:	48 85 ff             	test   %rdi,%rdi
  42286b:	74 73                	je     4228e0 <realloc+0x90>
    } else if (size == 0) {
  42286d:	48 85 f6             	test   %rsi,%rsi
  422870:	48 89 fb             	mov    %rdi,%rbx
  422873:	0f 84 87 00 00 00    	je     422900 <realloc+0xb0>
  422879:	b9 04 20 00 00       	mov    $0x2004,%ecx
    sim_magic_op_2(MAGIC_OP_MALLOC_USABLE_SIZE, reinterpret_cast<uint64_t>(&usableSize), reinterpret_cast<uint64_t>(ptr));
  42287e:	48 89 e7             	mov    %rsp,%rdi
  422881:	48 89 de             	mov    %rbx,%rsi
  422884:	48 87 c9             	xchg   %rcx,%rcx
    return usableSize;
  422887:	48 8b 14 24          	mov    (%rsp),%rdx
  42288b:	49 89 d8             	mov    %rbx,%r8
        if (oldSize >= size) {
  42288e:	48 39 d0             	cmp    %rdx,%rax
  422891:	77 1d                	ja     4228b0 <realloc+0x60>
}
  422893:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  422898:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  42289f:	00 00 
  4228a1:	4c 89 c0             	mov    %r8,%rax
  4228a4:	75 72                	jne    422918 <realloc+0xc8>
  4228a6:	48 83 c4 10          	add    $0x10,%rsp
  4228aa:	5b                   	pop    %rbx
  4228ab:	c3                   	retq   
  4228ac:	0f 1f 40 00          	nopl   0x0(%rax)
  4228b0:	b9 00 20 00 00       	mov    $0x2000,%ecx
  4228b5:	48 89 c6             	mov    %rax,%rsi
  4228b8:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  4228bb:	4c 8b 04 24          	mov    (%rsp),%r8
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  4228bf:	48 89 de             	mov    %rbx,%rsi
  4228c2:	4c 89 c7             	mov    %r8,%rdi
  4228c5:	e8 e6 6d fe ff       	callq  4096b0 <memcpy@plt>
  4228ca:	49 89 c0             	mov    %rax,%r8
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4228cd:	b9 03 20 00 00       	mov    $0x2003,%ecx
  4228d2:	48 89 df             	mov    %rbx,%rdi
  4228d5:	48 87 c9             	xchg   %rcx,%rcx
            return newPtr;
  4228d8:	eb b9                	jmp    422893 <realloc+0x43>
  4228da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    if (size > 0) {
  4228e0:	48 85 f6             	test   %rsi,%rsi
  4228e3:	74 2b                	je     422910 <realloc+0xc0>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  4228e5:	b9 00 20 00 00       	mov    $0x2000,%ecx
        sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), size);
  4228ea:	48 89 e7             	mov    %rsp,%rdi
  4228ed:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  4228f0:	4c 8b 04 24          	mov    (%rsp),%r8
  4228f4:	eb 9d                	jmp    422893 <realloc+0x43>
  4228f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4228fd:	00 00 00 
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  422900:	b9 03 20 00 00       	mov    $0x2003,%ecx
  422905:	48 87 c9             	xchg   %rcx,%rcx
        return nullptr;
  422908:	45 31 c0             	xor    %r8d,%r8d
  42290b:	eb 86                	jmp    422893 <realloc+0x43>
  42290d:	0f 1f 00             	nopl   (%rax)
        return nullptr;
  422910:	45 31 c0             	xor    %r8d,%r8d
  422913:	e9 7b ff ff ff       	jmpq   422893 <realloc+0x43>
}
  422918:	e8 73 6e fe ff       	callq  409790 <__stack_chk_fail@plt>
  42291d:	0f 1f 00             	nopl   (%rax)

0000000000422920 <free>:
    if (ptr) sim_magic_op_1(MAGIC_OP_FREE, reinterpret_cast<uint64_t>(ptr));
  422920:	48 85 ff             	test   %rdi,%rdi
  422923:	74 08                	je     42292d <free+0xd>
  422925:	b9 03 20 00 00       	mov    $0x2003,%ecx
  42292a:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  42292d:	f3 c3                	repz retq 
  42292f:	90                   	nop

0000000000422930 <_Z5cfreePv>:
  422930:	48 85 ff             	test   %rdi,%rdi
  422933:	74 08                	je     42293d <_Z5cfreePv+0xd>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  422935:	b9 03 20 00 00       	mov    $0x2003,%ecx
  42293a:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  42293d:	f3 c3                	repz retq 
  42293f:	90                   	nop

0000000000422940 <posix_memalign>:
int posix_memalign(void **memptr, size_t alignment, size_t size) {
  422940:	48 83 ec 18          	sub    $0x18,%rsp
  422944:	49 89 f8             	mov    %rdi,%r8
  422947:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42294e:	00 00 
  422950:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422955:	31 c0                	xor    %eax,%eax
    if (size == 0) {
  422957:	48 85 d2             	test   %rdx,%rdx
  42295a:	74 54                	je     4229b0 <posix_memalign+0x70>
    } else if (!alignment || (alignment & (alignment - 1))
  42295c:	48 85 f6             	test   %rsi,%rsi
        return EINVAL;
  42295f:	b8 16 00 00 00       	mov    $0x16,%eax
    } else if (!alignment || (alignment & (alignment - 1))
  422964:	75 1a                	jne    422980 <posix_memalign+0x40>
}
  422966:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  42296b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  422972:	00 00 
  422974:	75 4a                	jne    4229c0 <posix_memalign+0x80>
  422976:	48 83 c4 18          	add    $0x18,%rsp
  42297a:	c3                   	retq   
  42297b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    } else if (!alignment || (alignment & (alignment - 1))
  422980:	48 8d 4e ff          	lea    -0x1(%rsi),%rcx
               || (alignment % sizeof(void*))) {
  422984:	48 83 c9 07          	or     $0x7,%rcx
  422988:	48 85 f1             	test   %rsi,%rcx
  42298b:	75 d9                	jne    422966 <posix_memalign+0x26>
    COMPILER_BARRIER();
}

static inline void sim_magic_op_3(uint64_t op, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  42298d:	b9 01 20 00 00       	mov    $0x2001,%ecx
        sim_magic_op_3(MAGIC_OP_POSIX_MEMALIGN,
  422992:	48 89 e7             	mov    %rsp,%rdi
  422995:	48 87 c9             	xchg   %rcx,%rcx
        if (ptr == nullptr) return ENOMEM;
  422998:	48 8b 04 24          	mov    (%rsp),%rax
  42299c:	48 85 c0             	test   %rax,%rax
  42299f:	74 18                	je     4229b9 <posix_memalign+0x79>
        *memptr = ptr;
  4229a1:	49 89 00             	mov    %rax,(%r8)
    return 0;
  4229a4:	31 c0                	xor    %eax,%eax
  4229a6:	eb be                	jmp    422966 <posix_memalign+0x26>
  4229a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4229af:	00 
        *memptr = nullptr;
  4229b0:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  4229b7:	eb ad                	jmp    422966 <posix_memalign+0x26>
        if (ptr == nullptr) return ENOMEM;
  4229b9:	b8 0c 00 00 00       	mov    $0xc,%eax
  4229be:	eb a6                	jmp    422966 <posix_memalign+0x26>
}
  4229c0:	e8 cb 6d fe ff       	callq  409790 <__stack_chk_fail@plt>
  4229c5:	90                   	nop
  4229c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4229cd:	00 00 00 

00000000004229d0 <aligned_alloc>:
  4229d0:	48 83 ec 18          	sub    $0x18,%rsp
  4229d4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4229db:	00 00 
  4229dd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4229e2:	31 c0                	xor    %eax,%eax
  4229e4:	48 85 f6             	test   %rsi,%rsi
  4229e7:	74 08                	je     4229f1 <aligned_alloc+0x21>
  4229e9:	48 85 ff             	test   %rdi,%rdi
  4229ec:	49 89 f8             	mov    %rdi,%r8
  4229ef:	75 1f                	jne    422a10 <aligned_alloc+0x40>
  4229f1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  4229f6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4229fd:	00 00 
  4229ff:	75 33                	jne    422a34 <aligned_alloc+0x64>
  422a01:	48 83 c4 18          	add    $0x18,%rsp
  422a05:	c3                   	retq   
  422a06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  422a0d:	00 00 00 
  422a10:	48 8d 4f ff          	lea    -0x1(%rdi),%rcx
  422a14:	48 83 c9 07          	or     $0x7,%rcx
  422a18:	48 85 f9             	test   %rdi,%rcx
  422a1b:	75 d4                	jne    4229f1 <aligned_alloc+0x21>
  422a1d:	48 89 f2             	mov    %rsi,%rdx
  422a20:	b9 01 20 00 00       	mov    $0x2001,%ecx
  422a25:	48 89 e7             	mov    %rsp,%rdi
  422a28:	4c 89 c6             	mov    %r8,%rsi
  422a2b:	48 87 c9             	xchg   %rcx,%rcx
  422a2e:	48 8b 04 24          	mov    (%rsp),%rax
  422a32:	eb bd                	jmp    4229f1 <aligned_alloc+0x21>
  422a34:	e8 57 6d fe ff       	callq  409790 <__stack_chk_fail@plt>
  422a39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000422a40 <memalign>:
void* memalign(size_t alignment, size_t size) {
  422a40:	48 83 ec 18          	sub    $0x18,%rsp
  422a44:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  422a4b:	00 00 
  422a4d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422a52:	31 c0                	xor    %eax,%eax
    if (size == 0) {
  422a54:	48 85 f6             	test   %rsi,%rsi
  422a57:	74 08                	je     422a61 <memalign+0x21>
    } else if (!alignment || (alignment & (alignment - 1))
  422a59:	48 85 ff             	test   %rdi,%rdi
  422a5c:	49 89 f8             	mov    %rdi,%r8
  422a5f:	75 1f                	jne    422a80 <memalign+0x40>
}
  422a61:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  422a66:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  422a6d:	00 00 
  422a6f:	75 33                	jne    422aa4 <memalign+0x64>
  422a71:	48 83 c4 18          	add    $0x18,%rsp
  422a75:	c3                   	retq   
  422a76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  422a7d:	00 00 00 
    } else if (!alignment || (alignment & (alignment - 1))
  422a80:	48 8d 4f ff          	lea    -0x1(%rdi),%rcx
               || (alignment % sizeof(void*))) {
  422a84:	48 83 c9 07          	or     $0x7,%rcx
  422a88:	48 85 f9             	test   %rdi,%rcx
  422a8b:	75 d4                	jne    422a61 <memalign+0x21>
  422a8d:	48 89 f2             	mov    %rsi,%rdx
  422a90:	b9 01 20 00 00       	mov    $0x2001,%ecx
        sim_magic_op_3(MAGIC_OP_POSIX_MEMALIGN,
  422a95:	48 89 e7             	mov    %rsp,%rdi
  422a98:	4c 89 c6             	mov    %r8,%rsi
  422a9b:	48 87 c9             	xchg   %rcx,%rcx
        if (ptr == nullptr) return ENOMEM;
  422a9e:	48 8b 04 24          	mov    (%rsp),%rax
  422aa2:	eb bd                	jmp    422a61 <memalign+0x21>
}
  422aa4:	e8 e7 6c fe ff       	callq  409790 <__stack_chk_fail@plt>
  422aa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000422ab0 <strdup>:
char* strdup(const char* src) {
  422ab0:	53                   	push   %rbx
  422ab1:	48 89 fb             	mov    %rdi,%rbx
  422ab4:	48 83 ec 10          	sub    $0x10,%rsp
  422ab8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  422abf:	00 00 
  422ac1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422ac6:	31 c0                	xor    %eax,%eax
    size_t len = strlen(src);
  422ac8:	e8 03 6a fe ff       	callq  4094d0 <strlen@plt>
  422acd:	31 c9                	xor    %ecx,%ecx
    if (size > 0) {
  422acf:	48 85 c0             	test   %rax,%rax
  422ad2:	74 12                	je     422ae6 <strdup+0x36>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  422ad4:	b9 00 20 00 00       	mov    $0x2000,%ecx
        sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), size);
  422ad9:	48 89 e7             	mov    %rsp,%rdi
  422adc:	48 89 c6             	mov    %rax,%rsi
  422adf:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  422ae2:	48 8b 0c 24          	mov    (%rsp),%rcx
  422ae6:	48 89 c2             	mov    %rax,%rdx
  422ae9:	48 89 de             	mov    %rbx,%rsi
  422aec:	48 89 cf             	mov    %rcx,%rdi
  422aef:	e8 bc 6b fe ff       	callq  4096b0 <memcpy@plt>
}
  422af4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  422af9:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  422b00:	00 00 
  422b02:	75 06                	jne    422b0a <strdup+0x5a>
  422b04:	48 83 c4 10          	add    $0x10,%rsp
  422b08:	5b                   	pop    %rbx
  422b09:	c3                   	retq   
  422b0a:	e8 81 6c fe ff       	callq  409790 <__stack_chk_fail@plt>
  422b0f:	90                   	nop

0000000000422b10 <malloc_usable_size>:
size_t malloc_usable_size(void* ptr) {
  422b10:	48 83 ec 18          	sub    $0x18,%rsp
  422b14:	48 89 fe             	mov    %rdi,%rsi
  422b17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  422b1e:	00 00 
  422b20:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422b25:	31 c0                	xor    %eax,%eax
  422b27:	b9 04 20 00 00       	mov    $0x2004,%ecx
    sim_magic_op_2(MAGIC_OP_MALLOC_USABLE_SIZE, reinterpret_cast<uint64_t>(&usableSize), reinterpret_cast<uint64_t>(ptr));
  422b2c:	48 89 e7             	mov    %rsp,%rdi
  422b2f:	48 87 c9             	xchg   %rcx,%rcx
}
  422b32:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  422b37:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  422b3e:	00 00 
  422b40:	48 8b 04 24          	mov    (%rsp),%rax
  422b44:	75 05                	jne    422b4b <malloc_usable_size+0x3b>
  422b46:	48 83 c4 18          	add    $0x18,%rsp
  422b4a:	c3                   	retq   
  422b4b:	e8 40 6c fe ff       	callq  409790 <__stack_chk_fail@plt>

0000000000422b50 <valloc>:
}

void* valloc(size_t size) {
    abort_unimplemented(__FUNCTION__);
  422b50:	48 8d 3d 99 1b 00 00 	lea    0x1b99(%rip),%rdi        # 4246f0 <_ZZ6vallocE12__FUNCTION__>
void* valloc(size_t size) {
  422b57:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  422b5b:	e8 00 fc ff ff       	callq  422760 <_ZL19abort_unimplementedPKc>

0000000000422b60 <pvalloc>:
    return nullptr;
}

void* pvalloc(size_t size) {
    abort_unimplemented(__FUNCTION__);
  422b60:	48 8d 3d 81 1b 00 00 	lea    0x1b81(%rip),%rdi        # 4246e8 <_ZZ7pvallocE12__FUNCTION__>
void* pvalloc(size_t size) {
  422b67:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  422b6b:	e8 f0 fb ff ff       	callq  422760 <_ZL19abort_unimplementedPKc>

0000000000422b70 <_Z16malloc_get_statev>:
    return nullptr;
}

void* malloc_get_state(void) {
    abort_unimplemented(__FUNCTION__);
  422b70:	48 8d 3d 59 1b 00 00 	lea    0x1b59(%rip),%rdi        # 4246d0 <_ZZ16malloc_get_statevE12__FUNCTION__>
void* malloc_get_state(void) {
  422b77:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  422b7b:	e8 e0 fb ff ff       	callq  422760 <_ZL19abort_unimplementedPKc>

0000000000422b80 <_Z16malloc_set_statePv>:
    return nullptr;
}

int malloc_set_state(void*) {
    abort_unimplemented(__FUNCTION__);
  422b80:	48 8d 3d 29 1b 00 00 	lea    0x1b29(%rip),%rdi        # 4246b0 <_ZZ16malloc_set_statePvE12__FUNCTION__>
int malloc_set_state(void*) {
  422b87:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  422b8b:	e8 d0 fb ff ff       	callq  422760 <_ZL19abort_unimplementedPKc>

0000000000422b90 <malloc_info>:
    return -1;
}

int malloc_info(int, FILE*) {
    abort_unimplemented(__FUNCTION__);
  422b90:	48 8d 3d 09 1b 00 00 	lea    0x1b09(%rip),%rdi        # 4246a0 <_ZZ11malloc_infoE12__FUNCTION__>
int malloc_info(int, FILE*) {
  422b97:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  422b9b:	e8 c0 fb ff ff       	callq  422760 <_ZL19abort_unimplementedPKc>

0000000000422ba0 <malloc_stats>:
    return -1;
}

void malloc_stats(void) {
    abort_unimplemented(__FUNCTION__);
  422ba0:	48 8d 3d e9 1a 00 00 	lea    0x1ae9(%rip),%rdi        # 424690 <_ZZ12malloc_statsE12__FUNCTION__>
void malloc_stats(void) {
  422ba7:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  422bab:	e8 b0 fb ff ff       	callq  422760 <_ZL19abort_unimplementedPKc>

0000000000422bb0 <malloc_trim>:
}

int malloc_trim(size_t) {
    abort_unimplemented(__FUNCTION__);
  422bb0:	48 8d 3d c9 1a 00 00 	lea    0x1ac9(%rip),%rdi        # 424680 <_ZZ11malloc_trimE12__FUNCTION__>
int malloc_trim(size_t) {
  422bb7:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  422bbb:	e8 a0 fb ff ff       	callq  422760 <_ZL19abort_unimplementedPKc>

0000000000422bc0 <__libc_csu_init>:
  422bc0:	41 57                	push   %r15
  422bc2:	41 56                	push   %r14
  422bc4:	49 89 d7             	mov    %rdx,%r15
  422bc7:	41 55                	push   %r13
  422bc9:	41 54                	push   %r12
  422bcb:	4c 8d 25 36 73 20 00 	lea    0x207336(%rip),%r12        # 629f08 <__frame_dummy_init_array_entry>
  422bd2:	55                   	push   %rbp
  422bd3:	48 8d 2d 3e 73 20 00 	lea    0x20733e(%rip),%rbp        # 629f18 <__init_array_end>
  422bda:	53                   	push   %rbx
  422bdb:	41 89 fd             	mov    %edi,%r13d
  422bde:	49 89 f6             	mov    %rsi,%r14
  422be1:	4c 29 e5             	sub    %r12,%rbp
  422be4:	48 83 ec 08          	sub    $0x8,%rsp
  422be8:	48 c1 fd 03          	sar    $0x3,%rbp
  422bec:	e8 5f 67 fe ff       	callq  409350 <_init>
  422bf1:	48 85 ed             	test   %rbp,%rbp
  422bf4:	74 20                	je     422c16 <__libc_csu_init+0x56>
  422bf6:	31 db                	xor    %ebx,%ebx
  422bf8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  422bff:	00 
  422c00:	4c 89 fa             	mov    %r15,%rdx
  422c03:	4c 89 f6             	mov    %r14,%rsi
  422c06:	44 89 ef             	mov    %r13d,%edi
  422c09:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  422c0d:	48 83 c3 01          	add    $0x1,%rbx
  422c11:	48 39 dd             	cmp    %rbx,%rbp
  422c14:	75 ea                	jne    422c00 <__libc_csu_init+0x40>
  422c16:	48 83 c4 08          	add    $0x8,%rsp
  422c1a:	5b                   	pop    %rbx
  422c1b:	5d                   	pop    %rbp
  422c1c:	41 5c                	pop    %r12
  422c1e:	41 5d                	pop    %r13
  422c20:	41 5e                	pop    %r14
  422c22:	41 5f                	pop    %r15
  422c24:	c3                   	retq   
  422c25:	90                   	nop
  422c26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  422c2d:	00 00 00 

0000000000422c30 <__libc_csu_fini>:
  422c30:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000422c34 <_fini>:
  422c34:	48 83 ec 08          	sub    $0x8,%rsp
  422c38:	48 83 c4 08          	add    $0x8,%rsp
  422c3c:	c3                   	retq   
