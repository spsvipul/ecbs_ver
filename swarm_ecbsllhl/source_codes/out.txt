
ecbs_simple_swarm:     file format elf64-x86-64


Disassembly of section .init:

0000000000409350 <_init>:
  409350:	48 83 ec 08          	sub    $0x8,%rsp
  409354:	48 8b 05 85 1c 22 00 	mov    0x221c85(%rip),%rax        # 62afe0 <__gmon_start__>
  40935b:	48 85 c0             	test   %rax,%rax
  40935e:	74 02                	je     409362 <_init+0x12>
  409360:	ff d0                	callq  *%rax
  409362:	48 83 c4 08          	add    $0x8,%rsp
  409366:	c3                   	retq   

Disassembly of section .plt:

0000000000409370 <.plt>:
  409370:	ff 35 92 1c 22 00    	pushq  0x221c92(%rip)        # 62b008 <_GLOBAL_OFFSET_TABLE_+0x8>
  409376:	ff 25 94 1c 22 00    	jmpq   *0x221c94(%rip)        # 62b010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40937c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000409380 <__printf_chk@plt>:
  409380:	ff 25 92 1c 22 00    	jmpq   *0x221c92(%rip)        # 62b018 <__printf_chk@GLIBC_2.3.4>
  409386:	68 00 00 00 00       	pushq  $0x0
  40938b:	e9 e0 ff ff ff       	jmpq   409370 <.plt>

0000000000409390 <_ZNSo3putEc@plt>:
  409390:	ff 25 8a 1c 22 00    	jmpq   *0x221c8a(%rip)        # 62b020 <_ZNSo3putEc@GLIBCXX_3.4>
  409396:	68 01 00 00 00       	pushq  $0x1
  40939b:	e9 d0 ff ff ff       	jmpq   409370 <.plt>

00000000004093a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@plt>:
  4093a0:	ff 25 82 1c 22 00    	jmpq   *0x221c82(%rip)        # 62b028 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@GLIBCXX_3.4.21>
  4093a6:	68 02 00 00 00       	pushq  $0x2
  4093ab:	e9 c0 ff ff ff       	jmpq   409370 <.plt>

00000000004093b0 <_ZNSt6chrono3_V212system_clock3nowEv@plt>:
  4093b0:	ff 25 7a 1c 22 00    	jmpq   *0x221c7a(%rip)        # 62b030 <_ZNSt6chrono3_V212system_clock3nowEv@GLIBCXX_3.4.19>
  4093b6:	68 03 00 00 00       	pushq  $0x3
  4093bb:	e9 b0 ff ff ff       	jmpq   409370 <.plt>

00000000004093c0 <_ZN4YAML6detail9node_data3endEv@plt>:
  4093c0:	ff 25 72 1c 22 00    	jmpq   *0x221c72(%rip)        # 62b038 <_ZN4YAML6detail9node_data3endEv>
  4093c6:	68 04 00 00 00       	pushq  $0x4
  4093cb:	e9 a0 ff ff ff       	jmpq   409370 <.plt>

00000000004093d0 <syscall@plt>:
  4093d0:	ff 25 6a 1c 22 00    	jmpq   *0x221c6a(%rip)        # 62b040 <syscall@GLIBC_2.2.5>
  4093d6:	68 05 00 00 00       	pushq  $0x5
  4093db:	e9 90 ff ff ff       	jmpq   409370 <.plt>

00000000004093e0 <_ZN5boost15program_options16validation_error12get_templateB5cxx11ENS1_6kind_tE@plt>:
  4093e0:	ff 25 62 1c 22 00    	jmpq   *0x221c62(%rip)        # 62b048 <_ZN5boost15program_options16validation_error12get_templateB5cxx11ENS1_6kind_tE>
  4093e6:	68 06 00 00 00       	pushq  $0x6
  4093eb:	e9 80 ff ff ff       	jmpq   409370 <.plt>

00000000004093f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@plt>:
  4093f0:	ff 25 5a 1c 22 00    	jmpq   *0x221c5a(%rip)        # 62b050 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@GLIBCXX_3.4>
  4093f6:	68 07 00 00 00       	pushq  $0x7
  4093fb:	e9 70 ff ff ff       	jmpq   409370 <.plt>

0000000000409400 <_ZN5boost15program_optionslsERSoRKNS0_19options_descriptionE@plt>:
  409400:	ff 25 52 1c 22 00    	jmpq   *0x221c52(%rip)        # 62b058 <_ZN5boost15program_optionslsERSoRKNS0_19options_descriptionE>
  409406:	68 08 00 00 00       	pushq  $0x8
  40940b:	e9 60 ff ff ff       	jmpq   409370 <.plt>

0000000000409410 <_ZN5boost15program_options6detail7cmdline3runEv@plt>:
  409410:	ff 25 4a 1c 22 00    	jmpq   *0x221c4a(%rip)        # 62b060 <_ZN5boost15program_options6detail7cmdline3runEv>
  409416:	68 09 00 00 00       	pushq  $0x9
  40941b:	e9 50 ff ff ff       	jmpq   409370 <.plt>

0000000000409420 <swapcontext@plt>:
  409420:	ff 25 42 1c 22 00    	jmpq   *0x221c42(%rip)        # 62b068 <swapcontext@GLIBC_2.2.5>
  409426:	68 0a 00 00 00       	pushq  $0xa
  40942b:	e9 40 ff ff ff       	jmpq   409370 <.plt>

0000000000409430 <_ZSt9terminatev@plt>:
  409430:	ff 25 3a 1c 22 00    	jmpq   *0x221c3a(%rip)        # 62b070 <_ZSt9terminatev@GLIBCXX_3.4>
  409436:	68 0b 00 00 00       	pushq  $0xb
  40943b:	e9 30 ff ff ff       	jmpq   409370 <.plt>

0000000000409440 <_ZNSt8ios_baseC2Ev@plt>:
  409440:	ff 25 32 1c 22 00    	jmpq   *0x221c32(%rip)        # 62b078 <_ZNSt8ios_baseC2Ev@GLIBCXX_3.4>
  409446:	68 0c 00 00 00       	pushq  $0xc
  40944b:	e9 20 ff ff ff       	jmpq   409370 <.plt>

0000000000409450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@plt>:
  409450:	ff 25 2a 1c 22 00    	jmpq   *0x221c2a(%rip)        # 62b080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@GLIBCXX_3.4.21>
  409456:	68 0d 00 00 00       	pushq  $0xd
  40945b:	e9 10 ff ff ff       	jmpq   409370 <.plt>

0000000000409460 <_ZN4YAML6detail9node_data8set_nullEv@plt>:
  409460:	ff 25 22 1c 22 00    	jmpq   *0x221c22(%rip)        # 62b088 <_ZN4YAML6detail9node_data8set_nullEv>
  409466:	68 0e 00 00 00       	pushq  $0xe
  40946b:	e9 00 ff ff ff       	jmpq   409370 <.plt>

0000000000409470 <_ZNSt8ios_baseD2Ev@plt>:
  409470:	ff 25 1a 1c 22 00    	jmpq   *0x221c1a(%rip)        # 62b090 <_ZNSt8ios_baseD2Ev@GLIBCXX_3.4>
  409476:	68 0f 00 00 00       	pushq  $0xf
  40947b:	e9 f0 fe ff ff       	jmpq   409370 <.plt>

0000000000409480 <makecontext@plt>:
  409480:	ff 25 12 1c 22 00    	jmpq   *0x221c12(%rip)        # 62b098 <makecontext@GLIBC_2.2.5>
  409486:	68 10 00 00 00       	pushq  $0x10
  40948b:	e9 e0 fe ff ff       	jmpq   409370 <.plt>

0000000000409490 <_ZSt17__throw_bad_allocv@plt>:
  409490:	ff 25 0a 1c 22 00    	jmpq   *0x221c0a(%rip)        # 62b0a0 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
  409496:	68 11 00 00 00       	pushq  $0x11
  40949b:	e9 d0 fe ff ff       	jmpq   409370 <.plt>

00000000004094a0 <_ZN4YAML6detail6memory11create_nodeEv@plt>:
  4094a0:	ff 25 02 1c 22 00    	jmpq   *0x221c02(%rip)        # 62b0a8 <_ZN4YAML6detail6memory11create_nodeEv>
  4094a6:	68 12 00 00 00       	pushq  $0x12
  4094ab:	e9 c0 fe ff ff       	jmpq   409370 <.plt>

00000000004094b0 <__cxa_begin_catch@plt>:
  4094b0:	ff 25 fa 1b 22 00    	jmpq   *0x221bfa(%rip)        # 62b0b0 <__cxa_begin_catch@CXXABI_1.3>
  4094b6:	68 13 00 00 00       	pushq  $0x13
  4094bb:	e9 b0 fe ff ff       	jmpq   409370 <.plt>

00000000004094c0 <_ZN5boost15program_options13variables_mapC1Ev@plt>:
  4094c0:	ff 25 f2 1b 22 00    	jmpq   *0x221bf2(%rip)        # 62b0b8 <_ZN5boost15program_options13variables_mapC1Ev>
  4094c6:	68 14 00 00 00       	pushq  $0x14
  4094cb:	e9 a0 fe ff ff       	jmpq   409370 <.plt>

00000000004094d0 <strlen@plt>:
  4094d0:	ff 25 ea 1b 22 00    	jmpq   *0x221bea(%rip)        # 62b0c0 <strlen@GLIBC_2.2.5>
  4094d6:	68 15 00 00 00       	pushq  $0x15
  4094db:	e9 90 fe ff ff       	jmpq   409370 <.plt>

00000000004094e0 <memcmp@plt>:
  4094e0:	ff 25 e2 1b 22 00    	jmpq   *0x221be2(%rip)        # 62b0c8 <memcmp@GLIBC_2.2.5>
  4094e6:	68 16 00 00 00       	pushq  $0x16
  4094eb:	e9 80 fe ff ff       	jmpq   409370 <.plt>

00000000004094f0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@plt>:
  4094f0:	ff 25 da 1b 22 00    	jmpq   *0x221bda(%rip)        # 62b0d0 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GLIBCXX_3.4>
  4094f6:	68 17 00 00 00       	pushq  $0x17
  4094fb:	e9 70 fe ff ff       	jmpq   409370 <.plt>

0000000000409500 <__cxa_allocate_exception@plt>:
  409500:	ff 25 d2 1b 22 00    	jmpq   *0x221bd2(%rip)        # 62b0d8 <__cxa_allocate_exception@CXXABI_1.3>
  409506:	68 18 00 00 00       	pushq  $0x18
  40950b:	e9 60 fe ff ff       	jmpq   409370 <.plt>

0000000000409510 <pthread_join@plt>:
  409510:	ff 25 ca 1b 22 00    	jmpq   *0x221bca(%rip)        # 62b0e0 <pthread_join@GLIBC_2.2.5>
  409516:	68 19 00 00 00       	pushq  $0x19
  40951b:	e9 50 fe ff ff       	jmpq   409370 <.plt>

0000000000409520 <_ZSt20__throw_length_errorPKc@plt>:
  409520:	ff 25 c2 1b 22 00    	jmpq   *0x221bc2(%rip)        # 62b0e8 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
  409526:	68 1a 00 00 00       	pushq  $0x1a
  40952b:	e9 40 fe ff ff       	jmpq   409370 <.plt>

0000000000409530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@plt>:
  409530:	ff 25 ba 1b 22 00    	jmpq   *0x221bba(%rip)        # 62b0f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@GLIBCXX_3.4.21>
  409536:	68 1b 00 00 00       	pushq  $0x1b
  40953b:	e9 30 fe ff ff       	jmpq   409370 <.plt>

0000000000409540 <memset@plt>:
  409540:	ff 25 b2 1b 22 00    	jmpq   *0x221bb2(%rip)        # 62b0f8 <memset@GLIBC_2.2.5>
  409546:	68 1c 00 00 00       	pushq  $0x1c
  40954b:	e9 20 fe ff ff       	jmpq   409370 <.plt>

0000000000409550 <abort@plt>:
  409550:	ff 25 aa 1b 22 00    	jmpq   *0x221baa(%rip)        # 62b100 <abort@GLIBC_2.2.5>
  409556:	68 1d 00 00 00       	pushq  $0x1d
  40955b:	e9 10 fe ff ff       	jmpq   409370 <.plt>

0000000000409560 <_ZN5boost15program_options6notifyERNS0_13variables_mapE@plt>:
  409560:	ff 25 a2 1b 22 00    	jmpq   *0x221ba2(%rip)        # 62b108 <_ZN5boost15program_options6notifyERNS0_13variables_mapE>
  409566:	68 1e 00 00 00       	pushq  $0x1e
  40956b:	e9 00 fe ff ff       	jmpq   409370 <.plt>

0000000000409570 <pthread_create@plt>:
  409570:	ff 25 9a 1b 22 00    	jmpq   *0x221b9a(%rip)        # 62b110 <pthread_create@GLIBC_2.2.5>
  409576:	68 1f 00 00 00       	pushq  $0x1f
  40957b:	e9 f0 fd ff ff       	jmpq   409370 <.plt>

0000000000409580 <_ZN4YAML6detail9node_data12mark_definedEv@plt>:
  409580:	ff 25 92 1b 22 00    	jmpq   *0x221b92(%rip)        # 62b118 <_ZN4YAML6detail9node_data12mark_definedEv>
  409586:	68 20 00 00 00       	pushq  $0x20
  40958b:	e9 e0 fd ff ff       	jmpq   409370 <.plt>

0000000000409590 <_ZN5boost15program_options20invalid_option_valueC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409590:	ff 25 8a 1b 22 00    	jmpq   *0x221b8a(%rip)        # 62b120 <_ZN5boost15program_options20invalid_option_valueC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  409596:	68 21 00 00 00       	pushq  $0x21
  40959b:	e9 d0 fd ff ff       	jmpq   409370 <.plt>

00000000004095a0 <__sprintf_chk@plt>:
  4095a0:	ff 25 82 1b 22 00    	jmpq   *0x221b82(%rip)        # 62b128 <__sprintf_chk@GLIBC_2.3.4>
  4095a6:	68 22 00 00 00       	pushq  $0x22
  4095ab:	e9 c0 fd ff ff       	jmpq   409370 <.plt>

00000000004095b0 <__snprintf_chk@plt>:
  4095b0:	ff 25 7a 1b 22 00    	jmpq   *0x221b7a(%rip)        # 62b130 <__snprintf_chk@GLIBC_2.3.4>
  4095b6:	68 23 00 00 00       	pushq  $0x23
  4095bb:	e9 b0 fd ff ff       	jmpq   409370 <.plt>

00000000004095c0 <_ZNSirsERi@plt>:
  4095c0:	ff 25 72 1b 22 00    	jmpq   *0x221b72(%rip)        # 62b138 <_ZNSirsERi@GLIBCXX_3.4>
  4095c6:	68 24 00 00 00       	pushq  $0x24
  4095cb:	e9 a0 fd ff ff       	jmpq   409370 <.plt>

00000000004095d0 <__cxa_guard_release@plt>:
  4095d0:	ff 25 6a 1b 22 00    	jmpq   *0x221b6a(%rip)        # 62b140 <__cxa_guard_release@CXXABI_1.3>
  4095d6:	68 25 00 00 00       	pushq  $0x25
  4095db:	e9 90 fd ff ff       	jmpq   409370 <.plt>

00000000004095e0 <_ZN5boost15program_options6detail7cmdlineC2ERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EE@plt>:
  4095e0:	ff 25 62 1b 22 00    	jmpq   *0x221b62(%rip)        # 62b148 <_ZN5boost15program_options6detail7cmdlineC2ERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EE>
  4095e6:	68 26 00 00 00       	pushq  $0x26
  4095eb:	e9 80 fd ff ff       	jmpq   409370 <.plt>

00000000004095f0 <__assert_fail@plt>:
  4095f0:	ff 25 5a 1b 22 00    	jmpq   *0x221b5a(%rip)        # 62b150 <__assert_fail@GLIBC_2.2.5>
  4095f6:	68 27 00 00 00       	pushq  $0x27
  4095fb:	e9 70 fd ff ff       	jmpq   409370 <.plt>

0000000000409600 <getcontext@plt>:
  409600:	ff 25 52 1b 22 00    	jmpq   *0x221b52(%rip)        # 62b158 <getcontext@GLIBC_2.2.5>
  409606:	68 28 00 00 00       	pushq  $0x28
  40960b:	e9 60 fd ff ff       	jmpq   409370 <.plt>

0000000000409610 <_ZNSo9_M_insertImEERSoT_@plt>:
  409610:	ff 25 4a 1b 22 00    	jmpq   *0x221b4a(%rip)        # 62b160 <_ZNSo9_M_insertImEERSoT_@GLIBCXX_3.4.9>
  409616:	68 29 00 00 00       	pushq  $0x29
  40961b:	e9 50 fd ff ff       	jmpq   409370 <.plt>

0000000000409620 <_ZNSo5flushEv@plt>:
  409620:	ff 25 42 1b 22 00    	jmpq   *0x221b42(%rip)        # 62b168 <_ZNSo5flushEv@GLIBCXX_3.4>
  409626:	68 2a 00 00 00       	pushq  $0x2a
  40962b:	e9 40 fd ff ff       	jmpq   409370 <.plt>

0000000000409630 <_ZN4YAML6detail9node_data10set_scalarERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409630:	ff 25 3a 1b 22 00    	jmpq   *0x221b3a(%rip)        # 62b170 <_ZN4YAML6detail9node_data10set_scalarERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  409636:	68 2b 00 00 00       	pushq  $0x2b
  40963b:	e9 30 fd ff ff       	jmpq   409370 <.plt>

0000000000409640 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@plt>:
  409640:	ff 25 32 1b 22 00    	jmpq   *0x221b32(%rip)        # 62b178 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
  409646:	68 2c 00 00 00       	pushq  $0x2c
  40964b:	e9 20 fd ff ff       	jmpq   409370 <.plt>

0000000000409650 <_ZSt19__throw_logic_errorPKc@plt>:
  409650:	ff 25 2a 1b 22 00    	jmpq   *0x221b2a(%rip)        # 62b180 <_ZSt19__throw_logic_errorPKc@GLIBCXX_3.4>
  409656:	68 2d 00 00 00       	pushq  $0x2d
  40965b:	e9 10 fd ff ff       	jmpq   409370 <.plt>

0000000000409660 <__cxa_free_exception@plt>:
  409660:	ff 25 22 1b 22 00    	jmpq   *0x221b22(%rip)        # 62b188 <__cxa_free_exception@CXXABI_1.3>
  409666:	68 2e 00 00 00       	pushq  $0x2e
  40966b:	e9 00 fd ff ff       	jmpq   409370 <.plt>

0000000000409670 <pthread_attr_getstack@plt>:
  409670:	ff 25 1a 1b 22 00    	jmpq   *0x221b1a(%rip)        # 62b190 <pthread_attr_getstack@GLIBC_2.2.5>
  409676:	68 2f 00 00 00       	pushq  $0x2f
  40967b:	e9 f0 fc ff ff       	jmpq   409370 <.plt>

0000000000409680 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@plt>:
  409680:	ff 25 12 1b 22 00    	jmpq   *0x221b12(%rip)        # 62b198 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
  409686:	68 30 00 00 00       	pushq  $0x30
  40968b:	e9 e0 fc ff ff       	jmpq   409370 <.plt>

0000000000409690 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@plt>:
  409690:	ff 25 0a 1b 22 00    	jmpq   *0x221b0a(%rip)        # 62b1a0 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@GLIBCXX_3.4.21>
  409696:	68 31 00 00 00       	pushq  $0x31
  40969b:	e9 d0 fc ff ff       	jmpq   409370 <.plt>

00000000004096a0 <_ZN5boost15program_options22error_with_option_nameC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_i@plt>:
  4096a0:	ff 25 02 1b 22 00    	jmpq   *0x221b02(%rip)        # 62b1a8 <_ZN5boost15program_options22error_with_option_nameC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_i>
  4096a6:	68 32 00 00 00       	pushq  $0x32
  4096ab:	e9 c0 fc ff ff       	jmpq   409370 <.plt>

00000000004096b0 <memcpy@plt>:
  4096b0:	ff 25 fa 1a 22 00    	jmpq   *0x221afa(%rip)        # 62b1b0 <memcpy@GLIBC_2.14>
  4096b6:	68 33 00 00 00       	pushq  $0x33
  4096bb:	e9 b0 fc ff ff       	jmpq   409370 <.plt>

00000000004096c0 <_ZSt2wsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_@plt>:
  4096c0:	ff 25 f2 1a 22 00    	jmpq   *0x221af2(%rip)        # 62b1b8 <_ZSt2wsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_@GLIBCXX_3.4>
  4096c6:	68 34 00 00 00       	pushq  $0x34
  4096cb:	e9 a0 fc ff ff       	jmpq   409370 <.plt>

00000000004096d0 <_ZN5boost15program_options6detail7cmdline23set_options_descriptionERKNS0_19options_descriptionE@plt>:
  4096d0:	ff 25 ea 1a 22 00    	jmpq   *0x221aea(%rip)        # 62b1c0 <_ZN5boost15program_options6detail7cmdline23set_options_descriptionERKNS0_19options_descriptionE>
  4096d6:	68 35 00 00 00       	pushq  $0x35
  4096db:	e9 90 fc ff ff       	jmpq   409370 <.plt>

00000000004096e0 <__cxa_atexit@plt>:
  4096e0:	ff 25 e2 1a 22 00    	jmpq   *0x221ae2(%rip)        # 62b1c8 <__cxa_atexit@GLIBC_2.2.5>
  4096e6:	68 36 00 00 00       	pushq  $0x36
  4096eb:	e9 80 fc ff ff       	jmpq   409370 <.plt>

00000000004096f0 <pthread_self@plt>:
  4096f0:	ff 25 da 1a 22 00    	jmpq   *0x221ada(%rip)        # 62b1d0 <pthread_self@GLIBC_2.2.5>
  4096f6:	68 37 00 00 00       	pushq  $0x37
  4096fb:	e9 70 fc ff ff       	jmpq   409370 <.plt>

0000000000409700 <pow@plt>:
  409700:	ff 25 d2 1a 22 00    	jmpq   *0x221ad2(%rip)        # 62b1d8 <pow@GLIBC_2.2.5>
  409706:	68 38 00 00 00       	pushq  $0x38
  40970b:	e9 60 fc ff ff       	jmpq   409370 <.plt>

0000000000409710 <_ZN5boost15program_options11to_internalERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409710:	ff 25 ca 1a 22 00    	jmpq   *0x221aca(%rip)        # 62b1e0 <_ZN5boost15program_options11to_internalERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  409716:	68 39 00 00 00       	pushq  $0x39
  40971b:	e9 50 fc ff ff       	jmpq   409370 <.plt>

0000000000409720 <_ZdlPv@plt>:
  409720:	ff 25 c2 1a 22 00    	jmpq   *0x221ac2(%rip)        # 62b1e8 <_ZdlPv@GLIBCXX_3.4>
  409726:	68 3a 00 00 00       	pushq  $0x3a
  40972b:	e9 40 fc ff ff       	jmpq   409370 <.plt>

0000000000409730 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
  409730:	ff 25 ba 1a 22 00    	jmpq   *0x221aba(%rip)        # 62b1f0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
  409736:	68 3b 00 00 00       	pushq  $0x3b
  40973b:	e9 30 fc ff ff       	jmpq   409370 <.plt>

0000000000409740 <_Znwm@plt>:
  409740:	ff 25 b2 1a 22 00    	jmpq   *0x221ab2(%rip)        # 62b1f8 <_Znwm@GLIBCXX_3.4>
  409746:	68 3c 00 00 00       	pushq  $0x3c
  40974b:	e9 20 fc ff ff       	jmpq   409370 <.plt>

0000000000409750 <_ZdlPvm@plt>:
  409750:	ff 25 aa 1a 22 00    	jmpq   *0x221aaa(%rip)        # 62b200 <_ZdlPvm@CXXABI_1.3.9>
  409756:	68 3d 00 00 00       	pushq  $0x3d
  40975b:	e9 10 fc ff ff       	jmpq   409370 <.plt>

0000000000409760 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@plt>:
  409760:	ff 25 a2 1a 22 00    	jmpq   *0x221aa2(%rip)        # 62b208 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@GLIBCXX_3.4>
  409766:	68 3e 00 00 00       	pushq  $0x3e
  40976b:	e9 00 fc ff ff       	jmpq   409370 <.plt>

0000000000409770 <_ZN4YAML6detail9node_data15insert_map_pairERNS0_4nodeES3_@plt>:
  409770:	ff 25 9a 1a 22 00    	jmpq   *0x221a9a(%rip)        # 62b210 <_ZN4YAML6detail9node_data15insert_map_pairERNS0_4nodeES3_>
  409776:	68 3f 00 00 00       	pushq  $0x3f
  40977b:	e9 f0 fb ff ff       	jmpq   409370 <.plt>

0000000000409780 <_ZNSt13runtime_errorD2Ev@plt>:
  409780:	ff 25 92 1a 22 00    	jmpq   *0x221a92(%rip)        # 62b218 <_ZNSt13runtime_errorD2Ev@GLIBCXX_3.4>
  409786:	68 40 00 00 00       	pushq  $0x40
  40978b:	e9 e0 fb ff ff       	jmpq   409370 <.plt>

0000000000409790 <__stack_chk_fail@plt>:
  409790:	ff 25 8a 1a 22 00    	jmpq   *0x221a8a(%rip)        # 62b220 <__stack_chk_fail@GLIBC_2.4>
  409796:	68 41 00 00 00       	pushq  $0x41
  40979b:	e9 d0 fb ff ff       	jmpq   409370 <.plt>

00000000004097a0 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>:
  4097a0:	ff 25 82 1a 22 00    	jmpq   *0x221a82(%rip)        # 62b228 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@GLIBCXX_3.4.9>
  4097a6:	68 42 00 00 00       	pushq  $0x42
  4097ab:	e9 c0 fb ff ff       	jmpq   409370 <.plt>

00000000004097b0 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>:
  4097b0:	ff 25 7a 1a 22 00    	jmpq   *0x221a7a(%rip)        # 62b230 <_ZNKSt5ctypeIcE13_M_widen_initEv@GLIBCXX_3.4.11>
  4097b6:	68 43 00 00 00       	pushq  $0x43
  4097bb:	e9 b0 fb ff ff       	jmpq   409370 <.plt>

00000000004097c0 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@plt>:
  4097c0:	ff 25 72 1a 22 00    	jmpq   *0x221a72(%rip)        # 62b238 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@GLIBCXX_3.4>
  4097c6:	68 44 00 00 00       	pushq  $0x44
  4097cb:	e9 a0 fb ff ff       	jmpq   409370 <.plt>

00000000004097d0 <_ZN5boost15program_options19options_description11add_optionsEv@plt>:
  4097d0:	ff 25 6a 1a 22 00    	jmpq   *0x221a6a(%rip)        # 62b240 <_ZN5boost15program_options19options_description11add_optionsEv>
  4097d6:	68 45 00 00 00       	pushq  $0x45
  4097db:	e9 90 fb ff ff       	jmpq   409370 <.plt>

00000000004097e0 <fflush@plt>:
  4097e0:	ff 25 62 1a 22 00    	jmpq   *0x221a62(%rip)        # 62b248 <fflush@GLIBC_2.2.5>
  4097e6:	68 46 00 00 00       	pushq  $0x46
  4097eb:	e9 80 fb ff ff       	jmpq   409370 <.plt>

00000000004097f0 <_ZN4YAML6detail9node_data5beginEv@plt>:
  4097f0:	ff 25 5a 1a 22 00    	jmpq   *0x221a5a(%rip)        # 62b250 <_ZN4YAML6detail9node_data5beginEv>
  4097f6:	68 47 00 00 00       	pushq  $0x47
  4097fb:	e9 70 fb ff ff       	jmpq   409370 <.plt>

0000000000409800 <_ZNSi3getEv@plt>:
  409800:	ff 25 52 1a 22 00    	jmpq   *0x221a52(%rip)        # 62b258 <_ZNSi3getEv@GLIBCXX_3.4>
  409806:	68 48 00 00 00       	pushq  $0x48
  40980b:	e9 60 fb ff ff       	jmpq   409370 <.plt>

0000000000409810 <pthread_attr_init@plt>:
  409810:	ff 25 4a 1a 22 00    	jmpq   *0x221a4a(%rip)        # 62b260 <pthread_attr_init@GLIBC_2.2.5>
  409816:	68 49 00 00 00       	pushq  $0x49
  40981b:	e9 50 fb ff ff       	jmpq   409370 <.plt>

0000000000409820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@plt>:
  409820:	ff 25 42 1a 22 00    	jmpq   *0x221a42(%rip)        # 62b268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@GLIBCXX_3.4.21>
  409826:	68 4a 00 00 00       	pushq  $0x4a
  40982b:	e9 40 fb ff ff       	jmpq   409370 <.plt>

0000000000409830 <_ZN5boost15program_options6detail7cmdline27get_canonical_option_prefixEv@plt>:
  409830:	ff 25 3a 1a 22 00    	jmpq   *0x221a3a(%rip)        # 62b270 <_ZN5boost15program_options6detail7cmdline27get_canonical_option_prefixEv>
  409836:	68 4b 00 00 00       	pushq  $0x4b
  40983b:	e9 30 fb ff ff       	jmpq   409370 <.plt>

0000000000409840 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  409840:	ff 25 32 1a 22 00    	jmpq   *0x221a32(%rip)        # 62b278 <_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@GLIBCXX_3.4.21>
  409846:	68 4c 00 00 00       	pushq  $0x4c
  40984b:	e9 20 fb ff ff       	jmpq   409370 <.plt>

0000000000409850 <_ZSt16__throw_bad_castv@plt>:
  409850:	ff 25 2a 1a 22 00    	jmpq   *0x221a2a(%rip)        # 62b280 <_ZSt16__throw_bad_castv@GLIBCXX_3.4>
  409856:	68 4d 00 00 00       	pushq  $0x4d
  40985b:	e9 10 fb ff ff       	jmpq   409370 <.plt>

0000000000409860 <_ZNSt13runtime_errorC2ERKS_@plt>:
  409860:	ff 25 22 1a 22 00    	jmpq   *0x221a22(%rip)        # 62b288 <_ZNSt13runtime_errorC2ERKS_@GLIBCXX_3.4.21>
  409866:	68 4e 00 00 00       	pushq  $0x4e
  40986b:	e9 00 fb ff ff       	jmpq   409370 <.plt>

0000000000409870 <pthread_getattr_np@plt>:
  409870:	ff 25 1a 1a 22 00    	jmpq   *0x221a1a(%rip)        # 62b290 <pthread_getattr_np@GLIBC_2.2.5>
  409876:	68 4f 00 00 00       	pushq  $0x4f
  40987b:	e9 f0 fa ff ff       	jmpq   409370 <.plt>

0000000000409880 <_ZN5boost15program_options8validateERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEPS9_i@plt>:
  409880:	ff 25 12 1a 22 00    	jmpq   *0x221a12(%rip)        # 62b298 <_ZN5boost15program_options8validateERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEPS9_i>
  409886:	68 50 00 00 00       	pushq  $0x50
  40988b:	e9 e0 fa ff ff       	jmpq   409370 <.plt>

0000000000409890 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm@plt>:
  409890:	ff 25 0a 1a 22 00    	jmpq   *0x221a0a(%rip)        # 62b2a0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm@GLIBCXX_3.4.18>
  409896:	68 51 00 00 00       	pushq  $0x51
  40989b:	e9 d0 fa ff ff       	jmpq   409370 <.plt>

00000000004098a0 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@plt>:
  4098a0:	ff 25 02 1a 22 00    	jmpq   *0x221a02(%rip)        # 62b2a8 <_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@GLIBCXX_3.4>
  4098a6:	68 52 00 00 00       	pushq  $0x52
  4098ab:	e9 c0 fa ff ff       	jmpq   409370 <.plt>

00000000004098b0 <_ZN5boost15program_options19options_descriptionC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjj@plt>:
  4098b0:	ff 25 fa 19 22 00    	jmpq   *0x2219fa(%rip)        # 62b2b0 <_ZN5boost15program_options19options_descriptionC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjj>
  4098b6:	68 53 00 00 00       	pushq  $0x53
  4098bb:	e9 b0 fa ff ff       	jmpq   409370 <.plt>

00000000004098c0 <strcmp@plt>:
  4098c0:	ff 25 f2 19 22 00    	jmpq   *0x2219f2(%rip)        # 62b2b8 <strcmp@GLIBC_2.2.5>
  4098c6:	68 54 00 00 00       	pushq  $0x54
  4098cb:	e9 a0 fa ff ff       	jmpq   409370 <.plt>

00000000004098d0 <_ZNSt6localeD1Ev@plt>:
  4098d0:	ff 25 ea 19 22 00    	jmpq   *0x2219ea(%rip)        # 62b2c0 <_ZNSt6localeD1Ev@GLIBCXX_3.4>
  4098d6:	68 55 00 00 00       	pushq  $0x55
  4098db:	e9 90 fa ff ff       	jmpq   409370 <.plt>

00000000004098e0 <__cxa_rethrow@plt>:
  4098e0:	ff 25 e2 19 22 00    	jmpq   *0x2219e2(%rip)        # 62b2c8 <__cxa_rethrow@CXXABI_1.3>
  4098e6:	68 56 00 00 00       	pushq  $0x56
  4098eb:	e9 80 fa ff ff       	jmpq   409370 <.plt>

00000000004098f0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@plt>:
  4098f0:	ff 25 da 19 22 00    	jmpq   *0x2219da(%rip)        # 62b2d0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev@GLIBCXX_3.4>
  4098f6:	68 57 00 00 00       	pushq  $0x57
  4098fb:	e9 70 fa ff ff       	jmpq   409370 <.plt>

0000000000409900 <_ZNSt8ios_base4InitC1Ev@plt>:
  409900:	ff 25 d2 19 22 00    	jmpq   *0x2219d2(%rip)        # 62b2d8 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
  409906:	68 58 00 00 00       	pushq  $0x58
  40990b:	e9 60 fa ff ff       	jmpq   409370 <.plt>

0000000000409910 <_ZN4YAML6detail13memory_holder5mergeERS1_@plt>:
  409910:	ff 25 ca 19 22 00    	jmpq   *0x2219ca(%rip)        # 62b2e0 <_ZN4YAML6detail13memory_holder5mergeERS1_>
  409916:	68 59 00 00 00       	pushq  $0x59
  40991b:	e9 50 fa ff ff       	jmpq   409370 <.plt>

0000000000409920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@plt>:
  409920:	ff 25 c2 19 22 00    	jmpq   *0x2219c2(%rip)        # 62b2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@GLIBCXX_3.4.21>
  409926:	68 5a 00 00 00       	pushq  $0x5a
  40992b:	e9 40 fa ff ff       	jmpq   409370 <.plt>

0000000000409930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@plt>:
  409930:	ff 25 ba 19 22 00    	jmpq   *0x2219ba(%rip)        # 62b2f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm@GLIBCXX_3.4.21>
  409936:	68 5b 00 00 00       	pushq  $0x5b
  40993b:	e9 30 fa ff ff       	jmpq   409370 <.plt>

0000000000409940 <_ZNSt8bad_castD2Ev@plt>:
  409940:	ff 25 b2 19 22 00    	jmpq   *0x2219b2(%rip)        # 62b2f8 <_ZNSt8bad_castD2Ev@GLIBCXX_3.4>
  409946:	68 5c 00 00 00       	pushq  $0x5c
  40994b:	e9 20 fa ff ff       	jmpq   409370 <.plt>

0000000000409950 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode@plt>:
  409950:	ff 25 aa 19 22 00    	jmpq   *0x2219aa(%rip)        # 62b300 <_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode@GLIBCXX_3.4.21>
  409956:	68 5d 00 00 00       	pushq  $0x5d
  40995b:	e9 10 fa ff ff       	jmpq   409370 <.plt>

0000000000409960 <_ZN4YAML6detail9node_data14convert_to_mapEN5boost10shared_ptrINS0_13memory_holderEEE@plt>:
  409960:	ff 25 a2 19 22 00    	jmpq   *0x2219a2(%rip)        # 62b308 <_ZN4YAML6detail9node_data14convert_to_mapEN5boost10shared_ptrINS0_13memory_holderEEE>
  409966:	68 5e 00 00 00       	pushq  $0x5e
  40996b:	e9 00 fa ff ff       	jmpq   409370 <.plt>

0000000000409970 <_ZNSo9_M_insertIdEERSoT_@plt>:
  409970:	ff 25 9a 19 22 00    	jmpq   *0x22199a(%rip)        # 62b310 <_ZNSo9_M_insertIdEERSoT_@GLIBCXX_3.4.9>
  409976:	68 5f 00 00 00       	pushq  $0x5f
  40997b:	e9 f0 f9 ff ff       	jmpq   409370 <.plt>

0000000000409980 <memmove@plt>:
  409980:	ff 25 92 19 22 00    	jmpq   *0x221992(%rip)        # 62b318 <memmove@GLIBC_2.2.5>
  409986:	68 60 00 00 00       	pushq  $0x60
  40998b:	e9 e0 f9 ff ff       	jmpq   409370 <.plt>

0000000000409990 <__cxa_end_catch@plt>:
  409990:	ff 25 8a 19 22 00    	jmpq   *0x22198a(%rip)        # 62b320 <__cxa_end_catch@CXXABI_1.3>
  409996:	68 61 00 00 00       	pushq  $0x61
  40999b:	e9 d0 f9 ff ff       	jmpq   409370 <.plt>

00000000004099a0 <_ZN5boost15program_options10validators22check_first_occurrenceERKNS_3anyE@plt>:
  4099a0:	ff 25 82 19 22 00    	jmpq   *0x221982(%rip)        # 62b328 <_ZN5boost15program_options10validators22check_first_occurrenceERKNS_3anyE>
  4099a6:	68 62 00 00 00       	pushq  $0x62
  4099ab:	e9 c0 f9 ff ff       	jmpq   409370 <.plt>

00000000004099b0 <pthread_attr_destroy@plt>:
  4099b0:	ff 25 7a 19 22 00    	jmpq   *0x22197a(%rip)        # 62b330 <pthread_attr_destroy@GLIBC_2.2.5>
  4099b6:	68 63 00 00 00       	pushq  $0x63
  4099bb:	e9 b0 f9 ff ff       	jmpq   409370 <.plt>

00000000004099c0 <_ZN4YAML8LoadFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE@plt>:
  4099c0:	ff 25 72 19 22 00    	jmpq   *0x221972(%rip)        # 62b338 <_ZN4YAML8LoadFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  4099c6:	68 64 00 00 00       	pushq  $0x64
  4099cb:	e9 a0 f9 ff ff       	jmpq   409370 <.plt>

00000000004099d0 <_ZNSt11logic_errorC2ERKS_@plt>:
  4099d0:	ff 25 6a 19 22 00    	jmpq   *0x22196a(%rip)        # 62b340 <_ZNSt11logic_errorC2ERKS_@GLIBCXX_3.4.21>
  4099d6:	68 65 00 00 00       	pushq  $0x65
  4099db:	e9 90 f9 ff ff       	jmpq   409370 <.plt>

00000000004099e0 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@plt>:
  4099e0:	ff 25 62 19 22 00    	jmpq   *0x221962(%rip)        # 62b348 <_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@GLIBCXX_3.4>
  4099e6:	68 66 00 00 00       	pushq  $0x66
  4099eb:	e9 80 f9 ff ff       	jmpq   409370 <.plt>

00000000004099f0 <__cxa_throw@plt>:
  4099f0:	ff 25 5a 19 22 00    	jmpq   *0x22195a(%rip)        # 62b350 <__cxa_throw@CXXABI_1.3>
  4099f6:	68 67 00 00 00       	pushq  $0x67
  4099fb:	e9 70 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a00 <_ZNSolsEi@plt>:
  409a00:	ff 25 52 19 22 00    	jmpq   *0x221952(%rip)        # 62b358 <_ZNSolsEi@GLIBCXX_3.4>
  409a06:	68 68 00 00 00       	pushq  $0x68
  409a0b:	e9 60 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a10 <_ZN5boost15program_options6detail7cmdline21set_additional_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE@plt>:
  409a10:	ff 25 4a 19 22 00    	jmpq   *0x22194a(%rip)        # 62b360 <_ZN5boost15program_options6detail7cmdline21set_additional_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE>
  409a16:	68 69 00 00 00       	pushq  $0x69
  409a1b:	e9 50 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a20 <_ZN5boost15program_options5storeERKNS0_20basic_parsed_optionsIcEERNS0_13variables_mapEb@plt>:
  409a20:	ff 25 42 19 22 00    	jmpq   *0x221942(%rip)        # 62b368 <_ZN5boost15program_options5storeERKNS0_20basic_parsed_optionsIcEERNS0_13variables_mapEb>
  409a26:	68 6a 00 00 00       	pushq  $0x6a
  409a2b:	e9 40 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a30 <_Unwind_Resume@plt>:
  409a30:	ff 25 3a 19 22 00    	jmpq   *0x22193a(%rip)        # 62b370 <_Unwind_Resume@GCC_3.0>
  409a36:	68 6b 00 00 00       	pushq  $0x6b
  409a3b:	e9 30 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a40 <_ZNSt11logic_errorD2Ev@plt>:
  409a40:	ff 25 32 19 22 00    	jmpq   *0x221932(%rip)        # 62b378 <_ZNSt11logic_errorD2Ev@GLIBCXX_3.4>
  409a46:	68 6c 00 00 00       	pushq  $0x6c
  409a4b:	e9 20 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@plt>:
  409a50:	ff 25 2a 19 22 00    	jmpq   *0x22192a(%rip)        # 62b380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@GLIBCXX_3.4.21>
  409a56:	68 6d 00 00 00       	pushq  $0x6d
  409a5b:	e9 10 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a60 <__cxa_guard_acquire@plt>:
  409a60:	ff 25 22 19 22 00    	jmpq   *0x221922(%rip)        # 62b388 <__cxa_guard_acquire@CXXABI_1.3>
  409a66:	68 6e 00 00 00       	pushq  $0x6e
  409a6b:	e9 00 f9 ff ff       	jmpq   409370 <.plt>

0000000000409a70 <_ZN5boost15program_options29options_description_easy_initclEPKcS3_@plt>:
  409a70:	ff 25 1a 19 22 00    	jmpq   *0x22191a(%rip)        # 62b390 <_ZN5boost15program_options29options_description_easy_initclEPKcS3_>
  409a76:	68 6f 00 00 00       	pushq  $0x6f
  409a7b:	e9 f0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409a80 <_ZN5boost15program_options29options_description_easy_initclEPKcPKNS0_14value_semanticES3_@plt>:
  409a80:	ff 25 12 19 22 00    	jmpq   *0x221912(%rip)        # 62b398 <_ZN5boost15program_options29options_description_easy_initclEPKcPKNS0_14value_semanticES3_>
  409a86:	68 70 00 00 00       	pushq  $0x70
  409a8b:	e9 e0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409a90 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@plt>:
  409a90:	ff 25 0a 19 22 00    	jmpq   *0x22190a(%rip)        # 62b3a0 <_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode@GLIBCXX_3.4.21>
  409a96:	68 71 00 00 00       	pushq  $0x71
  409a9b:	e9 d0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409aa0 <_ZN5boost15program_options6detail7cmdline5styleEi@plt>:
  409aa0:	ff 25 02 19 22 00    	jmpq   *0x221902(%rip)        # 62b3a8 <_ZN5boost15program_options6detail7cmdline5styleEi>
  409aa6:	68 72 00 00 00       	pushq  $0x72
  409aab:	e9 c0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409ab0 <pthread_attr_setstack@plt>:
  409ab0:	ff 25 fa 18 22 00    	jmpq   *0x2218fa(%rip)        # 62b3b0 <pthread_attr_setstack@GLIBC_2.2.5>
  409ab6:	68 73 00 00 00       	pushq  $0x73
  409abb:	e9 b0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409ac0 <_ZNSi10_M_extractIfEERSiRT_@plt>:
  409ac0:	ff 25 f2 18 22 00    	jmpq   *0x2218f2(%rip)        # 62b3b8 <_ZNSi10_M_extractIfEERSiRT_@GLIBCXX_3.4.9>
  409ac6:	68 74 00 00 00       	pushq  $0x74
  409acb:	e9 a0 f8 ff ff       	jmpq   409370 <.plt>

0000000000409ad0 <_ZNSt6localeC1Ev@plt>:
  409ad0:	ff 25 ea 18 22 00    	jmpq   *0x2218ea(%rip)        # 62b3c0 <_ZNSt6localeC1Ev@GLIBCXX_3.4>
  409ad6:	68 75 00 00 00       	pushq  $0x75
  409adb:	e9 90 f8 ff ff       	jmpq   409370 <.plt>

Disassembly of section .text:

0000000000409ae0 <_ZL8getStatemPK10PlanResultm.part.13>:
#include "neighbor.hpp"

using libMultiRobotPlanning::Neighbor;
#include "planresult_fixed_size.hpp"

static inline State getState(const size_t agentIdx,
  409ae0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409ae0 <_ZL8getStatemPK10PlanResultm.part.13>
  409ae7:	49 bb 20 15 22 00 00 	movabs $0x221520,%r11
  409aee:	00 00 00 
		const PlanResult* solution, const size_t t) {
	//const size_t t) const {
	assert(agentIdx < ROBOT_NUMS); // [TEST-removed]
  409af1:	48 ba e0 88 df ff ff 	movabs $0xffffffffffdf88e0,%rdx
  409af8:	ff ff ff 
  409afb:	48 be 83 7d df ff ff 	movabs $0xffffffffffdf7d83,%rsi
  409b02:	ff ff ff 
  409b05:	48 bf 93 7d df ff ff 	movabs $0xffffffffffdf7d93,%rdi
  409b0c:	ff ff ff 
  409b0f:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409b16:	ff ff ff 
  409b19:	4c 01 d8             	add    %r11,%rax
static inline State getState(const size_t agentIdx,
  409b1c:	41 57                	push   %r15
	assert(agentIdx < ROBOT_NUMS); // [TEST-removed]
  409b1e:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409b22:	48 01 c6             	add    %rax,%rsi
  409b25:	ba 11 00 00 00       	mov    $0x11,%edx
  409b2a:	48 01 c7             	add    %rax,%rdi
  409b2d:	49 89 c7             	mov    %rax,%r15
  409b30:	49 01 c0             	add    %rax,%r8
  409b33:	41 ff d0             	callq  *%r8

0000000000409b36 <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEptEv.isra.53.part.54>:
    {
        BOOST_ASSERT( px != 0 );
        return *px;
    }
    
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409b36:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409b36 <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEptEv.isra.53.part.54>
  409b3d:	49 bb ca 14 22 00 00 	movabs $0x2214ca,%r11
  409b44:	00 00 00 
    {
        BOOST_ASSERT( px != 0 );
  409b47:	48 ba c0 85 df ff ff 	movabs $0xffffffffffdf85c0,%rdx
  409b4e:	ff ff ff 
  409b51:	48 be 00 7a df ff ff 	movabs $0xffffffffffdf7a00,%rsi
  409b58:	ff ff ff 
  409b5b:	48 bf a9 7d df ff ff 	movabs $0xffffffffffdf7da9,%rdi
  409b62:	ff ff ff 
  409b65:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409b6c:	ff ff ff 
  409b6f:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409b72:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409b74:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409b78:	48 01 c6             	add    %rax,%rsi
  409b7b:	ba de 02 00 00       	mov    $0x2de,%edx
  409b80:	48 01 c7             	add    %rax,%rdi
  409b83:	49 89 c7             	mov    %rax,%r15
  409b86:	49 01 c0             	add    %rax,%r8
  409b89:	41 ff d0             	callq  *%r8

0000000000409b8c <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEdeEv.isra.55.part.56>:
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409b8c:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409b8c <_ZNK5boost10shared_ptrIN4YAML6detail9node_dataEEdeEv.isra.55.part.56>
  409b93:	49 bb 74 14 22 00 00 	movabs $0x221474,%r11
  409b9a:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409b9d:	48 ba 40 82 df ff ff 	movabs $0xffffffffffdf8240,%rdx
  409ba4:	ff ff ff 
  409ba7:	48 be 00 7a df ff ff 	movabs $0xffffffffffdf7a00,%rsi
  409bae:	ff ff ff 
  409bb1:	48 bf a9 7d df ff ff 	movabs $0xffffffffffdf7da9,%rdi
  409bb8:	ff ff ff 
  409bbb:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409bc2:	ff ff ff 
  409bc5:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409bc8:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409bca:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409bce:	48 01 c6             	add    %rax,%rsi
  409bd1:	ba d8 02 00 00       	mov    $0x2d8,%edx
  409bd6:	48 01 c7             	add    %rax,%rdi
  409bd9:	49 89 c7             	mov    %rax,%r15
  409bdc:	49 01 c0             	add    %rax,%r8
  409bdf:	41 ff d0             	callq  *%r8

0000000000409be2 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEptEv.isra.57.part.58>:
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409be2:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409be2 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEptEv.isra.57.part.58>
  409be9:	49 bb 1e 14 22 00 00 	movabs $0x22141e,%r11
  409bf0:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409bf3:	48 ba e0 84 df ff ff 	movabs $0xffffffffffdf84e0,%rdx
  409bfa:	ff ff ff 
  409bfd:	48 be 00 7a df ff ff 	movabs $0xffffffffffdf7a00,%rsi
  409c04:	ff ff ff 
  409c07:	48 bf a9 7d df ff ff 	movabs $0xffffffffffdf7da9,%rdi
  409c0e:	ff ff ff 
  409c11:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409c18:	ff ff ff 
  409c1b:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c1e:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409c20:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409c24:	48 01 c6             	add    %rax,%rsi
  409c27:	ba de 02 00 00       	mov    $0x2de,%edx
  409c2c:	48 01 c7             	add    %rax,%rdi
  409c2f:	49 89 c7             	mov    %rax,%r15
  409c32:	49 01 c0             	add    %rax,%r8
  409c35:	41 ff d0             	callq  *%r8

0000000000409c38 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEdeEv.isra.59.part.60>:
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c38:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409c38 <_ZNK5boost10shared_ptrIN4YAML6detail8node_refEEdeEv.isra.59.part.60>
  409c3f:	49 bb c8 13 22 00 00 	movabs $0x2213c8,%r11
  409c46:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409c49:	48 ba 20 83 df ff ff 	movabs $0xffffffffffdf8320,%rdx
  409c50:	ff ff ff 
  409c53:	48 be 00 7a df ff ff 	movabs $0xffffffffffdf7a00,%rsi
  409c5a:	ff ff ff 
  409c5d:	48 bf a9 7d df ff ff 	movabs $0xffffffffffdf7da9,%rdi
  409c64:	ff ff ff 
  409c67:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409c6e:	ff ff ff 
  409c71:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_dereference< T >::type operator* () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c74:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409c76:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409c7a:	48 01 c6             	add    %rax,%rsi
  409c7d:	ba d8 02 00 00       	mov    $0x2d8,%edx
  409c82:	48 01 c7             	add    %rax,%rdi
  409c85:	49 89 c7             	mov    %rax,%r15
  409c88:	49 01 c0             	add    %rax,%r8
  409c8b:	41 ff d0             	callq  *%r8

0000000000409c8e <_ZNK5boost10shared_ptrIN4YAML6detail13memory_holderEEptEv.isra.61.part.62>:
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409c8e:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 409c8e <_ZNK5boost10shared_ptrIN4YAML6detail13memory_holderEEptEv.isra.61.part.62>
  409c95:	49 bb 72 13 22 00 00 	movabs $0x221372,%r11
  409c9c:	00 00 00 
        BOOST_ASSERT( px != 0 );
  409c9f:	48 ba 80 87 df ff ff 	movabs $0xffffffffffdf8780,%rdx
  409ca6:	ff ff ff 
  409ca9:	48 be 00 7a df ff ff 	movabs $0xffffffffffdf7a00,%rsi
  409cb0:	ff ff ff 
  409cb3:	48 bf a9 7d df ff ff 	movabs $0xffffffffffdf7da9,%rdi
  409cba:	ff ff ff 
  409cbd:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  409cc4:	ff ff ff 
  409cc7:	4c 01 d8             	add    %r11,%rax
    typename boost::detail::sp_member_access< T >::type operator-> () const BOOST_SP_NOEXCEPT_WITH_ASSERT
  409cca:	41 57                	push   %r15
        BOOST_ASSERT( px != 0 );
  409ccc:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  409cd0:	48 01 c6             	add    %rax,%rsi
  409cd3:	ba de 02 00 00       	mov    $0x2de,%edx
  409cd8:	48 01 c7             	add    %rax,%rdi
  409cdb:	49 89 c7             	mov    %rax,%r15
  409cde:	49 01 c0             	add    %rax,%r8
  409ce1:	41 ff d0             	callq  *%r8
  409ce4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  409ceb:	00 00 00 
  409cee:	66 90                	xchg   %ax,%ax

0000000000409cf0 <main>:

#include "macro.hpp"
#include "ecbs_without_boost.hpp"


int main(int argc, char* argv[]) {
  409cf0:	41 57                	push   %r15
  409cf2:	41 56                	push   %r14
  409cf4:	49 bb 10 13 22 00 00 	movabs $0x221310,%r11
  409cfb:	00 00 00 
  409cfe:	41 55                	push   %r13
  409d00:	41 54                	push   %r12
  namespace po = boost::program_options;
  // Declare the supported options.
  po::options_description desc("Allowed options");
  409d02:	48 b8 80 ff ff ff ff 	movabs $0xffffffffffffff80,%rax
  409d09:	ff ff ff 
int main(int argc, char* argv[]) {
  409d0c:	55                   	push   %rbp
  409d0d:	53                   	push   %rbx
  409d0e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 409cf0 <main>
  409d15:	4c 01 db             	add    %r11,%rbx
  409d18:	48 81 ec b8 06 00 00 	sub    $0x6b8,%rsp
  po::options_description desc("Allowed options");
  409d1f:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
int main(int argc, char* argv[]) {
  409d23:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  po::options_description desc("Allowed options");
  409d28:	49 89 df             	mov    %rbx,%r15
int main(int argc, char* argv[]) {
  409d2b:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  po::options_description desc("Allowed options");
  409d2f:	8b 28                	mov    (%rax),%ebp
  409d31:	48 8d 84 24 b0 04 00 	lea    0x4b0(%rsp),%rax
  409d38:	00 
  409d39:	49 89 c6             	mov    %rax,%r14
  409d3c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  409d41:	48 b8 77 7e df ff ff 	movabs $0xffffffffffdf7e77,%rax
  409d48:	ff ff ff 
  409d4b:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  409d4f:	48 b8 90 2c de ff ff 	movabs $0xffffffffffde2c90,%rax
  409d56:	ff ff ff 
  409d59:	4c 89 f7             	mov    %r14,%rdi
  409d5c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  409d61:	48 01 d8             	add    %rbx,%rax
  409d64:	ff d0                	callq  *%rax
  409d66:	48 8d 84 24 30 04 00 	lea    0x430(%rsp),%rax
  409d6d:	00 
  409d6e:	89 e9                	mov    %ebp,%ecx
  409d70:	89 ea                	mov    %ebp,%edx
  409d72:	d1 e9                	shr    %ecx
  409d74:	4c 89 f6             	mov    %r14,%rsi
  409d77:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  409d7c:	48 89 c7             	mov    %rax,%rdi
  409d7f:	48 b8 b0 e8 dd ff ff 	movabs $0xffffffffffdde8b0,%rax
  409d86:	ff ff ff 
  409d89:	48 01 d8             	add    %rbx,%rax
  409d8c:	ff d0                	callq  *%rax
  409d8e:	48 8b bc 24 b0 04 00 	mov    0x4b0(%rsp),%rdi
  409d95:	00 
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
	if (!_M_is_local())
  409d96:	4c 89 f0             	mov    %r14,%rax
  409d99:	48 83 c0 10          	add    $0x10,%rax
  409d9d:	48 39 c7             	cmp    %rax,%rdi
  409da0:	74 0f                	je     409db1 <main+0xc1>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
  409da2:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  409da9:	ff ff ff 
  409dac:	48 01 d8             	add    %rbx,%rax
  409daf:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  409db1:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
  409db8:	00 
      { _M_string_length = __length; }
  409db9:	48 c7 84 24 08 01 00 	movq   $0x0,0x108(%rsp)
  409dc0:	00 00 00 00 00 
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
  409dc5:	c6 84 24 10 01 00 00 	movb   $0x0,0x110(%rsp)
  409dcc:	00 
  409dcd:	48 c7 84 24 28 01 00 	movq   $0x0,0x128(%rsp)
  409dd4:	00 00 00 00 00 
  409dd9:	c6 84 24 30 01 00 00 	movb   $0x0,0x130(%rsp)
  409de0:	00 

    template<class T>
    typed_value<T>*
    value(T* v)
    {
        typed_value<T>* r = new typed_value<T>(v);
  409de1:	bf b0 00 00 00       	mov    $0xb0,%edi
	: allocator_type(__a), _M_p(__dat) { }
  409de6:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  409deb:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  409df2:	00 
  409df3:	49 89 df             	mov    %rbx,%r15
  409df6:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  409dfd:	00 
  409dfe:	48 8d 84 24 20 01 00 	lea    0x120(%rsp),%rax
  409e05:	00 
  409e06:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  409e0b:	48 8d 84 24 30 01 00 	lea    0x130(%rsp),%rax
  409e12:	00 
  409e13:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
  409e1a:	00 
  409e1b:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  409e22:	ff ff ff 
  409e25:	49 89 c6             	mov    %rax,%r14
  409e28:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  409e2d:	48 01 d8             	add    %rbx,%rax
  409e30:	ff d0                	callq  *%rax
  409e32:	48 89 c5             	mov    %rax,%rbp
        /** Ctor. The 'store_to' parameter tells where to store
            the value when it's known. The parameter can be NULL. */
        typed_value(T* store_to) 
        : m_store_to(store_to), m_composing(false),
          m_implicit(false), m_multitoken(false),
          m_zero_tokens(false), m_required(false)
  409e35:	48 b8 90 fb ff ff ff 	movabs $0xfffffffffffffb90,%rax
  409e3c:	ff ff ff 
        {
        }

        template<typename ValueType>
        any(const ValueType & value)
          : content(new holder<
  409e3f:	bf 10 00 00 00       	mov    $0x10,%edi
  409e44:	48 01 d8             	add    %rbx,%rax
      { _M_string_length = __length; }
  409e47:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
  409e4e:	00 
  409e4f:	c6 45 28 00          	movb   $0x0,0x28(%rbp)
  409e53:	48 89 45 00          	mov    %rax,0x0(%rbp)
  409e57:	48 83 c0 70          	add    $0x70,%rax
          : content(0)
  409e5b:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
  409e62:	00 
  409e63:	48 89 45 08          	mov    %rax,0x8(%rbp)
  409e67:	48 8d 84 24 b4 00 00 	lea    0xb4(%rsp),%rax
  409e6e:	00 
  409e6f:	48 c7 45 48 00 00 00 	movq   $0x0,0x48(%rbp)
  409e76:	00 
  409e77:	c6 45 50 00          	movb   $0x0,0x50(%rbp)
  409e7b:	48 c7 45 60 00 00 00 	movq   $0x0,0x60(%rbp)
  409e82:	00 
  409e83:	48 89 45 10          	mov    %rax,0x10(%rbp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  409e87:	48 8d 45 28          	lea    0x28(%rbp),%rax
      { _M_string_length = __length; }
  409e8b:	48 c7 45 70 00 00 00 	movq   $0x0,0x70(%rbp)
  409e92:	00 
  409e93:	c6 45 78 00          	movb   $0x0,0x78(%rbp)
  409e97:	c6 85 88 00 00 00 00 	movb   $0x0,0x88(%rbp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  409e9e:	48 89 45 18          	mov    %rax,0x18(%rbp)
  409ea2:	48 8d 45 50          	lea    0x50(%rbp),%rax
  409ea6:	c6 85 89 00 00 00 00 	movb   $0x0,0x89(%rbp)
  409ead:	c6 85 8a 00 00 00 00 	movb   $0x0,0x8a(%rbp)
  409eb4:	c6 85 8b 00 00 00 00 	movb   $0x0,0x8b(%rbp)
  409ebb:	48 89 45 40          	mov    %rax,0x40(%rbp)
  409ebf:	48 8d 45 78          	lea    0x78(%rbp),%rax
  409ec3:	c6 85 8c 00 00 00 00 	movb   $0x0,0x8c(%rbp)
 * functionN objects).
 */
class function_base
{
public:
  function_base() : vtable(0) { }
  409eca:	48 c7 85 90 00 00 00 	movq   $0x0,0x90(%rbp)
  409ed1:	00 00 00 00 
  409ed5:	48 89 45 68          	mov    %rax,0x68(%rbp)
          : content(new holder<
  409ed9:	4c 89 f0             	mov    %r14,%rax
  409edc:	48 01 d8             	add    %rbx,%rax
  409edf:	ff d0                	callq  *%rax
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
  409ee1:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
        class holder : public placeholder
        {
        public: // structors

            holder(const ValueType & value)
              : held(value)
  409ee5:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  409eec:	ff ff ff 
  409eef:	49 bd f8 92 df ff ff 	movabs $0xffffffffffdf92f8,%r13
  409ef6:	ff ff ff 
  409ef9:	48 01 da             	add    %rbx,%rdx
  409efc:	f3 41 0f 10 44 1d 00 	movss  0x0(%r13,%rbx,1),%xmm0
  409f03:	48 89 10             	mov    %rdx,(%rax)
  409f06:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  409f0b:	48 89 45 38          	mov    %rax,0x38(%rbp)
            delete content;
  409f0f:	48 85 ff             	test   %rdi,%rdi
  409f12:	74 06                	je     409f1a <main+0x22a>
  409f14:	48 8b 07             	mov    (%rdi),%rax
  409f17:	ff 50 08             	callq  *0x8(%rax)
	: allocator_type(__a), _M_p(__dat) { }
  409f1a:	48 8d 84 24 b0 02 00 	lea    0x2b0(%rsp),%rax
  409f21:	00 
       *  - this is not an error
      */
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
  409f22:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  409f27:	49 89 df             	mov    %rbx,%r15
      { _M_string_length = __length; }
  409f2a:	48 c7 84 24 b8 02 00 	movq   $0x0,0x2b8(%rsp)
  409f31:	00 00 00 00 00 
  409f36:	c6 84 24 c0 02 00 00 	movb   $0x0,0x2c0(%rsp)
  409f3d:	00 
       *  derived classes' initialization lists, which pass a pointer to
       *  their own stream buffer.
      */
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }
  409f3e:	49 bc a8 ff ff ff ff 	movabs $0xffffffffffffffa8,%r12
  409f45:	ff ff ff 
	: allocator_type(__a), _M_p(__dat) { }
  409f48:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  409f4d:	48 8d 84 24 c0 02 00 	lea    0x2c0(%rsp),%rax
  409f54:	00 
  409f55:	48 c7 84 24 b8 04 00 	movq   $0x0,0x4b8(%rsp)
  409f5c:	00 00 00 00 00 
  409f61:	49 8d 7e 38          	lea    0x38(%r14),%rdi
  409f65:	48 c7 84 24 c0 04 00 	movq   $0x0,0x4c0(%rsp)
  409f6c:	00 00 00 00 00 
  409f71:	48 c7 84 24 c8 04 00 	movq   $0x0,0x4c8(%rsp)
  409f78:	00 00 00 00 00 
  409f7d:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  409f84:	00 
  409f85:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  409f8c:	ff ff ff 
  409f8f:	48 c7 84 24 d0 04 00 	movq   $0x0,0x4d0(%rsp)
  409f96:	00 00 00 00 00 
  409f9b:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  409f9f:	48 c7 84 24 d8 04 00 	movq   $0x0,0x4d8(%rsp)
  409fa6:	00 00 00 00 00 
  409fab:	48 c7 84 24 e0 04 00 	movq   $0x0,0x4e0(%rsp)
  409fb2:	00 00 00 00 00 
  409fb7:	48 83 c0 10          	add    $0x10,%rax
  409fbb:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  409fc2:	00 
  409fc3:	48 b8 d0 ea dd ff ff 	movabs $0xffffffffffddead0,%rax
  409fca:	ff ff ff 
  409fcd:	48 01 d8             	add    %rbx,%rax
  409fd0:	ff d0                	callq  *%rax
  409fd2:	4c 89 f0             	mov    %r14,%rax
       *  The default constructor does nothing and is not normally
       *  accessible to users.
      */
      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false), 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
  409fd5:	4c 89 74 24 10       	mov    %r14,0x10(%rsp)
  409fda:	4d 8d 76 70          	lea    0x70(%r14),%r14
  409fde:	48 83 c0 58          	add    $0x58,%rax
       *  The default constructor initializes the parent class using its
       *  own default ctor.
      */
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
  409fe2:	c7 84 24 f0 04 00 00 	movl   $0x18,0x4f0(%rsp)
  409fe9:	18 00 00 00 
      { _M_string_length = __length; }
  409fed:	48 c7 84 24 00 05 00 	movq   $0x0,0x500(%rsp)
  409ff4:	00 00 00 00 00 
	: allocator_type(__a), _M_p(__dat) { }
  409ff9:	48 89 84 24 f8 04 00 	mov    %rax,0x4f8(%rsp)
  40a000:	00 
    namespace detail // basic_unlockedbuf
    {
        // acts as a stream buffer which wraps around a pair of pointers
        // and gives acces to internals
        template <class BufferType, class CharT>
        class basic_unlockedbuf : public basic_pointerbuf<CharT, BufferType> {
  40a001:	48 b8 d0 fc ff ff ff 	movabs $0xfffffffffffffcd0,%rax
  40a008:	ff ff ff 
  40a00b:	4c 89 f7             	mov    %r14,%rdi
  40a00e:	48 01 d8             	add    %rbx,%rax
  40a011:	c6 84 24 08 05 00 00 	movb   $0x0,0x508(%rsp)
  40a018:	00 
       *         @a __gend == @c egptr()
      */
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
	_M_in_beg = __gbeg;
  40a019:	48 c7 84 24 b8 04 00 	movq   $0x0,0x4b8(%rsp)
  40a020:	00 00 00 00 00 
  40a025:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40a02c:	00 
  40a02d:	48 b8 40 e4 dd ff ff 	movabs $0xffffffffffdde440,%rax
  40a034:	ff ff ff 
	_M_in_cur = __gnext;
  40a037:	48 c7 84 24 c0 04 00 	movq   $0x0,0x4c0(%rsp)
  40a03e:	00 00 00 00 00 
  40a043:	48 01 d8             	add    %rbx,%rax
	_M_in_end = __gend;
  40a046:	48 c7 84 24 c8 04 00 	movq   $0x0,0x4c8(%rsp)
  40a04d:	00 00 00 00 00 
  40a052:	ff d0                	callq  *%rax
  40a054:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40a058:	48 c7 84 24 f8 05 00 	movq   $0x0,0x5f8(%rsp)
  40a05f:	00 00 00 00 00 
  40a064:	4c 89 f7             	mov    %r14,%rdi
  40a067:	c6 84 24 00 06 00 00 	movb   $0x0,0x600(%rsp)
  40a06e:	00 
  40a06f:	c6 84 24 01 06 00 00 	movb   $0x0,0x601(%rsp)
  40a076:	00 
  40a077:	48 c7 84 24 08 06 00 	movq   $0x0,0x608(%rsp)
  40a07e:	00 00 00 00 00 
  40a083:	48 c7 84 24 10 06 00 	movq   $0x0,0x610(%rsp)
  40a08a:	00 00 00 00 00 
  40a08f:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40a093:	48 83 c0 40          	add    $0x40,%rax
  40a097:	48 c7 84 24 18 06 00 	movq   $0x0,0x618(%rsp)
  40a09e:	00 00 00 00 00 
  40a0a3:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40a0aa:	00 
  40a0ab:	48 b8 a0 e8 dd ff ff 	movabs $0xffffffffffdde8a0,%rax
  40a0b2:	ff ff ff 
  40a0b5:	48 c7 84 24 20 06 00 	movq   $0x0,0x620(%rsp)
  40a0bc:	00 00 00 00 00 
  40a0c1:	48 89 94 24 18 05 00 	mov    %rdx,0x518(%rsp)
  40a0c8:	00 
  40a0c9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  40a0ce:	48 01 d8             	add    %rbx,%rax
  40a0d1:	ff d0                	callq  *%rax
        public:
            lexical_istream_limited_src() BOOST_NOEXCEPT
              : out_buffer()
              , out_stream(&out_buffer)
              , start(buffer)
              , finish(buffer + CharacterBufferSize)
  40a0d3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
#ifdef __va_arg_pack
__fortify_function int
__NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
{
  return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
				  __bos (__s), __fmt, __va_arg_pack ());
  40a0d8:	49 b9 a0 e5 dd ff ff 	movabs $0xffffffffffdde5a0,%r9
  40a0df:	ff ff ff 
  40a0e2:	41 b8 09 00 00 00    	mov    $0x9,%r8d
  40a0e8:	49 01 d9             	add    %rbx,%r9
  40a0eb:	ba 15 00 00 00       	mov    $0x15,%edx
  40a0f0:	be 01 00 00 00       	mov    $0x1,%esi
  40a0f5:	49 89 df             	mov    %rbx,%r15
  40a0f8:	4c 8d b0 78 01 00 00 	lea    0x178(%rax),%r14
  40a0ff:	48 05 8d 01 00 00    	add    $0x18d,%rax
  40a105:	48 89 84 24 48 06 00 	mov    %rax,0x648(%rsp)
  40a10c:	00 
  40a10d:	48 b8 e8 92 df ff ff 	movabs $0xffffffffffdf92e8,%rax
  40a114:	ff ff ff 
  40a117:	f2 0f 10 04 03       	movsd  (%rbx,%rax,1),%xmm0
  40a11c:	48 b8 87 7e df ff ff 	movabs $0xffffffffffdf7e87,%rax
  40a123:	ff ff ff 
  40a126:	4c 89 b4 24 40 06 00 	mov    %r14,0x640(%rsp)
  40a12d:	00 
  40a12e:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40a132:	4c 89 f7             	mov    %r14,%rdi
  40a135:	b8 01 00 00 00       	mov    $0x1,%eax
  40a13a:	41 ff d1             	callq  *%r9
                    sprintf_s(begin, CharacterBufferSize,
#else
                    sprintf(begin, 
#endif
                    "%.*g", static_cast<int>(boost::detail::lcast_get_precision<float>()), val_as_double);
                return finish > start;
  40a13d:	48 8b 8c 24 40 06 00 	mov    0x640(%rsp),%rcx
  40a144:	00 
                    sprintf(begin, 
  40a145:	4c 63 c0             	movslq %eax,%r8
                finish = start +
  40a148:	4d 01 f0             	add    %r14,%r8
  40a14b:	4c 89 84 24 48 06 00 	mov    %r8,0x648(%rsp)
  40a152:	00 

            static inline bool try_convert(const Source& arg, Target& result) {
                i_interpreter_type i_interpreter;

                // Disabling ADL, by directly specifying operators.
                if (!(i_interpreter.operator <<(arg)))
  40a153:	49 39 c8             	cmp    %rcx,%r8
  40a156:	0f 86 2b 10 00 00    	jbe    40b187 <main+0x1497>
      replace(size_type __pos, size_type __n1, const _CharT* __s,
	      size_type __n2)
      {
	__glibcxx_requires_string_len(__s, __n2);
	return _M_replace(_M_check(__pos, "basic_string::replace"),
			  _M_limit(__pos, __n1), __s, __n2);
  40a15c:	48 b8 20 e9 dd ff ff 	movabs $0xffffffffffdde920,%rax
  40a163:	ff ff ff 
  40a166:	49 29 c8             	sub    %rcx,%r8
  40a169:	48 8b 94 24 b8 02 00 	mov    0x2b8(%rsp),%rdx
  40a170:	00 
  40a171:	31 f6                	xor    %esi,%esi
  40a173:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  40a178:	48 01 d8             	add    %rbx,%rax
  40a17b:	ff d0                	callq  *%rax
       *  @brief  Base destructor.
       *
       *  This does very little apart from providing a virtual base dtor.
      */
      virtual
      ~basic_ostream() { }
  40a17d:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
      ~basic_ios() { }
  40a181:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40a186:	49 89 df             	mov    %rbx,%r15
  40a189:	48 83 c0 18          	add    $0x18,%rax
  40a18d:	49 8d 7e 70          	lea    0x70(%r14),%rdi
  40a191:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  40a198:	00 
  40a199:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40a1a0:	ff ff ff 
  40a1a3:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40a1a7:	48 83 c0 10          	add    $0x10,%rax
  40a1ab:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40a1b2:	00 
  40a1b3:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  40a1ba:	ff ff ff 
  40a1bd:	48 01 d8             	add    %rbx,%rax
  40a1c0:	ff d0                	callq  *%rax
//
// class basic_pointerbuf:
// acts as a stream buffer which wraps around a pair of pointers:
//
template <class charT, class BufferT >
class basic_pointerbuf : public BufferT {
  40a1c2:	48 b8 50 fc ff ff ff 	movabs $0xfffffffffffffc50,%rax
  40a1c9:	ff ff ff 
  40a1cc:	4c 89 f7             	mov    %r14,%rdi
  40a1cf:	48 01 d8             	add    %rbx,%rax
  40a1d2:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40a1d9:	00 
  40a1da:	48 b8 c0 ba de ff ff 	movabs $0xffffffffffdebac0,%rax
  40a1e1:	ff ff ff 
  40a1e4:	48 01 d8             	add    %rbx,%rax
  40a1e7:	ff d0                	callq  *%rax
            provide operator<< for ostream.
        */
        typed_value* default_value(const T& v)
        {
            m_default_value = boost::any(v);
            m_default_value_as_text = boost::lexical_cast<std::string>(v);
  40a1e9:	4c 8b 74 24 68       	mov    0x68(%rsp),%r14
  40a1ee:	48 b8 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rax
  40a1f5:	ff ff ff 
  40a1f8:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
  40a1fc:	48 01 d8             	add    %rbx,%rax
  40a1ff:	4c 89 f6             	mov    %r14,%rsi
  40a202:	ff d0                	callq  *%rax
  40a204:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40a20b:	00 
	if (!_M_is_local())
  40a20c:	4c 89 f0             	mov    %r14,%rax
  40a20f:	48 83 c0 10          	add    $0x10,%rax
  40a213:	48 39 c7             	cmp    %rax,%rdi
  40a216:	74 12                	je     40a22a <main+0x53a>
  40a218:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40a21f:	ff ff ff 
  40a222:	49 89 df             	mov    %rbx,%r15
  40a225:	48 01 d8             	add    %rbx,%rax
  40a228:	ff d0                	callq  *%rax
  std::string outputFile;
  float w;
  desc.add_options()("help", "produce help message")(
      "input,i", po::value<std::string>(&inputFile)->required(),
      "input file (YAML)")("output,o",
                           po::value<std::string>(&outputFile)->required(),
  40a22a:	49 bc 20 c1 de ff ff 	movabs $0xffffffffffdec120,%r12
  40a231:	ff ff ff 
  40a234:	48 8b 7c 24 78       	mov    0x78(%rsp),%rdi
  40a239:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a23d:	ff d0                	callq  *%rax
        }
            
        /** Specifies that the value must occur. */
        typed_value* required()
        {
            m_required = true;
  40a23f:	48 89 04 24          	mov    %rax,(%rsp)
  40a243:	c6 80 8c 00 00 00 01 	movb   $0x1,0x8c(%rax)
      "input,i", po::value<std::string>(&inputFile)->required(),
  40a24a:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a24e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  40a253:	ff d0                	callq  *%rax
  40a255:	49 89 c4             	mov    %rax,%r12
  40a258:	c6 80 8c 00 00 00 01 	movb   $0x1,0x8c(%rax)
  desc.add_options()("help", "produce help message")(
  40a25f:	48 b8 d0 e7 dd ff ff 	movabs $0xffffffffffdde7d0,%rax
  40a266:	ff ff ff 
  40a269:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40a26e:	49 89 df             	mov    %rbx,%r15
  40a271:	48 01 d8             	add    %rbx,%rax
  40a274:	ff d0                	callq  *%rax
  40a276:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40a27d:	00 
  40a27e:	48 b8 8c 7e df ff ff 	movabs $0xffffffffffdf7e8c,%rax
  40a285:	ff ff ff 
  40a288:	49 be a1 7e df ff ff 	movabs $0xffffffffffdf7ea1,%r14
  40a28f:	ff ff ff 
  40a292:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40a296:	48 b8 70 ea dd ff ff 	movabs $0xffffffffffddea70,%rax
  40a29d:	ff ff ff 
  40a2a0:	49 8d 34 1e          	lea    (%r14,%rbx,1),%rsi
  40a2a4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40a2a9:	48 01 d8             	add    %rbx,%rax
  40a2ac:	ff d0                	callq  *%rax
      "input file (YAML)")("output,o",
  40a2ae:	48 ba a6 7e df ff ff 	movabs $0xffffffffffdf7ea6,%rdx
  40a2b5:	ff ff ff 
  40a2b8:	48 be b8 7e df ff ff 	movabs $0xffffffffffdf7eb8,%rsi
  40a2bf:	ff ff ff 
  40a2c2:	48 89 c7             	mov    %rax,%rdi
  40a2c5:	48 8d 0c 13          	lea    (%rbx,%rdx,1),%rcx
  40a2c9:	4c 89 e2             	mov    %r12,%rdx
  40a2cc:	49 bc 80 ea dd ff ff 	movabs $0xffffffffffddea80,%r12
  40a2d3:	ff ff ff 
  40a2d6:	48 01 de             	add    %rbx,%rsi
  40a2d9:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a2dd:	ff d0                	callq  *%rax
                           "output file (YAML)")(
  40a2df:	48 ba c0 7e df ff ff 	movabs $0xffffffffffdf7ec0,%rdx
  40a2e6:	ff ff ff 
  40a2e9:	48 be d3 7e df ff ff 	movabs $0xffffffffffdf7ed3,%rsi
  40a2f0:	ff ff ff 
  40a2f3:	48 89 c7             	mov    %rax,%rdi
  40a2f6:	48 8d 0c 13          	lea    (%rbx,%rdx,1),%rcx
  40a2fa:	48 01 de             	add    %rbx,%rsi
  40a2fd:	48 8b 14 24          	mov    (%rsp),%rdx
  40a301:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  40a305:	ff d0                	callq  *%rax
      "suboptimality,w", po::value<float>(&w)->default_value(1.0),
      "suboptimality bound");
  40a307:	48 ba dc 7e df ff ff 	movabs $0xffffffffffdf7edc,%rdx
  40a30e:	ff ff ff 
  40a311:	48 be f0 7e df ff ff 	movabs $0xffffffffffdf7ef0,%rsi
  40a318:	ff ff ff 
  40a31b:	48 89 c7             	mov    %rax,%rdi
  40a31e:	48 8d 0c 13          	lea    (%rbx,%rdx,1),%rcx
  40a322:	48 01 de             	add    %rbx,%rsi
  40a325:	48 89 ea             	mov    %rbp,%rdx
  40a328:	49 01 dc             	add    %rbx,%r12
  40a32b:	41 ff d4             	callq  *%r12

  try {
    po::variables_map vm;
  40a32e:	48 b8 c0 e4 dd ff ff 	movabs $0xffffffffffdde4c0,%rax
  40a335:	ff ff ff 
  40a338:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40a33d:	48 01 d8             	add    %rbx,%rax
  40a340:	ff d0                	callq  *%rax
                       int style,
                       function1<std::pair<std::string, std::string>, 
                                 const std::string&> ext)
    {
        return basic_command_line_parser<charT>(argc, argv).options(desc).
            style(style).extra_parser(ext).run();
  40a342:	48 8d 84 24 b0 03 00 	lea    0x3b0(%rsp),%rax
  40a349:	00 
  40a34a:	48 c7 84 24 10 03 00 	movq   $0x0,0x310(%rsp)
  40a351:	00 00 00 00 00 
  40a356:	48 c7 84 24 e0 02 00 	movq   $0x0,0x2e0(%rsp)
  40a35d:	00 00 00 00 00 
  40a362:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  40a367:	8b 74 24 18          	mov    0x18(%rsp),%esi
  40a36b:	48 89 c5             	mov    %rax,%rbp
  40a36e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  40a373:	48 89 c7             	mov    %rax,%rdi
  40a376:	48 b8 60 35 df ff ff 	movabs $0xffffffffffdf3560,%rax
  40a37d:	ff ff ff 
  40a380:	48 01 d8             	add    %rbx,%rax
  40a383:	ff d0                	callq  *%rax
       detail::cmdline::set_options_description(desc);
  40a385:	4c 8b 64 24 60       	mov    0x60(%rsp),%r12
  40a38a:	48 b8 d0 e6 dd ff ff 	movabs $0xffffffffffdde6d0,%rax
  40a391:	ff ff ff 
  40a394:	48 89 ef             	mov    %rbp,%rdi
  40a397:	48 01 d8             	add    %rbx,%rax
  40a39a:	4c 89 e6             	mov    %r12,%rsi
  40a39d:	ff d0                	callq  *%rax
        detail::cmdline::style(xstyle);
  40a39f:	48 b8 a0 ea dd ff ff 	movabs $0xffffffffffddeaa0,%rax
  40a3a6:	ff ff ff 
        m_desc = &desc;
  40a3a9:	4c 89 a4 24 20 04 00 	mov    %r12,0x420(%rsp)
  40a3b0:	00 
        detail::cmdline::style(xstyle);
  40a3b1:	31 f6                	xor    %esi,%esi
  40a3b3:	48 89 ef             	mov    %rbp,%rdi
  40a3b6:	48 01 d8             	add    %rbx,%rax
  40a3b9:	ff d0                	callq  *%rax
            style(style).extra_parser(ext).run();
  40a3bb:	48 8d 84 24 e0 02 00 	lea    0x2e0(%rsp),%rax
  40a3c2:	00 
  40a3c3:	48 89 ef             	mov    %rbp,%rdi
  40a3c6:	49 89 c4             	mov    %rax,%r12
  40a3c9:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  40a3ce:	48 89 c6             	mov    %rax,%rsi
  40a3d1:	48 b8 d0 eb de ff ff 	movabs $0xffffffffffdeebd0,%rax
  40a3d8:	ff ff ff 
  40a3db:	48 01 d8             	add    %rbx,%rax
  40a3de:	ff d0                	callq  *%rax
  40a3e0:	48 8d b4 24 50 03 00 	lea    0x350(%rsp),%rsi
  40a3e7:	00 
  40a3e8:	48 89 f7             	mov    %rsi,%rdi
  40a3eb:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  40a3f0:	48 89 c6             	mov    %rax,%rsi
  40a3f3:	48 b8 30 2a df ff ff 	movabs $0xffffffffffdf2a30,%rax
  40a3fa:	ff ff ff 
  40a3fd:	48 01 d8             	add    %rbx,%rax
  40a400:	ff d0                	callq  *%rax

        There are two typedefs \-- command_line_parser and wcommand_line_parser,
        for charT == char and charT == wchar_t cases.
    */
    template<class charT>
    class basic_command_line_parser : private detail::cmdline {
  40a402:	48 b8 f0 c1 de ff ff 	movabs $0xffffffffffdec1f0,%rax
  40a409:	ff ff ff 
  40a40c:	48 89 ef             	mov    %rbp,%rdi
  40a40f:	48 01 d8             	add    %rbx,%rax
  40a412:	ff d0                	callq  *%rax
    }

    // Clear out a target, if there is one
    void clear()
    {
      if (vtable) {
  40a414:	48 8b 84 24 e0 02 00 	mov    0x2e0(%rsp),%rax
  40a41b:	00 
  40a41c:	48 85 c0             	test   %rax,%rax
  40a41f:	74 1f                	je     40a440 <main+0x750>
        if (!this->has_trivial_copy_and_destroy())
  40a421:	a8 01                	test   $0x1,%al
  40a423:	75 1b                	jne    40a440 <main+0x750>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40a425:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  40a429:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  40a42c:	48 85 c0             	test   %rax,%rax
  40a42f:	74 0f                	je     40a440 <main+0x750>
            base.manager(functor, functor, destroy_functor_tag);
  40a431:	49 8d 7c 24 08       	lea    0x8(%r12),%rdi
  40a436:	ba 02 00 00 00       	mov    $0x2,%edx
  40a43b:	48 89 fe             	mov    %rdi,%rsi
  40a43e:	ff d0                	callq  *%rax
    po::store(po::parse_command_line(argc, argv, desc), vm);
  40a440:	48 b8 20 ea dd ff ff 	movabs $0xffffffffffddea20,%rax
  40a447:	ff ff ff 
  40a44a:	31 d2                	xor    %edx,%edx
  40a44c:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  40a451:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40a456:	49 89 df             	mov    %rbx,%r15
  40a459:	48 01 d8             	add    %rbx,%rax
  40a45c:	ff d0                	callq  *%rax
    class basic_parsed_options {
  40a45e:	48 b8 80 c2 de ff ff 	movabs $0xffffffffffdec280,%rax
  40a465:	ff ff ff 
  40a468:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40a46d:	48 01 d8             	add    %rbx,%rax
  40a470:	ff d0                	callq  *%rax
      if (vtable) {
  40a472:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  40a479:	00 
  40a47a:	48 85 c0             	test   %rax,%rax
  40a47d:	74 08                	je     40a487 <main+0x797>
        if (!this->has_trivial_copy_and_destroy())
  40a47f:	a8 01                	test   $0x1,%al
  40a481:	0f 84 9e 0c 00 00    	je     40b125 <main+0x1435>
    po::notify(vm);
  40a487:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40a48c:	48 b8 60 e5 dd ff ff 	movabs $0xffffffffffdde560,%rax
  40a493:	ff ff ff 
  40a496:	49 89 df             	mov    %rbx,%r15
  40a499:	48 01 d8             	add    %rbx,%rax
  40a49c:	48 89 ef             	mov    %rbp,%rdi
  40a49f:	ff d0                	callq  *%rax

    if (vm.count("help") != 0u) {
  40a4a1:	48 8d 84 24 80 02 00 	lea    0x280(%rsp),%rax
  40a4a8:	00 
  40a4a9:	49 8d 34 1e          	lea    (%r14,%rbx,1),%rsi
  40a4ad:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  40a4b2:	48 89 c7             	mov    %rax,%rdi
  40a4b5:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40a4ba:	48 01 d8             	add    %rbx,%rax
  40a4bd:	ff d0                	callq  *%rax
  40a4bf:	48 8b 94 24 d0 04 00 	mov    0x4d0(%rsp),%rdx
  40a4c6:	00 
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
		   const _Key& __k) const
    {
      while (__x != 0)
  40a4c7:	48 85 d2             	test   %rdx,%rdx
  40a4ca:	0f 84 c5 20 00 00    	je     40c595 <main+0x28a5>
  40a4d0:	48 b8 a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rax
  40a4d7:	ff ff ff 
  40a4da:	49 89 d6             	mov    %rdx,%r14
  40a4dd:	48 8d 6d 18          	lea    0x18(%rbp),%rbp
  40a4e1:	48 89 04 24          	mov    %rax,(%rsp)
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.compare(__rhs) < 0; }
  40a4e5:	4c 8d 24 18          	lea    (%rax,%rbx,1),%r12
  40a4e9:	eb 11                	jmp    40a4fc <main+0x80c>
  40a4eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  40a4f0:	4c 89 f5             	mov    %r14,%rbp
	  __y = __x, __x = _S_left(__x);
  40a4f3:	4d 8b 76 10          	mov    0x10(%r14),%r14
      while (__x != 0)
  40a4f7:	4d 85 f6             	test   %r14,%r14
  40a4fa:	74 1c                	je     40a518 <main+0x828>
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
  40a4fc:	49 8d 7e 20          	lea    0x20(%r14),%rdi
  40a500:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  40a505:	49 89 df             	mov    %rbx,%r15
  40a508:	41 ff d4             	callq  *%r12
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  40a50b:	85 c0                	test   %eax,%eax
  40a50d:	79 e1                	jns    40a4f0 <main+0x800>
  40a50f:	4d 8b 76 18          	mov    0x18(%r14),%r14
      while (__x != 0)
  40a513:	4d 85 f6             	test   %r14,%r14
  40a516:	75 e4                	jne    40a4fc <main+0x80c>
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k, 
					_S_key(__j._M_node))) ? end() : __j;
  40a518:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40a51d:	48 83 c0 18          	add    $0x18,%rax
  40a521:	48 39 c5             	cmp    %rax,%rbp
  40a524:	0f 84 18 20 00 00    	je     40c542 <main+0x2852>
  40a52a:	4c 8b 34 24          	mov    (%rsp),%r14
  40a52e:	48 8d 75 20          	lea    0x20(%rbp),%rsi
  40a532:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  40a537:	49 89 df             	mov    %rbx,%r15
  40a53a:	49 01 de             	add    %rbx,%r14
  40a53d:	41 ff d6             	callq  *%r14
	      || _M_impl._M_key_compare(__k, 
  40a540:	85 c0                	test   %eax,%eax
  40a542:	0f 88 fa 1f 00 00    	js     40c542 <main+0x2852>
	if (!_M_is_local())
  40a548:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40a54d:	48 8b bc 24 80 02 00 	mov    0x280(%rsp),%rdi
  40a554:	00 
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
  40a555:	bd 01 00 00 00       	mov    $0x1,%ebp
  40a55a:	48 83 c0 10          	add    $0x10,%rax
  40a55e:	48 39 c7             	cmp    %rax,%rdi
  40a561:	0f 84 4e 0a 00 00    	je     40afb5 <main+0x12c5>
  40a567:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40a56e:	ff ff ff 
  40a571:	49 89 df             	mov    %rbx,%r15
  40a574:	48 01 d8             	add    %rbx,%rax
  40a577:	ff d0                	callq  *%rax
  40a579:	48 85 ed             	test   %rbp,%rbp
  40a57c:	0f 85 33 0a 00 00    	jne    40afb5 <main+0x12c5>
    po::variables_map vm;
  40a582:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40a587:	48 b8 60 4e df ff ff 	movabs $0xffffffffffdf4e60,%rax
  40a58e:	ff ff ff 
    std::cerr << e.what() << std::endl << std::endl;
    std::cerr << desc << std::endl;
    return 1;
  }

  YAML::Node config = YAML::LoadFile(inputFile);
  40a591:	49 89 df             	mov    %rbx,%r15
    po::variables_map vm;
  40a594:	48 01 d8             	add    %rbx,%rax
  40a597:	48 89 ef             	mov    %rbp,%rdi
  40a59a:	ff d0                	callq  *%rax
  YAML::Node config = YAML::LoadFile(inputFile);
  40a59c:	48 8d 84 24 40 01 00 	lea    0x140(%rsp),%rax
  40a5a3:	00 
  40a5a4:	48 8b 74 24 70       	mov    0x70(%rsp),%rsi
  40a5a9:	49 89 c6             	mov    %rax,%r14
  40a5ac:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40a5b3:	00 
  40a5b4:	48 89 c7             	mov    %rax,%rdi
  40a5b7:	48 b8 c0 e9 dd ff ff 	movabs $0xffffffffffdde9c0,%rax
  40a5be:	ff ff ff 
  40a5c1:	48 01 d8             	add    %rbx,%rax
  40a5c4:	ff d0                	callq  *%rax
	  __hashtable_alloc(__node_alloc_type(__a))
      { }

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
  40a5c6:	48 8d 84 24 10 03 00 	lea    0x310(%rsp),%rax
  40a5cd:	00 
  /// Default value for rehash policy.  Bucket size is (usually) the
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    _Prime_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40a5ce:	f3 41 0f 10 44 1d 00 	movss  0x0(%r13,%rbx,1),%xmm0

   std::unordered_set<Location> obstacles;
  std::vector<Location> goals;
  std::vector<State> startStates;

  const auto& dim = config["map"]["dimensions"];
  40a5d5:	49 bc 00 7f df ff ff 	movabs $0xffffffffffdf7f00,%r12
  40a5dc:	ff ff ff 
  40a5df:	49 bd b0 19 df ff ff 	movabs $0xffffffffffdf19b0,%r13
  40a5e6:	ff ff ff 
  40a5e9:	4c 89 f6             	mov    %r14,%rsi
  40a5ec:	48 89 04 24          	mov    %rax,(%rsp)
  40a5f0:	48 8d 84 24 40 03 00 	lea    0x340(%rsp),%rax
  40a5f7:	00 
  40a5f8:	48 c7 84 24 18 03 00 	movq   $0x1,0x318(%rsp)
  40a5ff:	00 01 00 00 00 
    _Hash_node_base() noexcept : _M_nxt() { }
  40a604:	48 c7 84 24 20 03 00 	movq   $0x0,0x320(%rsp)
  40a60b:	00 00 00 00 00 
  40a610:	48 c7 84 24 28 03 00 	movq   $0x0,0x328(%rsp)
  40a617:	00 00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40a61c:	f3 0f 11 84 24 30 03 	movss  %xmm0,0x330(%rsp)
  40a623:	00 00 
  40a625:	48 89 84 24 10 03 00 	mov    %rax,0x310(%rsp)
  40a62c:	00 
  40a62d:	48 c7 84 24 38 03 00 	movq   $0x0,0x338(%rsp)
  40a634:	00 00 00 00 00 
  40a639:	49 8d 14 1c          	lea    (%r12,%rbx,1),%rdx
  40a63d:	48 c7 84 24 40 03 00 	movq   $0x0,0x340(%rsp)
  40a644:	00 00 00 00 00 
  40a649:	49 89 ee             	mov    %rbp,%r14
  40a64c:	48 89 ef             	mov    %rbp,%rdi
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  40a64f:	48 c7 84 24 c0 00 00 	movq   $0x0,0xc0(%rsp)
  40a656:	00 00 00 00 00 
  40a65b:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  40a662:	00 00 00 00 00 
  40a667:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  40a66c:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  40a673:	00 00 00 00 00 
  40a678:	48 c7 84 24 e0 00 00 	movq   $0x0,0xe0(%rsp)
  40a67f:	00 00 00 00 00 
  40a684:	48 c7 84 24 e8 00 00 	movq   $0x0,0xe8(%rsp)
  40a68b:	00 00 00 00 00 
  40a690:	48 c7 84 24 f0 00 00 	movq   $0x0,0xf0(%rsp)
  40a697:	00 00 00 00 00 
  40a69c:	ff d0                	callq  *%rax
  40a69e:	48 b8 04 7f df ff ff 	movabs $0xffffffffffdf7f04,%rax
  40a6a5:	ff ff ff 
  40a6a8:	48 8d ac 24 60 01 00 	lea    0x160(%rsp),%rbp
  40a6af:	00 
  40a6b0:	4c 89 f6             	mov    %r14,%rsi
  40a6b3:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40a6b7:	48 b8 90 17 df ff ff 	movabs $0xffffffffffdf1790,%rax
  40a6be:	ff ff ff 
  40a6c1:	48 89 ef             	mov    %rbp,%rdi
  40a6c4:	48 01 d8             	add    %rbx,%rax
  40a6c7:	ff d0                	callq  *%rax
        r.release();
    }

    ~shared_count() // nothrow
    {
        if( pi_ != 0 ) pi_->release();
  40a6c9:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a6d0:	00 
  40a6d1:	48 85 ff             	test   %rdi,%rdi
  40a6d4:	74 10                	je     40a6e6 <main+0x9f6>
  40a6d6:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40a6dd:	ff ff ff 
  40a6e0:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40a6e4:	ff d0                	callq  *%rax
  int dimx = dim[0].as<int>();
  40a6e6:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40a6eb:	48 b8 90 03 df ff ff 	movabs $0xffffffffffdf0390,%rax
  40a6f2:	ff ff ff 
  40a6f5:	48 b9 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rcx
  40a6fc:	ff ff ff 
  40a6ff:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40a704:	c7 84 24 b0 03 00 00 	movl   $0x0,0x3b0(%rsp)
  40a70b:	00 00 00 00 
  40a70f:	48 89 ee             	mov    %rbp,%rsi
  40a712:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  40a717:	48 01 d8             	add    %rbx,%rax
  40a71a:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  40a71f:	4c 89 f7             	mov    %r14,%rdi
  40a722:	ff d0                	callq  *%rax
  40a724:	48 b8 e0 c3 de ff ff 	movabs $0xffffffffffdec3e0,%rax
  40a72b:	ff ff ff 
  40a72e:	4c 89 f7             	mov    %r14,%rdi
  40a731:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40a736:	48 01 d8             	add    %rbx,%rax
  40a739:	ff d0                	callq  *%rax
  40a73b:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a742:	00 
  40a743:	89 84 24 a8 00 00 00 	mov    %eax,0xa8(%rsp)
  40a74a:	48 85 ff             	test   %rdi,%rdi
  40a74d:	74 10                	je     40a75f <main+0xa6f>
  40a74f:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40a756:	ff ff ff 
  40a759:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40a75d:	ff d0                	callq  *%rax
  int dimy = dim[1].as<int>();
  40a75f:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40a764:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  40a769:	48 b9 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rcx
  40a770:	ff ff ff 
  40a773:	c7 84 24 b0 03 00 00 	movl   $0x1,0x3b0(%rsp)
  40a77a:	01 00 00 00 
  40a77e:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  40a783:	48 89 ee             	mov    %rbp,%rsi
  40a786:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  40a78b:	4c 89 f7             	mov    %r14,%rdi
  40a78e:	48 01 d8             	add    %rbx,%rax
  40a791:	ff d0                	callq  *%rax
  40a793:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40a798:	4c 89 f7             	mov    %r14,%rdi
  40a79b:	48 01 d8             	add    %rbx,%rax
  40a79e:	ff d0                	callq  *%rax
  40a7a0:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a7a7:	00 
  40a7a8:	89 84 24 ac 00 00 00 	mov    %eax,0xac(%rsp)
  40a7af:	48 85 ff             	test   %rdi,%rdi
  40a7b2:	74 10                	je     40a7c4 <main+0xad4>
  40a7b4:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40a7bb:	ff ff ff 
  40a7be:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40a7c2:	ff d0                	callq  *%rax

  for (const auto& node : config["map"]["obstacles"]) {
  40a7c4:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40a7c9:	48 b9 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rcx
  40a7d0:	ff ff ff 
  40a7d3:	49 8d 14 1c          	lea    (%r12,%rbx,1),%rdx
  40a7d7:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  40a7de:	00 
  40a7df:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  40a7e4:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
  40a7e9:	4c 89 f7             	mov    %r14,%rdi
  40a7ec:	ff d0                	callq  *%rax
  40a7ee:	48 b8 0f 7f df ff ff 	movabs $0xffffffffffdf7f0f,%rax
  40a7f5:	ff ff ff 
  40a7f8:	48 8d ac 24 80 01 00 	lea    0x180(%rsp),%rbp
  40a7ff:	00 
  40a800:	4c 89 f6             	mov    %r14,%rsi
  40a803:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40a807:	48 b8 d0 1b df ff ff 	movabs $0xffffffffffdf1bd0,%rax
  40a80e:	ff ff ff 
  40a811:	48 89 ef             	mov    %rbp,%rdi
  40a814:	48 01 d8             	add    %rbx,%rax
  40a817:	ff d0                	callq  *%rax
  40a819:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40a820:	00 
  40a821:	48 85 ff             	test   %rdi,%rdi
  40a824:	74 10                	je     40a836 <main+0xb46>
  40a826:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40a82d:	ff ff ff 
  40a830:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40a834:	ff d0                	callq  *%rax
  40a836:	48 b8 80 b2 de ff ff 	movabs $0xffffffffffdeb280,%rax
  40a83d:	ff ff ff 
  40a840:	48 89 ee             	mov    %rbp,%rsi
  40a843:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  40a848:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40a84f:	00 
  40a850:	48 01 d8             	add    %rbx,%rax
  40a853:	ff d0                	callq  *%rax
  40a855:	48 b8 f0 b3 de ff ff 	movabs $0xffffffffffdeb3f0,%rax
  40a85c:	ff ff ff 
  40a85f:	48 89 ee             	mov    %rbp,%rsi
  40a862:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  40a867:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  40a86e:	00 
  40a86f:	48 01 d8             	add    %rbx,%rax
  40a872:	ff d0                	callq  *%rax
    obstacles.insert(Location(node[0].as<int>(), node[1].as<int>()));
  40a874:	48 8d 84 24 60 02 00 	lea    0x260(%rsp),%rax
  40a87b:	00 
  40a87c:	8b ac 24 80 02 00 00 	mov    0x280(%rsp),%ebp
  40a883:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
	_M_node = _Rb_tree_increment(_M_node);
  40a888:	48 b8 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%rax
  40a88f:	ff ff ff 
  40a892:	48 01 d8             	add    %rbx,%rax
  template <typename>
  friend class node_iterator_base;

  template <typename W>
  bool equal(const node_iterator_base<W>& rhs) const {
    if (m_type != rhs.m_type)
  40a895:	39 ac 24 b0 02 00 00 	cmp    %ebp,0x2b0(%rsp)
  40a89c:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40a8a1:	0f 84 2c 03 00 00    	je     40abd3 <main+0xee3>
  40a8a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40a8ae:	00 00 
# endif

      template <class Facade>
      static typename Facade::reference dereference(Facade const& f)
      {
          return f.dereference();
  40a8b0:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  40a8b5:	48 b8 b0 f5 de ff ff 	movabs $0xffffffffffdef5b0,%rax
  40a8bc:	ff ff ff 
  40a8bf:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  40a8c4:	48 01 d8             	add    %rbx,%rax
  40a8c7:	4c 89 ff             	mov    %r15,%rdi
  40a8ca:	ff d0                	callq  *%rax
  40a8cc:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
  40a8d1:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40a8d6:	4c 89 fe             	mov    %r15,%rsi
  40a8d9:	c7 84 24 e0 02 00 00 	movl   $0x1,0x2e0(%rsp)
  40a8e0:	01 00 00 00 
  40a8e4:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  40a8e9:	48 89 e8             	mov    %rbp,%rax
  40a8ec:	4c 89 f7             	mov    %r14,%rdi
  40a8ef:	48 01 d8             	add    %rbx,%rax
  40a8f2:	ff d0                	callq  *%rax
  40a8f4:	4c 8b 6c 24 40       	mov    0x40(%rsp),%r13
  40a8f9:	4c 89 f7             	mov    %r14,%rdi
  40a8fc:	4c 89 e8             	mov    %r13,%rax
  40a8ff:	48 01 d8             	add    %rbx,%rax
  40a902:	ff d0                	callq  *%rax
  40a904:	4c 89 fe             	mov    %r15,%rsi
  40a907:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
  40a90c:	41 89 c6             	mov    %eax,%r14d
  40a90f:	48 89 e8             	mov    %rbp,%rax
  40a912:	c7 84 24 60 02 00 00 	movl   $0x0,0x260(%rsp)
  40a919:	00 00 00 00 
  40a91d:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  40a922:	48 01 d8             	add    %rbx,%rax
  40a925:	4c 89 ff             	mov    %r15,%rdi
  40a928:	ff d0                	callq  *%rax
  40a92a:	4c 89 e8             	mov    %r13,%rax
  40a92d:	4c 89 ff             	mov    %r15,%rdi
  40a930:	48 01 d8             	add    %rbx,%rax
  40a933:	ff d0                	callq  *%rax
  40a935:	4c 63 e0             	movslq %eax,%r12
#pragma once

template<typename T>
void hash_combine(size_t & seed, T const& v) {
	std::hash<T> primitive_type_hash;
	seed ^= primitive_type_hash(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
  40a938:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx

  /// Explicit specialization for short.
  _Cxx_hashtable_define_trivial_hash(short)

  /// Explicit specialization for int.
  _Cxx_hashtable_define_trivial_hash(int)
  40a93d:	49 63 c6             	movslq %r14d,%rax
  40a940:	49 8d 14 0c          	lea    (%r12,%rcx,1),%rdx
  40a944:	4d 89 e5             	mov    %r12,%r13
  40a947:	48 01 c8             	add    %rcx,%rax
  40a94a:	48 8b bc 24 18 03 00 	mov    0x318(%rsp),%rdi
  40a951:	00 
  40a952:	49 89 d4             	mov    %rdx,%r12
  40a955:	49 c1 e4 06          	shl    $0x6,%r12
  40a959:	4c 01 e0             	add    %r12,%rax
  40a95c:	49 89 d4             	mov    %rdx,%r12
  40a95f:	49 c1 ec 02          	shr    $0x2,%r12
  40a963:	49 01 c4             	add    %rax,%r12
  40a966:	49 31 d4             	xor    %rdx,%r12
    { return __num % __den; }
  40a969:	31 d2                	xor    %edx,%edx
  40a96b:	4c 89 e0             	mov    %r12,%rax
  40a96e:	48 f7 f7             	div    %rdi
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_find_before_node(size_type __n, const key_type& __k,
			__hash_code __code) const
    -> __node_base*
    {
      __node_base* __prev_p = _M_buckets[__n];
  40a971:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40a978:	00 
  40a979:	49 89 d0             	mov    %rdx,%r8
  40a97c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40a981:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  40a988:	00 
  40a989:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
      if (!__prev_p)
  40a98d:	48 85 c0             	test   %rax,%rax
  40a990:	74 29                	je     40a9bb <main+0xccb>
	return nullptr;

      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  40a992:	48 8b 08             	mov    (%rax),%rcx
  40a995:	48 8b 71 10          	mov    0x10(%rcx),%rsi
  struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>
  {
    static bool
    _S_equals(const _Equal& __eq, const _ExtractKey& __extract,
	      const _Key& __k, _HashCodeType __c, _Hash_node<_Value, true>* __n)
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  40a999:	49 39 f4             	cmp    %rsi,%r12
  40a99c:	0f 84 ee 06 00 00    	je     40b090 <main+0x13a0>
	   __p = __p->_M_next())
	{
	  if (this->_M_equals(__k, __code, __p))
	    return __prev_p;

	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  40a9a2:	48 8b 09             	mov    (%rcx),%rcx
  40a9a5:	48 85 c9             	test   %rcx,%rcx
  40a9a8:	74 11                	je     40a9bb <main+0xccb>
  40a9aa:	48 8b 71 10          	mov    0x10(%rcx),%rsi
    { return __num % __den; }
  40a9ae:	31 d2                	xor    %edx,%edx
  40a9b0:	48 89 f0             	mov    %rsi,%rax
  40a9b3:	48 f7 f7             	div    %rdi
  40a9b6:	49 39 d0             	cmp    %rdx,%r8
  40a9b9:	74 de                	je     40a999 <main+0xca9>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40a9bb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40a9c0:	bf 18 00 00 00       	mov    $0x18,%edi
  40a9c5:	49 89 df             	mov    %rbx,%r15
  40a9c8:	48 01 d8             	add    %rbx,%rax
  40a9cb:	ff d0                	callq  *%rax
  40a9cd:	48 89 c5             	mov    %rax,%rbp
    _Hash_node_base() noexcept : _M_nxt() { }
  40a9d0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  40a9d7:	44 89 68 08          	mov    %r13d,0x8(%rax)
  40a9db:	44 89 70 0c          	mov    %r14d,0xc(%rax)
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_insert_unique_node(size_type __bkt, __hash_code __code,
			  __node_type* __node)
    -> iterator
    {
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  40a9df:	48 8b 84 24 38 03 00 	mov    0x338(%rsp),%rax
  40a9e6:	00 
      std::pair<bool, std::size_t> __do_rehash
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  40a9e7:	b9 01 00 00 00       	mov    $0x1,%ecx
  40a9ec:	48 8b 94 24 28 03 00 	mov    0x328(%rsp),%rdx
  40a9f3:	00 
  40a9f4:	48 8b b4 24 18 03 00 	mov    0x318(%rsp),%rsi
  40a9fb:	00 
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  40a9fc:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
  40aa03:	00 
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  40aa04:	48 8b 04 24          	mov    (%rsp),%rax
  40aa08:	48 8d 78 20          	lea    0x20(%rax),%rdi
  40aa0c:	48 b8 90 e8 dd ff ff 	movabs $0xffffffffffdde890,%rax
  40aa13:	ff ff ff 
  40aa16:	48 01 d8             	add    %rbx,%rax
  40aa19:	ff d0                	callq  *%rax

      __try
	{
	  if (__do_rehash.first)
  40aa1b:	84 c0                	test   %al,%al
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  40aa1d:	48 89 d6             	mov    %rdx,%rsi
	  if (__do_rehash.first)
  40aa20:	74 35                	je     40aa57 <main+0xd67>
	    {
	      _M_rehash(__do_rehash.second, __saved_state);
  40aa22:	48 b8 60 31 df ff ff 	movabs $0xffffffffffdf3160,%rax
  40aa29:	ff ff ff 
  40aa2c:	48 8d 94 24 b8 00 00 	lea    0xb8(%rsp),%rdx
  40aa33:	00 
  40aa34:	48 8b 3c 24          	mov    (%rsp),%rdi
  40aa38:	48 01 d8             	add    %rbx,%rax
  40aa3b:	ff d0                	callq  *%rax
    { return __num % __den; }
  40aa3d:	4c 89 e0             	mov    %r12,%rax
  40aa40:	31 d2                	xor    %edx,%edx
  40aa42:	48 f7 b4 24 18 03 00 	divq   0x318(%rsp)
  40aa49:	00 
  40aa4a:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40aa51:	00 
  40aa52:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
      if (_M_buckets[__bkt])
  40aa57:	48 8b b4 24 10 03 00 	mov    0x310(%rsp),%rsi
  40aa5e:	00 
  40aa5f:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
      { __n->_M_hash_code = __c; }
  40aa64:	4c 89 65 10          	mov    %r12,0x10(%rbp)
  40aa68:	48 01 f1             	add    %rsi,%rcx
  40aa6b:	48 8b 01             	mov    (%rcx),%rax
  40aa6e:	48 85 c0             	test   %rax,%rax
  40aa71:	0f 84 d5 06 00 00    	je     40b14c <main+0x145c>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  40aa77:	48 8b 00             	mov    (%rax),%rax
  40aa7a:	48 89 45 00          	mov    %rax,0x0(%rbp)
	  _M_buckets[__bkt]->_M_nxt = __node;
  40aa7e:	48 8b 01             	mov    (%rcx),%rax
  40aa81:	48 89 28             	mov    %rbp,(%rax)

	  this->_M_store_code(__node, __code);

	  // Always insert at the beginning of the bucket.
	  _M_insert_bucket_begin(__bkt, __node);
	  ++_M_element_count;
  40aa84:	48 83 84 24 28 03 00 	addq   $0x1,0x328(%rsp)
  40aa8b:	00 01 
  40aa8d:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40aa94:	00 
  40aa95:	48 85 ff             	test   %rdi,%rdi
  40aa98:	74 10                	je     40aaaa <main+0xdba>
  40aa9a:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40aaa1:	ff ff ff 
  40aaa4:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40aaa8:	ff d0                	callq  *%rax
  40aaaa:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40aab1:	00 
  40aab2:	48 85 ff             	test   %rdi,%rdi
  40aab5:	74 10                	je     40aac7 <main+0xdd7>
  40aab7:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40aabe:	ff ff ff 
  40aac1:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40aac5:	ff d0                	callq  *%rax
  40aac7:	48 8b bc 24 a0 03 00 	mov    0x3a0(%rsp),%rdi
  40aace:	00 
  40aacf:	48 85 ff             	test   %rdi,%rdi
  40aad2:	74 10                	je     40aae4 <main+0xdf4>
  40aad4:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40aadb:	ff ff ff 
  40aade:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40aae2:	ff d0                	callq  *%rax
  40aae4:	48 8b bc 24 80 03 00 	mov    0x380(%rsp),%rdi
  40aaeb:	00 
  40aaec:	48 85 ff             	test   %rdi,%rdi
  40aaef:	74 10                	je     40ab01 <main+0xe11>
  40aaf1:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40aaf8:	ff ff ff 
  40aafb:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40aaff:	ff d0                	callq  *%rax
  40ab01:	48 8b bc 24 60 03 00 	mov    0x360(%rsp),%rdi
  40ab08:	00 
  40ab09:	48 85 ff             	test   %rdi,%rdi
  40ab0c:	74 10                	je     40ab1e <main+0xe2e>
  40ab0e:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40ab15:	ff ff ff 
  40ab18:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40ab1c:	ff d0                	callq  *%rax
  40ab1e:	8b ac 24 80 02 00 00 	mov    0x280(%rsp),%ebp
  40ab25:	4c 8b ac 24 88 02 00 	mov    0x288(%rsp),%r13
  40ab2c:	00 
  40ab2d:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40ab34:	00 
    }
    return true;
  }

  void increment() {
    switch (m_type) {
  40ab35:	83 fd 01             	cmp    $0x1,%ebp
  40ab38:	0f 84 a2 05 00 00    	je     40b0e0 <main+0x13f0>
  40ab3e:	83 fd 02             	cmp    $0x2,%ebp
  40ab41:	75 73                	jne    40abb6 <main+0xec6>
  40ab43:	4c 8b a4 24 98 02 00 	mov    0x298(%rsp),%r12
  40ab4a:	00 
  40ab4b:	49 89 df             	mov    %rbx,%r15
  40ab4e:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40ab53:	ff d0                	callq  *%rax
    }
    return value_type();
  }

  MapIter increment_until_defined(MapIter it) {
    while (it != m_mapEnd && !is_defined(it))
  40ab55:	4c 39 e0             	cmp    %r12,%rax
  40ab58:	74 59                	je     40abb3 <main+0xec3>
  40ab5a:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40ab5e:	48 8b 12             	mov    (%rdx),%rdx
  40ab61:	48 85 d2             	test   %rdx,%rdx
  40ab64:	0f 84 f9 1d 00 00    	je     40c963 <main+0x2c73>
  40ab6a:	48 8b 12             	mov    (%rdx),%rdx
  40ab6d:	48 85 d2             	test   %rdx,%rdx
  40ab70:	0f 84 de 1d 00 00    	je     40c954 <main+0x2c64>
  40ab76:	48 89 c7             	mov    %rax,%rdi
  40ab79:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
  40ab7e:	eb 1f                	jmp    40ab9f <main+0xeaf>
  40ab80:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40ab84:	48 8b 12             	mov    (%rdx),%rdx
  40ab87:	48 85 d2             	test   %rdx,%rdx
  40ab8a:	0f 84 d3 1d 00 00    	je     40c963 <main+0x2c73>
  40ab90:	48 8b 12             	mov    (%rdx),%rdx
  40ab93:	48 89 c7             	mov    %rax,%rdi
  40ab96:	48 85 d2             	test   %rdx,%rdx
  40ab99:	0f 84 b5 1d 00 00    	je     40c954 <main+0x2c64>
      ++it;
    return it;
  }

  bool is_defined(MapIter it) const {
    return it->first->is_defined() && it->second->is_defined();
  40ab9f:	80 3a 00             	cmpb   $0x0,(%rdx)
  40aba2:	0f 85 08 05 00 00    	jne    40b0b0 <main+0x13c0>
  40aba8:	49 89 df             	mov    %rbx,%r15
  40abab:	41 ff d6             	callq  *%r14
    while (it != m_mapEnd && !is_defined(it))
  40abae:	4c 39 e0             	cmp    %r12,%rax
  40abb1:	75 cd                	jne    40ab80 <main+0xe90>
        m_mapIt = increment_until_defined(m_mapIt);
  40abb3:	4c 89 e7             	mov    %r12,%rdi
    if (m_type != rhs.m_type)
  40abb6:	39 ac 24 b0 02 00 00 	cmp    %ebp,0x2b0(%rsp)
        m_pMemory(rhs.m_pMemory) {}

 private:
  friend class boost::iterator_core_access;

  void increment() { this->base_reference() = boost::next(this->base()); }
  40abbd:	4c 89 ac 24 88 02 00 	mov    %r13,0x288(%rsp)
  40abc4:	00 
  40abc5:	48 89 bc 24 90 02 00 	mov    %rdi,0x290(%rsp)
  40abcc:	00 
  40abcd:	0f 85 dd fc ff ff    	jne    40a8b0 <main+0xbc0>
    switch (m_type) {
  40abd3:	83 fd 01             	cmp    $0x1,%ebp
  40abd6:	0f 84 0d 05 00 00    	je     40b0e9 <main+0x13f9>
  40abdc:	83 fd 02             	cmp    $0x2,%ebp
  40abdf:	0f 84 2b 05 00 00    	je     40b110 <main+0x1420>
  40abe5:	48 8b bc 24 d8 02 00 	mov    0x2d8(%rsp),%rdi
  40abec:	00 
  40abed:	48 85 ff             	test   %rdi,%rdi
  40abf0:	74 10                	je     40ac02 <main+0xf12>
  40abf2:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40abf9:	ff ff ff 
  40abfc:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40ac00:	ff d0                	callq  *%rax
  40ac02:	48 8b bc 24 a8 02 00 	mov    0x2a8(%rsp),%rdi
  40ac09:	00 
  40ac0a:	48 85 ff             	test   %rdi,%rdi
  40ac0d:	74 10                	je     40ac1f <main+0xf2f>
  40ac0f:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40ac16:	ff ff ff 
  40ac19:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40ac1d:	ff d0                	callq  *%rax
  40ac1f:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  40ac26:	00 
  40ac27:	48 85 ff             	test   %rdi,%rdi
  40ac2a:	74 10                	je     40ac3c <main+0xf4c>
  40ac2c:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40ac33:	ff ff ff 
  40ac36:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40ac3a:	ff d0                	callq  *%rax
  }

  for (const auto& node : config["agents"]) {
  40ac3c:	48 b8 19 7f df ff ff 	movabs $0xffffffffffdf7f19,%rax
  40ac43:	ff ff ff 
  40ac46:	48 8d ac 24 a0 01 00 	lea    0x1a0(%rsp),%rbp
  40ac4d:	00 
  40ac4e:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  40ac55:	00 
  40ac56:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40ac5a:	48 b8 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rax
  40ac61:	ff ff ff 
  40ac64:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40ac69:	48 b8 f0 1d df ff ff 	movabs $0xffffffffffdf1df0,%rax
  40ac70:	ff ff ff 
  40ac73:	48 89 ef             	mov    %rbp,%rdi
  40ac76:	48 01 d8             	add    %rbx,%rax
  40ac79:	ff d0                	callq  *%rax
  40ac7b:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40ac82:	00 
  40ac83:	48 89 ee             	mov    %rbp,%rsi
  40ac86:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  40ac8b:	48 01 d8             	add    %rbx,%rax
  40ac8e:	ff d0                	callq  *%rax
  40ac90:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  40ac97:	00 
  40ac98:	48 89 ee             	mov    %rbp,%rsi
  40ac9b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40aca0:	48 01 d8             	add    %rbx,%rax
  40aca3:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  40aca5:	48 8d 84 24 00 02 00 	lea    0x200(%rsp),%rax
  40acac:	00 
  40acad:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  40acb4:	00 
  40acb5:	48 8d 84 24 20 02 00 	lea    0x220(%rsp),%rax
  40acbc:	00 
  40acbd:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40acc4:	00 
  40acc5:	48 8d 84 24 30 02 00 	lea    0x230(%rsp),%rax
  40accc:	00 
  40accd:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    if (m_type != rhs.m_type)
  40acd2:	8b 84 24 e0 02 00 00 	mov    0x2e0(%rsp),%eax
  40acd9:	3b 84 24 b0 04 00 00 	cmp    0x4b0(%rsp),%eax
  40ace0:	0f 84 9d 05 00 00    	je     40b283 <main+0x1593>
  40ace6:	48 b8 b0 f5 de ff ff 	movabs $0xffffffffffdef5b0,%rax
  40aced:	ff ff ff 
  40acf0:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40acf5:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40acfa:	48 01 d8             	add    %rbx,%rax
  40acfd:	ff d0                	callq  *%rax
}

// indexing
template <typename Key>
inline const Node Node::operator[](const Key& key) const {
  if (!m_isValid)
  40acff:	0f b6 84 24 b0 03 00 	movzbl 0x3b0(%rsp),%eax
  40ad06:	00 
  40ad07:	84 c0                	test   %al,%al
  40ad09:	88 44 24 58          	mov    %al,0x58(%rsp)
  40ad0d:	0f 84 fe 23 00 00    	je     40d111 <main+0x3421>
    throw InvalidNode();
  EnsureNodeExists();
  40ad13:	48 b8 c0 ff de ff ff 	movabs $0xffffffffffdeffc0,%rax
  40ad1a:	ff ff ff 
  40ad1d:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40ad22:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40ad29:	00 
  40ad2a:	48 01 d8             	add    %rbx,%rax
  40ad2d:	ff d0                	callq  *%rax
#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
        id_ = 0;
#endif
    }

    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40ad2f:	4c 8b a4 24 c0 03 00 	mov    0x3c0(%rsp),%r12
  40ad36:	00 
#if defined(BOOST_SP_ENABLE_DEBUG_HOOKS)
        , id_(shared_count_id)
#endif
    {
        if( pi_ != 0 ) pi_->add_ref_copy();
  40ad37:	4d 85 e4             	test   %r12,%r12
  40ad3a:	74 07                	je     40ad43 <main+0x1053>
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  40ad3c:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
  40ad43:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  40ad4a:	00 
  40ad4b:	48 89 f8             	mov    %rdi,%rax
  40ad4e:	48 83 c0 10          	add    $0x10,%rax
  40ad52:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  40ad59:	00 
          _M_construct(__beg, __end, _Tag());
  40ad5a:	48 b8 25 7f df ff ff 	movabs $0xffffffffffdf7f25,%rax
  40ad61:	ff ff ff 
  40ad64:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40ad68:	48 b8 20 7f df ff ff 	movabs $0xffffffffffdf7f20,%rax
  40ad6f:	ff ff ff 
  40ad72:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40ad76:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  40ad7d:	ff ff ff 
  40ad80:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  40ad87:	00 
  40ad88:	48 01 d8             	add    %rbx,%rax
  40ad8b:	ff d0                	callq  *%rax
  40ad8d:	4d 85 e4             	test   %r12,%r12
  detail::node* value = static_cast<const detail::node&>(*m_pNode)
  40ad90:	48 8b 94 24 c8 03 00 	mov    0x3c8(%rsp),%rdx
  40ad97:	00 
  40ad98:	0f 84 ca 04 00 00    	je     40b268 <main+0x1578>
  40ad9e:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40ada3:	f0 83 00 01          	lock addl $0x1,(%rax)
  40ada7:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40adaa:	48 85 d2             	test   %rdx,%rdx
  40adad:	0f 84 c1 04 00 00    	je     40b274 <main+0x1584>
  40adb3:	f0 83 00 01          	lock addl $0x1,(%rax)
  40adb7:	48 8b 02             	mov    (%rdx),%rax
  40adba:	48 85 c0             	test   %rax,%rax
  40adbd:	0f 84 7d 24 00 00    	je     40d240 <main+0x3550>

// indexing
template <typename Key>
inline node* node_data::get(const Key& key,
                            shared_memory_holder pMemory) const {
  switch (m_type) {
  40adc3:	8b 50 04             	mov    0x4(%rax),%edx
  40adc6:	83 fa 02             	cmp    $0x2,%edx
  40adc9:	0f 84 28 10 00 00    	je     40bdf7 <main+0x2107>
  40adcf:	0f 82 79 04 00 00    	jb     40b24e <main+0x155e>
  40add5:	83 fa 03             	cmp    $0x3,%edx
  40add8:	0f 85 22 0e 00 00    	jne    40bc00 <main+0x1f10>
  40adde:	4d 85 e4             	test   %r12,%r12
  40ade1:	0f 84 be 14 00 00    	je     40c2a5 <main+0x25b5>
  40ade7:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  40adee:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40adf5:	ff ff ff 
  40adf8:	31 ed                	xor    %ebp,%ebp
  40adfa:	4c 89 e7             	mov    %r12,%rdi
  40adfd:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40ae01:	ff d0                	callq  *%rax
  40ae03:	4c 89 e7             	mov    %r12,%rdi
  40ae06:	4d 8d 2c 1f          	lea    (%r15,%rbx,1),%r13
  40ae0a:	41 ff d5             	callq  *%r13
  40ae0d:	4c 89 e7             	mov    %r12,%rdi
  40ae10:	41 ff d5             	callq  *%r13
	if (!_M_is_local())
  40ae13:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  40ae1a:	00 
  40ae1b:	48 8b bc 24 00 02 00 	mov    0x200(%rsp),%rdi
  40ae22:	00 
  40ae23:	48 83 c0 10          	add    $0x10,%rax
  40ae27:	48 39 c7             	cmp    %rax,%rdi
  40ae2a:	74 12                	je     40ae3e <main+0x114e>
      { ::operator delete(__p); }
  40ae2c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40ae33:	ff ff ff 
  40ae36:	49 89 df             	mov    %rbx,%r15
  40ae39:	48 01 d8             	add    %rbx,%rax
  40ae3c:	ff d0                	callq  *%rax
  40ae3e:	4d 85 e4             	test   %r12,%r12
  40ae41:	74 13                	je     40ae56 <main+0x1166>
  40ae43:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40ae4a:	ff ff ff 
  40ae4d:	4c 89 e7             	mov    %r12,%rdi
  40ae50:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40ae54:	ff d0                	callq  *%rax
                            .get(detail::to_value(key), m_pMemory);
  if (!value) {
  40ae56:	48 85 ed             	test   %rbp,%rbp
  40ae59:	0f 84 78 17 00 00    	je     40c5d7 <main+0x28e7>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40ae5f:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40ae66:	00 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40ae67:	48 8b 94 24 b8 03 00 	mov    0x3b8(%rsp),%rdx
  40ae6e:	00 
        if( pi_ != 0 ) pi_->add_ref_copy();
  40ae6f:	48 85 ff             	test   %rdi,%rdi
  40ae72:	0f 84 e4 13 00 00    	je     40c25c <main+0x256c>
  40ae78:	48 8d 47 08          	lea    0x8(%rdi),%rax
  40ae7c:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  40ae80:	c6 84 24 c0 01 00 00 	movb   $0x1,0x1c0(%rsp)
  40ae87:	01 
  40ae88:	48 89 94 24 c8 01 00 	mov    %rdx,0x1c8(%rsp)
  40ae8f:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40ae90:	48 89 bc 24 d0 01 00 	mov    %rdi,0x1d0(%rsp)
  40ae97:	00 
  40ae98:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  40ae9c:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40aea3:	ff ff ff 
  40aea6:	48 89 ac 24 d8 01 00 	mov    %rbp,0x1d8(%rsp)
  40aead:	00 
  40aeae:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40aeb2:	ff d0                	callq  *%rax
  if (!m_isValid)
  40aeb4:	0f b6 84 24 b0 03 00 	movzbl 0x3b0(%rsp),%eax
  40aebb:	00 
  40aebc:	84 c0                	test   %al,%al
  40aebe:	88 84 24 a0 00 00 00 	mov    %al,0xa0(%rsp)
  40aec5:	0f 84 a0 22 00 00    	je     40d16b <main+0x347b>
  EnsureNodeExists();
  40aecb:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40aed2:	00 
  40aed3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40aed8:	48 01 d8             	add    %rbx,%rax
  40aedb:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40aedd:	4c 8b a4 24 c0 03 00 	mov    0x3c0(%rsp),%r12
  40aee4:	00 
        if( pi_ != 0 ) pi_->add_ref_copy();
  40aee5:	4d 85 e4             	test   %r12,%r12
  40aee8:	74 07                	je     40aef1 <main+0x1201>
  40aeea:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
	: allocator_type(__a), _M_p(__dat) { }
  40aef1:	48 8d 84 24 40 02 00 	lea    0x240(%rsp),%rax
  40aef8:	00 
  40aef9:	48 89 c7             	mov    %rax,%rdi
  40aefc:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40af01:	48 8d 84 24 50 02 00 	lea    0x250(%rsp),%rax
  40af08:	00 
  40af09:	48 89 84 24 40 02 00 	mov    %rax,0x240(%rsp)
  40af10:	00 
          _M_construct(__beg, __end, _Tag());
  40af11:	48 b8 2a 7f df ff ff 	movabs $0xffffffffffdf7f2a,%rax
  40af18:	ff ff ff 
  40af1b:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40af1f:	48 b8 26 7f df ff ff 	movabs $0xffffffffffdf7f26,%rax
  40af26:	ff ff ff 
  40af29:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40af2d:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  40af34:	00 
  40af35:	48 01 d8             	add    %rbx,%rax
  40af38:	ff d0                	callq  *%rax
  40af3a:	4d 85 e4             	test   %r12,%r12
  detail::node* value = static_cast<const detail::node&>(*m_pNode)
  40af3d:	48 8b 94 24 c8 03 00 	mov    0x3c8(%rsp),%rdx
  40af44:	00 
  40af45:	0f 84 00 13 00 00    	je     40c24b <main+0x255b>
  40af4b:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40af50:	f0 83 00 01          	lock addl $0x1,(%rax)
  40af54:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40af57:	48 85 d2             	test   %rdx,%rdx
  40af5a:	0f 84 14 03 00 00    	je     40b274 <main+0x1584>
  40af60:	f0 83 00 01          	lock addl $0x1,(%rax)
  40af64:	48 8b 02             	mov    (%rdx),%rax
  40af67:	48 85 c0             	test   %rax,%rax
  40af6a:	0f 84 d0 22 00 00    	je     40d240 <main+0x3550>
  40af70:	8b 50 04             	mov    0x4(%rax),%edx
  40af73:	83 fa 02             	cmp    $0x2,%edx
  40af76:	0f 84 64 13 00 00    	je     40c2e0 <main+0x25f0>
  40af7c:	0f 82 cf 0e 00 00    	jb     40be51 <main+0x2161>
  40af82:	83 fa 03             	cmp    $0x3,%edx
  40af85:	0f 85 b8 13 00 00    	jne    40c343 <main+0x2653>
  40af8b:	4d 85 e4             	test   %r12,%r12
  40af8e:	0f 84 18 13 00 00    	je     40c2ac <main+0x25bc>
  40af94:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  40af9b:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40afa2:	ff ff ff 
  40afa5:	31 ed                	xor    %ebp,%ebp
  40afa7:	4c 89 e7             	mov    %r12,%rdi
  40afaa:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40afae:	ff d0                	callq  *%rax
  40afb0:	e9 ad 0e 00 00       	jmpq   40be62 <main+0x2172>
      std::cout << desc << "\n";
  40afb5:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  40afbc:	ff ff ff 
  40afbf:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  40afc4:	49 89 df             	mov    %rbx,%r15
  40afc7:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  40afcb:	48 b8 00 e4 dd ff ff 	movabs $0xffffffffffdde400,%rax
  40afd2:	ff ff ff 
  40afd5:	48 01 d8             	add    %rbx,%rax
  40afd8:	ff d0                	callq  *%rax
  40afda:	48 ba 81 7d df ff ff 	movabs $0xffffffffffdf7d81,%rdx
  40afe1:	ff ff ff 
  40afe4:	48 89 c7             	mov    %rax,%rdi
  40afe7:	48 b8 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rax
  40afee:	ff ff ff 
  40aff1:	48 8d 34 13          	lea    (%rbx,%rdx,1),%rsi
  40aff5:	48 01 d8             	add    %rbx,%rax
  40aff8:	ff d0                	callq  *%rax
      return 0;
  40affa:	48 b8 60 4e df ff ff 	movabs $0xffffffffffdf4e60,%rax
  40b001:	ff ff ff 
  40b004:	31 ed                	xor    %ebp,%ebp
  40b006:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b00b:	48 01 d8             	add    %rbx,%rax
  40b00e:	ff d0                	callq  *%rax
	if (!_M_is_local())
  40b010:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  40b015:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  40b01c:	00 
  40b01d:	48 83 c0 10          	add    $0x10,%rax
  40b021:	48 39 c7             	cmp    %rax,%rdi
  40b024:	74 12                	je     40b038 <main+0x1348>
  40b026:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40b02d:	ff ff ff 
  40b030:	49 89 df             	mov    %rbx,%r15
  40b033:	48 01 d8             	add    %rbx,%rax
  40b036:	ff d0                	callq  *%rax
  40b038:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  40b03d:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  40b044:	00 
  40b045:	48 83 c0 10          	add    $0x10,%rax
  40b049:	48 39 c7             	cmp    %rax,%rdi
  40b04c:	74 12                	je     40b060 <main+0x1370>
  40b04e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40b055:	ff ff ff 
  40b058:	49 89 df             	mov    %rbx,%r15
  40b05b:	48 01 d8             	add    %rbx,%rax
  40b05e:	ff d0                	callq  *%rax
  po::options_description desc("Allowed options");
  40b060:	48 b8 00 b8 de ff ff 	movabs $0xffffffffffdeb800,%rax
  40b067:	ff ff ff 
  40b06a:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40b06f:	48 01 d8             	add    %rbx,%rax
  40b072:	ff d0                	callq  *%rax
  } else {
    std::cout << "Planning NOT successful!" << std::endl;
  }

  return 0;
}
  40b074:	48 81 c4 b8 06 00 00 	add    $0x6b8,%rsp
  40b07b:	89 e8                	mov    %ebp,%eax
  40b07d:	5b                   	pop    %rbx
  40b07e:	5d                   	pop    %rbp
  40b07f:	41 5c                	pop    %r12
  40b081:	41 5d                	pop    %r13
  40b083:	41 5e                	pop    %r14
  40b085:	41 5f                	pop    %r15
  40b087:	c3                   	retq   
  40b088:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40b08f:	00 
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
	return bool(std::get<__i>(__t) == std::get<__i>(__u))
	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
  40b090:	44 3b 69 08          	cmp    0x8(%rcx),%r13d
  40b094:	0f 85 08 f9 ff ff    	jne    40a9a2 <main+0xcb2>
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  40b09a:	44 3b 71 0c          	cmp    0xc(%rcx),%r14d
  40b09e:	0f 85 fe f8 ff ff    	jne    40a9a2 <main+0xcb2>
  40b0a4:	e9 e4 f9 ff ff       	jmpq   40aa8d <main+0xd9d>
  40b0a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40b0b0:	48 8b 47 28          	mov    0x28(%rdi),%rax
  40b0b4:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  40b0b7:	48 85 c0             	test   %rax,%rax
  40b0ba:	0f 84 a3 18 00 00    	je     40c963 <main+0x2c73>
  40b0c0:	48 8b 00             	mov    (%rax),%rax
  40b0c3:	48 85 c0             	test   %rax,%rax
  40b0c6:	0f 84 88 18 00 00    	je     40c954 <main+0x2c64>
    return it->first->is_defined() && it->second->is_defined();
  40b0cc:	80 38 00             	cmpb   $0x0,(%rax)
  40b0cf:	0f 84 d3 fa ff ff    	je     40aba8 <main+0xeb8>
  40b0d5:	49 89 fc             	mov    %rdi,%r12
  40b0d8:	e9 d6 fa ff ff       	jmpq   40abb3 <main+0xec3>
  40b0dd:	0f 1f 00             	nopl   (%rax)
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
  40b0e0:	49 83 c5 08          	add    $0x8,%r13
  40b0e4:	e9 cd fa ff ff       	jmpq   40abb6 <main+0xec6>
  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
  40b0e9:	48 8b 84 24 b8 02 00 	mov    0x2b8(%rsp),%rax
  40b0f0:	00 
  40b0f1:	48 39 84 24 88 02 00 	cmp    %rax,0x288(%rsp)
  40b0f8:	00 
  40b0f9:	0f 94 c0             	sete   %al
  for (const auto& node : config["map"]["obstacles"]) {
  40b0fc:	84 c0                	test   %al,%al
  40b0fe:	0f 84 ac f7 ff ff    	je     40a8b0 <main+0xbc0>
  40b104:	e9 dc fa ff ff       	jmpq   40abe5 <main+0xef5>
  40b109:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { return _M_node == __x._M_node; }
  40b110:	48 8b 84 24 c0 02 00 	mov    0x2c0(%rsp),%rax
  40b117:	00 
  40b118:	48 39 84 24 90 02 00 	cmp    %rax,0x290(%rsp)
  40b11f:	00 
  40b120:	0f 94 c0             	sete   %al
  40b123:	eb d7                	jmp    40b0fc <main+0x140c>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40b125:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  40b129:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  40b12c:	48 85 c0             	test   %rax,%rax
  40b12f:	0f 84 52 f3 ff ff    	je     40a487 <main+0x797>
            base.manager(functor, functor, destroy_functor_tag);
  40b135:	48 8d bc 24 18 03 00 	lea    0x318(%rsp),%rdi
  40b13c:	00 
  40b13d:	ba 02 00 00 00       	mov    $0x2,%edx
  40b142:	48 89 fe             	mov    %rdi,%rsi
  40b145:	ff d0                	callq  *%rax
  40b147:	e9 3b f3 ff ff       	jmpq   40a487 <main+0x797>
	  __node->_M_nxt = _M_before_begin._M_nxt;
  40b14c:	48 8b 84 24 20 03 00 	mov    0x320(%rsp),%rax
  40b153:	00 
	  _M_before_begin._M_nxt = __node;
  40b154:	48 89 ac 24 20 03 00 	mov    %rbp,0x320(%rsp)
  40b15b:	00 
	  if (__node->_M_nxt)
  40b15c:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  40b15f:	48 89 45 00          	mov    %rax,0x0(%rbp)
	  if (__node->_M_nxt)
  40b163:	74 12                	je     40b177 <main+0x1487>
    { return __num % __den; }
  40b165:	48 8b 40 10          	mov    0x10(%rax),%rax
  40b169:	31 d2                	xor    %edx,%edx
  40b16b:	48 f7 b4 24 18 03 00 	divq   0x318(%rsp)
  40b172:	00 
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  40b173:	48 89 2c d6          	mov    %rbp,(%rsi,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  40b177:	48 8b 04 24          	mov    (%rsp),%rax
  40b17b:	48 83 c0 10          	add    $0x10,%rax
  40b17f:	48 89 01             	mov    %rax,(%rcx)
  40b182:	e9 fd f8 ff ff       	jmpq   40aa84 <main+0xd94>
  40b187:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40b18b:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40b190:	49 89 df             	mov    %rbx,%r15
            boost::throw_exception(bad_lexical_cast());
        }
#else
        template <class S, class T>
        inline void throw_bad_cast() {
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  40b193:	48 8d ac 24 40 02 00 	lea    0x240(%rsp),%rbp
  40b19a:	00 
  40b19b:	48 83 c0 18          	add    $0x18,%rax
  40b19f:	49 8d 7e 70          	lea    0x70(%r14),%rdi
  40b1a3:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  40b1aa:	00 
  40b1ab:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40b1b2:	ff ff ff 
  40b1b5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40b1b9:	48 83 c0 10          	add    $0x10,%rax
  40b1bd:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40b1c4:	00 
  40b1c5:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  40b1cc:	ff ff ff 
  40b1cf:	48 01 d8             	add    %rbx,%rax
  40b1d2:	ff d0                	callq  *%rax
  40b1d4:	48 b8 50 fc ff ff ff 	movabs $0xfffffffffffffc50,%rax
  40b1db:	ff ff ff 
  40b1de:	4c 89 f7             	mov    %r14,%rdi
  40b1e1:	48 01 d8             	add    %rbx,%rax
  40b1e4:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40b1eb:	00 
  40b1ec:	48 b8 c0 ba de ff ff 	movabs $0xffffffffffdebac0,%rax
  40b1f3:	ff ff ff 
  40b1f6:	48 01 d8             	add    %rbx,%rax
  40b1f9:	ff d0                	callq  *%rax
            : source(&source_type_arg), target(&target_type_arg)
  40b1fb:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  40b202:	ff ff ff 
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  40b205:	48 89 ef             	mov    %rbp,%rdi
            : source(&source_type_arg), target(&target_type_arg)
  40b208:	4c 8d 24 03          	lea    (%rbx,%rax,1),%r12
  40b20c:	48 b8 b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rax
  40b213:	ff ff ff 
  40b216:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40b21a:	4c 89 a4 24 40 02 00 	mov    %r12,0x240(%rsp)
  40b221:	00 
  40b222:	48 89 84 24 48 02 00 	mov    %rax,0x248(%rsp)
  40b229:	00 
  40b22a:	48 b8 60 f8 ff ff ff 	movabs $0xfffffffffffff860,%rax
  40b231:	ff ff ff 
  40b234:	48 01 d8             	add    %rbx,%rax
  40b237:	48 89 84 24 50 02 00 	mov    %rax,0x250(%rsp)
  40b23e:	00 
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  40b23f:	48 b8 f0 0c df ff ff 	movabs $0xffffffffffdf0cf0,%rax
  40b246:	ff ff ff 
  40b249:	48 01 d8             	add    %rbx,%rax
  40b24c:	ff d0                	callq  *%rax
    case NodeType::Map:
      break;
    case NodeType::Undefined:
    case NodeType::Null:
      return NULL;
  40b24e:	31 ed                	xor    %ebp,%ebp
  40b250:	4d 85 e4             	test   %r12,%r12
  40b253:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40b25a:	ff ff ff 
  40b25d:	0f 85 a0 fb ff ff    	jne    40ae03 <main+0x1113>
  40b263:	e9 ab fb ff ff       	jmpq   40ae13 <main+0x1123>
  40b268:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40b26b:	48 85 d2             	test   %rdx,%rdx
  40b26e:	0f 85 43 fb ff ff    	jne    40adb7 <main+0x10c7>
  40b274:	48 b8 38 ec dd ff ff 	movabs $0xffffffffffddec38,%rax
  40b27b:	ff ff ff 
  40b27e:	48 01 d8             	add    %rbx,%rax
  40b281:	ff d0                	callq  *%rax
    switch (m_type) {
  40b283:	83 f8 01             	cmp    $0x1,%eax
  40b286:	0f 84 f9 0f 00 00    	je     40c285 <main+0x2595>
  40b28c:	83 f8 02             	cmp    $0x2,%eax
  40b28f:	0f 84 2a 13 00 00    	je     40c5bf <main+0x28cf>
  40b295:	48 8b bc 24 d8 04 00 	mov    0x4d8(%rsp),%rdi
  40b29c:	00 
  40b29d:	48 85 ff             	test   %rdi,%rdi
  40b2a0:	74 0f                	je     40b2b1 <main+0x15c1>
  40b2a2:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40b2a9:	ff ff ff 
  40b2ac:	48 01 d8             	add    %rbx,%rax
  40b2af:	ff d0                	callq  *%rax
  40b2b1:	48 8b bc 24 08 03 00 	mov    0x308(%rsp),%rdi
  40b2b8:	00 
  40b2b9:	48 85 ff             	test   %rdi,%rdi
  40b2bc:	74 0f                	je     40b2cd <main+0x15dd>
  40b2be:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40b2c5:	ff ff ff 
  40b2c8:	48 01 d8             	add    %rbx,%rax
  40b2cb:	ff d0                	callq  *%rax
  40b2cd:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  40b2d4:	00 
  40b2d5:	48 85 ff             	test   %rdi,%rdi
  40b2d8:	74 0f                	je     40b2e9 <main+0x15f9>
  40b2da:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40b2e1:	ff ff ff 
  40b2e4:	48 01 d8             	add    %rbx,%rax
  40b2e7:	ff d0                	callq  *%rax

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  40b2e9:	48 8b ac 24 c8 00 00 	mov    0xc8(%rsp),%rbp
  40b2f0:	00 
  40b2f1:	48 2b ac 24 c0 00 00 	sub    0xc0(%rsp),%rbp
  40b2f8:	00 
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  40b2f9:	48 c7 84 24 e0 02 00 	movq   $0x0,0x2e0(%rsp)
  40b300:	00 00 00 00 00 
  40b305:	48 c7 84 24 e8 02 00 	movq   $0x0,0x2e8(%rsp)
  40b30c:	00 00 00 00 00 
  40b311:	48 c7 84 24 f0 02 00 	movq   $0x0,0x2f0(%rsp)
  40b318:	00 00 00 00 00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  40b31d:	48 89 e8             	mov    %rbp,%rax
  40b320:	48 c1 f8 03          	sar    $0x3,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  40b324:	48 85 c0             	test   %rax,%rax
  40b327:	0f 84 30 1a 00 00    	je     40cd5d <main+0x306d>
	if (__n > this->max_size())
  40b32d:	48 ba ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rdx
  40b334:	ff ff 1f 
  40b337:	48 39 d0             	cmp    %rdx,%rax
  40b33a:	0f 87 fc 19 00 00    	ja     40cd3c <main+0x304c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40b340:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40b345:	48 be 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rsi
  40b34c:	ff ff ff 
  40b34f:	48 89 ef             	mov    %rbp,%rdi
  40b352:	49 89 df             	mov    %rbx,%r15
  40b355:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  40b35a:	48 01 d8             	add    %rbx,%rax
  40b35d:	ff d0                	callq  *%rax
  40b35f:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  40b366:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  40b367:	48 01 c5             	add    %rax,%rbp
	this->_M_impl._M_start = this->_M_allocate(__n);
  40b36a:	48 89 84 24 e0 02 00 	mov    %rax,0x2e0(%rsp)
  40b371:	00 
	this->_M_impl._M_finish = this->_M_impl._M_start;
  40b372:	48 89 84 24 e8 02 00 	mov    %rax,0x2e8(%rsp)
  40b379:	00 
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  40b37a:	48 89 ac 24 f0 02 00 	mov    %rbp,0x2f0(%rsp)
  40b381:	00 
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  40b382:	48 89 c1             	mov    %rax,%rcx
  40b385:	48 8b 94 24 c8 00 00 	mov    0xc8(%rsp),%rdx
  40b38c:	00 
  40b38d:	48 89 fe             	mov    %rdi,%rsi
  40b390:	eb 13                	jmp    40b3a5 <main+0x16b5>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  40b392:	48 85 c9             	test   %rcx,%rcx
  40b395:	74 06                	je     40b39d <main+0x16ad>
  40b397:	4c 8b 06             	mov    (%rsi),%r8
  40b39a:	4c 89 01             	mov    %r8,(%rcx)
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
  40b39d:	48 83 c1 08          	add    $0x8,%rcx
  40b3a1:	48 83 c6 08          	add    $0x8,%rsi
  40b3a5:	48 39 f2             	cmp    %rsi,%rdx
  40b3a8:	75 e8                	jne    40b392 <main+0x16a2>
      { this->_M_impl._M_finish =
  40b3aa:	48 29 fa             	sub    %rdi,%rdx
      _M_rehash_policy(__ht._M_rehash_policy)
  40b3ad:	48 c7 84 24 b0 04 00 	movq   $0x0,0x4b0(%rsp)
  40b3b4:	00 00 00 00 00 
    _Hash_node_base() noexcept : _M_nxt() { }
  40b3b9:	48 c7 84 24 c0 04 00 	movq   $0x0,0x4c0(%rsp)
  40b3c0:	00 00 00 00 00 
  40b3c5:	48 01 d0             	add    %rdx,%rax
  40b3c8:	48 8b 94 24 38 03 00 	mov    0x338(%rsp),%rdx
  40b3cf:	00 
  40b3d0:	48 c7 84 24 e0 04 00 	movq   $0x0,0x4e0(%rsp)
  40b3d7:	00 00 00 00 00 
  40b3dc:	48 89 84 24 e8 02 00 	mov    %rax,0x2e8(%rsp)
  40b3e3:	00 
  40b3e4:	48 8b 84 24 18 03 00 	mov    0x318(%rsp),%rax
  40b3eb:	00 
      _M_assign(__ht,
  40b3ec:	48 8b 34 24          	mov    (%rsp),%rsi
      _M_rehash_policy(__ht._M_rehash_policy)
  40b3f0:	48 89 94 24 d8 04 00 	mov    %rdx,0x4d8(%rsp)
  40b3f7:	00 
      _M_assign(__ht,
  40b3f8:	48 8d 94 24 00 02 00 	lea    0x200(%rsp),%rdx
  40b3ff:	00 
      _M_rehash_policy(__ht._M_rehash_policy)
  40b400:	48 89 84 24 b8 04 00 	mov    %rax,0x4b8(%rsp)
  40b407:	00 
  40b408:	48 8b 84 24 28 03 00 	mov    0x328(%rsp),%rax
  40b40f:	00 
  40b410:	48 89 84 24 c8 04 00 	mov    %rax,0x4c8(%rsp)
  40b417:	00 
  40b418:	48 8b 84 24 30 03 00 	mov    0x330(%rsp),%rax
  40b41f:	00 
  40b420:	48 89 84 24 d0 04 00 	mov    %rax,0x4d0(%rsp)
  40b427:	00 
      _M_assign(__ht,
  40b428:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40b42d:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
  40b434:	00 
  40b435:	48 89 c7             	mov    %rax,%rdi
  40b438:	48 b8 90 ef de ff ff 	movabs $0xffffffffffdeef90,%rax
  40b43f:	ff ff ff 
  40b442:	48 01 d8             	add    %rbx,%rax
  40b445:	ff d0                	callq  *%rax
        m_lowLevelExpanded(0) {}


  void init(size_t dimx, size_t dimy, std::unordered_set<Location> obstacles,
              std::vector<Location> goals) {
		m_dimx = dimx;
  40b447:	8b 84 24 a8 00 00 00 	mov    0xa8(%rsp),%eax
  40b44e:	48 bd 40 ea 4b 9a 01 	movabs $0x19a4bea40,%rbp
  40b455:	00 00 00 
      if (_M_bucket_count != __ht._M_bucket_count)
  40b458:	48 8b bc 24 b8 04 00 	mov    0x4b8(%rsp),%rdi
  40b45f:	00 
      std::size_t __former_bucket_count = _M_bucket_count;
  40b460:	4c 8b 6c 1d 28       	mov    0x28(%rbp,%rbx,1),%r13
  40b465:	4c 8b 74 1d 48       	mov    0x48(%rbp,%rbx,1),%r14
  40b46a:	89 44 1d 18          	mov    %eax,0x18(%rbp,%rbx,1)
		m_dimy = dimy;
  40b46e:	8b 84 24 ac 00 00 00 	mov    0xac(%rsp),%eax
      if (_M_bucket_count != __ht._M_bucket_count)
  40b475:	49 39 fd             	cmp    %rdi,%r13
  40b478:	89 44 1d 1c          	mov    %eax,0x1c(%rbp,%rbx,1)
  40b47c:	0f 84 7a 18 00 00    	je     40ccfc <main+0x300c>
	if (__builtin_expect(__n == 1, false))
  40b482:	48 83 ff 01          	cmp    $0x1,%rdi
	  __former_buckets = _M_buckets;
  40b486:	4c 8b 64 1d 20       	mov    0x20(%rbp,%rbx,1),%r12
	if (__builtin_expect(__n == 1, false))
  40b48b:	0f 84 50 18 00 00    	je     40cce1 <main+0x2ff1>
	return __hashtable_alloc::_M_allocate_buckets(__n);
  40b491:	48 b8 f0 2c de ff ff 	movabs $0xffffffffffde2cf0,%rax
  40b498:	ff ff ff 
  40b49b:	48 01 d8             	add    %rbx,%rax
  40b49e:	ff d0                	callq  *%rax
  40b4a0:	48 8b bc 24 b8 04 00 	mov    0x4b8(%rsp),%rdi
  40b4a7:	00 
	  _M_buckets = _M_allocate_buckets(__ht._M_bucket_count);
  40b4a8:	48 89 44 1d 20       	mov    %rax,0x20(%rbp,%rbx,1)
	  _M_bucket_count = __ht._M_bucket_count;
  40b4ad:	48 89 7c 1d 28       	mov    %rdi,0x28(%rbp,%rbx,1)
	  _M_element_count = __ht._M_element_count;
  40b4b2:	48 8b 84 24 c8 04 00 	mov    0x4c8(%rsp),%rax
  40b4b9:	00 
	  _M_rehash_policy = __ht._M_rehash_policy;
  40b4ba:	48 8b 94 24 d8 04 00 	mov    0x4d8(%rsp),%rdx
  40b4c1:	00 
	  _M_assign(__ht,
  40b4c2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
	  _M_element_count = __ht._M_element_count;
  40b4c7:	48 89 44 1d 38       	mov    %rax,0x38(%rbp,%rbx,1)
	  _M_rehash_policy = __ht._M_rehash_policy;
  40b4cc:	48 8b 84 24 d0 04 00 	mov    0x4d0(%rsp),%rax
  40b4d3:	00 
  40b4d4:	48 89 54 1d 48       	mov    %rdx,0x48(%rbp,%rbx,1)
	  _M_assign(__ht,
  40b4d9:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
	  _M_rehash_policy = __ht._M_rehash_policy;
  40b4de:	48 89 44 1d 40       	mov    %rax,0x40(%rbp,%rbx,1)
  40b4e3:	48 8b 44 1d 30       	mov    0x30(%rbp,%rbx,1),%rax
	  _M_before_begin._M_nxt = nullptr;
  40b4e8:	48 c7 44 1d 30 00 00 	movq   $0x0,0x30(%rbp,%rbx,1)
  40b4ef:	00 00 
	: _M_nodes(__nodes), _M_h(__h) { }
  40b4f1:	48 89 84 24 b0 02 00 	mov    %rax,0x2b0(%rsp)
  40b4f8:	00 
  40b4f9:	48 b8 60 ea 4b 9a 01 	movabs $0x19a4bea60,%rax
  40b500:	00 00 00 
  40b503:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
	  _M_assign(__ht,
  40b507:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40b50c:	48 89 bc 24 b8 02 00 	mov    %rdi,0x2b8(%rsp)
  40b513:	00 
  40b514:	48 89 84 24 80 02 00 	mov    %rax,0x280(%rsp)
  40b51b:	00 
  40b51c:	48 b8 50 dc de ff ff 	movabs $0xffffffffffdedc50,%rax
  40b523:	ff ff ff 
  40b526:	48 01 d8             	add    %rbx,%rax
  40b529:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  40b52b:	48 b8 90 ea 4b 9a 01 	movabs $0x19a4bea90,%rax
  40b532:	00 00 00 
  40b535:	48 01 d8             	add    %rbx,%rax
  40b538:	49 39 c4             	cmp    %rax,%r12
  40b53b:	74 1a                	je     40b557 <main+0x1867>
  40b53d:	4d 85 e4             	test   %r12,%r12
  40b540:	74 15                	je     40b557 <main+0x1867>
      { ::operator delete(__p); }
  40b542:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40b549:	ff ff ff 
  40b54c:	4c 89 e7             	mov    %r12,%rdi
  40b54f:	49 89 df             	mov    %rbx,%r15
  40b552:	48 01 d8             	add    %rbx,%rax
  40b555:	ff d0                	callq  *%rax
      { _M_h._M_deallocate_nodes(_M_nodes); }
  40b557:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40b55e:	00 
  40b55f:	eb 18                	jmp    40b579 <main+0x1889>
  40b561:	4c 8b 27             	mov    (%rdi),%r12
  40b564:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40b56b:	ff ff ff 
  40b56e:	49 89 df             	mov    %rbx,%r15
  40b571:	48 01 d8             	add    %rbx,%rax
  40b574:	ff d0                	callq  *%rax
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
    {
      while (__n)
	{
	  __node_type* __tmp = __n;
	  __n = __n->_M_next();
  40b576:	4c 89 e7             	mov    %r12,%rdi
      while (__n)
  40b579:	48 85 ff             	test   %rdi,%rdi
  40b57c:	75 e3                	jne    40b561 <main+0x1871>
		m_obstacles = obstacles;
		m_goals = goals;
  40b57e:	48 b8 40 be de ff ff 	movabs $0xffffffffffdebe40,%rax
  40b585:	ff ff ff 
  40b588:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40b58d:	48 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%rdi
  40b592:	48 01 d8             	add    %rbx,%rax
  40b595:	ff d0                	callq  *%rax
   */
  template<class _Value,
	   class _Hash = hash<_Value>,
	   class _Pred = std::equal_to<_Value>,
	   class _Alloc = std::allocator<_Value> >
    class unordered_set
  40b597:	48 b8 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rax
  40b59e:	ff ff ff 
  40b5a1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b5a6:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40b5ab:	48 01 d8             	add    %rbx,%rax
  40b5ae:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40b5b0:	48 8b bc 24 e0 02 00 	mov    0x2e0(%rsp),%rdi
  40b5b7:	00 
	if (__p)
  40b5b8:	48 85 ff             	test   %rdi,%rdi
  40b5bb:	74 12                	je     40b5cf <main+0x18df>
  40b5bd:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40b5c4:	ff ff ff 
  40b5c7:	49 89 df             	mov    %rbx,%r15
  40b5ca:	48 01 d8             	add    %rbx,%rax
  40b5cd:	ff d0                	callq  *%rax
	g_w = w;
  40b5cf:	f3 0f 10 84 24 b4 00 	movss  0xb4(%rsp),%xmm0
  40b5d6:	00 00 
  40b5d8:	48 b8 00 ea 4b 9a 01 	movabs $0x19a4bea00,%rax
  40b5df:	00 00 00 

class Timer {
 public:
  Timer()
      : start_(std::chrono::high_resolution_clock::now()),
        end_(std::chrono::high_resolution_clock::now()) {}
  40b5e2:	49 bd b0 e3 dd ff ff 	movabs $0xffffffffffdde3b0,%r13
  40b5e9:	ff ff ff 
  40b5ec:	49 89 df             	mov    %rbx,%r15
  40b5ef:	f3 0f 11 04 03       	movss  %xmm0,(%rbx,%rax,1)
  40b5f4:	49 8d 6c 1d 00       	lea    0x0(%r13,%rbx,1),%rbp
  40b5f9:	45 31 e4             	xor    %r12d,%r12d
  40b5fc:	ff d5                	callq  *%rbp
  40b5fe:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40b603:	ff d5                	callq  *%rbp
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40b605:	48 bd 40 69 4c 9a 01 	movabs $0x19a4c6940,%rbp
  40b60c:	00 00 00 
	                             __x);
	    ++this->_M_impl._M_finish;
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
  40b60f:	48 b8 60 f1 de ff ff 	movabs $0xffffffffffdef160,%rax
  40b616:	ff ff ff 
  40b619:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  40b620:	00 
  40b621:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  40b628:	00 
  40b629:	4c 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%r15
  40b62e:	4c 8d 34 03          	lea    (%rbx,%rax,1),%r14
  40b632:	eb 35                	jmp    40b669 <main+0x1979>
      { return *(this->_M_impl._M_start + __n); }
  40b634:	49 6b f4 0c          	imul   $0xc,%r12,%rsi
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40b638:	48 8b 44 1d 08       	mov    0x8(%rbp,%rbx,1),%rax
      { return *(this->_M_impl._M_start + __n); }
  40b63d:	48 01 d6             	add    %rdx,%rsi
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40b640:	48 3b 44 1d 10       	cmp    0x10(%rbp,%rbx,1),%rax
  40b645:	0f 84 a0 12 00 00    	je     40c8eb <main+0x2bfb>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  40b64b:	48 85 c0             	test   %rax,%rax
  40b64e:	74 0c                	je     40b65c <main+0x196c>
  40b650:	48 8b 3e             	mov    (%rsi),%rdi
  40b653:	48 89 38             	mov    %rdi,(%rax)
  40b656:	8b 76 08             	mov    0x8(%rsi),%esi
  40b659:	89 70 08             	mov    %esi,0x8(%rax)
	    ++this->_M_impl._M_finish;
  40b65c:	48 83 c0 0c          	add    $0xc,%rax
  40b660:	48 89 44 1d 08       	mov    %rax,0x8(%rbp,%rbx,1)
  40b665:	49 83 c4 01          	add    $0x1,%r12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  40b669:	48 89 c8             	mov    %rcx,%rax
  40b66c:	48 be ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rsi
  40b673:	aa aa aa 
  40b676:	48 29 d0             	sub    %rdx,%rax
  40b679:	48 c1 f8 02          	sar    $0x2,%rax
  40b67d:	48 0f af c6          	imul   %rsi,%rax
	for (int i = 0; i < startStates.size(); ++i)
  40b681:	4c 39 e0             	cmp    %r12,%rax
  40b684:	77 ae                	ja     40b634 <main+0x1944>
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  40b686:	48 b8 2b 7f df ff ff 	movabs $0xffffffffffdf7f2b,%rax
  40b68d:	ff ff ff 
	g_isNoConflict = false;
  40b690:	48 bd c0 ea 4b 9a 01 	movabs $0x19a4beac0,%rbp
  40b697:	00 00 00 
  40b69a:	48 ba 80 e3 dd ff ff 	movabs $0xffffffffffdde380,%rdx
  40b6a1:	ff ff ff 
  40b6a4:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b6a8:	c6 44 1d 00 00       	movb   $0x0,0x0(%rbp,%rbx,1)
  40b6ad:	bf 01 00 00 00       	mov    $0x1,%edi
  40b6b2:	49 89 df             	mov    %rbx,%r15
  40b6b5:	31 c0                	xor    %eax,%eax
  40b6b7:	48 01 da             	add    %rbx,%rdx
  40b6ba:	ff d2                	callq  *%rdx
	search(0);
  40b6bc:	48 b8 30 7c de ff ff 	movabs $0xffffffffffde7c30,%rax
  40b6c3:	ff ff ff 
  40b6c6:	31 ff                	xor    %edi,%edi
  40b6c8:	48 01 d8             	add    %rbx,%rax
  40b6cb:	ff d0                	callq  *%rax
    // Run a spiller that doesn't delete any tasks
    // 1) to avoid unused function warnings
    // 2) to pre-populate the global offset table with
    //    functions so it isn't aborted.
    //    (e.g. new[], delete[], swarm::info if used)
    swarm::spiller(0, 0);
  40b6cd:	48 b8 40 92 de ff ff 	movabs $0xffffffffffde9240,%rax
  40b6d4:	ff ff ff 
  40b6d7:	31 f6                	xor    %esi,%esi
  40b6d9:	31 ff                	xor    %edi,%edi
  40b6db:	4c 8d 24 03          	lea    (%rbx,%rax,1),%r12
  40b6df:	41 ff d4             	callq  *%r12
    COMPILER_BARRIER();
}

static inline void sim_magic_op_3(uint64_t op, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  40b6e2:	48 b8 a0 27 de ff ff 	movabs $0xffffffffffde27a0,%rax
  40b6e9:	ff ff ff 
  40b6ec:	b9 03 08 00 00       	mov    $0x803,%ecx
  40b6f1:	4c 89 e7             	mov    %r12,%rdi
  40b6f4:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40b6f8:	48 b8 d0 32 de ff ff 	movabs $0xffffffffffde32d0,%rax
  40b6ff:	ff ff ff 
  40b702:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b706:	48 87 c9             	xchg   %rcx,%rcx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  40b709:	48 b8 c0 31 de ff ff 	movabs $0xffffffffffde31c0,%rax
  40b710:	ff ff ff 
  40b713:	b9 04 08 00 00       	mov    $0x804,%ecx
  40b718:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b71c:	48 b8 d0 90 de ff ff 	movabs $0xffffffffffde90d0,%rax
  40b723:	ff ff ff 
  40b726:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  40b72a:	48 87 c9             	xchg   %rcx,%rcx

namespace swarm {

static inline void run() {
    setup_task_handlers();
    launch_threads(pls_worker);
  40b72d:	48 b8 80 2d de ff ff 	movabs $0xffffffffffde2d80,%rax
  40b734:	ff ff ff 
  40b737:	48 01 d8             	add    %rbx,%rax
  40b73a:	ff d0                	callq  *%rax
	bool success = g_isNoConflict;
  40b73c:	0f b6 6c 1d 00       	movzbl 0x0(%rbp,%rbx,1),%ebp

  void reset() { start_ = std::chrono::high_resolution_clock::now(); }

  void stop() { end_ = std::chrono::high_resolution_clock::now(); }
  40b741:	49 01 dd             	add    %rbx,%r13
  40b744:	41 ff d5             	callq  *%r13
  40b747:	49 89 c6             	mov    %rax,%r14
  if (success) {
  40b74a:	40 84 ed             	test   %bpl,%bpl
  40b74d:	0f 84 2d 15 00 00    	je     40cc80 <main+0x2f90>
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
  40b753:	48 b8 32 7f df ff ff 	movabs $0xffffffffffdf7f32,%rax
  40b75a:	ff ff ff 
  40b75d:	48 bd a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rbp
  40b764:	ff ff ff 
  40b767:	ba 15 00 00 00       	mov    $0x15,%edx
  40b76c:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b770:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  40b777:	ff ff ff 
  40b77a:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  40b77e:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b783:	ff d0                	callq  *%rax
	return __pf(*this);
  40b785:	48 b8 80 30 de ff ff 	movabs $0xffffffffffde3080,%rax
  40b78c:	ff ff ff 
  40b78f:	48 01 d8             	add    %rbx,%rax
  40b792:	ff d0                	callq  *%rax
  40b794:	48 ba 10 f1 4b 9a 01 	movabs $0x19a4bf110,%rdx
  40b79b:	00 00 00 
  40b79e:	31 c0                	xor    %eax,%eax
  40b7a0:	45 31 e4             	xor    %r12d,%r12d
  40b7a3:	45 31 ed             	xor    %r13d,%r13d
			cost += g_solution[i].cost;
  40b7a6:	48 01 da             	add    %rbx,%rdx
  40b7a9:	8b 0c 10             	mov    (%rax,%rdx,1),%ecx
  40b7ac:	41 01 cd             	add    %ecx,%r13d
  40b7af:	41 39 cc             	cmp    %ecx,%r12d
  40b7b2:	44 0f 4c e1          	cmovl  %ecx,%r12d
  40b7b6:	48 05 50 06 00 00    	add    $0x650,%rax
    for (int i = 0; i < ROBOT_NUMS; ++i) {
  40b7bc:	48 3d 40 7e 00 00    	cmp    $0x7e40,%rax
  40b7c2:	75 e5                	jne    40b7a9 <main+0x1ab9>
    std::ofstream out(outputFile);
  40b7c4:	48 b8 90 ea dd ff ff 	movabs $0xffffffffffddea90,%rax
  40b7cb:	ff ff ff 
  40b7ce:	ba 30 00 00 00       	mov    $0x30,%edx
  40b7d3:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
  40b7d8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b7dd:	49 89 df             	mov    %rbx,%r15
  40b7e0:	48 01 d8             	add    %rbx,%rax
  40b7e3:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b7e5:	48 b8 48 7f df ff ff 	movabs $0xffffffffffdf7f48,%rax
  40b7ec:	ff ff ff 
  40b7ef:	ba 0b 00 00 00       	mov    $0xb,%edx
  40b7f4:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b7f9:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b7fd:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b802:	ff d0                	callq  *%rax
	return __pf(*this);
  40b804:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  40b80b:	ff ff ff 
  40b80e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b813:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  40b818:	48 01 d8             	add    %rbx,%rax
  40b81b:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b81d:	48 b8 54 7f df ff ff 	movabs $0xffffffffffdf7f54,%rax
  40b824:	ff ff ff 
  40b827:	ba 08 00 00 00       	mov    $0x8,%edx
  40b82c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40b831:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b835:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b83a:	ff d0                	callq  *%rax
    out << "  cost: " << cost << std::endl;
  40b83c:	44 89 ee             	mov    %r13d,%esi
  40b83f:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  40b844:	48 ba 00 ea dd ff ff 	movabs $0xffffffffffddea00,%rdx
  40b84b:	ff ff ff 
  40b84e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  40b853:	48 8d 04 1a          	lea    (%rdx,%rbx,1),%rax
  40b857:	4c 89 ef             	mov    %r13,%rdi
  40b85a:	ff d0                	callq  *%rax
	return __pf(*this);
  40b85c:	48 89 c7             	mov    %rax,%rdi
  40b85f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40b864:	48 01 d8             	add    %rbx,%rax
  40b867:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b869:	48 b8 5d 7f df ff ff 	movabs $0xffffffffffdf7f5d,%rax
  40b870:	ff ff ff 
  40b873:	ba 0c 00 00 00       	mov    $0xc,%edx
  40b878:	4c 89 ef             	mov    %r13,%rdi
  40b87b:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b87f:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b884:	ff d0                	callq  *%rax
    out << "  makespan: " << makespan << std::endl;
  40b886:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  40b88b:	44 89 e6             	mov    %r12d,%esi
  40b88e:	4c 89 ef             	mov    %r13,%rdi
  40b891:	48 8d 04 1a          	lea    (%rdx,%rbx,1),%rax
  40b895:	ff d0                	callq  *%rax
	return __pf(*this);
  40b897:	4c 8b 64 24 68       	mov    0x68(%rsp),%r12
  40b89c:	48 89 c7             	mov    %rax,%rdi
  40b89f:	4c 89 e0             	mov    %r12,%rax
  40b8a2:	48 01 d8             	add    %rbx,%rax
  40b8a5:	ff d0                	callq  *%rax
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
  40b8a7:	4c 2b 74 24 08       	sub    0x8(%rsp),%r14
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
  40b8ac:	66 0f ef c0          	pxor   %xmm0,%xmm0
  40b8b0:	48 b8 f0 92 df ff ff 	movabs $0xffffffffffdf92f0,%rax
  40b8b7:	ff ff ff 
	__ostream_insert(__out, __s,
  40b8ba:	ba 0b 00 00 00       	mov    $0xb,%edx
  40b8bf:	4c 89 ef             	mov    %r13,%rdi
  40b8c2:	f2 49 0f 2a c6       	cvtsi2sd %r14,%xmm0
  40b8c7:	f2 0f 5e 04 18       	divsd  (%rax,%rbx,1),%xmm0
  40b8cc:	48 b8 6a 7f df ff ff 	movabs $0xffffffffffdf7f6a,%rax
  40b8d3:	ff ff ff 
  40b8d6:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b8da:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b8df:	f2 0f 11 44 24 08    	movsd  %xmm0,0x8(%rsp)
  40b8e5:	ff d0                	callq  *%rax
      { return _M_insert(__f); }
  40b8e7:	48 b8 70 e9 dd ff ff 	movabs $0xffffffffffdde970,%rax
  40b8ee:	ff ff ff 
  40b8f1:	f2 0f 10 44 24 08    	movsd  0x8(%rsp),%xmm0
  40b8f7:	4c 89 ef             	mov    %r13,%rdi
  40b8fa:	48 01 d8             	add    %rbx,%rax
  40b8fd:	ff d0                	callq  *%rax
	return __pf(*this);
  40b8ff:	48 89 c7             	mov    %rax,%rdi
  40b902:	4c 89 e0             	mov    %r12,%rax
  40b905:	48 01 d8             	add    %rbx,%rax
  40b908:	ff d0                	callq  *%rax
	__ostream_insert(__out, __s,
  40b90a:	48 b8 76 7f df ff ff 	movabs $0xffffffffffdf7f76,%rax
  40b911:	ff ff ff 
  40b914:	ba 09 00 00 00       	mov    $0x9,%edx
  40b919:	4c 89 ef             	mov    %r13,%rdi
  40b91c:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b920:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b925:	ff d0                	callq  *%rax
	return __pf(*this);
  40b927:	4c 89 e0             	mov    %r12,%rax
  40b92a:	4c 89 ef             	mov    %r13,%rdi
  40b92d:	48 01 d8             	add    %rbx,%rax
  40b930:	ff d0                	callq  *%rax
  40b932:	48 b8 04 eb 4b 9a 01 	movabs $0x19a4beb04,%rax
  40b939:	00 00 00 
  40b93c:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  40b943:	00 00 
  40b945:	48 01 d8             	add    %rbx,%rax
  40b948:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  40b94d:	48 b8 80 7f df ff ff 	movabs $0xffffffffffdf7f80,%rax
  40b954:	ff ff ff 
  40b957:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40b95e:	00 
	__ostream_insert(__out, __s,
  40b95f:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40b964:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
  40b969:	48 b8 90 e3 dd ff ff 	movabs $0xffffffffffdde390,%rax
  40b970:	ff ff ff 
  40b973:	48 01 d8             	add    %rbx,%rax
  40b976:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
	__ostream_insert(__out, __s,
  40b97b:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40b982:	00 
  40b983:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  40b988:	ba 07 00 00 00       	mov    $0x7,%edx
  40b98d:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  40b992:	49 89 df             	mov    %rbx,%r15
  40b995:	48 8d 34 18          	lea    (%rax,%rbx,1),%rsi
  40b999:	48 89 ef             	mov    %rbp,%rdi
  40b99c:	4c 89 f0             	mov    %r14,%rax
  40b99f:	ff d0                	callq  *%rax
      { return _M_insert(__n); }
  40b9a1:	48 b8 10 e6 dd ff ff 	movabs $0xffffffffffdde610,%rax
  40b9a8:	ff ff ff 
  40b9ab:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
  40b9b0:	48 89 ef             	mov    %rbp,%rdi
  40b9b3:	48 01 d8             	add    %rbx,%rax
  40b9b6:	ff d0                	callq  *%rax
  40b9b8:	48 89 c5             	mov    %rax,%rbp
	__ostream_insert(__out, __s,
  40b9bb:	48 b8 7e 7f df ff ff 	movabs $0xffffffffffdf7f7e,%rax
  40b9c2:	ff ff ff 
  40b9c5:	ba 01 00 00 00       	mov    $0x1,%edx
  40b9ca:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40b9ce:	48 89 ef             	mov    %rbp,%rdi
  40b9d1:	4c 89 f0             	mov    %r14,%rax
  40b9d4:	ff d0                	callq  *%rax
	return __pf(*this);
  40b9d6:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40b9db:	48 89 ef             	mov    %rbp,%rdi
  40b9de:	48 01 d8             	add    %rbx,%rax
  40b9e1:	ff d0                	callq  *%rax
      for (int b = 0; b < g_solution[a].states_size; ++b) {
  40b9e3:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  40b9e8:	48 83 b8 fc 03 00 00 	cmpq   $0x0,0x3fc(%rax)
  40b9ef:	00 
  40b9f0:	0f 84 7e 11 00 00    	je     40cb74 <main+0x2e84>
  40b9f6:	48 b8 88 7f df ff ff 	movabs $0xffffffffffdf7f88,%rax
  40b9fd:	ff ff ff 
  40ba00:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
  40ba05:	48 c7 44 24 28 01 00 	movq   $0x1,0x28(%rsp)
  40ba0c:	00 00 
  40ba0e:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40ba13:	48 b8 80 80 de ff ff 	movabs $0xffffffffffde8080,%rax
  40ba1a:	ff ff ff 
  40ba1d:	48 01 d8             	add    %rbx,%rax
  40ba20:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40ba25:	e9 39 01 00 00       	jmpq   40bb63 <main+0x1e73>
  40ba2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40ba30:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    { return flush(__os.put(__os.widen('\n'))); }
  40ba34:	4c 89 e7             	mov    %r12,%rdi
  40ba37:	49 89 df             	mov    %rbx,%r15
  40ba3a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  40ba3f:	ff d0                	callq  *%rax
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
  40ba41:	48 bd 20 e6 dd ff ff 	movabs $0xffffffffffdde620,%rbp
  40ba48:	ff ff ff 
  40ba4b:	48 89 c7             	mov    %rax,%rdi
  40ba4e:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40ba53:	ff d0                	callq  *%rax
  40ba55:	49 89 c4             	mov    %rax,%r12
	__ostream_insert(__out, __s,
  40ba58:	48 b8 92 7f df ff ff 	movabs $0xffffffffffdf7f92,%rax
  40ba5f:	ff ff ff 
  40ba62:	ba 09 00 00 00       	mov    $0x9,%edx
  40ba67:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40ba6b:	4c 89 e7             	mov    %r12,%rdi
  40ba6e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40ba73:	ff d0                	callq  *%rax
            << "      y: " << g_solution[a].states[b].state.y << std::endl
  40ba75:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40ba7a:	44 89 ee             	mov    %r13d,%esi
  40ba7d:	4c 89 e7             	mov    %r12,%rdi
  40ba80:	48 01 d8             	add    %rbx,%rax
  40ba83:	ff d0                	callq  *%rax
  40ba85:	49 89 c5             	mov    %rax,%r13
    { return flush(__os.put(__os.widen('\n'))); }
  40ba88:	48 8b 00             	mov    (%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40ba8b:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40ba8f:	4d 8b a4 05 f0 00 00 	mov    0xf0(%r13,%rax,1),%r12
  40ba96:	00 
      if (!__f)
  40ba97:	4d 85 e4             	test   %r12,%r12
  40ba9a:	0f 84 b2 11 00 00    	je     40cc52 <main+0x2f62>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
  40baa0:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
  40baa6:	0f 84 8e 10 00 00    	je     40cb3a <main+0x2e4a>
  40baac:	41 0f be 74 24 43    	movsbl 0x43(%r12),%esi
  40bab2:	4c 89 ef             	mov    %r13,%rdi
  40bab5:	49 89 df             	mov    %rbx,%r15
  40bab8:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  40babd:	ff d0                	callq  *%rax
    { return __os.flush(); }
  40babf:	48 89 c7             	mov    %rax,%rdi
  40bac2:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
  40bac7:	ff d0                	callq  *%rax
  40bac9:	49 89 c4             	mov    %rax,%r12
	__ostream_insert(__out, __s,
  40bacc:	48 b8 9c 7f df ff ff 	movabs $0xffffffffffdf7f9c,%rax
  40bad3:	ff ff ff 
  40bad6:	ba 09 00 00 00       	mov    $0x9,%edx
  40badb:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40badf:	4c 89 e7             	mov    %r12,%rdi
  40bae2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40bae7:	ff d0                	callq  *%rax
            << "      t: " << g_solution[a].states[b].cost << std::endl;
  40bae9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40baee:	8b 74 24 30          	mov    0x30(%rsp),%esi
  40baf2:	4c 89 e7             	mov    %r12,%rdi
  40baf5:	48 01 d8             	add    %rbx,%rax
  40baf8:	ff d0                	callq  *%rax
  40bafa:	49 89 c5             	mov    %rax,%r13
    { return flush(__os.put(__os.widen('\n'))); }
  40bafd:	48 8b 00             	mov    (%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40bb00:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40bb04:	4d 8b a4 05 f0 00 00 	mov    0xf0(%r13,%rax,1),%r12
  40bb0b:	00 
      if (!__f)
  40bb0c:	4d 85 e4             	test   %r12,%r12
  40bb0f:	0f 84 2e 11 00 00    	je     40cc43 <main+0x2f53>
  40bb15:	41 80 7c 24 38 00    	cmpb   $0x0,0x38(%r12)
  40bb1b:	0f 84 df 0f 00 00    	je     40cb00 <main+0x2e10>
  40bb21:	41 0f be 74 24 43    	movsbl 0x43(%r12),%esi
  40bb27:	4c 89 ef             	mov    %r13,%rdi
  40bb2a:	49 89 df             	mov    %rbx,%r15
  40bb2d:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  40bb32:	ff d0                	callq  *%rax
    { return __os.flush(); }
  40bb34:	48 89 c7             	mov    %rax,%rdi
  40bb37:	48 01 dd             	add    %rbx,%rbp
  40bb3a:	ff d5                	callq  *%rbp
  40bb3c:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
      for (int b = 0; b < g_solution[a].states_size; ++b) {
  40bb41:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  40bb46:	49 83 c6 10          	add    $0x10,%r14
  40bb4a:	48 89 f0             	mov    %rsi,%rax
  40bb4d:	48 83 c0 01          	add    $0x1,%rax
  40bb51:	48 39 b2 fc 03 00 00 	cmp    %rsi,0x3fc(%rdx)
  40bb58:	0f 86 16 10 00 00    	jbe    40cb74 <main+0x2e84>
  40bb5e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
            << "      t: " << g_solution[a].states[b].cost << std::endl;
  40bb63:	41 8b 46 08          	mov    0x8(%r14),%eax
	__ostream_insert(__out, __s,
  40bb67:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  40bb6c:	ba 09 00 00 00       	mov    $0x9,%edx
            << "      y: " << g_solution[a].states[b].state.y << std::endl
  40bb71:	45 8b 6e 04          	mov    0x4(%r14),%r13d
        out << "    - x: " << g_solution[a].states[b].state.x << std::endl
  40bb75:	41 8b 2e             	mov    (%r14),%ebp
  40bb78:	49 89 df             	mov    %rbx,%r15
            << "      t: " << g_solution[a].states[b].cost << std::endl;
  40bb7b:	89 44 24 30          	mov    %eax,0x30(%rsp)
  40bb7f:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  40bb84:	4c 89 e7             	mov    %r12,%rdi
  40bb87:	48 8d 34 18          	lea    (%rax,%rbx,1),%rsi
  40bb8b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40bb90:	ff d0                	callq  *%rax
        out << "    - x: " << g_solution[a].states[b].state.x << std::endl
  40bb92:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40bb97:	89 ee                	mov    %ebp,%esi
  40bb99:	4c 89 e7             	mov    %r12,%rdi
  40bb9c:	48 01 d8             	add    %rbx,%rax
  40bb9f:	ff d0                	callq  *%rax
  40bba1:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
  40bba4:	48 8b 00             	mov    (%rax),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40bba7:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40bbab:	49 8b ac 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%rbp
  40bbb2:	00 
      if (!__f)
  40bbb3:	48 85 ed             	test   %rbp,%rbp
  40bbb6:	0f 84 78 10 00 00    	je     40cc34 <main+0x2f44>
  40bbbc:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
  40bbc0:	0f 85 6a fe ff ff    	jne    40ba30 <main+0x1d40>
	  return _M_widen[static_cast<unsigned char>(__c)];
	this->_M_widen_init();
  40bbc6:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40bbcd:	ff ff ff 
  40bbd0:	48 89 ef             	mov    %rbp,%rdi
  40bbd3:	49 89 df             	mov    %rbx,%r15
  40bbd6:	48 01 d8             	add    %rbx,%rax
  40bbd9:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40bbdb:	48 8b 45 00          	mov    0x0(%rbp),%rax
  40bbdf:	be 0a 00 00 00       	mov    $0xa,%esi
  40bbe4:	48 8b 40 30          	mov    0x30(%rax),%rax
  40bbe8:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  40bbed:	0f 84 41 fe ff ff    	je     40ba34 <main+0x1d44>
  40bbf3:	48 89 ef             	mov    %rbp,%rdi
  40bbf6:	ff d0                	callq  *%rax
  40bbf8:	0f be f0             	movsbl %al,%esi
  40bbfb:	e9 34 fe ff ff       	jmpq   40ba34 <main+0x1d44>
  40bc00:	4c 8b a8 88 00 00 00 	mov    0x88(%rax),%r13
      { return const_iterator(&this->_M_impl._M_header); }
  40bc07:	48 83 c0 78          	add    $0x78,%rax
  40bc0b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
      return NULL;
    case NodeType::Scalar:
      throw BadSubscript();
  }

  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40bc10:	49 39 c5             	cmp    %rax,%r13
  40bc13:	0f 84 35 f6 ff ff    	je     40b24e <main+0x155e>
  40bc19:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40bc20:	ff ff ff 
  40bc23:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  40bc27:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40bc2c:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40bc31:	e9 99 00 00 00       	jmpq   40bccf <main+0x1fdf>
template <>
struct convert<std::string> {
  static Node encode(const std::string& rhs) { return Node(rhs); }

  static bool decode(const Node& node, std::string& rhs) {
    if (!node.IsScalar())
  40bc36:	83 78 04 02          	cmpl   $0x2,0x4(%rax)
  40bc3a:	0f 84 3d 01 00 00    	je     40bd7d <main+0x208d>
      return false;
  40bc40:	31 ed                	xor    %ebp,%ebp
  40bc42:	4d 85 e4             	test   %r12,%r12
  40bc45:	0f 84 f5 00 00 00    	je     40bd40 <main+0x2050>
  40bc4b:	4c 89 e7             	mov    %r12,%rdi
  40bc4e:	41 ff d6             	callq  *%r14
  40bc51:	4c 89 e7             	mov    %r12,%rdi
  40bc54:	41 ff d6             	callq  *%r14
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  40bc57:	40 84 ed             	test   %bpl,%bpl
  40bc5a:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40bc61:	00 
  40bc62:	74 18                	je     40bc7c <main+0x1f8c>
  40bc64:	48 8b 94 24 28 02 00 	mov    0x228(%rsp),%rdx
  40bc6b:	00 
  return false;
  40bc6c:	31 ed                	xor    %ebp,%ebp
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40bc6e:	48 3b 94 24 08 02 00 	cmp    0x208(%rsp),%rdx
  40bc75:	00 
  40bc76:	0f 84 35 01 00 00    	je     40bdb1 <main+0x20c1>
	if (!_M_is_local())
  40bc7c:	48 3b 4c 24 28       	cmp    0x28(%rsp),%rcx
  40bc81:	74 15                	je     40bc98 <main+0x1fa8>
      { ::operator delete(__p); }
  40bc83:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40bc8a:	ff ff ff 
  40bc8d:	48 89 cf             	mov    %rcx,%rdi
  40bc90:	49 89 df             	mov    %rbx,%r15
  40bc93:	48 01 d8             	add    %rbx,%rax
  40bc96:	ff d0                	callq  *%rax
  40bc98:	4d 85 e4             	test   %r12,%r12
  40bc9b:	74 06                	je     40bca3 <main+0x1fb3>
  40bc9d:	4c 89 e7             	mov    %r12,%rdi
  40bca0:	41 ff d6             	callq  *%r14
    if (it->first->equals(key, pMemory)) {
  40bca3:	40 84 ed             	test   %bpl,%bpl
  40bca6:	0f 85 e0 08 00 00    	jne    40c58c <main+0x289c>
	_M_node = _Rb_tree_increment(_M_node);
  40bcac:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  40bcb3:	ff ff ff 
  40bcb6:	4c 89 ef             	mov    %r13,%rdi
  40bcb9:	49 89 df             	mov    %rbx,%r15
  40bcbc:	48 01 d8             	add    %rbx,%rax
  40bcbf:	ff d0                	callq  *%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40bcc1:	48 3b 44 24 30       	cmp    0x30(%rsp),%rax
  40bcc6:	49 89 c5             	mov    %rax,%r13
  40bcc9:	0f 84 7f f5 ff ff    	je     40b24e <main+0x155e>
        if( pi_ != 0 ) pi_->add_ref_copy();
  40bccf:	4d 85 e4             	test   %r12,%r12
  40bcd2:	74 79                	je     40bd4d <main+0x205d>
  40bcd4:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  40bcd9:	f0 83 06 01          	lock addl $0x1,(%rsi)
    if (it->first->equals(key, pMemory)) {
  40bcdd:	49 8b 45 20          	mov    0x20(%r13),%rax
	: allocator_type(__a), _M_p(__dat) { }
  40bce1:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
      { _M_string_length = __length; }
  40bce6:	48 c7 84 24 28 02 00 	movq   $0x0,0x228(%rsp)
  40bced:	00 00 00 00 00 
  40bcf2:	c6 84 24 30 02 00 00 	movb   $0x0,0x230(%rsp)
  40bcf9:	00 
	: allocator_type(__a), _M_p(__dat) { }
  40bcfa:	48 89 94 24 20 02 00 	mov    %rdx,0x220(%rsp)
  40bd01:	00 
  40bd02:	f0 83 06 01          	lock addl $0x1,(%rsi)
  40bd06:	f0 83 06 01          	lock addl $0x1,(%rsi)
  return m_pNode ? m_pNode->type() : NodeType::Null;
  40bd0a:	48 85 c0             	test   %rax,%rax
  40bd0d:	0f 84 fa 14 00 00    	je     40d20d <main+0x351d>
  40bd13:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  40bd16:	48 85 c0             	test   %rax,%rax
  40bd19:	0f 84 44 0c 00 00    	je     40c963 <main+0x2c73>
  40bd1f:	48 8b 00             	mov    (%rax),%rax
  40bd22:	48 85 c0             	test   %rax,%rax
  40bd25:	0f 84 29 0c 00 00    	je     40c954 <main+0x2c64>
  40bd2b:	0f b6 28             	movzbl (%rax),%ebp
  void set_scalar(const std::string& scalar);
  void set_style(EmitterStyle::value style);

  bool is_defined() const { return m_isDefined; }
  NodeType::value type() const {
    return m_isDefined ? m_type : NodeType::Undefined;
  40bd2e:	40 84 ed             	test   %bpl,%bpl
  40bd31:	0f 85 ff fe ff ff    	jne    40bc36 <main+0x1f46>
        if( pi_ != 0 ) pi_->release();
  40bd37:	4d 85 e4             	test   %r12,%r12
  40bd3a:	0f 85 0b ff ff ff    	jne    40bc4b <main+0x1f5b>
  40bd40:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40bd47:	00 
  40bd48:	e9 2f ff ff ff       	jmpq   40bc7c <main+0x1f8c>
  40bd4d:	49 8b 45 20          	mov    0x20(%r13),%rax
  40bd51:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
      { _M_string_length = __length; }
  40bd56:	48 c7 84 24 28 02 00 	movq   $0x0,0x228(%rsp)
  40bd5d:	00 00 00 00 00 
  40bd62:	c6 84 24 30 02 00 00 	movb   $0x0,0x230(%rsp)
  40bd69:	00 
  40bd6a:	48 85 c0             	test   %rax,%rax
	: allocator_type(__a), _M_p(__dat) { }
  40bd6d:	48 89 b4 24 20 02 00 	mov    %rsi,0x220(%rsp)
  40bd74:	00 
  40bd75:	0f 84 31 ff ff ff    	je     40bcac <main+0x1fbc>
  40bd7b:	eb 96                	jmp    40bd13 <main+0x2023>
  }
  const std::string& scalar() const { return m_scalar; }
  40bd7d:	48 8d 70 30          	lea    0x30(%rax),%rsi
	this->_M_assign(__str);
  40bd81:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  40bd88:	ff ff ff 
  40bd8b:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  40bd92:	00 
  40bd93:	49 89 df             	mov    %rbx,%r15
  40bd96:	48 01 d8             	add    %rbx,%rax
  40bd99:	ff d0                	callq  *%rax
  40bd9b:	4d 85 e4             	test   %r12,%r12
  40bd9e:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40bda5:	00 
  40bda6:	0f 85 9f fe ff ff    	jne    40bc4b <main+0x1f5b>
  40bdac:	e9 b3 fe ff ff       	jmpq   40bc64 <main+0x1f74>
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
  40bdb1:	48 85 d2             	test   %rdx,%rdx
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40bdb4:	0f b6 6c 24 58       	movzbl 0x58(%rsp),%ebp
  40bdb9:	0f 84 bd fe ff ff    	je     40bc7c <main+0x1f8c>
	  return 0;
	return __builtin_memcmp(__s1, __s2, __n);
  40bdbf:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  40bdc6:	ff ff ff 
  40bdc9:	48 89 cf             	mov    %rcx,%rdi
  40bdcc:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  40bdd3:	00 
  40bdd4:	48 01 d8             	add    %rbx,%rax
  40bdd7:	48 8b b4 24 00 02 00 	mov    0x200(%rsp),%rsi
  40bdde:	00 
  40bddf:	49 89 df             	mov    %rbx,%r15
  40bde2:	ff d0                	callq  *%rax
  40bde4:	85 c0                	test   %eax,%eax
  40bde6:	48 8b 8c 24 a0 00 00 	mov    0xa0(%rsp),%rcx
  40bded:	00 
  40bdee:	40 0f 94 c5          	sete   %bpl
  40bdf2:	e9 85 fe ff ff       	jmpq   40bc7c <main+0x1f8c>
      throw BadSubscript();
  40bdf7:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  40bdfe:	ff ff ff 
  40be01:	bf 40 00 00 00       	mov    $0x40,%edi
  40be06:	49 89 df             	mov    %rbx,%r15
  40be09:	48 01 d8             	add    %rbx,%rax
  40be0c:	ff d0                	callq  *%rax
  40be0e:	48 89 c5             	mov    %rax,%rbp
  40be11:	48 89 c7             	mov    %rax,%rdi
  40be14:	48 b8 60 b1 de ff ff 	movabs $0xffffffffffdeb160,%rax
  40be1b:	ff ff ff 
  40be1e:	48 01 d8             	add    %rbx,%rax
  40be21:	ff d0                	callq  *%rax
  40be23:	48 b8 f0 94 de ff ff 	movabs $0xffffffffffde94f0,%rax
  40be2a:	ff ff ff 
  40be2d:	48 89 ef             	mov    %rbp,%rdi
  40be30:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40be34:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  40be3b:	ff ff ff 
  40be3e:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40be42:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  40be49:	ff ff ff 
  40be4c:	48 01 d8             	add    %rbx,%rax
  40be4f:	ff d0                	callq  *%rax
      return NULL;
  40be51:	31 ed                	xor    %ebp,%ebp
  40be53:	4d 85 e4             	test   %r12,%r12
  40be56:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40be5d:	ff ff ff 
  40be60:	74 10                	je     40be72 <main+0x2182>
  40be62:	4c 89 e7             	mov    %r12,%rdi
  40be65:	4d 8d 2c 1f          	lea    (%r15,%rbx,1),%r13
  40be69:	41 ff d5             	callq  *%r13
  40be6c:	4c 89 e7             	mov    %r12,%rdi
  40be6f:	41 ff d5             	callq  *%r13
	if (!_M_is_local())
  40be72:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40be77:	48 8b bc 24 40 02 00 	mov    0x240(%rsp),%rdi
  40be7e:	00 
  40be7f:	48 83 c0 10          	add    $0x10,%rax
  40be83:	48 39 c7             	cmp    %rax,%rdi
  40be86:	74 12                	je     40be9a <main+0x21aa>
  40be88:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40be8f:	ff ff ff 
  40be92:	49 89 df             	mov    %rbx,%r15
  40be95:	48 01 d8             	add    %rbx,%rax
  40be98:	ff d0                	callq  *%rax
  40be9a:	4d 85 e4             	test   %r12,%r12
  40be9d:	74 13                	je     40beb2 <main+0x21c2>
  40be9f:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40bea6:	ff ff ff 
  40bea9:	4c 89 e7             	mov    %r12,%rdi
  40beac:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40beb0:	ff d0                	callq  *%rax
  if (!value) {
  40beb2:	48 85 ed             	test   %rbp,%rbp
  40beb5:	0f 84 4d 07 00 00    	je     40c608 <main+0x2918>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40bebb:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40bec2:	00 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40bec3:	48 8b 94 24 b8 03 00 	mov    0x3b8(%rsp),%rdx
  40beca:	00 
        if( pi_ != 0 ) pi_->add_ref_copy();
  40becb:	48 85 ff             	test   %rdi,%rdi
  40bece:	0f 84 8f 06 00 00    	je     40c563 <main+0x2873>
  40bed4:	48 8d 47 08          	lea    0x8(%rdi),%rax
  40bed8:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  40bedc:	c6 84 24 e0 01 00 00 	movb   $0x1,0x1e0(%rsp)
  40bee3:	01 
  40bee4:	48 89 94 24 e8 01 00 	mov    %rdx,0x1e8(%rsp)
  40beeb:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40beec:	48 89 bc 24 f0 01 00 	mov    %rdi,0x1f0(%rsp)
  40bef3:	00 
  40bef4:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  40bef8:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40beff:	ff ff ff 
  40bf02:	48 89 ac 24 f8 01 00 	mov    %rbp,0x1f8(%rsp)
  40bf09:	00 
  40bf0a:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40bf0e:	ff d0                	callq  *%rax
    startStates.emplace_back(State(0, start[0].as<int>(), start[1].as<int>()));
  40bf10:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  40bf15:	4c 8b 7c 24 68       	mov    0x68(%rsp),%r15
  40bf1a:	48 8d ac 24 c0 01 00 	lea    0x1c0(%rsp),%rbp
  40bf21:	00 
  40bf22:	c7 84 24 40 02 00 00 	movl   $0x1,0x240(%rsp)
  40bf29:	01 00 00 00 
  40bf2d:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  40bf32:	48 89 ee             	mov    %rbp,%rsi
  40bf35:	4c 89 f0             	mov    %r14,%rax
  40bf38:	4c 89 ff             	mov    %r15,%rdi
  40bf3b:	48 01 d8             	add    %rbx,%rax
  40bf3e:	ff d0                	callq  *%rax
  40bf40:	4c 89 ff             	mov    %r15,%rdi
  40bf43:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
  40bf48:	4c 89 f8             	mov    %r15,%rax
  40bf4b:	48 01 d8             	add    %rbx,%rax
  40bf4e:	ff d0                	callq  *%rax
  40bf50:	48 89 ee             	mov    %rbp,%rsi
  40bf53:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  40bf58:	41 89 c4             	mov    %eax,%r12d
  40bf5b:	4c 89 f0             	mov    %r14,%rax
  40bf5e:	c7 84 24 20 02 00 00 	movl   $0x0,0x220(%rsp)
  40bf65:	00 00 00 00 
  40bf69:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  40bf70:	00 
  40bf71:	48 01 d8             	add    %rbx,%rax
  40bf74:	48 89 ef             	mov    %rbp,%rdi
  40bf77:	ff d0                	callq  *%rax
  40bf79:	4c 89 f8             	mov    %r15,%rax
  40bf7c:	48 89 ef             	mov    %rbp,%rdi
  40bf7f:	48 01 d8             	add    %rbx,%rax
  40bf82:	ff d0                	callq  *%rax

#include "hash.hpp"

struct State {
	State(){}
  State(int time, int x, int y) : time(time), x(x), y(y) {}
  40bf84:	89 84 24 64 02 00 00 	mov    %eax,0x264(%rsp)
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40bf8b:	48 8b 84 24 e8 00 00 	mov    0xe8(%rsp),%rax
  40bf92:	00 
  40bf93:	48 3b 84 24 f0 00 00 	cmp    0xf0(%rsp),%rax
  40bf9a:	00 
  40bf9b:	c7 84 24 60 02 00 00 	movl   $0x0,0x260(%rsp)
  40bfa2:	00 00 00 00 
  40bfa6:	44 89 a4 24 68 02 00 	mov    %r12d,0x268(%rsp)
  40bfad:	00 
  40bfae:	0f 84 52 09 00 00    	je     40c906 <main+0x2c16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  40bfb4:	48 85 c0             	test   %rax,%rax
  40bfb7:	74 15                	je     40bfce <main+0x22de>
  40bfb9:	48 8b 94 24 60 02 00 	mov    0x260(%rsp),%rdx
  40bfc0:	00 
  40bfc1:	48 89 10             	mov    %rdx,(%rax)
  40bfc4:	8b 94 24 68 02 00 00 	mov    0x268(%rsp),%edx
  40bfcb:	89 50 08             	mov    %edx,0x8(%rax)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  40bfce:	48 83 c0 0c          	add    $0xc,%rax
  40bfd2:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
  40bfd9:	00 
  40bfda:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40bfe1:	00 
  40bfe2:	48 85 ff             	test   %rdi,%rdi
  40bfe5:	74 10                	je     40bff7 <main+0x2307>
  40bfe7:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40bfee:	ff ff ff 
  40bff1:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40bff5:	ff d0                	callq  *%rax
  40bff7:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40bffe:	00 
  40bfff:	48 85 ff             	test   %rdi,%rdi
  40c002:	74 10                	je     40c014 <main+0x2324>
  40c004:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40c00b:	ff ff ff 
  40c00e:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40c012:	ff d0                	callq  *%rax
    goals.emplace_back(Location(goal[0].as<int>(), goal[1].as<int>()));
  40c014:	4c 8b 74 24 48       	mov    0x48(%rsp),%r14
  40c019:	4c 8b 7c 24 68       	mov    0x68(%rsp),%r15
  40c01e:	48 8d ac 24 e0 01 00 	lea    0x1e0(%rsp),%rbp
  40c025:	00 
  40c026:	c7 84 24 40 02 00 00 	movl   $0x1,0x240(%rsp)
  40c02d:	01 00 00 00 
  40c031:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  40c036:	48 89 ee             	mov    %rbp,%rsi
  40c039:	4c 89 f0             	mov    %r14,%rax
  40c03c:	4c 89 ff             	mov    %r15,%rdi
  40c03f:	48 01 d8             	add    %rbx,%rax
  40c042:	ff d0                	callq  *%rax
  40c044:	4c 89 ff             	mov    %r15,%rdi
  40c047:	4c 8b 7c 24 40       	mov    0x40(%rsp),%r15
  40c04c:	4c 89 f8             	mov    %r15,%rax
  40c04f:	48 01 d8             	add    %rbx,%rax
  40c052:	ff d0                	callq  *%rax
  40c054:	48 89 ee             	mov    %rbp,%rsi
  40c057:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  40c05c:	41 89 c4             	mov    %eax,%r12d
  40c05f:	4c 89 f0             	mov    %r14,%rax
  40c062:	c7 84 24 20 02 00 00 	movl   $0x0,0x220(%rsp)
  40c069:	00 00 00 00 
  40c06d:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  40c074:	00 
  40c075:	48 01 d8             	add    %rbx,%rax
  40c078:	48 89 ef             	mov    %rbp,%rdi
  40c07b:	ff d0                	callq  *%rax
  40c07d:	4c 89 f8             	mov    %r15,%rax
  40c080:	48 89 ef             	mov    %rbp,%rdi
  40c083:	48 01 d8             	add    %rbx,%rax
  40c086:	ff d0                	callq  *%rax
#pragma once

#include "hash.hpp"

struct Location {
  Location(int x, int y) : x(x), y(y) {}
  40c088:	89 84 24 60 02 00 00 	mov    %eax,0x260(%rsp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  40c08f:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
  40c096:	00 
  40c097:	48 3b 84 24 d0 00 00 	cmp    0xd0(%rsp),%rax
  40c09e:	00 
  40c09f:	44 89 a4 24 64 02 00 	mov    %r12d,0x264(%rsp)
  40c0a6:	00 
  40c0a7:	0f 84 80 08 00 00    	je     40c92d <main+0x2c3d>
  40c0ad:	48 85 c0             	test   %rax,%rax
  40c0b0:	74 0b                	je     40c0bd <main+0x23cd>
  40c0b2:	48 8b 94 24 60 02 00 	mov    0x260(%rsp),%rdx
  40c0b9:	00 
  40c0ba:	48 89 10             	mov    %rdx,(%rax)
	    ++this->_M_impl._M_finish;
  40c0bd:	48 83 c0 08          	add    $0x8,%rax
  40c0c1:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
  40c0c8:	00 
  40c0c9:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40c0d0:	00 
  40c0d1:	48 85 ff             	test   %rdi,%rdi
  40c0d4:	74 10                	je     40c0e6 <main+0x23f6>
  40c0d6:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40c0dd:	ff ff ff 
  40c0e0:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40c0e4:	ff d0                	callq  *%rax
  40c0e6:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40c0ed:	00 
  40c0ee:	48 85 ff             	test   %rdi,%rdi
  40c0f1:	74 10                	je     40c103 <main+0x2413>
  40c0f3:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40c0fa:	ff ff ff 
  40c0fd:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40c101:	ff d0                	callq  *%rax
  40c103:	48 8b bc 24 f0 01 00 	mov    0x1f0(%rsp),%rdi
  40c10a:	00 
  40c10b:	48 85 ff             	test   %rdi,%rdi
  40c10e:	74 10                	je     40c120 <main+0x2430>
  40c110:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40c117:	ff ff ff 
  40c11a:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40c11e:	ff d0                	callq  *%rax
  40c120:	48 8b bc 24 d0 01 00 	mov    0x1d0(%rsp),%rdi
  40c127:	00 
  40c128:	48 85 ff             	test   %rdi,%rdi
  40c12b:	74 10                	je     40c13d <main+0x244d>
  40c12d:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40c134:	ff ff ff 
  40c137:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40c13b:	ff d0                	callq  *%rax
  40c13d:	48 8b bc 24 00 04 00 	mov    0x400(%rsp),%rdi
  40c144:	00 
  40c145:	48 85 ff             	test   %rdi,%rdi
  40c148:	74 10                	je     40c15a <main+0x246a>
  40c14a:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40c151:	ff ff ff 
  40c154:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40c158:	ff d0                	callq  *%rax
  40c15a:	48 8b bc 24 e0 03 00 	mov    0x3e0(%rsp),%rdi
  40c161:	00 
  40c162:	48 85 ff             	test   %rdi,%rdi
  40c165:	74 10                	je     40c177 <main+0x2487>
  40c167:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40c16e:	ff ff ff 
  40c171:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40c175:	ff d0                	callq  *%rax
  40c177:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40c17e:	00 
  40c17f:	48 85 ff             	test   %rdi,%rdi
  40c182:	74 10                	je     40c194 <main+0x24a4>
  40c184:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40c18b:	ff ff ff 
  40c18e:	49 8d 04 1f          	lea    (%r15,%rbx,1),%rax
  40c192:	ff d0                	callq  *%rax
    switch (m_type) {
  40c194:	8b 84 24 e0 02 00 00 	mov    0x2e0(%rsp),%eax
  40c19b:	4c 8b ac 24 e8 02 00 	mov    0x2e8(%rsp),%r13
  40c1a2:	00 
  40c1a3:	48 8b bc 24 f0 02 00 	mov    0x2f0(%rsp),%rdi
  40c1aa:	00 
  40c1ab:	83 f8 01             	cmp    $0x1,%eax
  40c1ae:	0f 84 86 01 00 00    	je     40c33a <main+0x264a>
  40c1b4:	83 f8 02             	cmp    $0x2,%eax
  40c1b7:	75 7d                	jne    40c236 <main+0x2546>
  40c1b9:	48 8b ac 24 f8 02 00 	mov    0x2f8(%rsp),%rbp
  40c1c0:	00 
	_M_node = _Rb_tree_increment(_M_node);
  40c1c1:	49 bc 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%r12
  40c1c8:	ff ff ff 
  40c1cb:	49 89 df             	mov    %rbx,%r15
  40c1ce:	49 01 dc             	add    %rbx,%r12
  40c1d1:	41 ff d4             	callq  *%r12
    while (it != m_mapEnd && !is_defined(it))
  40c1d4:	48 39 c5             	cmp    %rax,%rbp
  40c1d7:	74 5a                	je     40c233 <main+0x2543>
  40c1d9:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40c1dd:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40c1e0:	48 85 d2             	test   %rdx,%rdx
  40c1e3:	0f 84 7a 07 00 00    	je     40c963 <main+0x2c73>
  40c1e9:	48 8b 12             	mov    (%rdx),%rdx
  40c1ec:	48 85 d2             	test   %rdx,%rdx
  40c1ef:	0f 84 5f 07 00 00    	je     40c954 <main+0x2c64>
  40c1f5:	48 89 c7             	mov    %rax,%rdi
  40c1f8:	eb 25                	jmp    40c21f <main+0x252f>
  40c1fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40c200:	48 8b 50 20          	mov    0x20(%rax),%rdx
  40c204:	48 8b 12             	mov    (%rdx),%rdx
  40c207:	48 85 d2             	test   %rdx,%rdx
  40c20a:	0f 84 53 07 00 00    	je     40c963 <main+0x2c73>
  40c210:	48 8b 12             	mov    (%rdx),%rdx
  40c213:	48 89 c7             	mov    %rax,%rdi
  40c216:	48 85 d2             	test   %rdx,%rdx
  40c219:	0f 84 35 07 00 00    	je     40c954 <main+0x2c64>
    return it->first->is_defined() && it->second->is_defined();
  40c21f:	80 3a 00             	cmpb   $0x0,(%rdx)
  40c222:	0f 85 8b 00 00 00    	jne    40c2b3 <main+0x25c3>
  40c228:	49 89 df             	mov    %rbx,%r15
  40c22b:	41 ff d4             	callq  *%r12
    while (it != m_mapEnd && !is_defined(it))
  40c22e:	48 39 c5             	cmp    %rax,%rbp
  40c231:	75 cd                	jne    40c200 <main+0x2510>
        m_mapIt = increment_until_defined(m_mapIt);
  40c233:	48 89 ef             	mov    %rbp,%rdi
  40c236:	4c 89 ac 24 e8 02 00 	mov    %r13,0x2e8(%rsp)
  40c23d:	00 
  40c23e:	48 89 bc 24 f0 02 00 	mov    %rdi,0x2f0(%rsp)
  40c245:	00 
  40c246:	e9 87 ea ff ff       	jmpq   40acd2 <main+0xfe2>
  40c24b:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  40c24e:	48 85 d2             	test   %rdx,%rdx
  40c251:	0f 85 0d ed ff ff    	jne    40af64 <main+0x1274>
  40c257:	e9 18 f0 ff ff       	jmpq   40b274 <main+0x1584>
  40c25c:	c6 84 24 c0 01 00 00 	movb   $0x1,0x1c0(%rsp)
  40c263:	01 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40c264:	48 89 94 24 c8 01 00 	mov    %rdx,0x1c8(%rsp)
  40c26b:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40c26c:	48 c7 84 24 d0 01 00 	movq   $0x0,0x1d0(%rsp)
  40c273:	00 00 00 00 00 
  40c278:	48 89 ac 24 d8 01 00 	mov    %rbp,0x1d8(%rsp)
  40c27f:	00 
  40c280:	e9 2f ec ff ff       	jmpq   40aeb4 <main+0x11c4>
  40c285:	48 8b 84 24 b8 04 00 	mov    0x4b8(%rsp),%rax
  40c28c:	00 
  40c28d:	48 39 84 24 e8 02 00 	cmp    %rax,0x2e8(%rsp)
  40c294:	00 
  40c295:	0f 94 c0             	sete   %al
  for (const auto& node : config["agents"]) {
  40c298:	84 c0                	test   %al,%al
  40c29a:	0f 84 46 ea ff ff    	je     40ace6 <main+0xff6>
  40c2a0:	e9 f0 ef ff ff       	jmpq   40b295 <main+0x15a5>
        if( pi_ != 0 ) pi_->add_ref_copy();
  40c2a5:	31 ed                	xor    %ebp,%ebp
  40c2a7:	e9 67 eb ff ff       	jmpq   40ae13 <main+0x1123>
  40c2ac:	31 ed                	xor    %ebp,%ebp
  40c2ae:	e9 bf fb ff ff       	jmpq   40be72 <main+0x2182>
  40c2b3:	48 8b 47 28          	mov    0x28(%rdi),%rax
  40c2b7:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  40c2ba:	48 85 c0             	test   %rax,%rax
  40c2bd:	0f 84 a0 06 00 00    	je     40c963 <main+0x2c73>
  40c2c3:	48 8b 00             	mov    (%rax),%rax
  40c2c6:	48 85 c0             	test   %rax,%rax
  40c2c9:	0f 84 85 06 00 00    	je     40c954 <main+0x2c64>
    while (it != m_mapEnd && !is_defined(it))
  40c2cf:	80 38 00             	cmpb   $0x0,(%rax)
  40c2d2:	0f 84 50 ff ff ff    	je     40c228 <main+0x2538>
  40c2d8:	48 89 fd             	mov    %rdi,%rbp
  40c2db:	e9 53 ff ff ff       	jmpq   40c233 <main+0x2543>
      throw BadSubscript();
  40c2e0:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  40c2e7:	ff ff ff 
  40c2ea:	bf 40 00 00 00       	mov    $0x40,%edi
  40c2ef:	49 89 df             	mov    %rbx,%r15
  40c2f2:	48 01 d8             	add    %rbx,%rax
  40c2f5:	ff d0                	callq  *%rax
  40c2f7:	48 89 c5             	mov    %rax,%rbp
  40c2fa:	48 89 c7             	mov    %rax,%rdi
  40c2fd:	48 b8 60 b1 de ff ff 	movabs $0xffffffffffdeb160,%rax
  40c304:	ff ff ff 
  40c307:	48 01 d8             	add    %rbx,%rax
  40c30a:	ff d0                	callq  *%rax
  40c30c:	48 b8 f0 94 de ff ff 	movabs $0xffffffffffde94f0,%rax
  40c313:	ff ff ff 
  40c316:	48 89 ef             	mov    %rbp,%rdi
  40c319:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40c31d:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  40c324:	ff ff ff 
  40c327:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40c32b:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  40c332:	ff ff ff 
  40c335:	48 01 d8             	add    %rbx,%rax
  40c338:	ff d0                	callq  *%rax
	++_M_current;
  40c33a:	49 83 c5 08          	add    $0x8,%r13
  40c33e:	e9 f3 fe ff ff       	jmpq   40c236 <main+0x2546>
  40c343:	4c 8b a8 88 00 00 00 	mov    0x88(%rax),%r13
      { return const_iterator(&this->_M_impl._M_header); }
  40c34a:	48 83 c0 78          	add    $0x78,%rax
  40c34e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40c353:	49 39 c5             	cmp    %rax,%r13
  40c356:	0f 84 f5 fa ff ff    	je     40be51 <main+0x2161>
        if( pi_ != 0 ) pi_->release();
  40c35c:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c363:	ff ff ff 
  40c366:	4c 8d b4 24 60 02 00 	lea    0x260(%rsp),%r14
  40c36d:	00 
  40c36e:	48 01 d8             	add    %rbx,%rax
  40c371:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40c376:	48 b8 50 31 de ff ff 	movabs $0xffffffffffde3150,%rax
  40c37d:	ff ff ff 
  40c380:	48 01 d8             	add    %rbx,%rax
  40c383:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40c38a:	00 
  40c38b:	e9 fe 00 00 00       	jmpq   40c48e <main+0x279e>
  40c390:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  40c395:	f0 83 00 01          	lock addl $0x1,(%rax)
    if (it->first->equals(key, pMemory)) {
  40c399:	49 8b 55 20          	mov    0x20(%r13),%rdx
	: allocator_type(__a), _M_p(__dat) { }
  40c39d:	49 8d 4e 10          	lea    0x10(%r14),%rcx
      { _M_string_length = __length; }
  40c3a1:	48 c7 84 24 68 02 00 	movq   $0x0,0x268(%rsp)
  40c3a8:	00 00 00 00 00 
      { __c1 = __c2; }
  40c3ad:	c6 84 24 70 02 00 00 	movb   $0x0,0x270(%rsp)
  40c3b4:	00 
	: allocator_type(__a), _M_p(__dat) { }
  40c3b5:	48 89 8c 24 60 02 00 	mov    %rcx,0x260(%rsp)
  40c3bc:	00 
  40c3bd:	f0 83 00 01          	lock addl $0x1,(%rax)
  40c3c1:	f0 83 00 01          	lock addl $0x1,(%rax)
  return m_pNode ? m_pNode->type() : NodeType::Null;
  40c3c5:	48 85 d2             	test   %rdx,%rdx
  40c3c8:	0f 84 03 0b 00 00    	je     40ced1 <main+0x31e1>
  40c3ce:	48 8b 02             	mov    (%rdx),%rax
  40c3d1:	48 85 c0             	test   %rax,%rax
  40c3d4:	0f 84 89 05 00 00    	je     40c963 <main+0x2c73>
  40c3da:	48 8b 00             	mov    (%rax),%rax
  40c3dd:	48 85 c0             	test   %rax,%rax
  40c3e0:	0f 84 6e 05 00 00    	je     40c954 <main+0x2c64>
  40c3e6:	0f b6 28             	movzbl (%rax),%ebp
    return m_isDefined ? m_type : NodeType::Undefined;
  40c3e9:	40 84 ed             	test   %bpl,%bpl
  40c3ec:	74 0c                	je     40c3fa <main+0x270a>
    if (!node.IsScalar())
  40c3ee:	83 78 04 02          	cmpl   $0x2,0x4(%rax)
  40c3f2:	0f 84 d3 00 00 00    	je     40c4cb <main+0x27db>
      return false;
  40c3f8:	31 ed                	xor    %ebp,%ebp
  40c3fa:	4d 85 e4             	test   %r12,%r12
  40c3fd:	74 2e                	je     40c42d <main+0x273d>
  40c3ff:	4c 89 e7             	mov    %r12,%rdi
  40c402:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  40c407:	41 ff d7             	callq  *%r15
  40c40a:	4c 89 e7             	mov    %r12,%rdi
  40c40d:	41 ff d7             	callq  *%r15
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  40c410:	40 84 ed             	test   %bpl,%bpl
  40c413:	74 18                	je     40c42d <main+0x273d>
  40c415:	48 8b 94 24 68 02 00 	mov    0x268(%rsp),%rdx
  40c41c:	00 
  return false;
  40c41d:	31 ed                	xor    %ebp,%ebp
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40c41f:	48 3b 94 24 48 02 00 	cmp    0x248(%rsp),%rdx
  40c426:	00 
  40c427:	0f 84 c5 00 00 00    	je     40c4f2 <main+0x2802>
  40c42d:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  40c434:	00 
	if (!_M_is_local())
  40c435:	49 8d 46 10          	lea    0x10(%r14),%rax
  40c439:	48 39 c7             	cmp    %rax,%rdi
  40c43c:	74 12                	je     40c450 <main+0x2760>
      { ::operator delete(__p); }
  40c43e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c445:	ff ff ff 
  40c448:	49 89 df             	mov    %rbx,%r15
  40c44b:	48 01 d8             	add    %rbx,%rax
  40c44e:	ff d0                	callq  *%rax
  40c450:	4d 85 e4             	test   %r12,%r12
  40c453:	74 0d                	je     40c462 <main+0x2772>
        return atomic_conditional_increment( &use_count_ ) != 0;
    }

    void release() // nothrow
    {
        if( atomic_decrement( &use_count_ ) == 1 )
  40c455:	f0 41 83 6c 24 08 01 	lock subl $0x1,0x8(%r12)
  40c45c:	0f 84 ce 00 00 00    	je     40c530 <main+0x2840>
    if (it->first->equals(key, pMemory)) {
  40c462:	40 84 ed             	test   %bpl,%bpl
  40c465:	0f 85 4b 01 00 00    	jne    40c5b6 <main+0x28c6>
	_M_node = _Rb_tree_increment(_M_node);
  40c46b:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  40c472:	ff ff ff 
  40c475:	4c 89 ef             	mov    %r13,%rdi
  40c478:	49 89 df             	mov    %rbx,%r15
  40c47b:	48 01 d8             	add    %rbx,%rax
  40c47e:	ff d0                	callq  *%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  40c480:	48 3b 44 24 30       	cmp    0x30(%rsp),%rax
  40c485:	49 89 c5             	mov    %rax,%r13
  40c488:	0f 84 c3 f9 ff ff    	je     40be51 <main+0x2161>
        if( pi_ != 0 ) pi_->add_ref_copy();
  40c48e:	4d 85 e4             	test   %r12,%r12
  40c491:	0f 85 f9 fe ff ff    	jne    40c390 <main+0x26a0>
    if (it->first->equals(key, pMemory)) {
  40c497:	49 8b 55 20          	mov    0x20(%r13),%rdx
	: allocator_type(__a), _M_p(__dat) { }
  40c49b:	49 8d 46 10          	lea    0x10(%r14),%rax
  return false;
  40c49f:	31 ed                	xor    %ebp,%ebp
      { _M_string_length = __length; }
  40c4a1:	48 c7 84 24 68 02 00 	movq   $0x0,0x268(%rsp)
  40c4a8:	00 00 00 00 00 
  40c4ad:	c6 84 24 70 02 00 00 	movb   $0x0,0x270(%rsp)
  40c4b4:	00 
	: allocator_type(__a), _M_p(__dat) { }
  40c4b5:	48 89 84 24 60 02 00 	mov    %rax,0x260(%rsp)
  40c4bc:	00 
  40c4bd:	48 85 d2             	test   %rdx,%rdx
  40c4c0:	0f 84 67 ff ff ff    	je     40c42d <main+0x273d>
  40c4c6:	e9 03 ff ff ff       	jmpq   40c3ce <main+0x26de>
  const std::string& scalar() const { return m_scalar; }
  40c4cb:	48 8d 70 30          	lea    0x30(%rax),%rsi
	this->_M_assign(__str);
  40c4cf:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  40c4d6:	ff ff ff 
  40c4d9:	4c 89 f7             	mov    %r14,%rdi
  40c4dc:	49 89 df             	mov    %rbx,%r15
  40c4df:	48 01 d8             	add    %rbx,%rax
  40c4e2:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  40c4e4:	4d 85 e4             	test   %r12,%r12
  40c4e7:	0f 85 12 ff ff ff    	jne    40c3ff <main+0x270f>
  40c4ed:	e9 23 ff ff ff       	jmpq   40c415 <main+0x2725>
	if (__n == 0)
  40c4f2:	48 85 d2             	test   %rdx,%rdx
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  40c4f5:	0f b6 ac 24 a0 00 00 	movzbl 0xa0(%rsp),%ebp
  40c4fc:	00 
  40c4fd:	0f 84 2a ff ff ff    	je     40c42d <main+0x273d>
	return __builtin_memcmp(__s1, __s2, __n);
  40c503:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  40c50a:	ff ff ff 
  40c50d:	48 8b b4 24 40 02 00 	mov    0x240(%rsp),%rsi
  40c514:	00 
  40c515:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  40c51c:	00 
  40c51d:	48 01 d8             	add    %rbx,%rax
  40c520:	49 89 df             	mov    %rbx,%r15
  40c523:	ff d0                	callq  *%rax
  40c525:	85 c0                	test   %eax,%eax
  40c527:	40 0f 94 c5          	sete   %bpl
  40c52b:	e9 fd fe ff ff       	jmpq   40c42d <main+0x273d>
  40c530:	4c 89 e7             	mov    %r12,%rdi
  40c533:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40c53a:	00 
  40c53b:	ff d0                	callq  *%rax
  40c53d:	e9 20 ff ff ff       	jmpq   40c462 <main+0x2772>
	if (!_M_is_local())
  40c542:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40c547:	48 8b bc 24 80 02 00 	mov    0x280(%rsp),%rdi
  40c54e:	00 
  40c54f:	31 ed                	xor    %ebp,%ebp
  40c551:	48 83 c0 10          	add    $0x10,%rax
  40c555:	48 39 c7             	cmp    %rax,%rdi
  40c558:	0f 85 09 e0 ff ff    	jne    40a567 <main+0x877>
  40c55e:	e9 1f e0 ff ff       	jmpq   40a582 <main+0x892>
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  40c563:	c6 84 24 e0 01 00 00 	movb   $0x1,0x1e0(%rsp)
  40c56a:	01 
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  40c56b:	48 89 94 24 e8 01 00 	mov    %rdx,0x1e8(%rsp)
  40c572:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  40c573:	48 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%rsp)
  40c57a:	00 00 00 00 00 
  40c57f:	48 89 ac 24 f8 01 00 	mov    %rbp,0x1f8(%rsp)
  40c586:	00 
  40c587:	e9 84 f9 ff ff       	jmpq   40bf10 <main+0x2220>
      return it->second;
  40c58c:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  40c590:	e9 bb ec ff ff       	jmpq   40b250 <main+0x1560>
  40c595:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40c59a:	48 8b bc 24 80 02 00 	mov    0x280(%rsp),%rdi
  40c5a1:	00 
  40c5a2:	48 83 c0 10          	add    $0x10,%rax
  40c5a6:	48 39 c7             	cmp    %rax,%rdi
  40c5a9:	0f 84 d3 df ff ff    	je     40a582 <main+0x892>
  40c5af:	31 ed                	xor    %ebp,%ebp
  40c5b1:	e9 b1 df ff ff       	jmpq   40a567 <main+0x877>
  40c5b6:	49 8b 6d 28          	mov    0x28(%r13),%rbp
  40c5ba:	e9 94 f8 ff ff       	jmpq   40be53 <main+0x2163>
      { return _M_node == __x._M_node; }
  40c5bf:	48 8b 84 24 c0 04 00 	mov    0x4c0(%rsp),%rax
  40c5c6:	00 
  40c5c7:	48 39 84 24 f0 02 00 	cmp    %rax,0x2f0(%rsp)
  40c5ce:	00 
  40c5cf:	0f 94 c0             	sete   %al
  40c5d2:	e9 c1 fc ff ff       	jmpq   40c298 <main+0x25a8>
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  40c5d7:	c6 84 24 c0 01 00 00 	movb   $0x0,0x1c0(%rsp)
  40c5de:	00 
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  40c5df:	48 c7 84 24 c8 01 00 	movq   $0x0,0x1c8(%rsp)
  40c5e6:	00 00 00 00 00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  40c5eb:	48 c7 84 24 d0 01 00 	movq   $0x0,0x1d0(%rsp)
  40c5f2:	00 00 00 00 00 
  40c5f7:	48 c7 84 24 d8 01 00 	movq   $0x0,0x1d8(%rsp)
  40c5fe:	00 00 00 00 00 
  40c603:	e9 ac e8 ff ff       	jmpq   40aeb4 <main+0x11c4>
  40c608:	c6 84 24 e0 01 00 00 	movb   $0x0,0x1e0(%rsp)
  40c60f:	00 
  40c610:	48 c7 84 24 e8 01 00 	movq   $0x0,0x1e8(%rsp)
  40c617:	00 00 00 00 00 
  40c61c:	48 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%rsp)
  40c623:	00 00 00 00 00 
  40c628:	48 c7 84 24 f8 01 00 	movq   $0x0,0x1f8(%rsp)
  40c62f:	00 00 00 00 00 
  40c634:	e9 d7 f8 ff ff       	jmpq   40bf10 <main+0x2220>
  40c639:	49 89 c5             	mov    %rax,%r13
        {}
  40c63c:	48 89 ef             	mov    %rbp,%rdi
  40c63f:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  40c646:	ff ff ff 
  40c649:	4c 89 ed             	mov    %r13,%rbp
  40c64c:	4c 89 a4 24 40 02 00 	mov    %r12,0x240(%rsp)
  40c653:	00 
  40c654:	49 89 df             	mov    %rbx,%r15
  40c657:	48 01 d8             	add    %rbx,%rax
  40c65a:	ff d0                	callq  *%rax
  40c65c:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
  40c661:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40c668:	00 
  40c669:	48 83 c0 10          	add    $0x10,%rax
  40c66d:	48 39 c7             	cmp    %rax,%rdi
  40c670:	74 12                	je     40c684 <main+0x2994>
  40c672:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c679:	ff ff ff 
  40c67c:	49 89 df             	mov    %rbx,%r15
  40c67f:	48 01 d8             	add    %rbx,%rax
  40c682:	ff d0                	callq  *%rax
  40c684:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  40c689:	48 8b bc 24 20 01 00 	mov    0x120(%rsp),%rdi
  40c690:	00 
  40c691:	48 83 c0 10          	add    $0x10,%rax
  40c695:	48 39 c7             	cmp    %rax,%rdi
  40c698:	74 12                	je     40c6ac <main+0x29bc>
  40c69a:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c6a1:	ff ff ff 
  40c6a4:	49 89 df             	mov    %rbx,%r15
  40c6a7:	48 01 d8             	add    %rbx,%rax
  40c6aa:	ff d0                	callq  *%rax
  40c6ac:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  40c6b1:	48 8b bc 24 00 01 00 	mov    0x100(%rsp),%rdi
  40c6b8:	00 
  40c6b9:	48 83 c0 10          	add    $0x10,%rax
  40c6bd:	48 39 c7             	cmp    %rax,%rdi
  40c6c0:	74 12                	je     40c6d4 <main+0x29e4>
  40c6c2:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c6c9:	ff ff ff 
  40c6cc:	49 89 df             	mov    %rbx,%r15
  40c6cf:	48 01 d8             	add    %rbx,%rax
  40c6d2:	ff d0                	callq  *%rax
  po::options_description desc("Allowed options");
  40c6d4:	48 b8 00 b8 de ff ff 	movabs $0xffffffffffdeb800,%rax
  40c6db:	ff ff ff 
  40c6de:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40c6e3:	48 01 d8             	add    %rbx,%rax
  40c6e6:	ff d0                	callq  *%rax
  40c6e8:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  40c6ef:	ff ff ff 
  40c6f2:	48 89 ef             	mov    %rbp,%rdi
  40c6f5:	49 89 df             	mov    %rbx,%r15
  40c6f8:	48 01 d8             	add    %rbx,%rax
  40c6fb:	ff d0                	callq  *%rax
  40c6fd:	48 89 c5             	mov    %rax,%rbp
        if( pi_ != 0 ) pi_->release();
  40c700:	4d 85 e4             	test   %r12,%r12
  40c703:	74 1a                	je     40c71f <main+0x2a2f>
  40c705:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c70c:	ff ff ff 
  40c70f:	4c 89 e7             	mov    %r12,%rdi
  40c712:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  40c716:	41 ff d5             	callq  *%r13
  40c719:	4c 89 e7             	mov    %r12,%rdi
  40c71c:	41 ff d5             	callq  *%r13
  40c71f:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  40c726:	00 
  40c727:	48 8b bc 24 00 02 00 	mov    0x200(%rsp),%rdi
  40c72e:	00 
  40c72f:	48 83 c0 10          	add    $0x10,%rax
  40c733:	48 39 c7             	cmp    %rax,%rdi
  40c736:	74 12                	je     40c74a <main+0x2a5a>
  40c738:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c73f:	ff ff ff 
  40c742:	49 89 df             	mov    %rbx,%r15
  40c745:	48 01 d8             	add    %rbx,%rax
  40c748:	ff d0                	callq  *%rax
  40c74a:	4d 85 e4             	test   %r12,%r12
  40c74d:	74 12                	je     40c761 <main+0x2a71>
  40c74f:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c756:	ff ff ff 
  40c759:	4c 89 e7             	mov    %r12,%rdi
  40c75c:	48 01 d8             	add    %rbx,%rax
  40c75f:	ff d0                	callq  *%rax
  for (const auto& node : config["agents"]) {
  40c761:	48 b8 b0 b9 de ff ff 	movabs $0xffffffffffdeb9b0,%rax
  40c768:	ff ff ff 
  40c76b:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40c770:	48 01 d8             	add    %rbx,%rax
  40c773:	ff d0                	callq  *%rax
  40c775:	48 8b bc 24 d8 04 00 	mov    0x4d8(%rsp),%rdi
  40c77c:	00 
  40c77d:	48 85 ff             	test   %rdi,%rdi
  40c780:	74 0f                	je     40c791 <main+0x2aa1>
  40c782:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c789:	ff ff ff 
  40c78c:	48 01 d8             	add    %rbx,%rax
  40c78f:	ff d0                	callq  *%rax
  40c791:	48 8b bc 24 08 03 00 	mov    0x308(%rsp),%rdi
  40c798:	00 
  40c799:	48 85 ff             	test   %rdi,%rdi
  40c79c:	74 0f                	je     40c7ad <main+0x2abd>
  40c79e:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c7a5:	ff ff ff 
  40c7a8:	48 01 d8             	add    %rbx,%rax
  40c7ab:	ff d0                	callq  *%rax
  40c7ad:	48 8b bc 24 b0 01 00 	mov    0x1b0(%rsp),%rdi
  40c7b4:	00 
  40c7b5:	48 85 ff             	test   %rdi,%rdi
  40c7b8:	74 0f                	je     40c7c9 <main+0x2ad9>
  40c7ba:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c7c1:	ff ff ff 
  40c7c4:	48 01 d8             	add    %rbx,%rax
  40c7c7:	ff d0                	callq  *%rax
  40c7c9:	48 b8 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rax
  40c7d0:	ff ff ff 
  40c7d3:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40c7d8:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  40c7df:	00 
  40c7e0:	48 85 ff             	test   %rdi,%rdi
  40c7e3:	74 0f                	je     40c7f4 <main+0x2b04>
  40c7e5:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c7ec:	ff ff ff 
  40c7ef:	48 01 d8             	add    %rbx,%rax
  40c7f2:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40c7f4:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  40c7fb:	00 
	if (__p)
  40c7fc:	48 85 ff             	test   %rdi,%rdi
  40c7ff:	74 12                	je     40c813 <main+0x2b23>
  40c801:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c808:	ff ff ff 
  40c80b:	49 89 df             	mov    %rbx,%r15
  40c80e:	48 01 d8             	add    %rbx,%rax
  40c811:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40c813:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  40c81a:	00 
	if (__p)
  40c81b:	48 85 ff             	test   %rdi,%rdi
  40c81e:	74 12                	je     40c832 <main+0x2b42>
  40c820:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c827:	ff ff ff 
  40c82a:	49 89 df             	mov    %rbx,%r15
  40c82d:	48 01 d8             	add    %rbx,%rax
  40c830:	ff d0                	callq  *%rax
  40c832:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  40c837:	48 8b 3c 24          	mov    (%rsp),%rdi
  40c83b:	48 01 d8             	add    %rbx,%rax
  40c83e:	ff d0                	callq  *%rax
  40c840:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  40c847:	00 
  40c848:	48 85 ff             	test   %rdi,%rdi
  40c84b:	0f 84 33 fe ff ff    	je     40c684 <main+0x2994>
  40c851:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c858:	ff ff ff 
  40c85b:	48 01 d8             	add    %rbx,%rax
  40c85e:	ff d0                	callq  *%rax
  40c860:	e9 1f fe ff ff       	jmpq   40c684 <main+0x2994>
  40c865:	48 89 c5             	mov    %rax,%rbp
  40c868:	4d 85 e4             	test   %r12,%r12
  40c86b:	74 1a                	je     40c887 <main+0x2b97>
  40c86d:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c874:	ff ff ff 
  40c877:	4c 89 e7             	mov    %r12,%rdi
  40c87a:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  40c87e:	41 ff d5             	callq  *%r13
  40c881:	4c 89 e7             	mov    %r12,%rdi
  40c884:	41 ff d5             	callq  *%r13
  40c887:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40c88c:	48 8b bc 24 40 02 00 	mov    0x240(%rsp),%rdi
  40c893:	00 
  40c894:	48 83 c0 10          	add    $0x10,%rax
  40c898:	48 39 c7             	cmp    %rax,%rdi
  40c89b:	74 12                	je     40c8af <main+0x2bbf>
  40c89d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40c8a4:	ff ff ff 
  40c8a7:	49 89 df             	mov    %rbx,%r15
  40c8aa:	48 01 d8             	add    %rbx,%rax
  40c8ad:	ff d0                	callq  *%rax
  40c8af:	4d 85 e4             	test   %r12,%r12
  40c8b2:	74 12                	je     40c8c6 <main+0x2bd6>
  40c8b4:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c8bb:	ff ff ff 
  40c8be:	4c 89 e7             	mov    %r12,%rdi
  40c8c1:	48 01 d8             	add    %rbx,%rax
  40c8c4:	ff d0                	callq  *%rax
  40c8c6:	48 8b bc 24 d0 01 00 	mov    0x1d0(%rsp),%rdi
  40c8cd:	00 
  40c8ce:	48 85 ff             	test   %rdi,%rdi
  40c8d1:	0f 84 8a fe ff ff    	je     40c761 <main+0x2a71>
  40c8d7:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c8de:	ff ff ff 
  40c8e1:	48 01 d8             	add    %rbx,%rax
  40c8e4:	ff d0                	callq  *%rax
  40c8e6:	e9 76 fe ff ff       	jmpq   40c761 <main+0x2a71>
	  _M_emplace_back_aux(__x);
  40c8eb:	4c 89 ff             	mov    %r15,%rdi
  40c8ee:	41 ff d6             	callq  *%r14
  40c8f1:	48 8b 8c 24 e8 00 00 	mov    0xe8(%rsp),%rcx
  40c8f8:	00 
  40c8f9:	48 8b 94 24 e0 00 00 	mov    0xe0(%rsp),%rdx
  40c900:	00 
  40c901:	e9 5f ed ff ff       	jmpq   40b665 <main+0x1975>
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  40c906:	4c 8d b4 24 60 02 00 	lea    0x260(%rsp),%r14
  40c90d:	00 
  40c90e:	48 b8 e0 ec de ff ff 	movabs $0xffffffffffdeece0,%rax
  40c915:	ff ff ff 
  40c918:	48 8d bc 24 e0 00 00 	lea    0xe0(%rsp),%rdi
  40c91f:	00 
  40c920:	48 01 d8             	add    %rbx,%rax
  40c923:	4c 89 f6             	mov    %r14,%rsi
  40c926:	ff d0                	callq  *%rax
  40c928:	e9 ad f6 ff ff       	jmpq   40bfda <main+0x22ea>
  40c92d:	4c 8d b4 24 60 02 00 	lea    0x260(%rsp),%r14
  40c934:	00 
  40c935:	48 b8 40 ee de ff ff 	movabs $0xffffffffffdeee40,%rax
  40c93c:	ff ff ff 
  40c93f:	48 8d bc 24 c0 00 00 	lea    0xc0(%rsp),%rdi
  40c946:	00 
  40c947:	48 01 d8             	add    %rbx,%rax
  40c94a:	4c 89 f6             	mov    %r14,%rsi
  40c94d:	ff d0                	callq  *%rax
  40c94f:	e9 75 f7 ff ff       	jmpq   40c0c9 <main+0x23d9>
  40c954:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  40c95b:	ff ff ff 
  40c95e:	48 01 d8             	add    %rbx,%rax
  40c961:	ff d0                	callq  *%rax
  40c963:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  40c96a:	ff ff ff 
  40c96d:	48 01 d8             	add    %rbx,%rax
  40c970:	ff d0                	callq  *%rax
  40c972:	49 89 c5             	mov    %rax,%r13
      throw BadSubscript();
  40c975:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  40c97c:	ff ff ff 
  40c97f:	48 89 ef             	mov    %rbp,%rdi
  40c982:	49 89 df             	mov    %rbx,%r15
  40c985:	48 01 d8             	add    %rbx,%rax
  40c988:	4c 89 ed             	mov    %r13,%rbp
  40c98b:	ff d0                	callq  *%rax
  40c98d:	e9 6e fd ff ff       	jmpq   40c700 <main+0x2a10>
  40c992:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40c999:	00 
  40c99a:	48 89 c5             	mov    %rax,%rbp
  40c99d:	48 85 ff             	test   %rdi,%rdi
  40c9a0:	74 0f                	je     40c9b1 <main+0x2cc1>
  40c9a2:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c9a9:	ff ff ff 
  40c9ac:	48 01 d8             	add    %rbx,%rax
  40c9af:	ff d0                	callq  *%rax
  40c9b1:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40c9b8:	00 
  40c9b9:	48 85 ff             	test   %rdi,%rdi
  40c9bc:	74 0f                	je     40c9cd <main+0x2cdd>
  40c9be:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c9c5:	ff ff ff 
  40c9c8:	48 01 d8             	add    %rbx,%rax
  40c9cb:	ff d0                	callq  *%rax
  40c9cd:	48 8b bc 24 f0 01 00 	mov    0x1f0(%rsp),%rdi
  40c9d4:	00 
  40c9d5:	48 85 ff             	test   %rdi,%rdi
  40c9d8:	0f 84 e8 fe ff ff    	je     40c8c6 <main+0x2bd6>
  40c9de:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40c9e5:	ff ff ff 
  40c9e8:	48 01 d8             	add    %rbx,%rax
  40c9eb:	ff d0                	callq  *%rax
  40c9ed:	e9 d4 fe ff ff       	jmpq   40c8c6 <main+0x2bd6>
  40c9f2:	48 89 c5             	mov    %rax,%rbp
  40c9f5:	e9 b5 fe ff ff       	jmpq   40c8af <main+0x2bbf>
  40c9fa:	48 89 c5             	mov    %rax,%rbp
  40c9fd:	eb b2                	jmp    40c9b1 <main+0x2cc1>
      { _M_h._M_deallocate_nodes(_M_nodes); }
  40c9ff:	48 8b bc 24 b0 02 00 	mov    0x2b0(%rsp),%rdi
  40ca06:	00 
      while (__n)
  40ca07:	48 85 ff             	test   %rdi,%rdi
  40ca0a:	74 6f                	je     40ca7b <main+0x2d8b>
  40ca0c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  40ca11:	48 8b 07             	mov    (%rdi),%rax
  40ca14:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  40ca1b:	ff ff ff 
  40ca1e:	49 89 df             	mov    %rbx,%r15
  40ca21:	48 01 da             	add    %rbx,%rdx
  40ca24:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  40ca29:	ff d2                	callq  *%rdx
	  __n = __n->_M_next();
  40ca2b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  40ca30:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40ca35:	eb d0                	jmp    40ca07 <main+0x2d17>
  40ca37:	48 89 c5             	mov    %rax,%rbp
  40ca3a:	48 b8 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rax
  40ca41:	ff ff ff 
  40ca44:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40ca49:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40ca4e:	48 01 d8             	add    %rbx,%rax
  40ca51:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40ca53:	48 8b bc 24 e0 02 00 	mov    0x2e0(%rsp),%rdi
  40ca5a:	00 
	if (__p)
  40ca5b:	48 85 ff             	test   %rdi,%rdi
  40ca5e:	0f 84 74 fd ff ff    	je     40c7d8 <main+0x2ae8>
  40ca64:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40ca6b:	ff ff ff 
  40ca6e:	49 89 df             	mov    %rbx,%r15
  40ca71:	48 01 d8             	add    %rbx,%rax
  40ca74:	ff d0                	callq  *%rax
  40ca76:	e9 5d fd ff ff       	jmpq   40c7d8 <main+0x2ae8>
      __catch(...)
  40ca7b:	48 89 c7             	mov    %rax,%rdi
  40ca7e:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  40ca85:	ff ff ff 
  40ca88:	49 89 df             	mov    %rbx,%r15
  40ca8b:	48 01 d8             	add    %rbx,%rax
  40ca8e:	ff d0                	callq  *%rax
	  if (__former_buckets)
  40ca90:	4d 85 e4             	test   %r12,%r12
  40ca93:	74 35                	je     40caca <main+0x2dda>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  40ca95:	48 8b 7c 1d 20       	mov    0x20(%rbp,%rbx,1),%rdi
	if (_M_uses_single_bucket(__bkts))
  40ca9a:	48 b8 90 ea 4b 9a 01 	movabs $0x19a4bea90,%rax
  40caa1:	00 00 00 
  40caa4:	48 01 d8             	add    %rbx,%rax
  40caa7:	48 39 c7             	cmp    %rax,%rdi
  40caaa:	74 0f                	je     40cabb <main+0x2dcb>
  40caac:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40cab3:	ff ff ff 
  40cab6:	48 01 d8             	add    %rbx,%rax
  40cab9:	ff d0                	callq  *%rax
    { _M_next_resize = __state; }
  40cabb:	4c 89 74 1d 48       	mov    %r14,0x48(%rbp,%rbx,1)
	      _M_buckets = __former_buckets;
  40cac0:	4c 89 64 1d 20       	mov    %r12,0x20(%rbp,%rbx,1)
	      _M_bucket_count = __former_bucket_count;
  40cac5:	4c 89 6c 1d 28       	mov    %r13,0x28(%rbp,%rbx,1)
	  __builtin_memset(_M_buckets, 0,
  40caca:	48 8b 44 1d 28       	mov    0x28(%rbp,%rbx,1),%rax
  40cacf:	48 8b 7c 1d 20       	mov    0x20(%rbp,%rbx,1),%rdi
  40cad4:	31 f6                	xor    %esi,%esi
  40cad6:	49 89 df             	mov    %rbx,%r15
  40cad9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40cae0:	00 
  40cae1:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  40cae8:	ff ff ff 
  40caeb:	48 01 d8             	add    %rbx,%rax
  40caee:	ff d0                	callq  *%rax
	  __throw_exception_again;
  40caf0:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  40caf7:	ff ff ff 
  40cafa:	48 01 d8             	add    %rbx,%rax
  40cafd:	ff d0                	callq  *%rax
  40caff:	90                   	nop
	this->_M_widen_init();
  40cb00:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40cb07:	ff ff ff 
  40cb0a:	4c 89 e7             	mov    %r12,%rdi
  40cb0d:	49 89 df             	mov    %rbx,%r15
  40cb10:	48 01 d8             	add    %rbx,%rax
  40cb13:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40cb15:	49 8b 04 24          	mov    (%r12),%rax
  40cb19:	be 0a 00 00 00       	mov    $0xa,%esi
  40cb1e:	48 8b 40 30          	mov    0x30(%rax),%rax
  40cb22:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  40cb27:	0f 84 fa ef ff ff    	je     40bb27 <main+0x1e37>
  40cb2d:	4c 89 e7             	mov    %r12,%rdi
  40cb30:	ff d0                	callq  *%rax
  40cb32:	0f be f0             	movsbl %al,%esi
  40cb35:	e9 ed ef ff ff       	jmpq   40bb27 <main+0x1e37>
	this->_M_widen_init();
  40cb3a:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40cb41:	ff ff ff 
  40cb44:	4c 89 e7             	mov    %r12,%rdi
  40cb47:	49 89 df             	mov    %rbx,%r15
  40cb4a:	48 01 d8             	add    %rbx,%rax
  40cb4d:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40cb4f:	49 8b 04 24          	mov    (%r12),%rax
  40cb53:	be 0a 00 00 00       	mov    $0xa,%esi
  40cb58:	48 8b 40 30          	mov    0x30(%rax),%rax
  40cb5c:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  40cb61:	0f 84 4b ef ff ff    	je     40bab2 <main+0x1dc2>
  40cb67:	4c 89 e7             	mov    %r12,%rdi
  40cb6a:	ff d0                	callq  *%rax
  40cb6c:	0f be f0             	movsbl %al,%esi
  40cb6f:	e9 3e ef ff ff       	jmpq   40bab2 <main+0x1dc2>
    for (size_t a = 0; a < ROBOT_NUMS; ++a) {
  40cb74:	48 83 44 24 58 01    	addq   $0x1,0x58(%rsp)
  40cb7a:	48 81 44 24 38 50 06 	addq   $0x650,0x38(%rsp)
  40cb81:	00 00 
  40cb83:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  40cb88:	48 83 f8 14          	cmp    $0x14,%rax
  40cb8c:	0f 85 e9 ed ff ff    	jne    40b97b <main+0x1c8b>
    std::ofstream out(outputFile);
  40cb92:	48 b8 f0 e8 dd ff ff 	movabs $0xffffffffffdde8f0,%rax
  40cb99:	ff ff ff 
  40cb9c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40cba1:	49 89 df             	mov    %rbx,%r15
  40cba4:	48 01 d8             	add    %rbx,%rax
  40cba7:	ff d0                	callq  *%rax
  40cba9:	48 8b bc 24 70 01 00 	mov    0x170(%rsp),%rdi
  40cbb0:	00 
  40cbb1:	48 85 ff             	test   %rdi,%rdi
  40cbb4:	74 0f                	je     40cbc5 <main+0x2ed5>
  40cbb6:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40cbbd:	ff ff ff 
  40cbc0:	48 01 d8             	add    %rbx,%rax
  40cbc3:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40cbc5:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
  40cbcc:	00 
	if (__p)
  40cbcd:	48 85 ff             	test   %rdi,%rdi
  40cbd0:	74 12                	je     40cbe4 <main+0x2ef4>
  40cbd2:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40cbd9:	ff ff ff 
  40cbdc:	49 89 df             	mov    %rbx,%r15
  40cbdf:	48 01 d8             	add    %rbx,%rax
  40cbe2:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  40cbe4:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
  40cbeb:	00 
	if (__p)
  40cbec:	48 85 ff             	test   %rdi,%rdi
  40cbef:	74 12                	je     40cc03 <main+0x2f13>
  40cbf1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40cbf8:	ff ff ff 
  40cbfb:	49 89 df             	mov    %rbx,%r15
  40cbfe:	48 01 d8             	add    %rbx,%rax
  40cc01:	ff d0                	callq  *%rax
  40cc03:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  40cc08:	48 8b 3c 24          	mov    (%rsp),%rdi
  40cc0c:	48 01 d8             	add    %rbx,%rax
  40cc0f:	ff d0                	callq  *%rax
  40cc11:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
  40cc18:	00 
  40cc19:	48 85 ff             	test   %rdi,%rdi
  40cc1c:	74 0f                	je     40cc2d <main+0x2f3d>
  40cc1e:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40cc25:	ff ff ff 
  40cc28:	48 01 d8             	add    %rbx,%rax
  40cc2b:	ff d0                	callq  *%rax
  return 0;
  40cc2d:	31 ed                	xor    %ebp,%ebp
  40cc2f:	e9 dc e3 ff ff       	jmpq   40b010 <main+0x1320>
	__throw_bad_cast();
  40cc34:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40cc3b:	ff ff ff 
  40cc3e:	48 01 d8             	add    %rbx,%rax
  40cc41:	ff d0                	callq  *%rax
  40cc43:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40cc4a:	ff ff ff 
  40cc4d:	48 01 d8             	add    %rbx,%rax
  40cc50:	ff d0                	callq  *%rax
  40cc52:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40cc59:	ff ff ff 
  40cc5c:	48 01 d8             	add    %rbx,%rax
  40cc5f:	ff d0                	callq  *%rax
  40cc61:	48 89 c5             	mov    %rax,%rbp
    std::ofstream out(outputFile);
  40cc64:	48 b8 f0 e8 dd ff ff 	movabs $0xffffffffffdde8f0,%rax
  40cc6b:	ff ff ff 
  40cc6e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40cc73:	49 89 df             	mov    %rbx,%r15
  40cc76:	48 01 d8             	add    %rbx,%rax
  40cc79:	ff d0                	callq  *%rax
  40cc7b:	e9 58 fb ff ff       	jmpq   40c7d8 <main+0x2ae8>
	__ostream_insert(__out, __s,
  40cc80:	48 b8 a6 7f df ff ff 	movabs $0xffffffffffdf7fa6,%rax
  40cc87:	ff ff ff 
  40cc8a:	ba 18 00 00 00       	mov    $0x18,%edx
  40cc8f:	49 89 df             	mov    %rbx,%r15
  40cc92:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40cc96:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  40cc9d:	ff ff ff 
  40cca0:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  40cca4:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40ccab:	ff ff ff 
  40ccae:	48 01 d8             	add    %rbx,%rax
  40ccb1:	ff d0                	callq  *%rax
	return __pf(*this);
  40ccb3:	48 b8 80 30 de ff ff 	movabs $0xffffffffffde3080,%rax
  40ccba:	ff ff ff 
  40ccbd:	48 01 d8             	add    %rbx,%rax
  40ccc0:	ff d0                	callq  *%rax
  40ccc2:	e9 e2 fe ff ff       	jmpq   40cba9 <main+0x2eb9>
  40ccc7:	48 89 c5             	mov    %rax,%rbp
      __catch(...)
  40ccca:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  40ccd1:	ff ff ff 
  40ccd4:	49 89 df             	mov    %rbx,%r15
  40ccd7:	48 01 d8             	add    %rbx,%rax
  40ccda:	ff d0                	callq  *%rax
  40ccdc:	e9 59 fd ff ff       	jmpq   40ca3a <main+0x2d4a>
	    return &_M_single_bucket;
  40cce1:	48 b8 90 ea 4b 9a 01 	movabs $0x19a4bea90,%rax
  40cce8:	00 00 00 
	    _M_single_bucket = nullptr;
  40cceb:	48 c7 44 1d 50 00 00 	movq   $0x0,0x50(%rbp,%rbx,1)
  40ccf2:	00 00 
	    return &_M_single_bucket;
  40ccf4:	48 01 d8             	add    %rbx,%rax
  40ccf7:	e9 ac e7 ff ff       	jmpq   40b4a8 <main+0x17b8>
	__builtin_memset(_M_buckets, 0,
  40ccfc:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  40cd03:	ff ff ff 
  40cd06:	4a 8d 14 ed 00 00 00 	lea    0x0(,%r13,8),%rdx
  40cd0d:	00 
  40cd0e:	48 8b 7c 1d 20       	mov    0x20(%rbp,%rbx,1),%rdi
  40cd13:	31 f6                	xor    %esi,%esi
  40cd15:	49 89 df             	mov    %rbx,%r15
  40cd18:	48 01 d8             	add    %rbx,%rax
      __bucket_type* __former_buckets = nullptr;
  40cd1b:	45 31 e4             	xor    %r12d,%r12d
	__builtin_memset(_M_buckets, 0,
  40cd1e:	ff d0                	callq  *%rax
  40cd20:	e9 8d e7 ff ff       	jmpq   40b4b2 <main+0x17c2>
  40cd25:	48 89 c5             	mov    %rax,%rbp
  40cd28:	48 b8 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rax
  40cd2f:	ff ff ff 
  40cd32:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40cd37:	e9 17 fd ff ff       	jmpq   40ca53 <main+0x2d63>
	  std::__throw_bad_alloc();
  40cd3c:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  40cd43:	ff ff ff 
  40cd46:	48 be 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rsi
  40cd4d:	ff ff ff 
  40cd50:	49 89 df             	mov    %rbx,%r15
  40cd53:	48 01 d8             	add    %rbx,%rax
  40cd56:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
  40cd5b:	ff d0                	callq  *%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  40cd5d:	31 c0                	xor    %eax,%eax
  40cd5f:	e9 fb e5 ff ff       	jmpq   40b35f <main+0x166f>
  40cd64:	49 89 c5             	mov    %rax,%r13
  40cd67:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  40cd6e:	ff ff ff 
  40cd71:	48 89 ef             	mov    %rbp,%rdi
  40cd74:	49 89 df             	mov    %rbx,%r15
  40cd77:	48 01 d8             	add    %rbx,%rax
  40cd7a:	4c 89 ed             	mov    %r13,%rbp
  40cd7d:	ff d0                	callq  *%rax
  40cd7f:	e9 e4 fa ff ff       	jmpq   40c868 <main+0x2b78>
  40cd84:	48 89 c5             	mov    %rax,%rbp
  40cd87:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40cd8c:	48 8b bc 24 b0 04 00 	mov    0x4b0(%rsp),%rdi
  40cd93:	00 
  40cd94:	48 83 c0 10          	add    $0x10,%rax
  40cd98:	48 39 c7             	cmp    %rax,%rdi
  40cd9b:	0f 84 47 f9 ff ff    	je     40c6e8 <main+0x29f8>
      { ::operator delete(__p); }
  40cda1:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  40cda8:	ff ff ff 
  40cdab:	49 89 df             	mov    %rbx,%r15
  40cdae:	48 01 da             	add    %rbx,%rdx
  40cdb1:	ff d2                	callq  *%rdx
  40cdb3:	e9 30 f9 ff ff       	jmpq   40c6e8 <main+0x29f8>
  40cdb8:	48 89 c5             	mov    %rax,%rbp
  40cdbb:	48 8b bc 24 c0 03 00 	mov    0x3c0(%rsp),%rdi
  40cdc2:	00 
  40cdc3:	48 85 ff             	test   %rdi,%rdi
  40cdc6:	74 0f                	je     40cdd7 <main+0x30e7>
  40cdc8:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40cdcf:	ff ff ff 
  40cdd2:	48 01 d8             	add    %rbx,%rax
  40cdd5:	ff d0                	callq  *%rax
  40cdd7:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40cdde:	00 
  40cddf:	48 85 ff             	test   %rdi,%rdi
  40cde2:	74 0f                	je     40cdf3 <main+0x3103>
  40cde4:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40cdeb:	ff ff ff 
  40cdee:	48 01 d8             	add    %rbx,%rax
  40cdf1:	ff d0                	callq  *%rax
  for (const auto& node : config["map"]["obstacles"]) {
  40cdf3:	48 b8 b0 b9 de ff ff 	movabs $0xffffffffffdeb9b0,%rax
  40cdfa:	ff ff ff 
  40cdfd:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40ce02:	48 01 d8             	add    %rbx,%rax
  40ce05:	ff d0                	callq  *%rax
  40ce07:	48 8b bc 24 d8 02 00 	mov    0x2d8(%rsp),%rdi
  40ce0e:	00 
  40ce0f:	48 85 ff             	test   %rdi,%rdi
  40ce12:	74 0f                	je     40ce23 <main+0x3133>
  40ce14:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40ce1b:	ff ff ff 
  40ce1e:	48 01 d8             	add    %rbx,%rax
  40ce21:	ff d0                	callq  *%rax
  40ce23:	48 8b bc 24 a8 02 00 	mov    0x2a8(%rsp),%rdi
  40ce2a:	00 
  40ce2b:	48 85 ff             	test   %rdi,%rdi
  40ce2e:	74 0f                	je     40ce3f <main+0x314f>
  40ce30:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40ce37:	ff ff ff 
  40ce3a:	48 01 d8             	add    %rbx,%rax
  40ce3d:	ff d0                	callq  *%rax
  40ce3f:	48 8b bc 24 90 01 00 	mov    0x190(%rsp),%rdi
  40ce46:	00 
  40ce47:	48 85 ff             	test   %rdi,%rdi
  40ce4a:	0f 84 79 f9 ff ff    	je     40c7c9 <main+0x2ad9>
  40ce50:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40ce57:	ff ff ff 
  40ce5a:	48 01 d8             	add    %rbx,%rax
  40ce5d:	ff d0                	callq  *%rax
  40ce5f:	e9 65 f9 ff ff       	jmpq   40c7c9 <main+0x2ad9>
  40ce64:	48 89 c5             	mov    %rax,%rbp
  40ce67:	e9 6b ff ff ff       	jmpq   40cdd7 <main+0x30e7>
  40ce6c:	4d 85 e4             	test   %r12,%r12
  40ce6f:	48 89 c5             	mov    %rax,%rbp
  40ce72:	74 1a                	je     40ce8e <main+0x319e>
  40ce74:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40ce7b:	ff ff ff 
  40ce7e:	4c 89 e7             	mov    %r12,%rdi
  40ce81:	4d 8d 2c 1f          	lea    (%r15,%rbx,1),%r13
  40ce85:	41 ff d5             	callq  *%r13
  40ce88:	4c 89 e7             	mov    %r12,%rdi
  40ce8b:	41 ff d5             	callq  *%r13
  40ce8e:	48 8b bc 24 60 02 00 	mov    0x260(%rsp),%rdi
  40ce95:	00 
  40ce96:	49 83 c6 10          	add    $0x10,%r14
  40ce9a:	4c 39 f7             	cmp    %r14,%rdi
  40ce9d:	74 12                	je     40ceb1 <main+0x31c1>
  40ce9f:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40cea6:	ff ff ff 
  40cea9:	49 89 df             	mov    %rbx,%r15
  40ceac:	48 01 d8             	add    %rbx,%rax
  40ceaf:	ff d0                	callq  *%rax
  40ceb1:	4d 85 e4             	test   %r12,%r12
  40ceb4:	0f 84 ae f9 ff ff    	je     40c868 <main+0x2b78>
  40ceba:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40cec1:	ff ff ff 
  40cec4:	4c 89 e7             	mov    %r12,%rdi
  40cec7:	48 01 d8             	add    %rbx,%rax
  40ceca:	ff d0                	callq  *%rax
  40cecc:	e9 97 f9 ff ff       	jmpq   40c868 <main+0x2b78>
  40ced1:	4c 89 e7             	mov    %r12,%rdi
  40ced4:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
  return false;
  40ced9:	31 ed                	xor    %ebp,%ebp
  40cedb:	41 ff d7             	callq  *%r15
  40cede:	4c 89 e7             	mov    %r12,%rdi
  40cee1:	41 ff d7             	callq  *%r15
  40cee4:	e9 44 f5 ff ff       	jmpq   40c42d <main+0x273d>
  40cee9:	48 89 c5             	mov    %rax,%rbp
  40ceec:	e9 02 ff ff ff       	jmpq   40cdf3 <main+0x3103>
  40cef1:	48 89 c5             	mov    %rax,%rbp
  40cef4:	e9 2a ff ff ff       	jmpq   40ce23 <main+0x3133>
  40cef9:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40cf00:	00 
  40cf01:	48 89 c5             	mov    %rax,%rbp
  40cf04:	48 85 ff             	test   %rdi,%rdi
  40cf07:	0f 84 bc f8 ff ff    	je     40c7c9 <main+0x2ad9>
  40cf0d:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40cf14:	ff ff ff 
  40cf17:	48 01 d8             	add    %rbx,%rax
  40cf1a:	ff d0                	callq  *%rax
  40cf1c:	e9 a8 f8 ff ff       	jmpq   40c7c9 <main+0x2ad9>
      ~basic_ios() { }
  40cf21:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40cf28:	ff ff ff 
  40cf2b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40cf30:	49 89 df             	mov    %rbx,%r15
  40cf33:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40cf37:	48 83 c7 70          	add    $0x70,%rdi
  40cf3b:	48 83 c0 10          	add    $0x10,%rax
  40cf3f:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40cf46:	00 
  40cf47:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  40cf4e:	ff ff ff 
  40cf51:	48 01 d8             	add    %rbx,%rax
  40cf54:	ff d0                	callq  *%rax
            lexical_istream_limited_src() BOOST_NOEXCEPT
  40cf56:	48 b8 30 e4 dd ff ff 	movabs $0xffffffffffdde430,%rax
  40cf5d:	ff ff ff 
  40cf60:	48 01 d8             	add    %rbx,%rax
  40cf63:	ff d0                	callq  *%rax
  40cf65:	48 83 ea 01          	sub    $0x1,%rdx
  40cf69:	0f 85 2a 01 00 00    	jne    40d099 <main+0x33a9>
  } catch (po::error& e) {
  40cf6f:	48 89 c7             	mov    %rax,%rdi
  40cf72:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  40cf79:	ff ff ff 
  40cf7c:	49 89 df             	mov    %rbx,%r15
  40cf7f:	48 01 d8             	add    %rbx,%rax
    std::cerr << e.what() << std::endl << std::endl;
  40cf82:	48 bd e8 ff ff ff ff 	movabs $0xffffffffffffffe8,%rbp
  40cf89:	ff ff ff 
  } catch (po::error& e) {
  40cf8c:	ff d0                	callq  *%rax
    std::cerr << e.what() << std::endl << std::endl;
  40cf8e:	48 8b 10             	mov    (%rax),%rdx
  40cf91:	48 89 c7             	mov    %rax,%rdi
  40cf94:	ff 52 10             	callq  *0x10(%rdx)
  40cf97:	48 89 c6             	mov    %rax,%rsi
  40cf9a:	48 b8 30 e7 dd ff ff 	movabs $0xffffffffffdde730,%rax
  40cfa1:	ff ff ff 
  40cfa4:	48 8b 7c 1d 00       	mov    0x0(%rbp,%rbx,1),%rdi
  40cfa9:	48 01 d8             	add    %rbx,%rax
  40cfac:	ff d0                	callq  *%rax
  40cfae:	48 89 c7             	mov    %rax,%rdi
  40cfb1:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  40cfb8:	ff ff ff 
  40cfbb:	49 89 c6             	mov    %rax,%r14
  40cfbe:	48 01 d8             	add    %rbx,%rax
  40cfc1:	ff d0                	callq  *%rax
  40cfc3:	48 89 c7             	mov    %rax,%rdi
  40cfc6:	4c 89 f0             	mov    %r14,%rax
  40cfc9:	48 01 d8             	add    %rbx,%rax
  40cfcc:	ff d0                	callq  *%rax
    std::cerr << desc << std::endl;
  40cfce:	48 b8 00 e4 dd ff ff 	movabs $0xffffffffffdde400,%rax
  40cfd5:	ff ff ff 
  40cfd8:	48 8b 74 24 60       	mov    0x60(%rsp),%rsi
  40cfdd:	48 8b 7c 1d 00       	mov    0x0(%rbp,%rbx,1),%rdi
  40cfe2:	48 01 d8             	add    %rbx,%rax
  40cfe5:	ff d0                	callq  *%rax
  40cfe7:	48 89 c7             	mov    %rax,%rdi
  40cfea:	4c 89 f0             	mov    %r14,%rax
  40cfed:	48 01 d8             	add    %rbx,%rax
  40cff0:	ff d0                	callq  *%rax
  } catch (po::error& e) {
  40cff2:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  40cff9:	ff ff ff 
    return 1;
  40cffc:	bd 01 00 00 00       	mov    $0x1,%ebp
  } catch (po::error& e) {
  40d001:	48 01 d8             	add    %rbx,%rax
  40d004:	ff d0                	callq  *%rax
  40d006:	e9 05 e0 ff ff       	jmpq   40b010 <main+0x1320>
  40d00b:	48 89 c5             	mov    %rax,%rbp
      ~basic_ostream() { }
  40d00e:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40d012:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40d017:	49 89 df             	mov    %rbx,%r15
  40d01a:	48 83 c0 18          	add    $0x18,%rax
  40d01e:	49 8d 7e 70          	lea    0x70(%r14),%rdi
  40d022:	48 89 84 24 18 05 00 	mov    %rax,0x518(%rsp)
  40d029:	00 
  40d02a:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  40d031:	ff ff ff 
  40d034:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  40d038:	48 83 c0 10          	add    $0x10,%rax
  40d03c:	48 89 84 24 20 05 00 	mov    %rax,0x520(%rsp)
  40d043:	00 
  40d044:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  40d04b:	ff ff ff 
  40d04e:	48 01 d8             	add    %rbx,%rax
  40d051:	ff d0                	callq  *%rax
  40d053:	48 b8 50 fc ff ff ff 	movabs $0xfffffffffffffc50,%rax
  40d05a:	ff ff ff 
  40d05d:	4c 89 f7             	mov    %r14,%rdi
  40d060:	48 01 d8             	add    %rbx,%rax
  40d063:	48 89 84 24 b0 04 00 	mov    %rax,0x4b0(%rsp)
  40d06a:	00 
  40d06b:	48 b8 c0 ba de ff ff 	movabs $0xffffffffffdebac0,%rax
  40d072:	ff ff ff 
  40d075:	48 01 d8             	add    %rbx,%rax
  40d078:	ff d0                	callq  *%rax
  40d07a:	e9 dd f5 ff ff       	jmpq   40c65c <main+0x296c>
  40d07f:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  40d086:	ff ff ff 
  40d089:	48 89 c5             	mov    %rax,%rbp
  40d08c:	49 89 df             	mov    %rbx,%r15
  40d08f:	48 01 da             	add    %rbx,%rdx
  40d092:	ff d2                	callq  *%rdx
  40d094:	e9 eb f5 ff ff       	jmpq   40c684 <main+0x2994>
  40d099:	48 89 c5             	mov    %rax,%rbp
  40d09c:	e9 e3 f5 ff ff       	jmpq   40c684 <main+0x2994>
  40d0a1:	48 89 c5             	mov    %rax,%rbp
  40d0a4:	e9 96 fd ff ff       	jmpq   40ce3f <main+0x314f>
  40d0a9:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40d0b0:	00 
  40d0b1:	48 89 c5             	mov    %rax,%rbp
  40d0b4:	48 85 ff             	test   %rdi,%rdi
  40d0b7:	0f 84 0c f7 ff ff    	je     40c7c9 <main+0x2ad9>
  40d0bd:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40d0c4:	ff ff ff 
  40d0c7:	48 01 d8             	add    %rbx,%rax
  40d0ca:	ff d0                	callq  *%rax
  40d0cc:	e9 f8 f6 ff ff       	jmpq   40c7c9 <main+0x2ad9>
  40d0d1:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40d0d8:	00 
  40d0d9:	48 89 c5             	mov    %rax,%rbp
  40d0dc:	48 85 ff             	test   %rdi,%rdi
  40d0df:	0f 84 e4 f6 ff ff    	je     40c7c9 <main+0x2ad9>
  40d0e5:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40d0ec:	ff ff ff 
  40d0ef:	48 01 d8             	add    %rbx,%rax
  40d0f2:	ff d0                	callq  *%rax
  40d0f4:	e9 d0 f6 ff ff       	jmpq   40c7c9 <main+0x2ad9>
  40d0f9:	48 89 c5             	mov    %rax,%rbp
  40d0fc:	e9 d7 f6 ff ff       	jmpq   40c7d8 <main+0x2ae8>
  40d101:	48 89 c5             	mov    %rax,%rbp
  40d104:	e9 a4 f6 ff ff       	jmpq   40c7ad <main+0x2abd>
  40d109:	48 89 c5             	mov    %rax,%rbp
  40d10c:	e9 80 f6 ff ff       	jmpq   40c791 <main+0x2aa1>
    throw InvalidNode();
  40d111:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  40d118:	ff ff ff 
  40d11b:	bf 40 00 00 00       	mov    $0x40,%edi
  40d120:	49 89 df             	mov    %rbx,%r15
  40d123:	48 01 d8             	add    %rbx,%rax
  40d126:	ff d0                	callq  *%rax
  40d128:	48 89 c5             	mov    %rax,%rbp
  40d12b:	48 89 c7             	mov    %rax,%rdi
  40d12e:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  40d135:	ff ff ff 
  40d138:	48 01 d8             	add    %rbx,%rax
  40d13b:	ff d0                	callq  *%rax
  40d13d:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  40d144:	ff ff ff 
  40d147:	48 89 ef             	mov    %rbp,%rdi
  40d14a:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40d14e:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  40d155:	ff ff ff 
  40d158:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40d15c:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  40d163:	ff ff ff 
  40d166:	48 01 d8             	add    %rbx,%rax
  40d169:	ff d0                	callq  *%rax
  40d16b:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  40d172:	ff ff ff 
  40d175:	bf 40 00 00 00       	mov    $0x40,%edi
  40d17a:	49 89 df             	mov    %rbx,%r15
  40d17d:	48 01 d8             	add    %rbx,%rax
  40d180:	ff d0                	callq  *%rax
  40d182:	48 89 c5             	mov    %rax,%rbp
  40d185:	48 89 c7             	mov    %rax,%rdi
  40d188:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  40d18f:	ff ff ff 
  40d192:	48 01 d8             	add    %rbx,%rax
  40d195:	ff d0                	callq  *%rax
  40d197:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  40d19e:	ff ff ff 
  40d1a1:	48 89 ef             	mov    %rbp,%rdi
  40d1a4:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  40d1a8:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  40d1af:	ff ff ff 
  40d1b2:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40d1b6:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  40d1bd:	ff ff ff 
  40d1c0:	48 01 d8             	add    %rbx,%rax
  40d1c3:	ff d0                	callq  *%rax
  40d1c5:	49 89 c4             	mov    %rax,%r12
  40d1c8:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  40d1cf:	ff ff ff 
  40d1d2:	48 89 ef             	mov    %rbp,%rdi
  40d1d5:	49 89 df             	mov    %rbx,%r15
  40d1d8:	48 01 d8             	add    %rbx,%rax
  40d1db:	4c 89 e5             	mov    %r12,%rbp
  40d1de:	ff d0                	callq  *%rax
  40d1e0:	e9 7c f5 ff ff       	jmpq   40c761 <main+0x2a71>
  40d1e5:	49 89 c4             	mov    %rax,%r12
  40d1e8:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  40d1ef:	ff ff ff 
  40d1f2:	48 89 ef             	mov    %rbp,%rdi
  40d1f5:	49 89 df             	mov    %rbx,%r15
  40d1f8:	48 01 d8             	add    %rbx,%rax
  40d1fb:	4c 89 e5             	mov    %r12,%rbp
  40d1fe:	ff d0                	callq  *%rax
  40d200:	e9 c1 f6 ff ff       	jmpq   40c8c6 <main+0x2bd6>
  40d205:	48 89 c5             	mov    %rax,%rbp
  40d208:	e9 b9 f6 ff ff       	jmpq   40c8c6 <main+0x2bd6>
  40d20d:	4c 89 e7             	mov    %r12,%rdi
  40d210:	31 ed                	xor    %ebp,%ebp
  40d212:	41 ff d6             	callq  *%r14
  40d215:	4c 89 e7             	mov    %r12,%rdi
  40d218:	41 ff d6             	callq  *%r14
  40d21b:	48 8b 8c 24 20 02 00 	mov    0x220(%rsp),%rcx
  40d222:	00 
  40d223:	e9 54 ea ff ff       	jmpq   40bc7c <main+0x1f8c>
  40d228:	48 89 c5             	mov    %rax,%rbp
  40d22b:	e9 9d f7 ff ff       	jmpq   40c9cd <main+0x2cdd>
  40d230:	48 89 c5             	mov    %rax,%rbp
  40d233:	e9 29 f5 ff ff       	jmpq   40c761 <main+0x2a71>
  40d238:	48 89 c5             	mov    %rax,%rbp
  40d23b:	e9 0a f5 ff ff       	jmpq   40c74a <main+0x2a5a>
  40d240:	48 b8 8c eb dd ff ff 	movabs $0xffffffffffddeb8c,%rax
  40d247:	ff ff ff 
  40d24a:	48 01 d8             	add    %rbx,%rax
  40d24d:	ff d0                	callq  *%rax
  40d24f:	49 89 c4             	mov    %rax,%r12
  40d252:	48 89 d5             	mov    %rdx,%rbp
    po::variables_map vm;
  40d255:	48 b8 60 4e df ff ff 	movabs $0xffffffffffdf4e60,%rax
  40d25c:	ff ff ff 
  40d25f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40d264:	48 01 d8             	add    %rbx,%rax
  40d267:	ff d0                	callq  *%rax
  40d269:	4c 89 e0             	mov    %r12,%rax
  40d26c:	48 89 ea             	mov    %rbp,%rdx
  40d26f:	e9 f1 fc ff ff       	jmpq   40cf65 <main+0x3275>
  40d274:	49 89 c4             	mov    %rax,%r12
  40d277:	48 b8 80 c2 de ff ff 	movabs $0xffffffffffdec280,%rax
  40d27e:	ff ff ff 
  40d281:	48 89 d5             	mov    %rdx,%rbp
  40d284:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  40d289:	48 01 d8             	add    %rbx,%rax
  40d28c:	ff d0                	callq  *%rax
      if (vtable) {
  40d28e:	48 8b 84 24 10 03 00 	mov    0x310(%rsp),%rax
  40d295:	00 
  40d296:	48 85 c0             	test   %rax,%rax
  40d299:	74 ba                	je     40d255 <main+0x3565>
        if (!this->has_trivial_copy_and_destroy())
  40d29b:	a8 01                	test   $0x1,%al
  40d29d:	75 b6                	jne    40d255 <main+0x3565>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40d29f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  40d2a3:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  40d2a6:	48 85 c0             	test   %rax,%rax
  40d2a9:	74 aa                	je     40d255 <main+0x3565>
            base.manager(functor, functor, destroy_functor_tag);
  40d2ab:	48 8d bc 24 18 03 00 	lea    0x318(%rsp),%rdi
  40d2b2:	00 
  40d2b3:	ba 02 00 00 00       	mov    $0x2,%edx
  40d2b8:	48 89 fe             	mov    %rdi,%rsi
  40d2bb:	ff d0                	callq  *%rax
  40d2bd:	eb 96                	jmp    40d255 <main+0x3565>
  40d2bf:	48 8b bc 24 c0 04 00 	mov    0x4c0(%rsp),%rdi
  40d2c6:	00 
  40d2c7:	48 89 c5             	mov    %rax,%rbp
  40d2ca:	48 85 ff             	test   %rdi,%rdi
  40d2cd:	74 0f                	je     40d2de <main+0x35ee>
  40d2cf:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40d2d6:	ff ff ff 
  40d2d9:	48 01 d8             	add    %rbx,%rax
  40d2dc:	ff d0                	callq  *%rax
  40d2de:	48 b8 90 bd de ff ff 	movabs $0xffffffffffdebd90,%rax
  40d2e5:	ff ff ff 
  40d2e8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40d2ed:	e9 02 f5 ff ff       	jmpq   40c7f4 <main+0x2b04>
  40d2f2:	49 89 c4             	mov    %rax,%r12
    class basic_command_line_parser : private detail::cmdline {
  40d2f5:	48 b8 f0 c1 de ff ff 	movabs $0xffffffffffdec1f0,%rax
  40d2fc:	ff ff ff 
  40d2ff:	48 89 d5             	mov    %rdx,%rbp
  40d302:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  40d307:	48 01 d8             	add    %rbx,%rax
  40d30a:	ff d0                	callq  *%rax
      if (vtable) {
  40d30c:	48 8b 94 24 e0 02 00 	mov    0x2e0(%rsp),%rdx
  40d313:	00 
  40d314:	48 85 d2             	test   %rdx,%rdx
  40d317:	0f 84 71 ff ff ff    	je     40d28e <main+0x359e>
        if (!this->has_trivial_copy_and_destroy())
  40d31d:	f6 c2 01             	test   $0x1,%dl
  40d320:	0f 85 68 ff ff ff    	jne    40d28e <main+0x359e>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  40d326:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
  40d32a:	48 8b 02             	mov    (%rdx),%rax
          if (base.manager)
  40d32d:	48 85 c0             	test   %rax,%rax
  40d330:	0f 84 58 ff ff ff    	je     40d28e <main+0x359e>
            base.manager(functor, functor, destroy_functor_tag);
  40d336:	48 8d bc 24 e8 02 00 	lea    0x2e8(%rsp),%rdi
  40d33d:	00 
  40d33e:	ba 02 00 00 00       	mov    $0x2,%edx
  40d343:	48 89 fe             	mov    %rdi,%rsi
  40d346:	ff d0                	callq  *%rax
  40d348:	e9 41 ff ff ff       	jmpq   40d28e <main+0x359e>
  40d34d:	49 89 c4             	mov    %rax,%r12
  40d350:	48 89 d5             	mov    %rdx,%rbp
  40d353:	eb b7                	jmp    40d30c <main+0x361c>
	  return iterator(__node);
	}
      __catch(...)
  40d355:	48 89 c7             	mov    %rax,%rdi
  40d358:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  40d35f:	ff ff ff 
  40d362:	49 89 df             	mov    %rbx,%r15
  40d365:	48 01 d8             	add    %rbx,%rax
  40d368:	ff d0                	callq  *%rax
  40d36a:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40d371:	ff ff ff 
  40d374:	48 89 ef             	mov    %rbp,%rdi
  40d377:	48 01 d8             	add    %rbx,%rax
  40d37a:	ff d0                	callq  *%rax
	{
	  this->_M_deallocate_node(__node);
	  __throw_exception_again;
  40d37c:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  40d383:	ff ff ff 
  40d386:	48 01 d8             	add    %rbx,%rax
  40d389:	ff d0                	callq  *%rax
  40d38b:	48 89 c5             	mov    %rax,%rbp
  40d38e:	e9 4b ff ff ff       	jmpq   40d2de <main+0x35ee>
  40d393:	48 89 c5             	mov    %rax,%rbp
      __catch(...)
  40d396:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  40d39d:	ff ff ff 
  40d3a0:	49 89 df             	mov    %rbx,%r15
  40d3a3:	48 01 d8             	add    %rbx,%rax
  40d3a6:	ff d0                	callq  *%rax
  40d3a8:	e9 0e fa ff ff       	jmpq   40cdbb <main+0x30cb>
  40d3ad:	48 89 c5             	mov    %rax,%rbp
  40d3b0:	48 8b bc 24 c0 02 00 	mov    0x2c0(%rsp),%rdi
  40d3b7:	00 
  40d3b8:	48 85 ff             	test   %rdi,%rdi
  40d3bb:	0f 84 0c f6 ff ff    	je     40c9cd <main+0x2cdd>
  40d3c1:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40d3c8:	ff ff ff 
  40d3cb:	48 01 d8             	add    %rbx,%rax
  40d3ce:	ff d0                	callq  *%rax
  40d3d0:	e9 f8 f5 ff ff       	jmpq   40c9cd <main+0x2cdd>
  40d3d5:	48 8b bc 24 90 02 00 	mov    0x290(%rsp),%rdi
  40d3dc:	00 
  40d3dd:	48 89 c5             	mov    %rax,%rbp
  40d3e0:	48 85 ff             	test   %rdi,%rdi
  40d3e3:	74 cb                	je     40d3b0 <main+0x36c0>
  40d3e5:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40d3ec:	ff ff ff 
  40d3ef:	48 01 d8             	add    %rbx,%rax
  40d3f2:	ff d0                	callq  *%rax
  40d3f4:	eb ba                	jmp    40d3b0 <main+0x36c0>
  40d3f6:	4d 85 e4             	test   %r12,%r12
  40d3f9:	48 89 c5             	mov    %rax,%rbp
  40d3fc:	74 1a                	je     40d418 <main+0x3728>
  40d3fe:	49 bf c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r15
  40d405:	ff ff ff 
  40d408:	4c 89 e7             	mov    %r12,%rdi
  40d40b:	4d 8d 2c 1f          	lea    (%r15,%rbx,1),%r13
  40d40f:	41 ff d5             	callq  *%r13
  40d412:	4c 89 e7             	mov    %r12,%rdi
  40d415:	41 ff d5             	callq  *%r13
  40d418:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40d41f:	00 
  40d420:	48 8b bc 24 20 02 00 	mov    0x220(%rsp),%rdi
  40d427:	00 
  40d428:	48 83 c0 10          	add    $0x10,%rax
  40d42c:	48 39 c7             	cmp    %rax,%rdi
  40d42f:	74 12                	je     40d443 <main+0x3753>
  40d431:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40d438:	ff ff ff 
  40d43b:	49 89 df             	mov    %rbx,%r15
  40d43e:	48 01 d8             	add    %rbx,%rax
  40d441:	ff d0                	callq  *%rax
  40d443:	4d 85 e4             	test   %r12,%r12
  40d446:	0f 84 b4 f2 ff ff    	je     40c700 <main+0x2a10>
  40d44c:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  40d453:	ff ff ff 
  40d456:	4c 89 e7             	mov    %r12,%rdi
  40d459:	48 01 d8             	add    %rbx,%rax
  40d45c:	ff d0                	callq  *%rax
  40d45e:	e9 9d f2 ff ff       	jmpq   40c700 <main+0x2a10>
  40d463:	0f 1f 00             	nopl   (%rax)
  40d466:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40d46d:	00 00 00 

000000000040d470 <_GLOBAL__sub_I__ZlsRSoRK6Action>:
}
  40d470:	41 57                	push   %r15
  40d472:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40d470 <_GLOBAL__sub_I__ZlsRSoRK6Action>
  40d479:	41 54                	push   %r12
  40d47b:	49 bb 90 db 21 00 00 	movabs $0x21db90,%r11
  40d482:	00 00 00 
  40d485:	55                   	push   %rbp
  40d486:	53                   	push   %rbx
  40d487:	4d 01 df             	add    %r11,%r15
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
  40d48a:	48 bb 58 69 4c 9a 01 	movabs $0x19a4c6958,%rbx
  40d491:	00 00 00 
  40d494:	48 b8 00 e9 dd ff ff 	movabs $0xffffffffffdde900,%rax
  40d49b:	ff ff ff 
  40d49e:	48 83 ec 08          	sub    $0x8,%rsp
  40d4a2:	49 8d 3c 1f          	lea    (%r15,%rbx,1),%rdi
  40d4a6:	4c 01 f8             	add    %r15,%rax
  40d4a9:	48 bd d0 03 00 00 00 	movabs $0x3d0,%rbp
  40d4b0:	00 00 00 
  40d4b3:	ff d0                	callq  *%rax
  40d4b5:	49 8d 34 1f          	lea    (%r15,%rbx,1),%rsi
  40d4b9:	48 b8 f8 ff ff ff ff 	movabs $0xfffffffffffffff8,%rax
  40d4c0:	ff ff ff 
  40d4c3:	48 bb e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rbx
  40d4ca:	ff ff ff 
  40d4cd:	4a 8d 54 3d 00       	lea    0x0(%rbp,%r15,1),%rdx
  40d4d2:	49 8b 3c 07          	mov    (%r15,%rax,1),%rdi
  40d4d6:	4e 8d 24 3b          	lea    (%rbx,%r15,1),%r12
  40d4da:	41 ff d4             	callq  *%r12
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  40d4dd:	48 b8 40 69 4c 9a 01 	movabs $0x19a4c6940,%rax
  40d4e4:	00 00 00 




#define MAX_NODE_NUMS 2100
std::vector<State> g_initialStates __attribute__((aligned(SWARM_ALIGNMENT)));
  40d4e7:	4a 8d 54 3d 00       	lea    0x0(%rbp,%r15,1),%rdx
  40d4ec:	49 c7 04 07 00 00 00 	movq   $0x0,(%r15,%rax,1)
  40d4f3:	00 
  40d4f4:	49 c7 44 07 08 00 00 	movq   $0x0,0x8(%r15,%rax,1)
  40d4fb:	00 00 
  40d4fd:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40d501:	49 c7 44 07 10 00 00 	movq   $0x0,0x10(%r15,%rax,1)
  40d508:	00 00 
  40d50a:	48 b8 50 85 de ff ff 	movabs $0xffffffffffde8550,%rax
  40d511:	ff ff ff 
  40d514:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  40d518:	41 ff d4             	callq  *%r12
  40d51b:	48 b8 00 eb 4b 9a 01 	movabs $0x19a4beb00,%rax
  40d522:	00 00 00 
  40d525:	4c 01 f8             	add    %r15,%rax
  40d528:	48 8d 90 40 7e 00 00 	lea    0x7e40(%rax),%rdx
  40d52f:	90                   	nop
	Cost cost;
};

struct PlanResult {
	PlanResult() {
		states_size = 0;
  40d530:	48 c7 80 00 04 00 00 	movq   $0x0,0x400(%rax)
  40d537:	00 00 00 00 
		actions_size = 0;
  40d53b:	48 c7 80 08 06 00 00 	movq   $0x0,0x608(%rax)
  40d542:	00 00 00 00 
  40d546:	48 05 50 06 00 00    	add    $0x650,%rax
		cost = 0;
  40d54c:	c7 40 c0 00 00 00 00 	movl   $0x0,-0x40(%rax)
		fmin = 0;
  40d553:	c7 40 c4 00 00 00 00 	movl   $0x0,-0x3c(%rax)
		success = false;
  40d55a:	c6 40 c8 00          	movb   $0x0,-0x38(%rax)
PlanResult g_solution[ROBOT_NUMS] __attribute__((aligned(SWARM_ALIGNMENT)));
  40d55e:	48 39 d0             	cmp    %rdx,%rax
  40d561:	75 cd                	jne    40d530 <_GLOBAL__sub_I__ZlsRSoRK6Action+0xc0>
      _Hashtable() = default;
  40d563:	48 ba 90 ea 4b 9a 01 	movabs $0x19a4bea90,%rdx
  40d56a:	00 00 00 
  40d56d:	48 b8 40 ea 4b 9a 01 	movabs $0x19a4bea40,%rax
  40d574:	00 00 00 
bool g_isNoConflict __attribute__((aligned(SWARM_ALIGNMENT)));
Environment g_env __attribute__((aligned(SWARM_ALIGNMENT)));
  40d577:	4c 01 fb             	add    %r15,%rbx
  40d57a:	4c 01 fa             	add    %r15,%rdx
  40d57d:	49 c7 04 07 00 00 00 	movq   $0x0,(%r15,%rax,1)
  40d584:	00 
  40d585:	49 c7 44 07 08 00 00 	movq   $0x0,0x8(%r15,%rax,1)
  40d58c:	00 00 
  40d58e:	49 89 54 07 20       	mov    %rdx,0x20(%r15,%rax,1)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40d593:	48 ba f8 92 df ff ff 	movabs $0xffffffffffdf92f8,%rdx
  40d59a:	ff ff ff 
  40d59d:	49 c7 44 07 10 00 00 	movq   $0x0,0x10(%r15,%rax,1)
  40d5a4:	00 00 
  40d5a6:	f3 41 0f 10 04 17    	movss  (%r15,%rdx,1),%xmm0
  40d5ac:	49 c7 44 07 28 01 00 	movq   $0x1,0x28(%r15,%rax,1)
  40d5b3:	00 00 
    _Hash_node_base() noexcept : _M_nxt() { }
  40d5b5:	49 c7 44 07 30 00 00 	movq   $0x0,0x30(%r15,%rax,1)
  40d5bc:	00 00 
  40d5be:	49 c7 44 07 38 00 00 	movq   $0x0,0x38(%r15,%rax,1)
  40d5c5:	00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  40d5c7:	f3 41 0f 11 44 07 40 	movss  %xmm0,0x40(%r15,%rax,1)
  40d5ce:	49 c7 44 07 48 00 00 	movq   $0x0,0x48(%r15,%rax,1)
  40d5d5:	00 00 
  40d5d7:	49 c7 44 07 50 00 00 	movq   $0x0,0x50(%r15,%rax,1)
  40d5de:	00 00 
  40d5e0:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
        m_lowLevelExpanded(0) {}
  40d5e4:	41 c7 44 07 58 00 00 	movl   $0x0,0x58(%r15,%rax,1)
  40d5eb:	00 00 
  40d5ed:	4a 8d 54 3d 00       	lea    0x0(%rbp,%r15,1),%rdx
  40d5f2:	41 c7 44 07 5c 00 00 	movl   $0x0,0x5c(%r15,%rax,1)
  40d5f9:	00 00 
  40d5fb:	48 b8 10 9c de ff ff 	movabs $0xffffffffffde9c10,%rax
  40d602:	ff ff ff 
  40d605:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  40d609:	ff d3                	callq  *%rbx
  40d60b:	48 b8 80 e9 4a 9a 01 	movabs $0x19a4ae980,%rax
  40d612:	00 00 00 
  40d615:	4c 01 f8             	add    %r15,%rax
  40d618:	48 8d 90 40 7e 00 00 	lea    0x7e40(%rax),%rdx
  40d61f:	90                   	nop
		states_size = 0;
  40d620:	48 c7 80 00 04 00 00 	movq   $0x0,0x400(%rax)
  40d627:	00 00 00 00 
		actions_size = 0;
  40d62b:	48 c7 80 08 06 00 00 	movq   $0x0,0x608(%rax)
  40d632:	00 00 00 00 
  40d636:	48 05 50 06 00 00    	add    $0x650,%rax
		cost = 0;
  40d63c:	c7 40 c0 00 00 00 00 	movl   $0x0,-0x40(%rax)
		fmin = 0;
  40d643:	c7 40 c4 00 00 00 00 	movl   $0x0,-0x3c(%rax)
		success = false;
  40d64a:	c6 40 c8 00          	movb   $0x0,-0x38(%rax)
				openSet_t;
				typedef typename openSet_t::handle_type handle_t;
#endif // USE_FIBONACCI_HEAP
#endif // NO_SWARM

struct HighLevelNode {
  40d64e:	48 39 d0             	cmp    %rdx,%rax
  40d651:	75 cd                	jne    40d620 <_GLOBAL__sub_I__ZlsRSoRK6Action+0x1b0>
  40d653:	48 ba c0 e9 4b 9a 01 	movabs $0x19a4be9c0,%rdx
  40d65a:	00 00 00 
  40d65d:	4c 01 fa             	add    %r15,%rdx
#include "swarm_headers.hpp"
#include "Constraint.hpp"

struct Constraints {
	Constraints() {
		vertexConstraints_size = 0;
  40d660:	c7 80 40 06 00 00 00 	movl   $0x0,0x640(%rax)
  40d667:	00 00 00 
		edgeConstraints_size = 0;
  40d66a:	c7 80 44 06 00 00 00 	movl   $0x0,0x644(%rax)
  40d671:	00 00 00 
  40d674:	48 05 80 06 00 00    	add    $0x680,%rax
  40d67a:	48 39 c2             	cmp    %rax,%rdx
  40d67d:	75 e1                	jne    40d660 <_GLOBAL__sub_I__ZlsRSoRK6Action+0x1f0>
  40d67f:	48 83 c4 08          	add    $0x8,%rsp
  40d683:	5b                   	pop    %rbx
  40d684:	5d                   	pop    %rbp
  40d685:	41 5c                	pop    %r12
  40d687:	41 5f                	pop    %r15
  40d689:	c3                   	retq   
  40d68a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040d690 <_start>:
  40d690:	31 ed                	xor    %ebp,%ebp
  40d692:	49 89 d1             	mov    %rdx,%r9
  40d695:	5e                   	pop    %rsi
  40d696:	48 89 e2             	mov    %rsp,%rdx
  40d699:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40d69d:	50                   	push   %rax
  40d69e:	54                   	push   %rsp
  40d69f:	49 c7 c0 10 29 42 00 	mov    $0x422910,%r8
  40d6a6:	48 c7 c1 a0 28 42 00 	mov    $0x4228a0,%rcx
  40d6ad:	48 c7 c7 f0 9c 40 00 	mov    $0x409cf0,%rdi
  40d6b4:	ff 15 1e d9 21 00    	callq  *0x21d91e(%rip)        # 62afd8 <__libc_start_main@GLIBC_2.2.5>
  40d6ba:	f4                   	hlt    
  40d6bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040d6c0 <_dl_relocate_static_pie>:
  40d6c0:	f3 c3                	repz retq 
  40d6c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40d6c9:	00 00 00 
  40d6cc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000040d6d0 <deregister_tm_clones>:
  40d6d0:	b8 ff b3 62 00       	mov    $0x62b3ff,%eax
  40d6d5:	55                   	push   %rbp
  40d6d6:	48 2d f8 b3 62 00    	sub    $0x62b3f8,%rax
  40d6dc:	48 83 f8 0e          	cmp    $0xe,%rax
  40d6e0:	48 89 e5             	mov    %rsp,%rbp
  40d6e3:	76 1b                	jbe    40d700 <deregister_tm_clones+0x30>
  40d6e5:	b8 00 00 00 00       	mov    $0x0,%eax
  40d6ea:	48 85 c0             	test   %rax,%rax
  40d6ed:	74 11                	je     40d700 <deregister_tm_clones+0x30>
  40d6ef:	5d                   	pop    %rbp
  40d6f0:	bf f8 b3 62 00       	mov    $0x62b3f8,%edi
  40d6f5:	ff e0                	jmpq   *%rax
  40d6f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40d6fe:	00 00 
  40d700:	5d                   	pop    %rbp
  40d701:	c3                   	retq   
  40d702:	0f 1f 40 00          	nopl   0x0(%rax)
  40d706:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40d70d:	00 00 00 

000000000040d710 <register_tm_clones>:
  40d710:	be f8 b3 62 00       	mov    $0x62b3f8,%esi
  40d715:	55                   	push   %rbp
  40d716:	48 81 ee f8 b3 62 00 	sub    $0x62b3f8,%rsi
  40d71d:	48 c1 fe 03          	sar    $0x3,%rsi
  40d721:	48 89 e5             	mov    %rsp,%rbp
  40d724:	48 89 f0             	mov    %rsi,%rax
  40d727:	48 c1 e8 3f          	shr    $0x3f,%rax
  40d72b:	48 01 c6             	add    %rax,%rsi
  40d72e:	48 d1 fe             	sar    %rsi
  40d731:	74 15                	je     40d748 <register_tm_clones+0x38>
  40d733:	b8 00 00 00 00       	mov    $0x0,%eax
  40d738:	48 85 c0             	test   %rax,%rax
  40d73b:	74 0b                	je     40d748 <register_tm_clones+0x38>
  40d73d:	5d                   	pop    %rbp
  40d73e:	bf f8 b3 62 00       	mov    $0x62b3f8,%edi
  40d743:	ff e0                	jmpq   *%rax
  40d745:	0f 1f 00             	nopl   (%rax)
  40d748:	5d                   	pop    %rbp
  40d749:	c3                   	retq   
  40d74a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040d750 <__do_global_dtors_aux>:
  40d750:	80 3d a9 dc 21 00 00 	cmpb   $0x0,0x21dca9(%rip)        # 62b400 <completed.7664>
  40d757:	75 11                	jne    40d76a <__do_global_dtors_aux+0x1a>
  40d759:	55                   	push   %rbp
  40d75a:	48 89 e5             	mov    %rsp,%rbp
  40d75d:	e8 6e ff ff ff       	callq  40d6d0 <deregister_tm_clones>
  40d762:	5d                   	pop    %rbp
  40d763:	c6 05 96 dc 21 00 01 	movb   $0x1,0x21dc96(%rip)        # 62b400 <completed.7664>
  40d76a:	f3 c3                	repz retq 
  40d76c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000040d770 <frame_dummy>:
  40d770:	bf 20 9f 62 00       	mov    $0x629f20,%edi
  40d775:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  40d779:	75 05                	jne    40d780 <frame_dummy+0x10>
  40d77b:	eb 93                	jmp    40d710 <register_tm_clones>
  40d77d:	0f 1f 00             	nopl   (%rax)
  40d780:	b8 00 00 00 00       	mov    $0x0,%eax
  40d785:	48 85 c0             	test   %rax,%rax
  40d788:	74 f1                	je     40d77b <frame_dummy+0xb>
  40d78a:	55                   	push   %rbp
  40d78b:	48 89 e5             	mov    %rsp,%rbp
  40d78e:	ff d0                	callq  *%rax
  40d790:	5d                   	pop    %rbp
  40d791:	e9 7a ff ff ff       	jmpq   40d710 <register_tm_clones>
  40d796:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40d79d:	00 00 00 

000000000040d7a0 <_ZN5swarmL22task_exception_handlerEv>:
static void task_exception_handler() {
  40d7a0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40d7a0 <_ZN5swarmL22task_exception_handlerEv>
  40d7a7:	49 bb 60 d8 21 00 00 	movabs $0x21d860,%r11
  40d7ae:	00 00 00 
  40d7b1:	41 57                	push   %r15
  40d7b3:	4c 01 d8             	add    %r11,%rax
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d7b6:	b9 0a 04 00 00       	mov    $0x40a,%ecx
  40d7bb:	48 87 c9             	xchg   %rcx,%rcx
    std::abort();  // if this fires, the task became non-speculative... not good
  40d7be:	48 ba 50 e5 dd ff ff 	movabs $0xffffffffffdde550,%rdx
  40d7c5:	ff ff ff 
  40d7c8:	49 89 c7             	mov    %rax,%r15
  40d7cb:	48 01 c2             	add    %rax,%rdx
  40d7ce:	ff d2                	callq  *%rdx

000000000040d7d0 <_ZN5swarmL10pls_workerEPv>:
static void* pls_worker(void* isMainThread) {
  40d7d0:	55                   	push   %rbp
  40d7d1:	48 8d 05 f8 ff ff ff 	lea    -0x8(%rip),%rax        # 40d7d0 <_ZN5swarmL10pls_workerEPv>
  40d7d8:	49 bb 30 d8 21 00 00 	movabs $0x21d830,%r11
  40d7df:	00 00 00 
  40d7e2:	48 89 e5             	mov    %rsp,%rbp
  40d7e5:	41 57                	push   %r15
  40d7e7:	41 56                	push   %r14
  40d7e9:	41 55                	push   %r13
  40d7eb:	41 54                	push   %r12
  40d7ed:	4c 01 d8             	add    %r11,%rax
  40d7f0:	53                   	push   %rbx
  40d7f1:	48 83 ec 78          	sub    $0x78,%rsp
    if (isMainThread) sim_stack_base(__builtin_frame_address(0));
  40d7f5:	48 85 ff             	test   %rdi,%rdi
  40d7f8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
static void* pls_worker(void* isMainThread) {
  40d7ff:	48 89 bd 70 ff ff ff 	mov    %rdi,-0x90(%rbp)
    if (isMainThread) sim_stack_base(__builtin_frame_address(0));
  40d806:	0f 84 2c 02 00 00    	je     40da38 <_ZN5swarmL10pls_workerEPv+0x268>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40d80c:	b9 06 04 00 00       	mov    $0x406,%ecx
  40d811:	48 89 ef             	mov    %rbp,%rdi
  40d814:	48 87 c9             	xchg   %rcx,%rcx
    assert((!!swarm::__mainThreadFSAddr()) == (!!swarm::__mainThreadFSAddr()));
  40d817:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  40d81e:	48 b8 a8 69 4c 9a 01 	movabs $0x19a4c69a8,%rax
  40d825:	00 00 00 
  40d828:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40d82f:	48 8b 04 30          	mov    (%rax,%rsi,1),%rax
  40d833:	48 85 c0             	test   %rax,%rax
  40d836:	0f 94 c1             	sete   %cl
  40d839:	0f 95 c2             	setne  %dl
  40d83c:	38 d1                	cmp    %dl,%cl
  40d83e:	0f 84 63 02 00 00    	je     40daa7 <_ZN5swarmL10pls_workerEPv+0x2d7>
    if (swarm::__mainThreadFSAddr()) {
  40d844:	48 85 c0             	test   %rax,%rax
  40d847:	0f 85 73 01 00 00    	jne    40d9c0 <_ZN5swarmL10pls_workerEPv+0x1f0>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d84d:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d852:	48 87 c9             	xchg   %rcx,%rcx
    if (isMainThread) zsim_roi_begin();
  40d855:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
  40d85c:	00 
  40d85d:	74 5c                	je     40d8bb <_ZN5swarmL10pls_workerEPv+0xeb>
// Op defs (some kept "zsim_XXX" for backwards compatibility)

#define HOOKS_STR  "HOOKS"

static inline void zsim_roi_begin(void) {
    fflush(NULL);
  40d85f:	4c 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%r14
  40d866:	48 bb e0 e7 dd ff ff 	movabs $0xffffffffffdde7e0,%rbx
  40d86d:	ff ff ff 
  40d870:	31 ff                	xor    %edi,%edi
  40d872:	4d 89 f7             	mov    %r14,%r15
  40d875:	4c 01 f3             	add    %r14,%rbx
  40d878:	ff d3                	callq  *%rbx
  40d87a:	48 b8 5f 7d df ff ff 	movabs $0xffffffffffdf7d5f,%rax
  40d881:	ff ff ff 
  40d884:	4c 89 f6             	mov    %r14,%rsi
  40d887:	48 ba 80 e3 dd ff ff 	movabs $0xffffffffffdde380,%rdx
  40d88e:	ff ff ff 
  40d891:	48 01 c6             	add    %rax,%rsi
  40d894:	4c 01 f2             	add    %r14,%rdx
  40d897:	bf 01 00 00 00       	mov    $0x1,%edi
  40d89c:	31 c0                	xor    %eax,%eax
  40d89e:	ff d2                	callq  *%rdx
    printf("[" HOOKS_STR "] ROI begin\n");
    fflush(stdout);
  40d8a0:	48 b8 70 ff ff ff ff 	movabs $0xffffffffffffff70,%rax
  40d8a7:	ff ff ff 
  40d8aa:	49 8b 04 06          	mov    (%r14,%rax,1),%rax
  40d8ae:	48 8b 38             	mov    (%rax),%rdi
  40d8b1:	ff d3                	callq  *%rbx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d8b3:	b9 01 04 00 00       	mov    $0x401,%ecx
  40d8b8:	48 87 c9             	xchg   %rcx,%rcx
  40d8bb:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d8c0:	48 87 c9             	xchg   %rcx,%rcx
             * work without -fomit-frame-pointer...
             */
            : "rax", "rbx", "rdx", "rsi", "rdi",
            "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
            "flags", "memory"
            );
  40d8c3:	b9 00 08 00 00       	mov    $0x800,%ecx
  40d8c8:	55                   	push   %rbp
  40d8c9:	48 c7 c6 e1 d8 40 00 	mov    $0x40d8e1,%rsi
  40d8d0:	48 c7 c7 e1 d8 40 00 	mov    $0x40d8e1,%rdi
  40d8d7:	48 c7 c2 e4 d8 40 00 	mov    $0x40d8e4,%rdx
  40d8de:	48 87 c9             	xchg   %rcx,%rcx
  40d8e1:	48 87 d2             	xchg   %rdx,%rdx
  40d8e4:	5d                   	pop    %rbp
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d8e5:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d8ea:	48 87 c9             	xchg   %rcx,%rcx
    if (isMainThread) zsim_roi_end();
  40d8ed:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
  40d8f4:	00 
  40d8f5:	74 5c                	je     40d953 <_ZN5swarmL10pls_workerEPv+0x183>
  40d8f7:	b9 02 04 00 00       	mov    $0x402,%ecx
  40d8fc:	48 87 c9             	xchg   %rcx,%rcx
    fflush(NULL);
  40d8ff:	4c 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%r14
  40d906:	48 bb e0 e7 dd ff ff 	movabs $0xffffffffffdde7e0,%rbx
  40d90d:	ff ff ff 
  40d910:	31 ff                	xor    %edi,%edi
  40d912:	4d 89 f7             	mov    %r14,%r15
  40d915:	4c 01 f3             	add    %r14,%rbx
  40d918:	ff d3                	callq  *%rbx
  40d91a:	48 b8 72 7d df ff ff 	movabs $0xffffffffffdf7d72,%rax
  40d921:	ff ff ff 
  40d924:	4c 89 f6             	mov    %r14,%rsi
  40d927:	48 ba 80 e3 dd ff ff 	movabs $0xffffffffffdde380,%rdx
  40d92e:	ff ff ff 
  40d931:	48 01 c6             	add    %rax,%rsi
  40d934:	bf 01 00 00 00       	mov    $0x1,%edi
  40d939:	31 c0                	xor    %eax,%eax
  40d93b:	4c 01 f2             	add    %r14,%rdx
  40d93e:	ff d2                	callq  *%rdx
    fflush(stdout);
  40d940:	48 b8 70 ff ff ff ff 	movabs $0xffffffffffffff70,%rax
  40d947:	ff ff ff 
  40d94a:	49 8b 04 06          	mov    (%r14,%rax,1),%rax
  40d94e:	48 8b 38             	mov    (%rax),%rdi
  40d951:	ff d3                	callq  *%rbx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op));
  40d953:	b9 09 04 00 00       	mov    $0x409,%ecx
  40d958:	48 87 c9             	xchg   %rcx,%rcx
    if (swarm::__mainThreadFSAddr()) {
  40d95b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40d962:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
  40d969:	48 83 3c 30 00       	cmpq   $0x0,(%rax,%rsi,1)
  40d96e:	74 37                	je     40d9a7 <_ZN5swarmL10pls_workerEPv+0x1d7>
  40d970:	49 89 f6             	mov    %rsi,%r14
    return syscall(SYS_arch_prctl, code, addr);
  40d973:	48 bb d0 e3 dd ff ff 	movabs $0xffffffffffdde3d0,%rbx
  40d97a:	ff ff ff 
  40d97d:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  40d981:	be 02 10 00 00       	mov    $0x1002,%esi
  40d986:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40d98b:	4d 89 f7             	mov    %r14,%r15
  40d98e:	31 c0                	xor    %eax,%eax
  40d990:	4c 01 f3             	add    %r14,%rbx
  40d993:	ff d3                	callq  *%rbx
  40d995:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40d999:	be 01 10 00 00       	mov    $0x1001,%esi
  40d99e:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40d9a3:	31 c0                	xor    %eax,%eax
  40d9a5:	ff d3                	callq  *%rbx
}
  40d9a7:	48 83 c4 78          	add    $0x78,%rsp
  40d9ab:	31 c0                	xor    %eax,%eax
  40d9ad:	5b                   	pop    %rbx
  40d9ae:	41 5c                	pop    %r12
  40d9b0:	41 5d                	pop    %r13
  40d9b2:	41 5e                	pop    %r14
  40d9b4:	41 5f                	pop    %r15
  40d9b6:	5d                   	pop    %rbp
  40d9b7:	c3                   	retq   
  40d9b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40d9bf:	00 
  40d9c0:	49 89 f6             	mov    %rsi,%r14
    return syscall(SYS_arch_prctl, code, addr);
  40d9c3:	48 bb d0 e3 dd ff ff 	movabs $0xffffffffffdde3d0,%rbx
  40d9ca:	ff ff ff 
        __arch_prctl(ARCH_GET_FS,
  40d9cd:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
    return syscall(SYS_arch_prctl, code, addr);
  40d9d1:	4d 89 f7             	mov    %r14,%r15
  40d9d4:	4c 01 f3             	add    %r14,%rbx
  40d9d7:	be 03 10 00 00       	mov    $0x1003,%esi
  40d9dc:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40d9e1:	31 c0                	xor    %eax,%eax
  40d9e3:	ff d3                	callq  *%rbx
        __arch_prctl(ARCH_GET_GS,
  40d9e5:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    return syscall(SYS_arch_prctl, code, addr);
  40d9e9:	be 04 10 00 00       	mov    $0x1004,%esi
  40d9ee:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40d9f3:	31 c0                	xor    %eax,%eax
  40d9f5:	ff d3                	callq  *%rbx
  40d9f7:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40d9fe:	be 02 10 00 00       	mov    $0x1002,%esi
  40da03:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da08:	4a 8b 14 30          	mov    (%rax,%r14,1),%rdx
  40da0c:	31 c0                	xor    %eax,%eax
  40da0e:	ff d3                	callq  *%rbx
        __arch_prctl(ARCH_SET_GS, swarm::__mainThreadGSAddr());
  40da10:	48 b8 a0 69 4c 9a 01 	movabs $0x19a4c69a0,%rax
  40da17:	00 00 00 
    return syscall(SYS_arch_prctl, code, addr);
  40da1a:	be 01 10 00 00       	mov    $0x1001,%esi
  40da1f:	bf 9e 00 00 00       	mov    $0x9e,%edi
  40da24:	49 8b 14 06          	mov    (%r14,%rax,1),%rdx
  40da28:	31 c0                	xor    %eax,%eax
  40da2a:	ff d3                	callq  *%rbx
  40da2c:	e9 1c fe ff ff       	jmpq   40d84d <_ZN5swarmL10pls_workerEPv+0x7d>
  40da31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    err = pthread_getattr_np(pthread_self(), &attr);
  40da38:	4c 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%r14
  40da3f:	48 b8 f0 e6 dd ff ff 	movabs $0xffffffffffdde6f0,%rax
  40da46:	ff ff ff 
  40da49:	48 8d 5d 90          	lea    -0x70(%rbp),%rbx
  40da4d:	4d 89 f7             	mov    %r14,%r15
  40da50:	4c 01 f0             	add    %r14,%rax
  40da53:	ff d0                	callq  *%rax
  40da55:	48 89 c7             	mov    %rax,%rdi
  40da58:	48 b8 70 e8 dd ff ff 	movabs $0xffffffffffdde870,%rax
  40da5f:	ff ff ff 
  40da62:	48 89 de             	mov    %rbx,%rsi
  40da65:	4c 01 f0             	add    %r14,%rax
  40da68:	ff d0                	callq  *%rax
    if (err != 0) std::abort();
  40da6a:	85 c0                	test   %eax,%eax
  40da6c:	75 7f                	jne    40daed <_ZN5swarmL10pls_workerEPv+0x31d>
    err = pthread_attr_getstack(&attr, &stkaddr, &v);
  40da6e:	48 89 df             	mov    %rbx,%rdi
  40da71:	48 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%rbx
  40da78:	48 b8 70 e6 dd ff ff 	movabs $0xffffffffffdde670,%rax
  40da7f:	ff ff ff 
  40da82:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
  40da86:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
  40da8a:	48 01 d8             	add    %rbx,%rax
  40da8d:	49 89 df             	mov    %rbx,%r15
  40da90:	ff d0                	callq  *%rax
    if (err != 0) std::abort();
  40da92:	85 c0                	test   %eax,%eax
  40da94:	75 57                	jne    40daed <_ZN5swarmL10pls_workerEPv+0x31d>
    return reinterpret_cast<uint64_t>(ptr);
  40da96:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40da9a:	b9 06 04 00 00       	mov    $0x406,%ecx
  40da9f:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40daa2:	e9 70 fd ff ff       	jmpq   40d817 <_ZN5swarmL10pls_workerEPv+0x47>
    assert((!!swarm::__mainThreadFSAddr()) == (!!swarm::__mainThreadFSAddr()));
  40daa7:	48 b8 10 82 df ff ff 	movabs $0xffffffffffdf8210,%rax
  40daae:	ff ff ff 
  40dab1:	48 89 f3             	mov    %rsi,%rbx
  40dab4:	48 89 f7             	mov    %rsi,%rdi
  40dab7:	48 8d 0c 06          	lea    (%rsi,%rax,1),%rcx
  40dabb:	48 b8 70 79 df ff ff 	movabs $0xffffffffffdf7970,%rax
  40dac2:	ff ff ff 
  40dac5:	ba 6f 00 00 00       	mov    $0x6f,%edx
  40daca:	48 8d 34 06          	lea    (%rsi,%rax,1),%rsi
  40dace:	48 b8 b8 79 df ff ff 	movabs $0xffffffffffdf79b8,%rax
  40dad5:	ff ff ff 
  40dad8:	49 89 df             	mov    %rbx,%r15
  40dadb:	48 01 c7             	add    %rax,%rdi
  40dade:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  40dae5:	ff ff ff 
  40dae8:	48 01 d8             	add    %rbx,%rax
  40daeb:	ff d0                	callq  *%rax
    if (err != 0) std::abort();
  40daed:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  40daf4:	48 b8 50 e5 dd ff ff 	movabs $0xffffffffffdde550,%rax
  40dafb:	ff ff ff 
  40dafe:	49 89 ff             	mov    %rdi,%r15
  40db01:	48 01 f8             	add    %rdi,%rax
  40db04:	ff d0                	callq  *%rax
  40db06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40db0d:	00 00 00 

000000000040db10 <_ZL8getStatemPK10PlanResultm>:
		const PlanResult* solution, const size_t t) {
  40db10:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40db10 <_ZL8getStatemPK10PlanResultm>
  40db17:	49 bb f0 d4 21 00 00 	movabs $0x21d4f0,%r11
  40db1e:	00 00 00 
  40db21:	48 83 ec 28          	sub    $0x28,%rsp
  40db25:	4c 01 d8             	add    %r11,%rax
	assert(agentIdx < ROBOT_NUMS); // [TEST-removed]
  40db28:	48 83 ff 13          	cmp    $0x13,%rdi
  40db2c:	77 4b                	ja     40db79 <_ZL8getStatemPK10PlanResultm+0x69>
	if (t < solution[agentIdx].states_size) {
  40db2e:	48 69 ff 50 06 00 00 	imul   $0x650,%rdi,%rdi
  40db35:	48 01 fe             	add    %rdi,%rsi
  40db38:	48 8b 86 00 04 00 00 	mov    0x400(%rsi),%rax
  40db3f:	48 39 d0             	cmp    %rdx,%rax
  40db42:	77 2c                	ja     40db70 <_ZL8getStatemPK10PlanResultm+0x60>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40db44:	48 83 e8 01          	sub    $0x1,%rax
  40db48:	48 c1 e0 04          	shl    $0x4,%rax
  40db4c:	48 01 c6             	add    %rax,%rsi
  40db4f:	48 8b 06             	mov    (%rsi),%rax
  40db52:	48 89 44 24 14       	mov    %rax,0x14(%rsp)
  40db57:	8b 46 08             	mov    0x8(%rsi),%eax
  40db5a:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  40db5e:	89 c2                	mov    %eax,%edx
}
  40db60:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  40db65:	48 83 c4 28          	add    $0x28,%rsp
  40db69:	c3                   	retq   
  40db6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
		return solution[agentIdx].states[t].state;
  40db70:	48 c1 e2 04          	shl    $0x4,%rdx
  40db74:	48 01 d6             	add    %rdx,%rsi
  40db77:	eb d6                	jmp    40db4f <_ZL8getStatemPK10PlanResultm+0x3f>
  40db79:	48 ba e0 ea dd ff ff 	movabs $0xffffffffffddeae0,%rdx
  40db80:	ff ff ff 
  40db83:	48 01 d0             	add    %rdx,%rax
  40db86:	ff d0                	callq  *%rax
  40db88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40db8f:	00 

000000000040db90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
  40db90:	41 57                	push   %r15
  40db92:	41 55                	push   %r13
  40db94:	49 bb 70 d4 21 00 00 	movabs $0x21d470,%r11
  40db9b:	00 00 00 
  40db9e:	41 54                	push   %r12
  40dba0:	55                   	push   %rbp
  40dba1:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 40db90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314>
  40dba8:	53                   	push   %rbx
  40dba9:	49 89 fc             	mov    %rdi,%r12
  40dbac:	49 89 f5             	mov    %rsi,%r13
  40dbaf:	4c 01 dd             	add    %r11,%rbp
  40dbb2:	48 83 ec 10          	sub    $0x10,%rsp
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
  40dbb6:	48 85 f6             	test   %rsi,%rsi
  40dbb9:	75 2d                	jne    40dbe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0x58>
  40dbbb:	48 85 d2             	test   %rdx,%rdx
  40dbbe:	74 28                	je     40dbe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0x58>
	  std::__throw_logic_error(__N("basic_string::"
  40dbc0:	48 b8 30 7a df ff ff 	movabs $0xffffffffffdf7a30,%rax
  40dbc7:	ff ff ff 
  40dbca:	49 89 ef             	mov    %rbp,%r15
  40dbcd:	48 8d 7c 05 00       	lea    0x0(%rbp,%rax,1),%rdi
  40dbd2:	48 b8 50 e6 dd ff ff 	movabs $0xffffffffffdde650,%rax
  40dbd9:	ff ff ff 
  40dbdc:	48 01 e8             	add    %rbp,%rax
  40dbdf:	ff d0                	callq  *%rax
  40dbe1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
  40dbe8:	4c 29 ea             	sub    %r13,%rdx
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
  40dbeb:	48 83 fa 0f          	cmp    $0xf,%rdx
  40dbef:	48 89 d3             	mov    %rdx,%rbx
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
  40dbf2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
	if (__dnew > size_type(_S_local_capacity))
  40dbf7:	77 27                	ja     40dc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0x90>
	if (__n == 1)
  40dbf9:	48 83 fb 01          	cmp    $0x1,%rbx
  40dbfd:	49 8b 3c 24          	mov    (%r12),%rdi
  40dc01:	74 6d                	je     40dc70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0xe0>
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
  40dc03:	48 85 db             	test   %rbx,%rbx
  40dc06:	75 45                	jne    40dc4d <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0xbd>
      { _M_string_length = __length; }
  40dc08:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
      { __c1 = __c2; }
  40dc0d:	c6 04 1f 00          	movb   $0x0,(%rdi,%rbx,1)
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
      }
  40dc11:	48 83 c4 10          	add    $0x10,%rsp
  40dc15:	5b                   	pop    %rbx
  40dc16:	5d                   	pop    %rbp
  40dc17:	41 5c                	pop    %r12
  40dc19:	41 5d                	pop    %r13
  40dc1b:	41 5f                	pop    %r15
  40dc1d:	c3                   	retq   
  40dc1e:	66 90                	xchg   %ax,%ax
	    _M_data(_M_create(__dnew, size_type(0)));
  40dc20:	48 b8 50 ea dd ff ff 	movabs $0xffffffffffddea50,%rax
  40dc27:	ff ff ff 
  40dc2a:	4c 89 e7             	mov    %r12,%rdi
  40dc2d:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  40dc32:	31 d2                	xor    %edx,%edx
  40dc34:	49 89 ef             	mov    %rbp,%r15
  40dc37:	48 01 e8             	add    %rbp,%rax
  40dc3a:	ff d0                	callq  *%rax
  40dc3c:	48 89 c7             	mov    %rax,%rdi
      { _M_dataplus._M_p = __p; }
  40dc3f:	49 89 04 24          	mov    %rax,(%r12)
      { _M_allocated_capacity = __capacity; }
  40dc43:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40dc48:	49 89 44 24 10       	mov    %rax,0x10(%r12)
	  return __s1;
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
  40dc4d:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  40dc54:	ff ff ff 
  40dc57:	48 89 da             	mov    %rbx,%rdx
  40dc5a:	4c 89 ee             	mov    %r13,%rsi
  40dc5d:	49 89 ef             	mov    %rbp,%r15
  40dc60:	48 01 e8             	add    %rbp,%rax
  40dc63:	ff d0                	callq  *%rax
  40dc65:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40dc6a:	49 8b 3c 24          	mov    (%r12),%rdi
  40dc6e:	eb 98                	jmp    40dc08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0x78>
  40dc70:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
      { __c1 = __c2; }
  40dc75:	88 07                	mov    %al,(%rdi)
  40dc77:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40dc7c:	49 8b 3c 24          	mov    (%r12),%rdi
  40dc80:	eb 86                	jmp    40dc08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.314+0x78>
  40dc82:	0f 1f 40 00          	nopl   0x0(%rax)
  40dc86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40dc8d:	00 00 00 

000000000040dc90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.316>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  40dc90:	41 57                	push   %r15
  40dc92:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40dc90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.316>
  40dc99:	49 bb 70 d3 21 00 00 	movabs $0x21d370,%r11
  40dca0:	00 00 00 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  40dca3:	48 8d 47 10          	lea    0x10(%rdi),%rax
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  40dca7:	55                   	push   %rbp
  40dca8:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  40dcaf:	4d 01 df             	add    %r11,%r15
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dcb2:	48 85 f6             	test   %rsi,%rsi
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
  40dcb5:	53                   	push   %rbx
  40dcb6:	48 89 fd             	mov    %rdi,%rbp
  40dcb9:	48 89 f3             	mov    %rsi,%rbx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  40dcbc:	48 89 07             	mov    %rax,(%rdi)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dcbf:	74 16                	je     40dcd7 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.316+0x47>
      { return __builtin_strlen(__s); }
  40dcc1:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  40dcc8:	ff ff ff 
  40dccb:	48 89 f7             	mov    %rsi,%rdi
  40dcce:	4c 01 f8             	add    %r15,%rax
  40dcd1:	ff d0                	callq  *%rax
  40dcd3:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
          _M_construct(__beg, __end, _Tag());
  40dcd7:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  40dcde:	ff ff ff 
  40dce1:	48 89 de             	mov    %rbx,%rsi
  40dce4:	48 89 ef             	mov    %rbp,%rdi
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dce7:	5b                   	pop    %rbx
          _M_construct(__beg, __end, _Tag());
  40dce8:	4c 01 f8             	add    %r15,%rax
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  40dceb:	5d                   	pop    %rbp
  40dcec:	41 5f                	pop    %r15
          _M_construct(__beg, __end, _Tag());
  40dcee:	ff e0                	jmpq   *%rax

000000000040dcf0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeI8LocationLb1EEEEE19_M_allocate_bucketsEm.isra.351>:
	}
    }

  template<typename _NodeAlloc>
    typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __n)
  40dcf0:	41 57                	push   %r15
  40dcf2:	41 54                	push   %r12
  40dcf4:	49 bb 10 d3 21 00 00 	movabs $0x21d310,%r11
  40dcfb:	00 00 00 
  40dcfe:	55                   	push   %rbp
  40dcff:	53                   	push   %rbx
  40dd00:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 40dcf0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeI8LocationLb1EEEEE19_M_allocate_bucketsEm.isra.351>
	if (__n > this->max_size())
  40dd07:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  40dd0e:	ff ff 1f 
  40dd11:	48 83 ec 08          	sub    $0x8,%rsp
  40dd15:	4c 01 db             	add    %r11,%rbx
  40dd18:	48 39 c7             	cmp    %rax,%rdi
  40dd1b:	77 45                	ja     40dd62 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeI8LocationLb1EEEEE19_M_allocate_bucketsEm.isra.351+0x72>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  40dd1d:	48 8d 2c fd 00 00 00 	lea    0x0(,%rdi,8),%rbp
  40dd24:	00 
  40dd25:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  40dd2c:	ff ff ff 
  40dd2f:	49 89 df             	mov    %rbx,%r15
  40dd32:	48 01 d8             	add    %rbx,%rax
  40dd35:	48 89 ef             	mov    %rbp,%rdi
  40dd38:	ff d0                	callq  *%rax
  40dd3a:	49 89 c4             	mov    %rax,%r12
    {
      __bucket_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __n);
      __bucket_type* __p = std::__addressof(*__ptr);
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  40dd3d:	48 89 c7             	mov    %rax,%rdi
  40dd40:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  40dd47:	ff ff ff 
  40dd4a:	48 89 ea             	mov    %rbp,%rdx
  40dd4d:	48 01 d8             	add    %rbx,%rax
  40dd50:	31 f6                	xor    %esi,%esi
  40dd52:	ff d0                	callq  *%rax
      return __p;
    }
  40dd54:	48 83 c4 08          	add    $0x8,%rsp
  40dd58:	4c 89 e0             	mov    %r12,%rax
  40dd5b:	5b                   	pop    %rbx
  40dd5c:	5d                   	pop    %rbp
  40dd5d:	41 5c                	pop    %r12
  40dd5f:	41 5f                	pop    %r15
  40dd61:	c3                   	retq   
	  std::__throw_bad_alloc();
  40dd62:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  40dd69:	ff ff ff 
  40dd6c:	49 89 df             	mov    %rbx,%r15
  40dd6f:	48 01 d8             	add    %rbx,%rax
  40dd72:	ff d0                	callq  *%rax
  40dd74:	66 90                	xchg   %ax,%ax
  40dd76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40dd7d:	00 00 00 

000000000040dd80 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632>:
static inline void launch_threads(void* (*workerFn)(void*)) {
  40dd80:	41 57                	push   %r15
  40dd82:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 40dd80 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632>
  40dd89:	41 56                	push   %r14
  40dd8b:	41 55                	push   %r13
  40dd8d:	41 54                	push   %r12
  40dd8f:	49 bb 80 d2 21 00 00 	movabs $0x21d280,%r11
  40dd96:	00 00 00 
  40dd99:	55                   	push   %rbp
  40dd9a:	53                   	push   %rbx
  40dd9b:	4c 01 d8             	add    %r11,%rax
  40dd9e:	48 81 ec d8 07 00 00 	sub    $0x7d8,%rsp
  40dda5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    uint32_t logStackSize = 0;
  40ddaa:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%rsp)
  40ddb1:	00 
    uint32_t nthreads = 0;
  40ddb2:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
  40ddb9:	00 
    void* stacksBase = nullptr;
  40ddba:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  40ddc1:	00 00 
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  40ddc3:	b9 07 04 00 00       	mov    $0x407,%ecx
    return reinterpret_cast<uint64_t>(ptr);
  40ddc8:	48 8d 7c 24 24       	lea    0x24(%rsp),%rdi
  40ddcd:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
  40ddd2:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  40ddd7:	48 87 c9             	xchg   %rcx,%rcx
    assert(nthreads && logStackSize && stacksBase);
  40ddda:	8b 44 24 24          	mov    0x24(%rsp),%eax
  40ddde:	85 c0                	test   %eax,%eax
  40dde0:	0f 84 1c 02 00 00    	je     40e002 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x282>
  40dde6:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  40ddea:	85 c9                	test   %ecx,%ecx
  40ddec:	0f 84 10 02 00 00    	je     40e002 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x282>
  40ddf2:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
  40ddf8:	0f 84 04 02 00 00    	je     40e002 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x282>
    size_t stackSize = (1 << logStackSize);
  40ddfe:	b8 01 00 00 00       	mov    $0x1,%eax
    pthread_attr_init(&attr);
  40de03:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  40de08:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
    size_t stackSize = (1 << logStackSize);
  40de0d:	d3 e0                	shl    %cl,%eax
  40de0f:	48 98                	cltq   
    pthread_attr_init(&attr);
  40de11:	48 89 ef             	mov    %rbp,%rdi
    size_t stackSize = (1 << logStackSize);
  40de14:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    pthread_attr_init(&attr);
  40de19:	48 b8 10 e8 dd ff ff 	movabs $0xffffffffffdde810,%rax
  40de20:	ff ff ff 
  40de23:	4d 89 f7             	mov    %r14,%r15
  40de26:	4c 01 f0             	add    %r14,%rax
  40de29:	ff d0                	callq  *%rax
    pthread_t* pthreads = (pthread_t*) calloc(sizeof(pthread_t), nthreads);
  40de2b:	8b 74 24 24          	mov    0x24(%rsp),%esi
  40de2f:	48 b8 e0 74 df ff ff 	movabs $0xffffffffffdf74e0,%rax
  40de36:	ff ff ff 
  40de39:	bf 08 00 00 00       	mov    $0x8,%edi
  40de3e:	4c 01 f0             	add    %r14,%rax
  40de41:	48 89 f3             	mov    %rsi,%rbx
  40de44:	ff d0                	callq  *%rax
    for (uint32_t t = 1; t < nthreads; t++) {
  40de46:	83 fb 01             	cmp    $0x1,%ebx
    pthread_t* pthreads = (pthread_t*) calloc(sizeof(pthread_t), nthreads);
  40de49:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    for (uint32_t t = 1; t < nthreads; t++) {
  40de4e:	76 77                	jbe    40dec7 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x147>
        int err = pthread_create(&pthreads[t], &attr, workerFn, nullptr);
  40de50:	48 b8 d0 27 de ff ff 	movabs $0xffffffffffde27d0,%rax
  40de57:	ff ff ff 
    for (uint32_t t = 1; t < nthreads; t++) {
  40de5a:	bb 01 00 00 00       	mov    $0x1,%ebx
        int err = pthread_create(&pthreads[t], &attr, workerFn, nullptr);
  40de5f:	4d 8d 24 06          	lea    (%r14,%rax,1),%r12
  40de63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40de68:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40de6d:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40de72:	41 89 dd             	mov    %ebx,%r13d
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40de75:	48 b8 b0 ea dd ff ff 	movabs $0xffffffffffddeab0,%rax
  40de7c:	ff ff ff 
  40de7f:	48 89 ef             	mov    %rbp,%rdi
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40de82:	48 89 d6             	mov    %rdx,%rsi
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40de85:	4d 89 f7             	mov    %r14,%r15
  40de88:	4c 01 f0             	add    %r14,%rax
                reinterpret_cast<uint64_t>(stacksBase) + t*stackSize);
  40de8b:	49 0f af f5          	imul   %r13,%rsi
  40de8f:	48 03 74 24 28       	add    0x28(%rsp),%rsi
        pthread_attr_setstack(&attr, threadStackBase, stackSize);
  40de94:	ff d0                	callq  *%rax
        int err = pthread_create(&pthreads[t], &attr, workerFn, nullptr);
  40de96:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40de9b:	31 c9                	xor    %ecx,%ecx
  40de9d:	4c 89 e2             	mov    %r12,%rdx
  40dea0:	48 89 ee             	mov    %rbp,%rsi
  40dea3:	4a 8d 3c e8          	lea    (%rax,%r13,8),%rdi
  40dea7:	48 b8 70 e5 dd ff ff 	movabs $0xffffffffffdde570,%rax
  40deae:	ff ff ff 
  40deb1:	4c 01 f0             	add    %r14,%rax
  40deb4:	ff d0                	callq  *%rax
        if (err != 0) std::abort();
  40deb6:	85 c0                	test   %eax,%eax
  40deb8:	0f 85 2d 01 00 00    	jne    40dfeb <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x26b>
    for (uint32_t t = 1; t < nthreads; t++) {
  40debe:	83 c3 01             	add    $0x1,%ebx
  40dec1:	39 5c 24 24          	cmp    %ebx,0x24(%rsp)
  40dec5:	77 a1                	ja     40de68 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0xe8>
    getcontext(&workerContext);
  40dec7:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40decc:	48 b8 00 e6 dd ff ff 	movabs $0xffffffffffdde600,%rax
  40ded3:	ff ff ff 
  40ded6:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  40dedb:	49 89 df             	mov    %rbx,%r15
  40dede:	48 01 d8             	add    %rbx,%rax
  40dee1:	ff d0                	callq  *%rax
    workerContext.uc_stack.ss_sp = stacksBase;  // thread 0 --> offset 0
  40dee3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40dee8:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
    workerContext.uc_link = &returnContext;
  40deed:	48 8d 9c 24 20 04 00 	lea    0x420(%rsp),%rbx
  40def4:	00 
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40def5:	48 8d 6c 24 70       	lea    0x70(%rsp),%rbp
  40defa:	49 b8 80 e4 dd ff ff 	movabs $0xffffffffffdde480,%r8
  40df01:	ff ff ff 
  40df04:	b9 01 00 00 00       	mov    $0x1,%ecx
  40df09:	ba 01 00 00 00       	mov    $0x1,%edx
    workerContext.uc_link = &returnContext;
  40df0e:	48 89 5c 24 78       	mov    %rbx,0x78(%rsp)
    workerContext.uc_stack.ss_sp = stacksBase;  // thread 0 --> offset 0
  40df13:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40df1a:	00 
    workerContext.uc_stack.ss_size = stackSize;
  40df1b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40df20:	4d 01 f0             	add    %r14,%r8
  40df23:	48 89 ef             	mov    %rbp,%rdi
  40df26:	4d 89 f7             	mov    %r14,%r15
    workerContext.uc_stack.ss_size = stackSize;
  40df29:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40df30:	00 
    makecontext(&workerContext, (void (*)())workerFn, 1, 1 /*signal this is the main thread*/);
  40df31:	48 b8 d0 27 de ff ff 	movabs $0xffffffffffde27d0,%rax
  40df38:	ff ff ff 
  40df3b:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
  40df3f:	31 c0                	xor    %eax,%eax
  40df41:	41 ff d0             	callq  *%r8
    int err = swapcontext(&returnContext, &workerContext);
  40df44:	48 b8 20 e4 dd ff ff 	movabs $0xffffffffffdde420,%rax
  40df4b:	ff ff ff 
  40df4e:	48 89 ee             	mov    %rbp,%rsi
  40df51:	48 89 df             	mov    %rbx,%rdi
  40df54:	4c 01 f0             	add    %r14,%rax
  40df57:	ff d0                	callq  *%rax
    assert(!err); (void) err;
  40df59:	85 c0                	test   %eax,%eax
  40df5b:	0f 85 e7 00 00 00    	jne    40e048 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x2c8>
    for (uint32_t t = 1; t < nthreads; t++) {
  40df61:	83 7c 24 24 01       	cmpl   $0x1,0x24(%rsp)
  40df66:	bb 01 00 00 00       	mov    $0x1,%ebx
  40df6b:	76 34                	jbe    40dfa1 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x221>
  40df6d:	0f 1f 00             	nopl   (%rax)
        int err = pthread_join(pthreads[t], nullptr);
  40df70:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  40df75:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  40df7a:	89 d8                	mov    %ebx,%eax
  40df7c:	31 f6                	xor    %esi,%esi
  40df7e:	48 8b 3c c2          	mov    (%rdx,%rax,8),%rdi
  40df82:	48 b8 10 e5 dd ff ff 	movabs $0xffffffffffdde510,%rax
  40df89:	ff ff ff 
  40df8c:	49 89 cf             	mov    %rcx,%r15
  40df8f:	48 01 c8             	add    %rcx,%rax
  40df92:	ff d0                	callq  *%rax
        if (err != 0) std::abort();
  40df94:	85 c0                	test   %eax,%eax
  40df96:	75 53                	jne    40dfeb <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x26b>
    for (uint32_t t = 1; t < nthreads; t++) {
  40df98:	83 c3 01             	add    $0x1,%ebx
  40df9b:	39 5c 24 24          	cmp    %ebx,0x24(%rsp)
  40df9f:	77 cf                	ja     40df70 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x1f0>
    pthread_attr_destroy(&attr);
  40dfa1:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40dfa6:	48 b8 b0 e9 dd ff ff 	movabs $0xffffffffffdde9b0,%rax
  40dfad:	ff ff ff 
  40dfb0:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  40dfb5:	49 89 df             	mov    %rbx,%r15
  40dfb8:	48 01 d8             	add    %rbx,%rax
  40dfbb:	ff d0                	callq  *%rax
    free(pthreads);
  40dfbd:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40dfc2:	48 b8 00 76 df ff ff 	movabs $0xffffffffffdf7600,%rax
  40dfc9:	ff ff ff 
  40dfcc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40dfd1:	49 89 df             	mov    %rbx,%r15
  40dfd4:	48 01 d8             	add    %rbx,%rax
  40dfd7:	ff d0                	callq  *%rax
}
  40dfd9:	48 81 c4 d8 07 00 00 	add    $0x7d8,%rsp
  40dfe0:	5b                   	pop    %rbx
  40dfe1:	5d                   	pop    %rbp
  40dfe2:	41 5c                	pop    %r12
  40dfe4:	41 5d                	pop    %r13
  40dfe6:	41 5e                	pop    %r14
  40dfe8:	41 5f                	pop    %r15
  40dfea:	c3                   	retq   
        if (err != 0) std::abort();
  40dfeb:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40dff0:	48 b8 50 e5 dd ff ff 	movabs $0xffffffffffdde550,%rax
  40dff7:	ff ff ff 
  40dffa:	49 89 df             	mov    %rbx,%r15
  40dffd:	48 01 d8             	add    %rbx,%rax
  40e000:	ff d0                	callq  *%rax
    assert(nthreads && logStackSize && stacksBase);
  40e002:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e007:	48 b8 40 81 df ff ff 	movabs $0xffffffffffdf8140,%rax
  40e00e:	ff ff ff 
  40e011:	ba 94 00 00 00       	mov    $0x94,%edx
  40e016:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40e01a:	48 b8 70 79 df ff ff 	movabs $0xffffffffffdf7970,%rax
  40e021:	ff ff ff 
  40e024:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40e028:	48 b8 60 7a df ff ff 	movabs $0xffffffffffdf7a60,%rax
  40e02f:	ff ff ff 
    assert(!err); (void) err;
  40e032:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  40e036:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  40e03d:	ff ff ff 
  40e040:	49 89 df             	mov    %rbx,%r15
  40e043:	48 01 d8             	add    %rbx,%rax
  40e046:	ff d0                	callq  *%rax
  40e048:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40e04d:	48 b8 40 81 df ff ff 	movabs $0xffffffffffdf8140,%rax
  40e054:	ff ff ff 
  40e057:	ba ae 00 00 00       	mov    $0xae,%edx
  40e05c:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  40e060:	48 b8 70 79 df ff ff 	movabs $0xffffffffffdf7970,%rax
  40e067:	ff ff ff 
  40e06a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  40e06e:	48 b8 b1 7d df ff ff 	movabs $0xffffffffffdf7db1,%rax
  40e075:	ff ff ff 
  40e078:	eb b8                	jmp    40e032 <_ZN5swarmL14launch_threadsEPFPvS0_E.constprop.632+0x2b2>
  40e07a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040e080 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623>:
    endl(basic_ostream<_CharT, _Traits>& __os)
  40e080:	41 57                	push   %r15
  40e082:	41 54                	push   %r12
  40e084:	49 bb 80 cf 21 00 00 	movabs $0x21cf80,%r11
  40e08b:	00 00 00 
  40e08e:	55                   	push   %rbp
  40e08f:	53                   	push   %rbx
  40e090:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 40e080 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623>
    { return flush(__os.put(__os.widen('\n'))); }
  40e097:	49 bc b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%r12
  40e09e:	ff ff ff 
  40e0a1:	4c 01 db             	add    %r11,%rbx
    endl(basic_ostream<_CharT, _Traits>& __os)
  40e0a4:	48 83 ec 08          	sub    $0x8,%rsp
    { return flush(__os.put(__os.widen('\n'))); }
  40e0a8:	49 8b 04 1c          	mov    (%r12,%rbx,1),%rax
  40e0ac:	48 8b 10             	mov    (%rax),%rdx
      { return __check_facet(_M_ctype).widen(__c); }
  40e0af:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  40e0b3:	48 8b ac 02 f0 00 00 	mov    0xf0(%rdx,%rax,1),%rbp
  40e0ba:	00 
      if (!__f)
  40e0bb:	48 85 ed             	test   %rbp,%rbp
  40e0be:	74 7e                	je     40e13e <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623+0xbe>
	if (_M_widen_ok)
  40e0c0:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
  40e0c4:	74 3a                	je     40e100 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623+0x80>
  40e0c6:	0f be 75 43          	movsbl 0x43(%rbp),%esi
  40e0ca:	48 b8 90 e3 dd ff ff 	movabs $0xffffffffffdde390,%rax
  40e0d1:	ff ff ff 
  40e0d4:	49 8b 3c 1c          	mov    (%r12,%rbx,1),%rdi
  40e0d8:	49 89 df             	mov    %rbx,%r15
  40e0db:	48 01 d8             	add    %rbx,%rax
  40e0de:	ff d0                	callq  *%rax
  40e0e0:	48 83 c4 08          	add    $0x8,%rsp
    { return __os.flush(); }
  40e0e4:	48 89 c7             	mov    %rax,%rdi
  40e0e7:	48 b8 20 e6 dd ff ff 	movabs $0xffffffffffdde620,%rax
  40e0ee:	ff ff ff 
  40e0f1:	48 01 d8             	add    %rbx,%rax
    { return flush(__os.put(__os.widen('\n'))); }
  40e0f4:	5b                   	pop    %rbx
  40e0f5:	5d                   	pop    %rbp
  40e0f6:	41 5c                	pop    %r12
  40e0f8:	41 5f                	pop    %r15
    { return __os.flush(); }
  40e0fa:	ff e0                	jmpq   *%rax
  40e0fc:	0f 1f 40 00          	nopl   0x0(%rax)
	this->_M_widen_init();
  40e100:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40e107:	ff ff ff 
  40e10a:	48 89 ef             	mov    %rbp,%rdi
  40e10d:	49 89 df             	mov    %rbx,%r15
  40e110:	48 01 d8             	add    %rbx,%rax
  40e113:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40e115:	48 8b 45 00          	mov    0x0(%rbp),%rax
  40e119:	48 ba 80 80 de ff ff 	movabs $0xffffffffffde8080,%rdx
  40e120:	ff ff ff 
  40e123:	be 0a 00 00 00       	mov    $0xa,%esi
  40e128:	48 01 da             	add    %rbx,%rdx
  40e12b:	48 8b 40 30          	mov    0x30(%rax),%rax
  40e12f:	48 39 d0             	cmp    %rdx,%rax
  40e132:	74 96                	je     40e0ca <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623+0x4a>
  40e134:	48 89 ef             	mov    %rbp,%rdi
  40e137:	ff d0                	callq  *%rax
  40e139:	0f be f0             	movsbl %al,%esi
  40e13c:	eb 8c                	jmp    40e0ca <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.constprop.623+0x4a>
	__throw_bad_cast();
  40e13e:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40e145:	ff ff ff 
  40e148:	49 89 df             	mov    %rbx,%r15
  40e14b:	48 01 d8             	add    %rbx,%rax
  40e14e:	ff d0                	callq  *%rax

000000000040e150 <_ZN5boost6detail15sp_counted_base7releaseEv.part.51>:
    void release() // nothrow
  40e150:	55                   	push   %rbp
  40e151:	53                   	push   %rbx
  40e152:	48 8d 2d f7 ff ff ff 	lea    -0x9(%rip),%rbp        # 40e150 <_ZN5boost6detail15sp_counted_base7releaseEv.part.51>
  40e159:	49 bb b0 ce 21 00 00 	movabs $0x21ceb0,%r11
  40e160:	00 00 00 
  40e163:	48 89 fb             	mov    %rdi,%rbx
  40e166:	48 83 ec 08          	sub    $0x8,%rsp
        {
            dispose();
  40e16a:	48 8b 07             	mov    (%rdi),%rax
  40e16d:	4c 01 dd             	add    %r11,%rbp
  40e170:	ff 50 10             	callq  *0x10(%rax)
        atomic_increment( &weak_count_ );
    }

    void weak_release() // nothrow
    {
        if( atomic_decrement( &weak_count_ ) == 1 )
  40e173:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  40e178:	74 0e                	je     40e188 <_ZN5boost6detail15sp_counted_base7releaseEv.part.51+0x38>
    }
  40e17a:	48 83 c4 08          	add    $0x8,%rsp
  40e17e:	5b                   	pop    %rbx
  40e17f:	5d                   	pop    %rbp
  40e180:	c3                   	retq   
  40e181:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        {
            destroy();
  40e188:	48 8b 03             	mov    (%rbx),%rax
  40e18b:	48 b9 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rcx
  40e192:	ff ff ff 
  40e195:	48 01 e9             	add    %rbp,%rcx
  40e198:	48 8b 50 18          	mov    0x18(%rax),%rdx
  40e19c:	48 39 ca             	cmp    %rcx,%rdx
  40e19f:	75 0f                	jne    40e1b0 <_ZN5boost6detail15sp_counted_base7releaseEv.part.51+0x60>
        delete this;
  40e1a1:	48 8b 40 08          	mov    0x8(%rax),%rax
    }
  40e1a5:	48 83 c4 08          	add    $0x8,%rsp
        delete this;
  40e1a9:	48 89 df             	mov    %rbx,%rdi
    }
  40e1ac:	5b                   	pop    %rbx
  40e1ad:	5d                   	pop    %rbp
        delete this;
  40e1ae:	ff e0                	jmpq   *%rax
    }
  40e1b0:	48 83 c4 08          	add    $0x8,%rsp
            destroy();
  40e1b4:	48 89 df             	mov    %rbx,%rdi
    }
  40e1b7:	5b                   	pop    %rbx
  40e1b8:	5d                   	pop    %rbp
            destroy();
  40e1b9:	ff e2                	jmpq   *%rdx
  40e1bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040e1c0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm>:
inline void bareRunner(Timestamp ts) {
    (*f)(ts);
}

template<typename F, F* f, typename T>
inline void bareRunner(Timestamp ts, uint64_t arg0) {
  40e1c0:	41 56                	push   %r14
  40e1c2:	41 55                	push   %r13
  40e1c4:	41 54                	push   %r12
  40e1c6:	55                   	push   %rbp
  40e1c7:	53                   	push   %rbx
// Requeuers were called "splitters" in the early Swarm papers
template <bool isFrame>
static inline void requeuer_impl(swarm::Timestamp, TaskDescriptors* descs) {
    // This requeuer can yield before an enqueue, so we always update the size
    // field directly
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e1c8:	48 8b 16             	mov    (%rsi),%rdx
  40e1cb:	48 89 f3             	mov    %rsi,%rbx
  40e1ce:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  40e1d2:	48 89 c1             	mov    %rax,%rcx
  40e1d5:	48 c1 e1 06          	shl    $0x6,%rcx
    while (descs->size) {
  40e1d9:	48 85 d2             	test   %rdx,%rdx
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e1dc:	0f 18 4c 0e 08       	prefetcht0 0x8(%rsi,%rcx,1)
    while (descs->size) {
  40e1e1:	75 38                	jne    40e21b <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x5b>
  40e1e3:	e9 ac 00 00 00       	jmpq   40e294 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0xd4>
  40e1e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e1ef:	00 
    register uint64_t r8  asm("r8")  = v3;
  40e1f0:	4d 89 c8             	mov    %r9,%r8
    register uint64_t r11 asm("r11") = v6;
  40e1f3:	4d 89 e3             	mov    %r12,%r11
    register uint64_t r9  asm("r9")  = v4;
  40e1f6:	4d 89 d1             	mov    %r10,%r9
            :);
  40e1f9:	4c 89 ef             	mov    %r13,%rdi
    register uint64_t r10 asm("r10") = v5;
  40e1fc:	49 89 ca             	mov    %rcx,%r10
            :);
  40e1ff:	4c 89 f6             	mov    %r14,%rsi
  40e202:	48 89 e9             	mov    %rbp,%rcx
  40e205:	48 87 c9             	xchg   %rcx,%rcx
        if (descs->size >= 3) {
            __builtin_prefetch(&descs->tds[descs->size - 3].ts);
        }
        __enqueueOrYield<isFrame>(descs->tds[descs->size - 1]);
        descs->size--;
  40e208:	48 8b 03             	mov    (%rbx),%rax
  40e20b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e20f:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e212:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e215:	74 7d                	je     40e294 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0xd4>
  40e217:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
        if (descs->size >= 3) {
  40e21b:	48 83 fa 02          	cmp    $0x2,%rdx
  40e21f:	0f 87 8b 00 00 00    	ja     40e2b0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0xf0>
  40e225:	48 c1 e2 06          	shl    $0x6,%rdx
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e229:	48 c1 e0 06          	shl    $0x6,%rax
  40e22d:	48 8d 34 13          	lea    (%rbx,%rdx,1),%rsi
  40e231:	48 01 d8             	add    %rbx,%rax
  40e234:	4c 8b 50 40          	mov    0x40(%rax),%r10
  40e238:	4c 8b 48 38          	mov    0x38(%rax),%r9
    EnqFlags ef = EnqFlags(YIELDIFFULL | (task.taskPtrAndFlags & 0x0fffful));
  40e23c:	48 8b 7e d0          	mov    -0x30(%rsi),%rdi
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e240:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40e244:	4c 8b 70 28          	mov    0x28(%rax),%r14
  40e248:	4c 8b 68 20          	mov    0x20(%rax),%r13
  40e24c:	4c 8b 60 18          	mov    0x18(%rax),%r12
}

/* Enqueue functions */

constexpr uint64_t enqueueMagicOp(uint64_t numArgs, EnqFlags hintFlags) {
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  40e250:	48 89 fd             	mov    %rdi,%rbp
    asm("sar $16,%%rcx;" : "=c"(taskPtr) : "c"(task.taskPtrAndFlags));
  40e253:	48 89 f9             	mov    %rdi,%rcx
  40e256:	81 e5 fa ff 00 00    	and    $0xfffa,%ebp
  40e25c:	48 c1 f9 10          	sar    $0x10,%rcx
  40e260:	48 81 cd 05 00 30 40 	or     $0x40300005,%rbp
    if (!skipTs && !skipTask && !skipHint) {
  40e267:	f7 c7 00 02 00 00    	test   $0x200,%edi
  40e26d:	75 81                	jne    40e1f0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x30>
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e26f:	48 8b 7e c8          	mov    -0x38(%rsi),%rdi
    register uint64_t r8  asm("r8")  = v3;
  40e273:	49 89 d0             	mov    %rdx,%r8
    register uint64_t r11 asm("r11") = v6;
  40e276:	49 89 cb             	mov    %rcx,%r11
            :);
  40e279:	4c 89 ee             	mov    %r13,%rsi
  40e27c:	48 89 e9             	mov    %rbp,%rcx
  40e27f:	4c 89 f2             	mov    %r14,%rdx
  40e282:	48 87 c9             	xchg   %rcx,%rcx
        descs->size--;
  40e285:	48 8b 03             	mov    (%rbx),%rax
  40e288:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e28c:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e28f:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e292:	75 83                	jne    40e217 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x57>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40e294:	b9 11 20 00 00       	mov    $0x2011,%ecx
  40e299:	48 89 df             	mov    %rbx,%rdi
  40e29c:	48 87 c9             	xchg   %rcx,%rcx
}
  40e29f:	5b                   	pop    %rbx
  40e2a0:	5d                   	pop    %rbp
  40e2a1:	41 5c                	pop    %r12
  40e2a3:	41 5d                	pop    %r13
  40e2a5:	41 5e                	pop    %r14
  40e2a7:	c3                   	retq   
  40e2a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e2af:	00 
            __builtin_prefetch(&descs->tds[descs->size - 3].ts);
  40e2b0:	48 89 d1             	mov    %rdx,%rcx
  40e2b3:	48 c1 e1 06          	shl    $0x6,%rcx
  40e2b7:	0f 18 8c 0b 48 ff ff 	prefetcht0 -0xb8(%rbx,%rcx,1)
  40e2be:	ff 
  40e2bf:	e9 61 ff ff ff       	jmpq   40e225 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L14frame_requeuerEmS2_EES2_EEvmm+0x65>
  40e2c4:	66 90                	xchg   %ax,%ax
  40e2c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40e2cd:	00 00 00 

000000000040e2d0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0) {
  40e2d0:	41 56                	push   %r14
  40e2d2:	41 55                	push   %r13
  40e2d4:	41 54                	push   %r12
  40e2d6:	55                   	push   %rbp
  40e2d7:	53                   	push   %rbx
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e2d8:	48 8b 16             	mov    (%rsi),%rdx
  40e2db:	48 89 f3             	mov    %rsi,%rbx
  40e2de:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  40e2e2:	48 89 c1             	mov    %rax,%rcx
  40e2e5:	48 c1 e1 06          	shl    $0x6,%rcx
    while (descs->size) {
  40e2e9:	48 85 d2             	test   %rdx,%rdx
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  40e2ec:	0f 18 4c 0e 08       	prefetcht0 0x8(%rsi,%rcx,1)
    while (descs->size) {
  40e2f1:	75 38                	jne    40e32b <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x5b>
  40e2f3:	e9 ac 00 00 00       	jmpq   40e3a4 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0xd4>
  40e2f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e2ff:	00 
    register uint64_t r8  asm("r8")  = v3;
  40e300:	4d 89 c8             	mov    %r9,%r8
    register uint64_t r11 asm("r11") = v6;
  40e303:	4d 89 e3             	mov    %r12,%r11
    register uint64_t r9  asm("r9")  = v4;
  40e306:	4d 89 d1             	mov    %r10,%r9
            :);
  40e309:	4c 89 ef             	mov    %r13,%rdi
    register uint64_t r10 asm("r10") = v5;
  40e30c:	49 89 ca             	mov    %rcx,%r10
            :);
  40e30f:	4c 89 f6             	mov    %r14,%rsi
  40e312:	48 89 e9             	mov    %rbp,%rcx
  40e315:	48 87 c9             	xchg   %rcx,%rcx
        descs->size--;
  40e318:	48 8b 03             	mov    (%rbx),%rax
  40e31b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e31f:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e322:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e325:	74 7d                	je     40e3a4 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0xd4>
  40e327:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
        if (descs->size >= 3) {
  40e32b:	48 83 fa 02          	cmp    $0x2,%rdx
  40e32f:	0f 87 8b 00 00 00    	ja     40e3c0 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0xf0>
  40e335:	48 c1 e2 06          	shl    $0x6,%rdx
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e339:	48 c1 e0 06          	shl    $0x6,%rax
  40e33d:	48 8d 34 13          	lea    (%rbx,%rdx,1),%rsi
  40e341:	48 01 d8             	add    %rbx,%rax
  40e344:	4c 8b 50 40          	mov    0x40(%rax),%r10
  40e348:	4c 8b 48 38          	mov    0x38(%rax),%r9
    EnqFlags ef = EnqFlags(YIELDIFFULL | (task.taskPtrAndFlags & 0x0fffful));
  40e34c:	48 8b 7e d0          	mov    -0x30(%rsi),%rdi
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e350:	48 8b 50 30          	mov    0x30(%rax),%rdx
  40e354:	4c 8b 70 28          	mov    0x28(%rax),%r14
  40e358:	4c 8b 68 20          	mov    0x20(%rax),%r13
  40e35c:	4c 8b 60 18          	mov    0x18(%rax),%r12
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  40e360:	48 89 fd             	mov    %rdi,%rbp
    asm("sar $16,%%rcx;" : "=c"(taskPtr) : "c"(task.taskPtrAndFlags));
  40e363:	48 89 f9             	mov    %rdi,%rcx
  40e366:	81 e5 fa ff 00 00    	and    $0xfffa,%ebp
  40e36c:	48 c1 f9 10          	sar    $0x10,%rcx
  40e370:	48 81 cd 05 00 10 40 	or     $0x40100005,%rbp
    if (!skipTs && !skipTask && !skipHint) {
  40e377:	f7 c7 00 02 00 00    	test   $0x200,%edi
  40e37d:	75 81                	jne    40e300 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x30>
    swarm::__enqueue_task_skipargs(magicOp, taskPtr, task.ts, task.hint
  40e37f:	48 8b 7e c8          	mov    -0x38(%rsi),%rdi
    register uint64_t r8  asm("r8")  = v3;
  40e383:	49 89 d0             	mov    %rdx,%r8
    register uint64_t r11 asm("r11") = v6;
  40e386:	49 89 cb             	mov    %rcx,%r11
            :);
  40e389:	4c 89 ee             	mov    %r13,%rsi
  40e38c:	48 89 e9             	mov    %rbp,%rcx
  40e38f:	4c 89 f2             	mov    %r14,%rdx
  40e392:	48 87 c9             	xchg   %rcx,%rcx
        descs->size--;
  40e395:	48 8b 03             	mov    (%rbx),%rax
  40e398:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    while (descs->size) {
  40e39c:	48 85 d2             	test   %rdx,%rdx
        descs->size--;
  40e39f:	48 89 13             	mov    %rdx,(%rbx)
    while (descs->size) {
  40e3a2:	75 83                	jne    40e327 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x57>
  40e3a4:	b9 11 20 00 00       	mov    $0x2011,%ecx
  40e3a9:	48 89 df             	mov    %rbx,%rdi
  40e3ac:	48 87 c9             	xchg   %rcx,%rcx
}
  40e3af:	5b                   	pop    %rbx
  40e3b0:	5d                   	pop    %rbp
  40e3b1:	41 5c                	pop    %r12
  40e3b3:	41 5d                	pop    %r13
  40e3b5:	41 5e                	pop    %r14
  40e3b7:	c3                   	retq   
  40e3b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40e3bf:	00 
            __builtin_prefetch(&descs->tds[descs->size - 3].ts);
  40e3c0:	48 89 d1             	mov    %rdx,%rcx
  40e3c3:	48 c1 e1 06          	shl    $0x6,%rcx
  40e3c7:	0f 18 8c 0b 48 ff ff 	prefetcht0 -0xb8(%rbx,%rcx,1)
  40e3ce:	ff 
  40e3cf:	e9 61 ff ff ff       	jmpq   40e335 <_ZN5swarm10bareRunnerIFvmPNS_15TaskDescriptorsEEXadL_ZNS_L8requeuerEmS2_EES2_EEvmm+0x65>
  40e3d4:	66 90                	xchg   %ax,%ax
  40e3d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40e3dd:	00 00 00 

000000000040e3e0 <_ZL14focalHeuristicPK10PlanResult>:
static inline int focalHeuristic(const PlanResult* solution) {
  40e3e0:	41 57                	push   %r15
  40e3e2:	41 56                	push   %r14
  40e3e4:	41 55                	push   %r13
  40e3e6:	41 54                	push   %r12
  40e3e8:	55                   	push   %rbp
  40e3e9:	53                   	push   %rbx
		max_t = std::max<int>(max_t, solution[i].states_size - 1);
  40e3ea:	66 0f 76 d2          	pcmpeqd %xmm2,%xmm2
  40e3ee:	f3 0f 7e 87 00 04 00 	movq   0x400(%rdi),%xmm0
  40e3f5:	00 
static inline int focalHeuristic(const PlanResult* solution) {
  40e3f6:	48 89 7c 24 e8       	mov    %rdi,-0x18(%rsp)
		max_t = std::max<int>(max_t, solution[i].states_size - 1);
  40e3fb:	f3 0f 7e 8f a0 10 00 	movq   0x10a0(%rdi),%xmm1
  40e402:	00 
  40e403:	0f 16 87 50 0a 00 00 	movhps 0xa50(%rdi),%xmm0
  40e40a:	0f 16 8f f0 16 00 00 	movhps 0x16f0(%rdi),%xmm1
  40e411:	f3 0f 7e 9f e0 29 00 	movq   0x29e0(%rdi),%xmm3
  40e418:	00 
  40e419:	0f 16 9f 30 30 00 00 	movhps 0x3030(%rdi),%xmm3
  40e420:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40e424:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40e428:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40e42c:	66 0f 6f e0          	movdqa %xmm0,%xmm4
  40e430:	66 0f 66 e1          	pcmpgtd %xmm1,%xmm4
  40e434:	f3 0f 7e 8f 40 1d 00 	movq   0x1d40(%rdi),%xmm1
  40e43b:	00 
  40e43c:	0f 16 8f 90 23 00 00 	movhps 0x2390(%rdi),%xmm1
  40e443:	66 0f db c4          	pand   %xmm4,%xmm0
  40e447:	0f c6 cb 88          	shufps $0x88,%xmm3,%xmm1
  40e44b:	66 0f fe ca          	paddd  %xmm2,%xmm1
  40e44f:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40e453:	66 0f 66 d8          	pcmpgtd %xmm0,%xmm3
  40e457:	66 0f db cb          	pand   %xmm3,%xmm1
  40e45b:	66 0f df d8          	pandn  %xmm0,%xmm3
  40e45f:	f3 0f 7e 87 80 36 00 	movq   0x3680(%rdi),%xmm0
  40e466:	00 
  40e467:	0f 16 87 d0 3c 00 00 	movhps 0x3cd0(%rdi),%xmm0
  40e46e:	66 0f eb d9          	por    %xmm1,%xmm3
  40e472:	f3 0f 7e 8f 20 43 00 	movq   0x4320(%rdi),%xmm1
  40e479:	00 
  40e47a:	0f 16 8f 70 49 00 00 	movhps 0x4970(%rdi),%xmm1
  40e481:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40e485:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40e489:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  40e48d:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  40e491:	66 0f db c1          	pand   %xmm1,%xmm0
  40e495:	66 0f df cb          	pandn  %xmm3,%xmm1
  40e499:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40e49d:	f3 0f 7e 8f 60 5c 00 	movq   0x5c60(%rdi),%xmm1
  40e4a4:	00 
  40e4a5:	66 0f eb d8          	por    %xmm0,%xmm3
  40e4a9:	f3 0f 7e 87 c0 4f 00 	movq   0x4fc0(%rdi),%xmm0
  40e4b0:	00 
  40e4b1:	0f 16 8f b0 62 00 00 	movhps 0x62b0(%rdi),%xmm1
  40e4b8:	0f 16 87 10 56 00 00 	movhps 0x5610(%rdi),%xmm0
  40e4bf:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  40e4c3:	66 0f fe c2          	paddd  %xmm2,%xmm0
  40e4c7:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  40e4cb:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  40e4cf:	66 0f db c1          	pand   %xmm1,%xmm0
  40e4d3:	66 0f df cb          	pandn  %xmm3,%xmm1
  40e4d7:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  40e4db:	f3 0f 7e 8f 00 69 00 	movq   0x6900(%rdi),%xmm1
  40e4e2:	00 
  40e4e3:	66 0f eb d8          	por    %xmm0,%xmm3
  40e4e7:	f3 0f 7e 87 a0 75 00 	movq   0x75a0(%rdi),%xmm0
  40e4ee:	00 
  40e4ef:	0f 16 87 f0 7b 00 00 	movhps 0x7bf0(%rdi),%xmm0
  40e4f6:	0f 16 8f 50 6f 00 00 	movhps 0x6f50(%rdi),%xmm1
  40e4fd:	0f c6 c8 88          	shufps $0x88,%xmm0,%xmm1
  40e501:	66 0f fe ca          	paddd  %xmm2,%xmm1
  40e505:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  40e509:	66 0f 66 c3          	pcmpgtd %xmm3,%xmm0
  40e50d:	66 0f db c8          	pand   %xmm0,%xmm1
  40e511:	66 0f df c3          	pandn  %xmm3,%xmm0
  40e515:	66 0f eb c8          	por    %xmm0,%xmm1
  40e519:	66 0f 6f d1          	movdqa %xmm1,%xmm2
  40e51d:	66 0f 73 da 08       	psrldq $0x8,%xmm2
  40e522:	66 0f 6f c2          	movdqa %xmm2,%xmm0
  40e526:	66 0f 66 c1          	pcmpgtd %xmm1,%xmm0
  40e52a:	66 0f db d0          	pand   %xmm0,%xmm2
  40e52e:	66 0f df c1          	pandn  %xmm1,%xmm0
  40e532:	66 0f eb c2          	por    %xmm2,%xmm0
  40e536:	66 0f 6f d0          	movdqa %xmm0,%xmm2
  40e53a:	66 0f 73 da 04       	psrldq $0x4,%xmm2
  40e53f:	66 0f 6f ca          	movdqa %xmm2,%xmm1
  40e543:	66 0f 66 c8          	pcmpgtd %xmm0,%xmm1
  40e547:	66 0f db d1          	pand   %xmm1,%xmm2
  40e54b:	66 0f df c8          	pandn  %xmm0,%xmm1
  40e54f:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  40e553:	66 0f eb c2          	por    %xmm2,%xmm0
  40e557:	66 0f 7e c3          	movd   %xmm0,%ebx
  40e55b:	66 0f 7e 44 24 e4    	movd   %xmm0,-0x1c(%rsp)
	for (int t = 0; t < max_t; ++t) {
  40e561:	85 db                	test   %ebx,%ebx
  40e563:	0f 8e 60 02 00 00    	jle    40e7c9 <_ZL14focalHeuristicPK10PlanResult+0x3e9>
  40e569:	48 8d 9f f0 77 00 00 	lea    0x77f0(%rdi),%rbx
  40e570:	4c 8d b7 40 7e 00 00 	lea    0x7e40(%rdi),%r14
  40e577:	45 31 e4             	xor    %r12d,%r12d
  40e57a:	48 c7 44 24 d0 10 00 	movq   $0x10,-0x30(%rsp)
  40e581:	00 00 
  40e583:	45 31 ed             	xor    %r13d,%r13d
  40e586:	45 31 ff             	xor    %r15d,%r15d
  40e589:	48 89 5c 24 f0       	mov    %rbx,-0x10(%rsp)
  40e58e:	48 8b 5c 24 e8       	mov    -0x18(%rsp),%rbx
  40e593:	4c 8b 4c 24 f0       	mov    -0x10(%rsp),%r9
  40e598:	48 89 d9             	mov    %rbx,%rcx
  40e59b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	if (t < solution[agentIdx].states_size) {
  40e5a0:	48 8b 83 00 04 00 00 	mov    0x400(%rbx),%rax
  40e5a7:	4c 39 e8             	cmp    %r13,%rax
  40e5aa:	77 74                	ja     40e620 <_ZL14focalHeuristicPK10PlanResult+0x240>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e5ac:	48 83 e8 01          	sub    $0x1,%rax
  40e5b0:	48 c1 e0 04          	shl    $0x4,%rax
  40e5b4:	48 01 d8             	add    %rbx,%rax
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e5b7:	4c 39 cb             	cmp    %r9,%rbx
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e5ba:	8b 78 04             	mov    0x4(%rax),%edi
  40e5bd:	44 8b 40 08          	mov    0x8(%rax),%r8d
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e5c1:	74 6c                	je     40e62f <_ZL14focalHeuristicPK10PlanResult+0x24f>
  40e5c3:	48 81 c3 50 06 00 00 	add    $0x650,%rbx
  40e5ca:	48 89 da             	mov    %rbx,%rdx
  40e5cd:	eb 22                	jmp    40e5f1 <_ZL14focalHeuristicPK10PlanResult+0x211>
  40e5cf:	90                   	nop
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e5d0:	48 83 e8 01          	sub    $0x1,%rax
  40e5d4:	48 c1 e0 04          	shl    $0x4,%rax
  40e5d8:	48 01 d0             	add    %rdx,%rax
  40e5db:	8b 70 04             	mov    0x4(%rax),%esi
  40e5de:	8b 40 08             	mov    0x8(%rax),%eax

  bool operator==(const State& s) const {
    return time == s.time && x == s.x && y == s.y;
  }

  bool equalExceptTime(const State& s) const { return x == s.x && y == s.y; }
  40e5e1:	39 f7                	cmp    %esi,%edi
  40e5e3:	74 26                	je     40e60b <_ZL14focalHeuristicPK10PlanResult+0x22b>
  40e5e5:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e5ec:	4c 39 f2             	cmp    %r14,%rdx
  40e5ef:	74 af                	je     40e5a0 <_ZL14focalHeuristicPK10PlanResult+0x1c0>
	if (t < solution[agentIdx].states_size) {
  40e5f1:	48 8b 82 00 04 00 00 	mov    0x400(%rdx),%rax
  40e5f8:	4c 39 e8             	cmp    %r13,%rax
  40e5fb:	76 d3                	jbe    40e5d0 <_ZL14focalHeuristicPK10PlanResult+0x1f0>
		return solution[agentIdx].states[t].state;
  40e5fd:	42 8b 74 22 04       	mov    0x4(%rdx,%r12,1),%esi
  40e602:	42 8b 44 22 08       	mov    0x8(%rdx,%r12,1),%eax
  40e607:	39 f7                	cmp    %esi,%edi
  40e609:	75 da                	jne    40e5e5 <_ZL14focalHeuristicPK10PlanResult+0x205>
					++numConflicts;
  40e60b:	44 39 c0             	cmp    %r8d,%eax
  40e60e:	0f 94 c0             	sete   %al
  40e611:	0f b6 c0             	movzbl %al,%eax
  40e614:	41 01 c7             	add    %eax,%r15d
  40e617:	eb cc                	jmp    40e5e5 <_ZL14focalHeuristicPK10PlanResult+0x205>
  40e619:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e620:	4c 39 cb             	cmp    %r9,%rbx
		return solution[agentIdx].states[t].state;
  40e623:	42 8b 7c 23 04       	mov    0x4(%rbx,%r12,1),%edi
  40e628:	46 8b 44 23 08       	mov    0x8(%rbx,%r12,1),%r8d
			for (size_t j = i + 1; j < ROBOT_NUMS;++j) {
  40e62d:	75 94                	jne    40e5c3 <_ZL14focalHeuristicPK10PlanResult+0x1e3>
  40e62f:	48 8b 44 24 d0       	mov    -0x30(%rsp),%rax
  40e634:	49 8d 6d 01          	lea    0x1(%r13),%rbp
  40e638:	48 89 5c 24 b8       	mov    %rbx,-0x48(%rsp)
  40e63d:	4c 89 64 24 d8       	mov    %r12,-0x28(%rsp)
  40e642:	48 05 58 06 00 00    	add    $0x658,%rax
  40e648:	48 89 44 24 c0       	mov    %rax,-0x40(%rsp)
  40e64d:	49 8d 84 24 58 06 00 	lea    0x658(%r12),%rax
  40e654:	00 
  40e655:	48 89 44 24 c8       	mov    %rax,-0x38(%rsp)
	if (t < solution[agentIdx].states_size) {
  40e65a:	48 8b 81 00 04 00 00 	mov    0x400(%rcx),%rax
  40e661:	4c 39 e8             	cmp    %r13,%rax
  40e664:	0f 87 01 01 00 00    	ja     40e76b <_ZL14focalHeuristicPK10PlanResult+0x38b>
  40e66a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e670:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  40e674:	48 c1 e2 04          	shl    $0x4,%rdx
  40e678:	48 01 ca             	add    %rcx,%rdx
	if (t < solution[agentIdx].states_size) {
  40e67b:	48 39 e8             	cmp    %rbp,%rax
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e67e:	44 8b 52 04          	mov    0x4(%rdx),%r10d
  40e682:	8b 5a 08             	mov    0x8(%rdx),%ebx
	if (t < solution[agentIdx].states_size) {
  40e685:	0f 87 f7 00 00 00    	ja     40e782 <_ZL14focalHeuristicPK10PlanResult+0x3a2>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e68b:	48 83 e8 01          	sub    $0x1,%rax
  40e68f:	48 c1 e0 04          	shl    $0x4,%rax
  40e693:	48 01 c8             	add    %rcx,%rax
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e696:	48 3b 4c 24 b8       	cmp    -0x48(%rsp),%rcx
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e69b:	44 8b 58 04          	mov    0x4(%rax),%r11d
  40e69f:	8b 40 08             	mov    0x8(%rax),%eax
  40e6a2:	89 44 24 e0          	mov    %eax,-0x20(%rsp)
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e6a6:	0f 84 f3 00 00 00    	je     40e79f <_ZL14focalHeuristicPK10PlanResult+0x3bf>
  40e6ac:	48 8b 44 24 c0       	mov    -0x40(%rsp),%rax
  40e6b1:	4c 8d a1 50 06 00 00 	lea    0x650(%rcx),%r12
  40e6b8:	4c 89 e2             	mov    %r12,%rdx
  40e6bb:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
  40e6bf:	48 03 4c 24 c8       	add    -0x38(%rsp),%rcx
  40e6c4:	eb 52                	jmp    40e718 <_ZL14focalHeuristicPK10PlanResult+0x338>
  40e6c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40e6cd:	00 00 00 
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e6d0:	48 8d 78 ff          	lea    -0x1(%rax),%rdi
  40e6d4:	48 c1 e7 04          	shl    $0x4,%rdi
  40e6d8:	48 01 d7             	add    %rdx,%rdi
	if (t < solution[agentIdx].states_size) {
  40e6db:	48 39 e8             	cmp    %rbp,%rax
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e6de:	44 8b 47 04          	mov    0x4(%rdi),%r8d
  40e6e2:	44 8b 4f 08          	mov    0x8(%rdi),%r9d
	if (t < solution[agentIdx].states_size) {
  40e6e6:	77 48                	ja     40e730 <_ZL14focalHeuristicPK10PlanResult+0x350>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40e6e8:	48 83 e8 01          	sub    $0x1,%rax
  40e6ec:	48 c1 e0 04          	shl    $0x4,%rax
  40e6f0:	48 01 d0             	add    %rdx,%rax
  40e6f3:	8b 78 04             	mov    0x4(%rax),%edi
  40e6f6:	8b 40 08             	mov    0x8(%rax),%eax
  40e6f9:	44 39 d7             	cmp    %r10d,%edi
  40e6fc:	74 3c                	je     40e73a <_ZL14focalHeuristicPK10PlanResult+0x35a>
  40e6fe:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
  40e705:	48 81 c6 50 06 00 00 	add    $0x650,%rsi
  40e70c:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e713:	4c 39 f2             	cmp    %r14,%rdx
  40e716:	74 40                	je     40e758 <_ZL14focalHeuristicPK10PlanResult+0x378>
	if (t < solution[agentIdx].states_size) {
  40e718:	48 8b 82 00 04 00 00 	mov    0x400(%rdx),%rax
  40e71f:	4c 39 e8             	cmp    %r13,%rax
  40e722:	76 ac                	jbe    40e6d0 <_ZL14focalHeuristicPK10PlanResult+0x2f0>
  40e724:	48 39 e8             	cmp    %rbp,%rax
		return solution[agentIdx].states[t].state;
  40e727:	44 8b 41 fc          	mov    -0x4(%rcx),%r8d
  40e72b:	44 8b 09             	mov    (%rcx),%r9d
	if (t < solution[agentIdx].states_size) {
  40e72e:	76 b8                	jbe    40e6e8 <_ZL14focalHeuristicPK10PlanResult+0x308>
		return solution[agentIdx].states[t].state;
  40e730:	8b 7e fc             	mov    -0x4(%rsi),%edi
  40e733:	8b 06                	mov    (%rsi),%eax
  40e735:	44 39 d7             	cmp    %r10d,%edi
  40e738:	75 c4                	jne    40e6fe <_ZL14focalHeuristicPK10PlanResult+0x31e>
  40e73a:	39 c3                	cmp    %eax,%ebx
  40e73c:	75 c0                	jne    40e6fe <_ZL14focalHeuristicPK10PlanResult+0x31e>
  40e73e:	45 39 d8             	cmp    %r11d,%r8d
  40e741:	75 bb                	jne    40e6fe <_ZL14focalHeuristicPK10PlanResult+0x31e>
					++numConflicts;
  40e743:	31 c0                	xor    %eax,%eax
  40e745:	44 3b 4c 24 e0       	cmp    -0x20(%rsp),%r9d
  40e74a:	0f 94 c0             	sete   %al
  40e74d:	41 01 c7             	add    %eax,%r15d
  40e750:	eb ac                	jmp    40e6fe <_ZL14focalHeuristicPK10PlanResult+0x31e>
  40e752:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40e758:	4c 89 e1             	mov    %r12,%rcx
	if (t < solution[agentIdx].states_size) {
  40e75b:	48 8b 81 00 04 00 00 	mov    0x400(%rcx),%rax
  40e762:	4c 39 e8             	cmp    %r13,%rax
  40e765:	0f 86 05 ff ff ff    	jbe    40e670 <_ZL14focalHeuristicPK10PlanResult+0x290>
		return solution[agentIdx].states[t].state;
  40e76b:	48 8b 5c 24 d8       	mov    -0x28(%rsp),%rbx
	if (t < solution[agentIdx].states_size) {
  40e770:	48 39 e8             	cmp    %rbp,%rax
		return solution[agentIdx].states[t].state;
  40e773:	44 8b 54 19 04       	mov    0x4(%rcx,%rbx,1),%r10d
  40e778:	8b 5c 19 08          	mov    0x8(%rcx,%rbx,1),%ebx
	if (t < solution[agentIdx].states_size) {
  40e77c:	0f 86 09 ff ff ff    	jbe    40e68b <_ZL14focalHeuristicPK10PlanResult+0x2ab>
		return solution[agentIdx].states[t].state;
  40e782:	48 8b 44 24 d0       	mov    -0x30(%rsp),%rax
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e787:	48 3b 4c 24 b8       	cmp    -0x48(%rsp),%rcx
		return solution[agentIdx].states[t].state;
  40e78c:	44 8b 5c 01 04       	mov    0x4(%rcx,%rax,1),%r11d
  40e791:	8b 44 01 08          	mov    0x8(%rcx,%rax,1),%eax
  40e795:	89 44 24 e0          	mov    %eax,-0x20(%rsp)
			for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  40e799:	0f 85 0d ff ff ff    	jne    40e6ac <_ZL14focalHeuristicPK10PlanResult+0x2cc>
  40e79f:	4c 8b 64 24 d8       	mov    -0x28(%rsp),%r12
  40e7a4:	48 83 44 24 d0 10    	addq   $0x10,-0x30(%rsp)
  40e7aa:	49 89 ed             	mov    %rbp,%r13
  40e7ad:	49 83 c4 10          	add    $0x10,%r12
	for (int t = 0; t < max_t; ++t) {
  40e7b1:	39 6c 24 e4          	cmp    %ebp,-0x1c(%rsp)
  40e7b5:	0f 8f d3 fd ff ff    	jg     40e58e <_ZL14focalHeuristicPK10PlanResult+0x1ae>
}
  40e7bb:	5b                   	pop    %rbx
  40e7bc:	44 89 f8             	mov    %r15d,%eax
  40e7bf:	5d                   	pop    %rbp
  40e7c0:	41 5c                	pop    %r12
  40e7c2:	41 5d                	pop    %r13
  40e7c4:	41 5e                	pop    %r14
  40e7c6:	41 5f                	pop    %r15
  40e7c8:	c3                   	retq   
	for (int t = 0; t < max_t; ++t) {
  40e7c9:	45 31 ff             	xor    %r15d,%r15d
}
  40e7cc:	5b                   	pop    %rbx
  40e7cd:	44 89 f8             	mov    %r15d,%eax
  40e7d0:	5d                   	pop    %rbp
  40e7d1:	41 5c                	pop    %r12
  40e7d3:	41 5d                	pop    %r13
  40e7d5:	41 5e                	pop    %r14
  40e7d7:	41 5f                	pop    %r15
  40e7d9:	c3                   	retq   
  40e7da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040e7e0 <_ZlsRSoRK6Action>:
  Left,
  Right,
  Wait,
};

std::ostream& operator<<(std::ostream& os, const Action& a) {
  40e7e0:	41 57                	push   %r15
  40e7e2:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 40e7e0 <_ZlsRSoRK6Action>
  40e7e9:	53                   	push   %rbx
  40e7ea:	49 bb 20 c8 21 00 00 	movabs $0x21c820,%r11
  40e7f1:	00 00 00 
  40e7f4:	48 89 fb             	mov    %rdi,%rbx
  40e7f7:	48 83 ec 08          	sub    $0x8,%rsp
  40e7fb:	4c 01 d8             	add    %r11,%rax
  switch (a) {
  40e7fe:	83 3e 04             	cmpl   $0x4,(%rsi)
  40e801:	77 3d                	ja     40e840 <_ZlsRSoRK6Action+0x60>
  40e803:	8b 0e                	mov    (%rsi),%ecx
  40e805:	48 8d 15 f4 48 01 00 	lea    0x148f4(%rip),%rdx        # 423100 <_IO_stdin_used+0x7e0>
  40e80c:	48 03 14 ca          	add    (%rdx,%rcx,8),%rdx
  40e810:	ff e2                	jmpq   *%rdx
  40e812:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	__ostream_insert(__out, __s,
  40e818:	ba 05 00 00 00       	mov    $0x5,%edx
  40e81d:	48 b9 c3 7d df ff ff 	movabs $0xffffffffffdf7dc3,%rcx
  40e824:	ff ff ff 
  40e827:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
  40e82b:	48 b9 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rcx
  40e832:	ff ff ff 
  40e835:	48 89 df             	mov    %rbx,%rdi
  40e838:	49 89 c7             	mov    %rax,%r15
  40e83b:	48 01 c1             	add    %rax,%rcx
  40e83e:	ff d1                	callq  *%rcx
    case Action::Wait:
      os << "Wait";
      break;
  }
  return os;
}
  40e840:	48 83 c4 08          	add    $0x8,%rsp
  40e844:	48 89 d8             	mov    %rbx,%rax
  40e847:	5b                   	pop    %rbx
  40e848:	41 5f                	pop    %r15
  40e84a:	c3                   	retq   
  40e84b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  40e850:	ba 04 00 00 00       	mov    $0x4,%edx
  40e855:	48 b9 c9 7d df ff ff 	movabs $0xffffffffffdf7dc9,%rcx
  40e85c:	ff ff ff 
  40e85f:	eb c6                	jmp    40e827 <_ZlsRSoRK6Action+0x47>
  40e861:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40e868:	ba 02 00 00 00       	mov    $0x2,%edx
  40e86d:	48 b9 b6 7d df ff ff 	movabs $0xffffffffffdf7db6,%rcx
  40e874:	ff ff ff 
  40e877:	eb ae                	jmp    40e827 <_ZlsRSoRK6Action+0x47>
  40e879:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40e880:	ba 04 00 00 00       	mov    $0x4,%edx
  40e885:	48 b9 b9 7d df ff ff 	movabs $0xffffffffffdf7db9,%rcx
  40e88c:	ff ff ff 
  40e88f:	eb 96                	jmp    40e827 <_ZlsRSoRK6Action+0x47>
  40e891:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40e898:	ba 04 00 00 00       	mov    $0x4,%edx
  40e89d:	48 b9 be 7d df ff ff 	movabs $0xffffffffffdf7dbe,%rcx
  40e8a4:	ff ff ff 
  40e8a7:	e9 7b ff ff ff       	jmpq   40e827 <_ZlsRSoRK6Action+0x47>
  40e8ac:	0f 1f 40 00          	nopl   0x0(%rax)

000000000040e8b0 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE>:
	Cost focalHeuristic;
	int stat; //Open 0 or Close 1

};

void dump_openset(std::vector<AstarNode>& openSet) {
  40e8b0:	41 57                	push   %r15
  40e8b2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40e8b0 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE>
  40e8b9:	41 56                	push   %r14
  40e8bb:	49 bb 50 c7 21 00 00 	movabs $0x21c750,%r11
  40e8c2:	00 00 00 
  40e8c5:	41 55                	push   %r13
  40e8c7:	41 54                	push   %r12
  40e8c9:	55                   	push   %rbp
  40e8ca:	53                   	push   %rbx
  40e8cb:	4d 01 df             	add    %r11,%r15
  40e8ce:	49 ba b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%r10
  40e8d5:	ff ff ff 
  40e8d8:	48 b8 ce 7d df ff ff 	movabs $0xffffffffffdf7dce,%rax
  40e8df:	ff ff ff 
  40e8e2:	ba 04 00 00 00       	mov    $0x4,%edx
  40e8e7:	48 83 ec 68          	sub    $0x68,%rsp
      : _M_current(__i) { }
  40e8eb:	4c 8b 4f 08          	mov    0x8(%rdi),%r9
  40e8ef:	4f 8b 2c 3a          	mov    (%r10,%r15,1),%r13
  40e8f3:	4a 8d 34 38          	lea    (%rax,%r15,1),%rsi
  40e8f7:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40e8fc:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  40e903:	ff ff ff 
  40e906:	4c 89 14 24          	mov    %r10,(%rsp)
  40e90a:	4c 8b 37             	mov    (%rdi),%r14
  40e90d:	4a 8d 1c 38          	lea    (%rax,%r15,1),%rbx
  40e911:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  40e916:	4c 89 ef             	mov    %r13,%rdi
  40e919:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40e91e:	ff d3                	callq  *%rbx
	return __pf(*this);
  40e920:	48 b8 80 30 de ff ff 	movabs $0xffffffffffde3080,%rax
  40e927:	ff ff ff 
  40e92a:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
  40e92e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40e933:	41 ff d4             	callq  *%r12
	__ostream_insert(__out, __s,
  40e936:	48 b8 d3 7d df ff ff 	movabs $0xffffffffffdf7dd3,%rax
  40e93d:	ff ff ff 
  40e940:	ba 18 00 00 00       	mov    $0x18,%edx
  40e945:	4c 89 ef             	mov    %r13,%rdi
  40e948:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40e94c:	ff d3                	callq  *%rbx
	return __pf(*this);
  40e94e:	41 ff d4             	callq  *%r12
	auto iter = openSet.begin();
	auto iterEnd = openSet.end();
	std::cout << "----" << std::endl;
	std::cout << "dump_openset AstarNode: " << std::endl;
	int index = 0;
	for (; iter != iterEnd; ++iter) {
  40e951:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  40e956:	4c 8b 14 24          	mov    (%rsp),%r10
  40e95a:	4d 39 f1             	cmp    %r14,%r9
  40e95d:	0f 84 f4 01 00 00    	je     40eb57 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0x2a7>
	__ostream_insert(__out, __s,
  40e963:	48 b8 4a 7e df ff ff 	movabs $0xffffffffffdf7e4a,%rax
  40e96a:	ff ff ff 
  40e96d:	45 31 c0             	xor    %r8d,%r8d
  40e970:	48 89 dd             	mov    %rbx,%rbp
  40e973:	4c 01 f8             	add    %r15,%rax
  40e976:	4d 89 f4             	mov    %r14,%r12
  40e979:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  40e97e:	48 b8 ec 7d df ff ff 	movabs $0xffffffffffdf7dec,%rax
  40e985:	ff ff ff 
  40e988:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40e98d:	eb 12                	jmp    40e9a1 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0xf1>
  40e98f:	90                   	nop
  40e990:	49 83 c4 1c          	add    $0x1c,%r12
		if(iter->stat == 0) {
			std::cout << index << ": " << *iter << std::endl; 
		}
		index++;
  40e994:	41 83 c0 01          	add    $0x1,%r8d
	for (; iter != iterEnd; ++iter) {
  40e998:	4d 39 e1             	cmp    %r12,%r9
  40e99b:	0f 84 b6 01 00 00    	je     40eb57 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0x2a7>
		if(iter->stat == 0) {
  40e9a1:	41 8b 44 24 18       	mov    0x18(%r12),%eax
  40e9a6:	85 c0                	test   %eax,%eax
  40e9a8:	75 e6                	jne    40e990 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0xe0>
			std::cout << index << ": " << *iter << std::endl; 
  40e9aa:	48 bb 00 ea dd ff ff 	movabs $0xffffffffffddea00,%rbx
  40e9b1:	ff ff ff 
  40e9b4:	44 89 c6             	mov    %r8d,%esi
  40e9b7:	4b 8b 3c 3a          	mov    (%r10,%r15,1),%rdi
  40e9bb:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  40e9c0:	44 89 44 24 2c       	mov    %r8d,0x2c(%rsp)
  40e9c5:	4c 01 fb             	add    %r15,%rbx
  40e9c8:	4c 89 54 24 20       	mov    %r10,0x20(%rsp)
  40e9cd:	49 83 c4 1c          	add    $0x1c,%r12
  40e9d1:	ff d3                	callq  *%rbx
  40e9d3:	ba 02 00 00 00       	mov    $0x2,%edx
  40e9d8:	49 89 c5             	mov    %rax,%r13
  40e9db:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  40e9e0:	48 89 c7             	mov    %rax,%rdi
  40e9e3:	ff d5                	callq  *%rbp
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40e9e5:	41 8b 4c 24 f8       	mov    -0x8(%r12),%ecx
  40e9ea:	41 8b 54 24 f4       	mov    -0xc(%r12),%edx
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40e9ef:	41 8b 7c 24 f0       	mov    -0x10(%r12),%edi
			<< " stat: " << AstarNode.stat;
  40e9f4:	41 8b 44 24 fc       	mov    -0x4(%r12),%eax
  40e9f9:	4c 8b 5c 24 40       	mov    0x40(%rsp),%r11
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40e9fe:	89 4c 24 14          	mov    %ecx,0x14(%rsp)
  40ea02:	89 54 24 18          	mov    %edx,0x18(%rsp)
  40ea06:	ba 07 00 00 00       	mov    $0x7,%edx
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40ea0b:	89 7c 24 1c          	mov    %edi,0x1c(%rsp)
			<< " stat: " << AstarNode.stat;
  40ea0f:	89 44 24 08          	mov    %eax,0x8(%rsp)
  40ea13:	4c 89 ef             	mov    %r13,%rdi
  40ea16:	4b 8d 34 1f          	lea    (%r15,%r11,1),%rsi
  40ea1a:	ff d5                	callq  *%rbp

  friend std::ostream& operator<<(std::ostream& os, const State& s) {
    return os << s.time << ": (" << s.x << "," << s.y << ")";
  40ea1c:	45 8b 5c 24 ec       	mov    -0x14(%r12),%r11d
  40ea21:	45 8b 74 24 e8       	mov    -0x18(%r12),%r14d
  40ea26:	4c 89 ef             	mov    %r13,%rdi
  40ea29:	41 8b 74 24 e4       	mov    -0x1c(%r12),%esi
  40ea2e:	4c 89 2c 24          	mov    %r13,(%rsp)
  40ea32:	44 89 5c 24 28       	mov    %r11d,0x28(%rsp)
  40ea37:	ff d3                	callq  *%rbx
  40ea39:	49 89 c5             	mov    %rax,%r13
  40ea3c:	48 b8 f4 7d df ff ff 	movabs $0xffffffffffdf7df4,%rax
  40ea43:	ff ff ff 
  40ea46:	ba 03 00 00 00       	mov    $0x3,%edx
  40ea4b:	4c 89 ef             	mov    %r13,%rdi
  40ea4e:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ea52:	ff d5                	callq  *%rbp
  40ea54:	44 89 f6             	mov    %r14d,%esi
  40ea57:	4c 89 ef             	mov    %r13,%rdi
  40ea5a:	ff d3                	callq  *%rbx
  40ea5c:	49 89 c6             	mov    %rax,%r14
  40ea5f:	48 b8 f8 7d df ff ff 	movabs $0xffffffffffdf7df8,%rax
  40ea66:	ff ff ff 
  40ea69:	ba 01 00 00 00       	mov    $0x1,%edx
  40ea6e:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ea72:	4c 89 f7             	mov    %r14,%rdi
  40ea75:	ff d5                	callq  *%rbp
  40ea77:	8b 74 24 28          	mov    0x28(%rsp),%esi
  40ea7b:	4c 89 f7             	mov    %r14,%rdi
  40ea7e:	ff d3                	callq  *%rbx
  40ea80:	49 89 c5             	mov    %rax,%r13
  40ea83:	48 b8 b6 7e df ff ff 	movabs $0xffffffffffdf7eb6,%rax
  40ea8a:	ff ff ff 
  40ea8d:	ba 01 00 00 00       	mov    $0x1,%edx
  40ea92:	4c 89 ef             	mov    %r13,%rdi
  40ea95:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ea99:	ff d5                	callq  *%rbp
  40ea9b:	48 b8 fa 7d df ff ff 	movabs $0xffffffffffdf7dfa,%rax
  40eaa2:	ff ff ff 
  40eaa5:	ba 09 00 00 00       	mov    $0x9,%edx
  40eaaa:	4c 89 ef             	mov    %r13,%rdi
  40eaad:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eab1:	ff d5                	callq  *%rbp
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40eab3:	4c 89 ef             	mov    %r13,%rdi
  40eab6:	8b 74 24 1c          	mov    0x1c(%rsp),%esi
  40eaba:	ff d3                	callq  *%rbx
  40eabc:	49 89 c5             	mov    %rax,%r13
  40eabf:	48 b8 04 7e df ff ff 	movabs $0xffffffffffdf7e04,%rax
  40eac6:	ff ff ff 
  40eac9:	ba 09 00 00 00       	mov    $0x9,%edx
  40eace:	4c 89 ef             	mov    %r13,%rdi
  40ead1:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40ead5:	ff d5                	callq  *%rbp
  40ead7:	4c 89 ef             	mov    %r13,%rdi
  40eada:	8b 74 24 18          	mov    0x18(%rsp),%esi
  40eade:	ff d3                	callq  *%rbx
  40eae0:	49 89 c5             	mov    %rax,%r13
  40eae3:	48 b8 0e 7e df ff ff 	movabs $0xffffffffffdf7e0e,%rax
  40eaea:	ff ff ff 
  40eaed:	ba 08 00 00 00       	mov    $0x8,%edx
  40eaf2:	4c 89 ef             	mov    %r13,%rdi
  40eaf5:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eaf9:	ff d5                	callq  *%rbp
			<< " stat: " << AstarNode.stat;
  40eafb:	4c 89 ef             	mov    %r13,%rdi
  40eafe:	8b 74 24 14          	mov    0x14(%rsp),%esi
  40eb02:	ff d3                	callq  *%rbx
  40eb04:	49 89 c5             	mov    %rax,%r13
  40eb07:	48 b8 17 7e df ff ff 	movabs $0xffffffffffdf7e17,%rax
  40eb0e:	ff ff ff 
  40eb11:	ba 07 00 00 00       	mov    $0x7,%edx
  40eb16:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  40eb1a:	4c 89 ef             	mov    %r13,%rdi
  40eb1d:	ff d5                	callq  *%rbp
  40eb1f:	8b 74 24 08          	mov    0x8(%rsp),%esi
  40eb23:	4c 89 ef             	mov    %r13,%rdi
  40eb26:	ff d3                	callq  *%rbx
	return __pf(*this);
  40eb28:	48 b8 f0 e4 dd ff ff 	movabs $0xffffffffffdde4f0,%rax
  40eb2f:	ff ff ff 
  40eb32:	48 8b 3c 24          	mov    (%rsp),%rdi
  40eb36:	4c 01 f8             	add    %r15,%rax
  40eb39:	ff d0                	callq  *%rax
  40eb3b:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  40eb40:	44 8b 44 24 2c       	mov    0x2c(%rsp),%r8d
  40eb45:	4c 8b 54 24 20       	mov    0x20(%rsp),%r10
		index++;
  40eb4a:	41 83 c0 01          	add    $0x1,%r8d
	for (; iter != iterEnd; ++iter) {
  40eb4e:	4d 39 e1             	cmp    %r12,%r9
  40eb51:	0f 85 4a fe ff ff    	jne    40e9a1 <_Z12dump_opensetRSt6vectorI9AstarNodeSaIS0_EE+0xf1>
	__ostream_insert(__out, __s,
  40eb57:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  40eb5c:	4b 8b 3c 3a          	mov    (%r10,%r15,1),%rdi
  40eb60:	ba 04 00 00 00       	mov    $0x4,%edx
  40eb65:	4a 8d 34 38          	lea    (%rax,%r15,1),%rsi
  40eb69:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  40eb6e:	4c 01 f8             	add    %r15,%rax
  40eb71:	ff d0                	callq  *%rax
	return __pf(*this);
  40eb73:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
	}
	std::cout << "----" << std::endl;
}
  40eb78:	48 83 c4 68          	add    $0x68,%rsp
  40eb7c:	5b                   	pop    %rbx
  40eb7d:	5d                   	pop    %rbp
  40eb7e:	4c 01 f8             	add    %r15,%rax
  40eb81:	41 5c                	pop    %r12
  40eb83:	41 5d                	pop    %r13
  40eb85:	41 5e                	pop    %r14
  40eb87:	41 5f                	pop    %r15
  40eb89:	ff e0                	jmpq   *%rax
  40eb8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040eb90 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE>:

void dump_focalset(std::vector<AstarNode>& openSet, std::vector<int>& focalSet) {
  40eb90:	41 57                	push   %r15
  40eb92:	41 56                	push   %r14
  40eb94:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 40eb90 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE>
  40eb9b:	41 55                	push   %r13
  40eb9d:	41 54                	push   %r12
  40eb9f:	49 bb 70 c4 21 00 00 	movabs $0x21c470,%r11
  40eba6:	00 00 00 
  40eba9:	55                   	push   %rbp
  40ebaa:	53                   	push   %rbx
  40ebab:	4d 01 de             	add    %r11,%r14
	__ostream_insert(__out, __s,
  40ebae:	48 b9 ce 7d df ff ff 	movabs $0xffffffffffdf7dce,%rcx
  40ebb5:	ff ff ff 
  40ebb8:	ba 04 00 00 00       	mov    $0x4,%edx
  40ebbd:	4d 89 f7             	mov    %r14,%r15
  40ebc0:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  40ebc7:	4c 8b 2e             	mov    (%rsi),%r13
  40ebca:	48 8b 46 08          	mov    0x8(%rsi),%rax
  40ebce:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
  40ebd5:	00 
  40ebd6:	4a 8d 34 31          	lea    (%rcx,%r14,1),%rsi
  40ebda:	48 b9 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rcx
  40ebe1:	ff ff ff 
  40ebe4:	4a 8b 2c 31          	mov    (%rcx,%r14,1),%rbp
  40ebe8:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
  40ebef:	00 
  40ebf0:	48 b9 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rcx
  40ebf7:	ff ff ff 
  40ebfa:	4a 8d 1c 31          	lea    (%rcx,%r14,1),%rbx
  40ebfe:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  40ec03:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
  40ec0a:	00 
  40ec0b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40ec10:	48 89 ef             	mov    %rbp,%rdi
  40ec13:	ff d3                	callq  *%rbx
	return __pf(*this);
  40ec15:	48 b9 80 30 de ff ff 	movabs $0xffffffffffde3080,%rcx
  40ec1c:	ff ff ff 
  40ec1f:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  40ec26:	00 
  40ec27:	4e 8d 24 31          	lea    (%rcx,%r14,1),%r12
  40ec2b:	41 ff d4             	callq  *%r12
	__ostream_insert(__out, __s,
  40ec2e:	48 b8 1f 7e df ff ff 	movabs $0xffffffffffdf7e1f,%rax
  40ec35:	ff ff ff 
  40ec38:	ba 0f 00 00 00       	mov    $0xf,%edx
  40ec3d:	48 89 ef             	mov    %rbp,%rdi
  40ec40:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
  40ec44:	ff d3                	callq  *%rbx
	return __pf(*this);
  40ec46:	41 ff d4             	callq  *%r12
	auto iter = focalSet.begin();
	auto iterEnd = focalSet.end();
	std::cout << "----" << std::endl;
	std::cout << "dump_focalset: " << std::endl;
	for (; iter != iterEnd; ++iter) {
  40ec49:	4c 3b 6c 24 28       	cmp    0x28(%rsp),%r13
  40ec4e:	0f 84 0c 03 00 00    	je     40ef60 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x3d0>
  40ec54:	48 b8 2f 7e df ff ff 	movabs $0xffffffffffdf7e2f,%rax
  40ec5b:	ff ff ff 
  40ec5e:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
	__ostream_insert(__out, __s,
  40ec63:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
  40ec68:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40ec6d:	48 b8 00 ea dd ff ff 	movabs $0xffffffffffddea00,%rax
  40ec74:	ff ff ff 
  40ec77:	49 89 dc             	mov    %rbx,%r12
  40ec7a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  40ec7f:	48 b8 3f 7e df ff ff 	movabs $0xffffffffffdf7e3f,%rax
  40ec86:	ff ff ff 
  40ec89:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  40ec90:	00 
  40ec91:	48 b8 ec 7d df ff ff 	movabs $0xffffffffffdf7dec,%rax
  40ec98:	ff ff ff 
  40ec9b:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  40eca2:	00 
  40eca3:	48 b8 f4 7d df ff ff 	movabs $0xffffffffffdf7df4,%rax
  40ecaa:	ff ff ff 
  40ecad:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  40ecb4:	00 
  40ecb5:	48 b8 f8 7d df ff ff 	movabs $0xffffffffffdf7df8,%rax
  40ecbc:	ff ff ff 
  40ecbf:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40ecc4:	48 b8 b6 7e df ff ff 	movabs $0xffffffffffdf7eb6,%rax
  40eccb:	ff ff ff 
  40ecce:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  40ecd3:	48 b8 fa 7d df ff ff 	movabs $0xffffffffffdf7dfa,%rax
  40ecda:	ff ff ff 
  40ecdd:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  40ece2:	48 b8 04 7e df ff ff 	movabs $0xffffffffffdf7e04,%rax
  40ece9:	ff ff ff 
  40ecec:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  40ecf1:	48 b8 0e 7e df ff ff 	movabs $0xffffffffffdf7e0e,%rax
  40ecf8:	ff ff ff 
  40ecfb:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  40ed00:	48 b8 17 7e df ff ff 	movabs $0xffffffffffdf7e17,%rax
  40ed07:	ff ff ff 
  40ed0a:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  40ed0f:	48 b8 80 80 de ff ff 	movabs $0xffffffffffde8080,%rax
  40ed16:	ff ff ff 
  40ed19:	4c 01 f0             	add    %r14,%rax
  40ed1c:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  40ed23:	00 
  40ed24:	4c 89 e8             	mov    %r13,%rax
  40ed27:	eb 48                	jmp    40ed71 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1e1>
  40ed29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40ed30:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    { return flush(__os.put(__os.widen('\n'))); }
  40ed34:	48 b8 90 e3 dd ff ff 	movabs $0xffffffffffdde390,%rax
  40ed3b:	ff ff ff 
  40ed3e:	4c 89 ef             	mov    %r13,%rdi
  40ed41:	4d 89 f7             	mov    %r14,%r15
  40ed44:	4c 01 f0             	add    %r14,%rax
  40ed47:	ff d0                	callq  *%rax
    { return __os.flush(); }
  40ed49:	48 89 c7             	mov    %rax,%rdi
  40ed4c:	48 b8 20 e6 dd ff ff 	movabs $0xffffffffffdde620,%rax
  40ed53:	ff ff ff 
  40ed56:	4c 01 f0             	add    %r14,%rax
  40ed59:	ff d0                	callq  *%rax
  40ed5b:	48 83 44 24 08 04    	addq   $0x4,0x8(%rsp)
  40ed61:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40ed66:	48 39 44 24 28       	cmp    %rax,0x28(%rsp)
  40ed6b:	0f 84 ef 01 00 00    	je     40ef60 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x3d0>
		//std::cout << *iter << std::endl; 
		std::cout << "openset index: "<< *iter << ", AstarNode: " << openSet[*iter] << std::endl; 
  40ed71:	48 63 10             	movslq (%rax),%rdx
      { return *(this->_M_impl._M_start + __n); }
  40ed74:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
	__ostream_insert(__out, __s,
  40ed79:	4d 89 f7             	mov    %r14,%r15
  40ed7c:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
  40ed81:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40ed88:	00 
  40ed89:	48 89 d3             	mov    %rdx,%rbx
  40ed8c:	4c 89 ef             	mov    %r13,%rdi
  40ed8f:	48 29 d0             	sub    %rdx,%rax
  40ed92:	48 8b 11             	mov    (%rcx),%rdx
  40ed95:	48 8d 2c 82          	lea    (%rdx,%rax,4),%rbp
  40ed99:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  40ed9e:	ba 0f 00 00 00       	mov    $0xf,%edx
  40eda3:	4a 8d 34 30          	lea    (%rax,%r14,1),%rsi
  40eda7:	41 ff d4             	callq  *%r12
  40edaa:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40edaf:	89 de                	mov    %ebx,%esi
  40edb1:	4c 89 ef             	mov    %r13,%rdi
  40edb4:	4a 8d 1c 30          	lea    (%rax,%r14,1),%rbx
  40edb8:	ff d3                	callq  *%rbx
  40edba:	49 89 c5             	mov    %rax,%r13
  40edbd:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40edc4:	00 
  40edc5:	ba 0d 00 00 00       	mov    $0xd,%edx
  40edca:	4c 89 ef             	mov    %r13,%rdi
  40edcd:	4a 8d 34 30          	lea    (%rax,%r14,1),%rsi
  40edd1:	41 ff d4             	callq  *%r12
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40edd4:	8b 4d 14             	mov    0x14(%rbp),%ecx
  40edd7:	4c 8b 84 24 88 00 00 	mov    0x88(%rsp),%r8
  40edde:	00 
  40eddf:	8b 55 10             	mov    0x10(%rbp),%edx
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40ede2:	8b 7d 0c             	mov    0xc(%rbp),%edi
			<< " stat: " << AstarNode.stat;
  40ede5:	8b 45 18             	mov    0x18(%rbp),%eax
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40ede8:	89 4c 24 14          	mov    %ecx,0x14(%rsp)
  40edec:	4b 8d 34 30          	lea    (%r8,%r14,1),%rsi
  40edf0:	89 54 24 18          	mov    %edx,0x18(%rsp)
		os << "state: " << AstarNode.state << " fScore: " << AstarNode.fScore
  40edf4:	89 7c 24 1c          	mov    %edi,0x1c(%rsp)
  40edf8:	ba 07 00 00 00       	mov    $0x7,%edx
  40edfd:	4c 89 ef             	mov    %r13,%rdi
			<< " stat: " << AstarNode.stat;
  40ee00:	89 44 24 10          	mov    %eax,0x10(%rsp)
  40ee04:	41 ff d4             	callq  *%r12
  40ee07:	44 8b 55 04          	mov    0x4(%rbp),%r10d
  40ee0b:	44 8b 4d 08          	mov    0x8(%rbp),%r9d
  40ee0f:	4c 89 ef             	mov    %r13,%rdi
  40ee12:	8b 75 00             	mov    0x0(%rbp),%esi
  40ee15:	44 89 54 24 24       	mov    %r10d,0x24(%rsp)
  40ee1a:	44 89 4c 24 20       	mov    %r9d,0x20(%rsp)
  40ee1f:	ff d3                	callq  *%rbx
  40ee21:	4c 8b 9c 24 90 00 00 	mov    0x90(%rsp),%r11
  40ee28:	00 
  40ee29:	48 89 c5             	mov    %rax,%rbp
  40ee2c:	ba 03 00 00 00       	mov    $0x3,%edx
  40ee31:	48 89 c7             	mov    %rax,%rdi
  40ee34:	4b 8d 34 33          	lea    (%r11,%r14,1),%rsi
  40ee38:	41 ff d4             	callq  *%r12
  40ee3b:	48 89 ef             	mov    %rbp,%rdi
  40ee3e:	8b 74 24 24          	mov    0x24(%rsp),%esi
  40ee42:	ff d3                	callq  *%rbx
  40ee44:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
  40ee49:	48 89 c5             	mov    %rax,%rbp
  40ee4c:	ba 01 00 00 00       	mov    $0x1,%edx
  40ee51:	48 89 c7             	mov    %rax,%rdi
  40ee54:	4b 8d 34 30          	lea    (%r8,%r14,1),%rsi
  40ee58:	41 ff d4             	callq  *%r12
  40ee5b:	48 89 ef             	mov    %rbp,%rdi
  40ee5e:	8b 74 24 20          	mov    0x20(%rsp),%esi
  40ee62:	ff d3                	callq  *%rbx
  40ee64:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
  40ee69:	48 89 c5             	mov    %rax,%rbp
  40ee6c:	ba 01 00 00 00       	mov    $0x1,%edx
  40ee71:	48 89 c7             	mov    %rax,%rdi
  40ee74:	4b 8d 34 31          	lea    (%r9,%r14,1),%rsi
  40ee78:	41 ff d4             	callq  *%r12
  40ee7b:	4c 8b 54 24 58       	mov    0x58(%rsp),%r10
  40ee80:	ba 09 00 00 00       	mov    $0x9,%edx
  40ee85:	48 89 ef             	mov    %rbp,%rdi
  40ee88:	4b 8d 34 32          	lea    (%r10,%r14,1),%rsi
  40ee8c:	41 ff d4             	callq  *%r12
			<< " gScore: " << AstarNode.gScore << " focal: " << AstarNode.focalHeuristic \
  40ee8f:	48 89 ef             	mov    %rbp,%rdi
  40ee92:	8b 74 24 1c          	mov    0x1c(%rsp),%esi
  40ee96:	ff d3                	callq  *%rbx
  40ee98:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
  40ee9d:	48 89 c5             	mov    %rax,%rbp
  40eea0:	ba 09 00 00 00       	mov    $0x9,%edx
  40eea5:	4a 8d 34 37          	lea    (%rdi,%r14,1),%rsi
  40eea9:	48 89 c7             	mov    %rax,%rdi
  40eeac:	41 ff d4             	callq  *%r12
  40eeaf:	48 89 ef             	mov    %rbp,%rdi
  40eeb2:	8b 74 24 18          	mov    0x18(%rsp),%esi
  40eeb6:	ff d3                	callq  *%rbx
  40eeb8:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
  40eebd:	48 89 c5             	mov    %rax,%rbp
  40eec0:	ba 08 00 00 00       	mov    $0x8,%edx
  40eec5:	4a 8d 34 37          	lea    (%rdi,%r14,1),%rsi
  40eec9:	48 89 c7             	mov    %rax,%rdi
  40eecc:	41 ff d4             	callq  *%r12
			<< " stat: " << AstarNode.stat;
  40eecf:	48 89 ef             	mov    %rbp,%rdi
  40eed2:	8b 74 24 14          	mov    0x14(%rsp),%esi
  40eed6:	ff d3                	callq  *%rbx
  40eed8:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
  40eedd:	48 89 c5             	mov    %rax,%rbp
  40eee0:	ba 07 00 00 00       	mov    $0x7,%edx
  40eee5:	48 89 c7             	mov    %rax,%rdi
  40eee8:	4a 8d 34 31          	lea    (%rcx,%r14,1),%rsi
  40eeec:	41 ff d4             	callq  *%r12
  40eeef:	8b 74 24 10          	mov    0x10(%rsp),%esi
  40eef3:	48 89 ef             	mov    %rbp,%rdi
  40eef6:	ff d3                	callq  *%rbx
    { return flush(__os.put(__os.widen('\n'))); }
  40eef8:	49 8b 45 00          	mov    0x0(%r13),%rax
      { return __check_facet(_M_ctype).widen(__c); }
  40eefc:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  40ef00:	49 8b 9c 05 f0 00 00 	mov    0xf0(%r13,%rax,1),%rbx
  40ef07:	00 
      if (!__f)
  40ef08:	48 85 db             	test   %rbx,%rbx
  40ef0b:	0f 84 9a 00 00 00    	je     40efab <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x41b>
	if (_M_widen_ok)
  40ef11:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
  40ef15:	0f 85 15 fe ff ff    	jne    40ed30 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1a0>
	this->_M_widen_init();
  40ef1b:	48 b8 b0 e7 dd ff ff 	movabs $0xffffffffffdde7b0,%rax
  40ef22:	ff ff ff 
  40ef25:	48 89 df             	mov    %rbx,%rdi
  40ef28:	4d 89 f7             	mov    %r14,%r15
  40ef2b:	4c 01 f0             	add    %r14,%rax
  40ef2e:	ff d0                	callq  *%rax
	return this->do_widen(__c);
  40ef30:	48 8b 03             	mov    (%rbx),%rax
  40ef33:	be 0a 00 00 00       	mov    $0xa,%esi
  40ef38:	48 8b 40 30          	mov    0x30(%rax),%rax
  40ef3c:	48 3b 84 24 98 00 00 	cmp    0x98(%rsp),%rax
  40ef43:	00 
  40ef44:	0f 84 ea fd ff ff    	je     40ed34 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1a4>
  40ef4a:	48 89 df             	mov    %rbx,%rdi
  40ef4d:	ff d0                	callq  *%rax
  40ef4f:	0f be f0             	movsbl %al,%esi
  40ef52:	e9 dd fd ff ff       	jmpq   40ed34 <_Z13dump_focalsetRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x1a4>
  40ef57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40ef5e:	00 00 
	__ostream_insert(__out, __s,
  40ef60:	48 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%rax
  40ef67:	00 
  40ef68:	4d 89 f7             	mov    %r14,%r15
  40ef6b:	ba 04 00 00 00       	mov    $0x4,%edx
  40ef70:	4a 8d 34 30          	lea    (%rax,%r14,1),%rsi
  40ef74:	48 8b 84 24 b8 00 00 	mov    0xb8(%rsp),%rax
  40ef7b:	00 
  40ef7c:	4a 8b 3c 30          	mov    (%rax,%r14,1),%rdi
  40ef80:	48 8b 84 24 a8 00 00 	mov    0xa8(%rsp),%rax
  40ef87:	00 
  40ef88:	4c 01 f0             	add    %r14,%rax
  40ef8b:	ff d0                	callq  *%rax
	return __pf(*this);
  40ef8d:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  40ef94:	00 
	}
	std::cout << "----" << std::endl;
}
  40ef95:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  40ef9c:	5b                   	pop    %rbx
  40ef9d:	5d                   	pop    %rbp
  40ef9e:	4c 01 f0             	add    %r14,%rax
  40efa1:	41 5c                	pop    %r12
  40efa3:	41 5d                	pop    %r13
  40efa5:	41 5e                	pop    %r14
  40efa7:	41 5f                	pop    %r15
  40efa9:	ff e0                	jmpq   *%rax
	__throw_bad_cast();
  40efab:	48 b8 50 e8 dd ff ff 	movabs $0xffffffffffdde850,%rax
  40efb2:	ff ff ff 
  40efb5:	4c 01 f0             	add    %r14,%rax
  40efb8:	ff d0                	callq  *%rax
  40efba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000040efc0 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE>:

int openset_top(std::vector<AstarNode>& openSet) {
  40efc0:	48 8b 0f             	mov    (%rdi),%rcx
  40efc3:	48 8b 77 08          	mov    0x8(%rdi),%rsi
	AstarNode current = openSet[0];
	size_t current_idx = 0;
	auto iter = openSet.begin();
	auto iterEnd = openSet.end();
	// set initial AstarNode
	for (; iter != iterEnd; ++iter) {
  40efc7:	48 39 ce             	cmp    %rcx,%rsi
  40efca:	74 26                	je     40eff2 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x32>
		if (iter->stat == 1) // CLOSED
  40efcc:	83 79 18 01          	cmpl   $0x1,0x18(%rcx)
  40efd0:	48 8d 51 1c          	lea    0x1c(%rcx),%rdx
  40efd4:	74 17                	je     40efed <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x2d>
  40efd6:	e9 a9 00 00 00       	jmpq   40f084 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0xc4>
  40efdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  40efe0:	48 8d 42 1c          	lea    0x1c(%rdx),%rax
  40efe4:	83 78 fc 01          	cmpl   $0x1,-0x4(%rax)
  40efe8:	75 0e                	jne    40eff8 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x38>
  40efea:	48 89 c2             	mov    %rax,%rdx
	for (; iter != iterEnd; ++iter) {
  40efed:	48 39 d6             	cmp    %rdx,%rsi
  40eff0:	75 ee                	jne    40efe0 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x20>
  40eff2:	31 c0                	xor    %eax,%eax
				current_idx = std::distance(openSet.begin(), iter); 
			}
		}
	}

	return current_idx;
  40eff4:	c3                   	retq   
  40eff5:	0f 1f 00             	nopl   (%rax)
  40eff8:	48 89 d0             	mov    %rdx,%rax
  40effb:	48 bf b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rdi
  40f002:	db b6 6d 
  40f005:	48 29 c8             	sub    %rcx,%rax
  40f008:	48 c1 f8 02          	sar    $0x2,%rax
  40f00c:	48 0f af c7          	imul   %rdi,%rax
  40f010:	48 89 d7             	mov    %rdx,%rdi
			current = *iter;
  40f013:	44 8b 42 0c          	mov    0xc(%rdx),%r8d
  40f017:	44 8b 4a 10          	mov    0x10(%rdx),%r9d
  40f01b:	48 29 cf             	sub    %rcx,%rdi
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
  40f01e:	49 ba b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%r10
  40f025:	db b6 6d 
  40f028:	48 89 f9             	mov    %rdi,%rcx
  40f02b:	eb 24                	jmp    40f051 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x91>
  40f02d:	0f 1f 00             	nopl   (%rax)
			if (current.fScore > iter->fScore) {
  40f030:	7e 12                	jle    40f044 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x84>
  40f032:	48 89 c8             	mov    %rcx,%rax
				current = *iter;
  40f035:	44 8b 4a 10          	mov    0x10(%rdx),%r9d
  40f039:	41 89 f8             	mov    %edi,%r8d
  40f03c:	48 c1 f8 02          	sar    $0x2,%rax
				current_idx = std::distance(openSet.begin(), iter); 
  40f040:	49 0f af c2          	imul   %r10,%rax
	++_M_current;
  40f044:	48 83 c2 1c          	add    $0x1c,%rdx
  40f048:	48 83 c1 1c          	add    $0x1c,%rcx
	for (; iter != iterEnd; ++iter) {
  40f04c:	48 39 d6             	cmp    %rdx,%rsi
  40f04f:	74 31                	je     40f082 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0xc2>
		if (iter->stat == 1) // CLOSED
  40f051:	83 7a 18 01          	cmpl   $0x1,0x18(%rdx)
  40f055:	74 ed                	je     40f044 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x84>
		if (current.fScore != iter->fScore) {
  40f057:	8b 7a 0c             	mov    0xc(%rdx),%edi
  40f05a:	41 39 f8             	cmp    %edi,%r8d
  40f05d:	75 d1                	jne    40f030 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x70>
			if (current.gScore < iter->gScore) {
  40f05f:	8b 7a 10             	mov    0x10(%rdx),%edi
  40f062:	41 39 f9             	cmp    %edi,%r9d
  40f065:	7d dd                	jge    40f044 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x84>
    { return __lhs.base() - __rhs.base(); }
  40f067:	48 89 c8             	mov    %rcx,%rax
	++_M_current;
  40f06a:	48 83 c2 1c          	add    $0x1c,%rdx
  40f06e:	48 83 c1 1c          	add    $0x1c,%rcx
    { return __lhs.base() - __rhs.base(); }
  40f072:	48 c1 f8 02          	sar    $0x2,%rax
  40f076:	41 89 f9             	mov    %edi,%r9d
				current_idx = std::distance(openSet.begin(), iter); 
  40f079:	49 0f af c2          	imul   %r10,%rax
	for (; iter != iterEnd; ++iter) {
  40f07d:	48 39 d6             	cmp    %rdx,%rsi
  40f080:	75 cf                	jne    40f051 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x91>
  40f082:	f3 c3                	repz retq 
		if (iter->stat == 1) // CLOSED
  40f084:	48 89 ca             	mov    %rcx,%rdx
  40f087:	31 c0                	xor    %eax,%eax
  40f089:	eb 85                	jmp    40f010 <_Z11openset_topRSt6vectorI9AstarNodeSaIS0_EE+0x50>
  40f08b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000040f090 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE>:
}

int focalset_top(std::vector<AstarNode>& openSet, std::vector<int>& focalSet) {
  40f090:	55                   	push   %rbp
  40f091:	53                   	push   %rbx
  40f092:	4c 8b 0e             	mov    (%rsi),%r9
  40f095:	4c 8b 17             	mov    (%rdi),%r10
	int coi = focalSet[0]; // coi = current openset index
	AstarNode current = openSet[coi];
  40f098:	49 63 11             	movslq (%r9),%rdx
  40f09b:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  40f0a2:	00 
  40f0a3:	48 29 d0             	sub    %rdx,%rax
  40f0a6:	49 8d 04 82          	lea    (%r10,%rax,4),%rax
  40f0aa:	8b 58 0c             	mov    0xc(%rax),%ebx
  40f0ad:	8b 68 10             	mov    0x10(%rax),%ebp
  40f0b0:	44 8b 40 14          	mov    0x14(%rax),%r8d
      : _M_current(__i) { }
  40f0b4:	48 8b 46 08          	mov    0x8(%rsi),%rax
	int current_idx = 0;
	auto iter = focalSet.begin();
	auto iterEnd = focalSet.end();
	for (; iter != iterEnd; ++iter) {
  40f0b8:	4c 39 c8             	cmp    %r9,%rax
  40f0bb:	0f 84 8e 00 00 00    	je     40f14f <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xbf>
  40f0c1:	49 8d 51 04          	lea    0x4(%r9),%rdx
  40f0c5:	44 89 c1             	mov    %r8d,%ecx
  40f0c8:	89 ef                	mov    %ebp,%edi
  40f0ca:	89 de                	mov    %ebx,%esi
  40f0cc:	48 29 d0             	sub    %rdx,%rax
  40f0cf:	31 d2                	xor    %edx,%edx
  40f0d1:	48 c1 e8 02          	shr    $0x2,%rax
  40f0d5:	4c 8d 1c 85 04 00 00 	lea    0x4(,%rax,4),%r11
  40f0dc:	00 
  40f0dd:	31 c0                	xor    %eax,%eax
  40f0df:	eb 3c                	jmp    40f11d <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x8d>
  40f0e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		int n_coi = *iter;
		AstarNode n = openSet[n_coi];
		if (current.focalHeuristic != n.focalHeuristic) {
			if (current.focalHeuristic > n.focalHeuristic) {
  40f0e8:	7d 0e                	jge    40f0f8 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
				coi = n_coi;
				current = n;
				current_idx = std::distance(focalSet.begin(), iter); 
  40f0ea:	48 89 d0             	mov    %rdx,%rax
  40f0ed:	41 89 c8             	mov    %ecx,%r8d
  40f0f0:	89 fd                	mov    %edi,%ebp
  40f0f2:	48 c1 e8 02          	shr    $0x2,%rax
  40f0f6:	89 f3                	mov    %esi,%ebx
  40f0f8:	48 83 c2 04          	add    $0x4,%rdx
	for (; iter != iterEnd; ++iter) {
  40f0fc:	49 39 d3             	cmp    %rdx,%r11
  40f0ff:	74 3b                	je     40f13c <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xac>
  40f101:	49 63 34 11          	movslq (%r9,%rdx,1),%rsi
  40f105:	48 8d 0c f5 00 00 00 	lea    0x0(,%rsi,8),%rcx
  40f10c:	00 
  40f10d:	48 29 f1             	sub    %rsi,%rcx
  40f110:	49 8d 0c 8a          	lea    (%r10,%rcx,4),%rcx
  40f114:	8b 71 0c             	mov    0xc(%rcx),%esi
  40f117:	8b 79 10             	mov    0x10(%rcx),%edi
  40f11a:	8b 49 14             	mov    0x14(%rcx),%ecx
		if (current.focalHeuristic != n.focalHeuristic) {
  40f11d:	44 39 c1             	cmp    %r8d,%ecx
  40f120:	75 c6                	jne    40f0e8 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x58>
			}
		}
		else if (current.fScore != n.fScore) {
  40f122:	39 f3                	cmp    %esi,%ebx
  40f124:	74 1a                	je     40f140 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xb0>
			if (current.fScore > n.fScore) {
  40f126:	7e d0                	jle    40f0f8 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
				coi = n_coi;
				current = n;
				current_idx = std::distance(focalSet.begin(), iter); 
  40f128:	48 89 d0             	mov    %rdx,%rax
  40f12b:	48 83 c2 04          	add    $0x4,%rdx
  40f12f:	89 fd                	mov    %edi,%ebp
  40f131:	48 c1 e8 02          	shr    $0x2,%rax
	for (; iter != iterEnd; ++iter) {
  40f135:	49 39 d3             	cmp    %rdx,%r11
  40f138:	89 f3                	mov    %esi,%ebx
  40f13a:	75 c5                	jne    40f101 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x71>
			}
		}
	}

	return current_idx;
}
  40f13c:	5b                   	pop    %rbx
  40f13d:	5d                   	pop    %rbp
  40f13e:	c3                   	retq   
  40f13f:	90                   	nop
			if (current.gScore < n.gScore) {
  40f140:	39 fd                	cmp    %edi,%ebp
  40f142:	7d b4                	jge    40f0f8 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
				current_idx = std::distance(focalSet.begin(), iter); 
  40f144:	48 89 d0             	mov    %rdx,%rax
  40f147:	89 fd                	mov    %edi,%ebp
  40f149:	48 c1 e8 02          	shr    $0x2,%rax
  40f14d:	eb a9                	jmp    40f0f8 <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0x68>
	int current_idx = 0;
  40f14f:	31 c0                	xor    %eax,%eax
	return current_idx;
  40f151:	eb e9                	jmp    40f13c <_Z12focalset_topRSt6vectorI9AstarNodeSaIS0_EERS_IiSaIiEE+0xac>
  40f153:	0f 1f 00             	nopl   (%rax)
  40f156:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f15d:	00 00 00 

000000000040f160 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE>:
  40f160:	48 8b 07             	mov    (%rdi),%rax
  40f163:	48 8b 57 08          	mov    0x8(%rdi),%rdx

bool openset_is_allclosed(std::vector<AstarNode>& openSet) {
	auto iter = openSet.begin();
	auto iterEnd = openSet.end();
	for (; iter != iterEnd; ++iter) {
  40f167:	48 39 d0             	cmp    %rdx,%rax
  40f16a:	74 24                	je     40f190 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x30>
		if(iter->stat == 0)
  40f16c:	8b 70 18             	mov    0x18(%rax),%esi
  40f16f:	85 f6                	test   %esi,%esi
  40f171:	74 2d                	je     40f1a0 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x40>
  40f173:	48 83 c0 1c          	add    $0x1c,%rax
  40f177:	eb 12                	jmp    40f18b <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x2b>
  40f179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40f180:	48 83 c0 1c          	add    $0x1c,%rax
  40f184:	8b 48 fc             	mov    -0x4(%rax),%ecx
  40f187:	85 c9                	test   %ecx,%ecx
  40f189:	74 15                	je     40f1a0 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x40>
	for (; iter != iterEnd; ++iter) {
  40f18b:	48 39 c2             	cmp    %rax,%rdx
  40f18e:	75 f0                	jne    40f180 <_Z20openset_is_allclosedRSt6vectorI9AstarNodeSaIS0_EE+0x20>
			return false;
	}
	return true;
  40f190:	b8 01 00 00 00       	mov    $0x1,%eax
  40f195:	c3                   	retq   
  40f196:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f19d:	00 00 00 
			return false;
  40f1a0:	31 c0                	xor    %eax,%eax
}
  40f1a2:	c3                   	retq   
  40f1a3:	0f 1f 00             	nopl   (%rax)
  40f1a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f1ad:	00 00 00 

000000000040f1b0 <_Z5indexRK13HighLevelNode>:

bool done[MAX_NODE_NUMS] __attribute__((aligned(SWARM_ALIGNMENT)));

//#####################################

int index(const HighLevelNode& n) {
  40f1b0:	41 57                	push   %r15
  40f1b2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40f1b0 <_Z5indexRK13HighLevelNode>
  40f1b9:	53                   	push   %rbx
  40f1ba:	49 bb 50 be 21 00 00 	movabs $0x21be50,%r11
  40f1c1:	00 00 00 
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
  40f1c4:	48 b8 e0 92 df ff ff 	movabs $0xffffffffffdf92e0,%rax
  40f1cb:	ff ff ff 
  40f1ce:	48 89 fb             	mov    %rdi,%rbx
  40f1d1:	48 83 ec 18          	sub    $0x18,%rsp
  40f1d5:	4d 01 df             	add    %r11,%r15
  40f1d8:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40f1dc:	f2 41 0f 10 14 07    	movsd  (%r15,%rax,1),%xmm2
  40f1e2:	48 b8 00 e7 dd ff ff 	movabs $0xffffffffffdde700,%rax
  40f1e9:	ff ff ff 
  40f1ec:	4c 01 f8             	add    %r15,%rax
  40f1ef:	f2 0f 11 54 24 08    	movsd  %xmm2,0x8(%rsp)
  40f1f5:	f2 0f 2a 8f 5c 00 01 	cvtsi2sdl 0x1005c(%rdi),%xmm1
  40f1fc:	00 
  40f1fd:	66 0f 28 c2          	movapd %xmm2,%xmm0
  40f201:	ff d0                	callq  *%rax
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  40f203:	8b 83 54 00 01 00    	mov    0x10054(%rbx),%eax
  40f209:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40f20d:	01 c0                	add    %eax,%eax
  40f20f:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  40f213:	48 b8 e8 92 df ff ff 	movabs $0xffffffffffdf92e8,%rax
  40f21a:	ff ff ff 
  40f21d:	f2 42 0f 5c 04 38    	subsd  (%rax,%r15,1),%xmm0
  40f223:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40f227:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40f22b:	f2 0f 2a 8b 58 00 01 	cvtsi2sdl 0x10058(%rbx),%xmm1
  40f232:	00 
}
  40f233:	48 83 c4 18          	add    $0x18,%rsp
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  40f237:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
}
  40f23b:	5b                   	pop    %rbx
  40f23c:	41 5f                	pop    %r15
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  40f23e:	f2 0f 2c c0          	cvttsd2si %xmm0,%eax
}
  40f242:	c3                   	retq   
  40f243:	0f 1f 00             	nopl   (%rax)
  40f246:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f24d:	00 00 00 

000000000040f250 <_Z5indexii>:
 
int index(int parent_nodeid, int child_id) {
	return parent_nodeid * 2 + 1 + child_id;
  40f250:	8d 44 7e 01          	lea    0x1(%rsi,%rdi,2),%eax
}
  40f254:	c3                   	retq   
  40f255:	90                   	nop
  40f256:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f25d:	00 00 00 

000000000040f260 <_Z6fillermP13HighLevelNodemi>:
#else
	void main_loop_task(int n);
#endif
void enq_upper(swarm::Timestamp ts, HighLevelNode* node,  size_t i , int hlsnum);

void filler(swarm::Timestamp ts, HighLevelNode* node,  size_t i , int hlsnum){
  40f260:	41 56                	push   %r14
  40f262:	41 55                	push   %r13
  40f264:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 40f260 <_Z6fillermP13HighLevelNodemi>
  40f26b:	41 54                	push   %r12
  40f26d:	49 89 d4             	mov    %rdx,%r12
  40f270:	55                   	push   %rbp
  //swarm::info("filler reach ts:%x, superts:%x", ts, swarm::superTimestamp());
  //HLSQueueNode( node,  i , ts, hlsnum);
  node->cost += node->solution[i].cost;
  40f271:	48 69 d2 50 06 00 00 	imul   $0x650,%rdx,%rdx
void filler(swarm::Timestamp ts, HighLevelNode* node,  size_t i , int hlsnum){
  40f278:	53                   	push   %rbx
  40f279:	49 bb a0 bd 21 00 00 	movabs $0x21bda0,%r11
  40f280:	00 00 00 
  40f283:	48 89 f3             	mov    %rsi,%rbx
  40f286:	4d 01 dd             	add    %r11,%r13
  40f289:	89 cd                	mov    %ecx,%ebp
  node->LB += node->solution[i].fmin;
	node->focalHeuristic = focalHeuristic(node->solution);  
  40f28b:	48 89 f7             	mov    %rsi,%rdi
  node->cost += node->solution[i].cost;
  40f28e:	48 01 f2             	add    %rsi,%rdx
  40f291:	8b 82 10 06 00 00    	mov    0x610(%rdx),%eax
  40f297:	03 86 40 00 01 00    	add    0x10040(%rsi),%eax
  40f29d:	41 89 c6             	mov    %eax,%r14d
  40f2a0:	89 86 40 00 01 00    	mov    %eax,0x10040(%rsi)
  node->LB += node->solution[i].fmin;
  40f2a6:	8b 82 14 06 00 00    	mov    0x614(%rdx),%eax
  40f2ac:	01 86 44 00 01 00    	add    %eax,0x10044(%rsi)
	node->focalHeuristic = focalHeuristic(node->solution);  
  40f2b2:	48 b8 e0 33 de ff ff 	movabs $0xffffffffffde33e0,%rax
  40f2b9:	ff ff ff 
  40f2bc:	4c 01 e8             	add    %r13,%rax
  40f2bf:	ff d0                	callq  *%rax
  40f2c1:	89 83 48 00 01 00    	mov    %eax,0x10048(%rbx)
  
  unsigned int child_prio = node->focalHeuristic * 1000 + node->cost;
  40f2c7:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  40f2cd:	44 01 f0             	add    %r14d,%eax
  node->timestamp =  child_prio;
  40f2d0:	89 83 4c 00 01 00    	mov    %eax,0x1004c(%rbx)
        : [opcode]"g"(op));
  40f2d6:	48 c7 c1 12 04 00 00 	mov    $0x412,%rcx
  40f2dd:	48 87 c9             	xchg   %rcx,%rcx
  if(child_prio>= swarm::superTimestamp()){ 
  40f2e0:	48 39 c8             	cmp    %rcx,%rax
  40f2e3:	73 3b                	jae    40f320 <_Z6fillermP13HighLevelNodemi+0xc0>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40f2e5:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f2ec:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f2f1:	48 87 c9             	xchg   %rcx,%rcx
            :);
  40f2f4:	48 ba 50 0c df ff ff 	movabs $0xffffffffffdf0c50,%rdx
  40f2fb:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f2fe:	48 63 b3 50 00 01 00 	movslq 0x10050(%rbx),%rsi
            :);
  40f305:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40f30a:	4c 01 ea             	add    %r13,%rdx
  40f30d:	48 89 c7             	mov    %rax,%rdi
  40f310:	48 87 c9             	xchg   %rcx,%rcx
		    EnqFlags::NOHINT,    
			  node->id);
  }
  return;

}
  40f313:	5b                   	pop    %rbx
  40f314:	5d                   	pop    %rbp
  40f315:	41 5c                	pop    %r12
  40f317:	41 5d                	pop    %r13
  40f319:	41 5e                	pop    %r14
  40f31b:	c3                   	retq   
  40f31c:	0f 1f 40 00          	nopl   0x0(%rax)
    register uint64_t r9  asm("r9")  = v4;
  40f320:	48 ba 60 b7 de ff ff 	movabs $0xffffffffffdeb760,%rdx
  40f327:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f32a:	4c 63 c5             	movslq %ebp,%r8
    register uint64_t r10 asm("r10") = v5;
  40f32d:	45 31 d2             	xor    %r10d,%r10d
    register uint64_t r9  asm("r9")  = v4;
  40f330:	4e 8d 0c 2a          	lea    (%rdx,%r13,1),%r9
            :);
  40f334:	b9 03 00 20 40       	mov    $0x40200003,%ecx
  40f339:	48 89 c7             	mov    %rax,%rdi
  40f33c:	48 89 de             	mov    %rbx,%rsi
  40f33f:	4c 89 e2             	mov    %r12,%rdx
  40f342:	48 87 c9             	xchg   %rcx,%rcx
  40f345:	5b                   	pop    %rbx
  40f346:	5d                   	pop    %rbp
  40f347:	41 5c                	pop    %r12
  40f349:	41 5d                	pop    %r13
  40f34b:	41 5e                	pop    %r14
  40f34d:	c3                   	retq   
  40f34e:	66 90                	xchg   %ax,%ax

000000000040f350 <_Z9enq_uppermP13HighLevelNodemi>:


void enq_upper(swarm::Timestamp ts, HighLevelNode* node,  size_t i ,  int hlsnum) {
  40f350:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40f350 <_Z9enq_uppermP13HighLevelNodemi>
  40f357:	49 bb b0 bc 21 00 00 	movabs $0x21bcb0,%r11
  40f35e:	00 00 00 
  40f361:	49 89 fa             	mov    %rdi,%r10
  40f364:	4c 63 c1             	movslq %ecx,%r8
  40f367:	4c 01 d8             	add    %r11,%rax
        : [opcode]"g"(op));
  40f36a:	48 c7 c1 12 04 00 00 	mov    $0x412,%rcx
  40f371:	48 87 c9             	xchg   %rcx,%rcx

			node->timestamp =  child_prio;
      */
      //swarm::info("fractal doain ts = %i,perentts: %i,  nodets: %i, hlsnum: %i , superts: %x", ts,node->parentTimestamp, child_prio , hlsnum,swarm::superTimestamp() );
      
      if(ts>= swarm::superTimestamp()){ 
  40f374:	48 39 cf             	cmp    %rcx,%rdi
  40f377:	72 0f                	jb     40f388 <_Z9enq_uppermP13HighLevelNodemi+0x38>
    register uint64_t r9  asm("r9")  = v4;
  40f379:	45 31 c9             	xor    %r9d,%r9d
            :);
  40f37c:	b9 03 00 24 40       	mov    $0x40240003,%ecx
  40f381:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40f384:	c3                   	retq   
  40f385:	0f 1f 00             	nopl   (%rax)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40f388:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f38f:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f394:	48 87 c9             	xchg   %rcx,%rcx
            :);
  40f397:	48 ba 50 0c df ff ff 	movabs $0xffffffffffdf0c50,%rdx
  40f39e:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f3a1:	48 63 b6 50 00 01 00 	movslq 0x10050(%rsi),%rsi
            :);
  40f3a8:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40f3ad:	48 01 c2             	add    %rax,%rdx
  40f3b0:	4c 89 d7             	mov    %r10,%rdi
  40f3b3:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40f3b6:	c3                   	retq   
  40f3b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40f3be:	00 00 

000000000040f3c0 <_Z10lls_searchmfPK5Stateim>:
#ifdef HLS_NO_POINTER
  void lls_search(swarm::Timestamp score, float m_w, const State* startState, 
			PlanResult* solution, HighLevelNode *hls_node, size_t c_idx) {
#else
  void lls_search(swarm::Timestamp score, float m_w, const State* startState, 
			int newnodeid, size_t c_idx) {
  40f3c0:	41 57                	push   %r15
  40f3c2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 40f3c0 <_Z10lls_searchmfPK5Stateim>
  40f3c9:	49 bb 40 bc 21 00 00 	movabs $0x21bc40,%r11
  40f3d0:	00 00 00 
  40f3d3:	41 56                	push   %r14

		//HighLevelNode *hls_node = global_nodelist[newnodeid];
		HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f3d5:	48 b8 80 dc 48 9a 01 	movabs $0x19a48dc80,%rax
  40f3dc:	00 00 00 
			int newnodeid, size_t c_idx) {
  40f3df:	41 55                	push   %r13
  40f3e1:	4d 01 df             	add    %r11,%r15
  40f3e4:	41 54                	push   %r12
  40f3e6:	49 89 cc             	mov    %rcx,%r12
  40f3e9:	55                   	push   %rbp
		HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f3ea:	48 63 ca             	movslq %edx,%rcx
			int newnodeid, size_t c_idx) {
  40f3ed:	53                   	push   %rbx
		HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f3ee:	4c 01 f8             	add    %r15,%rax
  40f3f1:	48 c1 e1 06          	shl    $0x6,%rcx
  40f3f5:	49 ba 40 ea 4b 9a 01 	movabs $0x19a4bea40,%r10
  40f3fc:	00 00 00 
			int newnodeid, size_t c_idx) {
  40f3ff:	48 83 ec 28          	sub    $0x28,%rsp
		HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f403:	4c 8b 0c 01          	mov    (%rcx,%rax,1),%r9
		PlanResult *solution = &hls_node->solution[c_idx];
#endif
    //swarm::info("ll deepen next : %i", score);
    LowLevelEnvironment m_env(g_env, c_idx, hls_node->constraints[c_idx], hls_node->solution);
  40f407:	4b 8d 04 64          	lea    (%r12,%r12,2),%rax
	void setLowLevelContext(size_t agentIdx, const Constraints* constraints) {
		//assert(constraints); // [TEST-removed]
		m_agentIdx = agentIdx;
		m_constraints = constraints;
		m_lastGoalConstraint = -1;
		for (const auto& vc : constraints->vertexConstraints) {
  40f40b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  40f410:	49 8d 04 84          	lea    (%r12,%rax,4),%rax
  40f414:	48 c1 e0 07          	shl    $0x7,%rax
  40f418:	4d 8d 84 01 40 7e 00 	lea    0x7e40(%r9,%rax,1),%r8
  40f41f:	00 
  40f420:	4b 8b 04 3a          	mov    (%r10,%r15,1),%rax
  40f424:	4d 8d 98 58 02 00 00 	lea    0x258(%r8),%r11
  40f42b:	4a 8d 04 e0          	lea    (%rax,%r12,8),%rax
  40f42f:	8b 38                	mov    (%rax),%edi
  40f431:	8b 68 04             	mov    0x4(%rax),%ebp
  40f434:	4c 89 c0             	mov    %r8,%rax
  40f437:	eb 10                	jmp    40f449 <_Z10lls_searchmfPK5Stateim+0x89>
  40f439:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  40f440:	48 83 c0 0c          	add    $0xc,%rax
  40f444:	49 39 c3             	cmp    %rax,%r11
  40f447:	74 1a                	je     40f463 <_Z10lls_searchmfPK5Stateim+0xa3>
			if (vc.x == m_env.m_goals[m_agentIdx].x && vc.y == m_env.m_goals[m_agentIdx].y) {
  40f449:	3b 78 04             	cmp    0x4(%rax),%edi
  40f44c:	75 f2                	jne    40f440 <_Z10lls_searchmfPK5Stateim+0x80>
  40f44e:	39 68 08             	cmp    %ebp,0x8(%rax)
  40f451:	75 ed                	jne    40f440 <_Z10lls_searchmfPK5Stateim+0x80>
  40f453:	8b 08                	mov    (%rax),%ecx
  40f455:	39 cb                	cmp    %ecx,%ebx
  40f457:	0f 4c d9             	cmovl  %ecx,%ebx
  40f45a:	48 83 c0 0c          	add    $0xc,%rax
		for (const auto& vc : constraints->vertexConstraints) {
  40f45e:	49 39 c3             	cmp    %rax,%r11
  40f461:	75 e6                	jne    40f449 <_Z10lls_searchmfPK5Stateim+0x89>
  40f463:	44 8b 76 04          	mov    0x4(%rsi),%r14d
  40f467:	44 8b 6e 08          	mov    0x8(%rsi),%r13d
		stat(0) {}
  40f46b:	44 8b 1e             	mov    (%rsi),%r11d
  40f46e:	4c 89 54 24 18       	mov    %r10,0x18(%rsp)
  40f473:	89 54 24 14          	mov    %edx,0x14(%rsp)
  40f477:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
		}
	}

	Cost admissibleHeuristic(const State& s) {
		//return m_env.admissibleHeuristic(s);
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  40f47c:	44 89 f0             	mov    %r14d,%eax
  40f47f:	4c 89 0c 24          	mov    %r9,(%rsp)
  40f483:	29 f8                	sub    %edi,%eax
  40f485:	44 89 5c 24 10       	mov    %r11d,0x10(%rsp)
  40f48a:	89 c1                	mov    %eax,%ecx
  40f48c:	c1 f9 1f             	sar    $0x1f,%ecx
  40f48f:	31 c8                	xor    %ecx,%eax
  40f491:	29 c8                	sub    %ecx,%eax
  40f493:	89 c1                	mov    %eax,%ecx
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f495:	44 89 e8             	mov    %r13d,%eax
  40f498:	29 e8                	sub    %ebp,%eax
  40f49a:	89 c7                	mov    %eax,%edi
  40f49c:	c1 ff 1f             	sar    $0x1f,%edi
  40f49f:	31 f8                	xor    %edi,%eax
  40f4a1:	29 f8                	sub    %edi,%eax
  40f4a3:	8d 2c 01             	lea    (%rcx,%rax,1),%ebp
  40f4a6:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f4ad:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f4b2:	48 87 c9             	xchg   %rcx,%rcx
            }
#ifdef __clang__
#pragma GCC diagnostic pop
#endif
        } else {
            auto tup = new std::tuple<Args...>(args...);
  40f4b5:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  40f4bc:	ff ff ff 
  40f4bf:	bf 88 00 00 00       	mov    $0x88,%edi
  40f4c4:	4c 01 f8             	add    %r15,%rax
  40f4c7:	ff d0                	callq  *%rax
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  40f4c9:	4c 8b 54 24 18       	mov    0x18(%rsp),%r10
  40f4ce:	8b 54 24 14          	mov    0x14(%rsp),%edx
            :);
  40f4d2:	31 ff                	xor    %edi,%edi
  40f4d4:	44 8b 5c 24 10       	mov    0x10(%rsp),%r11d
  40f4d9:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  40f4de:	48 89 c6             	mov    %rax,%rsi
  40f4e1:	4c 8b 0c 24          	mov    (%rsp),%r9
  40f4e5:	4c 89 60 08          	mov    %r12,0x8(%rax)
  40f4e9:	4b 8d 0c 3a          	lea    (%r10,%r15,1),%rcx
  40f4ed:	89 50 5c             	mov    %edx,0x5c(%rax)
  40f4f0:	48 ba 00 e5 de ff ff 	movabs $0xffffffffffdee500,%rdx
  40f4f7:	ff ff ff 
  40f4fa:	4c 89 40 10          	mov    %r8,0x10(%rax)
  40f4fe:	89 58 18             	mov    %ebx,0x18(%rax)
  40f501:	4c 01 fa             	add    %r15,%rdx
  40f504:	48 89 08             	mov    %rcx,(%rax)
  40f507:	4c 89 48 20          	mov    %r9,0x20(%rax)
  40f50b:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40f510:	44 89 58 28          	mov    %r11d,0x28(%rax)
  40f514:	44 89 70 2c          	mov    %r14d,0x2c(%rax)
  40f518:	44 89 68 30          	mov    %r13d,0x30(%rax)
  40f51c:	89 68 34             	mov    %ebp,0x34(%rax)
  40f51f:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%rax)
  40f526:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  40f52d:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)
  40f534:	44 89 58 44          	mov    %r11d,0x44(%rax)
  40f538:	44 89 70 48          	mov    %r14d,0x48(%rax)
  40f53c:	44 89 68 4c          	mov    %r13d,0x4c(%rax)
  40f540:	c7 40 50 04 00 00 00 	movl   $0x4,0x50(%rax)
  40f547:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%rax)
  40f54e:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%rax)
  40f555:	4c 89 60 60          	mov    %r12,0x60(%rax)
  40f559:	44 89 58 68          	mov    %r11d,0x68(%rax)
  40f55d:	44 89 70 6c          	mov    %r14d,0x6c(%rax)
  40f561:	44 89 68 70          	mov    %r13d,0x70(%rax)
  40f565:	89 68 74             	mov    %ebp,0x74(%rax)
  40f568:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%rax)
  40f56f:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  40f576:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%rax)
  40f57d:	00 00 00 
  40f580:	48 87 c9             	xchg   %rcx,%rcx
		swarm::deepen(); 
    
		swarm::enqueue(LL_pll,0,EnqFlags::NOHINT, tmp,prev ,m_env);
			// most good
			//node->timestamp = ROBOT_NUMS * node->generation + node->focalHeuristic;
	}
  40f583:	48 83 c4 28          	add    $0x28,%rsp
  40f587:	5b                   	pop    %rbx
  40f588:	5d                   	pop    %rbp
  40f589:	41 5c                	pop    %r12
  40f58b:	41 5d                	pop    %r13
  40f58d:	41 5e                	pop    %r14
  40f58f:	41 5f                	pop    %r15
  40f591:	c3                   	retq   
  40f592:	0f 1f 40 00          	nopl   0x0(%rax)
  40f596:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40f59d:	00 00 00 

000000000040f5a0 <_Z6star_tmi>:
void star_t(swarm::Timestamp tt, int si){
  40f5a0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 40f5a0 <_Z6star_tmi>
  40f5a7:	49 bb 60 ba 21 00 00 	movabs $0x21ba60,%r11
  40f5ae:	00 00 00 
  40f5b1:	4c 01 d8             	add    %r11,%rax
  40f5b4:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  40f5bb:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  40f5c0:	48 87 c9             	xchg   %rcx,%rcx
  40f5c3:	48 ba 50 0c df ff ff 	movabs $0xffffffffffdf0c50,%rdx
  40f5ca:	ff ff ff 
    return static_cast<uint64_t>(t);
  40f5cd:	48 63 f6             	movslq %esi,%rsi
            :);
  40f5d0:	31 ff                	xor    %edi,%edi
  40f5d2:	48 01 c2             	add    %rax,%rdx
  40f5d5:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40f5da:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40f5dd:	c3                   	retq   
  40f5de:	66 90                	xchg   %ax,%ax

000000000040f5e0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment>:
void LL_pll(swarm::Timestamp ts,AstarNode current,const LLNodee  prev, LowLevelEnvironment  m_env) {
  40f5e0:	41 57                	push   %r15
  40f5e2:	41 56                	push   %r14
  40f5e4:	48 8d 05 f5 ff ff ff 	lea    -0xb(%rip),%rax        # 40f5e0 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment>
  40f5eb:	41 55                	push   %r13
  40f5ed:	41 54                	push   %r12
  40f5ef:	49 bb 20 ba 21 00 00 	movabs $0x21ba20,%r11
  40f5f6:	00 00 00 
  40f5f9:	55                   	push   %rbp
  40f5fa:	53                   	push   %rbx
  40f5fb:	4c 01 d8             	add    %r11,%rax
      if(done[newnodeid]==true) {
  40f5fe:	49 b8 40 04 00 00 00 	movabs $0x440,%r8
  40f605:	00 00 00 
void LL_pll(swarm::Timestamp ts,AstarNode current,const LLNodee  prev, LowLevelEnvironment  m_env) {
  40f608:	48 81 ec 88 04 00 00 	sub    $0x488,%rsp
      if(done[newnodeid]==true) {
  40f60f:	49 01 c0             	add    %rax,%r8
      int newnodeid = prev.newnodeid;
  40f612:	48 63 ac 24 14 05 00 	movslq 0x514(%rsp),%rbp
  40f619:	00 
  40f61a:	48 89 04 24          	mov    %rax,(%rsp)
      if(done[newnodeid]==true) {
  40f61e:	41 80 3c 28 00       	cmpb   $0x0,(%r8,%rbp,1)
      int newnodeid = prev.newnodeid;
  40f623:	89 6c 24 50          	mov    %ebp,0x50(%rsp)
      if(done[newnodeid]==true) {
  40f627:	0f 85 a6 00 00 00    	jne    40f6d3 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xf3>
  40f62d:	48 8b 84 24 20 05 00 	mov    0x520(%rsp),%rax
  40f634:	00 
  40f635:	48 8b 9c 24 28 05 00 	mov    0x528(%rsp),%rbx
  40f63c:	00 
    return numConflicts;
  }

  bool isSolution(const State& s, const size_t m_agentIdx, 
			const int m_lastGoalConstraint) const {
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  40f63d:	48 63 b4 24 c4 04 00 	movslq 0x4c4(%rsp),%rsi
  40f644:	00 
  40f645:	8b 94 24 10 05 00 00 	mov    0x510(%rsp),%edx
  40f64c:	48 89 c7             	mov    %rax,%rdi
  40f64f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  40f654:	8b 84 24 38 05 00 00 	mov    0x538(%rsp),%eax
  40f65b:	89 44 24 54          	mov    %eax,0x54(%rsp)
      size_t c_idx= prev.c_idx;
  40f65f:	48 8b 84 24 18 05 00 	mov    0x518(%rsp),%rax
  40f666:	00 
  40f667:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
      { return *(this->_M_impl._M_start + __n); }
  40f66c:	48 8d 04 dd 00 00 00 	lea    0x0(,%rbx,8),%rax
  40f673:	00 
  40f674:	48 89 c1             	mov    %rax,%rcx
  40f677:	48 03 0f             	add    (%rdi),%rcx
  40f67a:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
           s.time > m_lastGoalConstraint;
  40f67f:	48 63 bc 24 c0 04 00 	movslq 0x4c0(%rsp),%rdi
  40f686:	00 
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  40f687:	48 63 84 24 c8 04 00 	movslq 0x4c8(%rsp),%rax
  40f68e:	00 
  40f68f:	3b 31                	cmp    (%rcx),%esi
  40f691:	0f 84 2d 02 00 00    	je     40f8c4 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x2e4>
    if (cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].set==false){ 
  40f697:	48 69 f6 00 45 33 00 	imul   $0x334500,%rsi,%rsi
  40f69e:	48 b9 80 dc 20 00 00 	movabs $0x20dc80,%rcx
  40f6a5:	00 00 00 
  40f6a8:	48 69 c0 28 9a 01 00 	imul   $0x19a28,%rax,%rax
  40f6af:	48 01 f0             	add    %rsi,%rax
  40f6b2:	48 69 f7 34 08 00 00 	imul   $0x834,%rdi,%rsi
  40f6b9:	48 01 f0             	add    %rsi,%rax
  40f6bc:	48 01 c5             	add    %rax,%rbp
  40f6bf:	48 8b 04 24          	mov    (%rsp),%rax
  40f6c3:	48 c1 e5 06          	shl    $0x6,%rbp
  40f6c7:	48 01 e8             	add    %rbp,%rax
  40f6ca:	48 01 c8             	add    %rcx,%rax
  40f6cd:	80 78 24 00          	cmpb   $0x0,0x24(%rax)
  40f6d1:	74 12                	je     40f6e5 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x105>
}
  40f6d3:	48 81 c4 88 04 00 00 	add    $0x488,%rsp
  40f6da:	5b                   	pop    %rbx
  40f6db:	5d                   	pop    %rbp
  40f6dc:	41 5c                	pop    %r12
  40f6de:	41 5d                	pop    %r13
  40f6e0:	41 5e                	pop    %r14
  40f6e2:	41 5f                	pop    %r15
  40f6e4:	c3                   	retq   
      cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state=current.state;
  40f6e5:	4c 8b 3c 24          	mov    (%rsp),%r15
  40f6e9:	48 8b bc 24 30 05 00 	mov    0x530(%rsp),%rdi
  40f6f0:	00 
      neighbors.reserve(10);
  40f6f1:	be 0a 00 00 00       	mov    $0xa,%esi
      cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].set=true;
  40f6f6:	c6 40 24 01          	movb   $0x1,0x24(%rax)
      neighbors.reserve(10);
  40f6fa:	48 b8 d0 bf de ff ff 	movabs $0xffffffffffdebfd0,%rax
  40f701:	ff ff ff 
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  40f704:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  40f70b:	00 00 00 00 00 
  40f710:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  40f717:	00 00 00 00 00 
  40f71c:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
  40f723:	00 00 00 00 00 
      cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state=current.state;
  40f728:	4c 01 f9             	add    %r15,%rcx
  40f72b:	49 89 fe             	mov    %rdi,%r14
  40f72e:	48 89 7c 24 60       	mov    %rdi,0x60(%rsp)
  40f733:	48 01 cd             	add    %rcx,%rbp
  40f736:	48 8b 8c 24 c0 04 00 	mov    0x4c0(%rsp),%rcx
  40f73d:	00 
  40f73e:	48 8b bc 24 40 05 00 	mov    0x540(%rsp),%rdi
  40f745:	00 
      cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].gscore=prev.gscore;
  40f746:	89 55 20             	mov    %edx,0x20(%rbp)
      neighbors.reserve(10);
  40f749:	4c 01 f8             	add    %r15,%rax
      cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state=current.state;
  40f74c:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
  40f750:	8b 8c 24 c8 04 00 00 	mov    0x4c8(%rsp),%ecx
  40f757:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  40f75c:	89 4d 08             	mov    %ecx,0x8(%rbp)
      cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].neighbor=prev.neighbor;
  40f75f:	48 8b 8c 24 fc 04 00 	mov    0x4fc(%rsp),%rcx
  40f766:	00 
  40f767:	48 89 4d 0c          	mov    %rcx,0xc(%rbp)
  40f76b:	48 8b 8c 24 04 05 00 	mov    0x504(%rsp),%rcx
  40f772:	00 
  40f773:	48 89 4d 14          	mov    %rcx,0x14(%rbp)
  40f777:	8b 8c 24 0c 05 00 00 	mov    0x50c(%rsp),%ecx
  40f77e:	89 4d 1c             	mov    %ecx,0x1c(%rbp)
      neighbors.reserve(10);
  40f781:	48 8d ac 24 80 00 00 	lea    0x80(%rsp),%rbp
  40f788:	00 
  40f789:	48 89 ef             	mov    %rbp,%rdi
  40f78c:	ff d0                	callq  *%rax

	bool isSolution(const State& s) { return m_env.isSolution(s, m_agentIdx, m_lastGoalConstraint); }

	void getNeighbors(const State& s,
			std::vector<Neighbor<State, Action, Cost> >& neighbors) {
		m_env.getNeighbors(s, neighbors, m_constraints);
  40f78e:	48 b8 b0 e1 de ff ff 	movabs $0xffffffffffdee1b0,%rax
  40f795:	ff ff ff 
  40f798:	4c 89 f1             	mov    %r14,%rcx
  40f79b:	48 89 ea             	mov    %rbp,%rdx
  40f79e:	48 8d b4 24 c0 04 00 	lea    0x4c0(%rsp),%rsi
  40f7a5:	00 
  40f7a6:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40f7ab:	4c 01 f8             	add    %r15,%rax
  40f7ae:	ff d0                	callq  *%rax
  40f7b0:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  40f7b7:	00 
  40f7b8:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  40f7bf:	00 
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  40f7c0:	48 39 f8             	cmp    %rdi,%rax
  40f7c3:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  40f7c8:	0f 84 2e 06 00 00    	je     40fdfc <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x81c>
  40f7ce:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  40f7d5:	ff ff ff 
  40f7d8:	49 89 fe             	mov    %rdi,%r14
            auto tup = new std::tuple<Args...>(args...);
  40f7db:	4c 01 f8             	add    %r15,%rax
  40f7de:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
            :);
  40f7e3:	48 b8 00 e5 de ff ff 	movabs $0xffffffffffdee500,%rax
  40f7ea:	ff ff ff 
  40f7ed:	4c 01 f8             	add    %r15,%rax
  40f7f0:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40f7f5:	0f 1f 00             	nopl   (%rax)
          Cost tentative_gScore = current.gScore + neighbor.cost;
  40f7f8:	41 8b 46 10          	mov    0x10(%r14),%eax
      { return *(this->_M_impl._M_start + __n); }
  40f7fc:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
	int numConflicts = 0;
  40f801:	45 31 c9             	xor    %r9d,%r9d
  40f804:	41 8b 6e 04          	mov    0x4(%r14),%ebp
  40f808:	45 8b 6e 08          	mov    0x8(%r14),%r13d
  40f80c:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
                current.focalHeuristic +
  40f811:	44 8b a4 24 d4 04 00 	mov    0x4d4(%rsp),%r12d
  40f818:	00 
          Cost tentative_gScore = current.gScore + neighbor.cost;
  40f819:	89 44 24 28          	mov    %eax,0x28(%rsp)
  40f81d:	03 84 24 d0 04 00 00 	add    0x4d0(%rsp),%eax
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f824:	44 89 ee             	mov    %r13d,%esi
  40f827:	89 c7                	mov    %eax,%edi
  40f829:	89 44 24 30          	mov    %eax,0x30(%rsp)
  40f82d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  40f832:	48 03 10             	add    (%rax),%rdx
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  40f835:	89 e8                	mov    %ebp,%eax
  40f837:	2b 02                	sub    (%rdx),%eax
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f839:	2b 72 04             	sub    0x4(%rdx),%esi
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  40f83c:	89 c1                	mov    %eax,%ecx
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f83e:	89 f2                	mov    %esi,%edx
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  40f840:	c1 f9 1f             	sar    $0x1f,%ecx
  40f843:	31 c8                	xor    %ecx,%eax
  40f845:	29 c8                	sub    %ecx,%eax
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  40f847:	89 f1                	mov    %esi,%ecx
  40f849:	49 63 36             	movslq (%r14),%rsi
  40f84c:	c1 f9 1f             	sar    $0x1f,%ecx
  40f84f:	31 ca                	xor    %ecx,%edx
  40f851:	29 ca                	sub    %ecx,%edx
  40f853:	4c 89 c1             	mov    %r8,%rcx
  40f856:	01 d0                	add    %edx,%eax
  40f858:	89 74 24 48          	mov    %esi,0x48(%rsp)
                tentative_gScore + m_env.admissibleHeuristic(neighbor.state); 
  40f85c:	01 f8                	add    %edi,%eax
  40f85e:	48 89 f7             	mov    %rsi,%rdi
  40f861:	89 44 24 08          	mov    %eax,0x8(%rsp)
  40f865:	48 c1 e7 04          	shl    $0x4,%rdi
	for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  40f869:	31 c0                	xor    %eax,%eax
  40f86b:	eb 18                	jmp    40f885 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x2a5>
  40f86d:	0f 1f 00             	nopl   (%rax)
  40f870:	48 83 c0 01          	add    $0x1,%rax
  40f874:	49 81 c0 50 06 00 00 	add    $0x650,%r8
  40f87b:	48 83 f8 14          	cmp    $0x14,%rax
  40f87f:	0f 84 cb 03 00 00    	je     40fc50 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x670>
		if (i != m_agentIdx && solution[i].states_size > 0) {
  40f885:	48 39 c3             	cmp    %rax,%rbx
  40f888:	74 e6                	je     40f870 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x290>
  40f88a:	49 8b 90 00 04 00 00 	mov    0x400(%r8),%rdx
  40f891:	48 85 d2             	test   %rdx,%rdx
  40f894:	74 da                	je     40f870 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x290>
	if (t < solution[agentIdx].states_size) {
  40f896:	48 39 f2             	cmp    %rsi,%rdx
  40f899:	0f 87 99 03 00 00    	ja     40fc38 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x658>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40f89f:	48 83 ea 01          	sub    $0x1,%rdx
  40f8a3:	48 c1 e2 04          	shl    $0x4,%rdx
  40f8a7:	4c 01 c2             	add    %r8,%rdx
  40f8aa:	44 8b 52 04          	mov    0x4(%rdx),%r10d
  40f8ae:	8b 52 08             	mov    0x8(%rdx),%edx
  bool equalExceptTime(const State& s) const { return x == s.x && y == s.y; }
  40f8b1:	44 39 d5             	cmp    %r10d,%ebp
  40f8b4:	75 ba                	jne    40f870 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x290>
				++numConflicts;
  40f8b6:	41 39 d5             	cmp    %edx,%r13d
  40f8b9:	0f 94 c2             	sete   %dl
  40f8bc:	0f b6 d2             	movzbl %dl,%edx
  40f8bf:	41 01 d1             	add    %edx,%r9d
  40f8c2:	eb ac                	jmp    40f870 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x290>
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  40f8c4:	3b 41 04             	cmp    0x4(%rcx),%eax
  40f8c7:	0f 85 ca fd ff ff    	jne    40f697 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xb7>
  40f8cd:	39 7c 24 54          	cmp    %edi,0x54(%rsp)
  40f8d1:	0f 8d c0 fd ff ff    	jge    40f697 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xb7>
      HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f8d7:	4c 8b 34 24          	mov    (%rsp),%r14
  40f8db:	48 b9 80 dc 48 9a 01 	movabs $0x19a48dc80,%rcx
  40f8e2:	00 00 00 
  40f8e5:	49 89 e9             	mov    %rbp,%r9
  40f8e8:	49 c1 e1 06          	shl    $0x6,%r9
        done[newnodeid]=true; 
  40f8ec:	41 c6 04 28 01       	movb   $0x1,(%r8,%rbp,1)
        cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state=current.state;
  40f8f1:	48 69 f6 00 45 33 00 	imul   $0x334500,%rsi,%rsi
      HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f8f8:	4c 01 f1             	add    %r14,%rcx
  40f8fb:	49 8b 1c 09          	mov    (%r9,%rcx,1),%rbx
        cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state=current.state;
  40f8ff:	4c 63 c8             	movslq %eax,%r9
  40f902:	48 63 cf             	movslq %edi,%rcx
	char pad[48];

	void clear() {
		states_size = 0;
		actions_size = 0;
		cost = 0;
  40f905:	4c 69 64 24 18 50 06 	imul   $0x650,0x18(%rsp),%r12
  40f90c:	00 00 
  40f90e:	4d 69 c9 28 9a 01 00 	imul   $0x19a28,%r9,%r9
  40f915:	48 69 c9 34 08 00 00 	imul   $0x834,%rcx,%rcx
      HighLevelNode *hls_node = global_nodelist[newnodeid].addr;
  40f91c:	49 89 dd             	mov    %rbx,%r13
  40f91f:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
        cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state=current.state;
  40f924:	48 bb 80 dc 20 00 00 	movabs $0x20dc80,%rbx
  40f92b:	00 00 00 
  40f92e:	49 89 db             	mov    %rbx,%r11
  40f931:	49 89 df             	mov    %rbx,%r15
  40f934:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  40f939:	49 8d 3c 31          	lea    (%r9,%rsi,1),%rdi
  40f93d:	4d 01 f3             	add    %r14,%r11
  40f940:	48 8b 9c 24 c0 04 00 	mov    0x4c0(%rsp),%rbx
  40f947:	00 
  40f948:	48 01 cf             	add    %rcx,%rdi
  40f94b:	4d 01 ec             	add    %r13,%r12
  40f94e:	48 01 ef             	add    %rbp,%rdi
  40f951:	48 c1 e7 06          	shl    $0x6,%rdi
  40f955:	4e 8d 14 1f          	lea    (%rdi,%r11,1),%r10
        cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].set=true;    
  40f959:	4c 01 f7             	add    %r14,%rdi
  40f95c:	41 c6 44 3f 24 01    	movb   $0x1,0x24(%r15,%rdi,1)
        cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state=current.state;
  40f962:	41 89 42 08          	mov    %eax,0x8(%r10)
        cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].neighbor=prev.neighbor;
  40f966:	48 8b 84 24 fc 04 00 	mov    0x4fc(%rsp),%rax
  40f96d:	00 
        cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state=current.state;
  40f96e:	49 89 1a             	mov    %rbx,(%r10)
        cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].gscore=prev.gscore;
  40f971:	41 89 52 20          	mov    %edx,0x20(%r10)
        cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].neighbor=prev.neighbor;
  40f975:	49 89 42 0c          	mov    %rax,0xc(%r10)
  40f979:	48 8b 84 24 04 05 00 	mov    0x504(%rsp),%rax
  40f980:	00 
  40f981:	49 89 42 14          	mov    %rax,0x14(%r10)
  40f985:	8b 84 24 0c 05 00 00 	mov    0x50c(%rsp),%eax
  40f98c:	41 89 42 1c          	mov    %eax,0x1c(%r10)
        curr_state=cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state;
  40f990:	4a 8d 04 09          	lea    (%rcx,%r9,1),%rax
  40f994:	41 c7 84 24 10 06 00 	movl   $0x0,0x610(%r12)
  40f99b:	00 00 00 00 00 
		fmin = 0;
  40f9a0:	41 c7 84 24 14 06 00 	movl   $0x0,0x614(%r12)
  40f9a7:	00 00 00 00 00 
				solution->states_size = 0;
  40f9ac:	49 c7 84 24 00 04 00 	movq   $0x0,0x400(%r12)
  40f9b3:	00 00 00 00 00 
        curr_state=cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state;
  40f9b8:	48 01 e8             	add    %rbp,%rax
				solution->actions_size = 0;
  40f9bb:	49 c7 84 24 08 06 00 	movq   $0x0,0x608(%r12)
  40f9c2:	00 00 00 00 00 
        curr_state=cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state;
  40f9c7:	48 01 f0             	add    %rsi,%rax
  40f9ca:	48 c1 e0 06          	shl    $0x6,%rax
  40f9ce:	4c 01 d8             	add    %r11,%rax
        while (i>0) { 
  40f9d1:	85 d2                	test   %edx,%edx
        curr_state=cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].curr_state;
  40f9d3:	4c 63 30             	movslq (%rax),%r14
  40f9d6:	48 63 58 04          	movslq 0x4(%rax),%rbx
  40f9da:	44 8b 50 08          	mov    0x8(%rax),%r10d
        while (i>0) { 
  40f9de:	0f 8e 56 06 00 00    	jle    41003a <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xa5a>
  40f9e4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
          solution->add(StateCost(cameFrom[curr_state.x][curr_state.y][curr_state.time][newnodeid].curr_state,
  40f9e9:	4d 89 e5             	mov    %r12,%r13
        while (i>0) { 
  40f9ec:	89 54 24 20          	mov    %edx,0x20(%rsp)
          solution->add(StateCost(cameFrom[curr_state.x][curr_state.y][curr_state.time][newnodeid].curr_state,
  40f9f0:	45 89 d4             	mov    %r10d,%r12d
  40f9f3:	4d 89 da             	mov    %r11,%r10
  40f9f6:	48 8d 04 bf          	lea    (%rdi,%rdi,4),%rax
  40f9fa:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  40f9fe:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
  40fa02:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  40fa07:	48 69 c7 ca 00 00 00 	imul   $0xca,%rdi,%rax
				   __bos (__s), __fmt, __va_arg_pack ());
  40fa0e:	48 8b 3c 24          	mov    (%rsp),%rdi
  40fa12:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  40fa17:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  40fa1e:	00 
  40fa1f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  40fa24:	48 b8 88 7a df ff ff 	movabs $0xffffffffffdf7a88,%rax
  40fa2b:	ff ff ff 
  40fa2e:	48 01 f8             	add    %rdi,%rax
  40fa31:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  40fa36:	e9 35 01 00 00       	jmpq   40fb70 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x590>
  40fa3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  40fa40:	49 63 cc             	movslq %r12d,%rcx
  40fa43:	48 63 f3             	movslq %ebx,%rsi
  40fa46:	49 63 c6             	movslq %r14d,%rax
  40fa49:	48 69 c9 28 9a 01 00 	imul   $0x19a28,%rcx,%rcx
  40fa50:	48 69 f6 00 45 33 00 	imul   $0x334500,%rsi,%rsi
  40fa57:	48 69 c0 34 08 00 00 	imul   $0x834,%rax,%rax
  40fa5e:	48 8d 14 31          	lea    (%rcx,%rsi,1),%rdx
  40fa62:	48 01 c2             	add    %rax,%rdx
  40fa65:	48 01 f0             	add    %rsi,%rax
  40fa68:	48 01 e8             	add    %rbp,%rax
  40fa6b:	48 01 ea             	add    %rbp,%rdx
  40fa6e:	48 01 c8             	add    %rcx,%rax
  40fa71:	48 c1 e2 06          	shl    $0x6,%rdx
  40fa75:	48 c1 e0 06          	shl    $0x6,%rax
  40fa79:	42 8b 54 12 20       	mov    0x20(%rdx,%r10,1),%edx
  40fa7e:	4c 01 d0             	add    %r10,%rax
  40fa81:	8b 30                	mov    (%rax),%esi
  40fa83:	8b 48 04             	mov    0x4(%rax),%ecx
  40fa86:	8b 78 08             	mov    0x8(%rax),%edi
	}

	void add(StateCost s) {
		if (states_size < STATE_SIZE) {
			states[states_size] = s;
  40fa89:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  40fa8e:	4c 01 c8             	add    %r9,%rax
			states_size++;
  40fa91:	49 83 c1 01          	add    $0x1,%r9
			states[states_size] = s;
  40fa95:	48 c1 e0 04          	shl    $0x4,%rax
  40fa99:	48 03 44 24 08       	add    0x8(%rsp),%rax
  40fa9e:	89 30                	mov    %esi,(%rax)
  40faa0:	89 48 04             	mov    %ecx,0x4(%rax)
  40faa3:	89 78 08             	mov    %edi,0x8(%rax)
  40faa6:	89 50 0c             	mov    %edx,0xc(%rax)
			states_size++;
  40faa9:	4d 89 8d 00 04 00 00 	mov    %r9,0x400(%r13)
			swarm::info("[ERROR] PlanResult add StateCost : states_size: %d", states_size);
			}
	}

	void add(ActionCost a) {
		if (actions_size < ACTION_SIZE) {
  40fab0:	4d 8b 8d 08 06 00 00 	mov    0x608(%r13),%r9
  40fab7:	49 83 f9 3f          	cmp    $0x3f,%r9
  40fabb:	0f 87 1a 01 00 00    	ja     40fbdb <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x5fb>
          solution->add(ActionCost(cameFrom[curr_state.x][curr_state.y][curr_state.time][newnodeid].neighbor.action,
  40fac1:	49 63 c4             	movslq %r12d,%rax
			actions[actions_size] = a;
  40fac4:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  40fac9:	48 69 db 00 45 33 00 	imul   $0x334500,%rbx,%rbx
  40fad0:	48 69 c0 28 9a 01 00 	imul   $0x19a28,%rax,%rax
  40fad7:	4d 69 f6 34 08 00 00 	imul   $0x834,%r14,%r14
  40fade:	49 8d 94 39 81 00 00 	lea    0x81(%r9,%rdi,1),%rdx
  40fae5:	00 
			actions_size++;
  40fae6:	49 83 c1 01          	add    $0x1,%r9
  40faea:	48 01 d8             	add    %rbx,%rax
			actions[actions_size] = a;
  40faed:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  40faf2:	4c 01 f0             	add    %r14,%rax
  40faf5:	48 01 e8             	add    %rbp,%rax
  40faf8:	48 c1 e0 06          	shl    $0x6,%rax
  40fafc:	48 03 04 24          	add    (%rsp),%rax
  40fb00:	48 8d 14 d3          	lea    (%rbx,%rdx,8),%rdx
  40fb04:	48 03 44 24 38       	add    0x38(%rsp),%rax
  40fb09:	8b 48 1c             	mov    0x1c(%rax),%ecx
  40fb0c:	8b 40 18             	mov    0x18(%rax),%eax
  40fb0f:	89 4a 04             	mov    %ecx,0x4(%rdx)
  40fb12:	89 02                	mov    %eax,(%rdx)
			actions_size++;
  40fb14:	4d 89 8d 08 06 00 00 	mov    %r9,0x608(%r13)
          curr_state=  cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].neighbor.state; //store current State because we need to use it below for start state
  40fb1b:	48 63 84 24 c0 04 00 	movslq 0x4c0(%rsp),%rax
  40fb22:	00 
  40fb23:	48 63 94 24 c8 04 00 	movslq 0x4c8(%rsp),%rdx
  40fb2a:	00 
  40fb2b:	48 69 c0 34 08 00 00 	imul   $0x834,%rax,%rax
  40fb32:	48 69 d2 28 9a 01 00 	imul   $0x19a28,%rdx,%rdx
  40fb39:	48 01 d0             	add    %rdx,%rax
  40fb3c:	48 63 94 24 c4 04 00 	movslq 0x4c4(%rsp),%rdx
  40fb43:	00 
  40fb44:	48 01 e8             	add    %rbp,%rax
  40fb47:	48 69 d2 00 45 33 00 	imul   $0x334500,%rdx,%rdx
  40fb4e:	48 01 d0             	add    %rdx,%rax
  40fb51:	48 c1 e0 06          	shl    $0x6,%rax
        while (i>0) { 
  40fb55:	83 6c 24 20 01       	subl   $0x1,0x20(%rsp)
          curr_state=  cameFrom[current.state.x][current.state.y][current.state.time][newnodeid].neighbor.state; //store current State because we need to use it below for start state
  40fb5a:	4a 8d 44 10 0c       	lea    0xc(%rax,%r10,1),%rax
  40fb5f:	4c 63 30             	movslq (%rax),%r14
  40fb62:	48 63 58 04          	movslq 0x4(%rax),%rbx
  40fb66:	44 8b 60 08          	mov    0x8(%rax),%r12d
        while (i>0) { 
  40fb6a:	0f 84 b0 02 00 00    	je     40fe20 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x840>
		if (states_size < STATE_SIZE) {
  40fb70:	4d 8b 8d 00 04 00 00 	mov    0x400(%r13),%r9
  40fb77:	49 83 f9 3f          	cmp    $0x3f,%r9
  40fb7b:	0f 86 bf fe ff ff    	jbe    40fa40 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x460>
  40fb81:	4c 89 54 24 40       	mov    %r10,0x40(%rsp)
  40fb86:	4c 8b 14 24          	mov    (%rsp),%r10
  40fb8a:	49 bb b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r11
  40fb91:	ff ff ff 
  40fb94:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
  40fb99:	b9 00 04 00 00       	mov    $0x400,%ecx
  40fb9e:	ba 01 00 00 00       	mov    $0x1,%edx
  40fba3:	be ff 03 00 00       	mov    $0x3ff,%esi
  40fba8:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40fbad:	31 c0                	xor    %eax,%eax
  40fbaf:	4d 89 d7             	mov    %r10,%r15
  40fbb2:	4d 01 d3             	add    %r10,%r11
  40fbb5:	41 ff d3             	callq  *%r11
  40fbb8:	b9 05 04 00 00       	mov    $0x405,%ecx
  40fbbd:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  40fbc2:	48 87 c9             	xchg   %rcx,%rcx
		if (actions_size < ACTION_SIZE) {
  40fbc5:	4d 8b 8d 08 06 00 00 	mov    0x608(%r13),%r9
    COMPILER_BARRIER();
  40fbcc:	4c 8b 54 24 40       	mov    0x40(%rsp),%r10
  40fbd1:	49 83 f9 3f          	cmp    $0x3f,%r9
  40fbd5:	0f 86 e6 fe ff ff    	jbe    40fac1 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x4e1>
  40fbdb:	48 8b 1c 24          	mov    (%rsp),%rbx
  40fbdf:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40fbe4:	48 b8 c0 7a df ff ff 	movabs $0xffffffffffdf7ac0,%rax
  40fbeb:	ff ff ff 
  40fbee:	49 bb b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r11
  40fbf5:	ff ff ff 
  40fbf8:	4c 89 54 24 40       	mov    %r10,0x40(%rsp)
  40fbfd:	b9 00 04 00 00       	mov    $0x400,%ecx
  40fc02:	ba 01 00 00 00       	mov    $0x1,%edx
  40fc07:	be ff 03 00 00       	mov    $0x3ff,%esi
  40fc0c:	4c 8d 04 03          	lea    (%rbx,%rax,1),%r8
  40fc10:	4c 89 f7             	mov    %r14,%rdi
  40fc13:	49 89 df             	mov    %rbx,%r15
  40fc16:	31 c0                	xor    %eax,%eax
  40fc18:	49 01 db             	add    %rbx,%r11
  40fc1b:	41 ff d3             	callq  *%r11
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  40fc1e:	b9 05 04 00 00       	mov    $0x405,%ecx
  40fc23:	4c 89 f7             	mov    %r14,%rdi
  40fc26:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40fc29:	4c 8b 54 24 40       	mov    0x40(%rsp),%r10
  40fc2e:	e9 e8 fe ff ff       	jmpq   40fb1b <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x53b>
  40fc33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		return solution[agentIdx].states[t].state;
  40fc38:	45 8b 54 38 04       	mov    0x4(%r8,%rdi,1),%r10d
  40fc3d:	41 8b 54 38 08       	mov    0x8(%r8,%rdi,1),%edx
  40fc42:	e9 6a fc ff ff       	jmpq   40f8b1 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x2d1>
  40fc47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40fc4e:	00 00 
                current.focalHeuristic +
  40fc50:	45 01 cc             	add    %r9d,%r12d
    int numConflicts = 0;
  40fc53:	45 31 d2             	xor    %r10d,%r10d
    for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  40fc56:	31 d2                	xor    %edx,%edx
  40fc58:	eb 1b                	jmp    40fc75 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x695>
  40fc5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40fc60:	48 83 c2 01          	add    $0x1,%rdx
  40fc64:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
  40fc6b:	48 83 fa 14          	cmp    $0x14,%rdx
  40fc6f:	0f 84 9b 00 00 00    	je     40fd10 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x730>
      if (i != m_agentIdx && solution[i].states_size > 0) {
  40fc75:	48 39 d3             	cmp    %rdx,%rbx
  40fc78:	74 e6                	je     40fc60 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x680>
  40fc7a:	48 8b 81 00 04 00 00 	mov    0x400(%rcx),%rax
  40fc81:	48 85 c0             	test   %rax,%rax
  40fc84:	74 da                	je     40fc60 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x680>
        State s2a = getState(i, solution, s1a.time);
  40fc86:	4c 63 84 24 c0 04 00 	movslq 0x4c0(%rsp),%r8
  40fc8d:	00 
	if (t < solution[agentIdx].states_size) {
  40fc8e:	4c 39 c0             	cmp    %r8,%rax
  40fc91:	77 55                	ja     40fce8 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x708>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40fc93:	4c 8d 48 ff          	lea    -0x1(%rax),%r9
  40fc97:	49 c1 e1 04          	shl    $0x4,%r9
  40fc9b:	49 01 c9             	add    %rcx,%r9
	if (t < solution[agentIdx].states_size) {
  40fc9e:	48 39 f0             	cmp    %rsi,%rax
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40fca1:	45 8b 41 04          	mov    0x4(%r9),%r8d
  40fca5:	45 8b 49 08          	mov    0x8(%r9),%r9d
	if (t < solution[agentIdx].states_size) {
  40fca9:	77 52                	ja     40fcfd <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x71d>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  40fcab:	48 83 e8 01          	sub    $0x1,%rax
  40fcaf:	48 c1 e0 04          	shl    $0x4,%rax
  40fcb3:	48 01 c8             	add    %rcx,%rax
  40fcb6:	44 8b 58 04          	mov    0x4(%rax),%r11d
  40fcba:	8b 40 08             	mov    0x8(%rax),%eax
  40fcbd:	44 3b 9c 24 c4 04 00 	cmp    0x4c4(%rsp),%r11d
  40fcc4:	00 
  40fcc5:	75 99                	jne    40fc60 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x680>
  40fcc7:	39 84 24 c8 04 00 00 	cmp    %eax,0x4c8(%rsp)
  40fcce:	75 90                	jne    40fc60 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x680>
  40fcd0:	44 39 c5             	cmp    %r8d,%ebp
  40fcd3:	75 8b                	jne    40fc60 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x680>
          ++numConflicts;
  40fcd5:	31 c0                	xor    %eax,%eax
  40fcd7:	45 39 cd             	cmp    %r9d,%r13d
  40fcda:	0f 94 c0             	sete   %al
  40fcdd:	41 01 c2             	add    %eax,%r10d
  40fce0:	e9 7b ff ff ff       	jmpq   40fc60 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x680>
  40fce5:	0f 1f 00             	nopl   (%rax)
		return solution[agentIdx].states[t].state;
  40fce8:	49 c1 e0 04          	shl    $0x4,%r8
	if (t < solution[agentIdx].states_size) {
  40fcec:	48 39 f0             	cmp    %rsi,%rax
		return solution[agentIdx].states[t].state;
  40fcef:	4e 8d 0c 01          	lea    (%rcx,%r8,1),%r9
  40fcf3:	45 8b 41 04          	mov    0x4(%r9),%r8d
  40fcf7:	45 8b 49 08          	mov    0x8(%r9),%r9d
	if (t < solution[agentIdx].states_size) {
  40fcfb:	76 ae                	jbe    40fcab <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x6cb>
		return solution[agentIdx].states[t].state;
  40fcfd:	44 8b 5c 39 04       	mov    0x4(%rcx,%rdi,1),%r11d
  40fd02:	8b 44 39 08          	mov    0x8(%rcx,%rdi,1),%eax
  40fd06:	eb b5                	jmp    40fcbd <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x6dd>
  40fd08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40fd0f:	00 
            swarm::enqueue(LL_pll,fScore ,EnqFlags::NOHINT, tmp,prevv,m_env);  
  40fd10:	48 63 7c 24 08       	movslq 0x8(%rsp),%rdi
            prevv.neighbor=neighbor;
  40fd15:	41 8b 46 0c          	mov    0xc(%r14),%eax
                                               tentative_gScore);
  40fd19:	45 01 d4             	add    %r10d,%r12d
            auto tup = new std::tuple<Args...>(args...);
  40fd1c:	4c 8b 3c 24          	mov    (%rsp),%r15
  40fd20:	48 8b 4c 24 70       	mov    0x70(%rsp),%rcx
            prevv.neighbor=neighbor;
  40fd25:	89 44 24 40          	mov    %eax,0x40(%rsp)
            swarm::enqueue(LL_pll,fScore ,EnqFlags::NOHINT, tmp,prevv,m_env);  
  40fd29:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  40fd2e:	bf 88 00 00 00       	mov    $0x88,%edi
  40fd33:	ff d1                	callq  *%rcx
  40fd35:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  40fd3a:	44 8b 7c 24 40       	mov    0x40(%rsp),%r15d
  40fd3f:	8b 54 24 30          	mov    0x30(%rsp),%edx
  40fd43:	8b 74 24 08          	mov    0x8(%rsp),%esi
  40fd47:	48 89 58 08          	mov    %rbx,0x8(%rax)
  40fd4b:	89 68 2c             	mov    %ebp,0x2c(%rax)
  40fd4e:	48 89 08             	mov    %rcx,(%rax)
  40fd51:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  40fd56:	44 89 78 50          	mov    %r15d,0x50(%rax)
  40fd5a:	44 8b 7c 24 28       	mov    0x28(%rsp),%r15d
  40fd5f:	89 70 34             	mov    %esi,0x34(%rax)
  40fd62:	89 50 38             	mov    %edx,0x38(%rax)
  40fd65:	48 89 48 10          	mov    %rcx,0x10(%rax)
  40fd69:	8b 4c 24 54          	mov    0x54(%rsp),%ecx
  40fd6d:	44 89 78 54          	mov    %r15d,0x54(%rax)
  40fd71:	44 8b 7c 24 50       	mov    0x50(%rsp),%r15d
  40fd76:	89 50 58             	mov    %edx,0x58(%rax)
  40fd79:	44 89 68 30          	mov    %r13d,0x30(%rax)
  40fd7d:	89 48 18             	mov    %ecx,0x18(%rax)
  40fd80:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  40fd85:	44 89 78 5c          	mov    %r15d,0x5c(%rax)
  40fd89:	4c 8b 7c 24 18       	mov    0x18(%rsp),%r15
  40fd8e:	44 89 60 3c          	mov    %r12d,0x3c(%rax)
  40fd92:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)
  40fd99:	48 89 48 20          	mov    %rcx,0x20(%rax)
  40fd9d:	8b 4c 24 48          	mov    0x48(%rsp),%ecx
  40fda1:	89 68 48             	mov    %ebp,0x48(%rax)
  40fda4:	44 89 68 4c          	mov    %r13d,0x4c(%rax)
  40fda8:	4c 89 78 60          	mov    %r15,0x60(%rax)
  40fdac:	89 48 28             	mov    %ecx,0x28(%rax)
  40fdaf:	89 48 44             	mov    %ecx,0x44(%rax)
  40fdb2:	89 48 68             	mov    %ecx,0x68(%rax)
  40fdb5:	89 68 6c             	mov    %ebp,0x6c(%rax)
            :);
  40fdb8:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  40fdbd:	89 70 74             	mov    %esi,0x74(%rax)
  40fdc0:	89 50 78             	mov    %edx,0x78(%rax)
  40fdc3:	48 89 c6             	mov    %rax,%rsi
  40fdc6:	44 89 68 70          	mov    %r13d,0x70(%rax)
  40fdca:	44 89 60 7c          	mov    %r12d,0x7c(%rax)
  40fdce:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%rax)
  40fdd5:	00 00 00 
  40fdd8:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  40fddd:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  40fde2:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40fde5:	49 83 c6 14          	add    $0x14,%r14
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  40fde9:	4c 39 74 24 68       	cmp    %r14,0x68(%rsp)
  40fdee:	0f 85 04 fa ff ff    	jne    40f7f8 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x218>
  40fdf4:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  40fdfb:	00 
	if (__p)
  40fdfc:	48 85 ff             	test   %rdi,%rdi
  40fdff:	0f 84 ce f8 ff ff    	je     40f6d3 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xf3>
      { ::operator delete(__p); }
  40fe05:	48 8b 1c 24          	mov    (%rsp),%rbx
  40fe09:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  40fe10:	ff ff ff 
  40fe13:	49 89 df             	mov    %rbx,%r15
  40fe16:	48 01 d8             	add    %rbx,%rax
  40fe19:	ff d0                	callq  *%rax
  40fe1b:	e9 b3 f8 ff ff       	jmpq   40f6d3 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xf3>
  40fe20:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  40fe25:	45 89 e2             	mov    %r12d,%r10d
		if (states_size < STATE_SIZE) {
  40fe28:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  40fe2d:	4c 69 e0 50 06 00 00 	imul   $0x650,%rax,%r12
  40fe34:	49 01 f4             	add    %rsi,%r12
  40fe37:	4d 8b 8c 24 00 04 00 	mov    0x400(%r12),%r9
  40fe3e:	00 
  40fe3f:	49 83 f9 3f          	cmp    $0x3f,%r9
  40fe43:	0f 87 92 01 00 00    	ja     40ffdb <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x9fb>
			states[states_size] = s;
  40fe49:	48 89 c7             	mov    %rax,%rdi
  40fe4c:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
			states_size++;
  40fe50:	49 8d 51 01          	lea    0x1(%r9),%rdx
			states[states_size] = s;
  40fe54:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  40fe58:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
  40fe5c:	4c 01 c8             	add    %r9,%rax
  40fe5f:	48 c1 e0 04          	shl    $0x4,%rax
  40fe63:	48 01 f0             	add    %rsi,%rax
  40fe66:	44 89 30             	mov    %r14d,(%rax)
  40fe69:	89 58 04             	mov    %ebx,0x4(%rax)
  40fe6c:	44 89 50 08          	mov    %r10d,0x8(%rax)
  40fe70:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
			states_size++;
  40fe77:	49 89 94 24 00 04 00 	mov    %rdx,0x400(%r12)
  40fe7e:	00 
  40fe7f:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  40fe84:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  40fe89:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  40fe8e:	48 8d 04 9b          	lea    (%rbx,%rbx,4),%rax
  40fe92:	4c 69 c3 50 06 00 00 	imul   $0x650,%rbx,%r8
  40fe99:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  40fe9d:	48 8d 04 83          	lea    (%rbx,%rax,4),%rax
  40fea1:	48 01 d0             	add    %rdx,%rax
  40fea4:	48 c1 e0 04          	shl    $0x4,%rax
  40fea8:	48 8d 44 07 f0       	lea    -0x10(%rdi,%rax,1),%rax
  40fead:	4a 8d 7c 07 f0       	lea    -0x10(%rdi,%r8,1),%rdi
  40feb2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

	void reverse_states() {
		StateCost tmp_s[STATE_SIZE];
		size_t j = states_size - 1;
		for(int i = 0; i < states_size; ++i) {
			tmp_s[i] = states[j];
  40feb8:	48 8b 30             	mov    (%rax),%rsi
  40febb:	48 83 e8 10          	sub    $0x10,%rax
  40febf:	48 83 c1 10          	add    $0x10,%rcx
  40fec3:	48 89 71 f0          	mov    %rsi,-0x10(%rcx)
  40fec7:	48 8b 70 18          	mov    0x18(%rax),%rsi
  40fecb:	48 89 71 f8          	mov    %rsi,-0x8(%rcx)
		for(int i = 0; i < states_size; ++i) {
  40fecf:	48 39 c7             	cmp    %rax,%rdi
  40fed2:	75 e4                	jne    40feb8 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x8d8>
			j--;
		}
		for(int i = 0; i < states_size; ++i)
			states[i] = tmp_s[i];
  40fed4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  40fed9:	48 8b 1c 24          	mov    (%rsp),%rbx
  40fedd:	48 c1 e2 04          	shl    $0x4,%rdx
  40fee1:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  40fee6:	4a 8d 3c 00          	lea    (%rax,%r8,1),%rdi
  40feea:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  40fef1:	ff ff ff 
  40fef4:	49 89 df             	mov    %rbx,%r15
  40fef7:	48 01 d8             	add    %rbx,%rax
  40fefa:	ff d0                	callq  *%rax
	}

	void reverse_actions() {
		ActionCost tmp_a[STATE_SIZE];
		size_t j = actions_size - 1;
  40fefc:	48 69 44 24 18 50 06 	imul   $0x650,0x18(%rsp),%rax
  40ff03:	00 00 
  40ff05:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  40ff0a:	48 8b 94 07 08 06 00 	mov    0x608(%rdi,%rax,1),%rdx
  40ff11:	00 
		for(int i = 0; i < actions_size; ++i) {
  40ff12:	48 85 d2             	test   %rdx,%rdx
  40ff15:	0f 84 34 01 00 00    	je     41004f <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xa6f>
  40ff1b:	48 69 44 24 18 ca 00 	imul   $0xca,0x18(%rsp),%rax
  40ff22:	00 00 
  40ff24:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
  40ff29:	48 8d 84 02 80 00 00 	lea    0x80(%rdx,%rax,1),%rax
  40ff30:	00 
  40ff31:	48 c1 e2 03          	shl    $0x3,%rdx
  40ff35:	48 8d 0c c7          	lea    (%rdi,%rax,8),%rcx
  40ff39:	48 8d 3c 13          	lea    (%rbx,%rdx,1),%rdi
  40ff3d:	48 89 d8             	mov    %rbx,%rax
			tmp_a[i] = actions[j];
  40ff40:	48 8b 31             	mov    (%rcx),%rsi
  40ff43:	48 83 c0 08          	add    $0x8,%rax
  40ff47:	48 83 e9 08          	sub    $0x8,%rcx
  40ff4b:	48 89 70 f8          	mov    %rsi,-0x8(%rax)
		for(int i = 0; i < actions_size; ++i) {
  40ff4f:	48 39 c7             	cmp    %rax,%rdi
  40ff52:	75 ec                	jne    40ff40 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x960>
			j--;
		}
		for(int i = 0; i < actions_size; ++i)
			actions[i] = tmp_a[i];
  40ff54:	48 69 44 24 18 50 06 	imul   $0x650,0x18(%rsp),%rax
  40ff5b:	00 00 
  40ff5d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  40ff62:	48 8b 1c 24          	mov    (%rsp),%rbx
  40ff66:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  40ff6b:	49 89 df             	mov    %rbx,%r15
  40ff6e:	48 8d bc 07 08 04 00 	lea    0x408(%rdi,%rax,1),%rdi
  40ff75:	00 
  40ff76:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  40ff7d:	ff ff ff 
  40ff80:	48 01 d8             	add    %rbx,%rax
  40ff83:	ff d0                	callq  *%rax
  40ff85:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
        solution->cost = current.gScore;
  40ff8a:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  40ff8f:	8b 94 24 d0 04 00 00 	mov    0x4d0(%rsp),%edx
    register uint64_t r8  asm("r8")  = v3;
  40ff96:	49 89 e8             	mov    %rbp,%r8
    register uint64_t r9  asm("r9")  = v4;
  40ff99:	48 8b 0c 24          	mov    (%rsp),%rcx
  40ff9d:	48 69 c3 50 06 00 00 	imul   $0x650,%rbx,%rax
  40ffa4:	48 01 f0             	add    %rsi,%rax
  40ffa7:	89 90 10 06 00 00    	mov    %edx,0x610(%rax)
        solution->fmin = 0; //what is this value +  how can we set this value
  40ffad:	c7 80 14 06 00 00 00 	movl   $0x0,0x614(%rax)
  40ffb4:	00 00 00 
  40ffb7:	48 b8 a0 a3 de ff ff 	movabs $0xffffffffffdea3a0,%rax
  40ffbe:	ff ff ff 
  40ffc1:	4c 8d 0c 08          	lea    (%rax,%rcx,1),%r9
        swarm::enqueue(filler,ts_tem,
  40ffc5:	8b be 68 00 01 00    	mov    0x10068(%rsi),%edi
            :);
  40ffcb:	b9 03 00 21 40       	mov    $0x40210003,%ecx
  40ffd0:	48 89 da             	mov    %rbx,%rdx
  40ffd3:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  40ffd6:	e9 f8 f6 ff ff       	jmpq   40f6d3 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xf3>
  40ffdb:	48 8b 1c 24          	mov    (%rsp),%rbx
  40ffdf:	4c 8b 74 24 10       	mov    0x10(%rsp),%r14
  40ffe4:	48 b8 88 7a df ff ff 	movabs $0xffffffffffdf7a88,%rax
  40ffeb:	ff ff ff 
  40ffee:	49 ba b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r10
  40fff5:	ff ff ff 
  40fff8:	b9 00 04 00 00       	mov    $0x400,%ecx
  40fffd:	ba 01 00 00 00       	mov    $0x1,%edx
  410002:	be ff 03 00 00       	mov    $0x3ff,%esi
  410007:	4c 8d 04 03          	lea    (%rbx,%rax,1),%r8
  41000b:	4c 89 f7             	mov    %r14,%rdi
  41000e:	49 89 df             	mov    %rbx,%r15
  410011:	31 c0                	xor    %eax,%eax
  410013:	49 01 da             	add    %rbx,%r10
  410016:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410019:	b9 05 04 00 00       	mov    $0x405,%ecx
  41001e:	4c 89 f7             	mov    %r14,%rdi
  410021:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  410024:	49 8b 94 24 00 04 00 	mov    0x400(%r12),%rdx
  41002b:	00 
		for(int i = 0; i < states_size; ++i) {
  41002c:	48 85 d2             	test   %rdx,%rdx
  41002f:	0f 85 4a fe ff ff    	jne    40fe7f <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x89f>
  410035:	e9 c2 fe ff ff       	jmpq   40fefc <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x91c>
  41003a:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  410041:	00 
  410042:	4c 89 ee             	mov    %r13,%rsi
  410045:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41004a:	e9 d9 fd ff ff       	jmpq   40fe28 <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x848>
  41004f:	48 89 fe             	mov    %rdi,%rsi
  410052:	e9 33 ff ff ff       	jmpq   40ff8a <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0x9aa>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  410057:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  41005e:	00 
  41005f:	48 89 c3             	mov    %rax,%rbx
	if (__p)
  410062:	48 85 ff             	test   %rdi,%rdi
  410065:	74 16                	je     41007d <_Z6LL_pllm9AstarNode7LLNodee19LowLevelEnvironment+0xa9d>
  410067:	48 8b 04 24          	mov    (%rsp),%rax
  41006b:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  410072:	ff ff ff 
  410075:	49 89 c7             	mov    %rax,%r15
  410078:	48 01 c2             	add    %rax,%rdx
  41007b:	ff d2                	callq  *%rdx
  41007d:	48 89 df             	mov    %rbx,%rdi
  410080:	48 8b 1c 24          	mov    (%rsp),%rbx
  410084:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41008b:	ff ff ff 
  41008e:	49 89 df             	mov    %rbx,%r15
  410091:	48 01 d8             	add    %rbx,%rax
  410094:	ff d0                	callq  *%rax
  410096:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41009d:	00 00 00 

00000000004100a0 <_Z19main_loop_task_parami>:
		main_loop_task(0);
#endif
	}

#ifdef SWARM
	void main_loop_task_para(swarm::Timestamp score, int nodeid) {
  4100a0:	41 57                	push   %r15
  4100a2:	41 56                	push   %r14
  4100a4:	49 bb 60 af 21 00 00 	movabs $0x21af60,%r11
  4100ab:	00 00 00 
  4100ae:	41 55                	push   %r13
  4100b0:	4c 8d 2d e9 ff ff ff 	lea    -0x17(%rip),%r13        # 4100a0 <_Z19main_loop_task_parami>
  4100b7:	41 54                	push   %r12
  4100b9:	55                   	push   %rbp
  4100ba:	53                   	push   %rbx

		// Check done flag.
		 if(g_isNoConflict) {
  4100bb:	48 b8 c0 ea 4b 9a 01 	movabs $0x19a4beac0,%rax
  4100c2:	00 00 00 
  4100c5:	4d 01 dd             	add    %r11,%r13
	void main_loop_task_para(swarm::Timestamp score, int nodeid) {
  4100c8:	48 81 ec 18 05 00 00 	sub    $0x518,%rsp
		 if(g_isNoConflict) {
  4100cf:	42 80 3c 28 00       	cmpb   $0x0,(%rax,%r13,1)
	void main_loop_task_para(swarm::Timestamp score, int nodeid) {
  4100d4:	89 74 24 30          	mov    %esi,0x30(%rsp)
		 if(g_isNoConflict) {
  4100d8:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  4100dd:	0f 85 45 07 00 00    	jne    410828 <_Z19main_loop_task_parami+0x788>

#ifdef HLS_NO_PONTER
		 const HighLevelNode *P = &global_nodelist[nodeid];
#else
		 //const HighLevelNode *P = global_nodelist[nodeid];
		 const HighLevelNode *P = global_nodelist[nodeid].addr;
  4100e3:	48 b8 80 dc 48 9a 01 	movabs $0x19a48dc80,%rax
  4100ea:	00 00 00 

		//pls::info("Environment::getFirstConflict() : at (1)");

    int max_t = 0;
		for (int i = 0; i < ROBOT_NUMS; ++i) {
			max_t = std::max<int>(max_t, solution[i].states_size - 1);
  4100ed:	66 0f 76 d2          	pcmpeqd %xmm2,%xmm2
  4100f1:	48 89 c3             	mov    %rax,%rbx
  4100f4:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  4100f9:	48 63 44 24 30       	movslq 0x30(%rsp),%rax
  4100fe:	48 89 c2             	mov    %rax,%rdx
  410101:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  410106:	48 89 d8             	mov    %rbx,%rax
  410109:	4c 01 e8             	add    %r13,%rax
  41010c:	48 c1 e2 06          	shl    $0x6,%rdx
  410110:	4c 8b 34 02          	mov    (%rdx,%rax,1),%r14
  410114:	f3 41 0f 7e 86 00 04 	movq   0x400(%r14),%xmm0
  41011b:	00 00 
  41011d:	f3 41 0f 7e 8e a0 10 	movq   0x10a0(%r14),%xmm1
  410124:	00 00 
  410126:	41 0f 16 86 50 0a 00 	movhps 0xa50(%r14),%xmm0
  41012d:	00 
  41012e:	41 0f 16 8e f0 16 00 	movhps 0x16f0(%r14),%xmm1
  410135:	00 
  410136:	f3 41 0f 7e 9e e0 29 	movq   0x29e0(%r14),%xmm3
  41013d:	00 00 
  41013f:	41 0f 16 9e 30 30 00 	movhps 0x3030(%r14),%xmm3
  410146:	00 
  410147:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  41014b:	66 0f ef c9          	pxor   %xmm1,%xmm1
  41014f:	66 0f fe c2          	paddd  %xmm2,%xmm0
  410153:	66 0f 6f e0          	movdqa %xmm0,%xmm4
  410157:	66 0f 66 e1          	pcmpgtd %xmm1,%xmm4
  41015b:	f3 41 0f 7e 8e 40 1d 	movq   0x1d40(%r14),%xmm1
  410162:	00 00 
  410164:	41 0f 16 8e 90 23 00 	movhps 0x2390(%r14),%xmm1
  41016b:	00 
  41016c:	66 0f db c4          	pand   %xmm4,%xmm0
  410170:	0f c6 cb 88          	shufps $0x88,%xmm3,%xmm1
  410174:	66 0f fe ca          	paddd  %xmm2,%xmm1
  410178:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  41017c:	66 0f 66 d8          	pcmpgtd %xmm0,%xmm3
  410180:	66 0f db cb          	pand   %xmm3,%xmm1
  410184:	66 0f df d8          	pandn  %xmm0,%xmm3
  410188:	f3 41 0f 7e 86 80 36 	movq   0x3680(%r14),%xmm0
  41018f:	00 00 
  410191:	41 0f 16 86 d0 3c 00 	movhps 0x3cd0(%r14),%xmm0
  410198:	00 
  410199:	66 0f eb d9          	por    %xmm1,%xmm3
  41019d:	f3 41 0f 7e 8e 20 43 	movq   0x4320(%r14),%xmm1
  4101a4:	00 00 
  4101a6:	41 0f 16 8e 70 49 00 	movhps 0x4970(%r14),%xmm1
  4101ad:	00 
  4101ae:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  4101b2:	66 0f fe c2          	paddd  %xmm2,%xmm0
  4101b6:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  4101ba:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  4101be:	66 0f db c1          	pand   %xmm1,%xmm0
  4101c2:	66 0f df cb          	pandn  %xmm3,%xmm1
  4101c6:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  4101ca:	f3 41 0f 7e 8e 60 5c 	movq   0x5c60(%r14),%xmm1
  4101d1:	00 00 
  4101d3:	66 0f eb d8          	por    %xmm0,%xmm3
  4101d7:	f3 41 0f 7e 86 c0 4f 	movq   0x4fc0(%r14),%xmm0
  4101de:	00 00 
  4101e0:	41 0f 16 8e b0 62 00 	movhps 0x62b0(%r14),%xmm1
  4101e7:	00 
  4101e8:	41 0f 16 86 10 56 00 	movhps 0x5610(%r14),%xmm0
  4101ef:	00 
  4101f0:	0f c6 c1 88          	shufps $0x88,%xmm1,%xmm0
  4101f4:	66 0f fe c2          	paddd  %xmm2,%xmm0
  4101f8:	66 0f 6f c8          	movdqa %xmm0,%xmm1
  4101fc:	66 0f 66 cb          	pcmpgtd %xmm3,%xmm1
  410200:	66 0f db c1          	pand   %xmm1,%xmm0
  410204:	66 0f df cb          	pandn  %xmm3,%xmm1
  410208:	66 0f 6f d9          	movdqa %xmm1,%xmm3
  41020c:	f3 41 0f 7e 8e 00 69 	movq   0x6900(%r14),%xmm1
  410213:	00 00 
  410215:	66 0f eb d8          	por    %xmm0,%xmm3
  410219:	f3 41 0f 7e 86 a0 75 	movq   0x75a0(%r14),%xmm0
  410220:	00 00 
  410222:	41 0f 16 86 f0 7b 00 	movhps 0x7bf0(%r14),%xmm0
  410229:	00 
  41022a:	41 0f 16 8e 50 6f 00 	movhps 0x6f50(%r14),%xmm1
  410231:	00 
  410232:	0f c6 c8 88          	shufps $0x88,%xmm0,%xmm1
  410236:	66 0f fe ca          	paddd  %xmm2,%xmm1
  41023a:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  41023e:	66 0f 66 c3          	pcmpgtd %xmm3,%xmm0
  410242:	66 0f db c8          	pand   %xmm0,%xmm1
  410246:	66 0f df c3          	pandn  %xmm3,%xmm0
  41024a:	66 0f eb c8          	por    %xmm0,%xmm1
  41024e:	66 0f 6f d1          	movdqa %xmm1,%xmm2
  410252:	66 0f 73 da 08       	psrldq $0x8,%xmm2
  410257:	66 0f 6f c2          	movdqa %xmm2,%xmm0
  41025b:	66 0f 66 c1          	pcmpgtd %xmm1,%xmm0
  41025f:	66 0f db d0          	pand   %xmm0,%xmm2
  410263:	66 0f df c1          	pandn  %xmm1,%xmm0
  410267:	66 0f eb c2          	por    %xmm2,%xmm0
  41026b:	66 0f 6f d0          	movdqa %xmm0,%xmm2
  41026f:	66 0f 73 da 04       	psrldq $0x4,%xmm2
  410274:	66 0f 6f ca          	movdqa %xmm2,%xmm1
  410278:	66 0f 66 c8          	pcmpgtd %xmm0,%xmm1
  41027c:	66 0f db d1          	pand   %xmm1,%xmm2
  410280:	66 0f df c8          	pandn  %xmm0,%xmm1
  410284:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  410288:	66 0f eb c2          	por    %xmm2,%xmm0
  41028c:	66 0f 7e c0          	movd   %xmm0,%eax
  410290:	66 0f 7e 44 24 58    	movd   %xmm0,0x58(%rsp)
    }

		//pls::info("Environment::getFirstConflict() : at (2)");

    for (int t = 0; t < max_t; ++t) {
  410296:	85 c0                	test   %eax,%eax
  410298:	0f 8e fd 09 00 00    	jle    410c9b <_Z19main_loop_task_parami+0xbfb>
  41029e:	49 8d 86 50 06 00 00 	lea    0x650(%r14),%rax
  4102a5:	45 31 ff             	xor    %r15d,%r15d
      // check drive-drive vertex collisions
      for (size_t i = 0; i < ROBOT_NUMS; ++i) {
        State state1 = getState(i, solution, t);
  4102a8:	4c 89 fd             	mov    %r15,%rbp
  4102ab:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  4102b0:	48 b8 10 2b de ff ff 	movabs $0xffffffffffde2b10,%rax
  4102b7:	ff ff ff 
  4102ba:	4a 8d 1c 28          	lea    (%rax,%r13,1),%rbx
  4102be:	48 89 ea             	mov    %rbp,%rdx
  4102c1:	31 ff                	xor    %edi,%edi
  4102c3:	89 6c 24 28          	mov    %ebp,0x28(%rsp)
  4102c7:	4c 89 f6             	mov    %r14,%rsi
  4102ca:	49 89 ec             	mov    %rbp,%r12
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  4102cd:	41 bf 01 00 00 00    	mov    $0x1,%r15d
        State state1 = getState(i, solution, t);
  4102d3:	ff d3                	callq  *%rbx
  4102d5:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
  4102da:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  4102e1:	00 
  4102e2:	48 c1 e8 20          	shr    $0x20,%rax
  4102e6:	89 94 24 18 01 00 00 	mov    %edx,0x118(%rsp)
  4102ed:	48 89 c7             	mov    %rax,%rdi
  4102f0:	41 89 d0             	mov    %edx,%r8d
  4102f3:	49 c1 e4 04          	shl    $0x4,%r12
  4102f7:	4d 8d 57 ff          	lea    -0x1(%r15),%r10
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  4102fb:	48 89 ca             	mov    %rcx,%rdx
  4102fe:	4c 89 fe             	mov    %r15,%rsi
  410301:	eb 31                	jmp    410334 <_Z19main_loop_task_parami+0x294>
  410303:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  410308:	48 83 e8 01          	sub    $0x1,%rax
  41030c:	48 c1 e0 04          	shl    $0x4,%rax
  410310:	48 01 d0             	add    %rdx,%rax
  410313:	44 8b 48 04          	mov    0x4(%rax),%r9d
  410317:	8b 40 08             	mov    0x8(%rax),%eax
  41031a:	41 39 f9             	cmp    %edi,%r9d
  41031d:	74 30                	je     41034f <_Z19main_loop_task_parami+0x2af>
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  41031f:	48 83 c6 01          	add    $0x1,%rsi
  410323:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
  41032a:	48 83 fe 14          	cmp    $0x14,%rsi
  41032e:	0f 84 5c 05 00 00    	je     410890 <_Z19main_loop_task_parami+0x7f0>
	if (t < solution[agentIdx].states_size) {
  410334:	48 8b 82 00 04 00 00 	mov    0x400(%rdx),%rax
  41033b:	48 39 e8             	cmp    %rbp,%rax
  41033e:	76 c8                	jbe    410308 <_Z19main_loop_task_parami+0x268>
		return solution[agentIdx].states[t].state;
  410340:	46 8b 4c 22 04       	mov    0x4(%rdx,%r12,1),%r9d
  410345:	42 8b 44 22 08       	mov    0x8(%rdx,%r12,1),%eax
  41034a:	41 39 f9             	cmp    %edi,%r9d
  41034d:	75 d0                	jne    41031f <_Z19main_loop_task_parami+0x27f>
  41034f:	44 39 c0             	cmp    %r8d,%eax
  410352:	75 cb                	jne    41031f <_Z19main_loop_task_parami+0x27f>
  410354:	89 c5                	mov    %eax,%ebp
          State state2 = getState(j, solution, t);
          if (state1.equalExceptTime(state2)) {
            result.time = t;
  410356:	8b 44 24 28          	mov    0x28(%rsp),%eax
  void createConstraintsFromConflict(
      const Conflict& conflict, std::map<size_t, Constraints>& constraints) {
    if (conflict.type == Conflict::Vertex) {
      Constraints c1;
			c1.add(VertexConstraint(conflict.time, conflict.x1, conflict.y1));
      constraints[conflict.agent1] = c1;
  41035a:	48 bb d0 09 df ff ff 	movabs $0xffffffffffdf09d0,%rbx
  410361:	ff ff ff 
  410364:	41 89 fc             	mov    %edi,%r12d
            result.agent2 = j;
  410367:	48 89 b4 24 c0 00 00 	mov    %rsi,0xc0(%rsp)
  41036e:	00 
            result.x1 = state1.x;
  41036f:	89 bc 24 cc 00 00 00 	mov    %edi,0xcc(%rsp)
            result.agent1 = i;
  410376:	4c 89 94 24 b8 00 00 	mov    %r10,0xb8(%rsp)
  41037d:	00 
            result.type = Conflict::Vertex;
  41037e:	c7 84 24 c8 00 00 00 	movl   $0x0,0xc8(%rsp)
  410385:	00 00 00 00 
      constraints[conflict.agent1] = c1;
  410389:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  410390:	00 
            result.time = t;
  410391:	89 84 24 b0 00 00 00 	mov    %eax,0xb0(%rsp)
	    this->_M_header._M_left = &this->_M_header;
  410398:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  41039f:	00 
            result.y1 = state1.y;
  4103a0:	89 ac 24 d0 00 00 00 	mov    %ebp,0xd0(%rsp)
	    _M_node_count(0)
  4103a7:	c7 84 24 e8 00 00 00 	movl   $0x0,0xe8(%rsp)
  4103ae:	00 00 00 00 
  4103b2:	48 c7 84 24 f0 00 00 	movq   $0x0,0xf0(%rsp)
  4103b9:	00 00 00 00 00 
	    this->_M_header._M_left = &this->_M_header;
  4103be:	49 89 c7             	mov    %rax,%r15
  4103c1:	48 89 04 24          	mov    %rax,(%rsp)
  4103c5:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  4103cc:	00 
	    _M_node_count(0)
  4103cd:	48 c7 84 24 08 01 00 	movq   $0x0,0x108(%rsp)
  4103d4:	00 00 00 00 00 
      constraints[conflict.agent1] = c1;
  4103d9:	4c 89 ff             	mov    %r15,%rdi
	    this->_M_header._M_left = &this->_M_header;
  4103dc:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  4103e3:	00 
	    this->_M_header._M_right = &this->_M_header;
  4103e4:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  4103eb:	00 
  4103ec:	48 8d 84 24 b0 00 00 	lea    0xb0(%rsp),%rax
  4103f3:	00 
  4103f4:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  4103f9:	4a 8d 04 2b          	lea    (%rbx,%r13,1),%rax
  4103fd:	ff d0                	callq  *%rax
  4103ff:	8b 7c 24 28          	mov    0x28(%rsp),%edi
  410403:	44 89 60 04          	mov    %r12d,0x4(%rax)
  410407:	89 68 08             	mov    %ebp,0x8(%rax)
  41040a:	c7 80 40 06 00 00 01 	movl   $0x1,0x640(%rax)
  410411:	00 00 00 
  410414:	c7 80 44 06 00 00 00 	movl   $0x0,0x644(%rax)
  41041b:	00 00 00 
  41041e:	89 38                	mov    %edi,(%rax)
      constraints[conflict.agent2] = c1;
  410420:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  410425:	4c 89 ff             	mov    %r15,%rdi
  410428:	48 83 c0 10          	add    $0x10,%rax
  41042c:	48 89 c6             	mov    %rax,%rsi
  41042f:	4a 8d 04 2b          	lea    (%rbx,%r13,1),%rax
  410433:	ff d0                	callq  *%rax
  410435:	8b 5c 24 28          	mov    0x28(%rsp),%ebx
  410439:	44 89 60 04          	mov    %r12d,0x4(%rax)
  41043d:	89 68 08             	mov    %ebp,0x8(%rax)
  410440:	c7 80 40 06 00 00 01 	movl   $0x1,0x640(%rax)
  410447:	00 00 00 
  41044a:	c7 80 44 06 00 00 00 	movl   $0x0,0x644(%rax)
  410451:	00 00 00 
  410454:	89 18                	mov    %ebx,(%rax)
		 // create constraints
		 std::map<size_t, Constraints> constraints;
		 g_env.createConstraintsFromConflict(conflict, constraints);

		 // NOde expantion
		 int generation = P->generation + 1;
  410456:	41 8b 86 5c 00 01 00 	mov    0x1005c(%r14),%eax
  41045d:	48 8b ac 24 f8 00 00 	mov    0xf8(%rsp),%rbp
  410464:	00 
  410465:	83 c0 01             	add    $0x1,%eax
  410468:	89 44 24 40          	mov    %eax,0x40(%rsp)
		 int child_id = 0;
     //swarm::info("hls node genrn");
     //int j=0;
		 for (const auto& c : constraints) {
  41046c:	48 8b 04 24          	mov    (%rsp),%rax
  410470:	48 83 c0 08          	add    $0x8,%rax
  410474:	48 39 c5             	cmp    %rax,%rbp
  410477:	0f 84 c5 08 00 00    	je     410d42 <_Z19main_loop_task_parami+0xca2>
	return parent_nodeid * 2 + 1 + child_id;
  41047d:	8b 44 24 30          	mov    0x30(%rsp),%eax
			 size_t i = c.first;
  410481:	4c 8b 65 20          	mov    0x20(%rbp),%r12
	return parent_nodeid * 2 + 1 + child_id;
  410485:	44 8d 4c 00 01       	lea    0x1(%rax,%rax,1),%r9d
			 int new_nodeid = index(nodeid, child_id);

			 if(new_nodeid > MAX_NODE_NUMS) {
  41048a:	41 81 f9 34 08 00 00 	cmp    $0x834,%r9d
  410491:	0f 8f 3f 03 00 00    	jg     4107d6 <_Z19main_loop_task_parami+0x736>
  410497:	48 b8 90 b7 de ff ff 	movabs $0xffffffffffdeb790,%rax
  41049e:	ff ff ff 
  4104a1:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  4104a8:	00 
  4104a9:	4c 01 e8             	add    %r13,%rax
  4104ac:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  4104b1:	49 63 c1             	movslq %r9d,%rax
  4104b4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4104b9:	48 c1 e0 06          	shl    $0x6,%rax
  4104bd:	48 89 c2             	mov    %rax,%rdx
  4104c0:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4104c5:	4c 01 e8             	add    %r13,%rax
  4104c8:	48 01 d0             	add    %rdx,%rax
  4104cb:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  4104d0:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  4104d7:	ff ff ff 
  4104da:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  4104df:	48 b8 00 ea 4b 9a 01 	movabs $0x19a4bea00,%rax
  4104e6:	00 00 00 
  4104e9:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  4104ee:	48 b8 40 69 4c 9a 01 	movabs $0x19a4c6940,%rax
  4104f5:	00 00 00 
  4104f8:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  4104fd:	48 b8 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%rax
  410504:	ff ff ff 
  410507:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  41050e:	00 
#ifdef HLS_NO_POINTER
			HighLevelNode *newNode = &global_nodelist[new_nodeid];
#else
			//global_nodelist[new_nodeid] = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
			//HighLevelNode *newNode = global_nodelist[new_nodeid];
			global_nodelist[new_nodeid].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  41050f:	48 b8 90 74 df ff ff 	movabs $0xffffffffffdf7490,%rax
  410516:	ff ff ff 
  410519:	4c 01 e8             	add    %r13,%rax
  41051c:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  410521:	48 8d 84 24 10 01 00 	lea    0x110(%rsp),%rax
  410528:	00 
  410529:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  41052e:	48 b8 58 7b df ff ff 	movabs $0xffffffffffdf7b58,%rax
  410535:	ff ff ff 
  410538:	4c 01 e8             	add    %r13,%rax
  41053b:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  410542:	00 
  410543:	48 89 e8             	mov    %rbp,%rax
  410546:	4c 89 e5             	mov    %r12,%rbp
  410549:	49 89 c4             	mov    %rax,%r12
  41054c:	bf 80 00 01 00       	mov    $0x10080,%edi
  410551:	4d 89 ef             	mov    %r13,%r15
  410554:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  410559:	ff d0                	callq  *%rax
  41055b:	48 89 c3             	mov    %rax,%rbx
  41055e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
			HighLevelNode *newNode = global_nodelist[new_nodeid].addr;
#endif

			 //HighLevelNode newNode = P;
        //swarm::info("sol cost: %i nodenum: %i",newNode->cost, new_nodeid);
			 *newNode = *P;
  410563:	4c 89 f6             	mov    %r14,%rsi
  410566:	ba 80 00 01 00       	mov    $0x10080,%edx
  41056b:	48 89 df             	mov    %rbx,%rdi
			global_nodelist[new_nodeid].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  41056e:	48 89 18             	mov    %rbx,(%rax)
			 *newNode = *P;
  410571:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  410576:	4c 01 e8             	add    %r13,%rax
  410579:	ff d0                	callq  *%rax
			 newNode->id = new_nodeid;
  41057b:	8b 44 24 20          	mov    0x20(%rsp),%eax
  41057f:	89 83 50 00 01 00    	mov    %eax,0x10050(%rbx)
			 newNode->generation = generation;
  410585:	8b 44 24 40          	mov    0x40(%rsp),%eax
  410589:	89 83 5c 00 01 00    	mov    %eax,0x1005c(%rbx)
			 newNode->parent_child_id = P->own_child_id;
  41058f:	41 8b 86 58 00 01 00 	mov    0x10058(%r14),%eax
  410596:	89 83 54 00 01 00    	mov    %eax,0x10054(%rbx)
			 newNode->own_child_id = child_id;
  41059c:	8b 44 24 10          	mov    0x10(%rsp),%eax
  4105a0:	89 83 58 00 01 00    	mov    %eax,0x10058(%rbx)
			 newNode->parentTimestamp = P->timestamp;
  4105a6:	41 8b 86 4c 00 01 00 	mov    0x1004c(%r14),%eax
  4105ad:	89 83 68 00 01 00    	mov    %eax,0x10068(%rbx)
  void add(const Constraints& other) {
    //vertexConstraints.insert(other.vertexConstraints.begin(),
    //                         other.vertexConstraints.end());
    //edgeConstraints.insert(other.edgeConstraints.begin(),
    //                       other.edgeConstraints.end());
		if (vertexConstraints_size >= MAX_CONSTRAINT_SIZE || 
  4105b3:	48 8d 44 6d 00       	lea    0x0(%rbp,%rbp,2),%rax
  4105b8:	4c 8d 4c 85 00       	lea    0x0(%rbp,%rax,4),%r9
  4105bd:	49 c1 e1 07          	shl    $0x7,%r9
  4105c1:	4a 8d 34 0b          	lea    (%rbx,%r9,1),%rsi
  4105c5:	83 be 80 84 00 00 3f 	cmpl   $0x3f,0x8480(%rsi)
  4105cc:	0f 8f ee 05 00 00    	jg     410bc0 <_Z19main_loop_task_parami+0xb20>
  4105d2:	83 be 84 84 00 00 3f 	cmpl   $0x3f,0x8484(%rsi)
  4105d9:	0f 8f e1 05 00 00    	jg     410bc0 <_Z19main_loop_task_parami+0xb20>
#ifdef SWARM
			swarm::info("[ERROR] constraints size is over %d", MAX_CONSTRAINT_SIZE );
#endif
			return;
		}
		for (int i = 0; i < other.vertexConstraints_size; ++i) {
  4105df:	41 8b bc 24 68 06 00 	mov    0x668(%r12),%edi
  4105e6:	00 
  4105e7:	85 ff                	test   %edi,%edi
  4105e9:	7e 72                	jle    41065d <_Z19main_loop_task_parami+0x5bd>
  4105eb:	4d 8d 44 24 28       	lea    0x28(%r12),%r8
  4105f0:	4e 8d bc 0b 40 7e 00 	lea    0x7e40(%rbx,%r9,1),%r15
  4105f7:	00 
  4105f8:	45 31 db             	xor    %r11d,%r11d
  4105fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
			bool found_same_key = false;
			for (int j =0; j < vertexConstraints_size; ++j) {
  410600:	8b 8e 80 84 00 00    	mov    0x8480(%rsi),%ecx
  410606:	85 c9                	test   %ecx,%ecx
  410608:	0f 8e 82 05 00 00    	jle    410b90 <_Z19main_loop_task_parami+0xaf0>
  41060e:	41 8b 38             	mov    (%r8),%edi
  410611:	4c 89 f8             	mov    %r15,%rax
  410614:	31 d2                	xor    %edx,%edx
  410616:	eb 1d                	jmp    410635 <_Z19main_loop_task_parami+0x595>
  410618:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41061f:	00 
  410620:	8b 8e 80 84 00 00    	mov    0x8480(%rsi),%ecx
  410626:	83 c2 01             	add    $0x1,%edx
  410629:	48 83 c0 0c          	add    $0xc,%rax
  41062d:	39 d1                	cmp    %edx,%ecx
  41062f:	0f 8e 5b 05 00 00    	jle    410b90 <_Z19main_loop_task_parami+0xaf0>
	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
  410635:	39 38                	cmp    %edi,(%rax)
  410637:	75 e7                	jne    410620 <_Z19main_loop_task_parami+0x580>
  410639:	41 8b 48 04          	mov    0x4(%r8),%ecx
  41063d:	39 48 04             	cmp    %ecx,0x4(%rax)
  410640:	75 de                	jne    410620 <_Z19main_loop_task_parami+0x580>
  410642:	41 8b 48 08          	mov    0x8(%r8),%ecx
  410646:	39 48 08             	cmp    %ecx,0x8(%rax)
  410649:	75 d5                	jne    410620 <_Z19main_loop_task_parami+0x580>
		for (int i = 0; i < other.vertexConstraints_size; ++i) {
  41064b:	41 83 c3 01          	add    $0x1,%r11d
  41064f:	49 83 c0 0c          	add    $0xc,%r8
  410653:	45 39 9c 24 68 06 00 	cmp    %r11d,0x668(%r12)
  41065a:	00 
  41065b:	7f a3                	jg     410600 <_Z19main_loop_task_parami+0x560>
			if (!found_same_key) { // Not found
				vertexConstraints[vertexConstraints_size] = other.vertexConstraints[i];
				vertexConstraints_size++;
			}
		}
		for (int i = 0; i < other.edgeConstraints_size; ++i) {
  41065d:	41 8b 8c 24 6c 06 00 	mov    0x66c(%r12),%ecx
  410664:	00 
  410665:	85 c9                	test   %ecx,%ecx
  410667:	0f 8e 95 00 00 00    	jle    410702 <_Z19main_loop_task_parami+0x662>
  41066d:	48 8d 44 6d 00       	lea    0x0(%rbp,%rbp,2),%rax
  410672:	49 8d bc 24 80 02 00 	lea    0x280(%r12),%rdi
  410679:	00 
  41067a:	45 31 db             	xor    %r11d,%r11d
  41067d:	4c 8d 4c 85 00       	lea    0x0(%rbp,%rax,4),%r9
  410682:	49 c1 e1 07          	shl    $0x7,%r9
  410686:	4e 8d bc 0b 98 80 00 	lea    0x8098(%rbx,%r9,1),%r15
  41068d:	00 
			bool found_same_key = false;
			for (int j =0; j < edgeConstraints_size; ++j) {
  41068e:	4a 8d 34 0b          	lea    (%rbx,%r9,1),%rsi
  410692:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  410698:	8b 8e 84 84 00 00    	mov    0x8484(%rsi),%ecx
  41069e:	85 c9                	test   %ecx,%ecx
  4106a0:	0f 8e aa 04 00 00    	jle    410b50 <_Z19main_loop_task_parami+0xab0>
  4106a6:	44 8b 07             	mov    (%rdi),%r8d
  4106a9:	4c 89 f8             	mov    %r15,%rax
  4106ac:	31 d2                	xor    %edx,%edx
  4106ae:	eb 15                	jmp    4106c5 <_Z19main_loop_task_parami+0x625>
  4106b0:	8b 8e 84 84 00 00    	mov    0x8484(%rsi),%ecx
  4106b6:	83 c2 01             	add    $0x1,%edx
  4106b9:	48 83 c0 14          	add    $0x14,%rax
  4106bd:	39 d1                	cmp    %edx,%ecx
  4106bf:	0f 8e 8b 04 00 00    	jle    410b50 <_Z19main_loop_task_parami+0xab0>
  4106c5:	44 3b 00             	cmp    (%rax),%r8d
  4106c8:	75 e6                	jne    4106b0 <_Z19main_loop_task_parami+0x610>
  4106ca:	8b 4f 04             	mov    0x4(%rdi),%ecx
  4106cd:	39 48 04             	cmp    %ecx,0x4(%rax)
  4106d0:	75 de                	jne    4106b0 <_Z19main_loop_task_parami+0x610>
  4106d2:	8b 4f 08             	mov    0x8(%rdi),%ecx
  4106d5:	39 48 08             	cmp    %ecx,0x8(%rax)
  4106d8:	75 d6                	jne    4106b0 <_Z19main_loop_task_parami+0x610>
  4106da:	8b 4f 0c             	mov    0xc(%rdi),%ecx
  4106dd:	39 48 0c             	cmp    %ecx,0xc(%rax)
  4106e0:	75 ce                	jne    4106b0 <_Z19main_loop_task_parami+0x610>
  4106e2:	8b 4f 10             	mov    0x10(%rdi),%ecx
  4106e5:	39 48 10             	cmp    %ecx,0x10(%rax)
  4106e8:	75 c6                	jne    4106b0 <_Z19main_loop_task_parami+0x610>
  4106ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
		for (int i = 0; i < other.edgeConstraints_size; ++i) {
  4106f0:	41 83 c3 01          	add    $0x1,%r11d
  4106f4:	48 83 c7 14          	add    $0x14,%rdi
  4106f8:	45 39 9c 24 6c 06 00 	cmp    %r11d,0x66c(%r12)
  4106ff:	00 
  410700:	7f 96                	jg     410698 <_Z19main_loop_task_parami+0x5f8>

			newNode->constraints[i].add(c.second);
			newNode->cost -= newNode->solution[i].cost;
  410702:	48 69 c5 50 06 00 00 	imul   $0x650,%rbp,%rax
			// LowLevelSearch
			State *s = &g_initialStates[i];
      //swarm::info("lls serch inii: %i , i_con: %i", new_nodeid, i);
      //if (j==1) continue;
      //swarm::info("swarm enw %i" ,i); P->timestamp
			swarm::enqueue(lls_search,P->timestamp ,
  410709:	49 63 be 4c 00 01 00 	movslq 0x1004c(%r14),%rdi
    register uint64_t r8  asm("r8")  = v3;
  410710:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
    register uint64_t r9  asm("r9")  = v4;
  410715:	49 89 e9             	mov    %rbp,%r9
    register uint64_t r10 asm("r10") = v5;
  410718:	4c 8b 54 24 50       	mov    0x50(%rsp),%r10
			newNode->cost -= newNode->solution[i].cost;
  41071d:	48 01 d8             	add    %rbx,%rax
  410720:	8b 90 10 06 00 00    	mov    0x610(%rax),%edx
			newNode->LB -= newNode->solution[i].fmin;
  410726:	8b 80 14 06 00 00    	mov    0x614(%rax),%eax
  41072c:	29 83 44 00 01 00    	sub    %eax,0x10044(%rbx)
      { return *(this->_M_impl._M_start + __n); }
  410732:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
			newNode->cost -= newNode->solution[i].cost;
  410737:	29 93 40 00 01 00    	sub    %edx,0x10040(%rbx)
  41073d:	48 8d 54 6d 00       	lea    0x0(%rbp,%rbp,2),%rdx
  410742:	4a 8b 04 28          	mov    (%rax,%r13,1),%rax
  410746:	48 8d 14 90          	lea    (%rax,%rdx,4),%rdx
        U(T _t) : t(_t) {}
  41074a:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
  41074f:	42 8b 0c 28          	mov    (%rax,%r13,1),%ecx
  410753:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  41075a:	ff ff ff 
  41075d:	48 23 44 24 60       	and    0x60(%rsp),%rax
  410762:	48 09 c8             	or     %rcx,%rax
            :);
  410765:	b9 04 00 01 40       	mov    $0x40010004,%ecx
        U(T _t) : t(_t) {}
  41076a:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
            :);
  41076f:	48 89 c6             	mov    %rax,%rsi
  410772:	48 87 c9             	xchg   %rcx,%rcx
					&global_nodelist[new_nodeid], i);
#else
					//global_nodelist[new_nodeid], i);
#endif
      //swarm::info("lls serch after: parent ts : %i , ts: %i", score,P->timestamp);
			child_id++;
  410775:	83 44 24 10 01       	addl   $0x1,0x10(%rsp)
  41077a:	8b 44 24 10          	mov    0x10(%rsp),%eax
      //j++;
			if(child_id > 2) {
  41077e:	83 f8 03             	cmp    $0x3,%eax
  410781:	0f 84 82 04 00 00    	je     410c09 <_Z19main_loop_task_parami+0xb69>
	_M_node = _Rb_tree_increment(_M_node);
  410787:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  41078e:	00 
  41078f:	4c 89 e7             	mov    %r12,%rdi
  410792:	4d 89 ef             	mov    %r13,%r15
  410795:	4c 01 e8             	add    %r13,%rax
  410798:	ff d0                	callq  *%rax
		 for (const auto& c : constraints) {
  41079a:	48 8b 1c 24          	mov    (%rsp),%rbx
  41079e:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  4107a2:	48 39 d0             	cmp    %rdx,%rax
  4107a5:	0f 84 97 05 00 00    	je     410d42 <_Z19main_loop_task_parami+0xca2>
  4107ab:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
  4107b0:	48 83 44 24 28 40    	addq   $0x40,0x28(%rsp)
  4107b6:	49 89 c4             	mov    %rax,%r12
			 size_t i = c.first;
  4107b9:	48 8b 68 20          	mov    0x20(%rax),%rbp
  4107bd:	44 8d 4b 01          	lea    0x1(%rbx),%r9d
  4107c1:	48 83 c3 01          	add    $0x1,%rbx
			 if(new_nodeid > MAX_NODE_NUMS) {
  4107c5:	81 fb 34 08 00 00    	cmp    $0x834,%ebx
  4107cb:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  4107d0:	0f 8e 76 fd ff ff    	jle    41054c <_Z19main_loop_task_parami+0x4ac>
  4107d6:	48 8d 9c 24 10 01 00 	lea    0x110(%rsp),%rbx
  4107dd:	00 
  4107de:	48 b8 30 7b df ff ff 	movabs $0xffffffffffdf7b30,%rax
  4107e5:	ff ff ff 
  4107e8:	49 ba b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r10
  4107ef:	ff ff ff 
  4107f2:	4d 8d 44 05 00       	lea    0x0(%r13,%rax,1),%r8
  4107f7:	b9 00 04 00 00       	mov    $0x400,%ecx
  4107fc:	ba 01 00 00 00       	mov    $0x1,%edx
  410801:	be ff 03 00 00       	mov    $0x3ff,%esi
  410806:	48 89 df             	mov    %rbx,%rdi
  410809:	4d 89 ef             	mov    %r13,%r15
  41080c:	31 c0                	xor    %eax,%eax
  41080e:	4d 01 ea             	add    %r13,%r10
  410811:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410814:	b9 05 04 00 00       	mov    $0x405,%ecx
  410819:	48 89 df             	mov    %rbx,%rdi
  41081c:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  41081f:	eb fe                	jmp    41081f <_Z19main_loop_task_parami+0x77f>
  410821:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  410828:	48 8d 9c 24 10 01 00 	lea    0x110(%rsp),%rbx
  41082f:	00 
  410830:	48 b8 f8 7a df ff ff 	movabs $0xffffffffffdf7af8,%rax
  410837:	ff ff ff 
  41083a:	49 ba b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r10
  410841:	ff ff ff 
  410844:	41 89 f1             	mov    %esi,%r9d
  410847:	4d 8d 44 05 00       	lea    0x0(%r13,%rax,1),%r8
  41084c:	b9 00 04 00 00       	mov    $0x400,%ecx
  410851:	ba 01 00 00 00       	mov    $0x1,%edx
  410856:	be ff 03 00 00       	mov    $0x3ff,%esi
  41085b:	48 89 df             	mov    %rbx,%rdi
  41085e:	4d 89 ef             	mov    %r13,%r15
  410861:	31 c0                	xor    %eax,%eax
  410863:	4d 01 ea             	add    %r13,%r10
  410866:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410869:	b9 05 04 00 00       	mov    $0x405,%ecx
  41086e:	48 89 df             	mov    %rbx,%rdi
  410871:	48 87 c9             	xchg   %rcx,%rcx
		 } // expand node

		 free(global_nodelist[nodeid].addr);
		 global_nodelist[nodeid].addr = NULL;
		 return;
	}
  410874:	48 81 c4 18 05 00 00 	add    $0x518,%rsp
  41087b:	5b                   	pop    %rbx
  41087c:	5d                   	pop    %rbp
  41087d:	41 5c                	pop    %r12
  41087f:	41 5d                	pop    %r13
  410881:	41 5e                	pop    %r14
  410883:	41 5f                	pop    %r15
  410885:	c3                   	retq   
  410886:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41088d:	00 00 00 
        State state1 = getState(i, solution, t);
  410890:	48 89 ea             	mov    %rbp,%rdx
  410893:	4c 89 ff             	mov    %r15,%rdi
  410896:	48 89 0c 24          	mov    %rcx,(%rsp)
  41089a:	4c 89 f6             	mov    %r14,%rsi
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  41089d:	49 83 c7 01          	add    $0x1,%r15
        State state1 = getState(i, solution, t);
  4108a1:	ff d3                	callq  *%rbx
  4108a3:	48 8b 0c 24          	mov    (%rsp),%rcx
  4108a7:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  4108ae:	00 
  4108af:	48 c1 e8 20          	shr    $0x20,%rax
  4108b3:	89 94 24 18 01 00 00 	mov    %edx,0x118(%rsp)
  4108ba:	48 89 c7             	mov    %rax,%rdi
  4108bd:	41 89 d0             	mov    %edx,%r8d
  4108c0:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  4108c7:	49 83 ff 14          	cmp    $0x14,%r15
  4108cb:	0f 85 26 fa ff ff    	jne    4102f7 <_Z19main_loop_task_parami+0x257>
        State state1a = getState(i, solution, t);
  4108d1:	48 89 ea             	mov    %rbp,%rdx
  4108d4:	4c 89 f6             	mov    %r14,%rsi
  4108d7:	31 ff                	xor    %edi,%edi
  4108d9:	ff d3                	callq  *%rbx
  4108db:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  4108e2:	00 
  4108e3:	48 c1 e8 20          	shr    $0x20,%rax
  4108e7:	89 94 24 a0 00 00 00 	mov    %edx,0xa0(%rsp)
  4108ee:	48 89 04 24          	mov    %rax,(%rsp)
  4108f2:	48 8d 45 01          	lea    0x1(%rbp),%rax
  4108f6:	41 89 d4             	mov    %edx,%r12d
        State state1b = getState(i, solution, t + 1);
  4108f9:	4c 89 f6             	mov    %r14,%rsi
  4108fc:	31 ff                	xor    %edi,%edi
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  4108fe:	41 bf 01 00 00 00    	mov    $0x1,%r15d
        State state1b = getState(i, solution, t + 1);
  410904:	48 89 c2             	mov    %rax,%rdx
  410907:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  41090c:	ff d3                	callq  *%rbx
  41090e:	48 89 84 24 a4 00 00 	mov    %rax,0xa4(%rsp)
  410915:	00 
  410916:	48 c1 e8 20          	shr    $0x20,%rax
  41091a:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  41091f:	89 94 24 ac 00 00 00 	mov    %edx,0xac(%rsp)
  410926:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41092b:	48 89 dd             	mov    %rbx,%rbp
  41092e:	89 54 24 20          	mov    %edx,0x20(%rsp)
  410932:	4d 8d 5f ff          	lea    -0x1(%r15),%r11
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  410936:	4c 89 fb             	mov    %r15,%rbx
  410939:	4c 89 7c 24 78       	mov    %r15,0x78(%rsp)
  41093e:	45 89 e7             	mov    %r12d,%r15d
  410941:	49 89 ec             	mov    %rbp,%r12
  410944:	eb 18                	jmp    41095e <_Z19main_loop_task_parami+0x8be>
  410946:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41094d:	00 00 00 
  410950:	48 83 c3 01          	add    $0x1,%rbx
  410954:	48 83 fb 14          	cmp    $0x14,%rbx
  410958:	0f 84 c4 02 00 00    	je     410c22 <_Z19main_loop_task_parami+0xb82>
          State state2a = getState(j, solution, t);
  41095e:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  410963:	4c 89 9c 24 80 00 00 	mov    %r11,0x80(%rsp)
  41096a:	00 
  41096b:	4c 89 f6             	mov    %r14,%rsi
  41096e:	48 89 df             	mov    %rbx,%rdi
  410971:	41 ff d4             	callq  *%r12
          State state2b = getState(j, solution, t + 1);
  410974:	48 89 df             	mov    %rbx,%rdi
          State state2a = getState(j, solution, t);
  410977:	89 94 24 e8 00 00 00 	mov    %edx,0xe8(%rsp)
  41097e:	89 d5                	mov    %edx,%ebp
  410980:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
  410987:	00 
          State state2b = getState(j, solution, t + 1);
  410988:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
  41098d:	4c 89 f6             	mov    %r14,%rsi
  410990:	41 ff d4             	callq  *%r12
  410993:	48 89 c7             	mov    %rax,%rdi
  410996:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
  41099d:	00 
  41099e:	4c 8b 9c 24 80 00 00 	mov    0x80(%rsp),%r11
  4109a5:	00 
  4109a6:	48 c1 ef 20          	shr    $0x20,%rdi
  4109aa:	3b 3c 24             	cmp    (%rsp),%edi
  4109ad:	89 94 24 18 01 00 00 	mov    %edx,0x118(%rsp)
  4109b4:	75 9a                	jne    410950 <_Z19main_loop_task_parami+0x8b0>
  4109b6:	44 39 fa             	cmp    %r15d,%edx
  4109b9:	75 95                	jne    410950 <_Z19main_loop_task_parami+0x8b0>
  4109bb:	8b 44 24 10          	mov    0x10(%rsp),%eax
  4109bf:	39 84 24 e4 00 00 00 	cmp    %eax,0xe4(%rsp)
  4109c6:	75 88                	jne    410950 <_Z19main_loop_task_parami+0x8b0>
          if (state1a.equalExceptTime(state2b) &&
  4109c8:	3b 6c 24 20          	cmp    0x20(%rsp),%ebp
  4109cc:	75 82                	jne    410950 <_Z19main_loop_task_parami+0x8b0>
            result.x2 = state1b.x;
  4109ce:	8b 44 24 10          	mov    0x10(%rsp),%eax
            result.agent2 = j;
  4109d2:	48 89 9c 24 c0 00 00 	mov    %rbx,0xc0(%rsp)
  4109d9:	00 
  4109da:	45 89 fc             	mov    %r15d,%r12d
            result.y2 = state1b.y;
  4109dd:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
            result.x1 = state1a.x;
  4109e1:	8b 2c 24             	mov    (%rsp),%ebp
    } else if (conflict.type == Conflict::Edge) {
      Constraints c1;
      c1.add(EdgeConstraint(
          conflict.time, conflict.x1, conflict.y1, conflict.x2, conflict.y2));
      constraints[conflict.agent1] = c1;
  4109e4:	48 8d b4 24 b8 00 00 	lea    0xb8(%rsp),%rsi
  4109eb:	00 
            result.time = t;
  4109ec:	44 8b 7c 24 28       	mov    0x28(%rsp),%r15d
            result.agent1 = i;
  4109f1:	4c 89 9c 24 b8 00 00 	mov    %r11,0xb8(%rsp)
  4109f8:	00 
            result.x2 = state1b.x;
  4109f9:	89 84 24 d4 00 00 00 	mov    %eax,0xd4(%rsp)
	    this->_M_header._M_left = &this->_M_header;
  410a00:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  410a07:	00 
            result.type = Conflict::Edge;
  410a08:	c7 84 24 c8 00 00 00 	movl   $0x1,0xc8(%rsp)
  410a0f:	01 00 00 00 
            result.y2 = state1b.y;
  410a13:	89 9c 24 d8 00 00 00 	mov    %ebx,0xd8(%rsp)
            result.x1 = state1a.x;
  410a1a:	89 ac 24 cc 00 00 00 	mov    %ebp,0xcc(%rsp)
  410a21:	48 89 c3             	mov    %rax,%rbx
  410a24:	48 8d 84 24 e8 00 00 	lea    0xe8(%rsp),%rax
  410a2b:	00 
            result.time = t;
  410a2c:	44 89 bc 24 b0 00 00 	mov    %r15d,0xb0(%rsp)
  410a33:	00 
      constraints[conflict.agent1] = c1;
  410a34:	48 89 1c 24          	mov    %rbx,(%rsp)
  410a38:	48 89 df             	mov    %rbx,%rdi
  410a3b:	48 bb d0 09 df ff ff 	movabs $0xffffffffffdf09d0,%rbx
  410a42:	ff ff ff 
  410a45:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  410a4c:	00 
	    this->_M_header._M_right = &this->_M_header;
  410a4d:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  410a54:	00 
  410a55:	48 8d 84 24 b0 00 00 	lea    0xb0(%rsp),%rax
  410a5c:	00 
            result.y1 = state1a.y;
  410a5d:	44 89 a4 24 d0 00 00 	mov    %r12d,0xd0(%rsp)
  410a64:	00 
	    _M_node_count(0)
  410a65:	c7 84 24 e8 00 00 00 	movl   $0x0,0xe8(%rsp)
  410a6c:	00 00 00 00 
      constraints[conflict.agent1] = c1;
  410a70:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  410a75:	48 c7 84 24 f0 00 00 	movq   $0x0,0xf0(%rsp)
  410a7c:	00 00 00 00 00 
  410a81:	4a 8d 04 2b          	lea    (%rbx,%r13,1),%rax
  410a85:	48 c7 84 24 08 01 00 	movq   $0x0,0x108(%rsp)
  410a8c:	00 00 00 00 00 
  410a91:	ff d0                	callq  *%rax
  410a93:	8b 4c 24 10          	mov    0x10(%rsp),%ecx
      Constraints c2;
      c2.add(EdgeConstraint(
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
      constraints[conflict.agent2] = c2;
  410a97:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
      constraints[conflict.agent1] = c1;
  410a9c:	44 89 b8 58 02 00 00 	mov    %r15d,0x258(%rax)
  410aa3:	89 a8 5c 02 00 00    	mov    %ebp,0x25c(%rax)
  410aa9:	44 89 a0 60 02 00 00 	mov    %r12d,0x260(%rax)
  410ab0:	c7 80 40 06 00 00 00 	movl   $0x0,0x640(%rax)
  410ab7:	00 00 00 
  410aba:	89 88 64 02 00 00    	mov    %ecx,0x264(%rax)
  410ac0:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
      constraints[conflict.agent2] = c2;
  410ac4:	48 83 c6 10          	add    $0x10,%rsi
      constraints[conflict.agent1] = c1;
  410ac8:	c7 80 44 06 00 00 01 	movl   $0x1,0x644(%rax)
  410acf:	00 00 00 
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
  410ad2:	8b ac 24 d0 00 00 00 	mov    0xd0(%rsp),%ebp
  410ad9:	44 8b a4 24 cc 00 00 	mov    0xcc(%rsp),%r12d
  410ae0:	00 
  410ae1:	44 8b bc 24 b0 00 00 	mov    0xb0(%rsp),%r15d
  410ae8:	00 
      constraints[conflict.agent1] = c1;
  410ae9:	89 88 68 02 00 00    	mov    %ecx,0x268(%rax)
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
  410aef:	8b 8c 24 d8 00 00 00 	mov    0xd8(%rsp),%ecx
      constraints[conflict.agent2] = c2;
  410af6:	4a 8d 04 2b          	lea    (%rbx,%r13,1),%rax
  410afa:	48 8b 3c 24          	mov    (%rsp),%rdi
          conflict.time, conflict.x2, conflict.y2, conflict.x1, conflict.y1));
  410afe:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
  410b02:	8b 8c 24 d4 00 00 00 	mov    0xd4(%rsp),%ecx
  410b09:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
      constraints[conflict.agent2] = c2;
  410b0d:	ff d0                	callq  *%rax
  410b0f:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
  410b13:	44 89 b8 58 02 00 00 	mov    %r15d,0x258(%rax)
  410b1a:	44 89 a0 64 02 00 00 	mov    %r12d,0x264(%rax)
  410b21:	89 a8 68 02 00 00    	mov    %ebp,0x268(%rax)
  410b27:	c7 80 40 06 00 00 00 	movl   $0x0,0x640(%rax)
  410b2e:	00 00 00 
  410b31:	c7 80 44 06 00 00 01 	movl   $0x1,0x644(%rax)
  410b38:	00 00 00 
  410b3b:	89 98 5c 02 00 00    	mov    %ebx,0x25c(%rax)
  410b41:	8b 5c 24 10          	mov    0x10(%rsp),%ebx
  410b45:	89 98 60 02 00 00    	mov    %ebx,0x260(%rax)
  410b4b:	e9 06 f9 ff ff       	jmpq   410456 <_Z19main_loop_task_parami+0x3b6>
					found_same_key = true;
					break;
				}
			}
			if (!found_same_key) { // Not found
				edgeConstraints[edgeConstraints_size] = other.edgeConstraints[i];
  410b50:	48 63 c1             	movslq %ecx,%rax
  410b53:	48 8b 17             	mov    (%rdi),%rdx
				edgeConstraints_size++;
  410b56:	83 c1 01             	add    $0x1,%ecx
				edgeConstraints[edgeConstraints_size] = other.edgeConstraints[i];
  410b59:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  410b5d:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
  410b61:	48 8d 84 03 90 80 00 	lea    0x8090(%rbx,%rax,1),%rax
  410b68:	00 
  410b69:	48 89 50 08          	mov    %rdx,0x8(%rax)
  410b6d:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  410b71:	48 89 50 10          	mov    %rdx,0x10(%rax)
  410b75:	8b 57 10             	mov    0x10(%rdi),%edx
  410b78:	89 50 18             	mov    %edx,0x18(%rax)
				edgeConstraints_size++;
  410b7b:	89 8e 84 84 00 00    	mov    %ecx,0x8484(%rsi)
  410b81:	e9 6a fb ff ff       	jmpq   4106f0 <_Z19main_loop_task_parami+0x650>
  410b86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  410b8d:	00 00 00 
				vertexConstraints[vertexConstraints_size] = other.vertexConstraints[i];
  410b90:	48 63 c1             	movslq %ecx,%rax
  410b93:	49 8b 10             	mov    (%r8),%rdx
				vertexConstraints_size++;
  410b96:	83 c1 01             	add    $0x1,%ecx
				vertexConstraints[vertexConstraints_size] = other.vertexConstraints[i];
  410b99:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
  410b9d:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
  410ba1:	48 01 d8             	add    %rbx,%rax
  410ba4:	48 89 90 40 7e 00 00 	mov    %rdx,0x7e40(%rax)
  410bab:	41 8b 50 08          	mov    0x8(%r8),%edx
  410baf:	89 90 48 7e 00 00    	mov    %edx,0x7e48(%rax)
				vertexConstraints_size++;
  410bb5:	89 8e 80 84 00 00    	mov    %ecx,0x8480(%rsi)
  410bbb:	e9 8b fa ff ff       	jmpq   41064b <_Z19main_loop_task_parami+0x5ab>
  410bc0:	49 bb b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r11
  410bc7:	ff ff ff 
  410bca:	41 b9 40 00 00 00    	mov    $0x40,%r9d
  410bd0:	4c 8b 84 24 88 00 00 	mov    0x88(%rsp),%r8
  410bd7:	00 
  410bd8:	b9 00 04 00 00       	mov    $0x400,%ecx
  410bdd:	ba 01 00 00 00       	mov    $0x1,%edx
  410be2:	be ff 03 00 00       	mov    $0x3ff,%esi
  410be7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  410bec:	4d 89 ef             	mov    %r13,%r15
  410bef:	31 c0                	xor    %eax,%eax
  410bf1:	4d 01 eb             	add    %r13,%r11
  410bf4:	41 ff d3             	callq  *%r11
  410bf7:	b9 05 04 00 00       	mov    $0x405,%ecx
  410bfc:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  410c01:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  410c04:	e9 f9 fa ff ff       	jmpq   410702 <_Z19main_loop_task_parami+0x662>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410c09:	48 b8 4d 7e df ff ff 	movabs $0xffffffffffdf7e4d,%rax
  410c10:	ff ff ff 
  410c13:	b9 05 04 00 00       	mov    $0x405,%ecx
  410c18:	49 8d 7c 05 00       	lea    0x0(%r13,%rax,1),%rdi
  410c1d:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  410c20:	eb fe                	jmp    410c20 <_Z19main_loop_task_parami+0xb80>
        State state1a = getState(i, solution, t);
  410c22:	48 8b 54 24 50       	mov    0x50(%rsp),%rdx
  410c27:	4c 8b 7c 24 78       	mov    0x78(%rsp),%r15
  410c2c:	4c 89 e5             	mov    %r12,%rbp
  410c2f:	4c 89 f6             	mov    %r14,%rsi
  410c32:	4c 89 ff             	mov    %r15,%rdi
  410c35:	41 ff d4             	callq  *%r12
  410c38:	89 94 24 a0 00 00 00 	mov    %edx,0xa0(%rsp)
  410c3f:	41 89 d4             	mov    %edx,%r12d
        State state1b = getState(i, solution, t + 1);
  410c42:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
        State state1a = getState(i, solution, t);
  410c47:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  410c4e:	00 
        State state1b = getState(i, solution, t + 1);
  410c4f:	4c 89 ff             	mov    %r15,%rdi
        State state1a = getState(i, solution, t);
  410c52:	48 c1 e8 20          	shr    $0x20,%rax
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  410c56:	49 83 c7 01          	add    $0x1,%r15
        State state1a = getState(i, solution, t);
  410c5a:	48 89 04 24          	mov    %rax,(%rsp)
        State state1b = getState(i, solution, t + 1);
  410c5e:	4c 89 f6             	mov    %r14,%rsi
  410c61:	ff d5                	callq  *%rbp
  410c63:	48 89 84 24 a4 00 00 	mov    %rax,0xa4(%rsp)
  410c6a:	00 
  410c6b:	48 c1 e8 20          	shr    $0x20,%rax
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  410c6f:	49 83 ff 14          	cmp    $0x14,%r15
        State state1b = getState(i, solution, t + 1);
  410c73:	89 94 24 ac 00 00 00 	mov    %edx,0xac(%rsp)
  410c7a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  410c7f:	89 54 24 20          	mov    %edx,0x20(%rsp)
        for (size_t j = i + 1; j < ROBOT_NUMS; ++j) {
  410c83:	0f 85 a9 fc ff ff    	jne    410932 <_Z19main_loop_task_parami+0x892>
  410c89:	48 89 eb             	mov    %rbp,%rbx
  410c8c:	48 8b 6c 24 40       	mov    0x40(%rsp),%rbp
    for (int t = 0; t < max_t; ++t) {
  410c91:	39 6c 24 58          	cmp    %ebp,0x58(%rsp)
  410c95:	0f 8f 23 f6 ff ff    	jg     4102be <_Z19main_loop_task_parami+0x21e>
  410c9b:	41 8b 86 40 00 01 00 	mov    0x10040(%r14),%eax
  410ca2:	48 8d 9c 24 10 01 00 	lea    0x110(%rsp),%rbx
  410ca9:	00 
  410caa:	48 83 ec 08          	sub    $0x8,%rsp
  410cae:	49 ba b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r10
  410cb5:	ff ff ff 
  410cb8:	b9 00 04 00 00       	mov    $0x400,%ecx
  410cbd:	ba 01 00 00 00       	mov    $0x1,%edx
  410cc2:	be ff 03 00 00       	mov    $0x3ff,%esi
  410cc7:	48 89 df             	mov    %rbx,%rdi
  410cca:	4d 89 ef             	mov    %r13,%r15
  410ccd:	50                   	push   %rax
  410cce:	48 b8 80 7b df ff ff 	movabs $0xffffffffffdf7b80,%rax
  410cd5:	ff ff ff 
  410cd8:	44 8b 4c 24 40       	mov    0x40(%rsp),%r9d
  410cdd:	4d 8d 44 05 00       	lea    0x0(%r13,%rax,1),%r8
  410ce2:	4d 01 ea             	add    %r13,%r10
  410ce5:	31 c0                	xor    %eax,%eax
  410ce7:	41 ff d2             	callq  *%r10
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  410cea:	b9 05 04 00 00       	mov    $0x405,%ecx
  410cef:	48 89 df             	mov    %rbx,%rdi
  410cf2:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  410cf5:	58                   	pop    %rax
  410cf6:	5a                   	pop    %rdx
  410cf7:	48 ba 00 eb 4b 9a 01 	movabs $0x19a4beb00,%rdx
  410cfe:	00 00 00 
  410d01:	31 c0                	xor    %eax,%eax
				 g_solution[i] = P->solution[i];
  410d03:	4c 01 ea             	add    %r13,%rdx
  410d06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  410d0d:	00 00 00 
  410d10:	48 8d 3c 10          	lea    (%rax,%rdx,1),%rdi
  410d14:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
  410d18:	b9 c9 00 00 00       	mov    $0xc9,%ecx
  410d1d:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  410d20:	48 05 50 06 00 00    	add    $0x650,%rax
			 for(int i = 0; i < ROBOT_NUMS; ++i) {
  410d26:	48 3d 40 7e 00 00    	cmp    $0x7e40,%rax
				 g_solution[i] = P->solution[i];
  410d2c:	0f b6 0e             	movzbl (%rsi),%ecx
  410d2f:	88 0f                	mov    %cl,(%rdi)
			 for(int i = 0; i < ROBOT_NUMS; ++i) {
  410d31:	75 dd                	jne    410d10 <_Z19main_loop_task_parami+0xc70>
			 g_isNoConflict = true;
  410d33:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  410d38:	42 c6 04 28 01       	movb   $0x1,(%rax,%r13,1)
			 return;
  410d3d:	e9 32 fb ff ff       	jmpq   410874 <_Z19main_loop_task_parami+0x7d4>
  410d42:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  410d47:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
		 free(global_nodelist[nodeid].addr);
  410d4c:	4d 89 ef             	mov    %r13,%r15
  410d4f:	48 c1 e2 06          	shl    $0x6,%rdx
  410d53:	4c 01 e8             	add    %r13,%rax
  410d56:	48 8b 3c 02          	mov    (%rdx,%rax,1),%rdi
  410d5a:	48 b8 00 76 df ff ff 	movabs $0xffffffffffdf7600,%rax
  410d61:	ff ff ff 
  410d64:	4c 01 e8             	add    %r13,%rax
  410d67:	ff d0                	callq  *%rax
		 global_nodelist[nodeid].addr = NULL;
  410d69:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  410d6e:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
      { _M_erase(_M_begin()); }
  410d73:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  410d7a:	00 
  410d7b:	48 8b 3c 24          	mov    (%rsp),%rdi
  410d7f:	4c 01 e8             	add    %r13,%rax
  410d82:	48 c1 e2 06          	shl    $0x6,%rdx
  410d86:	48 c7 04 02 00 00 00 	movq   $0x0,(%rdx,%rax,1)
  410d8d:	00 
  410d8e:	48 b8 a0 e9 de ff ff 	movabs $0xffffffffffdee9a0,%rax
  410d95:	ff ff ff 
  410d98:	4c 01 e8             	add    %r13,%rax
  410d9b:	ff d0                	callq  *%rax
  410d9d:	e9 d2 fa ff ff       	jmpq   410874 <_Z19main_loop_task_parami+0x7d4>
  410da2:	48 89 c3             	mov    %rax,%rbx
  410da5:	48 b8 a0 e9 de ff ff 	movabs $0xffffffffffdee9a0,%rax
  410dac:	ff ff ff 
  410daf:	48 8b 3c 24          	mov    (%rsp),%rdi
  410db3:	4c 01 e8             	add    %r13,%rax
  410db6:	48 8b b4 24 f0 00 00 	mov    0xf0(%rsp),%rsi
  410dbd:	00 
  410dbe:	4d 89 ef             	mov    %r13,%r15
  410dc1:	ff d0                	callq  *%rax
  410dc3:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  410dca:	ff ff ff 
  410dcd:	48 89 df             	mov    %rbx,%rdi
  410dd0:	4c 01 e8             	add    %r13,%rax
  410dd3:	ff d0                	callq  *%rax
  410dd5:	90                   	nop
  410dd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  410ddd:	00 00 00 

0000000000410de0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult>:
}
#endif

#if 1
  bool astar_search(LowLevelEnvironment& m_env, float m_w, 
			const State& startState, PlanResult& solution) {
  410de0:	55                   	push   %rbp
  410de1:	48 8d 05 f8 ff ff ff 	lea    -0x8(%rip),%rax        # 410de0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult>
  410de8:	49 bb 20 a2 21 00 00 	movabs $0x21a220,%r11
  410def:	00 00 00 
  410df2:	48 89 e5             	mov    %rsp,%rbp
  410df5:	41 57                	push   %r15
  410df7:	41 56                	push   %r14
  410df9:	41 55                	push   %r13
  410dfb:	41 54                	push   %r12
  410dfd:	4c 01 d8             	add    %r11,%rax
  410e00:	53                   	push   %rbx
  410e01:	49 89 c7             	mov    %rax,%r15
  410e04:	48 81 ec 38 06 00 00 	sub    $0x638,%rsp
  410e0b:	48 89 85 48 fa ff ff 	mov    %rax,-0x5b8(%rbp)
  410e12:	48 89 f0             	mov    %rsi,%rax
		cost = 0;
  410e15:	c7 82 10 06 00 00 00 	movl   $0x0,0x610(%rdx)
  410e1c:	00 00 00 
		fmin = 0;
  410e1f:	c7 82 14 06 00 00 00 	movl   $0x0,0x614(%rdx)
  410e26:	00 00 00 
  410e29:	48 89 c3             	mov    %rax,%rbx
  410e2c:	8b 08                	mov    (%rax),%ecx
		actions_size = 0;
  410e2e:	48 c7 82 08 06 00 00 	movq   $0x0,0x608(%rdx)
  410e35:	00 00 00 00 
  410e39:	f3 0f 11 85 28 fa ff 	movss  %xmm0,-0x5d8(%rbp)
  410e40:	ff 
  410e41:	48 89 b5 b8 f9 ff ff 	mov    %rsi,-0x648(%rbp)
  410e48:	48 89 95 08 fa ff ff 	mov    %rdx,-0x5f8(%rbp)
  410e4f:	48 89 d6             	mov    %rdx,%rsi
  410e52:	8b 50 04             	mov    0x4(%rax),%edx
  410e55:	8b 40 08             	mov    0x8(%rax),%eax
  410e58:	48 89 bd e0 f9 ff ff 	mov    %rdi,-0x620(%rbp)
			states[states_size] = s;
  410e5f:	89 0e                	mov    %ecx,(%rsi)
  410e61:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%rsi)
  410e68:	89 56 04             	mov    %edx,0x4(%rsi)
			states_size++;
  410e6b:	48 c7 86 00 04 00 00 	movq   $0x1,0x400(%rsi)
  410e72:	01 00 00 00 
			states[states_size] = s;
  410e76:	89 46 08             	mov    %eax,0x8(%rsi)
  410e79:	48 8d 85 10 fb ff ff 	lea    -0x4f0(%rbp),%rax
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  410e80:	48 c7 85 70 fa ff ff 	movq   $0x0,-0x590(%rbp)
  410e87:	00 00 00 00 
  410e8b:	48 c7 85 78 fa ff ff 	movq   $0x0,-0x588(%rbp)
  410e92:	00 00 00 00 
  410e96:	48 c7 85 80 fa ff ff 	movq   $0x0,-0x580(%rbp)
  410e9d:	00 00 00 00 
  410ea1:	48 89 85 38 fa ff ff 	mov    %rax,-0x5c8(%rbp)
  410ea8:	49 89 c6             	mov    %rax,%r14
  410eab:	48 83 c0 30          	add    $0x30,%rax
  410eaf:	48 89 85 10 fb ff ff 	mov    %rax,-0x4f0(%rbp)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  410eb6:	48 b8 f8 92 df ff ff 	movabs $0xffffffffffdf92f8,%rax
  410ebd:	ff ff ff 
  410ec0:	48 c7 85 90 fa ff ff 	movq   $0x0,-0x570(%rbp)
  410ec7:	00 00 00 00 
  410ecb:	48 c7 85 98 fa ff ff 	movq   $0x0,-0x568(%rbp)
  410ed2:	00 00 00 00 
  410ed6:	48 c7 85 a0 fa ff ff 	movq   $0x0,-0x560(%rbp)
  410edd:	00 00 00 00 
  410ee1:	48 c7 85 18 fb ff ff 	movq   $0x1,-0x4e8(%rbp)
  410ee8:	01 00 00 00 
    _Hash_node_base() noexcept : _M_nxt() { }
  410eec:	48 c7 85 20 fb ff ff 	movq   $0x0,-0x4e0(%rbp)
  410ef3:	00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  410ef7:	f3 41 0f 10 04 07    	movss  (%r15,%rax,1),%xmm0
  410efd:	48 8d 85 50 fb ff ff 	lea    -0x4b0(%rbp),%rax
      { return *(this->_M_impl._M_start + __n); }
  410f04:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  410f08:	8b 4b 08             	mov    0x8(%rbx),%ecx
  410f0b:	48 c7 85 28 fb ff ff 	movq   $0x0,-0x4d8(%rbp)
  410f12:	00 00 00 00 
  410f16:	f3 0f 11 85 30 fb ff 	movss  %xmm0,-0x4d0(%rbp)
  410f1d:	ff 
  410f1e:	48 89 85 e8 f9 ff ff 	mov    %rax,-0x618(%rbp)
  410f25:	48 83 c0 30          	add    $0x30,%rax
  410f29:	48 c7 85 38 fb ff ff 	movq   $0x0,-0x4c8(%rbp)
  410f30:	00 00 00 00 
  410f34:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
  410f3b:	48 8d 85 90 fb ff ff 	lea    -0x470(%rbp),%rax
  410f42:	f3 0f 11 85 70 fb ff 	movss  %xmm0,-0x490(%rbp)
  410f49:	ff 
  410f4a:	48 c7 85 40 fb ff ff 	movq   $0x0,-0x4c0(%rbp)
  410f51:	00 00 00 00 
  410f55:	48 c7 85 58 fb ff ff 	movq   $0x1,-0x4a8(%rbp)
  410f5c:	01 00 00 00 
  410f60:	f3 0f 11 85 b0 fb ff 	movss  %xmm0,-0x450(%rbp)
  410f67:	ff 
  410f68:	48 89 85 00 fa ff ff 	mov    %rax,-0x600(%rbp)
  410f6f:	48 83 c0 30          	add    $0x30,%rax
  410f73:	48 89 85 90 fb ff ff 	mov    %rax,-0x470(%rbp)
  410f7a:	48 8b 07             	mov    (%rdi),%rax
  410f7d:	48 8d bd 70 fa ff ff 	lea    -0x590(%rbp),%rdi
    _Hash_node_base() noexcept : _M_nxt() { }
  410f84:	48 c7 85 60 fb ff ff 	movq   $0x0,-0x4a0(%rbp)
  410f8b:	00 00 00 00 
  410f8f:	48 c7 85 68 fb ff ff 	movq   $0x0,-0x498(%rbp)
  410f96:	00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  410f9a:	48 c7 85 78 fb ff ff 	movq   $0x0,-0x488(%rbp)
  410fa1:	00 00 00 00 
  410fa5:	48 c7 85 80 fb ff ff 	movq   $0x0,-0x480(%rbp)
  410fac:	00 00 00 00 
  410fb0:	48 c7 85 98 fb ff ff 	movq   $0x1,-0x468(%rbp)
  410fb7:	01 00 00 00 
  410fbb:	48 8b 00             	mov    (%rax),%rax
    _Hash_node_base() noexcept : _M_nxt() { }
  410fbe:	48 c7 85 a0 fb ff ff 	movq   $0x0,-0x460(%rbp)
  410fc5:	00 00 00 00 
  410fc9:	48 c7 85 a8 fb ff ff 	movq   $0x0,-0x458(%rbp)
  410fd0:	00 00 00 00 
    : _M_max_load_factor(__z), _M_next_resize(0) { }
  410fd4:	48 c7 85 b8 fb ff ff 	movq   $0x0,-0x448(%rbp)
  410fdb:	00 00 00 00 
  410fdf:	48 c7 85 c0 fb ff ff 	movq   $0x0,-0x440(%rbp)
  410fe6:	00 00 00 00 
  410fea:	48 8d 34 d0          	lea    (%rax,%rdx,8),%rsi
  410fee:	89 c8                	mov    %ecx,%eax
  410ff0:	2b 46 04             	sub    0x4(%rsi),%eax
  410ff3:	99                   	cltd   
  410ff4:	31 d0                	xor    %edx,%eax
  410ff6:	29 d0                	sub    %edx,%eax
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  410ff8:	8b 53 04             	mov    0x4(%rbx),%edx
  410ffb:	2b 16                	sub    (%rsi),%edx
		stat(0) {}
  410ffd:	89 8d d8 fb ff ff    	mov    %ecx,-0x428(%rbp)
  411003:	89 d6                	mov    %edx,%esi
  411005:	c1 fe 1f             	sar    $0x1f,%esi
  411008:	31 f2                	xor    %esi,%edx
  41100a:	29 f2                	sub    %esi,%edx
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  41100c:	01 d0                	add    %edx,%eax
  41100e:	48 8b 13             	mov    (%rbx),%rdx
  411011:	89 85 dc fb ff ff    	mov    %eax,-0x424(%rbp)
  411017:	48 8d 85 d0 fb ff ff 	lea    -0x430(%rbp),%rax
  41101e:	48 89 95 d0 fb ff ff 	mov    %rdx,-0x430(%rbp)
  411025:	49 89 c4             	mov    %rax,%r12
  411028:	c7 85 e0 fb ff ff 00 	movl   $0x0,-0x420(%rbp)
  41102f:	00 00 00 
  411032:	48 89 c6             	mov    %rax,%rsi
  411035:	48 89 85 20 fa ff ff 	mov    %rax,-0x5e0(%rbp)
  41103c:	48 b8 c0 f2 de ff ff 	movabs $0xffffffffffdef2c0,%rax
  411043:	ff ff ff 
  411046:	c7 85 e4 fb ff ff 00 	movl   $0x0,-0x41c(%rbp)
  41104d:	00 00 00 
  411050:	c7 85 e8 fb ff ff 00 	movl   $0x0,-0x418(%rbp)
  411057:	00 00 00 
  41105a:	4c 01 f8             	add    %r15,%rax
  41105d:	48 89 bd d0 f9 ff ff 	mov    %rdi,-0x630(%rbp)
  411064:	ff d0                	callq  *%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  411066:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  41106d:	48 2b 85 70 fa ff ff 	sub    -0x590(%rbp),%rax
	  return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
  411074:	48 83 ec 08          	sub    $0x8,%rsp
        cameFrom;

    openSet.push_back(
        AstarNode(startState, m_env.admissibleHeuristic(startState), 0, 0));
		int index = openSet.size() - 1;
    stateToHeap.insert(std::make_pair<>(startState, index));
  411078:	8b 33                	mov    (%rbx),%esi
      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }
  41107a:	8b 4b 04             	mov    0x4(%rbx),%ecx
  41107d:	4c 89 f7             	mov    %r14,%rdi
  411080:	8b 53 08             	mov    0x8(%rbx),%edx
  411083:	6a 00                	pushq  $0x0
  411085:	48 c1 f8 02          	sar    $0x2,%rax
  411089:	89 b5 d0 fb ff ff    	mov    %esi,-0x430(%rbp)
  41108f:	89 8d d4 fb ff ff    	mov    %ecx,-0x42c(%rbp)
  411095:	69 c0 49 92 24 49    	imul   $0x49249249,%eax,%eax
  41109b:	89 95 d8 fb ff ff    	mov    %edx,-0x428(%rbp)
  4110a1:	4c 89 e6             	mov    %r12,%rsi
		int index = openSet.size() - 1;
  4110a4:	f7 d0                	not    %eax
  4110a6:	89 85 5c fa ff ff    	mov    %eax,-0x5a4(%rbp)
    stateToHeap.insert(std::make_pair<>(startState, index));
  4110ac:	89 85 dc fb ff ff    	mov    %eax,-0x424(%rbp)
  4110b2:	48 b8 20 23 df ff ff 	movabs $0xffffffffffdf2320,%rax
  4110b9:	ff ff ff 
  4110bc:	4c 01 f8             	add    %r15,%rax
  4110bf:	ff d0                	callq  *%rax
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4110c1:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  4110c8:	48 3b 85 a0 fa ff ff 	cmp    -0x560(%rbp),%rax
  4110cf:	41 5a                	pop    %r10
  4110d1:	41 5b                	pop    %r11
  4110d3:	0f 84 b2 1a 00 00    	je     412b8b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1dab>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  4110d9:	48 85 c0             	test   %rax,%rax
  4110dc:	8b 95 5c fa ff ff    	mov    -0x5a4(%rbp),%edx
  4110e2:	74 02                	je     4110e6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x306>
  4110e4:	89 10                	mov    %edx,(%rax)
	    ++this->_M_impl._M_finish;
  4110e6:	48 83 c0 04          	add    $0x4,%rax
  4110ea:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
    //(*handle).handle = handle;

    focalSet.push_back(index);

    std::vector<Neighbor<State, Action, Cost> > neighbors;
    neighbors.reserve(10);
  4110f1:	48 8d 85 b0 fa ff ff 	lea    -0x550(%rbp),%rax
  4110f8:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  4110ff:	48 c7 85 b0 fa ff ff 	movq   $0x0,-0x550(%rbp)
  411106:	00 00 00 00 
  41110a:	48 c7 85 b8 fa ff ff 	movq   $0x0,-0x548(%rbp)
  411111:	00 00 00 00 
  411115:	48 c7 85 c0 fa ff ff 	movq   $0x0,-0x540(%rbp)
  41111c:	00 00 00 00 
  411120:	be 0a 00 00 00       	mov    $0xa,%esi
  411125:	48 89 85 b0 f9 ff ff 	mov    %rax,-0x650(%rbp)
  41112c:	48 89 c7             	mov    %rax,%rdi
  41112f:	48 b8 d0 bf de ff ff 	movabs $0xffffffffffdebfd0,%rax
  411136:	ff ff ff 
  411139:	4c 01 f8             	add    %r15,%rax
  41113c:	ff d0                	callq  *%rax

    Cost bestFScore = openSet[focalSet[0]].fScore;
  41113e:	48 8b 85 90 fa ff ff 	mov    -0x570(%rbp),%rax
  411145:	48 8b 9d 70 fa ff ff 	mov    -0x590(%rbp),%rbx
  41114c:	48 63 10             	movslq (%rax),%rdx
  41114f:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  411156:	00 
  411157:	48 29 d0             	sub    %rdx,%rax
  41115a:	44 8b 6c 83 0c       	mov    0xc(%rbx,%rax,4),%r13d
  41115f:	48 8d 85 90 fa ff ff 	lea    -0x570(%rbp),%rax
  411166:	48 89 85 c8 f9 ff ff 	mov    %rax,-0x638(%rbp)
  41116d:	48 b8 70 f4 de ff ff 	movabs $0xffffffffffdef470,%rax
  411174:	ff ff ff 
  411177:	4c 01 f8             	add    %r15,%rax
  41117a:	48 89 85 c0 f9 ff ff 	mov    %rax,-0x640(%rbp)
  411181:	4c 8b a5 78 fa ff ff 	mov    -0x588(%rbp),%r12
	for (; iter != iterEnd; ++iter) {
  411188:	49 39 dc             	cmp    %rbx,%r12
  41118b:	74 29                	je     4111b6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3d6>
		if(iter->stat == 0)
  41118d:	44 8b 4b 18          	mov    0x18(%rbx),%r9d
  411191:	48 8d 43 1c          	lea    0x1c(%rbx),%rax
  411195:	45 85 c9             	test   %r9d,%r9d
  411198:	75 17                	jne    4111b1 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3d1>
  41119a:	e9 80 02 00 00       	jmpq   41141f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x63f>
  41119f:	90                   	nop
  4111a0:	48 83 c0 1c          	add    $0x1c,%rax
  4111a4:	44 8b 40 fc          	mov    -0x4(%rax),%r8d
  4111a8:	45 85 c0             	test   %r8d,%r8d
  4111ab:	0f 84 6e 02 00 00    	je     41141f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x63f>
	for (; iter != iterEnd; ++iter) {
  4111b1:	49 39 c4             	cmp    %rax,%r12
  4111b4:	75 ea                	jne    4111a0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3c0>
                                tentative_gScore)));
        }
      }
    }

    return false;
  4111b6:	45 31 ed             	xor    %r13d,%r13d
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4111b9:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
	if (__p)
  4111c0:	48 85 ff             	test   %rdi,%rdi
  4111c3:	74 19                	je     4111de <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3fe>
      { ::operator delete(__p); }
  4111c5:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  4111cc:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  4111d3:	ff ff ff 
  4111d6:	49 89 c7             	mov    %rax,%r15
  4111d9:	48 01 c3             	add    %rax,%rbx
  4111dc:	ff d3                	callq  *%rbx
  4111de:	48 8b bd a0 fb ff ff 	mov    -0x460(%rbp),%rdi
  4111e5:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  4111ec:	ff ff ff 
  4111ef:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
      while (__n)
  4111f6:	48 85 ff             	test   %rdi,%rdi
  4111f9:	74 14                	je     41120f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x42f>
  4111fb:	4c 8b 27             	mov    (%rdi),%r12
  4111fe:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  411205:	ff d3                	callq  *%rbx
  411207:	4d 85 e4             	test   %r12,%r12
  41120a:	4c 89 e7             	mov    %r12,%rdi
  41120d:	75 ec                	jne    4111fb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x41b>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  41120f:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
  411216:	49 bc 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%r12
  41121d:	ff ff ff 
  411220:	31 f6                	xor    %esi,%esi
  411222:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
  411229:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  411230:	00 
  411231:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  411238:	49 89 c7             	mov    %rax,%r15
  41123b:	4c 01 e0             	add    %r12,%rax
  41123e:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  411240:	48 8b 85 00 fa ff ff 	mov    -0x600(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  411247:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
      _M_element_count = 0;
  41124e:	48 c7 85 a8 fb ff ff 	movq   $0x0,-0x458(%rbp)
  411255:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  411259:	48 c7 85 a0 fb ff ff 	movq   $0x0,-0x460(%rbp)
  411260:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  411264:	48 83 c0 30          	add    $0x30,%rax
  411268:	48 39 c7             	cmp    %rax,%rdi
  41126b:	74 19                	je     411286 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x4a6>
  41126d:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  411274:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  41127b:	ff ff ff 
  41127e:	49 89 c7             	mov    %rax,%r15
  411281:	48 01 c3             	add    %rax,%rbx
  411284:	ff d3                	callq  *%rbx
  411286:	48 8b bd 60 fb ff ff 	mov    -0x4a0(%rbp),%rdi
  41128d:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  411294:	ff ff ff 
  411297:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
  41129e:	48 85 ff             	test   %rdi,%rdi
  4112a1:	74 14                	je     4112b7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x4d7>
  4112a3:	4c 8b 37             	mov    (%rdi),%r14
  4112a6:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  4112ad:	ff d3                	callq  *%rbx
  4112af:	4d 85 f6             	test   %r14,%r14
  4112b2:	4c 89 f7             	mov    %r14,%rdi
  4112b5:	75 ec                	jne    4112a3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x4c3>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  4112b7:	48 8b 85 58 fb ff ff 	mov    -0x4a8(%rbp),%rax
  4112be:	31 f6                	xor    %esi,%esi
  4112c0:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
  4112c7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4112ce:	00 
  4112cf:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  4112d6:	49 89 c7             	mov    %rax,%r15
  4112d9:	4c 01 e0             	add    %r12,%rax
  4112dc:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  4112de:	48 8b 85 e8 f9 ff ff 	mov    -0x618(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  4112e5:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
      _M_element_count = 0;
  4112ec:	48 c7 85 68 fb ff ff 	movq   $0x0,-0x498(%rbp)
  4112f3:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  4112f7:	48 c7 85 60 fb ff ff 	movq   $0x0,-0x4a0(%rbp)
  4112fe:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  411302:	48 83 c0 30          	add    $0x30,%rax
  411306:	48 39 c7             	cmp    %rax,%rdi
  411309:	74 19                	je     411324 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x544>
  41130b:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  411312:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  411319:	ff ff ff 
  41131c:	49 89 c7             	mov    %rax,%r15
  41131f:	48 01 c3             	add    %rax,%rbx
  411322:	ff d3                	callq  *%rbx
  411324:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  41132b:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  411332:	ff ff ff 
  411335:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
  41133c:	48 85 ff             	test   %rdi,%rdi
  41133f:	74 14                	je     411355 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x575>
  411341:	4c 8b 37             	mov    (%rdi),%r14
  411344:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  41134b:	ff d3                	callq  *%rbx
  41134d:	4d 85 f6             	test   %r14,%r14
  411350:	4c 89 f7             	mov    %r14,%rdi
  411353:	75 ec                	jne    411341 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x561>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  411355:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
  41135c:	31 f6                	xor    %esi,%esi
  41135e:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
  411365:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  41136c:	00 
  41136d:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  411374:	49 01 c4             	add    %rax,%r12
  411377:	49 89 c7             	mov    %rax,%r15
  41137a:	41 ff d4             	callq  *%r12
	if (_M_uses_single_bucket(__bkts))
  41137d:	48 8b 85 38 fa ff ff 	mov    -0x5c8(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  411384:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
      _M_element_count = 0;
  41138b:	48 c7 85 28 fb ff ff 	movq   $0x0,-0x4d8(%rbp)
  411392:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  411396:	48 c7 85 20 fb ff ff 	movq   $0x0,-0x4e0(%rbp)
  41139d:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  4113a1:	48 83 c0 30          	add    $0x30,%rax
  4113a5:	48 39 c7             	cmp    %rax,%rdi
  4113a8:	74 19                	je     4113c3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x5e3>
  4113aa:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4113b1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4113b8:	ff ff ff 
  4113bb:	49 89 df             	mov    %rbx,%r15
  4113be:	48 01 d8             	add    %rbx,%rax
  4113c1:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4113c3:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
	if (__p)
  4113ca:	48 85 ff             	test   %rdi,%rdi
  4113cd:	74 19                	je     4113e8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x608>
  4113cf:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4113d6:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4113dd:	ff ff ff 
  4113e0:	49 89 df             	mov    %rbx,%r15
  4113e3:	48 01 d8             	add    %rbx,%rax
  4113e6:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4113e8:	48 8b bd 70 fa ff ff 	mov    -0x590(%rbp),%rdi
	if (__p)
  4113ef:	48 85 ff             	test   %rdi,%rdi
  4113f2:	74 19                	je     41140d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x62d>
  4113f4:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4113fb:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  411402:	ff ff ff 
  411405:	49 89 df             	mov    %rbx,%r15
  411408:	48 01 d8             	add    %rbx,%rax
  41140b:	ff d0                	callq  *%rax
  }
  41140d:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  411411:	44 89 e8             	mov    %r13d,%eax
  411414:	5b                   	pop    %rbx
  411415:	41 5c                	pop    %r12
  411417:	41 5d                	pop    %r13
  411419:	41 5e                	pop    %r14
  41141b:	41 5f                	pop    %r15
  41141d:	5d                   	pop    %rbp
  41141e:	c3                   	retq   
        bestFScore = openSet[openset_top(openSet)].fScore;
  41141f:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  411426:	49 be c0 3f de ff ff 	movabs $0xffffffffffde3fc0,%r14
  41142d:	ff ff ff 
  411430:	48 8b bd d0 f9 ff ff 	mov    -0x630(%rbp),%rdi
    { return __lhs.base() - __rhs.base(); }
  411437:	49 bf b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%r15
  41143e:	db b6 6d 
  411441:	4c 01 f0             	add    %r14,%rax
  411444:	ff d0                	callq  *%rax
  411446:	48 98                	cltq   
  411448:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  41144f:	00 
  411450:	48 29 c2             	sub    %rax,%rdx
  411453:	8b 44 93 0c          	mov    0xc(%rbx,%rdx,4),%eax
        if (bestFScore > oldBestFScore) {
  411457:	41 39 c5             	cmp    %eax,%r13d
        bestFScore = openSet[openset_top(openSet)].fScore;
  41145a:	89 85 1c fa ff ff    	mov    %eax,-0x5e4(%rbp)
  411460:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
        if (bestFScore > oldBestFScore) {
  411467:	0f 8c 88 09 00 00    	jl     411df5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1015>
  41146d:	4c 8b 85 90 fa ff ff 	mov    -0x570(%rbp),%r8
			if (focalSet.empty()) 
  411474:	49 39 c0             	cmp    %rax,%r8
  411477:	0f 84 ee 10 00 00    	je     41256b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x178b>
	AstarNode current = openSet[coi];
  41147d:	49 63 08             	movslq (%r8),%rcx
  411480:	4c 8b 8d 70 fa ff ff 	mov    -0x590(%rbp),%r9
      { return *(this->_M_impl._M_start + __n); }
  411487:	48 8d 14 cd 00 00 00 	lea    0x0(,%rcx,8),%rdx
  41148e:	00 
  41148f:	48 29 ca             	sub    %rcx,%rdx
  411492:	49 8d 14 91          	lea    (%r9,%rdx,4),%rdx
  411496:	44 8b 5a 0c          	mov    0xc(%rdx),%r11d
  41149a:	8b 5a 10             	mov    0x10(%rdx),%ebx
  41149d:	8b 72 14             	mov    0x14(%rdx),%esi
  4114a0:	49 8d 50 04          	lea    0x4(%r8),%rdx
  4114a4:	89 df                	mov    %ebx,%edi
  4114a6:	44 89 d9             	mov    %r11d,%ecx
  4114a9:	45 31 e4             	xor    %r12d,%r12d
  4114ac:	48 29 d0             	sub    %rdx,%rax
  4114af:	89 f2                	mov    %esi,%edx
  4114b1:	48 c1 e8 02          	shr    $0x2,%rax
  4114b5:	4c 8d 14 85 04 00 00 	lea    0x4(,%rax,4),%r10
  4114bc:	00 
  4114bd:	31 c0                	xor    %eax,%eax
  4114bf:	eb 3f                	jmp    411500 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x720>
  4114c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
			if (current.focalHeuristic > n.focalHeuristic) {
  4114c8:	7e 11                	jle    4114db <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6fb>
				current_idx = std::distance(focalSet.begin(), iter); 
  4114ca:	48 89 c3             	mov    %rax,%rbx
  4114cd:	89 d6                	mov    %edx,%esi
  4114cf:	41 89 cb             	mov    %ecx,%r11d
  4114d2:	48 c1 eb 02          	shr    $0x2,%rbx
  4114d6:	49 89 dc             	mov    %rbx,%r12
  4114d9:	89 fb                	mov    %edi,%ebx
  4114db:	48 83 c0 04          	add    $0x4,%rax
	for (; iter != iterEnd; ++iter) {
  4114df:	49 39 c2             	cmp    %rax,%r10
  4114e2:	74 43                	je     411527 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x747>
  4114e4:	49 63 0c 00          	movslq (%r8,%rax,1),%rcx
  4114e8:	48 8d 14 cd 00 00 00 	lea    0x0(,%rcx,8),%rdx
  4114ef:	00 
  4114f0:	48 29 ca             	sub    %rcx,%rdx
  4114f3:	49 8d 14 91          	lea    (%r9,%rdx,4),%rdx
  4114f7:	8b 4a 0c             	mov    0xc(%rdx),%ecx
  4114fa:	8b 7a 10             	mov    0x10(%rdx),%edi
  4114fd:	8b 52 14             	mov    0x14(%rdx),%edx
		if (current.focalHeuristic != n.focalHeuristic) {
  411500:	39 d6                	cmp    %edx,%esi
  411502:	75 c4                	jne    4114c8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6e8>
		else if (current.fScore != n.fScore) {
  411504:	41 39 cb             	cmp    %ecx,%r11d
  411507:	0f 84 1b 0a 00 00    	je     411f28 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1148>
			if (current.fScore > n.fScore) {
  41150d:	7e cc                	jle    4114db <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6fb>
				current_idx = std::distance(focalSet.begin(), iter); 
  41150f:	48 89 c3             	mov    %rax,%rbx
  411512:	48 83 c0 04          	add    $0x4,%rax
  411516:	41 89 cb             	mov    %ecx,%r11d
  411519:	48 c1 eb 02          	shr    $0x2,%rbx
	for (; iter != iterEnd; ++iter) {
  41151d:	49 39 c2             	cmp    %rax,%r10
				current_idx = std::distance(focalSet.begin(), iter); 
  411520:	49 89 dc             	mov    %rbx,%r12
  411523:	89 fb                	mov    %edi,%ebx
	for (; iter != iterEnd; ++iter) {
  411525:	75 bd                	jne    4114e4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x704>
  411527:	49 63 dc             	movslq %r12d,%rbx
  41152a:	48 c1 e3 02          	shl    $0x2,%rbx
			AstarNode current = openSet[focalSet[focalset_top_index]];
  41152e:	49 63 14 18          	movslq (%r8,%rbx,1),%rdx
  411532:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  411539:	00 
  41153a:	48 29 d0             	sub    %rdx,%rax
  41153d:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
  411541:	48 8b 10             	mov    (%rax),%rdx
  411544:	48 89 95 f0 fa ff ff 	mov    %rdx,-0x510(%rbp)
  41154b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  41154f:	48 89 95 f8 fa ff ff 	mov    %rdx,-0x508(%rbp)
  411556:	48 8b 50 10          	mov    0x10(%rax),%rdx
  41155a:	48 89 95 00 fb ff ff 	mov    %rdx,-0x500(%rbp)
  411561:	8b 40 18             	mov    0x18(%rax),%eax
			if (current.stat == 1) {
  411564:	83 f8 01             	cmp    $0x1,%eax
			AstarNode current = openSet[focalSet[focalset_top_index]];
  411567:	89 85 08 fb ff ff    	mov    %eax,-0x4f8(%rbp)
			if (current.stat == 1) {
  41156d:	0f 84 e3 0e 00 00    	je     412456 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1676>
      { return *(this->_M_impl._M_start + __n); }
  411573:	48 8b bd e0 f9 ff ff 	mov    -0x620(%rbp),%rdi
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  41157a:	44 8b bd f4 fa ff ff 	mov    -0x50c(%rbp),%r15d
  411581:	48 8b 07             	mov    (%rdi),%rax
  411584:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  411588:	48 8b 00             	mov    (%rax),%rax
  41158b:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  41158f:	44 3b 38             	cmp    (%rax),%r15d
  411592:	0f 84 77 0a 00 00    	je     41200f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x122f>
      { return *(this->_M_impl._M_start + __n); }
  411598:	48 03 9d 90 fa ff ff 	add    -0x570(%rbp),%rbx
			openSet[focalSet[focalset_top_index]].stat = 1;
  41159f:	48 63 13             	movslq (%rbx),%rdx
      { return __normal_iterator(_M_current + __n); }
  4115a2:	48 8d 73 04          	lea    0x4(%rbx),%rsi
  4115a6:	48 89 df             	mov    %rbx,%rdi
  4115a9:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  4115b0:	00 
  4115b1:	48 29 d0             	sub    %rdx,%rax
  4115b4:	48 8b 95 70 fa ff ff 	mov    -0x590(%rbp),%rdx
  4115bb:	48 8d 04 82          	lea    (%rdx,%rax,4),%rax
  4115bf:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%rax)
      : _M_current(__i) { }
  4115c6:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
  4115cd:	48 39 f0             	cmp    %rsi,%rax
  4115d0:	74 16                	je     4115e8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x808>
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
  4115d2:	48 89 c2             	mov    %rax,%rdx
  4115d5:	48 29 f2             	sub    %rsi,%rdx
  4115d8:	48 89 d1             	mov    %rdx,%rcx
  4115db:	48 c1 f9 02          	sar    $0x2,%rcx
	  if (_Num)
  4115df:	48 85 c9             	test   %rcx,%rcx
  4115e2:	0f 85 fb 09 00 00    	jne    411fe3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1203>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
  4115e8:	48 83 e8 04          	sub    $0x4,%rax
  4115ec:	ba b9 79 37 9e       	mov    $0x9e3779b9,%edx
  4115f1:	4c 8b ad 18 fb ff ff 	mov    -0x4e8(%rbp),%r13
  4115f8:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
  4115ff:	48 63 85 f0 fa ff ff 	movslq -0x510(%rbp),%rax
      __node_base* __prev_n = _M_find_before_node(__bkt, __k, __code);
  411606:	4c 8d b5 f0 fa ff ff 	lea    -0x510(%rbp),%r14
  41160d:	4c 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%r8
  411614:	48 8b bd 38 fa ff ff 	mov    -0x5c8(%rbp),%rdi
  41161b:	49 89 c4             	mov    %rax,%r12
  41161e:	48 01 d0             	add    %rdx,%rax
  411621:	48 89 c3             	mov    %rax,%rbx
  411624:	48 89 c1             	mov    %rax,%rcx
  411627:	48 c1 e9 02          	shr    $0x2,%rcx
  41162b:	48 c1 e3 06          	shl    $0x6,%rbx
  41162f:	48 01 cb             	add    %rcx,%rbx
  411632:	49 63 cf             	movslq %r15d,%rcx
  411635:	48 01 d3             	add    %rdx,%rbx
  411638:	48 01 cb             	add    %rcx,%rbx
  41163b:	48 63 8d f8 fa ff ff 	movslq -0x508(%rbp),%rcx
  411642:	48 31 c3             	xor    %rax,%rbx
  411645:	48 89 d8             	mov    %rbx,%rax
  411648:	48 c1 e0 06          	shl    $0x6,%rax
  41164c:	48 01 ca             	add    %rcx,%rdx
  41164f:	89 8d 2c fa ff ff    	mov    %ecx,-0x5d4(%rbp)
  411655:	48 01 d0             	add    %rdx,%rax
  411658:	48 89 da             	mov    %rbx,%rdx
  41165b:	48 c1 ea 02          	shr    $0x2,%rdx
  41165f:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  411662:	31 d2                	xor    %edx,%edx
  411664:	48 31 c3             	xor    %rax,%rbx
  411667:	48 89 d8             	mov    %rbx,%rax
  41166a:	48 89 d9             	mov    %rbx,%rcx
  41166d:	49 f7 f5             	div    %r13
  411670:	48 b8 80 0c df ff ff 	movabs $0xffffffffffdf0c80,%rax
  411677:	ff ff ff 
  41167a:	48 89 85 30 fa ff ff 	mov    %rax,-0x5d0(%rbp)
  411681:	4c 01 c0             	add    %r8,%rax
  411684:	49 89 d1             	mov    %rdx,%r9
  411687:	4c 89 f2             	mov    %r14,%rdx
  41168a:	4c 89 ce             	mov    %r9,%rsi
  41168d:	4c 89 8d 40 fa ff ff 	mov    %r9,-0x5c0(%rbp)
  411694:	ff d0                	callq  *%rax
      if (!__prev_n)
  411696:	48 85 c0             	test   %rax,%rax
      __node_base* __prev_n = _M_find_before_node(__bkt, __k, __code);
  411699:	48 89 c6             	mov    %rax,%rsi
      if (!__prev_n)
  41169c:	44 8b 85 2c fa ff ff 	mov    -0x5d4(%rbp),%r8d
  4116a3:	0f 84 b9 00 00 00    	je     411762 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x982>
      if (__prev_n == _M_buckets[__bkt])
  4116a9:	4c 8b 85 10 fb ff ff 	mov    -0x4f0(%rbp),%r8
  4116b0:	4c 8b 8d 40 fa ff ff 	mov    -0x5c0(%rbp),%r9
      __node_type* __n = static_cast<__node_type*>(__prev_n->_M_nxt);
  4116b7:	48 8b 38             	mov    (%rax),%rdi
      if (__prev_n == _M_buckets[__bkt])
  4116ba:	4f 8d 14 c8          	lea    (%r8,%r9,8),%r10
	   __n->_M_nxt ? _M_bucket_index(__n->_M_next()) : 0);
  4116be:	48 8b 0f             	mov    (%rdi),%rcx
      if (__prev_n == _M_buckets[__bkt])
  4116c1:	49 3b 02             	cmp    (%r10),%rax
  4116c4:	0f 84 da 0d 00 00    	je     4124a4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x16c4>
      else if (__n->_M_nxt)
  4116ca:	48 85 c9             	test   %rcx,%rcx
  4116cd:	74 15                	je     4116e4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x904>
  4116cf:	48 8b 41 18          	mov    0x18(%rcx),%rax
  4116d3:	31 d2                	xor    %edx,%edx
  4116d5:	49 f7 f5             	div    %r13
	  if (__next_bkt != __bkt)
  4116d8:	49 39 d1             	cmp    %rdx,%r9
  4116db:	74 07                	je     4116e4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x904>
	    _M_buckets[__next_bkt] = __prev_n;
  4116dd:	49 89 34 d0          	mov    %rsi,(%r8,%rdx,8)
  4116e1:	48 8b 0f             	mov    (%rdi),%rcx
  4116e4:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  4116eb:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  4116f2:	ff ff ff 
      __prev_n->_M_nxt = __n->_M_nxt;
  4116f5:	48 89 0e             	mov    %rcx,(%rsi)
  4116f8:	49 89 c7             	mov    %rax,%r15
  4116fb:	48 01 c3             	add    %rax,%rbx
  4116fe:	ff d3                	callq  *%rbx
  411700:	48 63 85 f0 fa ff ff 	movslq -0x510(%rbp),%rax
  411707:	48 63 8d f4 fa ff ff 	movslq -0x50c(%rbp),%rcx
  41170e:	ba b9 79 37 9e       	mov    $0x9e3779b9,%edx
      --_M_element_count;
  411713:	48 83 ad 28 fb ff ff 	subq   $0x1,-0x4d8(%rbp)
  41171a:	01 
  41171b:	49 89 c4             	mov    %rax,%r12
  41171e:	48 01 d0             	add    %rdx,%rax
  411721:	49 89 cf             	mov    %rcx,%r15
  411724:	48 89 c3             	mov    %rax,%rbx
  411727:	48 01 d1             	add    %rdx,%rcx
  41172a:	48 c1 e3 06          	shl    $0x6,%rbx
  41172e:	48 01 cb             	add    %rcx,%rbx
  411731:	48 89 c1             	mov    %rax,%rcx
  411734:	48 c1 e9 02          	shr    $0x2,%rcx
  411738:	48 01 cb             	add    %rcx,%rbx
  41173b:	48 63 8d f8 fa ff ff 	movslq -0x508(%rbp),%rcx
  411742:	48 31 c3             	xor    %rax,%rbx
  411745:	48 89 d8             	mov    %rbx,%rax
  411748:	48 c1 e0 06          	shl    $0x6,%rax
  41174c:	48 01 ca             	add    %rcx,%rdx
  41174f:	49 89 c8             	mov    %rcx,%r8
  411752:	48 01 d0             	add    %rdx,%rax
  411755:	48 89 da             	mov    %rbx,%rdx
  411758:	48 c1 ea 02          	shr    $0x2,%rdx
  41175c:	48 01 d0             	add    %rdx,%rax
  41175f:	48 31 c3             	xor    %rax,%rbx
  411762:	48 8b bd 58 fb ff ff 	mov    -0x4a8(%rbp),%rdi
  411769:	31 d2                	xor    %edx,%edx
  41176b:	48 89 d8             	mov    %rbx,%rax
  41176e:	48 f7 f7             	div    %rdi
      __node_base* __prev_p = _M_buckets[__n];
  411771:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
  411778:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  41177c:	49 89 d1             	mov    %rdx,%r9
  41177f:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  411786:	00 
      if (!__prev_p)
  411787:	48 85 c0             	test   %rax,%rax
  41178a:	74 2c                	je     4117b8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9d8>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  41178c:	48 8b 08             	mov    (%rax),%rcx
  41178f:	48 8b 71 18          	mov    0x18(%rcx),%rsi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  411793:	48 39 f3             	cmp    %rsi,%rbx
  411796:	0f 84 69 07 00 00    	je     411f05 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1125>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  41179c:	48 8b 01             	mov    (%rcx),%rax
  41179f:	48 85 c0             	test   %rax,%rax
  4117a2:	74 14                	je     4117b8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9d8>
  4117a4:	48 8b 70 18          	mov    0x18(%rax),%rsi
    { return __num % __den; }
  4117a8:	31 d2                	xor    %edx,%edx
  4117aa:	48 89 c1             	mov    %rax,%rcx
  4117ad:	48 89 f0             	mov    %rsi,%rax
  4117b0:	48 f7 f7             	div    %rdi
  4117b3:	49 39 d1             	cmp    %rdx,%r9
  4117b6:	74 db                	je     411793 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9b3>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4117b8:	4c 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%r8
  4117bf:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  4117c6:	ff ff ff 
  4117c9:	bf 20 00 00 00       	mov    $0x20,%edi
  4117ce:	4d 89 c7             	mov    %r8,%r15
  4117d1:	4c 01 c0             	add    %r8,%rax
  4117d4:	ff d0                	callq  *%rax
  4117d6:	49 89 c4             	mov    %rax,%r12
    _Hash_node_base() noexcept : _M_nxt() { }
  4117d9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4117e0:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  4117e7:	4c 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%r8
  4117ee:	b9 01 00 00 00       	mov    $0x1,%ecx
  4117f3:	48 8b 95 68 fb ff ff 	mov    -0x498(%rbp),%rdx
  4117fa:	48 8b b5 58 fb ff ff 	mov    -0x4a8(%rbp),%rsi
  411801:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  411806:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  41180c:	4d 89 c7             	mov    %r8,%r15
  41180f:	41 89 44 24 10       	mov    %eax,0x10(%r12)
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  411814:	48 8b 85 78 fb ff ff 	mov    -0x488(%rbp),%rax
  41181b:	48 89 85 60 fa ff ff 	mov    %rax,-0x5a0(%rbp)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  411822:	48 8b 85 e8 f9 ff ff 	mov    -0x618(%rbp),%rax
  411829:	48 8d 78 20          	lea    0x20(%rax),%rdi
  41182d:	48 b8 90 e8 dd ff ff 	movabs $0xffffffffffdde890,%rax
  411834:	ff ff ff 
  411837:	4c 01 c0             	add    %r8,%rax
  41183a:	ff d0                	callq  *%rax
	  if (__do_rehash.first)
  41183c:	84 c0                	test   %al,%al
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41183e:	48 89 d6             	mov    %rdx,%rsi
	  if (__do_rehash.first)
  411841:	74 38                	je     41187b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xa9b>
	      _M_rehash(__do_rehash.second, __saved_state);
  411843:	4c 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%r8
  41184a:	48 b8 a0 25 df ff ff 	movabs $0xffffffffffdf25a0,%rax
  411851:	ff ff ff 
  411854:	48 8d 95 60 fa ff ff 	lea    -0x5a0(%rbp),%rdx
  41185b:	48 8b bd e8 f9 ff ff 	mov    -0x618(%rbp),%rdi
  411862:	4c 01 c0             	add    %r8,%rax
  411865:	ff d0                	callq  *%rax
    { return __num % __den; }
  411867:	48 89 d8             	mov    %rbx,%rax
  41186a:	31 d2                	xor    %edx,%edx
  41186c:	48 f7 b5 58 fb ff ff 	divq   -0x4a8(%rbp)
  411873:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  41187a:	00 
      if (_M_buckets[__bkt])
  41187b:	48 8b 8d 50 fb ff ff 	mov    -0x4b0(%rbp),%rcx
      { __n->_M_hash_code = __c; }
  411882:	49 89 5c 24 18       	mov    %rbx,0x18(%r12)
  411887:	49 01 cd             	add    %rcx,%r13
  41188a:	49 8b 45 00          	mov    0x0(%r13),%rax
  41188e:	48 85 c0             	test   %rax,%rax
  411891:	0f 84 70 12 00 00    	je     412b07 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1d27>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  411897:	48 8b 00             	mov    (%rax),%rax
  41189a:	49 89 04 24          	mov    %rax,(%r12)
	  _M_buckets[__bkt]->_M_nxt = __node;
  41189e:	49 8b 45 00          	mov    0x0(%r13),%rax
  4118a2:	4c 89 20             	mov    %r12,(%rax)
	  ++_M_element_count;
  4118a5:	48 83 85 68 fb ff ff 	addq   $0x1,-0x498(%rbp)
  4118ac:	01 
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
  4118ad:	48 8b 85 b0 fa ff ff 	mov    -0x550(%rbp),%rax
		m_env.getNeighbors(s, neighbors, m_constraints);
  4118b4:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4118bb:	4c 89 f6             	mov    %r14,%rsi
  4118be:	48 8b 95 b0 f9 ff ff 	mov    -0x650(%rbp),%rdx
  4118c5:	48 89 85 b8 fa ff ff 	mov    %rax,-0x548(%rbp)
  4118cc:	48 8b 85 e0 f9 ff ff 	mov    -0x620(%rbp),%rax
  4118d3:	48 8b 48 10          	mov    0x10(%rax),%rcx
  4118d7:	48 8b 38             	mov    (%rax),%rdi
  4118da:	48 b8 b0 e1 de ff ff 	movabs $0xffffffffffdee1b0,%rax
  4118e1:	ff ff ff 
  4118e4:	48 01 d8             	add    %rbx,%rax
  4118e7:	ff d0                	callq  *%rax
  4118e9:	48 8b 9d b0 fa ff ff 	mov    -0x550(%rbp),%rbx
  4118f0:	4c 8b a5 b8 fa ff ff 	mov    -0x548(%rbp),%r12
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  4118f7:	49 39 dc             	cmp    %rbx,%r12
  4118fa:	0f 84 99 04 00 00    	je     411d99 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfb9>
	      _M_rehash(__do_rehash.second, __saved_state);
  411900:	48 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%rdi
  411907:	48 b8 60 27 df ff ff 	movabs $0xffffffffffdf2760,%rax
  41190e:	ff ff ff 
  411911:	48 01 f8             	add    %rdi,%rax
  411914:	48 89 85 a8 f9 ff ff 	mov    %rax,-0x658(%rbp)
      { ::operator delete(__p); }
  41191b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  411922:	ff ff ff 
  411925:	48 01 f8             	add    %rdi,%rax
  411928:	48 89 85 d8 f9 ff ff 	mov    %rax,-0x628(%rbp)
  41192f:	e9 b2 03 00 00       	jmpq   411ce6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf06>
  411934:	0f 1f 40 00          	nopl   0x0(%rax)
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  411938:	48 8b 36             	mov    (%rsi),%rsi
  41193b:	48 85 f6             	test   %rsi,%rsi
  41193e:	74 15                	je     411955 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb75>
  411940:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
    { return __num % __den; }
  411944:	31 d2                	xor    %edx,%edx
  411946:	48 89 f8             	mov    %rdi,%rax
  411949:	49 f7 f1             	div    %r9
  41194c:	49 39 d2             	cmp    %rdx,%r10
  41194f:	0f 84 10 04 00 00    	je     411d65 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf85>
          Cost tentative_gScore = current.gScore + neighbor.cost;
  411955:	8b 43 10             	mov    0x10(%rbx),%eax
  411958:	03 85 00 fb ff ff    	add    -0x500(%rbp),%eax
  41195e:	31 d2                	xor    %edx,%edx
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  411960:	4c 8b 85 30 fa ff ff 	mov    -0x5d0(%rbp),%r8
  411967:	4c 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%r11
  41196e:	48 8b bd 38 fa ff ff 	mov    -0x5c8(%rbp),%rdi
  411975:	89 85 40 fa ff ff    	mov    %eax,-0x5c0(%rbp)
  41197b:	48 89 c8             	mov    %rcx,%rax
  41197e:	48 f7 b5 18 fb ff ff 	divq   -0x4e8(%rbp)
  411985:	4b 8d 04 18          	lea    (%r8,%r11,1),%rax
  411989:	48 89 d6             	mov    %rdx,%rsi
  41198c:	48 89 da             	mov    %rbx,%rdx
  41198f:	ff d0                	callq  *%rax
	if (__before_n)
  411991:	48 85 c0             	test   %rax,%rax
  411994:	0f 84 a7 05 00 00    	je     411f41 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1161>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  41199a:	48 8b 00             	mov    (%rax),%rax
      return __p ? iterator(__p) : end();
  41199d:	48 85 c0             	test   %rax,%rax
  4119a0:	0f 84 9b 05 00 00    	je     411f41 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1161>
						int index = iter->second;
  4119a6:	48 63 48 14          	movslq 0x14(%rax),%rcx
      { return *(this->_M_impl._M_start + __n); }
  4119aa:	48 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%rax
  4119b1:	00 
  4119b2:	89 8d d0 fb ff ff    	mov    %ecx,-0x430(%rbp)
  4119b8:	48 89 ca             	mov    %rcx,%rdx
  4119bb:	48 29 c8             	sub    %rcx,%rax
  4119be:	48 8b 8d 70 fa ff ff 	mov    -0x590(%rbp),%rcx
  4119c5:	48 8d 04 81          	lea    (%rcx,%rax,4),%rax
            if (tentative_gScore >= n.gScore) {
  4119c9:	8b 48 10             	mov    0x10(%rax),%ecx
  4119cc:	39 8d 40 fa ff ff    	cmp    %ecx,-0x5c0(%rbp)
  4119d2:	0f 8d 01 03 00 00    	jge    411cd9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xef9>
            if (n.fScore <= bestFScore * m_w &&
  4119d8:	66 0f ef c9          	pxor   %xmm1,%xmm1
            n.gScore = tentative_gScore;
  4119dc:	8b bd 40 fa ff ff    	mov    -0x5c0(%rbp),%edi
            Cost last_fScore = n.fScore;
  4119e2:	8b 70 0c             	mov    0xc(%rax),%esi
            if (n.fScore <= bestFScore * m_w &&
  4119e5:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4119e9:	f3 0f 2a 8d 1c fa ff 	cvtsi2ssl -0x5e4(%rbp),%xmm1
  4119f0:	ff 
            Cost delta = last_gScore - tentative_gScore;
  4119f1:	29 f9                	sub    %edi,%ecx
            n.gScore = tentative_gScore;
  4119f3:	89 78 10             	mov    %edi,0x10(%rax)
            n.fScore -= delta;
  4119f6:	89 f7                	mov    %esi,%edi
  4119f8:	29 cf                	sub    %ecx,%edi
            if (n.fScore <= bestFScore * m_w &&
  4119fa:	f3 0f 2a c7          	cvtsi2ss %edi,%xmm0
            n.fScore -= delta;
  4119fe:	89 78 0c             	mov    %edi,0xc(%rax)
            if (n.fScore <= bestFScore * m_w &&
  411a01:	f3 0f 59 8d 28 fa ff 	mulss  -0x5d8(%rbp),%xmm1
  411a08:	ff 
  411a09:	0f 2e c8             	ucomiss %xmm0,%xmm1
  411a0c:	72 11                	jb     411a1f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc3f>
                last_fScore > bestFScore * m_w) {
  411a0e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  411a12:	f3 0f 2a c6          	cvtsi2ss %esi,%xmm0
            if (n.fScore <= bestFScore * m_w &&
  411a16:	0f 2e c1             	ucomiss %xmm1,%xmm0
  411a19:	0f 87 c4 07 00 00    	ja     4121e3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1403>
  411a1f:	48 63 03             	movslq (%rbx),%rax
  411a22:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx
  411a27:	48 8b b5 98 fb ff ff 	mov    -0x468(%rbp),%rsi
      __node_base* __prev_p = _M_buckets[__n];
  411a2e:	4c 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%r15
  411a35:	48 8d 14 08          	lea    (%rax,%rcx,1),%rdx
  411a39:	89 85 2c fa ff ff    	mov    %eax,-0x5d4(%rbp)
  411a3f:	8b 43 04             	mov    0x4(%rbx),%eax
  411a42:	4c 63 c0             	movslq %eax,%r8
  411a45:	48 89 d0             	mov    %rdx,%rax
  411a48:	48 c1 e0 06          	shl    $0x6,%rax
  411a4c:	44 89 85 18 fa ff ff 	mov    %r8d,-0x5e8(%rbp)
  411a53:	49 01 c8             	add    %rcx,%r8
  411a56:	4c 01 c0             	add    %r8,%rax
  411a59:	49 89 d0             	mov    %rdx,%r8
  411a5c:	49 c1 e8 02          	shr    $0x2,%r8
  411a60:	49 01 c0             	add    %rax,%r8
  411a63:	4c 89 c0             	mov    %r8,%rax
  411a66:	48 31 d0             	xor    %rdx,%rax
  411a69:	48 63 53 08          	movslq 0x8(%rbx),%rdx
  411a6d:	49 89 c0             	mov    %rax,%r8
  411a70:	49 c1 e0 06          	shl    $0x6,%r8
  411a74:	89 95 14 fa ff ff    	mov    %edx,-0x5ec(%rbp)
  411a7a:	48 01 ca             	add    %rcx,%rdx
  411a7d:	49 01 d0             	add    %rdx,%r8
  411a80:	48 89 c2             	mov    %rax,%rdx
  411a83:	48 c1 ea 02          	shr    $0x2,%rdx
  411a87:	49 01 d0             	add    %rdx,%r8
  411a8a:	31 d2                	xor    %edx,%edx
  411a8c:	49 31 c0             	xor    %rax,%r8
  411a8f:	4c 89 c0             	mov    %r8,%rax
  411a92:	48 f7 f6             	div    %rsi
  411a95:	4d 8d 34 d7          	lea    (%r15,%rdx,8),%r14
  411a99:	49 89 d2             	mov    %rdx,%r10
  411a9c:	4d 8b 1e             	mov    (%r14),%r11
      if (!__prev_p)
  411a9f:	4d 85 db             	test   %r11,%r11
  411aa2:	74 32                	je     411ad6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcf6>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  411aa4:	49 8b 3b             	mov    (%r11),%rdi
  411aa7:	4d 89 d9             	mov    %r11,%r9
  411aaa:	48 8b 4f 30          	mov    0x30(%rdi),%rcx
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  411aae:	49 39 c8             	cmp    %rcx,%r8
  411ab1:	0f 84 81 03 00 00    	je     411e38 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1058>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  411ab7:	48 8b 07             	mov    (%rdi),%rax
  411aba:	48 85 c0             	test   %rax,%rax
  411abd:	74 17                	je     411ad6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcf6>
  411abf:	48 8b 48 30          	mov    0x30(%rax),%rcx
    { return __num % __den; }
  411ac3:	31 d2                	xor    %edx,%edx
  411ac5:	49 89 f9             	mov    %rdi,%r9
  411ac8:	48 89 c7             	mov    %rax,%rdi
  411acb:	48 89 c8             	mov    %rcx,%rax
  411ace:	48 f7 f6             	div    %rsi
  411ad1:	49 39 d2             	cmp    %rdx,%r10
  411ad4:	74 d8                	je     411aae <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcce>
  411ad6:	8b 43 0c             	mov    0xc(%rbx),%eax
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  411ad9:	8b bd f0 fa ff ff    	mov    -0x510(%rbp),%edi
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  411adf:	48 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%rdx
  411ae6:	8b 8d f4 fa ff ff    	mov    -0x50c(%rbp),%ecx
  411aec:	8b b5 f8 fa ff ff    	mov    -0x508(%rbp),%esi
  411af2:	41 89 c5             	mov    %eax,%r13d
      : _M_head_impl(__h) { }
  411af5:	8b 43 10             	mov    0x10(%rbx),%eax
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  411af8:	89 bd f4 f9 ff ff    	mov    %edi,-0x60c(%rbp)
  411afe:	89 8d 10 fa ff ff    	mov    %ecx,-0x5f0(%rbp)
  411b04:	bf 38 00 00 00       	mov    $0x38,%edi
  411b09:	49 89 d7             	mov    %rdx,%r15
  411b0c:	89 b5 f8 f9 ff ff    	mov    %esi,-0x608(%rbp)
      : _M_head_impl(__h) { }
  411b12:	89 85 fc f9 ff ff    	mov    %eax,-0x604(%rbp)
  411b18:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  411b1f:	ff ff ff 
  411b22:	48 01 d0             	add    %rdx,%rax
  411b25:	ff d0                	callq  *%rax
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  411b27:	8b 95 fc f9 ff ff    	mov    -0x604(%rbp),%edx
  411b2d:	49 89 c6             	mov    %rax,%r14
    _Hash_node_base() noexcept : _M_nxt() { }
  411b30:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  411b37:	8b 8d 10 fa ff ff    	mov    -0x5f0(%rbp),%ecx
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
  411b3d:	44 8b 8d 2c fa ff ff 	mov    -0x5d4(%rbp),%r9d
  411b44:	8b bd 18 fa ff ff    	mov    -0x5e8(%rbp),%edi
  411b4a:	45 89 6e 1c          	mov    %r13d,0x1c(%r14)
  411b4e:	41 89 56 18          	mov    %edx,0x18(%r14)
  411b52:	8b 95 f4 f9 ff ff    	mov    -0x60c(%rbp),%edx
  411b58:	49 63 c1             	movslq %r9d,%rax
  411b5b:	41 89 4e 24          	mov    %ecx,0x24(%r14)
  411b5f:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx
  411b64:	41 89 46 08          	mov    %eax,0x8(%r14)
  411b68:	4c 63 ef             	movslq %edi,%r13
  411b6b:	8b b5 14 fa ff ff    	mov    -0x5ec(%rbp),%esi
  411b71:	41 89 56 20          	mov    %edx,0x20(%r14)
  411b75:	8b 95 f8 f9 ff ff    	mov    -0x608(%rbp),%edx
  411b7b:	49 01 cd             	add    %rcx,%r13
  411b7e:	44 8b 85 40 fa ff ff 	mov    -0x5c0(%rbp),%r8d
  411b85:	41 89 7e 0c          	mov    %edi,0xc(%r14)
  411b89:	41 89 76 10          	mov    %esi,0x10(%r14)
  411b8d:	41 89 56 28          	mov    %edx,0x28(%r14)
  411b91:	48 8d 14 08          	lea    (%rax,%rcx,1),%rdx
  411b95:	45 89 46 14          	mov    %r8d,0x14(%r14)
  411b99:	48 89 d0             	mov    %rdx,%rax
  411b9c:	48 c1 e0 06          	shl    $0x6,%rax
  411ba0:	4c 01 e8             	add    %r13,%rax
  411ba3:	49 89 d5             	mov    %rdx,%r13
  411ba6:	49 c1 ed 02          	shr    $0x2,%r13
  411baa:	49 01 c5             	add    %rax,%r13
  411bad:	4c 89 e8             	mov    %r13,%rax
  411bb0:	48 31 d0             	xor    %rdx,%rax
  411bb3:	48 63 d6             	movslq %esi,%rdx
  411bb6:	48 8b b5 98 fb ff ff 	mov    -0x468(%rbp),%rsi
  411bbd:	49 89 c5             	mov    %rax,%r13
  411bc0:	48 01 ca             	add    %rcx,%rdx
  411bc3:	49 c1 e5 06          	shl    $0x6,%r13
  411bc7:	49 01 d5             	add    %rdx,%r13
  411bca:	48 89 c2             	mov    %rax,%rdx
  411bcd:	48 c1 ea 02          	shr    $0x2,%rdx
  411bd1:	49 01 d5             	add    %rdx,%r13
    { return __num % __den; }
  411bd4:	31 d2                	xor    %edx,%edx
  411bd6:	49 31 c5             	xor    %rax,%r13
  411bd9:	4c 89 e8             	mov    %r13,%rax
  411bdc:	48 f7 f6             	div    %rsi
      __node_base* __prev_p = _M_buckets[__n];
  411bdf:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  411be6:	00 
  411be7:	49 89 d0             	mov    %rdx,%r8
  411bea:	48 89 85 40 fa ff ff 	mov    %rax,-0x5c0(%rbp)
  411bf1:	48 8b 85 90 fb ff ff 	mov    -0x470(%rbp),%rax
  411bf8:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
      if (!__prev_p)
  411bfc:	48 85 c0             	test   %rax,%rax
  411bff:	74 2c                	je     411c2d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe4d>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  411c01:	48 8b 08             	mov    (%rax),%rcx
  411c04:	48 8b 79 30          	mov    0x30(%rcx),%rdi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  411c08:	49 39 fd             	cmp    %rdi,%r13
  411c0b:	0f 84 b4 02 00 00    	je     411ec5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10e5>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  411c11:	48 8b 01             	mov    (%rcx),%rax
  411c14:	48 85 c0             	test   %rax,%rax
  411c17:	74 14                	je     411c2d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe4d>
  411c19:	48 8b 78 30          	mov    0x30(%rax),%rdi
    { return __num % __den; }
  411c1d:	31 d2                	xor    %edx,%edx
  411c1f:	48 89 c1             	mov    %rax,%rcx
  411c22:	48 89 f8             	mov    %rdi,%rax
  411c25:	48 f7 f6             	div    %rsi
  411c28:	49 39 d0             	cmp    %rdx,%r8
  411c2b:	74 db                	je     411c08 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe28>
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  411c2d:	48 8b 85 b8 fb ff ff 	mov    -0x448(%rbp),%rax
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  411c34:	4c 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%r8
  411c3b:	b9 01 00 00 00       	mov    $0x1,%ecx
  411c40:	48 8b 95 a8 fb ff ff 	mov    -0x458(%rbp),%rdx
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  411c47:	48 89 85 68 fa ff ff 	mov    %rax,-0x598(%rbp)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  411c4e:	48 8b 85 00 fa ff ff 	mov    -0x600(%rbp),%rax
  411c55:	4d 89 c7             	mov    %r8,%r15
  411c58:	48 8d 78 20          	lea    0x20(%rax),%rdi
  411c5c:	48 b8 90 e8 dd ff ff 	movabs $0xffffffffffdde890,%rax
  411c63:	ff ff ff 
  411c66:	4c 01 c0             	add    %r8,%rax
  411c69:	ff d0                	callq  *%rax
	  if (__do_rehash.first)
  411c6b:	84 c0                	test   %al,%al
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  411c6d:	48 89 d6             	mov    %rdx,%rsi
	  if (__do_rehash.first)
  411c70:	74 32                	je     411ca4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xec4>
	      _M_rehash(__do_rehash.second, __saved_state);
  411c72:	48 8d 95 68 fa ff ff 	lea    -0x598(%rbp),%rdx
  411c79:	48 8b bd 00 fa ff ff 	mov    -0x600(%rbp),%rdi
  411c80:	48 8b 85 a8 f9 ff ff 	mov    -0x658(%rbp),%rax
  411c87:	ff d0                	callq  *%rax
  411c89:	4c 89 e8             	mov    %r13,%rax
  411c8c:	31 d2                	xor    %edx,%edx
  411c8e:	48 f7 b5 98 fb ff ff 	divq   -0x468(%rbp)
  411c95:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  411c9c:	00 
  411c9d:	48 89 85 40 fa ff ff 	mov    %rax,-0x5c0(%rbp)
      if (_M_buckets[__bkt])
  411ca4:	48 8b b5 90 fb ff ff 	mov    -0x470(%rbp),%rsi
  411cab:	48 8b 8d 40 fa ff ff 	mov    -0x5c0(%rbp),%rcx
      { __n->_M_hash_code = __c; }
  411cb2:	4d 89 6e 30          	mov    %r13,0x30(%r14)
  411cb6:	48 01 f1             	add    %rsi,%rcx
  411cb9:	48 8b 01             	mov    (%rcx),%rax
  411cbc:	48 85 c0             	test   %rax,%rax
  411cbf:	0f 84 20 08 00 00    	je     4124e5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1705>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  411cc5:	48 8b 00             	mov    (%rax),%rax
  411cc8:	49 89 06             	mov    %rax,(%r14)
	  _M_buckets[__bkt]->_M_nxt = __node;
  411ccb:	48 8b 01             	mov    (%rcx),%rax
  411cce:	4c 89 30             	mov    %r14,(%rax)
	  ++_M_element_count;
  411cd1:	48 83 85 a8 fb ff ff 	addq   $0x1,-0x458(%rbp)
  411cd8:	01 
  411cd9:	48 83 c3 14          	add    $0x14,%rbx
      for (const Neighbor<State, Action, Cost>& neighbor : neighbors) {
  411cdd:	49 39 dc             	cmp    %rbx,%r12
  411ce0:	0f 84 b3 00 00 00    	je     411d99 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfb9>
  411ce6:	4c 63 2b             	movslq (%rbx),%r13
  411ce9:	ba b9 79 37 9e       	mov    $0x9e3779b9,%edx
  411cee:	48 63 43 04          	movslq 0x4(%rbx),%rax
  411cf2:	4c 8b 8d 58 fb ff ff 	mov    -0x4a8(%rbp),%r9
  411cf9:	49 8d 74 15 00       	lea    0x0(%r13,%rdx,1),%rsi
  411cfe:	4d 89 eb             	mov    %r13,%r11
  411d01:	49 89 c6             	mov    %rax,%r14
  411d04:	48 01 d0             	add    %rdx,%rax
  411d07:	48 89 f1             	mov    %rsi,%rcx
  411d0a:	48 c1 e1 06          	shl    $0x6,%rcx
  411d0e:	48 01 c8             	add    %rcx,%rax
  411d11:	48 89 f1             	mov    %rsi,%rcx
  411d14:	48 c1 e9 02          	shr    $0x2,%rcx
  411d18:	48 01 c1             	add    %rax,%rcx
  411d1b:	48 31 f1             	xor    %rsi,%rcx
  411d1e:	48 63 73 08          	movslq 0x8(%rbx),%rsi
  411d22:	48 89 c8             	mov    %rcx,%rax
  411d25:	48 c1 e0 06          	shl    $0x6,%rax
  411d29:	48 01 f2             	add    %rsi,%rdx
  411d2c:	49 89 f7             	mov    %rsi,%r15
  411d2f:	48 01 d0             	add    %rdx,%rax
  411d32:	48 89 ca             	mov    %rcx,%rdx
  411d35:	48 c1 ea 02          	shr    $0x2,%rdx
  411d39:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  411d3c:	31 d2                	xor    %edx,%edx
  411d3e:	48 31 c1             	xor    %rax,%rcx
  411d41:	48 89 c8             	mov    %rcx,%rax
  411d44:	49 f7 f1             	div    %r9
      __node_base* __prev_p = _M_buckets[__n];
  411d47:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
  411d4e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  411d52:	49 89 d2             	mov    %rdx,%r10
      if (!__prev_p)
  411d55:	48 85 c0             	test   %rax,%rax
  411d58:	0f 84 f7 fb ff ff    	je     411955 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb75>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  411d5e:	48 8b 30             	mov    (%rax),%rsi
  411d61:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  411d65:	48 39 f9             	cmp    %rdi,%rcx
  411d68:	0f 85 ca fb ff ff    	jne    411938 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb58>
    return time == s.time && x == s.x && y == s.y;
  411d6e:	44 3b 5e 08          	cmp    0x8(%rsi),%r11d
  411d72:	0f 85 c0 fb ff ff    	jne    411938 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb58>
  411d78:	44 3b 76 0c          	cmp    0xc(%rsi),%r14d
  411d7c:	0f 85 b6 fb ff ff    	jne    411938 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb58>
  411d82:	44 3b 7e 10          	cmp    0x10(%rsi),%r15d
  411d86:	0f 85 ac fb ff ff    	jne    411938 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xb58>
  411d8c:	48 83 c3 14          	add    $0x14,%rbx
  411d90:	49 39 dc             	cmp    %rbx,%r12
  411d93:	0f 85 4d ff ff ff    	jne    411ce6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xf06>
  411d99:	48 8b 9d 70 fa ff ff 	mov    -0x590(%rbp),%rbx
        bestFScore = openSet[openset_top(openSet)].fScore;
  411da0:	44 8b ad 1c fa ff ff 	mov    -0x5e4(%rbp),%r13d
		while (!openset_is_allclosed(openSet)) {
  411da7:	e9 d5 f3 ff ff       	jmpq   411181 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3a1>
    { return __lhs.base() - __rhs.base(); }
  411dac:	48 89 da             	mov    %rbx,%rdx
  411daf:	48 2b 95 70 fa ff ff 	sub    -0x590(%rbp),%rdx
  411db6:	48 c1 fa 02          	sar    $0x2,%rdx
  411dba:	49 0f af d7          	imul   %r15,%rdx
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  411dbe:	48 39 85 a0 fa ff ff 	cmp    %rax,-0x560(%rbp)
							focalSet.push_back(std::distance(openSet.begin(), iter));
  411dc5:	89 95 d0 fb ff ff    	mov    %edx,-0x430(%rbp)
  411dcb:	0f 84 77 07 00 00    	je     412548 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1768>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  411dd1:	48 85 c0             	test   %rax,%rax
  411dd4:	74 02                	je     411dd8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xff8>
  411dd6:	89 10                	mov    %edx,(%rax)
	    ++this->_M_impl._M_finish;
  411dd8:	48 83 c0 04          	add    $0x4,%rax
  411ddc:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
  411de3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	++_M_current;
  411de8:	48 83 c3 1c          	add    $0x1c,%rbx
          for (; iter != iterEnd; ++iter) {
  411dec:	49 39 dc             	cmp    %rbx,%r12
  411def:	0f 84 78 f6 ff ff    	je     41146d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x68d>
						if (iter->stat == 1)
  411df5:	83 7b 18 01          	cmpl   $0x1,0x18(%rbx)
  411df9:	74 ed                	je     411de8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1008>
            if (val > oldBestFScore * m_w && val <= bestFScore * m_w) {
  411dfb:	66 0f ef c0          	pxor   %xmm0,%xmm0
  411dff:	f3 0f 10 95 28 fa ff 	movss  -0x5d8(%rbp),%xmm2
  411e06:	ff 
  411e07:	66 0f ef c9          	pxor   %xmm1,%xmm1
  411e0b:	f3 41 0f 2a c5       	cvtsi2ss %r13d,%xmm0
  411e10:	f3 0f 2a 4b 0c       	cvtsi2ssl 0xc(%rbx),%xmm1
  411e15:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
  411e19:	0f 2e c8             	ucomiss %xmm0,%xmm1
  411e1c:	76 ca                	jbe    411de8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1008>
  411e1e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  411e22:	f3 0f 2a 85 1c fa ff 	cvtsi2ssl -0x5e4(%rbp),%xmm0
  411e29:	ff 
  411e2a:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
  411e2e:	0f 2e c1             	ucomiss %xmm1,%xmm0
  411e31:	72 b5                	jb     411de8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1008>
  411e33:	e9 74 ff ff ff       	jmpq   411dac <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xfcc>
  411e38:	8b 85 2c fa ff ff    	mov    -0x5d4(%rbp),%eax
  411e3e:	3b 47 08             	cmp    0x8(%rdi),%eax
  411e41:	0f 85 70 fc ff ff    	jne    411ab7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcd7>
  411e47:	8b 85 18 fa ff ff    	mov    -0x5e8(%rbp),%eax
  411e4d:	3b 47 0c             	cmp    0xc(%rdi),%eax
  411e50:	0f 85 61 fc ff ff    	jne    411ab7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcd7>
  411e56:	8b 85 14 fa ff ff    	mov    -0x5ec(%rbp),%eax
  411e5c:	3b 47 10             	cmp    0x10(%rdi),%eax
  411e5f:	0f 85 52 fc ff ff    	jne    411ab7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcd7>
      if (__prev_n == _M_buckets[__bkt])
  411e65:	4d 39 cb             	cmp    %r9,%r11
	   __n->_M_nxt ? _M_bucket_index(__n->_M_next()) : 0);
  411e68:	48 8b 0f             	mov    (%rdi),%rcx
      if (__prev_n == _M_buckets[__bkt])
  411e6b:	0f 84 9d 03 00 00    	je     41220e <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x142e>
      else if (__n->_M_nxt)
  411e71:	48 85 c9             	test   %rcx,%rcx
  411e74:	74 15                	je     411e8b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10ab>
    { return __num % __den; }
  411e76:	48 8b 41 30          	mov    0x30(%rcx),%rax
  411e7a:	31 d2                	xor    %edx,%edx
  411e7c:	48 f7 f6             	div    %rsi
	  if (__next_bkt != __bkt)
  411e7f:	49 39 d2             	cmp    %rdx,%r10
  411e82:	74 07                	je     411e8b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10ab>
	    _M_buckets[__next_bkt] = __prev_n;
  411e84:	4d 89 0c d7          	mov    %r9,(%r15,%rdx,8)
  411e88:	48 8b 0f             	mov    (%rdi),%rcx
      { ::operator delete(__p); }
  411e8b:	48 8b 85 d8 f9 ff ff 	mov    -0x628(%rbp),%rax
      __prev_n->_M_nxt = __n->_M_nxt;
  411e92:	49 89 09             	mov    %rcx,(%r9)
  411e95:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  411e9c:	ff d0                	callq  *%rax
  411e9e:	8b 43 08             	mov    0x8(%rbx),%eax
      --_M_element_count;
  411ea1:	48 83 ad a8 fb ff ff 	subq   $0x1,-0x458(%rbp)
  411ea8:	01 
  411ea9:	89 85 14 fa ff ff    	mov    %eax,-0x5ec(%rbp)
  411eaf:	8b 03                	mov    (%rbx),%eax
  411eb1:	89 85 2c fa ff ff    	mov    %eax,-0x5d4(%rbp)
  411eb7:	8b 43 04             	mov    0x4(%rbx),%eax
  411eba:	89 85 18 fa ff ff    	mov    %eax,-0x5e8(%rbp)
  411ec0:	e9 11 fc ff ff       	jmpq   411ad6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xcf6>
  411ec5:	44 39 49 08          	cmp    %r9d,0x8(%rcx)
  411ec9:	0f 85 42 fd ff ff    	jne    411c11 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe31>
  411ecf:	8b 85 18 fa ff ff    	mov    -0x5e8(%rbp),%eax
  411ed5:	39 41 0c             	cmp    %eax,0xc(%rcx)
  411ed8:	0f 85 33 fd ff ff    	jne    411c11 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe31>
  411ede:	8b 85 14 fa ff ff    	mov    -0x5ec(%rbp),%eax
  411ee4:	39 41 10             	cmp    %eax,0x10(%rcx)
  411ee7:	0f 85 24 fd ff ff    	jne    411c11 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xe31>
  411eed:	4c 89 f7             	mov    %r14,%rdi
  411ef0:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  411ef7:	48 8b 85 d8 f9 ff ff 	mov    -0x628(%rbp),%rax
  411efe:	ff d0                	callq  *%rax
  411f00:	e9 d4 fd ff ff       	jmpq   411cd9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xef9>
  411f05:	44 39 61 08          	cmp    %r12d,0x8(%rcx)
  411f09:	0f 85 8d f8 ff ff    	jne    41179c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9bc>
  411f0f:	44 39 79 0c          	cmp    %r15d,0xc(%rcx)
  411f13:	0f 85 83 f8 ff ff    	jne    41179c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9bc>
	  if (this->_M_equals(__k, __code, __p))
  411f19:	44 39 41 10          	cmp    %r8d,0x10(%rcx)
  411f1d:	0f 85 79 f8 ff ff    	jne    41179c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x9bc>
  411f23:	e9 85 f9 ff ff       	jmpq   4118ad <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xacd>
			if (current.gScore < n.gScore) {
  411f28:	39 fb                	cmp    %edi,%ebx
  411f2a:	0f 8d ab f5 ff ff    	jge    4114db <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6fb>
				current_idx = std::distance(focalSet.begin(), iter); 
  411f30:	48 89 c3             	mov    %rax,%rbx
  411f33:	48 c1 eb 02          	shr    $0x2,%rbx
  411f37:	49 89 dc             	mov    %rbx,%r12
  411f3a:	89 fb                	mov    %edi,%ebx
  411f3c:	e9 9a f5 ff ff       	jmpq   4114db <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6fb>
  411f41:	48 8b bd e0 f9 ff ff 	mov    -0x620(%rbp),%rdi
  411f48:	4d 89 eb             	mov    %r13,%r11
	int numConflicts = 0;
  411f4b:	45 31 d2             	xor    %r10d,%r10d
  411f4e:	49 c1 e3 04          	shl    $0x4,%r11
  411f52:	48 8b 07             	mov    (%rdi),%rax
  411f55:	48 8b 77 08          	mov    0x8(%rdi),%rsi
  411f59:	48 8b 00             	mov    (%rax),%rax
  411f5c:	48 8d 04 f0          	lea    (%rax,%rsi,8),%rax
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  411f60:	8b 10                	mov    (%rax),%edx
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  411f62:	8b 40 04             	mov    0x4(%rax),%eax
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  411f65:	89 95 18 fa ff ff    	mov    %edx,-0x5e8(%rbp)
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  411f6b:	89 85 14 fa ff ff    	mov    %eax,-0x5ec(%rbp)
  411f71:	48 8b 57 20          	mov    0x20(%rdi),%rdx
                current.focalHeuristic +
  411f75:	8b 85 04 fb ff ff    	mov    -0x4fc(%rbp),%eax
  411f7b:	48 89 d1             	mov    %rdx,%rcx
  411f7e:	41 89 c1             	mov    %eax,%r9d
	for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  411f81:	31 c0                	xor    %eax,%eax
  411f83:	eb 15                	jmp    411f9a <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11ba>
  411f85:	48 83 c0 01          	add    $0x1,%rax
  411f89:	48 81 c1 50 06 00 00 	add    $0x650,%rcx
  411f90:	48 83 f8 14          	cmp    $0x14,%rax
  411f94:	0f 84 b9 02 00 00    	je     412253 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1473>
		if (i != m_agentIdx && solution[i].states_size > 0) {
  411f9a:	48 39 c6             	cmp    %rax,%rsi
  411f9d:	74 e6                	je     411f85 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11a5>
  411f9f:	48 8b b9 00 04 00 00 	mov    0x400(%rcx),%rdi
  411fa6:	48 85 ff             	test   %rdi,%rdi
  411fa9:	74 da                	je     411f85 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11a5>
	if (t < solution[agentIdx].states_size) {
  411fab:	49 39 fd             	cmp    %rdi,%r13
  411fae:	72 27                	jb     411fd7 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11f7>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  411fb0:	48 83 ef 01          	sub    $0x1,%rdi
  411fb4:	48 c1 e7 04          	shl    $0x4,%rdi
  411fb8:	48 01 cf             	add    %rcx,%rdi
  411fbb:	44 8b 47 04          	mov    0x4(%rdi),%r8d
  411fbf:	8b 7f 08             	mov    0x8(%rdi),%edi
  bool equalExceptTime(const State& s) const { return x == s.x && y == s.y; }
  411fc2:	45 39 c6             	cmp    %r8d,%r14d
  411fc5:	75 be                	jne    411f85 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11a5>
				++numConflicts;
  411fc7:	41 39 ff             	cmp    %edi,%r15d
  411fca:	40 0f 94 c7          	sete   %dil
  411fce:	40 0f b6 ff          	movzbl %dil,%edi
  411fd2:	41 01 fa             	add    %edi,%r10d
  411fd5:	eb ae                	jmp    411f85 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11a5>
		return solution[agentIdx].states[t].state;
  411fd7:	46 8b 44 19 04       	mov    0x4(%rcx,%r11,1),%r8d
  411fdc:	42 8b 7c 19 08       	mov    0x8(%rcx,%r11,1),%edi
  411fe1:	eb df                	jmp    411fc2 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x11e2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  411fe3:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  411fea:	48 b8 80 e9 dd ff ff 	movabs $0xffffffffffdde980,%rax
  411ff1:	ff ff ff 
  411ff4:	49 89 df             	mov    %rbx,%r15
  411ff7:	48 01 d8             	add    %rbx,%rax
  411ffa:	ff d0                	callq  *%rax
  411ffc:	44 8b bd f4 fa ff ff 	mov    -0x50c(%rbp),%r15d
  412003:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  41200a:	e9 d9 f5 ff ff       	jmpq   4115e8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x808>
    return s.x == m_goals[m_agentIdx].x && s.y == m_goals[m_agentIdx].y &&
  41200f:	8b 40 04             	mov    0x4(%rax),%eax
  412012:	39 85 f8 fa ff ff    	cmp    %eax,-0x508(%rbp)
  412018:	0f 85 7a f5 ff ff    	jne    411598 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x7b8>
  41201e:	48 89 f8             	mov    %rdi,%rax
  412021:	8b bd f0 fa ff ff    	mov    -0x510(%rbp),%edi
  412027:	39 78 18             	cmp    %edi,0x18(%rax)
  41202a:	0f 8d 68 f5 ff ff    	jge    411598 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x7b8>
       *  pointing to the sought after element.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
      { return _M_h.find(__x); }
  412030:	4c 8b a5 48 fa ff ff 	mov    -0x5b8(%rbp),%r12
				solution.states_size = 0;
  412037:	4c 8b bd 08 fa ff ff 	mov    -0x5f8(%rbp),%r15
  41203e:	48 b8 30 e7 de ff ff 	movabs $0xffffffffffdee730,%rax
  412045:	ff ff ff 
  412048:	48 8d b5 f0 fa ff ff 	lea    -0x510(%rbp),%rsi
  41204f:	48 8b bd 00 fa ff ff 	mov    -0x600(%rbp),%rdi
  412056:	4c 89 e3             	mov    %r12,%rbx
  412059:	49 c7 87 00 04 00 00 	movq   $0x0,0x400(%r15)
  412060:	00 00 00 00 
				solution.actions_size = 0;
  412064:	49 c7 87 08 06 00 00 	movq   $0x0,0x608(%r15)
  41206b:	00 00 00 00 
  41206f:	48 01 c3             	add    %rax,%rbx
  412072:	ff d3                	callq  *%rbx
        while (iter != cameFrom.end()) {
  412074:	48 85 c0             	test   %rax,%rax
  412077:	0f 84 c9 08 00 00    	je     412946 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b66>
  41207d:	49 89 c5             	mov    %rax,%r13
  412080:	48 b8 88 7a df ff ff 	movabs $0xffffffffffdf7a88,%rax
  412087:	ff ff ff 
  41208a:	4c 01 e0             	add    %r12,%rax
  41208d:	4d 89 ea             	mov    %r13,%r10
  412090:	49 bc c0 7a df ff ff 	movabs $0xffffffffffdf7ac0,%r12
  412097:	ff ff ff 
  41209a:	49 89 dd             	mov    %rbx,%r13
  41209d:	48 89 85 40 fa ff ff 	mov    %rax,-0x5c0(%rbp)
  4120a4:	4c 89 fb             	mov    %r15,%rbx
  4120a7:	eb 6e                	jmp    412117 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1337>
  4120a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4120b0:	f3 41 0f 6f 42 08    	movdqu 0x8(%r10),%xmm0
  4120b6:	4c 89 c8             	mov    %r9,%rax
  4120b9:	48 c1 e0 04          	shl    $0x4,%rax
			states_size++;
  4120bd:	49 83 c1 01          	add    $0x1,%r9
			states[states_size] = s;
  4120c1:	0f 11 04 03          	movups %xmm0,(%rbx,%rax,1)
			states_size++;
  4120c5:	4c 89 8b 00 04 00 00 	mov    %r9,0x400(%rbx)
		if (actions_size < ACTION_SIZE) {
  4120cc:	4c 8b 8b 08 06 00 00 	mov    0x608(%rbx),%r9
  4120d3:	49 83 f9 3f          	cmp    $0x3f,%r9
  4120d7:	0f 87 ae 00 00 00    	ja     41218b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x13ab>
					solution.add(
  4120dd:	41 8b 52 18          	mov    0x18(%r10),%edx
  4120e1:	41 8b 4a 1c          	mov    0x1c(%r10),%ecx
			actions[actions_size] = a;
  4120e5:	4a 8d 84 cb 08 04 00 	lea    0x408(%rbx,%r9,8),%rax
  4120ec:	00 
			actions_size++;
  4120ed:	49 83 c1 01          	add    $0x1,%r9
			actions[actions_size] = a;
  4120f1:	89 08                	mov    %ecx,(%rax)
  4120f3:	89 50 04             	mov    %edx,0x4(%rax)
			actions_size++;
  4120f6:	4c 89 8b 08 06 00 00 	mov    %r9,0x608(%rbx)
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  4120fd:	49 8d 72 20          	lea    0x20(%r10),%rsi
  412101:	48 8b bd 00 fa ff ff 	mov    -0x600(%rbp),%rdi
  412108:	41 ff d5             	callq  *%r13
        while (iter != cameFrom.end()) {
  41210b:	48 85 c0             	test   %rax,%rax
  41210e:	0f 84 32 08 00 00    	je     412946 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b66>
  412114:	49 89 c2             	mov    %rax,%r10
		if (states_size < STATE_SIZE) {
  412117:	4c 8b 8b 00 04 00 00 	mov    0x400(%rbx),%r9
  41211e:	49 83 f9 3f          	cmp    $0x3f,%r9
  412122:	76 8c                	jbe    4120b0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x12d0>
  412124:	4c 89 95 30 fa ff ff 	mov    %r10,-0x5d0(%rbp)
  41212b:	4c 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%r10
  412132:	49 bb b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r11
  412139:	ff ff ff 
  41213c:	4c 8b 85 40 fa ff ff 	mov    -0x5c0(%rbp),%r8
  412143:	b9 00 04 00 00       	mov    $0x400,%ecx
  412148:	ba 01 00 00 00       	mov    $0x1,%edx
  41214d:	be ff 03 00 00       	mov    $0x3ff,%esi
  412152:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  412159:	31 c0                	xor    %eax,%eax
  41215b:	4d 89 d7             	mov    %r10,%r15
  41215e:	4d 01 d3             	add    %r10,%r11
  412161:	41 ff d3             	callq  *%r11
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  412164:	b9 05 04 00 00       	mov    $0x405,%ecx
  412169:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  412170:	48 87 c9             	xchg   %rcx,%rcx
		if (actions_size < ACTION_SIZE) {
  412173:	4c 8b 8b 08 06 00 00 	mov    0x608(%rbx),%r9
    COMPILER_BARRIER();
  41217a:	4c 8b 95 30 fa ff ff 	mov    -0x5d0(%rbp),%r10
  412181:	49 83 f9 3f          	cmp    $0x3f,%r9
  412185:	0f 86 52 ff ff ff    	jbe    4120dd <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x12fd>
  41218b:	4c 89 95 30 fa ff ff 	mov    %r10,-0x5d0(%rbp)
  412192:	4c 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%r10
  412199:	49 bb b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r11
  4121a0:	ff ff ff 
  4121a3:	b9 00 04 00 00       	mov    $0x400,%ecx
  4121a8:	ba 01 00 00 00       	mov    $0x1,%edx
  4121ad:	be ff 03 00 00       	mov    $0x3ff,%esi
  4121b2:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  4121b9:	31 c0                	xor    %eax,%eax
  4121bb:	4f 8d 04 22          	lea    (%r10,%r12,1),%r8
  4121bf:	4d 89 d7             	mov    %r10,%r15
  4121c2:	4d 01 d3             	add    %r10,%r11
  4121c5:	41 ff d3             	callq  *%r11
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4121c8:	b9 05 04 00 00       	mov    $0x405,%ecx
  4121cd:	48 8b bd 20 fa ff ff 	mov    -0x5e0(%rbp),%rdi
  4121d4:	48 87 c9             	xchg   %rcx,%rcx
  4121d7:	4c 8b 95 30 fa ff ff 	mov    -0x5d0(%rbp),%r10
  4121de:	e9 1a ff ff ff       	jmpq   4120fd <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x131d>
      : _M_current(__i) { }
  4121e3:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4121ea:	48 3b 85 a0 fa ff ff 	cmp    -0x560(%rbp),%rax
  4121f1:	0f 84 e2 03 00 00    	je     4125d9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x17f9>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  4121f7:	48 85 c0             	test   %rax,%rax
  4121fa:	74 02                	je     4121fe <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x141e>
  4121fc:	89 10                	mov    %edx,(%rax)
	    ++this->_M_impl._M_finish;
  4121fe:	48 83 c0 04          	add    $0x4,%rax
  412202:	48 89 85 98 fa ff ff 	mov    %rax,-0x568(%rbp)
  412209:	e9 11 f8 ff ff       	jmpq   411a1f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc3f>
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
  41220e:	48 85 c9             	test   %rcx,%rcx
  412211:	0f 84 08 03 00 00    	je     41251f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x173f>
  412217:	48 8b 41 30          	mov    0x30(%rcx),%rax
  41221b:	31 d2                	xor    %edx,%edx
  41221d:	48 f7 f6             	div    %rsi
      if (!__next || __next_bkt != __bkt)
  412220:	49 39 d2             	cmp    %rdx,%r10
  412223:	0f 84 62 fc ff ff    	je     411e8b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10ab>
	    _M_buckets[__next_bkt] = _M_buckets[__bkt];
  412229:	4d 89 0c d7          	mov    %r9,(%r15,%rdx,8)
	  if (&_M_before_begin == _M_buckets[__bkt])
  41222d:	48 8b 95 00 fa ff ff 	mov    -0x600(%rbp),%rdx
  412234:	49 8b 06             	mov    (%r14),%rax
  412237:	48 83 c2 10          	add    $0x10,%rdx
  41223b:	48 39 d0             	cmp    %rdx,%rax
  41223e:	0f 84 f2 02 00 00    	je     412536 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1756>
	  _M_buckets[__bkt] = nullptr;
  412244:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
  41224b:	48 8b 0f             	mov    (%rdi),%rcx
  41224e:	e9 38 fc ff ff       	jmpq   411e8b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x10ab>
                current.focalHeuristic +
  412253:	45 01 ca             	add    %r9d,%r10d
    for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  412256:	31 c0                	xor    %eax,%eax
  412258:	44 89 95 2c fa ff ff 	mov    %r10d,-0x5d4(%rbp)
    int numConflicts = 0;
  41225f:	45 31 d2             	xor    %r10d,%r10d
  412262:	eb 11                	jmp    412275 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1495>
    for (size_t i = 0; i < ROBOT_NUMS; ++i) {
  412264:	48 83 c0 01          	add    $0x1,%rax
  412268:	48 81 c2 50 06 00 00 	add    $0x650,%rdx
  41226f:	48 83 f8 14          	cmp    $0x14,%rax
  412273:	74 75                	je     4122ea <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x150a>
      if (i != m_agentIdx && solution[i].states_size > 0) {
  412275:	48 39 c6             	cmp    %rax,%rsi
  412278:	74 ea                	je     412264 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
  41227a:	48 8b 8a 00 04 00 00 	mov    0x400(%rdx),%rcx
  412281:	48 85 c9             	test   %rcx,%rcx
  412284:	74 de                	je     412264 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
        State s2a = getState(i, solution, s1a.time);
  412286:	48 63 bd f0 fa ff ff 	movslq -0x510(%rbp),%rdi
	if (t < solution[agentIdx].states_size) {
  41228d:	48 39 f9             	cmp    %rdi,%rcx
  412290:	77 04                	ja     412296 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x14b6>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  412292:	48 8d 79 ff          	lea    -0x1(%rcx),%rdi
  412296:	48 c1 e7 04          	shl    $0x4,%rdi
  41229a:	48 01 d7             	add    %rdx,%rdi
	if (t < solution[agentIdx].states_size) {
  41229d:	49 39 cd             	cmp    %rcx,%r13
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  4122a0:	44 8b 47 04          	mov    0x4(%rdi),%r8d
  4122a4:	8b 7f 08             	mov    0x8(%rdi),%edi
	if (t < solution[agentIdx].states_size) {
  4122a7:	72 35                	jb     4122de <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x14fe>
	return solution[agentIdx].states[solution[agentIdx].states_size - 1].state;
  4122a9:	48 83 e9 01          	sub    $0x1,%rcx
  4122ad:	48 c1 e1 04          	shl    $0x4,%rcx
  4122b1:	48 01 d1             	add    %rdx,%rcx
  4122b4:	44 8b 49 04          	mov    0x4(%rcx),%r9d
  4122b8:	8b 49 08             	mov    0x8(%rcx),%ecx
  4122bb:	44 39 8d f4 fa ff ff 	cmp    %r9d,-0x50c(%rbp)
  4122c2:	75 a0                	jne    412264 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
  4122c4:	39 8d f8 fa ff ff    	cmp    %ecx,-0x508(%rbp)
  4122ca:	75 98                	jne    412264 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
  4122cc:	45 39 c6             	cmp    %r8d,%r14d
  4122cf:	75 93                	jne    412264 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
          ++numConflicts;
  4122d1:	31 c9                	xor    %ecx,%ecx
  4122d3:	41 39 ff             	cmp    %edi,%r15d
  4122d6:	0f 94 c1             	sete   %cl
  4122d9:	41 01 ca             	add    %ecx,%r10d
  4122dc:	eb 86                	jmp    412264 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1484>
		return solution[agentIdx].states[t].state;
  4122de:	46 8b 4c 1a 04       	mov    0x4(%rdx,%r11,1),%r9d
  4122e3:	42 8b 4c 1a 08       	mov    0x8(%rdx,%r11,1),%ecx
  4122e8:	eb d1                	jmp    4122bb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x14db>
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  4122ea:	44 2b b5 18 fa ff ff 	sub    -0x5e8(%rbp),%r14d
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  4122f1:	44 2b bd 14 fa ff ff 	sub    -0x5ec(%rbp),%r15d
		stat(0) {}
  4122f8:	48 8b 13             	mov    (%rbx),%rdx
                tentative_gScore + m_env.admissibleHeuristic(neighbor.state);
  4122fb:	8b bd 40 fa ff ff    	mov    -0x5c0(%rbp),%edi
                                               tentative_gScore);
  412301:	44 03 95 2c fa ff ff 	add    -0x5d4(%rbp),%r10d
		return std::abs(s.x - m_env.m_goals[m_agentIdx].x) +
  412308:	44 89 f0             	mov    %r14d,%eax
		stat(0) {}
  41230b:	48 89 95 d0 fb ff ff 	mov    %rdx,-0x430(%rbp)
  412312:	c1 f8 1f             	sar    $0x1f,%eax
  412315:	41 31 c6             	xor    %eax,%r14d
  412318:	41 29 c6             	sub    %eax,%r14d
			std::abs(s.y - m_env.m_goals[m_agentIdx].y);
  41231b:	44 89 f8             	mov    %r15d,%eax
  41231e:	c1 f8 1f             	sar    $0x1f,%eax
  412321:	41 31 c7             	xor    %eax,%r15d
  412324:	41 29 c7             	sub    %eax,%r15d
  412327:	8b 43 08             	mov    0x8(%rbx),%eax
  41232a:	89 bd e0 fb ff ff    	mov    %edi,-0x420(%rbp)
  412330:	45 01 fe             	add    %r15d,%r14d
                                               tentative_gScore);
  412333:	44 89 95 e4 fb ff ff 	mov    %r10d,-0x41c(%rbp)
		stat(0) {}
  41233a:	c7 85 e8 fb ff ff 00 	movl   $0x0,-0x418(%rbp)
  412341:	00 00 00 
                tentative_gScore + m_env.admissibleHeuristic(neighbor.state);
  412344:	41 01 fe             	add    %edi,%r14d
		stat(0) {}
  412347:	89 85 d8 fb ff ff    	mov    %eax,-0x428(%rbp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  41234d:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  412354:	48 3b 85 80 fa ff ff 	cmp    -0x580(%rbp),%rax
  41235b:	44 89 b5 dc fb ff ff 	mov    %r14d,-0x424(%rbp)
  412362:	0f 84 d9 02 00 00    	je     412641 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1861>
  412368:	48 85 c0             	test   %rax,%rax
  41236b:	74 22                	je     41238f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x15af>
  41236d:	48 89 10             	mov    %rdx,(%rax)
  412370:	48 8b 95 d8 fb ff ff 	mov    -0x428(%rbp),%rdx
  412377:	48 89 50 08          	mov    %rdx,0x8(%rax)
  41237b:	48 8b 95 e0 fb ff ff 	mov    -0x420(%rbp),%rdx
  412382:	48 89 50 10          	mov    %rdx,0x10(%rax)
  412386:	8b 95 e8 fb ff ff    	mov    -0x418(%rbp),%edx
  41238c:	89 50 18             	mov    %edx,0x18(%rax)
	    ++this->_M_impl._M_finish;
  41238f:	48 83 c0 1c          	add    $0x1c,%rax
  412393:	48 89 85 78 fa ff ff 	mov    %rax,-0x588(%rbp)
            if (fScore <= bestFScore * m_w) {
  41239a:	66 0f ef c9          	pxor   %xmm1,%xmm1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41239e:	48 2b 85 70 fa ff ff 	sub    -0x590(%rbp),%rax
  4123a5:	48 ba b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rdx
  4123ac:	db b6 6d 
  4123af:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4123b3:	f3 0f 2a 8d 1c fa ff 	cvtsi2ssl -0x5e4(%rbp),%xmm1
  4123ba:	ff 
  4123bb:	f3 41 0f 2a c6       	cvtsi2ss %r14d,%xmm0
  4123c0:	48 c1 f8 02          	sar    $0x2,%rax
  4123c4:	48 0f af c2          	imul   %rdx,%rax
  4123c8:	f3 0f 59 8d 28 fa ff 	mulss  -0x5d8(%rbp),%xmm1
  4123cf:	ff 
  4123d0:	0f 2e c8             	ucomiss %xmm0,%xmm1
  4123d3:	72 2f                	jb     412404 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1624>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4123d5:	48 8b 95 98 fa ff ff 	mov    -0x568(%rbp),%rdx
  4123dc:	48 3b 95 a0 fa ff ff 	cmp    -0x560(%rbp),%rdx
							focalSet.push_back(openSet.size() - 1);
  4123e3:	8d 48 ff             	lea    -0x1(%rax),%ecx
  4123e6:	89 8d d0 fa ff ff    	mov    %ecx,-0x530(%rbp)
  4123ec:	0f 84 10 02 00 00    	je     412602 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1822>
  4123f2:	48 85 d2             	test   %rdx,%rdx
  4123f5:	74 02                	je     4123f9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1619>
  4123f7:	89 0a                	mov    %ecx,(%rdx)
	    ++this->_M_impl._M_finish;
  4123f9:	48 83 c2 04          	add    $0x4,%rdx
  4123fd:	48 89 95 98 fa ff ff 	mov    %rdx,-0x568(%rbp)
  412404:	4c 8d b5 d0 fa ff ff 	lea    -0x530(%rbp),%r14
       : first(__x), second(std::forward<_U2>(__y)) { }
  41240b:	48 8b 13             	mov    (%rbx),%rdx
            stateToHeap.insert(std::make_pair<>(neighbor.state, openSet.size() - 1));
  41240e:	48 83 e8 01          	sub    $0x1,%rax
	  return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
  412412:	48 83 ec 08          	sub    $0x8,%rsp
  412416:	4c 89 f6             	mov    %r14,%rsi
  412419:	48 8b bd 38 fa ff ff 	mov    -0x5c8(%rbp),%rdi
  412420:	48 89 95 d0 fa ff ff 	mov    %rdx,-0x530(%rbp)
  412427:	8b 53 08             	mov    0x8(%rbx),%edx
  41242a:	48 89 85 e0 fa ff ff 	mov    %rax,-0x520(%rbp)
  412431:	48 b8 60 24 df ff ff 	movabs $0xffffffffffdf2460,%rax
  412438:	ff ff ff 
  41243b:	6a 00                	pushq  $0x0
  41243d:	89 95 d8 fa ff ff    	mov    %edx,-0x528(%rbp)
  412443:	48 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%rdx
  41244a:	48 01 d0             	add    %rdx,%rax
  41244d:	ff d0                	callq  *%rax
  41244f:	59                   	pop    %rcx
  412450:	5e                   	pop    %rsi
  412451:	e9 c9 f5 ff ff       	jmpq   411a1f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc3f>
	__ostream_insert(__out, __s,
  412456:	4c 8b a5 48 fa ff ff 	mov    -0x5b8(%rbp),%r12
  41245d:	48 b8 a8 7b df ff ff 	movabs $0xffffffffffdf7ba8,%rax
  412464:	ff ff ff 
  412467:	ba 26 00 00 00       	mov    $0x26,%edx
  41246c:	49 8d 34 04          	lea    (%r12,%rax,1),%rsi
  412470:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  412477:	ff ff ff 
  41247a:	4d 89 e7             	mov    %r12,%r15
  41247d:	49 8b 3c 04          	mov    (%r12,%rax,1),%rdi
  412481:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  412488:	ff ff ff 
  41248b:	4c 01 e0             	add    %r12,%rax
  41248e:	ff d0                	callq  *%rax
	return __pf(*this);
  412490:	48 b8 80 30 de ff ff 	movabs $0xffffffffffde3080,%rax
  412497:	ff ff ff 
  41249a:	4c 01 e0             	add    %r12,%rax
  41249d:	ff d0                	callq  *%rax
  41249f:	e9 cf f0 ff ff       	jmpq   411573 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x793>
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
  4124a4:	48 85 c9             	test   %rcx,%rcx
  4124a7:	74 19                	je     4124c2 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x16e2>
    { return __num % __den; }
  4124a9:	48 8b 41 18          	mov    0x18(%rcx),%rax
  4124ad:	31 d2                	xor    %edx,%edx
  4124af:	49 f7 f5             	div    %r13
      if (!__next || __next_bkt != __bkt)
  4124b2:	49 39 d1             	cmp    %rdx,%r9
  4124b5:	0f 84 29 f2 ff ff    	je     4116e4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x904>
	    _M_buckets[__next_bkt] = _M_buckets[__bkt];
  4124bb:	49 89 34 d0          	mov    %rsi,(%r8,%rdx,8)
  4124bf:	49 8b 02             	mov    (%r10),%rax
	  if (&_M_before_begin == _M_buckets[__bkt])
  4124c2:	48 8b 9d 38 fa ff ff 	mov    -0x5c8(%rbp),%rbx
  4124c9:	48 8d 53 10          	lea    0x10(%rbx),%rdx
  4124cd:	48 39 d0             	cmp    %rdx,%rax
  4124d0:	0f 84 d8 01 00 00    	je     4126ae <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x18ce>
	  _M_buckets[__bkt] = nullptr;
  4124d6:	49 c7 02 00 00 00 00 	movq   $0x0,(%r10)
  4124dd:	48 8b 0f             	mov    (%rdi),%rcx
  4124e0:	e9 ff f1 ff ff       	jmpq   4116e4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x904>
	  __node->_M_nxt = _M_before_begin._M_nxt;
  4124e5:	48 8b 85 a0 fb ff ff 	mov    -0x460(%rbp),%rax
	  _M_before_begin._M_nxt = __node;
  4124ec:	4c 89 b5 a0 fb ff ff 	mov    %r14,-0x460(%rbp)
	  if (__node->_M_nxt)
  4124f3:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  4124f6:	49 89 06             	mov    %rax,(%r14)
	  if (__node->_M_nxt)
  4124f9:	74 11                	je     41250c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x172c>
  4124fb:	48 8b 40 30          	mov    0x30(%rax),%rax
  4124ff:	31 d2                	xor    %edx,%edx
  412501:	48 f7 b5 98 fb ff ff 	divq   -0x468(%rbp)
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  412508:	4c 89 34 d6          	mov    %r14,(%rsi,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  41250c:	48 8b 85 00 fa ff ff 	mov    -0x600(%rbp),%rax
  412513:	48 83 c0 10          	add    $0x10,%rax
  412517:	48 89 01             	mov    %rax,(%rcx)
  41251a:	e9 b2 f7 ff ff       	jmpq   411cd1 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xef1>
	  if (&_M_before_begin == _M_buckets[__bkt])
  41251f:	48 8b 95 00 fa ff ff 	mov    -0x600(%rbp),%rdx
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
  412526:	4c 89 c8             	mov    %r9,%rax
	  if (&_M_before_begin == _M_buckets[__bkt])
  412529:	48 83 c2 10          	add    $0x10,%rdx
  41252d:	48 39 d0             	cmp    %rdx,%rax
  412530:	0f 85 0e fd ff ff    	jne    412244 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1464>
	    _M_before_begin._M_nxt = __next;
  412536:	48 89 8d a0 fb ff ff 	mov    %rcx,-0x460(%rbp)
  41253d:	e9 02 fd ff ff       	jmpq   412244 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1464>
  412542:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  412548:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
  41254f:	48 8b bd c8 f9 ff ff 	mov    -0x638(%rbp),%rdi
  412556:	48 8b 85 c0 f9 ff ff 	mov    -0x640(%rbp),%rax
  41255d:	ff d0                	callq  *%rax
  41255f:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
  412566:	e9 7d f8 ff ff       	jmpq   411de8 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1008>
	__ostream_insert(__out, __s,
  41256b:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412572:	48 b8 53 7e df ff ff 	movabs $0xffffffffffdf7e53,%rax
  412579:	ff ff ff 
  41257c:	ba 1a 00 00 00       	mov    $0x1a,%edx
  412581:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  412585:	48 b8 b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rax
  41258c:	ff ff ff 
  41258f:	49 89 df             	mov    %rbx,%r15
  412592:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  412596:	48 b8 a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%rax
  41259d:	ff ff ff 
  4125a0:	48 01 d8             	add    %rbx,%rax
  4125a3:	ff d0                	callq  *%rax
	return __pf(*this);
  4125a5:	48 b8 80 30 de ff ff 	movabs $0xffffffffffde3080,%rax
  4125ac:	ff ff ff 
  4125af:	48 01 d8             	add    %rbx,%rax
  4125b2:	ff d0                	callq  *%rax
  4125b4:	48 8b 95 90 fa ff ff 	mov    -0x570(%rbp),%rdx
  4125bb:	4c 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%r8
  4125c2:	4c 8b 8d 70 fa ff ff 	mov    -0x590(%rbp),%r9
	for (; iter != iterEnd; ++iter) {
  4125c9:	4c 39 c2             	cmp    %r8,%rdx
  4125cc:	0f 85 92 05 00 00    	jne    412b64 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1d84>
  4125d2:	31 db                	xor    %ebx,%ebx
  4125d4:	e9 55 ef ff ff       	jmpq   41152e <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x74e>
	  _M_emplace_back_aux(__x);
  4125d9:	48 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%rdx
  4125e0:	48 b8 f0 e5 de ff ff 	movabs $0xffffffffffdee5f0,%rax
  4125e7:	ff ff ff 
  4125ea:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
  4125f1:	48 8b bd c8 f9 ff ff 	mov    -0x638(%rbp),%rdi
  4125f8:	48 01 d0             	add    %rdx,%rax
  4125fb:	ff d0                	callq  *%rax
  4125fd:	e9 1d f4 ff ff       	jmpq   411a1f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xc3f>
  412602:	4c 8d b5 d0 fa ff ff 	lea    -0x530(%rbp),%r14
  412609:	48 8b bd c8 f9 ff ff 	mov    -0x638(%rbp),%rdi
  412610:	48 8b 85 c0 f9 ff ff 	mov    -0x640(%rbp),%rax
  412617:	4c 89 f6             	mov    %r14,%rsi
  41261a:	ff d0                	callq  *%rax
  41261c:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  412623:	48 2b 85 70 fa ff ff 	sub    -0x590(%rbp),%rax
  41262a:	48 ba b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rdx
  412631:	db b6 6d 
  412634:	48 c1 f8 02          	sar    $0x2,%rax
  412638:	48 0f af c2          	imul   %rdx,%rax
  41263c:	e9 ca fd ff ff       	jmpq   41240b <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x162b>
  412641:	48 8b 95 48 fa ff ff 	mov    -0x5b8(%rbp),%rdx
  412648:	48 b8 f0 e7 de ff ff 	movabs $0xffffffffffdee7f0,%rax
  41264f:	ff ff ff 
  412652:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
  412659:	48 8b bd d0 f9 ff ff 	mov    -0x630(%rbp),%rdi
  412660:	48 01 d0             	add    %rdx,%rax
  412663:	ff d0                	callq  *%rax
  412665:	48 8b 85 78 fa ff ff 	mov    -0x588(%rbp),%rax
  41266c:	e9 29 fd ff ff       	jmpq   41239a <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x15ba>
      __catch(...)
  412671:	4c 8b b5 48 fa ff ff 	mov    -0x5b8(%rbp),%r14
  412678:	48 89 c7             	mov    %rax,%rdi
      { ::operator delete(__p); }
  41267b:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  412682:	ff ff ff 
  412685:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41268c:	ff ff ff 
  41268f:	4d 89 f7             	mov    %r14,%r15
  412692:	4c 01 f0             	add    %r14,%rax
  412695:	4c 01 f3             	add    %r14,%rbx
  412698:	ff d0                	callq  *%rax
  41269a:	4c 89 e7             	mov    %r12,%rdi
  41269d:	ff d3                	callq  *%rbx
	  __throw_exception_again;
  41269f:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  4126a6:	ff ff ff 
  4126a9:	4c 01 f0             	add    %r14,%rax
  4126ac:	ff d0                	callq  *%rax
	    _M_before_begin._M_nxt = __next;
  4126ae:	48 89 8d 20 fb ff ff 	mov    %rcx,-0x4e0(%rbp)
  4126b5:	e9 1c fe ff ff       	jmpq   4124d6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x16f6>
      __catch(...)
  4126ba:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4126c1:	49 89 c5             	mov    %rax,%r13
  4126c4:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  4126cb:	ff ff ff 
  4126ce:	49 89 df             	mov    %rbx,%r15
  4126d1:	48 01 d8             	add    %rbx,%rax
  4126d4:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4126d6:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
	if (__p)
  4126dd:	48 85 ff             	test   %rdi,%rdi
  4126e0:	74 19                	je     4126fb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x191b>
  4126e2:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  4126e9:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  4126f0:	ff ff ff 
  4126f3:	49 89 c7             	mov    %rax,%r15
  4126f6:	48 01 c3             	add    %rax,%rbx
  4126f9:	ff d3                	callq  *%rbx
  4126fb:	48 8b bd a0 fb ff ff 	mov    -0x460(%rbp),%rdi
  412702:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  412709:	ff ff ff 
  41270c:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
      while (__n)
  412713:	48 85 ff             	test   %rdi,%rdi
  412716:	74 14                	je     41272c <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x194c>
  412718:	4c 8b 27             	mov    (%rdi),%r12
  41271b:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  412722:	ff d3                	callq  *%rbx
  412724:	4d 85 e4             	test   %r12,%r12
  412727:	4c 89 e7             	mov    %r12,%rdi
  41272a:	75 ec                	jne    412718 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1938>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  41272c:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
  412733:	49 bc 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%r12
  41273a:	ff ff ff 
  41273d:	31 f6                	xor    %esi,%esi
  41273f:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
  412746:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  41274d:	00 
  41274e:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  412755:	49 89 c7             	mov    %rax,%r15
  412758:	4c 01 e0             	add    %r12,%rax
  41275b:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  41275d:	48 8b 85 00 fa ff ff 	mov    -0x600(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  412764:	48 8b bd 90 fb ff ff 	mov    -0x470(%rbp),%rdi
      _M_element_count = 0;
  41276b:	48 c7 85 a8 fb ff ff 	movq   $0x0,-0x458(%rbp)
  412772:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  412776:	48 c7 85 a0 fb ff ff 	movq   $0x0,-0x460(%rbp)
  41277d:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  412781:	48 83 c0 30          	add    $0x30,%rax
  412785:	48 39 c7             	cmp    %rax,%rdi
  412788:	74 19                	je     4127a3 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x19c3>
  41278a:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  412791:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  412798:	ff ff ff 
  41279b:	49 89 c7             	mov    %rax,%r15
  41279e:	48 01 c3             	add    %rax,%rbx
  4127a1:	ff d3                	callq  *%rbx
  4127a3:	48 8b bd 60 fb ff ff 	mov    -0x4a0(%rbp),%rdi
  4127aa:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  4127b1:	ff ff ff 
  4127b4:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
  4127bb:	48 85 ff             	test   %rdi,%rdi
  4127be:	74 14                	je     4127d4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x19f4>
  4127c0:	4c 8b 37             	mov    (%rdi),%r14
  4127c3:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  4127ca:	ff d3                	callq  *%rbx
  4127cc:	4d 85 f6             	test   %r14,%r14
  4127cf:	4c 89 f7             	mov    %r14,%rdi
  4127d2:	75 ec                	jne    4127c0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x19e0>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  4127d4:	48 8b 85 58 fb ff ff 	mov    -0x4a8(%rbp),%rax
  4127db:	31 f6                	xor    %esi,%esi
  4127dd:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
  4127e4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  4127eb:	00 
  4127ec:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  4127f3:	49 89 c7             	mov    %rax,%r15
  4127f6:	4c 01 e0             	add    %r12,%rax
  4127f9:	ff d0                	callq  *%rax
	if (_M_uses_single_bucket(__bkts))
  4127fb:	48 8b 85 e8 f9 ff ff 	mov    -0x618(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  412802:	48 8b bd 50 fb ff ff 	mov    -0x4b0(%rbp),%rdi
      _M_element_count = 0;
  412809:	48 c7 85 68 fb ff ff 	movq   $0x0,-0x498(%rbp)
  412810:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  412814:	48 c7 85 60 fb ff ff 	movq   $0x0,-0x4a0(%rbp)
  41281b:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  41281f:	48 83 c0 30          	add    $0x30,%rax
  412823:	48 39 c7             	cmp    %rax,%rdi
  412826:	74 19                	je     412841 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1a61>
  412828:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  41282f:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  412836:	ff ff ff 
  412839:	49 89 c7             	mov    %rax,%r15
  41283c:	48 01 c3             	add    %rax,%rbx
  41283f:	ff d3                	callq  *%rbx
  412841:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  412848:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  41284f:	ff ff ff 
  412852:	48 03 9d 48 fa ff ff 	add    -0x5b8(%rbp),%rbx
  412859:	48 85 ff             	test   %rdi,%rdi
  41285c:	74 14                	je     412872 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1a92>
  41285e:	4c 8b 37             	mov    (%rdi),%r14
  412861:	4c 8b bd 48 fa ff ff 	mov    -0x5b8(%rbp),%r15
  412868:	ff d3                	callq  *%rbx
  41286a:	4d 85 f6             	test   %r14,%r14
  41286d:	4c 89 f7             	mov    %r14,%rdi
  412870:	75 ec                	jne    41285e <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1a7e>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  412872:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
  412879:	31 f6                	xor    %esi,%esi
  41287b:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
  412882:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  412889:	00 
  41288a:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  412891:	49 01 c4             	add    %rax,%r12
  412894:	49 89 c7             	mov    %rax,%r15
  412897:	41 ff d4             	callq  *%r12
	if (_M_uses_single_bucket(__bkts))
  41289a:	48 8b 85 38 fa ff ff 	mov    -0x5c8(%rbp),%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  4128a1:	48 8b bd 10 fb ff ff 	mov    -0x4f0(%rbp),%rdi
      _M_element_count = 0;
  4128a8:	48 c7 85 28 fb ff ff 	movq   $0x0,-0x4d8(%rbp)
  4128af:	00 00 00 00 
      _M_before_begin._M_nxt = nullptr;
  4128b3:	48 c7 85 20 fb ff ff 	movq   $0x0,-0x4e0(%rbp)
  4128ba:	00 00 00 00 
	if (_M_uses_single_bucket(__bkts))
  4128be:	48 83 c0 30          	add    $0x30,%rax
  4128c2:	48 39 c7             	cmp    %rax,%rdi
  4128c5:	74 19                	je     4128e0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b00>
  4128c7:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4128ce:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4128d5:	ff ff ff 
  4128d8:	49 89 df             	mov    %rbx,%r15
  4128db:	48 01 d8             	add    %rbx,%rax
  4128de:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4128e0:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
	if (__p)
  4128e7:	48 85 ff             	test   %rdi,%rdi
  4128ea:	74 19                	je     412905 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b25>
  4128ec:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4128f3:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4128fa:	ff ff ff 
  4128fd:	49 89 df             	mov    %rbx,%r15
  412900:	48 01 d8             	add    %rbx,%rax
  412903:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  412905:	48 8b bd 70 fa ff ff 	mov    -0x590(%rbp),%rdi
	if (__p)
  41290c:	48 85 ff             	test   %rdi,%rdi
  41290f:	74 19                	je     41292a <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1b4a>
  412911:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412918:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41291f:	ff ff ff 
  412922:	49 89 df             	mov    %rbx,%r15
  412925:	48 01 d8             	add    %rbx,%rax
  412928:	ff d0                	callq  *%rax
  41292a:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412931:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  412938:	ff ff ff 
  41293b:	4c 89 ef             	mov    %r13,%rdi
  41293e:	49 89 df             	mov    %rbx,%r15
  412941:	48 01 d8             	add    %rbx,%rax
  412944:	ff d0                	callq  *%rax
		if (states_size < STATE_SIZE) {
  412946:	48 8b 9d 08 fa ff ff 	mov    -0x5f8(%rbp),%rbx
  41294d:	48 8b 85 b8 f9 ff ff 	mov    -0x648(%rbp),%rax
  412954:	4c 8b 8b 00 04 00 00 	mov    0x400(%rbx),%r9
  41295b:	8b 30                	mov    (%rax),%esi
  41295d:	8b 48 04             	mov    0x4(%rax),%ecx
  412960:	8b 50 08             	mov    0x8(%rax),%edx
  412963:	49 83 f9 3f          	cmp    $0x3f,%r9
  412967:	0f 87 47 02 00 00    	ja     412bb4 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1dd4>
			states[states_size] = s;
  41296d:	4c 89 c8             	mov    %r9,%rax
  412970:	48 c1 e0 04          	shl    $0x4,%rax
  412974:	48 01 d8             	add    %rbx,%rax
  412977:	89 30                	mov    %esi,(%rax)
  412979:	89 48 04             	mov    %ecx,0x4(%rax)
  41297c:	89 50 08             	mov    %edx,0x8(%rax)
  41297f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
			states_size++;
  412986:	49 8d 41 01          	lea    0x1(%r9),%rax
  41298a:	48 89 83 00 04 00 00 	mov    %rax,0x400(%rbx)
  412991:	48 8b 9d 08 fa ff ff 	mov    -0x5f8(%rbp),%rbx
  412998:	48 c1 e0 04          	shl    $0x4,%rax
  41299c:	48 8b 8d 20 fa ff ff 	mov    -0x5e0(%rbp),%rcx
  4129a3:	48 89 c2             	mov    %rax,%rdx
  4129a6:	48 8d 44 13 f0       	lea    -0x10(%rbx,%rdx,1),%rax
  4129ab:	48 8d 7b f0          	lea    -0x10(%rbx),%rdi
			tmp_s[i] = states[j];
  4129af:	48 8b 30             	mov    (%rax),%rsi
  4129b2:	48 83 e8 10          	sub    $0x10,%rax
  4129b6:	48 83 c1 10          	add    $0x10,%rcx
  4129ba:	48 89 71 f0          	mov    %rsi,-0x10(%rcx)
  4129be:	48 8b 70 18          	mov    0x18(%rax),%rsi
  4129c2:	48 89 71 f8          	mov    %rsi,-0x8(%rcx)
		for(int i = 0; i < states_size; ++i) {
  4129c6:	48 39 f8             	cmp    %rdi,%rax
  4129c9:	75 e4                	jne    4129af <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1bcf>
  4129cb:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  4129d2:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  4129d9:	ff ff ff 
  4129dc:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
  4129e3:	48 8b bd 08 fa ff ff 	mov    -0x5f8(%rbp),%rdi
  4129ea:	49 89 df             	mov    %rbx,%r15
  4129ed:	48 01 d8             	add    %rbx,%rax
  4129f0:	ff d0                	callq  *%rax
		size_t j = actions_size - 1;
  4129f2:	48 8b 85 08 fa ff ff 	mov    -0x5f8(%rbp),%rax
  4129f9:	48 8b 80 08 06 00 00 	mov    0x608(%rax),%rax
		for(int i = 0; i < actions_size; ++i) {
  412a00:	48 85 c0             	test   %rax,%rax
  412a03:	74 6a                	je     412a6f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1c8f>
  412a05:	48 8d 14 c5 00 04 00 	lea    0x400(,%rax,8),%rdx
  412a0c:	00 
  412a0d:	48 8b 85 08 fa ff ff 	mov    -0x5f8(%rbp),%rax
  412a14:	48 8b 9d 20 fa ff ff 	mov    -0x5e0(%rbp),%rbx
  412a1b:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  412a1f:	48 81 ea 00 04 00 00 	sub    $0x400,%rdx
  412a26:	48 89 d8             	mov    %rbx,%rax
  412a29:	48 8d 3c 13          	lea    (%rbx,%rdx,1),%rdi
			tmp_a[i] = actions[j];
  412a2d:	48 8b 31             	mov    (%rcx),%rsi
  412a30:	48 83 c0 08          	add    $0x8,%rax
  412a34:	48 83 e9 08          	sub    $0x8,%rcx
  412a38:	48 89 70 f8          	mov    %rsi,-0x8(%rax)
		for(int i = 0; i < actions_size; ++i) {
  412a3c:	48 39 f8             	cmp    %rdi,%rax
  412a3f:	75 ec                	jne    412a2d <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1c4d>
			actions[i] = tmp_a[i];
  412a41:	48 8b 85 08 fa ff ff 	mov    -0x5f8(%rbp),%rax
  412a48:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412a4f:	48 8b b5 20 fa ff ff 	mov    -0x5e0(%rbp),%rsi
  412a56:	48 8d b8 08 04 00 00 	lea    0x408(%rax),%rdi
  412a5d:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  412a64:	ff ff ff 
  412a67:	49 89 df             	mov    %rbx,%r15
  412a6a:	48 01 d8             	add    %rbx,%rax
  412a6d:	ff d0                	callq  *%rax
        solution.cost = current.gScore;
  412a6f:	8b 85 00 fb ff ff    	mov    -0x500(%rbp),%eax
  412a75:	48 8b 9d 08 fa ff ff 	mov    -0x5f8(%rbp),%rbx
        return true;
  412a7c:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        solution.fmin = openSet[openset_top(openSet)].fScore;
  412a82:	48 8b bd d0 f9 ff ff 	mov    -0x630(%rbp),%rdi
        solution.cost = current.gScore;
  412a89:	89 83 10 06 00 00    	mov    %eax,0x610(%rbx)
        solution.fmin = openSet[openset_top(openSet)].fScore;
  412a8f:	48 8b 85 48 fa ff ff 	mov    -0x5b8(%rbp),%rax
  412a96:	4c 01 f0             	add    %r14,%rax
  412a99:	ff d0                	callq  *%rax
  412a9b:	48 63 d0             	movslq %eax,%rdx
  412a9e:	48 8b bd 70 fa ff ff 	mov    -0x590(%rbp),%rdi
  412aa5:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  412aac:	00 
  412aad:	48 29 d0             	sub    %rdx,%rax
  412ab0:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
  412ab4:	8b 40 0c             	mov    0xc(%rax),%eax
  412ab7:	89 83 14 06 00 00    	mov    %eax,0x614(%rbx)
  412abd:	e9 f7 e6 ff ff       	jmpq   4111b9 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x3d9>
  412ac2:	49 89 c5             	mov    %rax,%r13
  412ac5:	e9 0c fc ff ff       	jmpq   4126d6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x18f6>
      __catch(...)
  412aca:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412ad1:	48 89 c7             	mov    %rax,%rdi
  412ad4:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  412adb:	ff ff ff 
  412ade:	49 89 df             	mov    %rbx,%r15
  412ae1:	48 01 d8             	add    %rbx,%rax
  412ae4:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  412aeb:	ff ff ff 
  412aee:	ff d0                	callq  *%rax
  412af0:	4c 01 fb             	add    %r15,%rbx
  412af3:	4c 89 f7             	mov    %r14,%rdi
  412af6:	ff d3                	callq  *%rbx
	  __throw_exception_again;
  412af8:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  412aff:	ff ff ff 
  412b02:	4c 01 f8             	add    %r15,%rax
  412b05:	ff d0                	callq  *%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  412b07:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
	  _M_before_begin._M_nxt = __node;
  412b0e:	4c 89 a5 60 fb ff ff 	mov    %r12,-0x4a0(%rbp)
	  if (__node->_M_nxt)
  412b15:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  412b18:	49 89 04 24          	mov    %rax,(%r12)
	  if (__node->_M_nxt)
  412b1c:	74 11                	je     412b2f <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1d4f>
    { return __num % __den; }
  412b1e:	48 8b 40 18          	mov    0x18(%rax),%rax
  412b22:	31 d2                	xor    %edx,%edx
  412b24:	48 f7 b5 58 fb ff ff 	divq   -0x4a8(%rbp)
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  412b2b:	4c 89 24 d1          	mov    %r12,(%rcx,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  412b2f:	48 8b 85 e8 f9 ff ff 	mov    -0x618(%rbp),%rax
  412b36:	48 83 c0 10          	add    $0x10,%rax
  412b3a:	49 89 45 00          	mov    %rax,0x0(%r13)
  412b3e:	e9 62 ed ff ff       	jmpq   4118a5 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0xac5>
      __catch(...)
  412b43:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412b4a:	49 89 c5             	mov    %rax,%r13
  412b4d:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  412b54:	ff ff ff 
  412b57:	49 89 df             	mov    %rbx,%r15
  412b5a:	48 01 d8             	add    %rbx,%rax
  412b5d:	ff d0                	callq  *%rax
  412b5f:	e9 72 fb ff ff       	jmpq   4126d6 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x18f6>
	AstarNode current = openSet[coi];
  412b64:	48 63 0a             	movslq (%rdx),%rcx
      { return *(this->_M_impl._M_start + __n); }
  412b67:	48 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%rax
  412b6e:	00 
  412b6f:	48 29 c8             	sub    %rcx,%rax
  412b72:	49 8d 04 81          	lea    (%r9,%rax,4),%rax
  412b76:	44 8b 58 0c          	mov    0xc(%rax),%r11d
  412b7a:	8b 58 10             	mov    0x10(%rax),%ebx
  412b7d:	8b 70 14             	mov    0x14(%rax),%esi
  412b80:	4c 89 c0             	mov    %r8,%rax
  412b83:	49 89 d0             	mov    %rdx,%r8
  412b86:	e9 15 e9 ff ff       	jmpq   4114a0 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x6c0>
	  _M_emplace_back_aux(__x);
  412b8b:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412b92:	48 b8 f0 e5 de ff ff 	movabs $0xffffffffffdee5f0,%rax
  412b99:	ff ff ff 
  412b9c:	48 8d b5 5c fa ff ff 	lea    -0x5a4(%rbp),%rsi
  412ba3:	48 8d bd 90 fa ff ff 	lea    -0x570(%rbp),%rdi
  412baa:	48 01 d8             	add    %rbx,%rax
  412bad:	ff d0                	callq  *%rax
  412baf:	e9 3d e5 ff ff       	jmpq   4110f1 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x311>
  412bb4:	48 8b 9d 48 fa ff ff 	mov    -0x5b8(%rbp),%rbx
  412bbb:	4c 8b a5 20 fa ff ff 	mov    -0x5e0(%rbp),%r12
  412bc2:	48 b8 88 7a df ff ff 	movabs $0xffffffffffdf7a88,%rax
  412bc9:	ff ff ff 
  412bcc:	49 ba b0 e5 dd ff ff 	movabs $0xffffffffffdde5b0,%r10
  412bd3:	ff ff ff 
  412bd6:	b9 00 04 00 00       	mov    $0x400,%ecx
  412bdb:	ba 01 00 00 00       	mov    $0x1,%edx
  412be0:	be ff 03 00 00       	mov    $0x3ff,%esi
  412be5:	4c 8d 04 03          	lea    (%rbx,%rax,1),%r8
  412be9:	4c 89 e7             	mov    %r12,%rdi
  412bec:	49 89 df             	mov    %rbx,%r15
  412bef:	31 c0                	xor    %eax,%eax
  412bf1:	49 01 da             	add    %rbx,%r10
  412bf4:	41 ff d2             	callq  *%r10
  412bf7:	b9 05 04 00 00       	mov    $0x405,%ecx
  412bfc:	4c 89 e7             	mov    %r12,%rdi
  412bff:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  412c02:	48 8b 85 08 fa ff ff 	mov    -0x5f8(%rbp),%rax
  412c09:	48 8b 80 00 04 00 00 	mov    0x400(%rax),%rax
		for(int i = 0; i < states_size; ++i) {
  412c10:	48 85 c0             	test   %rax,%rax
  412c13:	0f 85 78 fd ff ff    	jne    412991 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1bb1>
  412c19:	e9 d4 fd ff ff       	jmpq   4129f2 <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x1c12>
  412c1e:	49 89 c5             	mov    %rax,%r13
  412c21:	e9 d5 fa ff ff       	jmpq   4126fb <_Z12astar_searchR19LowLevelEnvironmentfRK5StateR10PlanResult+0x191b>
  412c26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  412c2d:	00 00 00 

0000000000412c30 <_Z6searchm>:
	void search(swarm::Timestamp score) {
  412c30:	41 57                	push   %r15
  412c32:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 412c30 <_Z6searchm>
  412c39:	49 bb d0 83 21 00 00 	movabs $0x2183d0,%r11
  412c40:	00 00 00 
  412c43:	41 56                	push   %r14
  412c45:	41 55                	push   %r13
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  412c47:	48 b8 d0 7b df ff ff 	movabs $0xffffffffffdf7bd0,%rax
  412c4e:	ff ff ff 
  412c51:	41 54                	push   %r12
  412c53:	55                   	push   %rbp
  412c54:	4d 01 df             	add    %r11,%r15
  412c57:	53                   	push   %rbx
  412c58:	48 bb 80 e3 dd ff ff 	movabs $0xffffffffffdde380,%rbx
  412c5f:	ff ff ff 
  412c62:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412c66:	4c 01 fb             	add    %r15,%rbx
  412c69:	ba 80 00 01 00       	mov    $0x10080,%edx
  412c6e:	bf 01 00 00 00       	mov    $0x1,%edi
  412c73:	48 83 ec 58          	sub    $0x58,%rsp
  412c77:	31 c0                	xor    %eax,%eax
    start.cost = 0;
  412c79:	49 bc 80 e9 4a 9a 01 	movabs $0x19a4ae980,%r12
  412c80:	00 00 00 
  412c83:	ff d3                	callq  *%rbx
  412c85:	48 b8 f8 7b df ff ff 	movabs $0xffffffffffdf7bf8,%rax
  412c8c:	ff ff ff 
  412c8f:	ba 50 06 00 00       	mov    $0x650,%edx
  412c94:	bf 01 00 00 00       	mov    $0x1,%edi
  412c99:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412c9d:	31 c0                	xor    %eax,%eax
  412c9f:	ff d3                	callq  *%rbx
  412ca1:	48 b8 20 7c df ff ff 	movabs $0xffffffffffdf7c20,%rax
  412ca8:	ff ff ff 
  412cab:	ba 10 00 00 00       	mov    $0x10,%edx
  412cb0:	bf 01 00 00 00       	mov    $0x1,%edi
  412cb5:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412cb9:	31 c0                	xor    %eax,%eax
  412cbb:	ff d3                	callq  *%rbx
  412cbd:	48 b8 48 7c df ff ff 	movabs $0xffffffffffdf7c48,%rax
  412cc4:	ff ff ff 
  412cc7:	ba 08 00 00 00       	mov    $0x8,%edx
  412ccc:	bf 01 00 00 00       	mov    $0x1,%edi
  412cd1:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412cd5:	31 c0                	xor    %eax,%eax
  412cd7:	ff d3                	callq  *%rbx
  412cd9:	48 b8 70 7c df ff ff 	movabs $0xffffffffffdf7c70,%rax
  412ce0:	ff ff ff 
  412ce3:	ba 40 7e 00 00       	mov    $0x7e40,%edx
  412ce8:	bf 01 00 00 00       	mov    $0x1,%edi
  412ced:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412cf1:	31 c0                	xor    %eax,%eax
  412cf3:	ff d3                	callq  *%rbx
  412cf5:	48 b8 a0 7c df ff ff 	movabs $0xffffffffffdf7ca0,%rax
  412cfc:	ff ff ff 
  412cff:	ba 80 06 00 00       	mov    $0x680,%edx
  412d04:	bf 01 00 00 00       	mov    $0x1,%edi
  412d09:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412d0d:	31 c0                	xor    %eax,%eax
  412d0f:	ff d3                	callq  *%rbx
  412d11:	48 b8 c8 7c df ff ff 	movabs $0xffffffffffdf7cc8,%rax
  412d18:	ff ff ff 
  412d1b:	ba 00 82 00 00       	mov    $0x8200,%edx
  412d20:	bf 01 00 00 00       	mov    $0x1,%edi
  412d25:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412d29:	31 c0                	xor    %eax,%eax
  412d2b:	ff d3                	callq  *%rbx
  412d2d:	48 b8 00 7d df ff ff 	movabs $0xffffffffffdf7d00,%rax
  412d34:	ff ff ff 
  412d37:	ba 40 00 00 00       	mov    $0x40,%edx
  412d3c:	bf 01 00 00 00       	mov    $0x1,%edi
  412d41:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412d45:	31 c0                	xor    %eax,%eax
  412d47:	ff d3                	callq  *%rbx
  412d49:	48 b8 20 7d df ff ff 	movabs $0xffffffffffdf7d20,%rax
  412d50:	ff ff ff 
  412d53:	ba 40 00 00 00       	mov    $0x40,%edx
  412d58:	bf 01 00 00 00       	mov    $0x1,%edi
  412d5d:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  412d61:	31 c0                	xor    %eax,%eax
  412d63:	ff d3                	callq  *%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  412d65:	49 b9 40 69 4c 9a 01 	movabs $0x19a4c6940,%r9
  412d6c:	00 00 00 
  412d6f:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
  412d76:	aa aa aa 
  412d79:	43 c7 84 3c 40 00 01 	movl   $0x0,0x10040(%r12,%r15,1)
  412d80:	00 00 00 00 00 
  412d85:	4b 8b 3c 39          	mov    (%r9,%r15,1),%rdi
  412d89:	4b 8b 44 39 08       	mov    0x8(%r9,%r15,1),%rax
    start.LB = 0;
  412d8e:	43 c7 84 3c 44 00 01 	movl   $0x0,0x10044(%r12,%r15,1)
  412d95:	00 00 00 00 00 
    start.id = 0;
  412d9a:	43 c7 84 3c 50 00 01 	movl   $0x0,0x10050(%r12,%r15,1)
  412da1:	00 00 00 00 00 
  412da6:	48 29 f8             	sub    %rdi,%rax
  412da9:	48 c1 f8 02          	sar    $0x2,%rax
  412dad:	48 0f af c2          	imul   %rdx,%rax
    for (size_t i = 0; i < g_initialStates.size(); ++i) {
  412db1:	48 85 c0             	test   %rax,%rax
  412db4:	0f 84 a4 01 00 00    	je     412f5e <_Z6searchm+0x32e>
  412dba:	48 b8 00 eb 4b 9a 01 	movabs $0x19a4beb00,%rax
  412dc1:	00 00 00 
			m_solution(solution) {
  412dc4:	49 bd 40 ea 4b 9a 01 	movabs $0x19a4bea40,%r13
  412dcb:	00 00 00 
  412dce:	4b 8d 2c 3c          	lea    (%r12,%r15,1),%rbp
  412dd2:	4d 8d 34 07          	lea    (%r15,%rax,1),%r14
  412dd6:	4b 8d 04 2f          	lea    (%r15,%r13,1),%rax
  412dda:	31 db                	xor    %ebx,%ebx
  412ddc:	4c 8d 85 40 7e 00 00 	lea    0x7e40(%rbp),%r8
  412de3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        bool success = astar_search(llenv, g_w, g_initialStates[i], start.solution[i]);
  412de8:	48 b8 e0 5d de ff ff 	movabs $0xffffffffffde5de0,%rax
  412def:	ff ff ff 
  412df2:	4d 89 f2             	mov    %r14,%r10
  412df5:	4c 01 f8             	add    %r15,%rax
  412df8:	49 89 ee             	mov    %rbp,%r14
  412dfb:	4c 89 c5             	mov    %r8,%rbp
  412dfe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  412e03:	eb 7e                	jmp    412e83 <_Z6searchm+0x253>
  412e05:	0f 1f 00             	nopl   (%rax)
      if (i < ROBOT_NUMS && g_solution[i].states_size > 1) {
  412e08:	49 83 ba 00 04 00 00 	cmpq   $0x1,0x400(%r10)
  412e0f:	01 
  412e10:	76 7b                	jbe    412e8d <_Z6searchm+0x25d>
        start.solution[i] = g_solution[i];
  412e12:	b9 c9 00 00 00       	mov    $0xc9,%ecx
  412e17:	4c 89 f7             	mov    %r14,%rdi
  412e1a:	4c 89 d6             	mov    %r10,%rsi
  412e1d:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  412e20:	0f b6 06             	movzbl (%rsi),%eax
  412e23:	88 07                	mov    %al,(%rdi)
      start.cost += start.solution[i].cost;
  412e25:	41 8b 86 10 06 00 00 	mov    0x610(%r14),%eax
  412e2c:	43 01 84 3c 40 00 01 	add    %eax,0x10040(%r12,%r15,1)
  412e33:	00 
  412e34:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
  412e3b:	aa aa aa 
      start.LB += start.solution[i].fmin;
  412e3e:	41 8b 86 14 06 00 00 	mov    0x614(%r14),%eax
  412e45:	4b 8b 3c 39          	mov    (%r9,%r15,1),%rdi
    for (size_t i = 0; i < g_initialStates.size(); ++i) {
  412e49:	48 83 c3 01          	add    $0x1,%rbx
      start.LB += start.solution[i].fmin;
  412e4d:	43 01 84 3c 44 00 01 	add    %eax,0x10044(%r12,%r15,1)
  412e54:	00 
  412e55:	4b 8b 44 39 08       	mov    0x8(%r9,%r15,1),%rax
  412e5a:	49 81 c6 50 06 00 00 	add    $0x650,%r14
  412e61:	49 81 c2 50 06 00 00 	add    $0x650,%r10
  412e68:	48 81 c5 80 06 00 00 	add    $0x680,%rbp
  412e6f:	48 29 f8             	sub    %rdi,%rax
  412e72:	48 c1 f8 02          	sar    $0x2,%rax
  412e76:	48 0f af c2          	imul   %rdx,%rax
    for (size_t i = 0; i < g_initialStates.size(); ++i) {
  412e7a:	48 39 c3             	cmp    %rax,%rbx
  412e7d:	0f 83 db 00 00 00    	jae    412f5e <_Z6searchm+0x32e>
      if (i < ROBOT_NUMS && g_solution[i].states_size > 1) {
  412e83:	48 83 fb 14          	cmp    $0x14,%rbx
  412e87:	0f 85 7b ff ff ff    	jne    412e08 <_Z6searchm+0x1d8>
  412e8d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
		m_agentIdx = agentIdx;
  412e92:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  412e97:	48 8d b5 58 02 00 00 	lea    0x258(%rbp),%rsi
		m_constraints = constraints;
  412e9e:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
		m_lastGoalConstraint = -1;
  412ea3:	c7 44 24 38 ff ff ff 	movl   $0xffffffff,0x38(%rsp)
  412eaa:	ff 
			m_solution(solution) {
  412eab:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  412eb0:	4b 8d 04 3c          	lea    (%r12,%r15,1),%rax
  412eb4:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  412eb9:	4b 8b 04 2f          	mov    (%r15,%r13,1),%rax
  412ebd:	4c 8d 1c d8          	lea    (%rax,%rbx,8),%r11
		m_lastGoalConstraint = -1;
  412ec1:	48 89 e8             	mov    %rbp,%rax
  412ec4:	41 8b 0b             	mov    (%r11),%ecx
  412ec7:	eb 10                	jmp    412ed9 <_Z6searchm+0x2a9>
  412ec9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  412ed0:	48 83 c0 0c          	add    $0xc,%rax
		for (const auto& vc : constraints->vertexConstraints) {
  412ed4:	48 39 c6             	cmp    %rax,%rsi
  412ed7:	74 26                	je     412eff <_Z6searchm+0x2cf>
			if (vc.x == m_env.m_goals[m_agentIdx].x && vc.y == m_env.m_goals[m_agentIdx].y) {
  412ed9:	39 48 04             	cmp    %ecx,0x4(%rax)
  412edc:	75 f2                	jne    412ed0 <_Z6searchm+0x2a0>
  412ede:	41 8b 53 04          	mov    0x4(%r11),%edx
  412ee2:	39 50 08             	cmp    %edx,0x8(%rax)
  412ee5:	75 e9                	jne    412ed0 <_Z6searchm+0x2a0>
				m_lastGoalConstraint = std::max(m_lastGoalConstraint, vc.time);
  412ee7:	8b 10                	mov    (%rax),%edx
  412ee9:	39 54 24 38          	cmp    %edx,0x38(%rsp)
  412eed:	0f 4d 54 24 38       	cmovge 0x38(%rsp),%edx
  412ef2:	48 83 c0 0c          	add    $0xc,%rax
		for (const auto& vc : constraints->vertexConstraints) {
  412ef6:	48 39 c6             	cmp    %rax,%rsi
				m_lastGoalConstraint = std::max(m_lastGoalConstraint, vc.time);
  412ef9:	89 54 24 38          	mov    %edx,0x38(%rsp)
		for (const auto& vc : constraints->vertexConstraints) {
  412efd:	75 da                	jne    412ed9 <_Z6searchm+0x2a9>
      { return *(this->_M_impl._M_start + __n); }
  412eff:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
  412f03:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  412f08:	4c 89 14 24          	mov    %r10,(%rsp)
        bool success = astar_search(llenv, g_w, g_initialStates[i], start.solution[i]);
  412f0c:	4c 89 f2             	mov    %r14,%rdx
  412f0f:	48 8d 34 87          	lea    (%rdi,%rax,4),%rsi
  412f13:	48 b8 00 ea 4b 9a 01 	movabs $0x19a4bea00,%rax
  412f1a:	00 00 00 
  412f1d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  412f22:	f3 41 0f 10 04 07    	movss  (%r15,%rax,1),%xmm0
  412f28:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  412f2d:	ff d0                	callq  *%rax
        if (!success) {
  412f2f:	84 c0                	test   %al,%al
  412f31:	4c 8b 14 24          	mov    (%rsp),%r10
  412f35:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  412f3a:	0f 85 e5 fe ff ff    	jne    412e25 <_Z6searchm+0x1f5>
					g_isNoConflict = false;
  412f40:	48 b8 c0 ea 4b 9a 01 	movabs $0x19a4beac0,%rax
  412f47:	00 00 00 
  412f4a:	41 c6 04 07 00       	movb   $0x0,(%r15,%rax,1)
	}
  412f4f:	48 83 c4 58          	add    $0x58,%rsp
  412f53:	5b                   	pop    %rbx
  412f54:	5d                   	pop    %rbp
  412f55:	41 5c                	pop    %r12
  412f57:	41 5d                	pop    %r13
  412f59:	41 5e                	pop    %r14
  412f5b:	41 5f                	pop    %r15
  412f5d:	c3                   	retq   
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  412f5e:	48 b8 40 7d df ff ff 	movabs $0xffffffffffdf7d40,%rax
  412f65:	ff ff ff 
  412f68:	b9 05 04 00 00       	mov    $0x405,%ecx
  412f6d:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  412f71:	48 87 c9             	xchg   %rcx,%rcx
  412f74:	48 b8 6e 7e df ff ff 	movabs $0xffffffffffdf7e6e,%rax
  412f7b:	ff ff ff 
  412f7e:	49 8d 3c 07          	lea    (%r15,%rax,1),%rdi
  412f82:	48 87 c9             	xchg   %rcx,%rcx
    start.focalHeuristic = focalHeuristic(start.solution);
  412f85:	48 b8 e0 33 de ff ff 	movabs $0xffffffffffde33e0,%rax
  412f8c:	ff ff ff 
  412f8f:	4b 8d 3c 3c          	lea    (%r12,%r15,1),%rdi
  412f93:	4c 01 f8             	add    %r15,%rax
  412f96:	ff d0                	callq  *%rax
  412f98:	66 0f ef c9          	pxor   %xmm1,%xmm1
  412f9c:	43 89 84 3c 48 00 01 	mov    %eax,0x10048(%r12,%r15,1)
  412fa3:	00 
  412fa4:	48 b8 e0 92 df ff ff 	movabs $0xffffffffffdf92e0,%rax
  412fab:	ff ff ff 
  412fae:	f2 41 0f 10 04 07    	movsd  (%r15,%rax,1),%xmm0
  412fb4:	48 b8 00 e7 dd ff ff 	movabs $0xffffffffffdde700,%rax
  412fbb:	ff ff ff 
  412fbe:	f2 43 0f 2a 8c 3c 5c 	cvtsi2sdl 0x1005c(%r12,%r15,1),%xmm1
  412fc5:	00 01 00 
  412fc8:	4c 01 f8             	add    %r15,%rax
  412fcb:	ff d0                	callq  *%rax
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  412fcd:	43 8b 84 3c 54 00 01 	mov    0x10054(%r12,%r15,1),%eax
  412fd4:	00 
  412fd5:	66 0f ef c9          	pxor   %xmm1,%xmm1
		global_nodelist[si].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  412fd9:	bf 80 00 01 00       	mov    $0x10080,%edi
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  412fde:	01 c0                	add    %eax,%eax
  412fe0:	f2 0f 2a c8          	cvtsi2sd %eax,%xmm1
  412fe4:	48 b8 e8 92 df ff ff 	movabs $0xffffffffffdf92e8,%rax
  412feb:	ff ff ff 
  412fee:	f2 42 0f 5c 04 38    	subsd  (%rax,%r15,1),%xmm0
		global_nodelist[si].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  412ff4:	48 b8 90 74 df ff ff 	movabs $0xffffffffffdf7490,%rax
  412ffb:	ff ff ff 
  412ffe:	4c 01 f8             	add    %r15,%rax
	return pow(2, n.generation) - 1 + n.parent_child_id * 2 + n.own_child_id;
  413001:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  413005:	66 0f ef c9          	pxor   %xmm1,%xmm1
  413009:	f2 43 0f 2a 8c 3c 58 	cvtsi2sdl 0x10058(%r12,%r15,1),%xmm1
  413010:	00 01 00 
  413013:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  413017:	f2 0f 2c d8          	cvttsd2si %xmm0,%ebx
		global_nodelist[si].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  41301b:	ff d0                	callq  *%rax
  41301d:	48 ba 80 dc 48 9a 01 	movabs $0x19a48dc80,%rdx
  413024:	00 00 00 
		*global_nodelist[si].addr = start;
  413027:	48 89 c7             	mov    %rax,%rdi
  41302a:	4b 8d 34 3c          	lea    (%r12,%r15,1),%rsi
		global_nodelist[si].addr = (struct HighLevelNode*)malloc(sizeof(struct HighLevelNode));
  41302e:	4c 01 fa             	add    %r15,%rdx
  413031:	48 63 db             	movslq %ebx,%rbx
  413034:	48 89 d9             	mov    %rbx,%rcx
  413037:	48 c1 e1 06          	shl    $0x6,%rcx
  41303b:	48 89 04 11          	mov    %rax,(%rcx,%rdx,1)
		*global_nodelist[si].addr = start;
  41303f:	48 b8 b0 e6 dd ff ff 	movabs $0xffffffffffdde6b0,%rax
  413046:	ff ff ff 
  413049:	ba 80 00 01 00       	mov    $0x10080,%edx
  41304e:	4c 01 f8             	add    %r15,%rax
  413051:	ff d0                	callq  *%rax
            :);
  413053:	48 b8 d0 b7 de ff ff 	movabs $0xffffffffffdeb7d0,%rax
  41305a:	ff ff ff 
  41305d:	31 ff                	xor    %edi,%edi
  41305f:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  413064:	49 8d 14 07          	lea    (%r15,%rax,1),%rdx
  413068:	48 89 de             	mov    %rbx,%rsi
  41306b:	48 87 c9             	xchg   %rcx,%rcx
	}
  41306e:	48 83 c4 58          	add    $0x58,%rsp
  413072:	5b                   	pop    %rbx
  413073:	5d                   	pop    %rbp
  413074:	41 5c                	pop    %r12
  413076:	41 5d                	pop    %r13
  413078:	41 5e                	pop    %r14
  41307a:	41 5f                	pop    %r15
  41307c:	c3                   	retq   
  41307d:	0f 1f 00             	nopl   (%rax)

0000000000413080 <_ZNKSt5ctypeIcE8do_widenEc>:
       *  @param __c  The char to convert.
       *  @return  The converted character.
      */
      virtual char_type
      do_widen(char __c) const
      { return __c; }
  413080:	89 f0                	mov    %esi,%eax
  413082:	c3                   	retq   
  413083:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41308a:	00 00 00 
  41308d:	0f 1f 00             	nopl   (%rax)

0000000000413090 <_ZNK5boost16bad_lexical_cast4whatEv>:
        virtual const char *what() const BOOST_NOEXCEPT_OR_NOTHROW {
  413090:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413090 <_ZNK5boost16bad_lexical_cast4whatEv>
  413097:	49 bb 70 7f 21 00 00 	movabs $0x217f70,%r11
  41309e:	00 00 00 
                   "source type value could not be interpreted as target";
  4130a1:	48 ba 28 79 df ff ff 	movabs $0xffffffffffdf7928,%rdx
  4130a8:	ff ff ff 
  4130ab:	4c 01 d8             	add    %r11,%rax
  4130ae:	48 01 d0             	add    %rdx,%rax
        }
  4130b1:	c3                   	retq   
  4130b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4130b9:	00 00 00 
  4130bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004130c0 <_ZN5boost6detail15sp_counted_base7destroyEv>:
        delete this;
  4130c0:	48 8b 07             	mov    (%rdi),%rax
  4130c3:	ff 60 08             	jmpq   *0x8(%rax)
  4130c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4130cd:	00 00 00 

00000000004130d0 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE6setbufEPcl>:
	_M_in_beg = __gbeg;
  4130d0:	48 89 77 08          	mov    %rsi,0x8(%rdi)
	_M_in_cur = __gnext;
  4130d4:	48 89 77 10          	mov    %rsi,0x10(%rdi)

template<class charT, class BufferT>
BufferT*
basic_pointerbuf<charT, BufferT>::setbuf(char_type* s, streamsize n)
{
   this->setg(s, s, s + n);
  4130d8:	48 01 d6             	add    %rdx,%rsi
basic_pointerbuf<charT, BufferT>::setbuf(char_type* s, streamsize n)
  4130db:	48 89 f8             	mov    %rdi,%rax
   this->setg(s, s, s + n);
  4130de:	48 89 77 18          	mov    %rsi,0x18(%rdi)
   return this;
}
  4130e2:	c3                   	retq   
  4130e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4130ea:	00 00 00 
  4130ed:	0f 1f 00             	nopl   (%rax)

00000000004130f0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEED1Ev>:

template<class D> D * get_local_deleter( local_sp_deleter<D> * p );

//

template<class X> class sp_counted_impl_p: public sp_counted_base
  4130f0:	f3 c3                	repz retq 
  4130f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4130f9:	00 00 00 
  4130fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413100 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEED1Ev>:
  413100:	f3 c3                	repz retq 
  413102:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413109:	00 00 00 
  41310c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413110 <_ZN5boost3any6holderIfED1Ev>:
        class holder : public placeholder
  413110:	f3 c3                	repz retq 
  413112:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413119:	00 00 00 
  41311c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413120 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode>:
typename basic_pointerbuf<charT, BufferT>::pos_type
basic_pointerbuf<charT, BufferT>::seekoff(off_type off, ::std::ios_base::seekdir way, ::std::ios_base::openmode which)
{
   typedef typename boost::int_t<sizeof(way) * CHAR_BIT>::least cast_type;

   if(which & ::std::ios_base::out)
  413120:	83 e1 10             	and    $0x10,%ecx
  413123:	75 43                	jne    413168 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  413125:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
      return pos_type(off_type(-1));
   std::ptrdiff_t size = this->egptr() - this->eback();
  413129:	4c 8b 47 18          	mov    0x18(%rdi),%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  41312d:	48 8b 47 10          	mov    0x10(%rdi),%rax
   std::ptrdiff_t size = this->egptr() - this->eback();
  413131:	49 29 c8             	sub    %rcx,%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  413134:	48 29 c8             	sub    %rcx,%rax
   charT* g = this->eback();
   switch(static_cast<cast_type>(way))
  413137:	83 fa 01             	cmp    $0x1,%edx
  41313a:	74 3c                	je     413178 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x58>
  41313c:	72 52                	jb     413190 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x70>
  41313e:	83 fa 02             	cmp    $0x2,%edx
  413141:	75 1d                	jne    413160 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
         return pos_type(off_type(-1));
      else
         this->setg(g, g + off, g + size);
      break;
   case ::std::ios_base::end:
      if((off < 0) || (off > size))
  413143:	48 89 f0             	mov    %rsi,%rax
  413146:	48 c1 e8 3f          	shr    $0x3f,%rax
  41314a:	84 c0                	test   %al,%al
  41314c:	75 1a                	jne    413168 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41314e:	49 39 f0             	cmp    %rsi,%r8
  413151:	7c 15                	jl     413168 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         return pos_type(off_type(-1));
      else
         this->setg(g, g + size - off, g + size);
  413153:	4c 89 c0             	mov    %r8,%rax
  413156:	48 29 f0             	sub    %rsi,%rax
  413159:	48 01 c1             	add    %rax,%rcx
  41315c:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
   }
#ifdef BOOST_MSVC
#pragma warning(push)
#pragma warning(disable:4244)
#endif
   return static_cast<pos_type>(this->gptr() - this->eback());
  413160:	31 d2                	xor    %edx,%edx
#ifdef BOOST_MSVC
#pragma warning(pop)
#endif
}
  413162:	c3                   	retq   
  413163:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return pos_type(off_type(-1));
  413168:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  41316f:	31 d2                	xor    %edx,%edx
  413171:	c3                   	retq   
  413172:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if((newpos < 0) || (newpos > size))
  413178:	48 01 f0             	add    %rsi,%rax
  41317b:	78 eb                	js     413168 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41317d:	49 39 c0             	cmp    %rax,%r8
  413180:	7c e6                	jl     413168 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + newpos, g + size);
  413182:	48 01 c1             	add    %rax,%rcx
  413185:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  413189:	eb d5                	jmp    413160 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  41318b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      if((off < 0) || (off > size))
  413190:	48 89 f0             	mov    %rsi,%rax
  413193:	48 c1 e8 3f          	shr    $0x3f,%rax
  413197:	84 c0                	test   %al,%al
  413199:	75 cd                	jne    413168 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41319b:	49 39 f0             	cmp    %rsi,%r8
  41319e:	7c c8                	jl     413168 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + off, g + size);
  4131a0:	48 01 f1             	add    %rsi,%rcx
  4131a3:	48 89 f0             	mov    %rsi,%rax
  4131a6:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  4131aa:	eb b4                	jmp    413160 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  4131ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004131b0 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode>:

template<class charT, class BufferT>
typename basic_pointerbuf<charT, BufferT>::pos_type
basic_pointerbuf<charT, BufferT>::seekpos(pos_type sp, ::std::ios_base::openmode which)
{
   if(which & ::std::ios_base::out)
  4131b0:	83 e1 10             	and    $0x10,%ecx
  4131b3:	75 17                	jne    4131cc <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
  4131b5:	48 8b 57 08          	mov    0x8(%rdi),%rdx
      return pos_type(off_type(-1));
   off_type size = static_cast<off_type>(this->egptr() - this->eback());
  4131b9:	48 8b 47 18          	mov    0x18(%rdi),%rax
  4131bd:	48 29 d0             	sub    %rdx,%rax
   charT* g = this->eback();
   if(off_type(sp) <= size)
  4131c0:	48 39 f0             	cmp    %rsi,%rax
  4131c3:	7c 07                	jl     4131cc <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
   {
      this->setg(g, g + off_type(sp), g + size);
  4131c5:	48 01 f2             	add    %rsi,%rdx
  4131c8:	48 89 57 10          	mov    %rdx,0x10(%rdi)
   }
   return pos_type(off_type(-1));
}
  4131cc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  4131d3:	31 d2                	xor    %edx,%edx
  4131d5:	c3                   	retq   
  4131d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4131dd:	00 00 00 

00000000004131e0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE11get_deleterERKSt9type_info>:
    }

    virtual void * get_deleter( sp_typeinfo const & )
    {
        return 0;
    }
  4131e0:	31 c0                	xor    %eax,%eax
  4131e2:	c3                   	retq   
  4131e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4131ea:	00 00 00 
  4131ed:	0f 1f 00             	nopl   (%rax)

00000000004131f0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE17get_local_deleterERKSt9type_info>:

    virtual void * get_local_deleter( sp_typeinfo const & )
    {
        return 0;
    }
  4131f0:	31 c0                	xor    %eax,%eax
  4131f2:	c3                   	retq   
  4131f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4131fa:	00 00 00 
  4131fd:	0f 1f 00             	nopl   (%rax)

0000000000413200 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE19get_untyped_deleterEv>:

    virtual void * get_untyped_deleter()
    {
        return 0;
    }
  413200:	31 c0                	xor    %eax,%eax
  413202:	c3                   	retq   
  413203:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41320a:	00 00 00 
  41320d:	0f 1f 00             	nopl   (%rax)

0000000000413210 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE11get_deleterERKSt9type_info>:
    }
  413210:	31 c0                	xor    %eax,%eax
  413212:	c3                   	retq   
  413213:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41321a:	00 00 00 
  41321d:	0f 1f 00             	nopl   (%rax)

0000000000413220 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE17get_local_deleterERKSt9type_info>:
    }
  413220:	31 c0                	xor    %eax,%eax
  413222:	c3                   	retq   
  413223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41322a:	00 00 00 
  41322d:	0f 1f 00             	nopl   (%rax)

0000000000413230 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE19get_untyped_deleterEv>:
    }
  413230:	31 c0                	xor    %eax,%eax
  413232:	c3                   	retq   
  413233:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41323a:	00 00 00 
  41323d:	0f 1f 00             	nopl   (%rax)

0000000000413240 <_ZNK5boost3any6holderIfE4typeEv>:
            {
            }
#endif
        public: // queries

            virtual const boost::typeindex::type_info& type() const BOOST_NOEXCEPT
  413240:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413240 <_ZNK5boost3any6holderIfE4typeEv>
  413247:	49 bb c0 7d 21 00 00 	movabs $0x217dc0,%r11
  41324e:	00 00 00 
            {
                return boost::typeindex::type_id<ValueType>().type_info();
  413251:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  413258:	ff ff ff 
  41325b:	4c 01 d8             	add    %r11,%rax
  41325e:	48 8b 04 10          	mov    (%rax,%rdx,1),%rax
            }
  413262:	c3                   	retq   
  413263:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41326a:	00 00 00 
  41326d:	0f 1f 00             	nopl   (%rax)

0000000000413270 <_ZNK5boost15program_options11typed_valueIfcE10min_tokensEv>:

        std::string name() const;

        bool is_composing() const { return m_composing; }

        unsigned min_tokens() const
  413270:	31 c0                	xor    %eax,%eax
        {
            if (m_zero_tokens || !m_implicit_value.empty()) {
  413272:	80 bf 8b 00 00 00 00 	cmpb   $0x0,0x8b(%rdi)
  413279:	75 08                	jne    413283 <_ZNK5boost15program_options11typed_valueIfcE10min_tokensEv+0x13>
  41327b:	48 83 7f 60 00       	cmpq   $0x0,0x60(%rdi)
  413280:	0f 94 c0             	sete   %al
  413283:	0f b6 c0             	movzbl %al,%eax
                return 0;
            } else {
                return 1;
            }
        }
  413286:	c3                   	retq   
  413287:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41328e:	00 00 

0000000000413290 <_ZNK5boost15program_options11typed_valueIfcE10max_tokensEv>:

        unsigned max_tokens() const {
            if (m_multitoken) {
  413290:	80 bf 8a 00 00 00 00 	cmpb   $0x0,0x8a(%rdi)
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  413297:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
            if (m_multitoken) {
  41329c:	74 02                	je     4132a0 <_ZNK5boost15program_options11typed_valueIfcE10max_tokensEv+0x10>
            } else if (m_zero_tokens) {
                return 0;
            } else {
                return 1;
            }
        }
  41329e:	f3 c3                	repz retq 
            } else if (m_zero_tokens) {
  4132a0:	0f b6 87 8b 00 00 00 	movzbl 0x8b(%rdi),%eax
  4132a7:	83 f0 01             	xor    $0x1,%eax
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  4132aa:	0f b6 c0             	movzbl %al,%eax
        }
  4132ad:	c3                   	retq   
  4132ae:	66 90                	xchg   %ax,%ax

00000000004132b0 <_ZNK5boost15program_options11typed_valueIfcE12is_composingEv>:
        bool is_composing() const { return m_composing; }
  4132b0:	0f b6 87 88 00 00 00 	movzbl 0x88(%rdi),%eax
  4132b7:	c3                   	retq   
  4132b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4132bf:	00 

00000000004132c0 <_ZNK5boost15program_options11typed_valueIfcE11is_requiredEv>:

        bool is_required() const { return m_required; }
  4132c0:	0f b6 87 8c 00 00 00 	movzbl 0x8c(%rdi),%eax
  4132c7:	c3                   	retq   
  4132c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4132cf:	00 

00000000004132d0 <_ZNK5boost15program_options11typed_valueIfcE10value_typeEv>:
        void notify(const boost::any& value_store) const;

    public: // typed_value_base overrides
        
#ifndef BOOST_NO_RTTI
        const std::type_info& value_type() const
  4132d0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4132d0 <_ZNK5boost15program_options11typed_valueIfcE10value_typeEv>
  4132d7:	49 bb 30 7d 21 00 00 	movabs $0x217d30,%r11
  4132de:	00 00 00 
        {
            return typeid(T);
  4132e1:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  4132e8:	ff ff ff 
  4132eb:	4c 01 d8             	add    %r11,%rax
  4132ee:	48 8b 04 10          	mov    (%rax,%rdx,1),%rax
        }
  4132f2:	c3                   	retq   
  4132f3:	0f 1f 00             	nopl   (%rax)
  4132f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4132fd:	00 00 00 

0000000000413300 <_ZThn8_NK5boost15program_options11typed_valueIfcE10value_typeEv>:
        const std::type_info& value_type() const
  413300:	48 83 ef 08          	sub    $0x8,%rdi
  413304:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413304 <_ZThn8_NK5boost15program_options11typed_valueIfcE10value_typeEv+0x4>
  41330b:	49 ba fc 7c 21 00 00 	movabs $0x217cfc,%r10
  413312:	00 00 00 
  413315:	4d 01 d3             	add    %r10,%r11
  413318:	49 ba d0 82 de ff ff 	movabs $0xffffffffffde82d0,%r10
  41331f:	ff ff ff 
  413322:	4d 01 da             	add    %r11,%r10
  413325:	41 ff e2             	jmpq   *%r10
  413328:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41332f:	00 

0000000000413330 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10min_tokensEv>:
        unsigned min_tokens() const
  413330:	31 c0                	xor    %eax,%eax
            if (m_zero_tokens || !m_implicit_value.empty()) {
  413332:	80 bf 8b 00 00 00 00 	cmpb   $0x0,0x8b(%rdi)
  413339:	75 08                	jne    413343 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10min_tokensEv+0x13>
  41333b:	48 83 7f 60 00       	cmpq   $0x0,0x60(%rdi)
  413340:	0f 94 c0             	sete   %al
  413343:	0f b6 c0             	movzbl %al,%eax
        }
  413346:	c3                   	retq   
  413347:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41334e:	00 00 

0000000000413350 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10max_tokensEv>:
            if (m_multitoken) {
  413350:	80 bf 8a 00 00 00 00 	cmpb   $0x0,0x8a(%rdi)
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  413357:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
            if (m_multitoken) {
  41335c:	74 02                	je     413360 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10max_tokensEv+0x10>
        }
  41335e:	f3 c3                	repz retq 
            } else if (m_zero_tokens) {
  413360:	0f b6 87 8b 00 00 00 	movzbl 0x8b(%rdi),%eax
  413367:	83 f0 01             	xor    $0x1,%eax
                return std::numeric_limits<unsigned>::max BOOST_PREVENT_MACRO_SUBSTITUTION();
  41336a:	0f b6 c0             	movzbl %al,%eax
        }
  41336d:	c3                   	retq   
  41336e:	66 90                	xchg   %ax,%ax

0000000000413370 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE12is_composingEv>:
        bool is_composing() const { return m_composing; }
  413370:	0f b6 87 88 00 00 00 	movzbl 0x88(%rdi),%eax
  413377:	c3                   	retq   
  413378:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41337f:	00 

0000000000413380 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE11is_requiredEv>:
        bool is_required() const { return m_required; }
  413380:	0f b6 87 8c 00 00 00 	movzbl 0x8c(%rdi),%eax
  413387:	c3                   	retq   
  413388:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41338f:	00 

0000000000413390 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv>:
        const std::type_info& value_type() const
  413390:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413390 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv>
  413397:	49 bb 70 7c 21 00 00 	movabs $0x217c70,%r11
  41339e:	00 00 00 
            return typeid(T);
  4133a1:	48 ba 60 f8 ff ff ff 	movabs $0xfffffffffffff860,%rdx
  4133a8:	ff ff ff 
  4133ab:	4c 01 d8             	add    %r11,%rax
  4133ae:	48 01 d0             	add    %rdx,%rax
        }
  4133b1:	c3                   	retq   
  4133b2:	0f 1f 40 00          	nopl   0x0(%rax)
  4133b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4133bd:	00 00 00 

00000000004133c0 <_ZThn8_NK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv>:
        const std::type_info& value_type() const
  4133c0:	48 83 ef 08          	sub    $0x8,%rdi
  4133c4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4133c4 <_ZThn8_NK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE10value_typeEv+0x4>
  4133cb:	49 ba 3c 7c 21 00 00 	movabs $0x217c3c,%r10
  4133d2:	00 00 00 
  4133d5:	4d 01 d3             	add    %r10,%r11
  4133d8:	49 ba 90 83 de ff ff 	movabs $0xffffffffffde8390,%r10
  4133df:	ff ff ff 
  4133e2:	4d 01 da             	add    %r11,%r10
  4133e5:	41 ff e2             	jmpq   *%r10
  4133e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4133ef:	00 

00000000004133f0 <_ZN5boost9function1IvRKfE5dummy7nonnullEv>:
    // Sun C++ 5.3 can't handle the safe_bool idiom, so don't use it
    operator bool () const { return !this->empty(); }
#else
  private:
    struct dummy {
      void nonnull() {}
  4133f0:	f3 c3                	repz retq 
  4133f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4133f9:	00 00 00 
  4133fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413400 <_ZN5boost9function1IvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5dummy7nonnullEv>:
  413400:	f3 c3                	repz retq 
  413402:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413409:	00 00 00 
  41340c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413410 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE6setbufEPcl>:
	_M_in_beg = __gbeg;
  413410:	48 89 77 08          	mov    %rsi,0x8(%rdi)
	_M_in_cur = __gnext;
  413414:	48 89 77 10          	mov    %rsi,0x10(%rdi)
   this->setg(s, s, s + n);
  413418:	48 01 d6             	add    %rdx,%rsi
basic_pointerbuf<charT, BufferT>::setbuf(char_type* s, streamsize n)
  41341b:	48 89 f8             	mov    %rdi,%rax
   this->setg(s, s, s + n);
  41341e:	48 89 77 18          	mov    %rsi,0x18(%rdi)
}
  413422:	c3                   	retq   
  413423:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41342a:	00 00 00 
  41342d:	0f 1f 00             	nopl   (%rax)

0000000000413430 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode>:
   if(which & ::std::ios_base::out)
  413430:	83 e1 10             	and    $0x10,%ecx
  413433:	75 43                	jne    413478 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  413435:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
   std::ptrdiff_t size = this->egptr() - this->eback();
  413439:	4c 8b 47 18          	mov    0x18(%rdi),%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  41343d:	48 8b 47 10          	mov    0x10(%rdi),%rax
   std::ptrdiff_t size = this->egptr() - this->eback();
  413441:	49 29 c8             	sub    %rcx,%r8
   std::ptrdiff_t pos = this->gptr() - this->eback();
  413444:	48 29 c8             	sub    %rcx,%rax
   switch(static_cast<cast_type>(way))
  413447:	83 fa 01             	cmp    $0x1,%edx
  41344a:	74 3c                	je     413488 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x58>
  41344c:	72 52                	jb     4134a0 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x70>
  41344e:	83 fa 02             	cmp    $0x2,%edx
  413451:	75 1d                	jne    413470 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
      if((off < 0) || (off > size))
  413453:	48 89 f0             	mov    %rsi,%rax
  413456:	48 c1 e8 3f          	shr    $0x3f,%rax
  41345a:	84 c0                	test   %al,%al
  41345c:	75 1a                	jne    413478 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41345e:	49 39 f0             	cmp    %rsi,%r8
  413461:	7c 15                	jl     413478 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + size - off, g + size);
  413463:	4c 89 c0             	mov    %r8,%rax
  413466:	48 29 f0             	sub    %rsi,%rax
  413469:	48 01 c1             	add    %rax,%rcx
  41346c:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
   return static_cast<pos_type>(this->gptr() - this->eback());
  413470:	31 d2                	xor    %edx,%edx
}
  413472:	c3                   	retq   
  413473:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      return pos_type(off_type(-1));
  413478:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  41347f:	31 d2                	xor    %edx,%edx
  413481:	c3                   	retq   
  413482:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      if((newpos < 0) || (newpos > size))
  413488:	48 01 f0             	add    %rsi,%rax
  41348b:	78 eb                	js     413478 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  41348d:	49 39 c0             	cmp    %rax,%r8
  413490:	7c e6                	jl     413478 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + newpos, g + size);
  413492:	48 01 c1             	add    %rax,%rcx
  413495:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  413499:	eb d5                	jmp    413470 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  41349b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      if((off < 0) || (off > size))
  4134a0:	48 89 f0             	mov    %rsi,%rax
  4134a3:	48 c1 e8 3f          	shr    $0x3f,%rax
  4134a7:	84 c0                	test   %al,%al
  4134a9:	75 cd                	jne    413478 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
  4134ab:	49 39 f0             	cmp    %rsi,%r8
  4134ae:	7c c8                	jl     413478 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x48>
         this->setg(g, g + off, g + size);
  4134b0:	48 01 f1             	add    %rsi,%rcx
  4134b3:	48 89 f0             	mov    %rsi,%rax
  4134b6:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  4134ba:	eb b4                	jmp    413470 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode+0x40>
  4134bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004134c0 <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode>:
   if(which & ::std::ios_base::out)
  4134c0:	83 e1 10             	and    $0x10,%ecx
  4134c3:	75 17                	jne    4134dc <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
  4134c5:	48 8b 57 08          	mov    0x8(%rdi),%rdx
   off_type size = static_cast<off_type>(this->egptr() - this->eback());
  4134c9:	48 8b 47 18          	mov    0x18(%rdi),%rax
  4134cd:	48 29 d0             	sub    %rdx,%rax
   if(off_type(sp) <= size)
  4134d0:	48 39 f0             	cmp    %rsi,%rax
  4134d3:	7c 07                	jl     4134dc <_ZN5boost6detail16basic_pointerbufIcSt15basic_streambufIcSt11char_traitsIcEEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode+0x1c>
      this->setg(g, g + off_type(sp), g + size);
  4134d5:	48 01 f2             	add    %rsi,%rdx
  4134d8:	48 89 57 10          	mov    %rdx,0x10(%rdi)
}
  4134dc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  4134e3:	31 d2                	xor    %edx,%edx
  4134e5:	c3                   	retq   
  4134e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4134ed:	00 00 00 

00000000004134f0 <_ZNK5boost3any6holderIfE5cloneEv>:

            virtual placeholder * clone() const
  4134f0:	41 57                	push   %r15
  4134f2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 4134f0 <_ZNK5boost3any6holderIfE5cloneEv>
  4134f9:	53                   	push   %rbx
  4134fa:	49 bb 10 7b 21 00 00 	movabs $0x217b10,%r11
  413501:	00 00 00 
            {
                return new holder(held);
  413504:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41350b:	ff ff ff 
            virtual placeholder * clone() const
  41350e:	48 89 fb             	mov    %rdi,%rbx
  413511:	4d 01 df             	add    %r11,%r15
  413514:	48 83 ec 08          	sub    $0x8,%rsp
                return new holder(held);
  413518:	bf 10 00 00 00       	mov    $0x10,%edi
  41351d:	4c 01 f8             	add    %r15,%rax
  413520:	ff d0                	callq  *%rax
              : held(value)
  413522:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  413529:	ff ff ff 
  41352c:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
  413531:	4c 01 fa             	add    %r15,%rdx
  413534:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  413539:	48 89 10             	mov    %rdx,(%rax)
            }
  41353c:	48 83 c4 08          	add    $0x8,%rsp
  413540:	5b                   	pop    %rbx
  413541:	41 5f                	pop    %r15
  413543:	c3                   	retq   
  413544:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41354b:	00 00 00 
  41354e:	66 90                	xchg   %ax,%ax

0000000000413550 <_ZNSt6vectorI5StateSaIS0_EED1Ev>:
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  413550:	48 8b 3f             	mov    (%rdi),%rdi
  413553:	48 8d 05 f6 ff ff ff 	lea    -0xa(%rip),%rax        # 413550 <_ZNSt6vectorI5StateSaIS0_EED1Ev>
  41355a:	49 bb b0 7a 21 00 00 	movabs $0x217ab0,%r11
  413561:	00 00 00 
  413564:	4c 01 d8             	add    %r11,%rax
	if (__p)
  413567:	48 85 ff             	test   %rdi,%rdi
  41356a:	74 14                	je     413580 <_ZNSt6vectorI5StateSaIS0_EED1Ev+0x30>
      ~vector() _GLIBCXX_NOEXCEPT
  41356c:	41 57                	push   %r15
  41356e:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  413575:	ff ff ff 
		      _M_get_Tp_allocator()); }
  413578:	41 5f                	pop    %r15
  41357a:	48 01 c2             	add    %rax,%rdx
  41357d:	ff e2                	jmpq   *%rdx
  41357f:	90                   	nop
  413580:	f3 c3                	repz retq 
  413582:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413589:	00 00 00 
  41358c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413590 <_ZN5boost15program_options11typed_valueIfcED1Ev>:
    class typed_value : public value_semantic_codecvt_helper<charT>
  413590:	41 57                	push   %r15
  413592:	55                   	push   %rbp
  413593:	48 8d 2d f6 ff ff ff 	lea    -0xa(%rip),%rbp        # 413590 <_ZN5boost15program_options11typed_valueIfcED1Ev>
  41359a:	49 bb 70 7a 21 00 00 	movabs $0x217a70,%r11
  4135a1:	00 00 00 
  4135a4:	48 b8 90 fb ff ff ff 	movabs $0xfffffffffffffb90,%rax
  4135ab:	ff ff ff 
  4135ae:	53                   	push   %rbx
  4135af:	4c 01 dd             	add    %r11,%rbp
  4135b2:	48 89 fb             	mov    %rdi,%rbx
  4135b5:	48 01 e8             	add    %rbp,%rax
  4135b8:	48 89 07             	mov    %rax,(%rdi)
  4135bb:	48 83 c0 70          	add    $0x70,%rax
  4135bf:	48 89 47 08          	mov    %rax,0x8(%rdi)
      if (vtable) {
  4135c3:	48 8b 87 90 00 00 00 	mov    0x90(%rdi),%rax
  4135ca:	48 85 c0             	test   %rax,%rax
  4135cd:	74 04                	je     4135d3 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x43>
        if (!this->has_trivial_copy_and_destroy())
  4135cf:	a8 01                	test   $0x1,%al
  4135d1:	74 7d                	je     413650 <_ZN5boost15program_options11typed_valueIfcED1Ev+0xc0>
  4135d3:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4135d7:	48 8d 43 78          	lea    0x78(%rbx),%rax
	if (!_M_is_local())
  4135db:	48 39 c7             	cmp    %rax,%rdi
  4135de:	74 12                	je     4135f2 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x62>
  4135e0:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4135e7:	ff ff ff 
  4135ea:	49 89 ef             	mov    %rbp,%r15
  4135ed:	48 01 e8             	add    %rbp,%rax
  4135f0:	ff d0                	callq  *%rax
            delete content;
  4135f2:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  4135f6:	48 85 ff             	test   %rdi,%rdi
  4135f9:	74 06                	je     413601 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x71>
  4135fb:	48 8b 07             	mov    (%rdi),%rax
  4135fe:	ff 50 08             	callq  *0x8(%rax)
  413601:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413605:	48 8d 43 50          	lea    0x50(%rbx),%rax
	if (!_M_is_local())
  413609:	48 39 c7             	cmp    %rax,%rdi
  41360c:	74 12                	je     413620 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x90>
  41360e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  413615:	ff ff ff 
  413618:	49 89 ef             	mov    %rbp,%r15
  41361b:	48 01 e8             	add    %rbp,%rax
  41361e:	ff d0                	callq  *%rax
  413620:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
  413624:	48 85 ff             	test   %rdi,%rdi
  413627:	74 06                	je     41362f <_ZN5boost15program_options11typed_valueIfcED1Ev+0x9f>
  413629:	48 8b 07             	mov    (%rdi),%rax
  41362c:	ff 50 08             	callq  *0x8(%rax)
  41362f:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413633:	48 83 c3 28          	add    $0x28,%rbx
	if (!_M_is_local())
  413637:	48 39 df             	cmp    %rbx,%rdi
  41363a:	74 44                	je     413680 <_ZN5boost15program_options11typed_valueIfcED1Ev+0xf0>
  41363c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  413643:	ff ff ff 
  413646:	5b                   	pop    %rbx
  413647:	48 01 e8             	add    %rbp,%rax
  41364a:	5d                   	pop    %rbp
  41364b:	41 5f                	pop    %r15
  41364d:	ff e0                	jmpq   *%rax
  41364f:	90                   	nop
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  413650:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  413654:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  413657:	48 85 c0             	test   %rax,%rax
  41365a:	0f 84 73 ff ff ff    	je     4135d3 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x43>
          get_vtable()->clear(this->functor);
  413660:	48 8d bf 98 00 00 00 	lea    0x98(%rdi),%rdi
            base.manager(functor, functor, destroy_functor_tag);
  413667:	ba 02 00 00 00       	mov    $0x2,%edx
  41366c:	48 89 fe             	mov    %rdi,%rsi
  41366f:	ff d0                	callq  *%rax
  413671:	e9 5d ff ff ff       	jmpq   4135d3 <_ZN5boost15program_options11typed_valueIfcED1Ev+0x43>
  413676:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41367d:	00 00 00 
  413680:	5b                   	pop    %rbx
  413681:	5d                   	pop    %rbp
  413682:	41 5f                	pop    %r15
  413684:	c3                   	retq   
  413685:	90                   	nop
  413686:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41368d:	00 00 00 

0000000000413690 <_ZThn8_N5boost15program_options11typed_valueIfcED1Ev>:
  413690:	48 83 ef 08          	sub    $0x8,%rdi
  413694:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413694 <_ZThn8_N5boost15program_options11typed_valueIfcED1Ev+0x4>
  41369b:	49 ba 6c 79 21 00 00 	movabs $0x21796c,%r10
  4136a2:	00 00 00 
  4136a5:	4d 01 d3             	add    %r10,%r11
  4136a8:	49 ba 90 85 de ff ff 	movabs $0xffffffffffde8590,%r10
  4136af:	ff ff ff 
  4136b2:	4d 01 da             	add    %r11,%r10
  4136b5:	41 ff e2             	jmpq   *%r10
  4136b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4136bf:	00 

00000000004136c0 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev>:
  4136c0:	41 57                	push   %r15
  4136c2:	55                   	push   %rbp
  4136c3:	48 8d 2d f6 ff ff ff 	lea    -0xa(%rip),%rbp        # 4136c0 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev>
  4136ca:	49 bb 40 79 21 00 00 	movabs $0x217940,%r11
  4136d1:	00 00 00 
  4136d4:	48 b8 f8 fa ff ff ff 	movabs $0xfffffffffffffaf8,%rax
  4136db:	ff ff ff 
  4136de:	53                   	push   %rbx
  4136df:	4c 01 dd             	add    %r11,%rbp
  4136e2:	48 89 fb             	mov    %rdi,%rbx
  4136e5:	48 01 e8             	add    %rbp,%rax
  4136e8:	48 89 07             	mov    %rax,(%rdi)
  4136eb:	48 83 c0 70          	add    $0x70,%rax
  4136ef:	48 89 47 08          	mov    %rax,0x8(%rdi)
      if (vtable) {
  4136f3:	48 8b 87 90 00 00 00 	mov    0x90(%rdi),%rax
  4136fa:	48 85 c0             	test   %rax,%rax
  4136fd:	74 04                	je     413703 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x43>
        if (!this->has_trivial_copy_and_destroy())
  4136ff:	a8 01                	test   $0x1,%al
  413701:	74 7d                	je     413780 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0xc0>
  413703:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413707:	48 8d 43 78          	lea    0x78(%rbx),%rax
	if (!_M_is_local())
  41370b:	48 39 c7             	cmp    %rax,%rdi
  41370e:	74 12                	je     413722 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x62>
  413710:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  413717:	ff ff ff 
  41371a:	49 89 ef             	mov    %rbp,%r15
  41371d:	48 01 e8             	add    %rbp,%rax
  413720:	ff d0                	callq  *%rax
  413722:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  413726:	48 85 ff             	test   %rdi,%rdi
  413729:	74 06                	je     413731 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x71>
  41372b:	48 8b 07             	mov    (%rdi),%rax
  41372e:	ff 50 08             	callq  *0x8(%rax)
  413731:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413735:	48 8d 43 50          	lea    0x50(%rbx),%rax
	if (!_M_is_local())
  413739:	48 39 c7             	cmp    %rax,%rdi
  41373c:	74 12                	je     413750 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x90>
  41373e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  413745:	ff ff ff 
  413748:	49 89 ef             	mov    %rbp,%r15
  41374b:	48 01 e8             	add    %rbp,%rax
  41374e:	ff d0                	callq  *%rax
  413750:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
  413754:	48 85 ff             	test   %rdi,%rdi
  413757:	74 06                	je     41375f <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x9f>
  413759:	48 8b 07             	mov    (%rdi),%rax
  41375c:	ff 50 08             	callq  *0x8(%rax)
  41375f:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413763:	48 83 c3 28          	add    $0x28,%rbx
	if (!_M_is_local())
  413767:	48 39 df             	cmp    %rbx,%rdi
  41376a:	74 44                	je     4137b0 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0xf0>
  41376c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  413773:	ff ff ff 
  413776:	5b                   	pop    %rbx
  413777:	48 01 e8             	add    %rbp,%rax
  41377a:	5d                   	pop    %rbp
  41377b:	41 5f                	pop    %r15
  41377d:	ff e0                	jmpq   *%rax
  41377f:	90                   	nop
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  413780:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  413784:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  413787:	48 85 c0             	test   %rax,%rax
  41378a:	0f 84 73 ff ff ff    	je     413703 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x43>
          get_vtable()->clear(this->functor);
  413790:	48 8d bf 98 00 00 00 	lea    0x98(%rdi),%rdi
            base.manager(functor, functor, destroy_functor_tag);
  413797:	ba 02 00 00 00       	mov    $0x2,%edx
  41379c:	48 89 fe             	mov    %rdi,%rsi
  41379f:	ff d0                	callq  *%rax
  4137a1:	e9 5d ff ff ff       	jmpq   413703 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x43>
  4137a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4137ad:	00 00 00 
  4137b0:	5b                   	pop    %rbx
  4137b1:	5d                   	pop    %rbp
  4137b2:	41 5f                	pop    %r15
  4137b4:	c3                   	retq   
  4137b5:	90                   	nop
  4137b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4137bd:	00 00 00 

00000000004137c0 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev>:
  4137c0:	48 83 ef 08          	sub    $0x8,%rdi
  4137c4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4137c4 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED1Ev+0x4>
  4137cb:	49 ba 3c 78 21 00 00 	movabs $0x21783c,%r10
  4137d2:	00 00 00 
  4137d5:	4d 01 d3             	add    %r10,%r11
  4137d8:	49 ba c0 86 de ff ff 	movabs $0xffffffffffde86c0,%r10
  4137df:	ff ff ff 
  4137e2:	4d 01 da             	add    %r11,%r10
  4137e5:	41 ff e2             	jmpq   *%r10
  4137e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4137ef:	00 

00000000004137f0 <_ZN5boost3any6holderIfED0Ev>:
        class holder : public placeholder
  4137f0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4137f0 <_ZN5boost3any6holderIfED0Ev>
  4137f7:	49 bb 10 78 21 00 00 	movabs $0x217810,%r11
  4137fe:	00 00 00 
  413801:	41 57                	push   %r15
  413803:	48 ba 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rdx
  41380a:	ff ff ff 
  41380d:	be 10 00 00 00       	mov    $0x10,%esi
  413812:	4c 01 d8             	add    %r11,%rax
  413815:	41 5f                	pop    %r15
  413817:	48 01 c2             	add    %rax,%rdx
  41381a:	ff e2                	jmpq   *%rdx
  41381c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413820 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEED0Ev>:
template<class X> class sp_counted_impl_p: public sp_counted_base
  413820:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413820 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEED0Ev>
  413827:	49 bb e0 77 21 00 00 	movabs $0x2177e0,%r11
  41382e:	00 00 00 
  413831:	41 57                	push   %r15
  413833:	48 ba 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rdx
  41383a:	ff ff ff 
  41383d:	be 18 00 00 00       	mov    $0x18,%esi
  413842:	4c 01 d8             	add    %r11,%rax
  413845:	41 5f                	pop    %r15
  413847:	48 01 c2             	add    %rax,%rdx
  41384a:	ff e2                	jmpq   *%rdx
  41384c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413850 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEED0Ev>:
  413850:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413850 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEED0Ev>
  413857:	49 bb b0 77 21 00 00 	movabs $0x2177b0,%r11
  41385e:	00 00 00 
  413861:	41 57                	push   %r15
  413863:	48 ba 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rdx
  41386a:	ff ff ff 
  41386d:	be 18 00 00 00       	mov    $0x18,%esi
  413872:	4c 01 d8             	add    %r11,%rax
  413875:	41 5f                	pop    %r15
  413877:	48 01 c2             	add    %rax,%rdx
  41387a:	ff e2                	jmpq   *%rdx
  41387c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413880 <_ZN5boost15program_options11typed_valueIfcED0Ev>:
  413880:	41 57                	push   %r15
  413882:	55                   	push   %rbp
  413883:	49 bb 80 77 21 00 00 	movabs $0x217780,%r11
  41388a:	00 00 00 
  41388d:	53                   	push   %rbx
  41388e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413880 <_ZN5boost15program_options11typed_valueIfcED0Ev>
  413895:	48 b8 90 85 de ff ff 	movabs $0xffffffffffde8590,%rax
  41389c:	ff ff ff 
  41389f:	48 89 fd             	mov    %rdi,%rbp
  4138a2:	4c 01 db             	add    %r11,%rbx
  4138a5:	48 01 d8             	add    %rbx,%rax
  4138a8:	ff d0                	callq  *%rax
  4138aa:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4138b1:	ff ff ff 
  4138b4:	48 89 ef             	mov    %rbp,%rdi
  4138b7:	be b0 00 00 00       	mov    $0xb0,%esi
  4138bc:	48 01 d8             	add    %rbx,%rax
  4138bf:	5b                   	pop    %rbx
  4138c0:	5d                   	pop    %rbp
  4138c1:	41 5f                	pop    %r15
  4138c3:	ff e0                	jmpq   *%rax
  4138c5:	90                   	nop
  4138c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4138cd:	00 00 00 

00000000004138d0 <_ZThn8_N5boost15program_options11typed_valueIfcED0Ev>:
  4138d0:	48 83 ef 08          	sub    $0x8,%rdi
  4138d4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4138d4 <_ZThn8_N5boost15program_options11typed_valueIfcED0Ev+0x4>
  4138db:	49 ba 2c 77 21 00 00 	movabs $0x21772c,%r10
  4138e2:	00 00 00 
  4138e5:	4d 01 d3             	add    %r10,%r11
  4138e8:	49 ba 80 88 de ff ff 	movabs $0xffffffffffde8880,%r10
  4138ef:	ff ff ff 
  4138f2:	4d 01 da             	add    %r11,%r10
  4138f5:	41 ff e2             	jmpq   *%r10
  4138f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4138ff:	00 

0000000000413900 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev>:
  413900:	41 57                	push   %r15
  413902:	55                   	push   %rbp
  413903:	49 bb 00 77 21 00 00 	movabs $0x217700,%r11
  41390a:	00 00 00 
  41390d:	53                   	push   %rbx
  41390e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413900 <_ZN5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev>
  413915:	48 b8 c0 86 de ff ff 	movabs $0xffffffffffde86c0,%rax
  41391c:	ff ff ff 
  41391f:	48 89 fd             	mov    %rdi,%rbp
  413922:	4c 01 db             	add    %r11,%rbx
  413925:	48 01 d8             	add    %rbx,%rax
  413928:	ff d0                	callq  *%rax
  41392a:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  413931:	ff ff ff 
  413934:	48 89 ef             	mov    %rbp,%rdi
  413937:	be b0 00 00 00       	mov    $0xb0,%esi
  41393c:	48 01 d8             	add    %rbx,%rax
  41393f:	5b                   	pop    %rbx
  413940:	5d                   	pop    %rbp
  413941:	41 5f                	pop    %r15
  413943:	ff e0                	jmpq   *%rax
  413945:	90                   	nop
  413946:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41394d:	00 00 00 

0000000000413950 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev>:
  413950:	48 83 ef 08          	sub    $0x8,%rdi
  413954:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413954 <_ZThn8_N5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcED0Ev+0x4>
  41395b:	49 ba ac 76 21 00 00 	movabs $0x2176ac,%r10
  413962:	00 00 00 
  413965:	4d 01 d3             	add    %r10,%r11
  413968:	49 ba 00 89 de ff ff 	movabs $0xffffffffffde8900,%r10
  41396f:	ff ff ff 
  413972:	4d 01 da             	add    %r11,%r10
  413975:	41 ff e2             	jmpq   *%r10
  413978:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41397f:	00 

0000000000413980 <_ZN5boost15program_options5errorD1Ev>:
            return text.substr(i);
        }
    }

    /** Base class for all errors in the library. */
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  413980:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413980 <_ZN5boost15program_options5errorD1Ev>
  413987:	49 bb 80 76 21 00 00 	movabs $0x217680,%r11
  41398e:	00 00 00 
  413991:	48 ba 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rdx
  413998:	ff ff ff 
  41399b:	41 57                	push   %r15
  41399d:	4c 01 d8             	add    %r11,%rax
  4139a0:	48 01 c2             	add    %rax,%rdx
  4139a3:	48 89 17             	mov    %rdx,(%rdi)
  4139a6:	48 ba 40 ea dd ff ff 	movabs $0xffffffffffddea40,%rdx
  4139ad:	ff ff ff 
  4139b0:	41 5f                	pop    %r15
  4139b2:	48 01 c2             	add    %rax,%rdx
  4139b5:	ff e2                	jmpq   *%rdx
  4139b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4139be:	00 00 

00000000004139c0 <_ZN5boost15program_options5errorD0Ev>:
  4139c0:	41 57                	push   %r15
  4139c2:	55                   	push   %rbp
  4139c3:	49 bb 40 76 21 00 00 	movabs $0x217640,%r11
  4139ca:	00 00 00 
  4139cd:	53                   	push   %rbx
  4139ce:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4139c0 <_ZN5boost15program_options5errorD0Ev>
  4139d5:	48 b8 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rax
  4139dc:	ff ff ff 
  4139df:	48 89 fd             	mov    %rdi,%rbp
  4139e2:	4c 01 db             	add    %r11,%rbx
  4139e5:	48 01 d8             	add    %rbx,%rax
  4139e8:	49 89 df             	mov    %rbx,%r15
  4139eb:	48 89 07             	mov    %rax,(%rdi)
  4139ee:	48 b8 40 ea dd ff ff 	movabs $0xffffffffffddea40,%rax
  4139f5:	ff ff ff 
  4139f8:	48 01 d8             	add    %rbx,%rax
  4139fb:	ff d0                	callq  *%rax
  4139fd:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  413a04:	ff ff ff 
  413a07:	48 89 ef             	mov    %rbp,%rdi
  413a0a:	be 10 00 00 00       	mov    $0x10,%esi
  413a0f:	48 01 d8             	add    %rbx,%rax
  413a12:	5b                   	pop    %rbx
  413a13:	5d                   	pop    %rbp
  413a14:	41 5f                	pop    %r15
  413a16:	ff e0                	jmpq   *%rax
  413a18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413a1f:	00 

0000000000413a20 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED1Ev>:
        class basic_unlockedbuf : public basic_pointerbuf<CharT, BufferType> {
  413a20:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413a20 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED1Ev>
  413a27:	49 bb e0 75 21 00 00 	movabs $0x2175e0,%r11
  413a2e:	00 00 00 
      { }
  413a31:	48 ba 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rdx
  413a38:	ff ff ff 
  413a3b:	41 57                	push   %r15
  413a3d:	48 83 c7 38          	add    $0x38,%rdi
  413a41:	4c 01 d8             	add    %r11,%rax
  413a44:	48 8b 14 10          	mov    (%rax,%rdx,1),%rdx
  413a48:	48 83 c2 10          	add    $0x10,%rdx
  413a4c:	48 89 57 c8          	mov    %rdx,-0x38(%rdi)
  413a50:	48 ba d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rdx
  413a57:	ff ff ff 
  413a5a:	41 5f                	pop    %r15
  413a5c:	48 01 c2             	add    %rax,%rdx
  413a5f:	ff e2                	jmpq   *%rdx
  413a61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413a68:	00 00 00 
  413a6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000413a70 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED0Ev>:
  413a70:	41 57                	push   %r15
  413a72:	55                   	push   %rbp
  413a73:	49 bb 90 75 21 00 00 	movabs $0x217590,%r11
  413a7a:	00 00 00 
  413a7d:	53                   	push   %rbx
  413a7e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413a70 <_ZN5boost6detail17basic_unlockedbufISt15basic_streambufIcSt11char_traitsIcEEcED0Ev>
  413a85:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  413a8c:	ff ff ff 
  413a8f:	48 89 fd             	mov    %rdi,%rbp
  413a92:	48 8d 7f 38          	lea    0x38(%rdi),%rdi
  413a96:	4c 01 db             	add    %r11,%rbx
  413a99:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  413a9d:	49 89 df             	mov    %rbx,%r15
  413aa0:	48 83 c0 10          	add    $0x10,%rax
  413aa4:	48 89 47 c8          	mov    %rax,-0x38(%rdi)
  413aa8:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  413aaf:	ff ff ff 
  413ab2:	48 01 d8             	add    %rbx,%rax
  413ab5:	ff d0                	callq  *%rax
  413ab7:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  413abe:	ff ff ff 
  413ac1:	48 89 ef             	mov    %rbp,%rdi
  413ac4:	be 40 00 00 00       	mov    $0x40,%esi
  413ac9:	48 01 d8             	add    %rbx,%rax
  413acc:	5b                   	pop    %rbx
  413acd:	5d                   	pop    %rbp
  413ace:	41 5f                	pop    %r15
  413ad0:	ff e0                	jmpq   *%rax
  413ad2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413ad9:	00 00 00 
  413adc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000413ae0 <_ZN5boost16bad_lexical_castD1Ev>:
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  413ae0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413ae0 <_ZN5boost16bad_lexical_castD1Ev>
  413ae7:	49 bb 20 75 21 00 00 	movabs $0x217520,%r11
  413aee:	00 00 00 
        {}
  413af1:	48 ba 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rdx
  413af8:	ff ff ff 
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  413afb:	41 57                	push   %r15
  413afd:	4c 01 d8             	add    %r11,%rax
        {}
  413b00:	48 01 c2             	add    %rax,%rdx
  413b03:	48 89 17             	mov    %rdx,(%rdi)
  413b06:	48 ba 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rdx
  413b0d:	ff ff ff 
  413b10:	41 5f                	pop    %r15
  413b12:	48 01 c2             	add    %rax,%rdx
  413b15:	ff e2                	jmpq   *%rdx
  413b17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  413b1e:	00 00 

0000000000413b20 <_ZN5boost16bad_lexical_castD0Ev>:
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  413b20:	41 57                	push   %r15
  413b22:	55                   	push   %rbp
  413b23:	49 bb e0 74 21 00 00 	movabs $0x2174e0,%r11
  413b2a:	00 00 00 
  413b2d:	53                   	push   %rbx
  413b2e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413b20 <_ZN5boost16bad_lexical_castD0Ev>
        {}
  413b35:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  413b3c:	ff ff ff 
        virtual ~bad_lexical_cast() BOOST_NOEXCEPT_OR_NOTHROW
  413b3f:	48 89 fd             	mov    %rdi,%rbp
  413b42:	4c 01 db             	add    %r11,%rbx
        {}
  413b45:	48 01 d8             	add    %rbx,%rax
  413b48:	49 89 df             	mov    %rbx,%r15
  413b4b:	48 89 07             	mov    %rax,(%rdi)
  413b4e:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  413b55:	ff ff ff 
  413b58:	48 01 d8             	add    %rbx,%rax
  413b5b:	ff d0                	callq  *%rax
  413b5d:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  413b64:	ff ff ff 
  413b67:	48 89 ef             	mov    %rbp,%rdi
  413b6a:	be 18 00 00 00       	mov    $0x18,%esi
  413b6f:	48 01 d8             	add    %rbx,%rax
  413b72:	5b                   	pop    %rbx
  413b73:	5d                   	pop    %rbp
  413b74:	41 5f                	pop    %r15
  413b76:	ff e0                	jmpq   *%rax
  413b78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413b7f:	00 

0000000000413b80 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev>:
            error_info_injector( T const & x ):
                T(x)
                {
                }

            ~error_info_injector() throw()
  413b80:	41 57                	push   %r15
  413b82:	55                   	push   %rbp
  413b83:	49 bb 80 74 21 00 00 	movabs $0x217480,%r11
  413b8a:	00 00 00 
  413b8d:	53                   	push   %rbx
  413b8e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413b80 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev>
                {
                }
  413b95:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  413b9c:	ff ff ff 
            ~error_info_injector() throw()
  413b9f:	48 89 fd             	mov    %rdi,%rbp
  413ba2:	4c 01 db             	add    %r11,%rbx
                }
  413ba5:	48 01 d8             	add    %rbx,%rax
  413ba8:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  413bab:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413bb2:	ff ff ff 
  413bb5:	48 01 d8             	add    %rbx,%rax
  413bb8:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  413bbc:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  413bc0:	48 85 ff             	test   %rdi,%rdi
  413bc3:	74 06                	je     413bcb <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev+0x4b>
  413bc5:	48 8b 07             	mov    (%rdi),%rax
  413bc8:	ff 50 20             	callq  *0x20(%rax)
  413bcb:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  413bd2:	ff ff ff 
  413bd5:	48 89 ef             	mov    %rbp,%rdi
  413bd8:	48 01 d8             	add    %rbx,%rax
  413bdb:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413bdf:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  413be6:	ff ff ff 
  413be9:	48 01 d8             	add    %rbx,%rax
                }
  413bec:	5b                   	pop    %rbx
  413bed:	5d                   	pop    %rbp
  413bee:	41 5f                	pop    %r15
  413bf0:	ff e0                	jmpq   *%rax
  413bf2:	0f 1f 40 00          	nopl   0x0(%rax)
  413bf6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413bfd:	00 00 00 

0000000000413c00 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev>:
            ~error_info_injector() throw()
  413c00:	48 83 ef 18          	sub    $0x18,%rdi
  413c04:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413c04 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED1Ev+0x4>
  413c0b:	49 ba fc 73 21 00 00 	movabs $0x2173fc,%r10
  413c12:	00 00 00 
  413c15:	4d 01 d3             	add    %r10,%r11
  413c18:	49 ba 80 8b de ff ff 	movabs $0xffffffffffde8b80,%r10
  413c1f:	ff ff ff 
  413c22:	4d 01 da             	add    %r11,%r10
  413c25:	41 ff e2             	jmpq   *%r10
  413c28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413c2f:	00 

0000000000413c30 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv>:
                {
                return new clone_impl(*this,clone_tag());
                }

            void
            rethrow() const
  413c30:	41 57                	push   %r15
  413c32:	41 55                	push   %r13
  413c34:	49 bb d0 73 21 00 00 	movabs $0x2173d0,%r11
  413c3b:	00 00 00 
  413c3e:	41 54                	push   %r12
  413c40:	55                   	push   %rbp
                {
                throw*this;
  413c41:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  413c48:	ff ff ff 
            rethrow() const
  413c4b:	53                   	push   %rbx
  413c4c:	48 8d 1d dd ff ff ff 	lea    -0x23(%rip),%rbx        # 413c30 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv>
  413c53:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  413c56:	bf 48 00 00 00       	mov    $0x48,%edi
    class BOOST_SYMBOL_VISIBLE bad_lexical_cast :
  413c5b:	49 bd 68 ef ff ff ff 	movabs $0xffffffffffffef68,%r13
  413c62:	ff ff ff 
  413c65:	4c 01 db             	add    %r11,%rbx
  413c68:	48 01 d8             	add    %rbx,%rax
  413c6b:	49 89 df             	mov    %rbx,%r15
  413c6e:	ff d0                	callq  *%rax
  413c70:	48 89 c5             	mov    %rax,%rbp
        clone_base
  413c73:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  413c7a:	ff ff ff 
                px_(x.px_)
  413c7d:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
        clone_base
  413c82:	48 01 d8             	add    %rbx,%rax
  413c85:	48 89 45 40          	mov    %rax,0x40(%rbp)
  413c89:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
                px_(x.px_)
  413c8e:	48 89 7d 20          	mov    %rdi,0x20(%rbp)
  413c92:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413c96:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  413c9b:	48 89 45 08          	mov    %rax,0x8(%rbp)
  413c9f:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  413ca4:	48 89 45 10          	mov    %rax,0x10(%rbp)
    exception
  413ca8:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413caf:	ff ff ff 
  413cb2:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  413cb5:	48 85 ff             	test   %rdi,%rdi
    exception
  413cb8:	48 89 45 18          	mov    %rax,0x18(%rbp)
                if( px_ )
  413cbc:	74 06                	je     413cc4 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv+0x94>
                    px_->add_ref();
  413cbe:	48 8b 07             	mov    (%rdi),%rax
  413cc1:	ff 50 18             	callq  *0x18(%rax)
    exception
  413cc4:	41 8b 44 24 38       	mov    0x38(%r12),%eax
                throw*this;
  413cc9:	48 89 ef             	mov    %rbp,%rdi
  413ccc:	49 89 df             	mov    %rbx,%r15
    exception
  413ccf:	f3 41 0f 6f 44 24 28 	movdqu 0x28(%r12),%xmm0
  413cd6:	89 45 38             	mov    %eax,0x38(%rbp)
        clone_impl:
  413cd9:	48 b8 b0 f0 ff ff ff 	movabs $0xfffffffffffff0b0,%rax
  413ce0:	ff ff ff 
  413ce3:	48 01 d8             	add    %rbx,%rax
  413ce6:	48 8d 50 38          	lea    0x38(%rax),%rdx
  413cea:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413cee:	48 83 c0 70          	add    $0x70,%rax
  413cf2:	48 89 45 40          	mov    %rax,0x40(%rbp)
                throw*this;
  413cf6:	48 b8 e0 9c de ff ff 	movabs $0xffffffffffde9ce0,%rax
  413cfd:	ff ff ff 
        clone_impl:
  413d00:	48 89 55 18          	mov    %rdx,0x18(%rbp)
                throw*this;
  413d04:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  413d08:	48 b8 d8 f8 ff ff ff 	movabs $0xfffffffffffff8d8,%rax
  413d0f:	ff ff ff 
  413d12:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  413d16:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  413d1d:	ff ff ff 
    exception
  413d20:	0f 11 45 28          	movups %xmm0,0x28(%rbp)
                throw*this;
  413d24:	48 01 d8             	add    %rbx,%rax
  413d27:	ff d0                	callq  *%rax
  413d29:	49 89 c4             	mov    %rax,%r12
        {}
  413d2c:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  413d31:	48 ba 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rdx
  413d38:	ff ff ff 
  413d3b:	48 89 ef             	mov    %rbp,%rdi
  413d3e:	49 89 df             	mov    %rbx,%r15
  413d41:	48 01 da             	add    %rbx,%rdx
  413d44:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413d48:	ff d2                	callq  *%rdx
  413d4a:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  413d51:	ff ff ff 
  413d54:	48 89 ef             	mov    %rbp,%rdi
  413d57:	48 01 da             	add    %rbx,%rdx
  413d5a:	ff d2                	callq  *%rdx
  413d5c:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  413d63:	ff ff ff 
  413d66:	4c 89 e7             	mov    %r12,%rdi
  413d69:	48 01 d8             	add    %rbx,%rax
  413d6c:	ff d0                	callq  *%rax
  413d6e:	66 90                	xchg   %ax,%ax

0000000000413d70 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv>:
            rethrow() const
  413d70:	4c 8b 17             	mov    (%rdi),%r10
  413d73:	49 03 7a e0          	add    -0x20(%r10),%rdi
  413d77:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413d77 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE7rethrowEv+0x7>
  413d7e:	49 ba 89 72 21 00 00 	movabs $0x217289,%r10
  413d85:	00 00 00 
  413d88:	4d 01 d3             	add    %r10,%r11
  413d8b:	49 ba 30 8c de ff ff 	movabs $0xffffffffffde8c30,%r10
  413d92:	ff ff ff 
  413d95:	4d 01 da             	add    %r11,%r10
  413d98:	41 ff e2             	jmpq   *%r10
  413d9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000413da0 <_ZN5boost17bad_function_callD1Ev>:

/**
 * The bad_function_call exception class is thrown when a boost::function
 * object is invoked
 */
class bad_function_call : public std::runtime_error
  413da0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 413da0 <_ZN5boost17bad_function_callD1Ev>
  413da7:	49 bb 60 72 21 00 00 	movabs $0x217260,%r11
  413dae:	00 00 00 
  413db1:	48 ba 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rdx
  413db8:	ff ff ff 
  413dbb:	41 57                	push   %r15
  413dbd:	4c 01 d8             	add    %r11,%rax
  413dc0:	48 01 c2             	add    %rax,%rdx
  413dc3:	48 89 17             	mov    %rdx,(%rdi)
  413dc6:	48 ba 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rdx
  413dcd:	ff ff ff 
  413dd0:	41 5f                	pop    %r15
  413dd2:	48 01 c2             	add    %rax,%rdx
  413dd5:	ff e2                	jmpq   *%rdx
  413dd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  413dde:	00 00 

0000000000413de0 <_ZN5boost17bad_function_callD0Ev>:
  413de0:	41 57                	push   %r15
  413de2:	55                   	push   %rbp
  413de3:	49 bb 20 72 21 00 00 	movabs $0x217220,%r11
  413dea:	00 00 00 
  413ded:	53                   	push   %rbx
  413dee:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413de0 <_ZN5boost17bad_function_callD0Ev>
  413df5:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  413dfc:	ff ff ff 
  413dff:	48 89 fd             	mov    %rdi,%rbp
  413e02:	4c 01 db             	add    %r11,%rbx
  413e05:	48 01 d8             	add    %rbx,%rax
  413e08:	49 89 df             	mov    %rbx,%r15
  413e0b:	48 89 07             	mov    %rax,(%rdi)
  413e0e:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  413e15:	ff ff ff 
  413e18:	48 01 d8             	add    %rbx,%rax
  413e1b:	ff d0                	callq  *%rax
  413e1d:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  413e24:	ff ff ff 
  413e27:	48 89 ef             	mov    %rbp,%rdi
  413e2a:	be 10 00 00 00       	mov    $0x10,%esi
  413e2f:	48 01 d8             	add    %rbx,%rax
  413e32:	5b                   	pop    %rbx
  413e33:	5d                   	pop    %rbp
  413e34:	41 5f                	pop    %r15
  413e36:	ff e0                	jmpq   *%rax
  413e38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413e3f:	00 

0000000000413e40 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev>:
            ~error_info_injector() throw()
  413e40:	41 57                	push   %r15
  413e42:	55                   	push   %rbp
  413e43:	49 bb c0 71 21 00 00 	movabs $0x2171c0,%r11
  413e4a:	00 00 00 
  413e4d:	53                   	push   %rbx
  413e4e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413e40 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev>
                }
  413e55:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  413e5c:	ff ff ff 
            ~error_info_injector() throw()
  413e5f:	48 89 fd             	mov    %rdi,%rbp
  413e62:	4c 01 db             	add    %r11,%rbx
                }
  413e65:	48 01 d8             	add    %rbx,%rax
  413e68:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  413e6b:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413e72:	ff ff ff 
  413e75:	48 01 d8             	add    %rbx,%rax
  413e78:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  413e7c:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  413e80:	48 85 ff             	test   %rdi,%rdi
  413e83:	74 06                	je     413e8b <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev+0x4b>
  413e85:	48 8b 07             	mov    (%rdi),%rax
  413e88:	ff 50 20             	callq  *0x20(%rax)
  413e8b:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  413e92:	ff ff ff 
  413e95:	48 89 ef             	mov    %rbp,%rdi
  413e98:	48 01 d8             	add    %rbx,%rax
  413e9b:	48 89 45 00          	mov    %rax,0x0(%rbp)
  413e9f:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  413ea6:	ff ff ff 
  413ea9:	48 01 d8             	add    %rbx,%rax
                }
  413eac:	5b                   	pop    %rbx
  413ead:	5d                   	pop    %rbp
  413eae:	41 5f                	pop    %r15
  413eb0:	ff e0                	jmpq   *%rax
  413eb2:	0f 1f 40 00          	nopl   0x0(%rax)
  413eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  413ebd:	00 00 00 

0000000000413ec0 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev>:
            ~error_info_injector() throw()
  413ec0:	48 83 ef 10          	sub    $0x10,%rdi
  413ec4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 413ec4 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED1Ev+0x4>
  413ecb:	49 ba 3c 71 21 00 00 	movabs $0x21713c,%r10
  413ed2:	00 00 00 
  413ed5:	4d 01 d3             	add    %r10,%r11
  413ed8:	49 ba 40 8e de ff ff 	movabs $0xffffffffffde8e40,%r10
  413edf:	ff ff ff 
  413ee2:	4d 01 da             	add    %r11,%r10
  413ee5:	41 ff e2             	jmpq   *%r10
  413ee8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  413eef:	00 

0000000000413ef0 <_ZN4YAML9ExceptionD1Ev>:

class Exception : public std::runtime_error {
 public:
  Exception(const Mark& mark_, const std::string& msg_)
      : std::runtime_error(build_what(mark_, msg_)), mark(mark_), msg(msg_) {}
  virtual ~Exception() throw() {}
  413ef0:	41 57                	push   %r15
  413ef2:	55                   	push   %rbp
  413ef3:	49 bb 10 71 21 00 00 	movabs $0x217110,%r11
  413efa:	00 00 00 
  413efd:	53                   	push   %rbx
  413efe:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 413ef0 <_ZN4YAML9ExceptionD1Ev>
  413f05:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  413f0c:	ff ff ff 
  413f0f:	48 89 fd             	mov    %rdi,%rbp
  413f12:	4c 01 db             	add    %r11,%rbx
  413f15:	48 01 d8             	add    %rbx,%rax
  413f18:	48 89 07             	mov    %rax,(%rdi)
  413f1b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  413f1f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  413f23:	48 39 c7             	cmp    %rax,%rdi
  413f26:	74 12                	je     413f3a <_ZN4YAML9ExceptionD1Ev+0x4a>
  413f28:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  413f2f:	ff ff ff 
  413f32:	49 89 df             	mov    %rbx,%r15
  413f35:	48 01 d8             	add    %rbx,%rax
  413f38:	ff d0                	callq  *%rax
  413f3a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  413f41:	ff ff ff 
  413f44:	48 89 ef             	mov    %rbp,%rdi
  413f47:	48 01 d8             	add    %rbx,%rax
  413f4a:	5b                   	pop    %rbx
  413f4b:	5d                   	pop    %rbp
  413f4c:	41 5f                	pop    %r15
  413f4e:	ff e0                	jmpq   *%rax

0000000000413f50 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv>:
            rethrow() const
  413f50:	41 57                	push   %r15
  413f52:	41 55                	push   %r13
  413f54:	49 bb b0 70 21 00 00 	movabs $0x2170b0,%r11
  413f5b:	00 00 00 
  413f5e:	41 54                	push   %r12
  413f60:	55                   	push   %rbp
                throw*this;
  413f61:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  413f68:	ff ff ff 
            rethrow() const
  413f6b:	53                   	push   %rbx
  413f6c:	48 8d 1d dd ff ff ff 	lea    -0x23(%rip),%rbx        # 413f50 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv>
  413f73:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  413f76:	bf 40 00 00 00       	mov    $0x40,%edi
  413f7b:	49 bd 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%r13
  413f82:	ff ff ff 
  413f85:	4c 01 db             	add    %r11,%rbx
  413f88:	49 89 df             	mov    %rbx,%r15
  413f8b:	48 01 d8             	add    %rbx,%rax
  413f8e:	ff d0                	callq  *%rax
  413f90:	48 89 c5             	mov    %rax,%rbp
        clone_base
  413f93:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  413f9a:	ff ff ff 
  413f9d:	4c 89 e6             	mov    %r12,%rsi
  413fa0:	48 01 d8             	add    %rbx,%rax
  413fa3:	48 89 ef             	mov    %rbp,%rdi
  413fa6:	48 89 45 38          	mov    %rax,0x38(%rbp)
  413faa:	48 b8 60 e8 dd ff ff 	movabs $0xffffffffffdde860,%rax
  413fb1:	ff ff ff 
  413fb4:	48 01 d8             	add    %rbx,%rax
  413fb7:	ff d0                	callq  *%rax
  413fb9:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
                px_(x.px_)
  413fbe:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
  413fc3:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  413fc7:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  413fce:	ff ff ff 
  413fd1:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  413fd4:	48 85 ff             	test   %rdi,%rdi
                px_(x.px_)
  413fd7:	48 89 7d 18          	mov    %rdi,0x18(%rbp)
    exception
  413fdb:	48 89 45 10          	mov    %rax,0x10(%rbp)
                if( px_ )
  413fdf:	74 06                	je     413fe7 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv+0x97>
                    px_->add_ref();
  413fe1:	48 8b 07             	mov    (%rdi),%rax
  413fe4:	ff 50 18             	callq  *0x18(%rax)
    exception
  413fe7:	41 8b 44 24 30       	mov    0x30(%r12),%eax
                throw*this;
  413fec:	48 89 ef             	mov    %rbp,%rdi
  413fef:	49 89 df             	mov    %rbx,%r15
    exception
  413ff2:	f3 41 0f 6f 44 24 20 	movdqu 0x20(%r12),%xmm0
  413ff9:	89 45 30             	mov    %eax,0x30(%rbp)
        clone_impl:
  413ffc:	48 b8 20 f3 ff ff ff 	movabs $0xfffffffffffff320,%rax
  414003:	ff ff ff 
  414006:	48 01 d8             	add    %rbx,%rax
  414009:	48 8d 50 38          	lea    0x38(%rax),%rdx
  41400d:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414011:	48 83 c0 70          	add    $0x70,%rax
  414015:	48 89 45 38          	mov    %rax,0x38(%rbp)
                throw*this;
  414019:	48 b8 50 9f de ff ff 	movabs $0xffffffffffde9f50,%rax
  414020:	ff ff ff 
        clone_impl:
  414023:	48 89 55 10          	mov    %rdx,0x10(%rbp)
                throw*this;
  414027:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41402b:	48 b8 78 f1 ff ff ff 	movabs $0xfffffffffffff178,%rax
  414032:	ff ff ff 
  414035:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  414039:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  414040:	ff ff ff 
    exception
  414043:	0f 11 45 20          	movups %xmm0,0x20(%rbp)
                throw*this;
  414047:	48 01 d8             	add    %rbx,%rax
  41404a:	ff d0                	callq  *%rax
  41404c:	49 89 c4             	mov    %rax,%r12
  41404f:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  414054:	48 ba 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rdx
  41405b:	ff ff ff 
  41405e:	48 89 ef             	mov    %rbp,%rdi
  414061:	49 89 df             	mov    %rbx,%r15
  414064:	48 01 da             	add    %rbx,%rdx
  414067:	48 89 45 00          	mov    %rax,0x0(%rbp)
  41406b:	ff d2                	callq  *%rdx
  41406d:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  414074:	ff ff ff 
  414077:	48 89 ef             	mov    %rbp,%rdi
  41407a:	48 01 da             	add    %rbx,%rdx
  41407d:	ff d2                	callq  *%rdx
  41407f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  414086:	ff ff ff 
  414089:	4c 89 e7             	mov    %r12,%rdi
  41408c:	48 01 d8             	add    %rbx,%rax
  41408f:	ff d0                	callq  *%rax
  414091:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  414096:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41409d:	00 00 00 

00000000004140a0 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv>:
            rethrow() const
  4140a0:	4c 8b 17             	mov    (%rdi),%r10
  4140a3:	49 03 7a e0          	add    -0x20(%r10),%rdi
  4140a7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4140a7 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE7rethrowEv+0x7>
  4140ae:	49 ba 59 6f 21 00 00 	movabs $0x216f59,%r10
  4140b5:	00 00 00 
  4140b8:	4d 01 d3             	add    %r10,%r11
  4140bb:	49 ba 50 8f de ff ff 	movabs $0xffffffffffde8f50,%r10
  4140c2:	ff ff ff 
  4140c5:	4d 01 da             	add    %r11,%r10
  4140c8:	41 ff e2             	jmpq   *%r10
  4140cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004140d0 <_ZN5swarm13frame_spillerEmj>:
__attribute__((noinline))
inline void spiller(swarm::Timestamp ts, const uint32_t n) {
    spiller_impl<false>(ts, n);
}
__attribute__((noinline))
inline void frame_spiller(swarm::Timestamp ts, const uint32_t n) {
  4140d0:	41 57                	push   %r15
  4140d2:	41 55                	push   %r13
  4140d4:	49 bb 30 6f 21 00 00 	movabs $0x216f30,%r11
  4140db:	00 00 00 
  4140de:	41 54                	push   %r12
  4140e0:	4c 8d 25 e9 ff ff ff 	lea    -0x17(%rip),%r12        # 4140d0 <_ZN5swarm13frame_spillerEmj>
  4140e7:	55                   	push   %rbp
  4140e8:	53                   	push   %rbx
                        sizeof(TaskDescriptors) + n*sizeof(TaskDescriptor));
  4140e9:	89 f3                	mov    %esi,%ebx
  4140eb:	4d 01 dc             	add    %r11,%r12
  4140ee:	48 c1 e3 06          	shl    $0x6,%rbx
inline void frame_spiller(swarm::Timestamp ts, const uint32_t n) {
  4140f2:	48 83 ec 10          	sub    $0x10,%rsp
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  4140f6:	31 d2                	xor    %edx,%edx
    return reinterpret_cast<uint64_t>(ptr);
  4140f8:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    TaskDescriptors* tdstruct = (TaskDescriptors*) sim_zero_cycle_untracked_malloc(
  4140fd:	48 8d 73 08          	lea    0x8(%rbx),%rsi
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  414101:	b9 12 20 00 00       	mov    $0x2012,%ecx
  414106:	48 87 c9             	xchg   %rcx,%rcx
    return ptr;
  414109:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
    TaskDescriptor* tasks = tdstruct->tds;
  41410e:	49 8d 6d 08          	lea    0x8(%r13),%rbp
    TaskDescriptor* const end = tasks + n;
  414112:	48 01 eb             	add    %rbp,%rbx
    __builtin_prefetch(&tasks[0].ts, 1);
  414115:	0f 18 4d 00          	prefetcht0 0x0(%rbp)
    for (task = begin; task < end; task++) {
  414119:	48 39 dd             	cmp    %rbx,%rbp
  41411c:	0f 83 c9 00 00 00    	jae    4141eb <_ZN5swarm13frame_spillerEmj+0x11b>
  414122:	48 89 e8             	mov    %rbp,%rax
  414125:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  41412c:	eb 3c                	jmp    41416a <_ZN5swarm13frame_spillerEmj+0x9a>
  41412e:	66 90                	xchg   %ax,%ax
        assert(!isFrame || !nonTimestamped);
  414130:	f7 c6 00 02 00 00    	test   $0x200,%esi
    task->ts = ts;
  414136:	48 89 38             	mov    %rdi,(%rax)
    task->taskPtrAndFlags = taskPtrAndFlags;
  414139:	48 89 70 08          	mov    %rsi,0x8(%rax)
    task->hint = hint;
  41413d:	48 89 50 10          	mov    %rdx,0x10(%rax)
    task->args[0] = a0;
  414141:	48 89 48 18          	mov    %rcx,0x18(%rax)
    task->args[1] = a1;
  414145:	4c 89 40 20          	mov    %r8,0x20(%rax)
    task->args[2] = a2;
  414149:	4c 89 48 28          	mov    %r9,0x28(%rax)
    task->args[3] = a3;
  41414d:	4c 89 50 30          	mov    %r10,0x30(%rax)
    task->args[4] = a4;
  414151:	4c 89 58 38          	mov    %r11,0x38(%rax)
        assert(!isFrame || !nonTimestamped);
  414155:	0f 85 9a 00 00 00    	jne    4141f5 <_ZN5swarm13frame_spillerEmj+0x125>
        if (nonTimestamped || newMin == UINT64_MAX) break;
  41415b:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
  41415f:	74 2b                	je     41418c <_ZN5swarm13frame_spillerEmj+0xbc>
    for (task = begin; task < end; task++) {
  414161:	48 83 c0 40          	add    $0x40,%rax
  414165:	48 39 c3             	cmp    %rax,%rbx
  414168:	76 22                	jbe    41418c <_ZN5swarm13frame_spillerEmj+0xbc>
    void* prefetch = (void*)(mask &
  41416a:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
  414171:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
    if (pls_likely(prefetch < end)) __builtin_prefetch(prefetch, 1);
  414175:	48 39 d3             	cmp    %rdx,%rbx
  414178:	76 03                	jbe    41417d <_ZN5swarm13frame_spillerEmj+0xad>
  41417a:	0f 18 0a             	prefetcht0 (%rdx)
        :);
  41417d:	48 c7 c1 02 08 00 00 	mov    $0x802,%rcx
        :);
  414184:	48 87 c9             	xchg   %rcx,%rcx
    if (pls_unlikely(taskPtrAndFlags == 0ul)) return UINT64_MAX;
  414187:	48 85 f6             	test   %rsi,%rsi
  41418a:	75 a4                	jne    414130 <_ZN5swarm13frame_spillerEmj+0x60>
  41418c:	48 29 e8             	sub    %rbp,%rax
  41418f:	48 c1 f8 06          	sar    $0x6,%rax
    if (tdstruct->size > 0) {
  414193:	48 85 c0             	test   %rax,%rax
    tdstruct->size = std::distance(begin, task);
  414196:	49 89 45 00          	mov    %rax,0x0(%r13)
    if (tdstruct->size > 0) {
  41419a:	75 24                	jne    4141c0 <_ZN5swarm13frame_spillerEmj+0xf0>
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  41419c:	41 0f 18 4d c8       	prefetcht0 -0x38(%r13)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4141a1:	b9 11 20 00 00       	mov    $0x2011,%ecx
  4141a6:	4c 89 ef             	mov    %r13,%rdi
  4141a9:	48 87 c9             	xchg   %rcx,%rcx
    spiller_impl<true>(ts, n);
}
  4141ac:	48 83 c4 10          	add    $0x10,%rsp
  4141b0:	5b                   	pop    %rbx
  4141b1:	5d                   	pop    %rbp
  4141b2:	41 5c                	pop    %r12
  4141b4:	41 5d                	pop    %r13
  4141b6:	41 5f                	pop    %r15
  4141b8:	c3                   	retq   
  4141b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4141c0:	48 b8 c0 31 de ff ff 	movabs $0xffffffffffde31c0,%rax
  4141c7:	ff ff ff 
  4141ca:	bf 2a 00 00 00       	mov    $0x2a,%edi
  4141cf:	b9 b1 0c 02 40       	mov    $0x40020cb1,%ecx
  4141d4:	49 8d 14 04          	lea    (%r12,%rax,1),%rdx
  4141d8:	4c 89 ee             	mov    %r13,%rsi
  4141db:	48 87 c9             	xchg   %rcx,%rcx
  4141de:	48 83 c4 10          	add    $0x10,%rsp
  4141e2:	5b                   	pop    %rbx
  4141e3:	5d                   	pop    %rbp
  4141e4:	41 5c                	pop    %r12
  4141e6:	41 5d                	pop    %r13
  4141e8:	41 5f                	pop    %r15
  4141ea:	c3                   	retq   
    tdstruct->size = std::distance(begin, task);
  4141eb:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
  4141f2:	00 
  4141f3:	eb a7                	jmp    41419c <_ZN5swarm13frame_spillerEmj+0xcc>
        assert(!isFrame || !nonTimestamped);
  4141f5:	48 b8 80 81 df ff ff 	movabs $0xffffffffffdf8180,%rax
  4141fc:	ff ff ff 
  4141ff:	ba de 00 00 00       	mov    $0xde,%edx
  414204:	4d 89 e7             	mov    %r12,%r15
  414207:	49 8d 0c 04          	lea    (%r12,%rax,1),%rcx
  41420b:	48 b8 c0 7f df ff ff 	movabs $0xffffffffffdf7fc0,%rax
  414212:	ff ff ff 
  414215:	49 8d 34 04          	lea    (%r12,%rax,1),%rsi
  414219:	48 b8 06 80 df ff ff 	movabs $0xffffffffffdf8006,%rax
  414220:	ff ff ff 
  414223:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  414227:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  41422e:	ff ff ff 
  414231:	4c 01 e0             	add    %r12,%rax
  414234:	ff d0                	callq  *%rax
  414236:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41423d:	00 00 00 

0000000000414240 <_ZN5swarm7spillerEmj>:
inline void spiller(swarm::Timestamp ts, const uint32_t n) {
  414240:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 414240 <_ZN5swarm7spillerEmj>
  414247:	41 57                	push   %r15
  414249:	49 bb c0 6d 21 00 00 	movabs $0x216dc0,%r11
  414250:	00 00 00 
  414253:	41 56                	push   %r14
  414255:	41 55                	push   %r13
  414257:	41 54                	push   %r12
  414259:	55                   	push   %rbp
  41425a:	4c 01 d8             	add    %r11,%rax
  41425d:	53                   	push   %rbx
                        sizeof(TaskDescriptors) + n*sizeof(TaskDescriptor));
  41425e:	41 89 f4             	mov    %esi,%r12d
  414261:	49 c1 e4 06          	shl    $0x6,%r12
  414265:	48 89 44 24 e8       	mov    %rax,-0x18(%rsp)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  41426a:	31 d2                	xor    %edx,%edx
    return reinterpret_cast<uint64_t>(ptr);
  41426c:	48 8d 7c 24 f8       	lea    -0x8(%rsp),%rdi
    TaskDescriptors* tdstruct = (TaskDescriptors*) sim_zero_cycle_untracked_malloc(
  414271:	49 8d 74 24 08       	lea    0x8(%r12),%rsi
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  414276:	b9 12 20 00 00       	mov    $0x2012,%ecx
  41427b:	48 87 c9             	xchg   %rcx,%rcx
    return ptr;
  41427e:	48 8b 44 24 f8       	mov    -0x8(%rsp),%rax
    TaskDescriptor* tasks = tdstruct->tds;
  414283:	4c 8d 70 08          	lea    0x8(%rax),%r14
  414287:	48 89 44 24 e0       	mov    %rax,-0x20(%rsp)
    TaskDescriptor* const end = tasks + n;
  41428c:	4d 01 f4             	add    %r14,%r12
    __builtin_prefetch(&tasks[0].ts, 1);
  41428f:	41 0f 18 0e          	prefetcht0 (%r14)
    for (task = begin; task < end; task++) {
  414293:	4d 39 e6             	cmp    %r12,%r14
  414296:	0f 83 50 01 00 00    	jae    4143ec <_ZN5swarm7spillerEmj+0x1ac>
  41429c:	4c 89 f0             	mov    %r14,%rax
  41429f:	41 bd 80 02 00 00    	mov    $0x280,%r13d
  4142a5:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  4142ac:	eb 42                	jmp    4142f0 <_ZN5swarm7spillerEmj+0xb0>
  4142ae:	66 90                	xchg   %ax,%ax
    *requeuerFlags &= taskPtrAndFlags;
  4142b0:	49 21 f5             	and    %rsi,%r13
        if (nonTimestamped || newMin == UINT64_MAX) break;
  4142b3:	f7 c6 00 02 00 00    	test   $0x200,%esi
    task->ts = ts;
  4142b9:	48 89 38             	mov    %rdi,(%rax)
    task->taskPtrAndFlags = taskPtrAndFlags;
  4142bc:	48 89 70 08          	mov    %rsi,0x8(%rax)
    task->hint = hint;
  4142c0:	48 89 50 10          	mov    %rdx,0x10(%rax)
    task->args[0] = a0;
  4142c4:	48 89 48 18          	mov    %rcx,0x18(%rax)
    task->args[1] = a1;
  4142c8:	4c 89 40 20          	mov    %r8,0x20(%rax)
    task->args[2] = a2;
  4142cc:	4c 89 48 28          	mov    %r9,0x28(%rax)
    task->args[3] = a3;
  4142d0:	4c 89 50 30          	mov    %r10,0x30(%rax)
    task->args[4] = a4;
  4142d4:	4c 89 58 38          	mov    %r11,0x38(%rax)
        if (nonTimestamped || newMin == UINT64_MAX) break;
  4142d8:	0f 85 8a 00 00 00    	jne    414368 <_ZN5swarm7spillerEmj+0x128>
  4142de:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
  4142e2:	74 31                	je     414315 <_ZN5swarm7spillerEmj+0xd5>
    for (task = begin; task < end; task++) {
  4142e4:	48 83 c0 40          	add    $0x40,%rax
  4142e8:	48 89 fb             	mov    %rdi,%rbx
  4142eb:	49 39 c4             	cmp    %rax,%r12
  4142ee:	76 25                	jbe    414315 <_ZN5swarm7spillerEmj+0xd5>
    void* prefetch = (void*)(mask &
  4142f0:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
  4142f7:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
    if (pls_likely(prefetch < end)) __builtin_prefetch(prefetch, 1);
  4142fb:	49 39 d4             	cmp    %rdx,%r12
  4142fe:	76 03                	jbe    414303 <_ZN5swarm7spillerEmj+0xc3>
  414300:	0f 18 0a             	prefetcht0 (%rdx)
        :);
  414303:	48 c7 c1 01 08 00 00 	mov    $0x801,%rcx
        :);
  41430a:	48 89 df             	mov    %rbx,%rdi
  41430d:	48 87 c9             	xchg   %rcx,%rcx
    if (pls_unlikely(taskPtrAndFlags == 0ul)) return UINT64_MAX;
  414310:	48 85 f6             	test   %rsi,%rsi
  414313:	75 9b                	jne    4142b0 <_ZN5swarm7spillerEmj+0x70>
  414315:	4c 29 f0             	sub    %r14,%rax
    tdstruct->size = std::distance(begin, task);
  414318:	48 8b 74 24 e0       	mov    -0x20(%rsp),%rsi
  41431d:	48 c1 f8 06          	sar    $0x6,%rax
    if (tdstruct->size > 0) {
  414321:	48 85 c0             	test   %rax,%rax
    tdstruct->size = std::distance(begin, task);
  414324:	48 89 06             	mov    %rax,(%rsi)
    if (tdstruct->size > 0) {
  414327:	0f 84 cb 00 00 00    	je     4143f8 <_ZN5swarm7spillerEmj+0x1b8>
        uintptr_t fp = reinterpret_cast<uintptr_t>(bareRunner<F, f, Args...>);
  41432d:	48 8b 7c 24 e8       	mov    -0x18(%rsp),%rdi
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  414332:	44 89 e9             	mov    %r13d,%ecx
        uintptr_t fp = reinterpret_cast<uintptr_t>(bareRunner<F, f, Args...>);
  414335:	48 b8 d0 32 de ff ff 	movabs $0xffffffffffde32d0,%rax
  41433c:	ff ff ff 
    return (MAGIC_OP_TASK_ENQUEUE_BEGIN + numArgs) | static_cast<uint64_t>(hintFlags);
  41433f:	81 c9 31 0c 02 40    	or     $0x40020c31,%ecx
    } else if (!skipTs && !skipTask && skipHint) {
  414345:	41 f7 c5 00 02 08 01 	test   $0x1080200,%r13d
        uintptr_t fp = reinterpret_cast<uintptr_t>(bareRunner<F, f, Args...>);
  41434c:	48 8d 14 07          	lea    (%rdi,%rax,1),%rdx
    } else if (!skipTs && !skipTask && skipHint) {
  414350:	0f 85 c2 00 00 00    	jne    414418 <_ZN5swarm7spillerEmj+0x1d8>
            :);
  414356:	48 89 df             	mov    %rbx,%rdi
  414359:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  41435c:	e9 a8 00 00 00       	jmpq   414409 <_ZN5swarm7spillerEmj+0x1c9>
  414361:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        for (task = task + 1; task < end; task++) {
  414368:	48 83 c0 40          	add    $0x40,%rax
        :);
  41436c:	31 ed                	xor    %ebp,%ebp
        for (task = task + 1; task < end; task++) {
  41436e:	49 39 c4             	cmp    %rax,%r12
  414371:	77 4f                	ja     4143c2 <_ZN5swarm7spillerEmj+0x182>
  414373:	eb a0                	jmp    414315 <_ZN5swarm7spillerEmj+0xd5>
  414375:	0f 1f 00             	nopl   (%rax)
    *nonTimestamped = taskPtrAndFlags & EnqFlags::NOTIMESTAMP;
  414378:	49 89 f7             	mov    %rsi,%r15
    *requeuerFlags &= taskPtrAndFlags;
  41437b:	49 21 f5             	and    %rsi,%r13
    task->ts = ts;
  41437e:	48 89 38             	mov    %rdi,(%rax)
    *nonTimestamped = taskPtrAndFlags & EnqFlags::NOTIMESTAMP;
  414381:	41 81 e7 00 02 00 00 	and    $0x200,%r15d
            if (newMin == UINT64_MAX) break;
  414388:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
    task->taskPtrAndFlags = taskPtrAndFlags;
  41438c:	48 89 70 08          	mov    %rsi,0x8(%rax)
    task->hint = hint;
  414390:	48 89 50 10          	mov    %rdx,0x10(%rax)
    task->args[0] = a0;
  414394:	48 89 48 18          	mov    %rcx,0x18(%rax)
    task->args[1] = a1;
  414398:	4c 89 40 20          	mov    %r8,0x20(%rax)
    task->args[2] = a2;
  41439c:	4c 89 48 28          	mov    %r9,0x28(%rax)
    task->args[3] = a3;
  4143a0:	4c 89 50 30          	mov    %r10,0x30(%rax)
    task->args[4] = a4;
  4143a4:	4c 89 58 38          	mov    %r11,0x38(%rax)
            if (newMin == UINT64_MAX) break;
  4143a8:	0f 84 67 ff ff ff    	je     414315 <_ZN5swarm7spillerEmj+0xd5>
            if (!nonTimestamped) minTs = 0ul;
  4143ae:	4d 85 ff             	test   %r15,%r15
  4143b1:	48 0f 44 dd          	cmove  %rbp,%rbx
        for (task = task + 1; task < end; task++) {
  4143b5:	48 83 c0 40          	add    $0x40,%rax
  4143b9:	49 39 c4             	cmp    %rax,%r12
  4143bc:	0f 86 53 ff ff ff    	jbe    414315 <_ZN5swarm7spillerEmj+0xd5>
    void* prefetch = (void*)(mask &
  4143c2:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
  4143c9:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
    if (pls_likely(prefetch < end)) __builtin_prefetch(prefetch, 1);
  4143cd:	49 39 d4             	cmp    %rdx,%r12
  4143d0:	76 03                	jbe    4143d5 <_ZN5swarm7spillerEmj+0x195>
  4143d2:	0f 18 0a             	prefetcht0 (%rdx)
        :);
  4143d5:	48 c7 c1 01 08 00 00 	mov    $0x801,%rcx
        :);
  4143dc:	48 89 ef             	mov    %rbp,%rdi
  4143df:	48 87 c9             	xchg   %rcx,%rcx
    if (pls_unlikely(taskPtrAndFlags == 0ul)) return UINT64_MAX;
  4143e2:	48 85 f6             	test   %rsi,%rsi
  4143e5:	75 91                	jne    414378 <_ZN5swarm7spillerEmj+0x138>
  4143e7:	e9 29 ff ff ff       	jmpq   414315 <_ZN5swarm7spillerEmj+0xd5>
    tdstruct->size = std::distance(begin, task);
  4143ec:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4143f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    __builtin_prefetch(&descs->tds[descs->size - 1].ts);
  4143f8:	48 8b 7c 24 e0       	mov    -0x20(%rsp),%rdi
  4143fd:	0f 18 4f c8          	prefetcht0 -0x38(%rdi)
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  414401:	b9 11 20 00 00       	mov    $0x2011,%ecx
  414406:	48 87 c9             	xchg   %rcx,%rcx
}
  414409:	5b                   	pop    %rbx
  41440a:	5d                   	pop    %rbp
  41440b:	41 5c                	pop    %r12
  41440d:	41 5d                	pop    %r13
  41440f:	41 5e                	pop    %r14
  414411:	41 5f                	pop    %r15
  414413:	c3                   	retq   
  414414:	0f 1f 40 00          	nopl   0x0(%rax)
  414418:	48 89 f7             	mov    %rsi,%rdi
            :);
  41441b:	48 89 d6             	mov    %rdx,%rsi
  41441e:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  414421:	eb e6                	jmp    414409 <_ZN5swarm7spillerEmj+0x1c9>
  414423:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41442a:	00 00 00 
  41442d:	0f 1f 00             	nopl   (%rax)

0000000000414430 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45>:
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
           !m_constraints->isIncluded(VertexConstraint(s.time, s.x, s.y));
  }

  bool transitionValid(const State& s1, const State& s2, const Constraints* m_constraints) const {
  414430:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 414430 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45>
  414437:	49 bb d0 6b 21 00 00 	movabs $0x216bd0,%r11
  41443e:	00 00 00 
  414441:	4c 01 d8             	add    %r11,%rax
    assert(m_constraints);
  414444:	48 85 d2             	test   %rdx,%rdx
  414447:	74 5d                	je     4144a6 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x76>
		}
		return false;
	}

	bool isIncluded(EdgeConstraint c) const {
		for (int i = 0; i < edgeConstraints_size; ++i) {
  414449:	8b 8a 44 06 00 00    	mov    0x644(%rdx),%ecx
  41444f:	31 c0                	xor    %eax,%eax
  414451:	48 81 c2 58 02 00 00 	add    $0x258,%rdx
    const auto& con = m_constraints->edgeConstraints;
    return !m_constraints->isIncluded(EdgeConstraint(s1.time, s1.x, s1.y, s2.x, s2.y));
  414458:	44 8b 5e 08          	mov    0x8(%rsi),%r11d
  41445c:	44 8b 56 04          	mov    0x4(%rsi),%r10d
  414460:	44 8b 4f 08          	mov    0x8(%rdi),%r9d
  414464:	44 8b 47 04          	mov    0x4(%rdi),%r8d
  414468:	85 c9                	test   %ecx,%ecx
  41446a:	8b 37                	mov    (%rdi),%esi
  41446c:	7f 0d                	jg     41447b <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x4b>
  41446e:	eb 30                	jmp    4144a0 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x70>
  414470:	83 c0 01             	add    $0x1,%eax
  414473:	48 83 c2 14          	add    $0x14,%rdx
  414477:	39 c8                	cmp    %ecx,%eax
  414479:	7d 25                	jge    4144a0 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x70>
	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
  41447b:	3b 32                	cmp    (%rdx),%esi
  41447d:	75 f1                	jne    414470 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  41447f:	44 3b 42 04          	cmp    0x4(%rdx),%r8d
  414483:	75 eb                	jne    414470 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  414485:	44 3b 4a 08          	cmp    0x8(%rdx),%r9d
  414489:	75 e5                	jne    414470 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  41448b:	44 3b 52 0c          	cmp    0xc(%rdx),%r10d
  41448f:	75 df                	jne    414470 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  414491:	44 3b 5a 10          	cmp    0x10(%rdx),%r11d
  414495:	75 d9                	jne    414470 <_ZNK11Environment15transitionValidERK5StateS2_PK11Constraints.isra.45+0x40>
  414497:	31 c0                	xor    %eax,%eax
  }
  414499:	c3                   	retq   
  41449a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4144a0:	b8 01 00 00 00       	mov    $0x1,%eax
  4144a5:	c3                   	retq   
    assert(m_constraints);
  4144a6:	48 ba 20 89 df ff ff 	movabs $0xffffffffffdf8920,%rdx
  4144ad:	ff ff ff 
  4144b0:	48 be 83 7d df ff ff 	movabs $0xffffffffffdf7d83,%rsi
  4144b7:	ff ff ff 
  4144ba:	48 bf 22 80 df ff ff 	movabs $0xffffffffffdf8022,%rdi
  4144c1:	ff ff ff 
  4144c4:	49 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%r8
  4144cb:	ff ff ff 
  bool transitionValid(const State& s1, const State& s2, const Constraints* m_constraints) const {
  4144ce:	41 57                	push   %r15
    assert(m_constraints);
  4144d0:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
  4144d4:	48 01 c6             	add    %rax,%rsi
  4144d7:	ba 09 01 00 00       	mov    $0x109,%edx
  4144dc:	48 01 c7             	add    %rax,%rdi
  4144df:	49 89 c7             	mov    %rax,%r15
  4144e2:	49 01 c0             	add    %rax,%r8
  4144e5:	41 ff d0             	callq  *%r8
  4144e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4144ef:	00 

00000000004144f0 <_ZN4YAML12BadSubscriptD1Ev>:
 public:
  BadDereference()
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_DEREFERENCE) {}
};

class BadSubscript : public RepresentationException {
  4144f0:	41 57                	push   %r15
  4144f2:	55                   	push   %rbp
  4144f3:	49 bb 10 6b 21 00 00 	movabs $0x216b10,%r11
  4144fa:	00 00 00 
  4144fd:	53                   	push   %rbx
  4144fe:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4144f0 <_ZN4YAML12BadSubscriptD1Ev>
  virtual ~Exception() throw() {}
  414505:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41450c:	ff ff ff 
class BadSubscript : public RepresentationException {
  41450f:	48 89 fd             	mov    %rdi,%rbp
  414512:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414515:	48 01 d8             	add    %rbx,%rax
  414518:	48 89 07             	mov    %rax,(%rdi)
  41451b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41451f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414523:	48 39 c7             	cmp    %rax,%rdi
  414526:	74 12                	je     41453a <_ZN4YAML12BadSubscriptD1Ev+0x4a>
  414528:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41452f:	ff ff ff 
  414532:	49 89 df             	mov    %rbx,%r15
  414535:	48 01 d8             	add    %rbx,%rax
  414538:	ff d0                	callq  *%rax
  41453a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414541:	ff ff ff 
  414544:	48 89 ef             	mov    %rbp,%rdi
  414547:	48 01 d8             	add    %rbx,%rax
class BadSubscript : public RepresentationException {
  41454a:	5b                   	pop    %rbx
  41454b:	5d                   	pop    %rbp
  41454c:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  41454e:	ff e0                	jmpq   *%rax

0000000000414550 <_ZN4YAML23RepresentationExceptionD1Ev>:
class RepresentationException : public Exception {
  414550:	41 57                	push   %r15
  414552:	55                   	push   %rbp
  414553:	49 bb b0 6a 21 00 00 	movabs $0x216ab0,%r11
  41455a:	00 00 00 
  41455d:	53                   	push   %rbx
  41455e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414550 <_ZN4YAML23RepresentationExceptionD1Ev>
  virtual ~Exception() throw() {}
  414565:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41456c:	ff ff ff 
class RepresentationException : public Exception {
  41456f:	48 89 fd             	mov    %rdi,%rbp
  414572:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414575:	48 01 d8             	add    %rbx,%rax
  414578:	48 89 07             	mov    %rax,(%rdi)
  41457b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41457f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414583:	48 39 c7             	cmp    %rax,%rdi
  414586:	74 12                	je     41459a <_ZN4YAML23RepresentationExceptionD1Ev+0x4a>
  414588:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41458f:	ff ff ff 
  414592:	49 89 df             	mov    %rbx,%r15
  414595:	48 01 d8             	add    %rbx,%rax
  414598:	ff d0                	callq  *%rax
  41459a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4145a1:	ff ff ff 
  4145a4:	48 89 ef             	mov    %rbp,%rdi
  4145a7:	48 01 d8             	add    %rbx,%rax
class RepresentationException : public Exception {
  4145aa:	5b                   	pop    %rbx
  4145ab:	5d                   	pop    %rbp
  4145ac:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  4145ae:	ff e0                	jmpq   *%rax

00000000004145b0 <_ZN4YAML18TypedBadConversionIiED1Ev>:
class TypedBadConversion : public BadConversion {
  4145b0:	41 57                	push   %r15
  4145b2:	55                   	push   %rbp
  4145b3:	49 bb 50 6a 21 00 00 	movabs $0x216a50,%r11
  4145ba:	00 00 00 
  4145bd:	53                   	push   %rbx
  4145be:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4145b0 <_ZN4YAML18TypedBadConversionIiED1Ev>
  virtual ~Exception() throw() {}
  4145c5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4145cc:	ff ff ff 
class TypedBadConversion : public BadConversion {
  4145cf:	48 89 fd             	mov    %rdi,%rbp
  4145d2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4145d5:	48 01 d8             	add    %rbx,%rax
  4145d8:	48 89 07             	mov    %rax,(%rdi)
  4145db:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4145df:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4145e3:	48 39 c7             	cmp    %rax,%rdi
  4145e6:	74 12                	je     4145fa <_ZN4YAML18TypedBadConversionIiED1Ev+0x4a>
  4145e8:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4145ef:	ff ff ff 
  4145f2:	49 89 df             	mov    %rbx,%r15
  4145f5:	48 01 d8             	add    %rbx,%rax
  4145f8:	ff d0                	callq  *%rax
  4145fa:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414601:	ff ff ff 
  414604:	48 89 ef             	mov    %rbp,%rdi
  414607:	48 01 d8             	add    %rbx,%rax
class TypedBadConversion : public BadConversion {
  41460a:	5b                   	pop    %rbx
  41460b:	5d                   	pop    %rbp
  41460c:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  41460e:	ff e0                	jmpq   *%rax

0000000000414610 <_ZN4YAML13BadConversionD1Ev>:
class BadConversion : public RepresentationException {
  414610:	41 57                	push   %r15
  414612:	55                   	push   %rbp
  414613:	49 bb f0 69 21 00 00 	movabs $0x2169f0,%r11
  41461a:	00 00 00 
  41461d:	53                   	push   %rbx
  41461e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414610 <_ZN4YAML13BadConversionD1Ev>
  virtual ~Exception() throw() {}
  414625:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41462c:	ff ff ff 
class BadConversion : public RepresentationException {
  41462f:	48 89 fd             	mov    %rdi,%rbp
  414632:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414635:	48 01 d8             	add    %rbx,%rax
  414638:	48 89 07             	mov    %rax,(%rdi)
  41463b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41463f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414643:	48 39 c7             	cmp    %rax,%rdi
  414646:	74 12                	je     41465a <_ZN4YAML13BadConversionD1Ev+0x4a>
  414648:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41464f:	ff ff ff 
  414652:	49 89 df             	mov    %rbx,%r15
  414655:	48 01 d8             	add    %rbx,%rax
  414658:	ff d0                	callq  *%rax
  41465a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414661:	ff ff ff 
  414664:	48 89 ef             	mov    %rbp,%rdi
  414667:	48 01 d8             	add    %rbx,%rax
class BadConversion : public RepresentationException {
  41466a:	5b                   	pop    %rbx
  41466b:	5d                   	pop    %rbp
  41466c:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  41466e:	ff e0                	jmpq   *%rax

0000000000414670 <_ZN4YAML11InvalidNodeD1Ev>:
class InvalidNode : public RepresentationException {
  414670:	41 57                	push   %r15
  414672:	55                   	push   %rbp
  414673:	49 bb 90 69 21 00 00 	movabs $0x216990,%r11
  41467a:	00 00 00 
  41467d:	53                   	push   %rbx
  41467e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414670 <_ZN4YAML11InvalidNodeD1Ev>
  virtual ~Exception() throw() {}
  414685:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41468c:	ff ff ff 
class InvalidNode : public RepresentationException {
  41468f:	48 89 fd             	mov    %rdi,%rbp
  414692:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414695:	48 01 d8             	add    %rbx,%rax
  414698:	48 89 07             	mov    %rax,(%rdi)
  41469b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41469f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  4146a3:	48 39 c7             	cmp    %rax,%rdi
  4146a6:	74 12                	je     4146ba <_ZN4YAML11InvalidNodeD1Ev+0x4a>
  4146a8:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4146af:	ff ff ff 
  4146b2:	49 89 df             	mov    %rbx,%r15
  4146b5:	48 01 d8             	add    %rbx,%rax
  4146b8:	ff d0                	callq  *%rax
  4146ba:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4146c1:	ff ff ff 
  4146c4:	48 89 ef             	mov    %rbp,%rdi
  4146c7:	48 01 d8             	add    %rbx,%rax
class InvalidNode : public RepresentationException {
  4146ca:	5b                   	pop    %rbx
  4146cb:	5d                   	pop    %rbp
  4146cc:	41 5f                	pop    %r15
  virtual ~Exception() throw() {}
  4146ce:	ff e0                	jmpq   *%rax

00000000004146d0 <_ZN4YAML9ExceptionD0Ev>:
  4146d0:	41 57                	push   %r15
  4146d2:	55                   	push   %rbp
  4146d3:	49 bb 30 69 21 00 00 	movabs $0x216930,%r11
  4146da:	00 00 00 
  4146dd:	53                   	push   %rbx
  4146de:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4146d0 <_ZN4YAML9ExceptionD0Ev>
  4146e5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4146ec:	ff ff ff 
  4146ef:	48 89 fd             	mov    %rdi,%rbp
  4146f2:	4c 01 db             	add    %r11,%rbx
  4146f5:	48 01 d8             	add    %rbx,%rax
  4146f8:	48 89 07             	mov    %rax,(%rdi)
  4146fb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4146ff:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414703:	48 39 c7             	cmp    %rax,%rdi
  414706:	74 12                	je     41471a <_ZN4YAML9ExceptionD0Ev+0x4a>
  414708:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41470f:	ff ff ff 
  414712:	49 89 df             	mov    %rbx,%r15
  414715:	48 01 d8             	add    %rbx,%rax
  414718:	ff d0                	callq  *%rax
  41471a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414721:	ff ff ff 
  414724:	48 89 ef             	mov    %rbp,%rdi
  414727:	49 89 df             	mov    %rbx,%r15
  41472a:	48 01 d8             	add    %rbx,%rax
  41472d:	ff d0                	callq  *%rax
  41472f:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414736:	ff ff ff 
  414739:	48 89 ef             	mov    %rbp,%rdi
  41473c:	be 40 00 00 00       	mov    $0x40,%esi
  414741:	48 01 d8             	add    %rbx,%rax
  414744:	5b                   	pop    %rbx
  414745:	5d                   	pop    %rbp
  414746:	41 5f                	pop    %r15
  414748:	ff e0                	jmpq   *%rax
  41474a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414750 <_ZN4YAML11InvalidNodeD0Ev>:
class InvalidNode : public RepresentationException {
  414750:	41 57                	push   %r15
  414752:	55                   	push   %rbp
  414753:	49 bb b0 68 21 00 00 	movabs $0x2168b0,%r11
  41475a:	00 00 00 
  41475d:	53                   	push   %rbx
  41475e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414750 <_ZN4YAML11InvalidNodeD0Ev>
  virtual ~Exception() throw() {}
  414765:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41476c:	ff ff ff 
class InvalidNode : public RepresentationException {
  41476f:	48 89 fd             	mov    %rdi,%rbp
  414772:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414775:	48 01 d8             	add    %rbx,%rax
  414778:	48 89 07             	mov    %rax,(%rdi)
  41477b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41477f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414783:	48 39 c7             	cmp    %rax,%rdi
  414786:	74 12                	je     41479a <_ZN4YAML11InvalidNodeD0Ev+0x4a>
  414788:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41478f:	ff ff ff 
  414792:	49 89 df             	mov    %rbx,%r15
  414795:	48 01 d8             	add    %rbx,%rax
  414798:	ff d0                	callq  *%rax
  41479a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4147a1:	ff ff ff 
  4147a4:	48 89 ef             	mov    %rbp,%rdi
  4147a7:	49 89 df             	mov    %rbx,%r15
  4147aa:	48 01 d8             	add    %rbx,%rax
  4147ad:	ff d0                	callq  *%rax
class InvalidNode : public RepresentationException {
  4147af:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4147b6:	ff ff ff 
  4147b9:	48 89 ef             	mov    %rbp,%rdi
  4147bc:	be 40 00 00 00       	mov    $0x40,%esi
  4147c1:	48 01 d8             	add    %rbx,%rax
  4147c4:	5b                   	pop    %rbx
  4147c5:	5d                   	pop    %rbp
  4147c6:	41 5f                	pop    %r15
  4147c8:	ff e0                	jmpq   *%rax
  4147ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004147d0 <_ZN4YAML23RepresentationExceptionD0Ev>:
class RepresentationException : public Exception {
  4147d0:	41 57                	push   %r15
  4147d2:	55                   	push   %rbp
  4147d3:	49 bb 30 68 21 00 00 	movabs $0x216830,%r11
  4147da:	00 00 00 
  4147dd:	53                   	push   %rbx
  4147de:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4147d0 <_ZN4YAML23RepresentationExceptionD0Ev>
  virtual ~Exception() throw() {}
  4147e5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4147ec:	ff ff ff 
class RepresentationException : public Exception {
  4147ef:	48 89 fd             	mov    %rdi,%rbp
  4147f2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4147f5:	48 01 d8             	add    %rbx,%rax
  4147f8:	48 89 07             	mov    %rax,(%rdi)
  4147fb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4147ff:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414803:	48 39 c7             	cmp    %rax,%rdi
  414806:	74 12                	je     41481a <_ZN4YAML23RepresentationExceptionD0Ev+0x4a>
  414808:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41480f:	ff ff ff 
  414812:	49 89 df             	mov    %rbx,%r15
  414815:	48 01 d8             	add    %rbx,%rax
  414818:	ff d0                	callq  *%rax
  41481a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414821:	ff ff ff 
  414824:	48 89 ef             	mov    %rbp,%rdi
  414827:	49 89 df             	mov    %rbx,%r15
  41482a:	48 01 d8             	add    %rbx,%rax
  41482d:	ff d0                	callq  *%rax
class RepresentationException : public Exception {
  41482f:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414836:	ff ff ff 
  414839:	48 89 ef             	mov    %rbp,%rdi
  41483c:	be 40 00 00 00       	mov    $0x40,%esi
  414841:	48 01 d8             	add    %rbx,%rax
  414844:	5b                   	pop    %rbx
  414845:	5d                   	pop    %rbp
  414846:	41 5f                	pop    %r15
  414848:	ff e0                	jmpq   *%rax
  41484a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414850 <_ZN4YAML13BadConversionD0Ev>:
class BadConversion : public RepresentationException {
  414850:	41 57                	push   %r15
  414852:	55                   	push   %rbp
  414853:	49 bb b0 67 21 00 00 	movabs $0x2167b0,%r11
  41485a:	00 00 00 
  41485d:	53                   	push   %rbx
  41485e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414850 <_ZN4YAML13BadConversionD0Ev>
  virtual ~Exception() throw() {}
  414865:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41486c:	ff ff ff 
class BadConversion : public RepresentationException {
  41486f:	48 89 fd             	mov    %rdi,%rbp
  414872:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414875:	48 01 d8             	add    %rbx,%rax
  414878:	48 89 07             	mov    %rax,(%rdi)
  41487b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41487f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414883:	48 39 c7             	cmp    %rax,%rdi
  414886:	74 12                	je     41489a <_ZN4YAML13BadConversionD0Ev+0x4a>
  414888:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41488f:	ff ff ff 
  414892:	49 89 df             	mov    %rbx,%r15
  414895:	48 01 d8             	add    %rbx,%rax
  414898:	ff d0                	callq  *%rax
  41489a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4148a1:	ff ff ff 
  4148a4:	48 89 ef             	mov    %rbp,%rdi
  4148a7:	49 89 df             	mov    %rbx,%r15
  4148aa:	48 01 d8             	add    %rbx,%rax
  4148ad:	ff d0                	callq  *%rax
class BadConversion : public RepresentationException {
  4148af:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4148b6:	ff ff ff 
  4148b9:	48 89 ef             	mov    %rbp,%rdi
  4148bc:	be 40 00 00 00       	mov    $0x40,%esi
  4148c1:	48 01 d8             	add    %rbx,%rax
  4148c4:	5b                   	pop    %rbx
  4148c5:	5d                   	pop    %rbp
  4148c6:	41 5f                	pop    %r15
  4148c8:	ff e0                	jmpq   *%rax
  4148ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004148d0 <_ZN4YAML12BadSubscriptD0Ev>:
class BadSubscript : public RepresentationException {
  4148d0:	41 57                	push   %r15
  4148d2:	55                   	push   %rbp
  4148d3:	49 bb 30 67 21 00 00 	movabs $0x216730,%r11
  4148da:	00 00 00 
  4148dd:	53                   	push   %rbx
  4148de:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4148d0 <_ZN4YAML12BadSubscriptD0Ev>
  virtual ~Exception() throw() {}
  4148e5:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  4148ec:	ff ff ff 
class BadSubscript : public RepresentationException {
  4148ef:	48 89 fd             	mov    %rdi,%rbp
  4148f2:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  4148f5:	48 01 d8             	add    %rbx,%rax
  4148f8:	48 89 07             	mov    %rax,(%rdi)
  4148fb:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4148ff:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414903:	48 39 c7             	cmp    %rax,%rdi
  414906:	74 12                	je     41491a <_ZN4YAML12BadSubscriptD0Ev+0x4a>
  414908:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41490f:	ff ff ff 
  414912:	49 89 df             	mov    %rbx,%r15
  414915:	48 01 d8             	add    %rbx,%rax
  414918:	ff d0                	callq  *%rax
  41491a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414921:	ff ff ff 
  414924:	48 89 ef             	mov    %rbp,%rdi
  414927:	49 89 df             	mov    %rbx,%r15
  41492a:	48 01 d8             	add    %rbx,%rax
  41492d:	ff d0                	callq  *%rax
class BadSubscript : public RepresentationException {
  41492f:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414936:	ff ff ff 
  414939:	48 89 ef             	mov    %rbp,%rdi
  41493c:	be 40 00 00 00       	mov    $0x40,%esi
  414941:	48 01 d8             	add    %rbx,%rax
  414944:	5b                   	pop    %rbx
  414945:	5d                   	pop    %rbp
  414946:	41 5f                	pop    %r15
  414948:	ff e0                	jmpq   *%rax
  41494a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000414950 <_ZN4YAML18TypedBadConversionIiED0Ev>:
class TypedBadConversion : public BadConversion {
  414950:	41 57                	push   %r15
  414952:	55                   	push   %rbp
  414953:	49 bb b0 66 21 00 00 	movabs $0x2166b0,%r11
  41495a:	00 00 00 
  41495d:	53                   	push   %rbx
  41495e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414950 <_ZN4YAML18TypedBadConversionIiED0Ev>
  virtual ~Exception() throw() {}
  414965:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  41496c:	ff ff ff 
class TypedBadConversion : public BadConversion {
  41496f:	48 89 fd             	mov    %rdi,%rbp
  414972:	4c 01 db             	add    %r11,%rbx
  virtual ~Exception() throw() {}
  414975:	48 01 d8             	add    %rbx,%rax
  414978:	48 89 07             	mov    %rax,(%rdi)
  41497b:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41497f:	48 8d 45 30          	lea    0x30(%rbp),%rax
	if (!_M_is_local())
  414983:	48 39 c7             	cmp    %rax,%rdi
  414986:	74 12                	je     41499a <_ZN4YAML18TypedBadConversionIiED0Ev+0x4a>
  414988:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41498f:	ff ff ff 
  414992:	49 89 df             	mov    %rbx,%r15
  414995:	48 01 d8             	add    %rbx,%rax
  414998:	ff d0                	callq  *%rax
  41499a:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4149a1:	ff ff ff 
  4149a4:	48 89 ef             	mov    %rbp,%rdi
  4149a7:	49 89 df             	mov    %rbx,%r15
  4149aa:	48 01 d8             	add    %rbx,%rax
  4149ad:	ff d0                	callq  *%rax
class TypedBadConversion : public BadConversion {
  4149af:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4149b6:	ff ff ff 
  4149b9:	48 89 ef             	mov    %rbp,%rdi
  4149bc:	be 40 00 00 00       	mov    $0x40,%esi
  4149c1:	48 01 d8             	add    %rbx,%rax
  4149c4:	5b                   	pop    %rbx
  4149c5:	5d                   	pop    %rbp
  4149c6:	41 5f                	pop    %r15
  4149c8:	ff e0                	jmpq   *%rax
  4149ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004149d0 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED1Ev>:
class basic_pointerbuf : public BufferT {
  4149d0:	41 57                	push   %r15
  4149d2:	55                   	push   %rbp
  4149d3:	49 bb 30 66 21 00 00 	movabs $0x216630,%r11
  4149da:	00 00 00 
  4149dd:	53                   	push   %rbx
  4149de:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4149d0 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED1Ev>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
  4149e5:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  4149ec:	ff ff ff 
  4149ef:	48 89 fd             	mov    %rdi,%rbp
  4149f2:	4c 01 db             	add    %r11,%rbx
  4149f5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4149f9:	48 83 c0 10          	add    $0x10,%rax
  4149fd:	48 89 07             	mov    %rax,(%rdi)
  414a00:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414a04:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  414a08:	48 39 c7             	cmp    %rax,%rdi
  414a0b:	74 12                	je     414a1f <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED1Ev+0x4f>
  414a0d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414a14:	ff ff ff 
  414a17:	49 89 df             	mov    %rbx,%r15
  414a1a:	48 01 d8             	add    %rbx,%rax
  414a1d:	ff d0                	callq  *%rax
  414a1f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414a26:	ff ff ff 
  414a29:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  414a2d:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414a31:	48 83 c0 10          	add    $0x10,%rax
  414a35:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414a39:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  414a40:	ff ff ff 
  414a43:	48 01 d8             	add    %rbx,%rax
  414a46:	5b                   	pop    %rbx
  414a47:	5d                   	pop    %rbp
  414a48:	41 5f                	pop    %r15
  414a4a:	ff e0                	jmpq   *%rax
  414a4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414a50 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED1Ev>:
  414a50:	41 57                	push   %r15
  414a52:	55                   	push   %rbp
  414a53:	49 bb b0 65 21 00 00 	movabs $0x2165b0,%r11
  414a5a:	00 00 00 
  414a5d:	53                   	push   %rbx
  414a5e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414a50 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED1Ev>
  414a65:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  414a6c:	ff ff ff 
  414a6f:	48 89 fd             	mov    %rdi,%rbp
  414a72:	4c 01 db             	add    %r11,%rbx
  414a75:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414a79:	48 83 c0 10          	add    $0x10,%rax
  414a7d:	48 89 07             	mov    %rax,(%rdi)
  414a80:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414a84:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  414a88:	48 39 c7             	cmp    %rax,%rdi
  414a8b:	74 12                	je     414a9f <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED1Ev+0x4f>
  414a8d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414a94:	ff ff ff 
  414a97:	49 89 df             	mov    %rbx,%r15
  414a9a:	48 01 d8             	add    %rbx,%rax
  414a9d:	ff d0                	callq  *%rax
  414a9f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414aa6:	ff ff ff 
  414aa9:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  414aad:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414ab1:	48 83 c0 10          	add    $0x10,%rax
  414ab5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414ab9:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  414ac0:	ff ff ff 
  414ac3:	48 01 d8             	add    %rbx,%rax
  414ac6:	5b                   	pop    %rbx
  414ac7:	5d                   	pop    %rbp
  414ac8:	41 5f                	pop    %r15
  414aca:	ff e0                	jmpq   *%rax
  414acc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414ad0 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED0Ev>:
  414ad0:	41 57                	push   %r15
  414ad2:	55                   	push   %rbp
  414ad3:	49 bb 30 65 21 00 00 	movabs $0x216530,%r11
  414ada:	00 00 00 
  414add:	53                   	push   %rbx
  414ade:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414ad0 <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED0Ev>
  414ae5:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  414aec:	ff ff ff 
  414aef:	48 89 fd             	mov    %rdi,%rbp
  414af2:	4c 01 db             	add    %r11,%rbx
  414af5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414af9:	48 83 c0 10          	add    $0x10,%rax
  414afd:	48 89 07             	mov    %rax,(%rdi)
  414b00:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414b04:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  414b08:	48 39 c7             	cmp    %rax,%rdi
  414b0b:	74 12                	je     414b1f <_ZN5boost6detail17basic_unlockedbufINSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEcED0Ev+0x4f>
  414b0d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414b14:	ff ff ff 
  414b17:	49 89 df             	mov    %rbx,%r15
  414b1a:	48 01 d8             	add    %rbx,%rax
  414b1d:	ff d0                	callq  *%rax
  414b1f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414b26:	ff ff ff 
  414b29:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  414b2d:	49 89 df             	mov    %rbx,%r15
  414b30:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414b34:	48 83 c0 10          	add    $0x10,%rax
  414b38:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414b3c:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  414b43:	ff ff ff 
  414b46:	48 01 d8             	add    %rbx,%rax
  414b49:	ff d0                	callq  *%rax
  414b4b:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414b52:	ff ff ff 
  414b55:	48 89 ef             	mov    %rbp,%rdi
  414b58:	be 68 00 00 00       	mov    $0x68,%esi
  414b5d:	48 01 d8             	add    %rbx,%rax
  414b60:	5b                   	pop    %rbx
  414b61:	5d                   	pop    %rbp
  414b62:	41 5f                	pop    %r15
  414b64:	ff e0                	jmpq   *%rax
  414b66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414b6d:	00 00 00 

0000000000414b70 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED0Ev>:
  414b70:	41 57                	push   %r15
  414b72:	55                   	push   %rbp
  414b73:	49 bb 90 64 21 00 00 	movabs $0x216490,%r11
  414b7a:	00 00 00 
  414b7d:	53                   	push   %rbx
  414b7e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414b70 <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED0Ev>
  414b85:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  414b8c:	ff ff ff 
  414b8f:	48 89 fd             	mov    %rdi,%rbp
  414b92:	4c 01 db             	add    %r11,%rbx
  414b95:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414b99:	48 83 c0 10          	add    $0x10,%rax
  414b9d:	48 89 07             	mov    %rax,(%rdi)
  414ba0:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  414ba4:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  414ba8:	48 39 c7             	cmp    %rax,%rdi
  414bab:	74 12                	je     414bbf <_ZN5boost6detail16basic_pointerbufIcNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEEED0Ev+0x4f>
  414bad:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414bb4:	ff ff ff 
  414bb7:	49 89 df             	mov    %rbx,%r15
  414bba:	48 01 d8             	add    %rbx,%rax
  414bbd:	ff d0                	callq  *%rax
  414bbf:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  414bc6:	ff ff ff 
  414bc9:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  414bcd:	49 89 df             	mov    %rbx,%r15
  414bd0:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  414bd4:	48 83 c0 10          	add    $0x10,%rax
  414bd8:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414bdc:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  414be3:	ff ff ff 
  414be6:	48 01 d8             	add    %rbx,%rax
  414be9:	ff d0                	callq  *%rax
  414beb:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414bf2:	ff ff ff 
  414bf5:	48 89 ef             	mov    %rbp,%rdi
  414bf8:	be 68 00 00 00       	mov    $0x68,%esi
  414bfd:	48 01 d8             	add    %rbx,%rax
  414c00:	5b                   	pop    %rbx
  414c01:	5d                   	pop    %rbp
  414c02:	41 5f                	pop    %r15
  414c04:	ff e0                	jmpq   *%rax
  414c06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414c0d:	00 00 00 

0000000000414c10 <_ZN11EnvironmentD1Ev>:
class Environment {
  414c10:	41 57                	push   %r15
  414c12:	41 55                	push   %r13
  414c14:	49 89 fd             	mov    %rdi,%r13
  414c17:	41 54                	push   %r12
  414c19:	55                   	push   %rbp
  414c1a:	48 8d 2d ef ff ff ff 	lea    -0x11(%rip),%rbp        # 414c10 <_ZN11EnvironmentD1Ev>
  414c21:	53                   	push   %rbx
  414c22:	48 8b 7f 30          	mov    0x30(%rdi),%rdi
  414c26:	49 bb f0 63 21 00 00 	movabs $0x2163f0,%r11
  414c2d:	00 00 00 
  414c30:	4c 01 dd             	add    %r11,%rbp
  414c33:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  414c3a:	ff ff ff 
  414c3d:	49 01 ec             	add    %rbp,%r12
      while (__n)
  414c40:	48 85 ff             	test   %rdi,%rdi
  414c43:	74 14                	je     414c59 <_ZN11EnvironmentD1Ev+0x49>
  414c45:	0f 1f 00             	nopl   (%rax)
  414c48:	48 8b 1f             	mov    (%rdi),%rbx
  414c4b:	49 89 ef             	mov    %rbp,%r15
  414c4e:	41 ff d4             	callq  *%r12
  414c51:	48 85 db             	test   %rbx,%rbx
  414c54:	48 89 df             	mov    %rbx,%rdi
  414c57:	75 ef                	jne    414c48 <_ZN11EnvironmentD1Ev+0x38>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  414c59:	49 8b 45 28          	mov    0x28(%r13),%rax
  414c5d:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  414c61:	31 f6                	xor    %esi,%esi
  414c63:	49 89 ef             	mov    %rbp,%r15
  414c66:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  414c6d:	00 
  414c6e:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  414c75:	ff ff ff 
  414c78:	48 01 e8             	add    %rbp,%rax
  414c7b:	ff d0                	callq  *%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  414c7d:	49 8b 7d 20          	mov    0x20(%r13),%rdi
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  414c81:	49 8d 45 50          	lea    0x50(%r13),%rax
      _M_element_count = 0;
  414c85:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
  414c8c:	00 
      _M_before_begin._M_nxt = nullptr;
  414c8d:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
  414c94:	00 
	if (_M_uses_single_bucket(__bkts))
  414c95:	48 39 c7             	cmp    %rax,%rdi
  414c98:	74 12                	je     414cac <_ZN11EnvironmentD1Ev+0x9c>
  414c9a:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414ca1:	ff ff ff 
  414ca4:	49 89 ef             	mov    %rbp,%r15
  414ca7:	48 01 e8             	add    %rbp,%rax
  414caa:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  414cac:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	if (__p)
  414cb0:	48 85 ff             	test   %rdi,%rdi
  414cb3:	74 1b                	je     414cd0 <_ZN11EnvironmentD1Ev+0xc0>
  414cb5:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  414cbc:	ff ff ff 
  414cbf:	5b                   	pop    %rbx
  414cc0:	48 01 e8             	add    %rbp,%rax
  414cc3:	5d                   	pop    %rbp
  414cc4:	41 5c                	pop    %r12
  414cc6:	41 5d                	pop    %r13
  414cc8:	41 5f                	pop    %r15
  414cca:	ff e0                	jmpq   *%rax
  414ccc:	0f 1f 40 00          	nopl   0x0(%rax)
  414cd0:	5b                   	pop    %rbx
  414cd1:	5d                   	pop    %rbp
  414cd2:	41 5c                	pop    %r12
  414cd4:	41 5d                	pop    %r13
  414cd6:	41 5f                	pop    %r15
  414cd8:	c3                   	retq   
  414cd9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000414ce0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>:
            ~clone_impl() throw()
  414ce0:	41 57                	push   %r15
  414ce2:	55                   	push   %rbp
  414ce3:	49 bb 20 63 21 00 00 	movabs $0x216320,%r11
  414cea:	00 00 00 
  414ced:	53                   	push   %rbx
  414cee:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414ce0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>
                }
  414cf5:	48 b8 20 f1 ff ff ff 	movabs $0xfffffffffffff120,%rax
  414cfc:	ff ff ff 
            ~clone_impl() throw()
  414cff:	48 89 fd             	mov    %rdi,%rbp
  414d02:	4c 01 db             	add    %r11,%rbx
                }
  414d05:	48 01 d8             	add    %rbx,%rax
  414d08:	48 89 47 40          	mov    %rax,0x40(%rdi)
                }
  414d0c:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  414d13:	ff ff ff 
  414d16:	48 01 d8             	add    %rbx,%rax
  414d19:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414d1c:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414d23:	ff ff ff 
  414d26:	48 01 d8             	add    %rbx,%rax
  414d29:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  414d2d:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  414d31:	48 85 ff             	test   %rdi,%rdi
  414d34:	74 06                	je     414d3c <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev+0x5c>
  414d36:	48 8b 07             	mov    (%rdi),%rax
  414d39:	ff 50 20             	callq  *0x20(%rax)
  414d3c:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  414d43:	ff ff ff 
  414d46:	48 89 ef             	mov    %rbp,%rdi
  414d49:	48 01 d8             	add    %rbx,%rax
  414d4c:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414d50:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  414d57:	ff ff ff 
  414d5a:	48 01 d8             	add    %rbx,%rax
                }
  414d5d:	5b                   	pop    %rbx
  414d5e:	5d                   	pop    %rbp
  414d5f:	41 5f                	pop    %r15
  414d61:	ff e0                	jmpq   *%rax
  414d63:	0f 1f 00             	nopl   (%rax)
  414d66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414d6d:	00 00 00 

0000000000414d70 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>:
            ~clone_impl() throw()
  414d70:	48 83 ef 18          	sub    $0x18,%rdi
  414d74:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414d74 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev+0x4>
  414d7b:	49 ba 8c 62 21 00 00 	movabs $0x21628c,%r10
  414d82:	00 00 00 
  414d85:	4d 01 d3             	add    %r10,%r11
  414d88:	49 ba e0 9c de ff ff 	movabs $0xffffffffffde9ce0,%r10
  414d8f:	ff ff ff 
  414d92:	4d 01 da             	add    %r11,%r10
  414d95:	41 ff e2             	jmpq   *%r10
  414d98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  414d9f:	00 

0000000000414da0 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev>:
  414da0:	4c 8b 17             	mov    (%rdi),%r10
  414da3:	49 03 7a d8          	add    -0x28(%r10),%rdi
  414da7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414da7 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED1Ev+0x7>
  414dae:	49 ba 59 62 21 00 00 	movabs $0x216259,%r10
  414db5:	00 00 00 
  414db8:	4d 01 d3             	add    %r10,%r11
  414dbb:	49 ba e0 9c de ff ff 	movabs $0xffffffffffde9ce0,%r10
  414dc2:	ff ff ff 
  414dc5:	4d 01 da             	add    %r11,%r10
  414dc8:	41 ff e2             	jmpq   *%r10
  414dcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000414dd0 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev>:
            ~error_info_injector() throw()
  414dd0:	41 57                	push   %r15
  414dd2:	55                   	push   %rbp
  414dd3:	49 bb 30 62 21 00 00 	movabs $0x216230,%r11
  414dda:	00 00 00 
  414ddd:	53                   	push   %rbx
  414dde:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414dd0 <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev>
                }
  414de5:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  414dec:	ff ff ff 
            ~error_info_injector() throw()
  414def:	48 89 fd             	mov    %rdi,%rbp
  414df2:	4c 01 db             	add    %r11,%rbx
                }
  414df5:	48 01 d8             	add    %rbx,%rax
  414df8:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414dfb:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414e02:	ff ff ff 
  414e05:	48 01 d8             	add    %rbx,%rax
  414e08:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  414e0c:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  414e10:	48 85 ff             	test   %rdi,%rdi
  414e13:	74 06                	je     414e1b <_ZN5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev+0x4b>
  414e15:	48 8b 07             	mov    (%rdi),%rax
  414e18:	ff 50 20             	callq  *0x20(%rax)
  414e1b:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  414e22:	ff ff ff 
  414e25:	48 89 ef             	mov    %rbp,%rdi
  414e28:	49 89 df             	mov    %rbx,%r15
  414e2b:	48 01 d8             	add    %rbx,%rax
  414e2e:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414e32:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  414e39:	ff ff ff 
  414e3c:	48 01 d8             	add    %rbx,%rax
  414e3f:	ff d0                	callq  *%rax
                }
  414e41:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414e48:	ff ff ff 
  414e4b:	48 89 ef             	mov    %rbp,%rdi
  414e4e:	be 40 00 00 00       	mov    $0x40,%esi
  414e53:	48 01 d8             	add    %rbx,%rax
  414e56:	5b                   	pop    %rbx
  414e57:	5d                   	pop    %rbp
  414e58:	41 5f                	pop    %r15
  414e5a:	ff e0                	jmpq   *%rax
  414e5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414e60 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev>:
            ~error_info_injector() throw()
  414e60:	48 83 ef 18          	sub    $0x18,%rdi
  414e64:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414e64 <_ZThn24_N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEED0Ev+0x4>
  414e6b:	49 ba 9c 61 21 00 00 	movabs $0x21619c,%r10
  414e72:	00 00 00 
  414e75:	4d 01 d3             	add    %r10,%r11
  414e78:	49 ba d0 9d de ff ff 	movabs $0xffffffffffde9dd0,%r10
  414e7f:	ff ff ff 
  414e82:	4d 01 da             	add    %r11,%r10
  414e85:	41 ff e2             	jmpq   *%r10
  414e88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  414e8f:	00 

0000000000414e90 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev>:
  414e90:	41 57                	push   %r15
  414e92:	55                   	push   %rbp
  414e93:	49 bb 70 61 21 00 00 	movabs $0x216170,%r11
  414e9a:	00 00 00 
  414e9d:	53                   	push   %rbx
  414e9e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414e90 <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev>
                }
  414ea5:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  414eac:	ff ff ff 
            ~error_info_injector() throw()
  414eaf:	48 89 fd             	mov    %rdi,%rbp
  414eb2:	4c 01 db             	add    %r11,%rbx
                }
  414eb5:	48 01 d8             	add    %rbx,%rax
  414eb8:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414ebb:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414ec2:	ff ff ff 
  414ec5:	48 01 d8             	add    %rbx,%rax
  414ec8:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  414ecc:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  414ed0:	48 85 ff             	test   %rdi,%rdi
  414ed3:	74 06                	je     414edb <_ZN5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev+0x4b>
  414ed5:	48 8b 07             	mov    (%rdi),%rax
  414ed8:	ff 50 20             	callq  *0x20(%rax)
  414edb:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  414ee2:	ff ff ff 
  414ee5:	48 89 ef             	mov    %rbp,%rdi
  414ee8:	49 89 df             	mov    %rbx,%r15
  414eeb:	48 01 d8             	add    %rbx,%rax
  414eee:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414ef2:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414ef9:	ff ff ff 
  414efc:	48 01 d8             	add    %rbx,%rax
  414eff:	ff d0                	callq  *%rax
                }
  414f01:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  414f08:	ff ff ff 
  414f0b:	48 89 ef             	mov    %rbp,%rdi
  414f0e:	be 38 00 00 00       	mov    $0x38,%esi
  414f13:	48 01 d8             	add    %rbx,%rax
  414f16:	5b                   	pop    %rbx
  414f17:	5d                   	pop    %rbp
  414f18:	41 5f                	pop    %r15
  414f1a:	ff e0                	jmpq   *%rax
  414f1c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414f20 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev>:
            ~error_info_injector() throw()
  414f20:	48 83 ef 10          	sub    $0x10,%rdi
  414f24:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414f24 <_ZThn16_N5boost16exception_detail19error_info_injectorINS_17bad_function_callEED0Ev+0x4>
  414f2b:	49 ba dc 60 21 00 00 	movabs $0x2160dc,%r10
  414f32:	00 00 00 
  414f35:	4d 01 d3             	add    %r10,%r11
  414f38:	49 ba 90 9e de ff ff 	movabs $0xffffffffffde9e90,%r10
  414f3f:	ff ff ff 
  414f42:	4d 01 da             	add    %r11,%r10
  414f45:	41 ff e2             	jmpq   *%r10
  414f48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  414f4f:	00 

0000000000414f50 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>:
            ~clone_impl() throw()
  414f50:	41 57                	push   %r15
  414f52:	55                   	push   %rbp
  414f53:	49 bb b0 60 21 00 00 	movabs $0x2160b0,%r11
  414f5a:	00 00 00 
  414f5d:	53                   	push   %rbx
  414f5e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 414f50 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>
                }
  414f65:	48 b8 90 f3 ff ff ff 	movabs $0xfffffffffffff390,%rax
  414f6c:	ff ff ff 
            ~clone_impl() throw()
  414f6f:	48 89 fd             	mov    %rdi,%rbp
  414f72:	4c 01 db             	add    %r11,%rbx
                }
  414f75:	48 01 d8             	add    %rbx,%rax
  414f78:	48 89 47 38          	mov    %rax,0x38(%rdi)
                }
  414f7c:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  414f83:	ff ff ff 
  414f86:	48 01 d8             	add    %rbx,%rax
  414f89:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  414f8c:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  414f93:	ff ff ff 
  414f96:	48 01 d8             	add    %rbx,%rax
  414f99:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  414f9d:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  414fa1:	48 85 ff             	test   %rdi,%rdi
  414fa4:	74 06                	je     414fac <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev+0x5c>
  414fa6:	48 8b 07             	mov    (%rdi),%rax
  414fa9:	ff 50 20             	callq  *0x20(%rax)
  414fac:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  414fb3:	ff ff ff 
  414fb6:	48 89 ef             	mov    %rbp,%rdi
  414fb9:	48 01 d8             	add    %rbx,%rax
  414fbc:	48 89 45 00          	mov    %rax,0x0(%rbp)
  414fc0:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  414fc7:	ff ff ff 
  414fca:	48 01 d8             	add    %rbx,%rax
                }
  414fcd:	5b                   	pop    %rbx
  414fce:	5d                   	pop    %rbp
  414fcf:	41 5f                	pop    %r15
  414fd1:	ff e0                	jmpq   *%rax
  414fd3:	0f 1f 00             	nopl   (%rax)
  414fd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  414fdd:	00 00 00 

0000000000414fe0 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>:
            ~clone_impl() throw()
  414fe0:	48 83 ef 10          	sub    $0x10,%rdi
  414fe4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 414fe4 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev+0x4>
  414feb:	49 ba 1c 60 21 00 00 	movabs $0x21601c,%r10
  414ff2:	00 00 00 
  414ff5:	4d 01 d3             	add    %r10,%r11
  414ff8:	49 ba 50 9f de ff ff 	movabs $0xffffffffffde9f50,%r10
  414fff:	ff ff ff 
  415002:	4d 01 da             	add    %r11,%r10
  415005:	41 ff e2             	jmpq   *%r10
  415008:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41500f:	00 

0000000000415010 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev>:
  415010:	4c 8b 17             	mov    (%rdi),%r10
  415013:	49 03 7a d8          	add    -0x28(%r10),%rdi
  415017:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 415017 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED1Ev+0x7>
  41501e:	49 ba e9 5f 21 00 00 	movabs $0x215fe9,%r10
  415025:	00 00 00 
  415028:	4d 01 d3             	add    %r10,%r11
  41502b:	49 ba 50 9f de ff ff 	movabs $0xffffffffffde9f50,%r10
  415032:	ff ff ff 
  415035:	4d 01 da             	add    %r11,%r10
  415038:	41 ff e2             	jmpq   *%r10
  41503b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415040 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>:
  415040:	41 57                	push   %r15
  415042:	55                   	push   %rbp
  415043:	49 bb c0 5f 21 00 00 	movabs $0x215fc0,%r11
  41504a:	00 00 00 
  41504d:	53                   	push   %rbx
  41504e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 415040 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>
                }
  415055:	48 b8 20 f1 ff ff ff 	movabs $0xfffffffffffff120,%rax
  41505c:	ff ff ff 
            ~clone_impl() throw()
  41505f:	48 89 fd             	mov    %rdi,%rbp
  415062:	4c 01 db             	add    %r11,%rbx
                }
  415065:	48 01 d8             	add    %rbx,%rax
  415068:	48 89 47 40          	mov    %rax,0x40(%rdi)
                }
  41506c:	48 b8 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rax
  415073:	ff ff ff 
  415076:	48 01 d8             	add    %rbx,%rax
  415079:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  41507c:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  415083:	ff ff ff 
  415086:	48 01 d8             	add    %rbx,%rax
  415089:	48 89 47 18          	mov    %rax,0x18(%rdi)
                if( px_ && px_->release() )
  41508d:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
  415091:	48 85 ff             	test   %rdi,%rdi
  415094:	74 06                	je     41509c <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev+0x5c>
  415096:	48 8b 07             	mov    (%rdi),%rax
  415099:	ff 50 20             	callq  *0x20(%rax)
  41509c:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  4150a3:	ff ff ff 
  4150a6:	48 89 ef             	mov    %rbp,%rdi
  4150a9:	49 89 df             	mov    %rbx,%r15
  4150ac:	48 01 d8             	add    %rbx,%rax
  4150af:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4150b3:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  4150ba:	ff ff ff 
  4150bd:	48 01 d8             	add    %rbx,%rax
  4150c0:	ff d0                	callq  *%rax
                }
  4150c2:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4150c9:	ff ff ff 
  4150cc:	48 89 ef             	mov    %rbp,%rdi
  4150cf:	be 48 00 00 00       	mov    $0x48,%esi
  4150d4:	48 01 d8             	add    %rbx,%rax
  4150d7:	5b                   	pop    %rbx
  4150d8:	5d                   	pop    %rbp
  4150d9:	41 5f                	pop    %r15
  4150db:	ff e0                	jmpq   *%rax
  4150dd:	0f 1f 00             	nopl   (%rax)

00000000004150e0 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>:
            ~clone_impl() throw()
  4150e0:	48 83 ef 18          	sub    $0x18,%rdi
  4150e4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4150e4 <_ZThn24_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev+0x4>
  4150eb:	49 ba 1c 5f 21 00 00 	movabs $0x215f1c,%r10
  4150f2:	00 00 00 
  4150f5:	4d 01 d3             	add    %r10,%r11
  4150f8:	49 ba 40 a0 de ff ff 	movabs $0xffffffffffdea040,%r10
  4150ff:	ff ff ff 
  415102:	4d 01 da             	add    %r11,%r10
  415105:	41 ff e2             	jmpq   *%r10
  415108:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41510f:	00 

0000000000415110 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev>:
  415110:	4c 8b 17             	mov    (%rdi),%r10
  415113:	49 03 7a d8          	add    -0x28(%r10),%rdi
  415117:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 415117 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEED0Ev+0x7>
  41511e:	49 ba e9 5e 21 00 00 	movabs $0x215ee9,%r10
  415125:	00 00 00 
  415128:	4d 01 d3             	add    %r10,%r11
  41512b:	49 ba 40 a0 de ff ff 	movabs $0xffffffffffdea040,%r10
  415132:	ff ff ff 
  415135:	4d 01 da             	add    %r11,%r10
  415138:	41 ff e2             	jmpq   *%r10
  41513b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415140 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>:
  415140:	41 57                	push   %r15
  415142:	55                   	push   %rbp
  415143:	49 bb c0 5e 21 00 00 	movabs $0x215ec0,%r11
  41514a:	00 00 00 
  41514d:	53                   	push   %rbx
  41514e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 415140 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>
                }
  415155:	48 b8 90 f3 ff ff ff 	movabs $0xfffffffffffff390,%rax
  41515c:	ff ff ff 
            ~clone_impl() throw()
  41515f:	48 89 fd             	mov    %rdi,%rbp
  415162:	4c 01 db             	add    %r11,%rbx
                }
  415165:	48 01 d8             	add    %rbx,%rax
  415168:	48 89 47 38          	mov    %rax,0x38(%rdi)
                }
  41516c:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  415173:	ff ff ff 
  415176:	48 01 d8             	add    %rbx,%rax
  415179:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  41517c:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  415183:	ff ff ff 
  415186:	48 01 d8             	add    %rbx,%rax
  415189:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  41518d:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  415191:	48 85 ff             	test   %rdi,%rdi
  415194:	74 06                	je     41519c <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev+0x5c>
  415196:	48 8b 07             	mov    (%rdi),%rax
  415199:	ff 50 20             	callq  *0x20(%rax)
  41519c:	48 b8 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%rax
  4151a3:	ff ff ff 
  4151a6:	48 89 ef             	mov    %rbp,%rdi
  4151a9:	49 89 df             	mov    %rbx,%r15
  4151ac:	48 01 d8             	add    %rbx,%rax
  4151af:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4151b3:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  4151ba:	ff ff ff 
  4151bd:	48 01 d8             	add    %rbx,%rax
  4151c0:	ff d0                	callq  *%rax
                }
  4151c2:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4151c9:	ff ff ff 
  4151cc:	48 89 ef             	mov    %rbp,%rdi
  4151cf:	be 40 00 00 00       	mov    $0x40,%esi
  4151d4:	48 01 d8             	add    %rbx,%rax
  4151d7:	5b                   	pop    %rbx
  4151d8:	5d                   	pop    %rbp
  4151d9:	41 5f                	pop    %r15
  4151db:	ff e0                	jmpq   *%rax
  4151dd:	0f 1f 00             	nopl   (%rax)

00000000004151e0 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>:
            ~clone_impl() throw()
  4151e0:	48 83 ef 10          	sub    $0x10,%rdi
  4151e4:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4151e4 <_ZThn16_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev+0x4>
  4151eb:	49 ba 1c 5e 21 00 00 	movabs $0x215e1c,%r10
  4151f2:	00 00 00 
  4151f5:	4d 01 d3             	add    %r10,%r11
  4151f8:	49 ba 40 a1 de ff ff 	movabs $0xffffffffffdea140,%r10
  4151ff:	ff ff ff 
  415202:	4d 01 da             	add    %r11,%r10
  415205:	41 ff e2             	jmpq   *%r10
  415208:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41520f:	00 

0000000000415210 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev>:
  415210:	4c 8b 17             	mov    (%rdi),%r10
  415213:	49 03 7a d8          	add    -0x28(%r10),%rdi
  415217:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 415217 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEED0Ev+0x7>
  41521e:	49 ba e9 5d 21 00 00 	movabs $0x215de9,%r10
  415225:	00 00 00 
  415228:	4d 01 d3             	add    %r10,%r11
  41522b:	49 ba 40 a1 de ff ff 	movabs $0xffffffffffdea140,%r10
  415232:	ff ff ff 
  415235:	4d 01 da             	add    %r11,%r10
  415238:	41 ff e2             	jmpq   *%r10
  41523b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415240 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE>:
        virtual bool apply_default(boost::any& value_store) const
  415240:	41 57                	push   %r15
  415242:	41 54                	push   %r12
  415244:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 415240 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE>
  41524b:	55                   	push   %rbp
  41524c:	53                   	push   %rbx
  41524d:	49 bb c0 5d 21 00 00 	movabs $0x215dc0,%r11
  415254:	00 00 00 
  415257:	4d 01 df             	add    %r11,%r15
                return false;
  41525a:	31 ed                	xor    %ebp,%ebp
        virtual bool apply_default(boost::any& value_store) const
  41525c:	48 83 ec 08          	sub    $0x8,%rsp
            return !content;
  415260:	4c 8b 67 38          	mov    0x38(%rdi),%r12
            if (m_default_value.empty()) {
  415264:	4d 85 e4             	test   %r12,%r12
  415267:	74 63                	je     4152cc <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0x8c>
          : content(other.content ? other.content->clone() : 0)
  415269:	49 8b 04 24          	mov    (%r12),%rax
  41526d:	48 ba f0 84 de ff ff 	movabs $0xffffffffffde84f0,%rdx
  415274:	ff ff ff 
  415277:	48 89 f3             	mov    %rsi,%rbx
  41527a:	4c 01 fa             	add    %r15,%rdx
  41527d:	48 8b 40 18          	mov    0x18(%rax),%rax
  415281:	48 39 d0             	cmp    %rdx,%rax
  415284:	75 5a                	jne    4152e0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0xa0>
                return new holder(held);
  415286:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41528d:	ff ff ff 
  415290:	bf 10 00 00 00       	mov    $0x10,%edi
  415295:	4c 01 f8             	add    %r15,%rax
  415298:	ff d0                	callq  *%rax
              : held(value)
  41529a:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  4152a1:	ff ff ff 
  4152a4:	f3 41 0f 10 44 24 08 	movss  0x8(%r12),%xmm0
  4152ab:	4c 01 fa             	add    %r15,%rdx
  4152ae:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  4152b3:	48 89 10             	mov    %rdx,(%rax)
      __a = _GLIBCXX_MOVE(__b);
  4152b6:	48 8b 3b             	mov    (%rbx),%rdi
                return true;
  4152b9:	bd 01 00 00 00       	mov    $0x1,%ebp
      __b = _GLIBCXX_MOVE(__tmp);
  4152be:	48 89 03             	mov    %rax,(%rbx)
            delete content;
  4152c1:	48 85 ff             	test   %rdi,%rdi
  4152c4:	74 06                	je     4152cc <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0x8c>
  4152c6:	48 8b 07             	mov    (%rdi),%rax
  4152c9:	ff 50 08             	callq  *0x8(%rax)
        }
  4152cc:	48 83 c4 08          	add    $0x8,%rsp
  4152d0:	89 e8                	mov    %ebp,%eax
  4152d2:	5b                   	pop    %rbx
  4152d3:	5d                   	pop    %rbp
  4152d4:	41 5c                	pop    %r12
  4152d6:	41 5f                	pop    %r15
  4152d8:	c3                   	retq   
  4152d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
          : content(other.content ? other.content->clone() : 0)
  4152e0:	4c 89 e7             	mov    %r12,%rdi
  4152e3:	ff d0                	callq  *%rax
  4152e5:	eb cf                	jmp    4152b6 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE13apply_defaultERNS_3anyE+0x76>
  4152e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4152ee:	00 00 

00000000004152f0 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE>:
        virtual bool apply_default(boost::any& value_store) const
  4152f0:	41 57                	push   %r15
  4152f2:	41 54                	push   %r12
  4152f4:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 4152f0 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE>
  4152fb:	55                   	push   %rbp
  4152fc:	53                   	push   %rbx
  4152fd:	49 bb 10 5d 21 00 00 	movabs $0x215d10,%r11
  415304:	00 00 00 
  415307:	4d 01 df             	add    %r11,%r15
                return false;
  41530a:	31 ed                	xor    %ebp,%ebp
        virtual bool apply_default(boost::any& value_store) const
  41530c:	48 83 ec 08          	sub    $0x8,%rsp
            return !content;
  415310:	4c 8b 67 38          	mov    0x38(%rdi),%r12
            if (m_default_value.empty()) {
  415314:	4d 85 e4             	test   %r12,%r12
  415317:	74 63                	je     41537c <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0x8c>
          : content(other.content ? other.content->clone() : 0)
  415319:	49 8b 04 24          	mov    (%r12),%rax
  41531d:	48 ba f0 84 de ff ff 	movabs $0xffffffffffde84f0,%rdx
  415324:	ff ff ff 
  415327:	48 89 f3             	mov    %rsi,%rbx
  41532a:	4c 01 fa             	add    %r15,%rdx
  41532d:	48 8b 40 18          	mov    0x18(%rax),%rax
  415331:	48 39 d0             	cmp    %rdx,%rax
  415334:	75 5a                	jne    415390 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0xa0>
                return new holder(held);
  415336:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41533d:	ff ff ff 
  415340:	bf 10 00 00 00       	mov    $0x10,%edi
  415345:	4c 01 f8             	add    %r15,%rax
  415348:	ff d0                	callq  *%rax
              : held(value)
  41534a:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  415351:	ff ff ff 
  415354:	f3 41 0f 10 44 24 08 	movss  0x8(%r12),%xmm0
  41535b:	4c 01 fa             	add    %r15,%rdx
  41535e:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  415363:	48 89 10             	mov    %rdx,(%rax)
      __a = _GLIBCXX_MOVE(__b);
  415366:	48 8b 3b             	mov    (%rbx),%rdi
                return true;
  415369:	bd 01 00 00 00       	mov    $0x1,%ebp
      __b = _GLIBCXX_MOVE(__tmp);
  41536e:	48 89 03             	mov    %rax,(%rbx)
            delete content;
  415371:	48 85 ff             	test   %rdi,%rdi
  415374:	74 06                	je     41537c <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0x8c>
  415376:	48 8b 07             	mov    (%rdi),%rax
  415379:	ff 50 08             	callq  *0x8(%rax)
        }
  41537c:	48 83 c4 08          	add    $0x8,%rsp
  415380:	89 e8                	mov    %ebp,%eax
  415382:	5b                   	pop    %rbx
  415383:	5d                   	pop    %rbp
  415384:	41 5c                	pop    %r12
  415386:	41 5f                	pop    %r15
  415388:	c3                   	retq   
  415389:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
          : content(other.content ? other.content->clone() : 0)
  415390:	4c 89 e7             	mov    %r12,%rdi
  415393:	ff d0                	callq  *%rax
  415395:	eb cf                	jmp    415366 <_ZNK5boost15program_options11typed_valueIfcE13apply_defaultERNS_3anyE+0x76>
  415397:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41539e:	00 00 

00000000004153a0 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z6fillermS2_miEES2_miEEvmmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
  4153a0:	41 56                	push   %r14
  4153a2:	41 55                	push   %r13
  4153a4:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 4153a0 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z6fillermS2_miEES2_miEEvmmmm>
  4153ab:	41 54                	push   %r12
  4153ad:	49 89 d4             	mov    %rdx,%r12
  4153b0:	55                   	push   %rbp
  node->cost += node->solution[i].cost;
  4153b1:	48 69 d2 50 06 00 00 	imul   $0x650,%rdx,%rdx
  4153b8:	53                   	push   %rbx
  4153b9:	49 bb 60 5c 21 00 00 	movabs $0x215c60,%r11
  4153c0:	00 00 00 
  4153c3:	48 89 f3             	mov    %rsi,%rbx
  4153c6:	4d 01 dd             	add    %r11,%r13
  4153c9:	48 89 cd             	mov    %rcx,%rbp
	node->focalHeuristic = focalHeuristic(node->solution);  
  4153cc:	48 89 f7             	mov    %rsi,%rdi
  node->cost += node->solution[i].cost;
  4153cf:	48 01 f2             	add    %rsi,%rdx
  4153d2:	8b 82 10 06 00 00    	mov    0x610(%rdx),%eax
  4153d8:	03 86 40 00 01 00    	add    0x10040(%rsi),%eax
  4153de:	41 89 c6             	mov    %eax,%r14d
  4153e1:	89 86 40 00 01 00    	mov    %eax,0x10040(%rsi)
  node->LB += node->solution[i].fmin;
  4153e7:	8b 82 14 06 00 00    	mov    0x614(%rdx),%eax
  4153ed:	01 86 44 00 01 00    	add    %eax,0x10044(%rsi)
	node->focalHeuristic = focalHeuristic(node->solution);  
  4153f3:	48 b8 e0 33 de ff ff 	movabs $0xffffffffffde33e0,%rax
  4153fa:	ff ff ff 
  4153fd:	4c 01 e8             	add    %r13,%rax
  415400:	ff d0                	callq  *%rax
  415402:	89 83 48 00 01 00    	mov    %eax,0x10048(%rbx)
  unsigned int child_prio = node->focalHeuristic * 1000 + node->cost;
  415408:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  41540e:	44 01 f0             	add    %r14d,%eax
  node->timestamp =  child_prio;
  415411:	89 83 4c 00 01 00    	mov    %eax,0x1004c(%rbx)
        : [opcode]"g"(op));
  415417:	48 c7 c1 12 04 00 00 	mov    $0x412,%rcx
  41541e:	48 87 c9             	xchg   %rcx,%rcx
  if(child_prio>= swarm::superTimestamp()){ 
  415421:	48 39 c8             	cmp    %rcx,%rax
  415424:	73 3a                	jae    415460 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z6fillermS2_miEES2_miEEvmmmm+0xc0>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  415426:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
  41542d:	b9 0d 04 00 00       	mov    $0x40d,%ecx
  415432:	48 87 c9             	xchg   %rcx,%rcx
            :);
  415435:	48 ba 50 0c df ff ff 	movabs $0xffffffffffdf0c50,%rdx
  41543c:	ff ff ff 
    return static_cast<uint64_t>(t);
  41543f:	48 63 b3 50 00 01 00 	movslq 0x10050(%rbx),%rsi
            :);
  415446:	b9 01 00 01 40       	mov    $0x40010001,%ecx
  41544b:	4c 01 ea             	add    %r13,%rdx
  41544e:	48 89 c7             	mov    %rax,%rdi
  415451:	48 87 c9             	xchg   %rcx,%rcx
}
  415454:	5b                   	pop    %rbx
  415455:	5d                   	pop    %rbp
  415456:	41 5c                	pop    %r12
  415458:	41 5d                	pop    %r13
  41545a:	41 5e                	pop    %r14
  41545c:	c3                   	retq   
  41545d:	0f 1f 00             	nopl   (%rax)
    register uint64_t r9  asm("r9")  = v4;
  415460:	48 ba 60 b7 de ff ff 	movabs $0xffffffffffdeb760,%rdx
  415467:	ff ff ff 
    return static_cast<uint64_t>(t);
  41546a:	4c 63 c5             	movslq %ebp,%r8
    register uint64_t r10 asm("r10") = v5;
  41546d:	45 31 d2             	xor    %r10d,%r10d
    register uint64_t r9  asm("r9")  = v4;
  415470:	4e 8d 0c 2a          	lea    (%rdx,%r13,1),%r9
            :);
  415474:	b9 03 00 20 40       	mov    $0x40200003,%ecx
  415479:	48 89 c7             	mov    %rax,%rdi
  41547c:	48 89 de             	mov    %rbx,%rsi
  41547f:	4c 89 e2             	mov    %r12,%rdx
  415482:	48 87 c9             	xchg   %rcx,%rcx
}
  415485:	5b                   	pop    %rbx
  415486:	5d                   	pop    %rbp
  415487:	41 5c                	pop    %r12
  415489:	41 5d                	pop    %r13
  41548b:	41 5e                	pop    %r14
  41548d:	c3                   	retq   
  41548e:	66 90                	xchg   %ax,%ax

0000000000415490 <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i>:
            invalid_option_value,
            invalid_option
        };
        
    public:
        validation_error(kind_t kind, 
  415490:	41 57                	push   %r15
  415492:	41 56                	push   %r14
  415494:	49 bb 70 5b 21 00 00 	movabs $0x215b70,%r11
  41549b:	00 00 00 
  41549e:	41 55                	push   %r13
  4154a0:	41 54                	push   %r12
                   const std::string& option_name = "",
                   const std::string& original_token = "",
                   int option_style              = 0):
        error_with_option_name(get_template(kind), option_name, original_token, option_style)
  4154a2:	48 b8 e0 e3 dd ff ff 	movabs $0xffffffffffdde3e0,%rax
  4154a9:	ff ff ff 
        validation_error(kind_t kind, 
  4154ac:	55                   	push   %rbp
  4154ad:	53                   	push   %rbx
  4154ae:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 415490 <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i>
  4154b5:	49 89 fc             	mov    %rdi,%r12
  4154b8:	49 89 d5             	mov    %rdx,%r13
  4154bb:	49 89 ce             	mov    %rcx,%r14
  4154be:	48 83 ec 38          	sub    $0x38,%rsp
  4154c2:	4c 01 db             	add    %r11,%rbx
        error_with_option_name(get_template(kind), option_name, original_token, option_style)
  4154c5:	89 f2                	mov    %esi,%edx
  4154c7:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  4154cc:	48 89 fe             	mov    %rdi,%rsi
        validation_error(kind_t kind, 
  4154cf:	44 89 44 24 0c       	mov    %r8d,0xc(%rsp)
        error_with_option_name(get_template(kind), option_name, original_token, option_style)
  4154d4:	48 01 d8             	add    %rbx,%rax
  4154d7:	49 89 df             	mov    %rbx,%r15
  4154da:	48 89 ef             	mov    %rbp,%rdi
  4154dd:	ff d0                	callq  *%rax
  4154df:	48 b8 a0 e6 dd ff ff 	movabs $0xffffffffffdde6a0,%rax
  4154e6:	ff ff ff 
  4154e9:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  4154ee:	4c 89 f1             	mov    %r14,%rcx
  4154f1:	4c 89 ea             	mov    %r13,%rdx
  4154f4:	48 89 ee             	mov    %rbp,%rsi
  4154f7:	4c 89 e7             	mov    %r12,%rdi
  4154fa:	48 01 d8             	add    %rbx,%rax
  4154fd:	ff d0                	callq  *%rax
  4154ff:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415504:	48 83 c5 10          	add    $0x10,%rbp
  415508:	48 39 ef             	cmp    %rbp,%rdi
  41550b:	74 0f                	je     41551c <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i+0x8c>
  41550d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  415514:	ff ff ff 
  415517:	48 01 d8             	add    %rbx,%rax
  41551a:	ff d0                	callq  *%rax
  41551c:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  415523:	ff ff ff 
  415526:	48 01 d8             	add    %rbx,%rax
  415529:	49 89 04 24          	mov    %rax,(%r12)
        {
        }
  41552d:	48 83 c4 38          	add    $0x38,%rsp
  415531:	5b                   	pop    %rbx
  415532:	5d                   	pop    %rbp
  415533:	41 5c                	pop    %r12
  415535:	41 5d                	pop    %r13
  415537:	41 5e                	pop    %r14
  415539:	41 5f                	pop    %r15
  41553b:	c3                   	retq   
  41553c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415541:	48 83 c5 10          	add    $0x10,%rbp
  415545:	49 89 c4             	mov    %rax,%r12
  415548:	48 39 ef             	cmp    %rbp,%rdi
  41554b:	74 12                	je     41555f <_ZN5boost15program_options16validation_errorC1ENS1_6kind_tERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_i+0xcf>
  41554d:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  415554:	ff ff ff 
  415557:	49 89 df             	mov    %rbx,%r15
  41555a:	48 01 da             	add    %rbx,%rdx
  41555d:	ff d2                	callq  *%rdx
  41555f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415566:	ff ff ff 
  415569:	4c 89 e7             	mov    %r12,%rdi
  41556c:	49 89 df             	mov    %rbx,%r15
  41556f:	48 01 d8             	add    %rbx,%rax
  415572:	ff d0                	callq  *%rax
  415574:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41557b:	00 00 00 
  41557e:	66 90                	xchg   %ax,%ax

0000000000415580 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_>:
            {
  415580:	41 57                	push   %r15
  415582:	41 55                	push   %r13
  415584:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 415580 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_>
  41558b:	41 54                	push   %r12
  41558d:	55                   	push   %rbp
  41558e:	49 bb 80 5a 21 00 00 	movabs $0x215a80,%r11
  415595:	00 00 00 
  415598:	53                   	push   %rbx
  415599:	4d 01 dd             	add    %r11,%r13
  41559c:	48 89 fd             	mov    %rdi,%rbp
  41559f:	49 89 f4             	mov    %rsi,%r12
  4155a2:	48 83 ec 10          	sub    $0x10,%rsp
                return px_;
  4155a6:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
            if( error_info_container * d=b->data_.get() )
  4155aa:	48 85 db             	test   %rbx,%rbx
  4155ad:	0f 84 85 00 00 00    	je     415638 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xb8>
                data = d->clone();
  4155b3:	48 8b 03             	mov    (%rbx),%rax
  4155b6:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4155bb:	48 89 de             	mov    %rbx,%rsi
  4155be:	ff 50 28             	callq  *0x28(%rax)
                adopt(x.px_);
  4155c1:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
                if( px_ )
  4155c6:	48 85 db             	test   %rbx,%rbx
  4155c9:	74 19                	je     4155e4 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x64>
                    px_->add_ref();
  4155cb:	48 8b 03             	mov    (%rbx),%rax
  4155ce:	48 89 df             	mov    %rbx,%rdi
  4155d1:	ff 50 18             	callq  *0x18(%rax)
                if( px_ && px_->release() )
  4155d4:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4155d9:	48 85 ff             	test   %rdi,%rdi
  4155dc:	74 06                	je     4155e4 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x64>
  4155de:	48 8b 07             	mov    (%rdi),%rax
  4155e1:	ff 50 20             	callq  *0x20(%rax)
            a->throw_file_ = b->throw_file_;
  4155e4:	49 8b 44 24 18       	mov    0x18(%r12),%rax
                if( px_ && px_->release() )
  4155e9:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
            a->throw_file_ = b->throw_file_;
  4155ed:	48 89 45 18          	mov    %rax,0x18(%rbp)
            a->throw_line_ = b->throw_line_;
  4155f1:	41 8b 44 24 20       	mov    0x20(%r12),%eax
                if( px_ && px_->release() )
  4155f6:	48 85 ff             	test   %rdi,%rdi
            a->throw_line_ = b->throw_line_;
  4155f9:	89 45 20             	mov    %eax,0x20(%rbp)
            a->throw_function_ = b->throw_function_;
  4155fc:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  415601:	48 89 45 10          	mov    %rax,0x10(%rbp)
                if( px_ && px_->release() )
  415605:	74 06                	je     41560d <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x8d>
  415607:	48 8b 07             	mov    (%rdi),%rax
  41560a:	ff 50 20             	callq  *0x20(%rax)
                if( px_ )
  41560d:	48 85 db             	test   %rbx,%rbx
                px_=px;
  415610:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
                if( px_ )
  415614:	74 12                	je     415628 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xa8>
                    px_->add_ref();
  415616:	48 8b 03             	mov    (%rbx),%rax
  415619:	48 89 df             	mov    %rbx,%rdi
  41561c:	ff 50 18             	callq  *0x18(%rax)
                if( px_ && px_->release() )
  41561f:	48 8b 03             	mov    (%rbx),%rax
  415622:	48 89 df             	mov    %rbx,%rdi
  415625:	ff 50 20             	callq  *0x20(%rax)
            }
  415628:	48 83 c4 10          	add    $0x10,%rsp
  41562c:	5b                   	pop    %rbx
  41562d:	5d                   	pop    %rbp
  41562e:	41 5c                	pop    %r12
  415630:	41 5d                	pop    %r13
  415632:	41 5f                	pop    %r15
  415634:	c3                   	retq   
  415635:	0f 1f 00             	nopl   (%rax)
            a->throw_file_ = b->throw_file_;
  415638:	48 8b 46 18          	mov    0x18(%rsi),%rax
  41563c:	48 89 47 18          	mov    %rax,0x18(%rdi)
            a->throw_line_ = b->throw_line_;
  415640:	8b 46 20             	mov    0x20(%rsi),%eax
  415643:	89 47 20             	mov    %eax,0x20(%rdi)
            a->throw_function_ = b->throw_function_;
  415646:	48 8b 46 10          	mov    0x10(%rsi),%rax
  41564a:	48 89 47 10          	mov    %rax,0x10(%rdi)
                if( px_ && px_->release() )
  41564e:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  415652:	48 85 ff             	test   %rdi,%rdi
  415655:	75 b0                	jne    415607 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0x87>
  415657:	eb cf                	jmp    415628 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xa8>
  415659:	48 89 c5             	mov    %rax,%rbp
  41565c:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415663:	ff ff ff 
  415666:	48 89 ef             	mov    %rbp,%rdi
  415669:	4d 89 ef             	mov    %r13,%r15
  41566c:	4c 01 e8             	add    %r13,%rax
  41566f:	ff d0                	callq  *%rax
  415671:	48 89 c5             	mov    %rax,%rbp
  415674:	48 8b 03             	mov    (%rbx),%rax
  415677:	48 89 df             	mov    %rbx,%rdi
  41567a:	ff 50 20             	callq  *0x20(%rax)
  41567d:	eb dd                	jmp    41565c <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xdc>
  41567f:	48 85 db             	test   %rbx,%rbx
  415682:	48 89 c5             	mov    %rax,%rbp
  415685:	75 ed                	jne    415674 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xf4>
  415687:	eb d3                	jmp    41565c <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xdc>
  415689:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41568e:	48 89 c5             	mov    %rax,%rbp
  415691:	48 85 ff             	test   %rdi,%rdi
  415694:	74 de                	je     415674 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xf4>
  415696:	48 8b 07             	mov    (%rdi),%rax
  415699:	ff 50 20             	callq  *0x20(%rax)
  41569c:	eb d6                	jmp    415674 <_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_+0xf4>
  41569e:	66 90                	xchg   %ax,%ax

00000000004156a0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv>:
            clone() const
  4156a0:	41 57                	push   %r15
  4156a2:	41 55                	push   %r13
  4156a4:	49 bb 60 59 21 00 00 	movabs $0x215960,%r11
  4156ab:	00 00 00 
  4156ae:	41 54                	push   %r12
  4156b0:	55                   	push   %rbp
  4156b1:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 4156a0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv>
                return new clone_impl(*this,clone_tag());
  4156b8:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  4156bf:	ff ff ff 
            clone() const
  4156c2:	49 89 fc             	mov    %rdi,%r12
  4156c5:	53                   	push   %rbx
  4156c6:	4c 01 dd             	add    %r11,%rbp
                return new clone_impl(*this,clone_tag());
  4156c9:	bf 48 00 00 00       	mov    $0x48,%edi
    class BOOST_SYMBOL_VISIBLE bad_lexical_cast :
  4156ce:	49 bd 68 ef ff ff ff 	movabs $0xffffffffffffef68,%r13
  4156d5:	ff ff ff 
  4156d8:	48 01 e8             	add    %rbp,%rax
  4156db:	49 89 ef             	mov    %rbp,%r15
  4156de:	ff d0                	callq  *%rax
  4156e0:	48 89 c3             	mov    %rax,%rbx
        clone_base
  4156e3:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  4156ea:	ff ff ff 
                px_(x.px_)
  4156ed:	49 8b 7c 24 20       	mov    0x20(%r12),%rdi
        clone_base
  4156f2:	48 01 e8             	add    %rbp,%rax
  4156f5:	48 89 43 40          	mov    %rax,0x40(%rbx)
  4156f9:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
                px_(x.px_)
  4156fe:	48 89 7b 20          	mov    %rdi,0x20(%rbx)
  415702:	48 89 03             	mov    %rax,(%rbx)
  415705:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  41570a:	48 89 43 08          	mov    %rax,0x8(%rbx)
  41570e:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  415713:	48 89 43 10          	mov    %rax,0x10(%rbx)
    exception
  415717:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  41571e:	ff ff ff 
  415721:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  415724:	48 85 ff             	test   %rdi,%rdi
    exception
  415727:	48 89 43 18          	mov    %rax,0x18(%rbx)
                if( px_ )
  41572b:	74 06                	je     415733 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv+0x93>
                    px_->add_ref();
  41572d:	48 8b 07             	mov    (%rdi),%rax
  415730:	ff 50 18             	callq  *0x18(%rax)
    exception
  415733:	41 8b 44 24 38       	mov    0x38(%r12),%eax
                copy_boost_exception(this,&x);
  415738:	49 8d 74 24 18       	lea    0x18(%r12),%rsi
  41573d:	48 8d 7b 18          	lea    0x18(%rbx),%rdi
    exception
  415741:	f3 41 0f 6f 44 24 28 	movdqu 0x28(%r12),%xmm0
  415748:	89 43 38             	mov    %eax,0x38(%rbx)
                T(x)
  41574b:	48 b8 b0 f0 ff ff ff 	movabs $0xfffffffffffff0b0,%rax
  415752:	ff ff ff 
  415755:	48 01 e8             	add    %rbp,%rax
  415758:	48 8d 50 38          	lea    0x38(%rax),%rdx
  41575c:	48 89 03             	mov    %rax,(%rbx)
  41575f:	48 83 c0 70          	add    $0x70,%rax
  415763:	48 89 43 40          	mov    %rax,0x40(%rbx)
                copy_boost_exception(this,&x);
  415767:	48 b8 80 a5 de ff ff 	movabs $0xffffffffffdea580,%rax
  41576e:	ff ff ff 
    exception
  415771:	0f 11 43 28          	movups %xmm0,0x28(%rbx)
                T(x)
  415775:	48 89 53 18          	mov    %rdx,0x18(%rbx)
                copy_boost_exception(this,&x);
  415779:	48 01 e8             	add    %rbp,%rax
  41577c:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  41577e:	48 8b 03             	mov    (%rbx),%rax
  415781:	48 03 58 e8          	add    -0x18(%rax),%rbx
  415785:	48 89 d8             	mov    %rbx,%rax
                }
  415788:	5b                   	pop    %rbx
  415789:	5d                   	pop    %rbp
  41578a:	41 5c                	pop    %r12
  41578c:	41 5d                	pop    %r13
  41578e:	41 5f                	pop    %r15
  415790:	c3                   	retq   
  415791:	49 89 c4             	mov    %rax,%r12
        {}
  415794:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  415799:	48 89 df             	mov    %rbx,%rdi
  41579c:	49 89 ef             	mov    %rbp,%r15
  41579f:	48 89 03             	mov    %rax,(%rbx)
  4157a2:	48 b8 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rax
  4157a9:	ff ff ff 
  4157ac:	48 01 e8             	add    %rbp,%rax
  4157af:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  4157b1:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4157b8:	ff ff ff 
  4157bb:	48 89 df             	mov    %rbx,%rdi
  4157be:	be 48 00 00 00       	mov    $0x48,%esi
  4157c3:	48 01 e8             	add    %rbp,%rax
  4157c6:	49 89 ef             	mov    %rbp,%r15
  4157c9:	ff d0                	callq  *%rax
  4157cb:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  4157d2:	ff ff ff 
  4157d5:	4c 89 e7             	mov    %r12,%rdi
  4157d8:	48 01 e8             	add    %rbp,%rax
  4157db:	ff d0                	callq  *%rax
  4157dd:	49 89 c4             	mov    %rax,%r12
                T(x)
  4157e0:	48 b8 80 8b de ff ff 	movabs $0xffffffffffde8b80,%rax
  4157e7:	ff ff ff 
  4157ea:	48 89 df             	mov    %rbx,%rdi
  4157ed:	48 01 e8             	add    %rbp,%rax
  4157f0:	ff d0                	callq  *%rax
  4157f2:	eb bd                	jmp    4157b1 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv+0x111>
  4157f4:	66 90                	xchg   %ax,%ax
  4157f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4157fd:	00 00 00 

0000000000415800 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv>:
            clone() const
  415800:	4c 8b 17             	mov    (%rdi),%r10
  415803:	49 03 7a e8          	add    -0x18(%r10),%rdi
  415807:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 415807 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEE5cloneEv+0x7>
  41580e:	49 ba f9 57 21 00 00 	movabs $0x2157f9,%r10
  415815:	00 00 00 
  415818:	4d 01 d3             	add    %r10,%r11
  41581b:	49 ba a0 a6 de ff ff 	movabs $0xffffffffffdea6a0,%r10
  415822:	ff ff ff 
  415825:	4d 01 da             	add    %r11,%r10
  415828:	41 ff e2             	jmpq   *%r10
  41582b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000415830 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv>:
  415830:	41 57                	push   %r15
  415832:	41 55                	push   %r13
  415834:	49 bb d0 57 21 00 00 	movabs $0x2157d0,%r11
  41583b:	00 00 00 
  41583e:	41 54                	push   %r12
  415840:	55                   	push   %rbp
  415841:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 415830 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv>
                return new clone_impl(*this,clone_tag());
  415848:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41584f:	ff ff ff 
            clone() const
  415852:	53                   	push   %rbx
  415853:	49 89 fc             	mov    %rdi,%r12
  415856:	4c 01 dd             	add    %r11,%rbp
                return new clone_impl(*this,clone_tag());
  415859:	bf 40 00 00 00       	mov    $0x40,%edi
  41585e:	49 bd 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%r13
  415865:	ff ff ff 
  415868:	49 89 ef             	mov    %rbp,%r15
  41586b:	48 01 e8             	add    %rbp,%rax
  41586e:	ff d0                	callq  *%rax
  415870:	48 89 c3             	mov    %rax,%rbx
        clone_base
  415873:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  41587a:	ff ff ff 
  41587d:	4c 89 e6             	mov    %r12,%rsi
  415880:	48 01 e8             	add    %rbp,%rax
  415883:	48 89 df             	mov    %rbx,%rdi
  415886:	48 89 43 38          	mov    %rax,0x38(%rbx)
  41588a:	48 b8 60 e8 dd ff ff 	movabs $0xffffffffffdde860,%rax
  415891:	ff ff ff 
  415894:	48 01 e8             	add    %rbp,%rax
  415897:	ff d0                	callq  *%rax
  415899:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
                px_(x.px_)
  41589e:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
  4158a3:	48 89 03             	mov    %rax,(%rbx)
    exception
  4158a6:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  4158ad:	ff ff ff 
  4158b0:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  4158b3:	48 85 ff             	test   %rdi,%rdi
                px_(x.px_)
  4158b6:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
    exception
  4158ba:	48 89 43 10          	mov    %rax,0x10(%rbx)
                if( px_ )
  4158be:	74 06                	je     4158c6 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv+0x96>
                    px_->add_ref();
  4158c0:	48 8b 07             	mov    (%rdi),%rax
  4158c3:	ff 50 18             	callq  *0x18(%rax)
    exception
  4158c6:	41 8b 44 24 30       	mov    0x30(%r12),%eax
                copy_boost_exception(this,&x);
  4158cb:	49 8d 74 24 10       	lea    0x10(%r12),%rsi
  4158d0:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    exception
  4158d4:	f3 41 0f 6f 44 24 20 	movdqu 0x20(%r12),%xmm0
  4158db:	89 43 30             	mov    %eax,0x30(%rbx)
                T(x)
  4158de:	48 b8 20 f3 ff ff ff 	movabs $0xfffffffffffff320,%rax
  4158e5:	ff ff ff 
  4158e8:	48 01 e8             	add    %rbp,%rax
  4158eb:	48 8d 50 38          	lea    0x38(%rax),%rdx
  4158ef:	48 89 03             	mov    %rax,(%rbx)
  4158f2:	48 83 c0 70          	add    $0x70,%rax
  4158f6:	48 89 43 38          	mov    %rax,0x38(%rbx)
                copy_boost_exception(this,&x);
  4158fa:	48 b8 80 a5 de ff ff 	movabs $0xffffffffffdea580,%rax
  415901:	ff ff ff 
    exception
  415904:	0f 11 43 20          	movups %xmm0,0x20(%rbx)
                T(x)
  415908:	48 89 53 10          	mov    %rdx,0x10(%rbx)
                copy_boost_exception(this,&x);
  41590c:	48 01 e8             	add    %rbp,%rax
  41590f:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  415911:	48 8b 03             	mov    (%rbx),%rax
  415914:	48 03 58 e8          	add    -0x18(%rax),%rbx
  415918:	48 89 d8             	mov    %rbx,%rax
                }
  41591b:	5b                   	pop    %rbx
  41591c:	5d                   	pop    %rbp
  41591d:	41 5c                	pop    %r12
  41591f:	41 5d                	pop    %r13
  415921:	41 5f                	pop    %r15
  415923:	c3                   	retq   
  415924:	49 89 c4             	mov    %rax,%r12
  415927:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  41592c:	48 89 df             	mov    %rbx,%rdi
  41592f:	49 89 ef             	mov    %rbp,%r15
  415932:	48 89 03             	mov    %rax,(%rbx)
  415935:	48 b8 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rax
  41593c:	ff ff ff 
  41593f:	48 01 e8             	add    %rbp,%rax
  415942:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  415944:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41594b:	ff ff ff 
  41594e:	48 89 df             	mov    %rbx,%rdi
  415951:	be 40 00 00 00       	mov    $0x40,%esi
  415956:	48 01 e8             	add    %rbp,%rax
  415959:	49 89 ef             	mov    %rbp,%r15
  41595c:	ff d0                	callq  *%rax
  41595e:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415965:	ff ff ff 
  415968:	4c 89 e7             	mov    %r12,%rdi
  41596b:	48 01 e8             	add    %rbp,%rax
  41596e:	ff d0                	callq  *%rax
  415970:	49 89 c4             	mov    %rax,%r12
                T(x)
  415973:	48 b8 40 8e de ff ff 	movabs $0xffffffffffde8e40,%rax
  41597a:	ff ff ff 
  41597d:	48 89 df             	mov    %rbx,%rdi
  415980:	48 01 e8             	add    %rbp,%rax
  415983:	ff d0                	callq  *%rax
  415985:	eb bd                	jmp    415944 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv+0x114>
  415987:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41598e:	00 00 

0000000000415990 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv>:
            clone() const
  415990:	4c 8b 17             	mov    (%rdi),%r10
  415993:	49 03 7a e8          	add    -0x18(%r10),%rdi
  415997:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 415997 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEE5cloneEv+0x7>
  41599e:	49 ba 69 56 21 00 00 	movabs $0x215669,%r10
  4159a5:	00 00 00 
  4159a8:	4d 01 d3             	add    %r10,%r11
  4159ab:	49 ba 30 a8 de ff ff 	movabs $0xffffffffffdea830,%r10
  4159b2:	ff ff ff 
  4159b5:	4d 01 da             	add    %r11,%r10
  4159b8:	41 ff e2             	jmpq   *%r10
  4159bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004159c0 <_ZN5boost3anyaSERKS0_>:
        any & operator=(const any& rhs)
  4159c0:	41 57                	push   %r15
  4159c2:	55                   	push   %rbp
  4159c3:	4c 8d 3d f6 ff ff ff 	lea    -0xa(%rip),%r15        # 4159c0 <_ZN5boost3anyaSERKS0_>
  4159ca:	53                   	push   %rbx
          : content(other.content ? other.content->clone() : 0)
  4159cb:	48 8b 1e             	mov    (%rsi),%rbx
  4159ce:	49 bb 40 56 21 00 00 	movabs $0x215640,%r11
  4159d5:	00 00 00 
  4159d8:	4d 01 df             	add    %r11,%r15
        any & operator=(const any& rhs)
  4159db:	48 89 fd             	mov    %rdi,%rbp
          : content(other.content ? other.content->clone() : 0)
  4159de:	48 85 db             	test   %rbx,%rbx
  4159e1:	74 4a                	je     415a2d <_ZN5boost3anyaSERKS0_+0x6d>
  4159e3:	48 8b 03             	mov    (%rbx),%rax
  4159e6:	48 ba f0 84 de ff ff 	movabs $0xffffffffffde84f0,%rdx
  4159ed:	ff ff ff 
  4159f0:	4c 01 fa             	add    %r15,%rdx
  4159f3:	48 8b 40 18          	mov    0x18(%rax),%rax
  4159f7:	48 39 d0             	cmp    %rdx,%rax
  4159fa:	75 54                	jne    415a50 <_ZN5boost3anyaSERKS0_+0x90>
                return new holder(held);
  4159fc:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  415a03:	ff ff ff 
  415a06:	bf 10 00 00 00       	mov    $0x10,%edi
  415a0b:	4c 01 f8             	add    %r15,%rax
  415a0e:	ff d0                	callq  *%rax
              : held(value)
  415a10:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
  415a15:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  415a1c:	ff ff ff 
  415a1f:	4c 01 fa             	add    %r15,%rdx
  415a22:	f3 0f 11 40 08       	movss  %xmm0,0x8(%rax)
  415a27:	48 89 c3             	mov    %rax,%rbx
  415a2a:	48 89 10             	mov    %rdx,(%rax)
      __a = _GLIBCXX_MOVE(__b);
  415a2d:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
      __b = _GLIBCXX_MOVE(__tmp);
  415a31:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
            delete content;
  415a35:	48 85 ff             	test   %rdi,%rdi
  415a38:	74 06                	je     415a40 <_ZN5boost3anyaSERKS0_+0x80>
  415a3a:	48 8b 07             	mov    (%rdi),%rax
  415a3d:	ff 50 08             	callq  *0x8(%rax)
        }
  415a40:	48 89 e8             	mov    %rbp,%rax
  415a43:	5b                   	pop    %rbx
  415a44:	5d                   	pop    %rbp
  415a45:	41 5f                	pop    %r15
  415a47:	c3                   	retq   
  415a48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  415a4f:	00 
          : content(other.content ? other.content->clone() : 0)
  415a50:	48 89 df             	mov    %rbx,%rdi
  415a53:	ff d0                	callq  *%rax
  415a55:	48 89 c3             	mov    %rax,%rbx
  415a58:	eb d3                	jmp    415a2d <_ZN5boost3anyaSERKS0_+0x6d>
  415a5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000415a60 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE>:
    typed_value<T, charT>::
  415a60:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 415a60 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE>
  415a67:	49 bb a0 55 21 00 00 	movabs $0x2155a0,%r11
  415a6e:	00 00 00 
  415a71:	48 89 f9             	mov    %rdi,%rcx
  415a74:	48 89 f7             	mov    %rsi,%rdi
  415a77:	48 89 d6             	mov    %rdx,%rsi
        if (new_tokens.empty() && !m_implicit_value.empty())
  415a7a:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  415a7e:	4c 01 d8             	add    %r11,%rax
  415a81:	48 39 16             	cmp    %rdx,(%rsi)
  415a84:	74 1a                	je     415aa0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE+0x40>
    typed_value<T, charT>::
  415a86:	41 57                	push   %r15
            validate(value_store, new_tokens, (T*)0, 0);
  415a88:	49 b8 80 e8 dd ff ff 	movabs $0xffffffffffdde880,%r8
  415a8f:	ff ff ff 
  415a92:	31 c9                	xor    %ecx,%ecx
    }
  415a94:	41 5f                	pop    %r15
            validate(value_store, new_tokens, (T*)0, 0);
  415a96:	31 d2                	xor    %edx,%edx
  415a98:	49 01 c0             	add    %rax,%r8
  415a9b:	41 ff e0             	jmpq   *%r8
  415a9e:	66 90                	xchg   %ax,%ax
        if (new_tokens.empty() && !m_implicit_value.empty())
  415aa0:	48 83 79 60 00       	cmpq   $0x0,0x60(%rcx)
  415aa5:	74 df                	je     415a86 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6xparseERNS_3anyERKSt6vectorIS7_SaIS7_EE+0x26>
            value_store = m_implicit_value;
  415aa7:	48 ba c0 a9 de ff ff 	movabs $0xffffffffffdea9c0,%rdx
  415aae:	ff ff ff 
  415ab1:	48 8d 71 60          	lea    0x60(%rcx),%rsi
  415ab5:	48 01 d0             	add    %rdx,%rax
  415ab8:	ff e0                	jmpq   *%rax
  415aba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000415ac0 <_ZN5boost6detail15sp_counted_base7releaseEv>:
    void release() // nothrow
  415ac0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 415ac0 <_ZN5boost6detail15sp_counted_base7releaseEv>
  415ac7:	49 bb 40 55 21 00 00 	movabs $0x215540,%r11
  415ace:	00 00 00 
  415ad1:	4c 01 d8             	add    %r11,%rax
        if( atomic_decrement( &use_count_ ) == 1 )
  415ad4:	f0 83 6f 08 01       	lock subl $0x1,0x8(%rdi)
  415ad9:	74 05                	je     415ae0 <_ZN5boost6detail15sp_counted_base7releaseEv+0x20>
  415adb:	f3 c3                	repz retq 
  415add:	0f 1f 00             	nopl   (%rax)
  415ae0:	48 ba 50 31 de ff ff 	movabs $0xffffffffffde3150,%rdx
  415ae7:	ff ff ff 
  415aea:	48 01 d0             	add    %rdx,%rax
  415aed:	ff e0                	jmpq   *%rax
  415aef:	90                   	nop

0000000000415af0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv>:
    virtual void dispose() // nothrow
  415af0:	41 57                	push   %r15
  415af2:	55                   	push   %rbp
  415af3:	49 bb 10 55 21 00 00 	movabs $0x215510,%r11
  415afa:	00 00 00 
  415afd:	53                   	push   %rbx
        boost::checked_delete( px_ );
  415afe:	48 8b 6f 10          	mov    0x10(%rdi),%rbp
  415b02:	48 8d 1d e7 ff ff ff 	lea    -0x19(%rip),%rbx        # 415af0 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv>
  415b09:	4c 01 db             	add    %r11,%rbx
template<class T> inline void checked_delete(T * x)
{
    // intentionally complex - simplification causes regressions
    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete x;
  415b0c:	48 85 ed             	test   %rbp,%rbp
  415b0f:	74 37                	je     415b48 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv+0x58>
  415b11:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  415b15:	48 85 ff             	test   %rdi,%rdi
  415b18:	74 0f                	je     415b29 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail13memory_holderEE7disposeEv+0x39>
  415b1a:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  415b21:	ff ff ff 
  415b24:	48 01 d8             	add    %rbx,%rax
  415b27:	ff d0                	callq  *%rax
  415b29:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  415b30:	ff ff ff 
  415b33:	48 89 ef             	mov    %rbp,%rdi
  415b36:	be 10 00 00 00       	mov    $0x10,%esi
  415b3b:	48 01 d8             	add    %rbx,%rax
    }
  415b3e:	5b                   	pop    %rbx
  415b3f:	5d                   	pop    %rbp
  415b40:	41 5f                	pop    %r15
  415b42:	ff e0                	jmpq   *%rax
  415b44:	0f 1f 40 00          	nopl   0x0(%rax)
  415b48:	5b                   	pop    %rbx
  415b49:	5d                   	pop    %rbp
  415b4a:	41 5f                	pop    %r15
  415b4c:	c3                   	retq   
  415b4d:	0f 1f 00             	nopl   (%rax)

0000000000415b50 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  static const std::string build_what(const Mark& mark,
  415b50:	41 57                	push   %r15
  415b52:	41 56                	push   %r14
  415b54:	49 bb b0 54 21 00 00 	movabs $0x2154b0,%r11
  415b5b:	00 00 00 
  415b5e:	41 55                	push   %r13
  415b60:	41 54                	push   %r12
    std::stringstream output;
  415b62:	48 b8 90 e6 dd ff ff 	movabs $0xffffffffffdde690,%rax
  415b69:	ff ff ff 
  static const std::string build_what(const Mark& mark,
  415b6c:	55                   	push   %rbp
  415b6d:	53                   	push   %rbx
  415b6e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 415b50 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  415b75:	49 89 f4             	mov    %rsi,%r12
  415b78:	49 89 d6             	mov    %rdx,%r14
    std::stringstream output;
  415b7b:	be 18 00 00 00       	mov    $0x18,%esi
  static const std::string build_what(const Mark& mark,
  415b80:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  415b87:	4c 01 db             	add    %r11,%rbx
  415b8a:	48 89 fd             	mov    %rdi,%rbp
    std::stringstream output;
  415b8d:	4c 8d 6c 24 60       	lea    0x60(%rsp),%r13
  415b92:	48 01 d8             	add    %rbx,%rax
  415b95:	49 89 df             	mov    %rbx,%r15
  415b98:	4c 89 ef             	mov    %r13,%rdi
  415b9b:	ff d0                	callq  *%rax
           << mark.column + 1 << ": " << msg;
  415b9d:	41 8b 44 24 08       	mov    0x8(%r12),%eax
	__ostream_insert(__out, __s,
  415ba2:	49 8d 7d 10          	lea    0x10(%r13),%rdi
  415ba6:	ba 18 00 00 00       	mov    $0x18,%edx
  415bab:	83 c0 01             	add    $0x1,%eax
  415bae:	89 44 24 08          	mov    %eax,0x8(%rsp)
    output << "yaml-cpp: error at line " << mark.line + 1 << ", column "
  415bb2:	41 8b 44 24 04       	mov    0x4(%r12),%eax
  415bb7:	49 bc a0 e7 dd ff ff 	movabs $0xffffffffffdde7a0,%r12
  415bbe:	ff ff ff 
  415bc1:	8d 48 01             	lea    0x1(%rax),%ecx
  415bc4:	48 b8 30 80 df ff ff 	movabs $0xffffffffffdf8030,%rax
  415bcb:	ff ff ff 
  415bce:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415bd2:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  415bd6:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
  415bda:	ff d0                	callq  *%rax
  415bdc:	48 b8 00 ea dd ff ff 	movabs $0xffffffffffddea00,%rax
  415be3:	ff ff ff 
  415be6:	49 8d 7d 10          	lea    0x10(%r13),%rdi
  415bea:	8b 74 24 10          	mov    0x10(%rsp),%esi
  415bee:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  415bf3:	48 01 d8             	add    %rbx,%rax
  415bf6:	ff d0                	callq  *%rax
  415bf8:	48 89 c1             	mov    %rax,%rcx
  415bfb:	48 b8 49 80 df ff ff 	movabs $0xffffffffffdf8049,%rax
  415c02:	ff ff ff 
  415c05:	ba 09 00 00 00       	mov    $0x9,%edx
  415c0a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415c0e:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  415c13:	48 89 cf             	mov    %rcx,%rdi
  415c16:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  415c1a:	ff d0                	callq  *%rax
           << mark.column + 1 << ": " << msg;
  415c1c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  415c21:	8b 74 24 08          	mov    0x8(%rsp),%esi
  415c25:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415c2a:	48 01 d8             	add    %rbx,%rax
  415c2d:	ff d0                	callq  *%rax
  415c2f:	48 89 c1             	mov    %rax,%rcx
  415c32:	48 b8 4a 7e df ff ff 	movabs $0xffffffffffdf7e4a,%rax
  415c39:	ff ff ff 
  415c3c:	ba 02 00 00 00       	mov    $0x2,%edx
  415c41:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415c45:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  415c4a:	48 89 cf             	mov    %rcx,%rdi
  415c4d:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  415c51:	ff d0                	callq  *%rax
    operator<<(basic_ostream<_CharT, _Traits>& __os,
	       const basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 586. string inserter not a formatted function
      return __ostream_insert(__os, __str.data(), __str.size());
  415c53:	49 8b 56 08          	mov    0x8(%r14),%rdx
  415c57:	49 8b 36             	mov    (%r14),%rsi
  415c5a:	49 01 dc             	add    %rbx,%r12
  415c5d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  415c62:	41 ff d4             	callq  *%r12
  415c65:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  415c6c:	00 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  415c6d:	4c 8d 75 10          	lea    0x10(%rbp),%r14
      { _M_string_length = __length; }
  415c71:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
  415c78:	00 
      { __c1 = __c2; }
  415c79:	c6 45 10 00          	movb   $0x0,0x10(%rbp)
	: allocator_type(__a), _M_p(__dat) { }
  415c7d:	4c 89 75 00          	mov    %r14,0x0(%rbp)
      */
      __string_type
      str() const
      {
	__string_type __ret;
	if (this->pptr())
  415c81:	48 85 c0             	test   %rax,%rax
  415c84:	0f 84 f6 00 00 00    	je     415d80 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>
  415c8a:	48 8b 94 24 90 00 00 	mov    0x90(%rsp),%rdx
  415c91:	00 
	  {
	    // The current egptr() may not be the actual string end.
	    if (this->pptr() > this->egptr())
  415c92:	48 39 d0             	cmp    %rdx,%rax
  415c95:	0f 87 8d 00 00 00    	ja     415d28 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d8>
  415c9b:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
          _M_construct(__beg, __end, _Tag());
  415ca0:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  415ca7:	00 
	: allocator_type(__a), _M_p(__dat) { }
  415ca8:	49 8d 44 24 10       	lea    0x10(%r12),%rax
          _M_construct(__beg, __end, _Tag());
  415cad:	4c 89 e7             	mov    %r12,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  415cb0:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
          _M_construct(__beg, __end, _Tag());
  415cb5:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  415cbc:	ff ff ff 
  415cbf:	48 01 d8             	add    %rbx,%rax
  415cc2:	ff d0                	callq  *%rax
	      __ret = __string_type(this->pbase(), this->pptr());
	    else
 	      __ret = __string_type(this->pbase(), this->egptr());
  415cc4:	48 b8 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rax
  415ccb:	ff ff ff 
  415cce:	4c 89 e6             	mov    %r12,%rsi
  415cd1:	48 89 ef             	mov    %rbp,%rdi
  415cd4:	48 01 d8             	add    %rbx,%rax
  415cd7:	49 89 df             	mov    %rbx,%r15
	if (!_M_is_local())
  415cda:	49 83 c4 10          	add    $0x10,%r12
  415cde:	ff d0                	callq  *%rax
  415ce0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  415ce5:	4c 39 e7             	cmp    %r12,%rdi
  415ce8:	74 0f                	je     415cf9 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a9>
  415cea:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  415cf1:	ff ff ff 
  415cf4:	48 01 d8             	add    %rbx,%rax
  415cf7:	ff d0                	callq  *%rax
    std::stringstream output;
  415cf9:	48 b8 80 e6 dd ff ff 	movabs $0xffffffffffdde680,%rax
  415d00:	ff ff ff 
  415d03:	49 89 df             	mov    %rbx,%r15
  415d06:	4c 89 ef             	mov    %r13,%rdi
  415d09:	48 01 d8             	add    %rbx,%rax
  415d0c:	ff d0                	callq  *%rax
  }
  415d0e:	48 81 c4 f8 01 00 00 	add    $0x1f8,%rsp
  415d15:	48 89 e8             	mov    %rbp,%rax
  415d18:	5b                   	pop    %rbx
  415d19:	5d                   	pop    %rbp
  415d1a:	41 5c                	pop    %r12
  415d1c:	41 5d                	pop    %r13
  415d1e:	41 5e                	pop    %r14
  415d20:	41 5f                	pop    %r15
  415d22:	c3                   	retq   
  415d23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	: allocator_type(__a), _M_p(__dat) { }
  415d28:	4c 8d 64 24 40       	lea    0x40(%rsp),%r12
          _M_construct(__beg, __end, _Tag());
  415d2d:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
  415d34:	00 
	: allocator_type(__a), _M_p(__dat) { }
  415d35:	49 8d 54 24 10       	lea    0x10(%r12),%rdx
          _M_construct(__beg, __end, _Tag());
  415d3a:	4c 89 e7             	mov    %r12,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  415d3d:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
          _M_construct(__beg, __end, _Tag());
  415d42:	48 89 c2             	mov    %rax,%rdx
  415d45:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  415d4c:	ff ff ff 
  415d4f:	48 01 d8             	add    %rbx,%rax
  415d52:	ff d0                	callq  *%rax
	      __ret = __string_type(this->pbase(), this->pptr());
  415d54:	48 b8 20 e8 dd ff ff 	movabs $0xffffffffffdde820,%rax
  415d5b:	ff ff ff 
  415d5e:	4c 89 e6             	mov    %r12,%rsi
  415d61:	48 89 ef             	mov    %rbp,%rdi
  415d64:	48 01 d8             	add    %rbx,%rax
	if (!_M_is_local())
  415d67:	49 83 c4 10          	add    $0x10,%r12
  415d6b:	ff d0                	callq  *%rax
  415d6d:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  415d72:	4c 39 e7             	cmp    %r12,%rdi
  415d75:	0f 85 6f ff ff ff    	jne    415cea <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19a>
  415d7b:	e9 79 ff ff ff       	jmpq   415cf9 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a9>
	this->_M_assign(__str);
  415d80:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  415d87:	ff ff ff 
  415d8a:	49 8d 75 60          	lea    0x60(%r13),%rsi
  415d8e:	48 89 ef             	mov    %rbp,%rdi
  415d91:	49 89 df             	mov    %rbx,%r15
  415d94:	48 01 d8             	add    %rbx,%rax
  415d97:	ff d0                	callq  *%rax
  415d99:	e9 5b ff ff ff       	jmpq   415cf9 <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a9>
  415d9e:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  415da2:	49 89 c4             	mov    %rax,%r12
	if (!_M_is_local())
  415da5:	49 39 fe             	cmp    %rdi,%r14
  415da8:	74 12                	je     415dbc <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26c>
  415daa:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  415db1:	ff ff ff 
  415db4:	49 89 df             	mov    %rbx,%r15
  415db7:	48 01 d8             	add    %rbx,%rax
  415dba:	ff d0                	callq  *%rax
    std::stringstream output;
  415dbc:	48 b8 80 e6 dd ff ff 	movabs $0xffffffffffdde680,%rax
  415dc3:	ff ff ff 
  415dc6:	4c 89 ef             	mov    %r13,%rdi
  415dc9:	49 89 df             	mov    %rbx,%r15
  415dcc:	48 01 d8             	add    %rbx,%rax
  415dcf:	ff d0                	callq  *%rax
  415dd1:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415dd8:	ff ff ff 
  415ddb:	4c 89 e7             	mov    %r12,%rdi
  415dde:	48 01 d8             	add    %rbx,%rax
  415de1:	ff d0                	callq  *%rax
  415de3:	49 89 c4             	mov    %rax,%r12
  415de6:	eb d4                	jmp    415dbc <_ZN4YAML9Exception10build_whatERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26c>
  415de8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  415def:	00 

0000000000415df0 <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
  Exception(const Mark& mark_, const std::string& msg_)
  415df0:	41 57                	push   %r15
  415df2:	41 56                	push   %r14
  415df4:	49 bb 10 52 21 00 00 	movabs $0x215210,%r11
  415dfb:	00 00 00 
  415dfe:	41 55                	push   %r13
  415e00:	41 54                	push   %r12
      : std::runtime_error(build_what(mark_, msg_)), mark(mark_), msg(msg_) {}
  415e02:	48 b8 50 ab de ff ff 	movabs $0xffffffffffdeab50,%rax
  415e09:	ff ff ff 
  Exception(const Mark& mark_, const std::string& msg_)
  415e0c:	55                   	push   %rbp
  415e0d:	53                   	push   %rbx
  415e0e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 415df0 <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  415e15:	48 89 fd             	mov    %rdi,%rbp
  415e18:	49 89 f6             	mov    %rsi,%r14
  415e1b:	49 89 d5             	mov    %rdx,%r13
  415e1e:	48 83 ec 28          	sub    $0x28,%rsp
  415e22:	4c 01 db             	add    %r11,%rbx
      : std::runtime_error(build_what(mark_, msg_)), mark(mark_), msg(msg_) {}
  415e25:	48 89 e7             	mov    %rsp,%rdi
  415e28:	48 01 d8             	add    %rbx,%rax
  415e2b:	49 89 e4             	mov    %rsp,%r12
  415e2e:	ff d0                	callq  *%rax
  415e30:	48 b8 40 e8 dd ff ff 	movabs $0xffffffffffdde840,%rax
  415e37:	ff ff ff 
  415e3a:	48 89 e6             	mov    %rsp,%rsi
  415e3d:	48 89 ef             	mov    %rbp,%rdi
  415e40:	49 89 df             	mov    %rbx,%r15
  415e43:	48 01 d8             	add    %rbx,%rax
  415e46:	ff d0                	callq  *%rax
  415e48:	48 8b 3c 24          	mov    (%rsp),%rdi
  415e4c:	49 83 c4 10          	add    $0x10,%r12
  415e50:	4c 39 e7             	cmp    %r12,%rdi
  415e53:	74 0f                	je     415e64 <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x74>
  415e55:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  415e5c:	ff ff ff 
  415e5f:	48 01 d8             	add    %rbx,%rax
  415e62:	ff d0                	callq  *%rax
  415e64:	48 b8 30 fa ff ff ff 	movabs $0xfffffffffffffa30,%rax
  415e6b:	ff ff ff 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  415e6e:	48 8d 7d 20          	lea    0x20(%rbp),%rdi
  415e72:	48 01 d8             	add    %rbx,%rax
  415e75:	48 89 45 00          	mov    %rax,0x0(%rbp)
  415e79:	49 8b 06             	mov    (%r14),%rax
  415e7c:	48 89 45 10          	mov    %rax,0x10(%rbp)
  415e80:	41 8b 46 08          	mov    0x8(%r14),%eax
  415e84:	89 45 18             	mov    %eax,0x18(%rbp)
  415e87:	48 8d 45 30          	lea    0x30(%rbp),%rax
  415e8b:	48 89 45 20          	mov    %rax,0x20(%rbp)
  415e8f:	49 8b 75 00          	mov    0x0(%r13),%rsi
          _M_construct(__beg, __end, _Tag());
  415e93:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  415e9a:	ff ff ff 
  415e9d:	48 01 d8             	add    %rbx,%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  415ea0:	48 89 f2             	mov    %rsi,%rdx
  415ea3:	49 03 55 08          	add    0x8(%r13),%rdx
          _M_construct(__beg, __end, _Tag());
  415ea7:	ff d0                	callq  *%rax
  415ea9:	48 83 c4 28          	add    $0x28,%rsp
  415ead:	5b                   	pop    %rbx
  415eae:	5d                   	pop    %rbp
  415eaf:	41 5c                	pop    %r12
  415eb1:	41 5d                	pop    %r13
  415eb3:	41 5e                	pop    %r14
  415eb5:	41 5f                	pop    %r15
  415eb7:	c3                   	retq   
  415eb8:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  415ebc:	49 83 c4 10          	add    $0x10,%r12
  415ec0:	48 89 c5             	mov    %rax,%rbp
  415ec3:	4c 39 e7             	cmp    %r12,%rdi
  415ec6:	74 12                	je     415eda <_ZN4YAML9ExceptionC1ERKNS_4MarkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xea>
  415ec8:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  415ecf:	ff ff ff 
  415ed2:	49 89 df             	mov    %rbx,%r15
  415ed5:	48 01 da             	add    %rbx,%rdx
  415ed8:	ff d2                	callq  *%rdx
  415eda:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415ee1:	ff ff ff 
  415ee4:	48 89 ef             	mov    %rbp,%rdi
  415ee7:	49 89 df             	mov    %rbx,%r15
  415eea:	48 01 d8             	add    %rbx,%rax
  415eed:	ff d0                	callq  *%rax
  415eef:	48 ba 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rdx
  415ef6:	ff ff ff 
  415ef9:	49 89 c4             	mov    %rax,%r12
  415efc:	48 89 ef             	mov    %rbp,%rdi
  415eff:	49 89 df             	mov    %rbx,%r15
  415f02:	48 01 da             	add    %rbx,%rdx
  415f05:	ff d2                	callq  *%rdx
  415f07:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  415f0e:	ff ff ff 
  415f11:	4c 89 e7             	mov    %r12,%rdi
  415f14:	48 01 d8             	add    %rbx,%rax
  415f17:	ff d0                	callq  *%rax
  415f19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000415f20 <_ZN4YAML11InvalidNodeC1Ev>:
  InvalidNode()
  415f20:	41 57                	push   %r15
  415f22:	41 54                	push   %r12
  415f24:	49 bb e0 50 21 00 00 	movabs $0x2150e0,%r11
  415f2b:	00 00 00 
  415f2e:	55                   	push   %rbp
  415f2f:	53                   	push   %rbx
  415f30:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 415f20 <_ZN4YAML11InvalidNodeC1Ev>
  415f37:	49 89 fc             	mov    %rdi,%r12
  415f3a:	48 83 ec 38          	sub    $0x38,%rsp
  415f3e:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  415f41:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  415f46:	48 8d 45 10          	lea    0x10(%rbp),%rax
          _M_construct(__beg, __end, _Tag());
  415f4a:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  415f4d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  415f52:	48 b8 b5 80 df ff ff 	movabs $0xffffffffffdf80b5,%rax
  415f59:	ff ff ff 
  415f5c:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  415f60:	48 b8 58 80 df ff ff 	movabs $0xffffffffffdf8058,%rax
  415f67:	ff ff ff 
  415f6a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  415f6e:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  415f75:	ff ff ff 
  415f78:	48 01 d8             	add    %rbx,%rax
  415f7b:	ff d0                	callq  *%rax
      : Exception(mark_, msg_) {}
  415f7d:	48 b8 f0 ad de ff ff 	movabs $0xffffffffffdeadf0,%rax
  415f84:	ff ff ff 
      : RepresentationException(Mark::null_mark(), ErrorMsg::INVALID_NODE) {}
  415f87:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
  415f8e:	ff 
  415f8f:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
  415f96:	ff 
  415f97:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  415f9e:	ff 
      : Exception(mark_, msg_) {}
  415f9f:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  415fa4:	48 89 ea             	mov    %rbp,%rdx
  415fa7:	4c 89 e7             	mov    %r12,%rdi
  415faa:	48 01 d8             	add    %rbx,%rax
  415fad:	ff d0                	callq  *%rax
  415faf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  415fb4:	48 b8 58 fa ff ff ff 	movabs $0xfffffffffffffa58,%rax
  415fbb:	ff ff ff 
	if (!_M_is_local())
  415fbe:	48 83 c5 10          	add    $0x10,%rbp
  415fc2:	48 01 d8             	add    %rbx,%rax
  415fc5:	49 89 04 24          	mov    %rax,(%r12)
  415fc9:	48 39 ef             	cmp    %rbp,%rdi
  415fcc:	74 12                	je     415fe0 <_ZN4YAML11InvalidNodeC1Ev+0xc0>
  415fce:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  415fd5:	ff ff ff 
  415fd8:	49 89 df             	mov    %rbx,%r15
  415fdb:	48 01 d8             	add    %rbx,%rax
  415fde:	ff d0                	callq  *%rax
      : RepresentationException(Mark::null_mark(), ErrorMsg::INVALID_NODE) {}
  415fe0:	48 b8 80 fa ff ff ff 	movabs $0xfffffffffffffa80,%rax
  415fe7:	ff ff ff 
  415fea:	48 01 d8             	add    %rbx,%rax
  415fed:	49 89 04 24          	mov    %rax,(%r12)
  415ff1:	48 83 c4 38          	add    $0x38,%rsp
  415ff5:	5b                   	pop    %rbx
  415ff6:	5d                   	pop    %rbp
  415ff7:	41 5c                	pop    %r12
  415ff9:	41 5f                	pop    %r15
  415ffb:	c3                   	retq   
  415ffc:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  416001:	48 83 c5 10          	add    $0x10,%rbp
  416005:	49 89 c4             	mov    %rax,%r12
  416008:	48 39 ef             	cmp    %rbp,%rdi
  41600b:	74 12                	je     41601f <_ZN4YAML11InvalidNodeC1Ev+0xff>
  41600d:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  416014:	ff ff ff 
  416017:	49 89 df             	mov    %rbx,%r15
  41601a:	48 01 da             	add    %rbx,%rdx
  41601d:	ff d2                	callq  *%rdx
  41601f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416026:	ff ff ff 
  416029:	4c 89 e7             	mov    %r12,%rdi
  41602c:	49 89 df             	mov    %rbx,%r15
  41602f:	48 01 d8             	add    %rbx,%rax
  416032:	ff d0                	callq  *%rax
  416034:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41603b:	00 00 00 
  41603e:	66 90                	xchg   %ax,%ax

0000000000416040 <_ZN4YAML13BadConversionC1Ev>:
  BadConversion()
  416040:	41 57                	push   %r15
  416042:	41 54                	push   %r12
  416044:	49 bb c0 4f 21 00 00 	movabs $0x214fc0,%r11
  41604b:	00 00 00 
  41604e:	55                   	push   %rbp
  41604f:	53                   	push   %rbx
  416050:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 416040 <_ZN4YAML13BadConversionC1Ev>
  416057:	49 89 fc             	mov    %rdi,%r12
  41605a:	48 83 ec 38          	sub    $0x38,%rsp
  41605e:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  416061:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  416066:	48 8d 45 10          	lea    0x10(%rbp),%rax
          _M_construct(__beg, __end, _Tag());
  41606a:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41606d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  416072:	48 b8 c4 80 df ff ff 	movabs $0xffffffffffdf80c4,%rax
  416079:	ff ff ff 
  41607c:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  416080:	48 b8 b6 80 df ff ff 	movabs $0xffffffffffdf80b6,%rax
  416087:	ff ff ff 
  41608a:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41608e:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  416095:	ff ff ff 
  416098:	48 01 d8             	add    %rbx,%rax
  41609b:	ff d0                	callq  *%rax
      : Exception(mark_, msg_) {}
  41609d:	48 b8 f0 ad de ff ff 	movabs $0xffffffffffdeadf0,%rax
  4160a4:	ff ff ff 
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_CONVERSION) {}
  4160a7:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
  4160ae:	ff 
  4160af:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
  4160b6:	ff 
  4160b7:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  4160be:	ff 
      : Exception(mark_, msg_) {}
  4160bf:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  4160c4:	48 89 ea             	mov    %rbp,%rdx
  4160c7:	4c 89 e7             	mov    %r12,%rdi
  4160ca:	48 01 d8             	add    %rbx,%rax
  4160cd:	ff d0                	callq  *%rax
  4160cf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4160d4:	48 b8 58 fa ff ff ff 	movabs $0xfffffffffffffa58,%rax
  4160db:	ff ff ff 
	if (!_M_is_local())
  4160de:	48 83 c5 10          	add    $0x10,%rbp
  4160e2:	48 01 d8             	add    %rbx,%rax
  4160e5:	49 89 04 24          	mov    %rax,(%r12)
  4160e9:	48 39 ef             	cmp    %rbp,%rdi
  4160ec:	74 12                	je     416100 <_ZN4YAML13BadConversionC1Ev+0xc0>
  4160ee:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4160f5:	ff ff ff 
  4160f8:	49 89 df             	mov    %rbx,%r15
  4160fb:	48 01 d8             	add    %rbx,%rax
  4160fe:	ff d0                	callq  *%rax
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_CONVERSION) {}
  416100:	48 b8 a8 fa ff ff ff 	movabs $0xfffffffffffffaa8,%rax
  416107:	ff ff ff 
  41610a:	48 01 d8             	add    %rbx,%rax
  41610d:	49 89 04 24          	mov    %rax,(%r12)
  416111:	48 83 c4 38          	add    $0x38,%rsp
  416115:	5b                   	pop    %rbx
  416116:	5d                   	pop    %rbp
  416117:	41 5c                	pop    %r12
  416119:	41 5f                	pop    %r15
  41611b:	c3                   	retq   
  41611c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  416121:	48 83 c5 10          	add    $0x10,%rbp
  416125:	49 89 c4             	mov    %rax,%r12
  416128:	48 39 ef             	cmp    %rbp,%rdi
  41612b:	74 12                	je     41613f <_ZN4YAML13BadConversionC1Ev+0xff>
  41612d:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  416134:	ff ff ff 
  416137:	49 89 df             	mov    %rbx,%r15
  41613a:	48 01 da             	add    %rbx,%rdx
  41613d:	ff d2                	callq  *%rdx
  41613f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416146:	ff ff ff 
  416149:	4c 89 e7             	mov    %r12,%rdi
  41614c:	49 89 df             	mov    %rbx,%r15
  41614f:	48 01 d8             	add    %rbx,%rax
  416152:	ff d0                	callq  *%rax
  416154:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41615b:	00 00 00 
  41615e:	66 90                	xchg   %ax,%ax

0000000000416160 <_ZN4YAML12BadSubscriptC1Ev>:
 public:
  BadSubscript()
  416160:	41 57                	push   %r15
  416162:	41 54                	push   %r12
  416164:	49 bb a0 4e 21 00 00 	movabs $0x214ea0,%r11
  41616b:	00 00 00 
  41616e:	55                   	push   %rbp
  41616f:	53                   	push   %rbx
  416170:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 416160 <_ZN4YAML12BadSubscriptC1Ev>
  416177:	49 89 fc             	mov    %rdi,%r12
  41617a:	48 83 ec 38          	sub    $0x38,%rsp
  41617e:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  416181:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  416186:	48 8d 45 10          	lea    0x10(%rbp),%rax
          _M_construct(__beg, __end, _Tag());
  41618a:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41618d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  416192:	48 b8 e0 80 df ff ff 	movabs $0xffffffffffdf80e0,%rax
  416199:	ff ff ff 
  41619c:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4161a0:	48 b8 c5 80 df ff ff 	movabs $0xffffffffffdf80c5,%rax
  4161a7:	ff ff ff 
  4161aa:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  4161ae:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  4161b5:	ff ff ff 
  4161b8:	48 01 d8             	add    %rbx,%rax
  4161bb:	ff d0                	callq  *%rax
      : Exception(mark_, msg_) {}
  4161bd:	48 b8 f0 ad de ff ff 	movabs $0xffffffffffdeadf0,%rax
  4161c4:	ff ff ff 
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_SUBSCRIPT) {}
  4161c7:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%rsp)
  4161ce:	ff 
  4161cf:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
  4161d6:	ff 
  4161d7:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%rsp)
  4161de:	ff 
      : Exception(mark_, msg_) {}
  4161df:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  4161e4:	48 89 ea             	mov    %rbp,%rdx
  4161e7:	4c 89 e7             	mov    %r12,%rdi
  4161ea:	48 01 d8             	add    %rbx,%rax
  4161ed:	ff d0                	callq  *%rax
  4161ef:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4161f4:	48 b8 58 fa ff ff ff 	movabs $0xfffffffffffffa58,%rax
  4161fb:	ff ff ff 
	if (!_M_is_local())
  4161fe:	48 83 c5 10          	add    $0x10,%rbp
  416202:	48 01 d8             	add    %rbx,%rax
  416205:	49 89 04 24          	mov    %rax,(%r12)
  416209:	48 39 ef             	cmp    %rbp,%rdi
  41620c:	74 12                	je     416220 <_ZN4YAML12BadSubscriptC1Ev+0xc0>
  41620e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416215:	ff ff ff 
  416218:	49 89 df             	mov    %rbx,%r15
  41621b:	48 01 d8             	add    %rbx,%rax
  41621e:	ff d0                	callq  *%rax
      : RepresentationException(Mark::null_mark(), ErrorMsg::BAD_SUBSCRIPT) {}
  416220:	48 b8 d0 fa ff ff ff 	movabs $0xfffffffffffffad0,%rax
  416227:	ff ff ff 
  41622a:	48 01 d8             	add    %rbx,%rax
  41622d:	49 89 04 24          	mov    %rax,(%r12)
  416231:	48 83 c4 38          	add    $0x38,%rsp
  416235:	5b                   	pop    %rbx
  416236:	5d                   	pop    %rbp
  416237:	41 5c                	pop    %r12
  416239:	41 5f                	pop    %r15
  41623b:	c3                   	retq   
  41623c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  416241:	48 83 c5 10          	add    $0x10,%rbp
  416245:	49 89 c4             	mov    %rax,%r12
  416248:	48 39 ef             	cmp    %rbp,%rdi
  41624b:	74 12                	je     41625f <_ZN4YAML12BadSubscriptC1Ev+0xff>
  41624d:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  416254:	ff ff ff 
  416257:	49 89 df             	mov    %rbx,%r15
  41625a:	48 01 da             	add    %rbx,%rdx
  41625d:	ff d2                	callq  *%rdx
  41625f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416266:	ff ff ff 
  416269:	4c 89 e7             	mov    %r12,%rdi
  41626c:	49 89 df             	mov    %rbx,%r15
  41626f:	48 01 d8             	add    %rbx,%rax
  416272:	ff d0                	callq  *%rax
  416274:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41627b:	00 00 00 
  41627e:	66 90                	xchg   %ax,%ax

0000000000416280 <_ZN4YAML4Node5beginEv>:
inline iterator Node::begin() {
  416280:	41 57                	push   %r15
  416282:	41 55                	push   %r13
  416284:	49 bb 80 4d 21 00 00 	movabs $0x214d80,%r11
  41628b:	00 00 00 
  41628e:	41 54                	push   %r12
  416290:	55                   	push   %rbp
  416291:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 416280 <_ZN4YAML4Node5beginEv>
  416298:	53                   	push   %rbx
  416299:	48 89 fb             	mov    %rdi,%rbx
  41629c:	4c 01 dd             	add    %r11,%rbp
  41629f:	48 83 ec 20          	sub    $0x20,%rsp
  if (!m_isValid)
  4162a3:	80 3e 00             	cmpb   $0x0,(%rsi)
  4162a6:	0f 84 ac 00 00 00    	je     416358 <_ZN4YAML4Node5beginEv+0xd8>
  return m_pNode ? iterator(m_pNode->begin(), m_pMemory) : iterator();
  4162ac:	48 8b 46 18          	mov    0x18(%rsi),%rax
  4162b0:	48 85 c0             	test   %rax,%rax
  4162b3:	0f 84 9f 00 00 00    	je     416358 <_ZN4YAML4Node5beginEv+0xd8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  4162b9:	4c 8b 66 10          	mov    0x10(%rsi),%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  4162bd:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
        if( pi_ != 0 ) pi_->add_ref_copy();
  4162c1:	4d 85 e4             	test   %r12,%r12
  4162c4:	74 0b                	je     4162d1 <_ZN4YAML4Node5beginEv+0x51>
  4162c6:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
  4162cd:	48 8b 46 18          	mov    0x18(%rsi),%rax
  4162d1:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  4162d4:	48 85 c0             	test   %rax,%rax
  4162d7:	0f 84 c8 00 00 00    	je     4163a5 <_ZN4YAML4Node5beginEv+0x125>
  4162dd:	48 8b 30             	mov    (%rax),%rsi
  4162e0:	48 85 f6             	test   %rsi,%rsi
  4162e3:	0f 84 ad 00 00 00    	je     416396 <_ZN4YAML4Node5beginEv+0x116>
  std::size_t size() const { return m_pData->size(); }

  const_node_iterator begin() const {
    return static_cast<const node_data&>(*m_pData).begin();
  }
  node_iterator begin() { return m_pData->begin(); }
  4162e9:	48 b8 f0 e7 dd ff ff 	movabs $0xffffffffffdde7f0,%rax
  4162f0:	ff ff ff 
  4162f3:	48 89 e7             	mov    %rsp,%rdi
  4162f6:	49 89 ef             	mov    %rbp,%r15
  4162f9:	48 01 e8             	add    %rbp,%rax
  4162fc:	ff d0                	callq  *%rax
      >::type super_t;
   public:
      iterator_adaptor() {}

      explicit iterator_adaptor(Base const &iter)
          : m_iterator(iter)
  4162fe:	8b 04 24             	mov    (%rsp),%eax
  416301:	4d 85 e4             	test   %r12,%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  416304:	4c 89 6b 20          	mov    %r13,0x20(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416308:	4c 89 63 28          	mov    %r12,0x28(%rbx)
  41630c:	89 03                	mov    %eax,(%rbx)
  41630e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  416313:	48 89 43 08          	mov    %rax,0x8(%rbx)
  416317:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41631c:	48 89 43 10          	mov    %rax,0x10(%rbx)
  416320:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  416325:	48 89 43 18          	mov    %rax,0x18(%rbx)
        if( pi_ != 0 ) pi_->add_ref_copy();
  416329:	74 19                	je     416344 <_ZN4YAML4Node5beginEv+0xc4>
  41632b:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  416332:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  416339:	ff ff ff 
  41633c:	4c 89 e7             	mov    %r12,%rdi
  41633f:	48 01 e8             	add    %rbp,%rax
  416342:	ff d0                	callq  *%rax
}
  416344:	48 83 c4 20          	add    $0x20,%rsp
  416348:	48 89 d8             	mov    %rbx,%rax
  41634b:	5b                   	pop    %rbx
  41634c:	5d                   	pop    %rbp
  41634d:	41 5c                	pop    %r12
  41634f:	41 5d                	pop    %r13
  416351:	41 5f                	pop    %r15
  416353:	c3                   	retq   
  416354:	0f 1f 40 00          	nopl   0x0(%rax)
      : m_type(iterator_type::None), m_seqIt(), m_mapIt(), m_mapEnd() {}
  416358:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
      : _M_current(_Iterator()) { }
  41635e:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  416365:	00 
  416366:	48 89 d8             	mov    %rbx,%rax
      : _M_node() { }
  416369:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  416370:	00 
  416371:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  416378:	00 
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  416379:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  416380:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  416381:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  416388:	00 
  416389:	48 83 c4 20          	add    $0x20,%rsp
  41638d:	5b                   	pop    %rbx
  41638e:	5d                   	pop    %rbp
  41638f:	41 5c                	pop    %r12
  416391:	41 5d                	pop    %r13
  416393:	41 5f                	pop    %r15
  416395:	c3                   	retq   
  416396:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  41639d:	ff ff ff 
  4163a0:	48 01 e8             	add    %rbp,%rax
  4163a3:	ff d0                	callq  *%rax
  4163a5:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  4163ac:	ff ff ff 
  4163af:	48 01 e8             	add    %rbp,%rax
  4163b2:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  4163b4:	4d 85 e4             	test   %r12,%r12
  4163b7:	48 89 c3             	mov    %rax,%rbx
  4163ba:	74 12                	je     4163ce <_ZN4YAML4Node5beginEv+0x14e>
  4163bc:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  4163c3:	ff ff ff 
  4163c6:	4c 89 e7             	mov    %r12,%rdi
  4163c9:	48 01 e8             	add    %rbp,%rax
  4163cc:	ff d0                	callq  *%rax
  4163ce:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  4163d5:	ff ff ff 
  4163d8:	48 89 df             	mov    %rbx,%rdi
  4163db:	49 89 ef             	mov    %rbp,%r15
  4163de:	48 01 e8             	add    %rbp,%rax
  4163e1:	ff d0                	callq  *%rax
  4163e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4163ea:	00 00 00 
  4163ed:	0f 1f 00             	nopl   (%rax)

00000000004163f0 <_ZN4YAML4Node3endEv>:
inline iterator Node::end() {
  4163f0:	41 57                	push   %r15
  4163f2:	41 55                	push   %r13
  4163f4:	49 bb 10 4c 21 00 00 	movabs $0x214c10,%r11
  4163fb:	00 00 00 
  4163fe:	41 54                	push   %r12
  416400:	55                   	push   %rbp
  416401:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 4163f0 <_ZN4YAML4Node3endEv>
  416408:	53                   	push   %rbx
  416409:	48 89 fb             	mov    %rdi,%rbx
  41640c:	4c 01 dd             	add    %r11,%rbp
  41640f:	48 83 ec 20          	sub    $0x20,%rsp
  if (!m_isValid)
  416413:	80 3e 00             	cmpb   $0x0,(%rsi)
  416416:	0f 84 ac 00 00 00    	je     4164c8 <_ZN4YAML4Node3endEv+0xd8>
  return m_pNode ? iterator(m_pNode->end(), m_pMemory) : iterator();
  41641c:	48 8b 46 18          	mov    0x18(%rsi),%rax
  416420:	48 85 c0             	test   %rax,%rax
  416423:	0f 84 9f 00 00 00    	je     4164c8 <_ZN4YAML4Node3endEv+0xd8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416429:	4c 8b 66 10          	mov    0x10(%rsi),%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41642d:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
        if( pi_ != 0 ) pi_->add_ref_copy();
  416431:	4d 85 e4             	test   %r12,%r12
  416434:	74 0b                	je     416441 <_ZN4YAML4Node3endEv+0x51>
  416436:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
  41643d:	48 8b 46 18          	mov    0x18(%rsi),%rax
  416441:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  416444:	48 85 c0             	test   %rax,%rax
  416447:	0f 84 c8 00 00 00    	je     416515 <_ZN4YAML4Node3endEv+0x125>
  41644d:	48 8b 30             	mov    (%rax),%rsi
  416450:	48 85 f6             	test   %rsi,%rsi
  416453:	0f 84 ad 00 00 00    	je     416506 <_ZN4YAML4Node3endEv+0x116>

  const_node_iterator end() const {
    return static_cast<const node_data&>(*m_pData).end();
  }
  node_iterator end() { return m_pData->end(); }
  416459:	48 b8 c0 e3 dd ff ff 	movabs $0xffffffffffdde3c0,%rax
  416460:	ff ff ff 
  416463:	48 89 e7             	mov    %rsp,%rdi
  416466:	49 89 ef             	mov    %rbp,%r15
  416469:	48 01 e8             	add    %rbp,%rax
  41646c:	ff d0                	callq  *%rax
  41646e:	8b 04 24             	mov    (%rsp),%eax
  416471:	4d 85 e4             	test   %r12,%r12
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  416474:	4c 89 6b 20          	mov    %r13,0x20(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416478:	4c 89 63 28          	mov    %r12,0x28(%rbx)
  41647c:	89 03                	mov    %eax,(%rbx)
  41647e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  416483:	48 89 43 08          	mov    %rax,0x8(%rbx)
  416487:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41648c:	48 89 43 10          	mov    %rax,0x10(%rbx)
  416490:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  416495:	48 89 43 18          	mov    %rax,0x18(%rbx)
        if( pi_ != 0 ) pi_->add_ref_copy();
  416499:	74 19                	je     4164b4 <_ZN4YAML4Node3endEv+0xc4>
  41649b:	f0 41 83 44 24 08 01 	lock addl $0x1,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  4164a2:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  4164a9:	ff ff ff 
  4164ac:	4c 89 e7             	mov    %r12,%rdi
  4164af:	48 01 e8             	add    %rbp,%rax
  4164b2:	ff d0                	callq  *%rax
}
  4164b4:	48 83 c4 20          	add    $0x20,%rsp
  4164b8:	48 89 d8             	mov    %rbx,%rax
  4164bb:	5b                   	pop    %rbx
  4164bc:	5d                   	pop    %rbp
  4164bd:	41 5c                	pop    %r12
  4164bf:	41 5d                	pop    %r13
  4164c1:	41 5f                	pop    %r15
  4164c3:	c3                   	retq   
  4164c4:	0f 1f 40 00          	nopl   0x0(%rax)
  4164c8:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  4164ce:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  4164d5:	00 
  4164d6:	48 89 d8             	mov    %rbx,%rax
  4164d9:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  4164e0:	00 
  4164e1:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  4164e8:	00 
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  4164e9:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  4164f0:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  4164f1:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  4164f8:	00 
  4164f9:	48 83 c4 20          	add    $0x20,%rsp
  4164fd:	5b                   	pop    %rbx
  4164fe:	5d                   	pop    %rbp
  4164ff:	41 5c                	pop    %r12
  416501:	41 5d                	pop    %r13
  416503:	41 5f                	pop    %r15
  416505:	c3                   	retq   
  416506:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  41650d:	ff ff ff 
  416510:	48 01 e8             	add    %rbp,%rax
  416513:	ff d0                	callq  *%rax
  416515:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  41651c:	ff ff ff 
  41651f:	48 01 e8             	add    %rbp,%rax
  416522:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  416524:	4d 85 e4             	test   %r12,%r12
  416527:	48 89 c3             	mov    %rax,%rbx
  41652a:	74 12                	je     41653e <_ZN4YAML4Node3endEv+0x14e>
  41652c:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  416533:	ff ff ff 
  416536:	4c 89 e7             	mov    %r12,%rdi
  416539:	48 01 e8             	add    %rbp,%rax
  41653c:	ff d0                	callq  *%rax
  41653e:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416545:	ff ff ff 
  416548:	48 89 df             	mov    %rbx,%rdi
  41654b:	49 89 ef             	mov    %rbp,%r15
  41654e:	48 01 e8             	add    %rbp,%rax
  416551:	ff d0                	callq  *%rax
  416553:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41655a:	00 00 00 
  41655d:	0f 1f 00             	nopl   (%rax)

0000000000416560 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi>:
  YAML_DEFINE_CONVERT_STREAMABLE(type, -)

#define YAML_DEFINE_CONVERT_STREAMABLE_UNSIGNED(type) \
  YAML_DEFINE_CONVERT_STREAMABLE(type, +)

YAML_DEFINE_CONVERT_STREAMABLE_SIGNED(int);
  416560:	41 57                	push   %r15
  416562:	41 54                	push   %r12
  416564:	49 bb a0 4a 21 00 00 	movabs $0x214aa0,%r11
  41656b:	00 00 00 
  41656e:	55                   	push   %rbp
  41656f:	53                   	push   %rbx
  416570:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 416560 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi>
  416577:	48 81 ec a8 01 00 00 	sub    $0x1a8,%rsp
  41657e:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  416581:	80 3f 00             	cmpb   $0x0,(%rdi)
  416584:	0f 84 12 01 00 00    	je     41669c <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x13c>
  return m_pNode ? m_pNode->type() : NodeType::Null;
  41658a:	48 8b 47 18          	mov    0x18(%rdi),%rax
  41658e:	48 85 c0             	test   %rax,%rax
  416591:	74 3d                	je     4165d0 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x70>
  416593:	48 8b 00             	mov    (%rax),%rax
        BOOST_ASSERT( px != 0 );
  416596:	48 85 c0             	test   %rax,%rax
  416599:	0f 84 66 01 00 00    	je     416705 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x1a5>
  41659f:	49 89 f4             	mov    %rsi,%r12
  4165a2:	48 8b 30             	mov    (%rax),%rsi
  4165a5:	48 85 f6             	test   %rsi,%rsi
  4165a8:	0f 84 48 01 00 00    	je     4166f6 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x196>
  4165ae:	0f b6 06             	movzbl (%rsi),%eax
    return m_isDefined ? m_type : NodeType::Undefined;
  4165b1:	84 c0                	test   %al,%al
  4165b3:	74 08                	je     4165bd <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x5d>
  4165b5:	31 c0                	xor    %eax,%eax
  4165b7:	83 7e 04 02          	cmpl   $0x2,0x4(%rsi)
  4165bb:	74 23                	je     4165e0 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x80>
  4165bd:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  4165c4:	5b                   	pop    %rbx
  4165c5:	5d                   	pop    %rbp
  4165c6:	41 5c                	pop    %r12
  4165c8:	41 5f                	pop    %r15
  4165ca:	c3                   	retq   
  4165cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4165d0:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  4165d7:	31 c0                	xor    %eax,%eax
  4165d9:	5b                   	pop    %rbx
  4165da:	5d                   	pop    %rbp
  4165db:	41 5c                	pop    %r12
  4165dd:	41 5f                	pop    %r15
  4165df:	c3                   	retq   
  4165e0:	48 8d 6c 24 10       	lea    0x10(%rsp),%rbp
  4165e5:	48 b8 50 e9 dd ff ff 	movabs $0xffffffffffdde950,%rax
  4165ec:	ff ff ff 
  const std::string& scalar() const { return m_scalar; }
  4165ef:	48 83 c6 30          	add    $0x30,%rsi
  4165f3:	48 01 d8             	add    %rbx,%rax
  4165f6:	ba 18 00 00 00       	mov    $0x18,%edx
  4165fb:	49 89 df             	mov    %rbx,%r15
  4165fe:	48 89 ef             	mov    %rbp,%rdi
  416601:	ff d0                	callq  *%rax
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
	__pf(*this);
  416603:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  416608:	48 89 e9             	mov    %rbp,%rcx
      _S_ios_fmtflags_min = ~__INT_MAX__
    };

  inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
  41660b:	83 a4 24 a8 00 00 00 	andl   $0xfffffffd,0xa8(%rsp)
  416612:	fd 
  416613:	4c 89 e6             	mov    %r12,%rsi
  416616:	48 89 ef             	mov    %rbp,%rdi
  416619:	48 03 48 e8          	add    -0x18(%rax),%rcx
  41661d:	48 b8 c0 e5 dd ff ff 	movabs $0xffffffffffdde5c0,%rax
  416624:	ff ff ff 
  416627:	48 01 d8             	add    %rbx,%rax
  41662a:	81 61 18 ff ef ff ff 	andl   $0xffffefff,0x18(%rcx)
  416631:	ff d0                	callq  *%rax
  416633:	48 89 c2             	mov    %rax,%rdx
  416636:	48 8b 00             	mov    (%rax),%rax
      _S_ios_iostate_min = ~__INT_MAX__
    };

  inline _GLIBCXX_CONSTEXPR _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
  416639:	48 8b 48 e8          	mov    -0x18(%rax),%rcx
  41663d:	31 c0                	xor    %eax,%eax
  41663f:	f6 44 0a 20 05       	testb  $0x5,0x20(%rdx,%rcx,1)
  416644:	74 32                	je     416678 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x118>
  416646:	48 ba 80 e6 dd ff ff 	movabs $0xffffffffffdde680,%rdx
  41664d:	ff ff ff 
  416650:	88 44 24 0f          	mov    %al,0xf(%rsp)
  416654:	49 89 df             	mov    %rbx,%r15
  416657:	48 89 ef             	mov    %rbp,%rdi
  41665a:	48 01 da             	add    %rbx,%rdx
  41665d:	ff d2                	callq  *%rdx
  41665f:	0f b6 44 24 0f       	movzbl 0xf(%rsp),%eax
  416664:	48 81 c4 a8 01 00 00 	add    $0x1a8,%rsp
  41666b:	5b                   	pop    %rbx
  41666c:	5d                   	pop    %rbp
  41666d:	41 5c                	pop    %r12
  41666f:	41 5f                	pop    %r15
  416671:	c3                   	retq   
  416672:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      { return __pf(*this); }
  416678:	48 b8 c0 e6 dd ff ff 	movabs $0xffffffffffdde6c0,%rax
  41667f:	ff ff ff 
  416682:	48 89 ef             	mov    %rbp,%rdi
  416685:	48 01 d8             	add    %rbx,%rax
  416688:	ff d0                	callq  *%rax
  41668a:	48 8b 10             	mov    (%rax),%rdx
  41668d:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  416691:	8b 44 10 20          	mov    0x20(%rax,%rdx,1),%eax
  416695:	d1 e8                	shr    %eax
  416697:	83 e0 01             	and    $0x1,%eax
  41669a:	eb aa                	jmp    416646 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0xe6>
    throw InvalidNode();
  41669c:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  4166a3:	ff ff ff 
  4166a6:	bf 40 00 00 00       	mov    $0x40,%edi
  4166ab:	49 89 df             	mov    %rbx,%r15
  4166ae:	48 01 d8             	add    %rbx,%rax
  4166b1:	ff d0                	callq  *%rax
  4166b3:	48 89 c5             	mov    %rax,%rbp
  4166b6:	48 89 c7             	mov    %rax,%rdi
  4166b9:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  4166c0:	ff ff ff 
  4166c3:	48 01 d8             	add    %rbx,%rax
  4166c6:	ff d0                	callq  *%rax
  4166c8:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  4166cf:	ff ff ff 
  4166d2:	48 89 ef             	mov    %rbp,%rdi
  4166d5:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4166d9:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  4166e0:	ff ff ff 
  4166e3:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  4166e7:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  4166ee:	ff ff ff 
  4166f1:	48 01 d8             	add    %rbx,%rax
  4166f4:	ff d0                	callq  *%rax
  4166f6:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  4166fd:	ff ff ff 
  416700:	48 01 d8             	add    %rbx,%rax
  416703:	ff d0                	callq  *%rax
  416705:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  41670c:	ff ff ff 
  41670f:	48 01 d8             	add    %rbx,%rax
  416712:	ff d0                	callq  *%rax
  416714:	49 89 c4             	mov    %rax,%r12
  416717:	48 89 ef             	mov    %rbp,%rdi
  41671a:	49 89 df             	mov    %rbx,%r15
  41671d:	48 ba 80 e6 dd ff ff 	movabs $0xffffffffffdde680,%rdx
  416724:	ff ff ff 
  416727:	48 01 da             	add    %rbx,%rdx
  41672a:	ff d2                	callq  *%rdx
  41672c:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416733:	ff ff ff 
  416736:	4c 89 e7             	mov    %r12,%rdi
  416739:	48 01 d8             	add    %rbx,%rax
  41673c:	ff d0                	callq  *%rax
  41673e:	49 89 c4             	mov    %rax,%r12
  416741:	48 89 ef             	mov    %rbp,%rdi
  416744:	49 89 df             	mov    %rbx,%r15
  416747:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41674e:	ff ff ff 
  416751:	eb d4                	jmp    416727 <_ZN4YAML7convertIiE6decodeERKNS_4NodeERi+0x1c7>
  416753:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41675a:	00 00 00 
  41675d:	0f 1f 00             	nopl   (%rax)

0000000000416760 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z9enq_uppermS2_miEES2_miEEvmmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
  416760:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 416760 <_ZN5swarm10bareRunnerIFvmP13HighLevelNodemiEXadL_Z9enq_uppermS2_miEES2_miEEvmmmm>
  416767:	49 bb a0 48 21 00 00 	movabs $0x2148a0,%r11
  41676e:	00 00 00 
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1), uncastArg<V>(arg2));
  416771:	49 b8 50 43 de ff ff 	movabs $0xffffffffffde4350,%r8
  416778:	ff ff ff 
  41677b:	4c 01 d8             	add    %r11,%rax
  41677e:	4c 01 c0             	add    %r8,%rax
  416781:	ff e0                	jmpq   *%rax
  416783:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41678a:	00 00 00 
  41678d:	0f 1f 00             	nopl   (%rax)

0000000000416790 <_ZN5swarm10bareRunnerIFvmfPK5StateimEXadL_Z10lls_searchmfS3_imEEfPS1_imEEvmmmmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3) {
  416790:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 416790 <_ZN5swarm10bareRunnerIFvmfPK5StateimEXadL_Z10lls_searchmfS3_imEEfPS1_imEEvmmmmm>
  416797:	49 bb 70 48 21 00 00 	movabs $0x214870,%r11
  41679e:	00 00 00 
  4167a1:	49 89 d1             	mov    %rdx,%r9
    return u.res;
  4167a4:	89 74 24 f4          	mov    %esi,-0xc(%rsp)
inline void bareRunner(Timestamp ts, uint64_t arg0, uint64_t arg1, uint64_t arg2, uint64_t arg3) {
  4167a8:	48 89 ca             	mov    %rcx,%rdx
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1), uncastArg<V>(arg2), uncastArg<X>(arg3));
  4167ab:	4c 89 c1             	mov    %r8,%rcx
  4167ae:	4c 01 d8             	add    %r11,%rax
  4167b1:	49 b8 c0 43 de ff ff 	movabs $0xffffffffffde43c0,%r8
  4167b8:	ff ff ff 
  4167bb:	4c 89 ce             	mov    %r9,%rsi
    return u.res;
  4167be:	f3 0f 10 44 24 f4    	movss  -0xc(%rsp),%xmm0
    (*f)(ts, uncastArg<T>(arg0), uncastArg<U>(arg1), uncastArg<V>(arg2), uncastArg<X>(arg3));
  4167c4:	4c 01 c0             	add    %r8,%rax
  4167c7:	ff e0                	jmpq   *%rax
  4167c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004167d0 <_ZN5swarm10bareRunnerIFvmiEXadL_Z6star_tmiEEiEEvmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0) {
  4167d0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4167d0 <_ZN5swarm10bareRunnerIFvmiEXadL_Z6star_tmiEEiEEvmm>
  4167d7:	49 bb 30 48 21 00 00 	movabs $0x214830,%r11
  4167de:	00 00 00 
    (*f)(ts, uncastArg<T>(arg0));
  4167e1:	48 ba a0 45 de ff ff 	movabs $0xffffffffffde45a0,%rdx
  4167e8:	ff ff ff 
  4167eb:	4c 01 d8             	add    %r11,%rax
  4167ee:	48 01 d0             	add    %rdx,%rax
  4167f1:	ff e0                	jmpq   *%rax
  4167f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4167fa:	00 00 00 
  4167fd:	0f 1f 00             	nopl   (%rax)

0000000000416800 <_ZN5boost15program_options19options_descriptionD1Ev>:
        for options by name.
        
        See @ref a_adding_options "here" for option adding interface discussion.
        @sa option_description
    */
    class BOOST_PROGRAM_OPTIONS_DECL options_description {
  416800:	41 57                	push   %r15
  416802:	41 56                	push   %r14
  416804:	49 bb 00 48 21 00 00 	movabs $0x214800,%r11
  41680b:	00 00 00 
  41680e:	41 55                	push   %r13
  416810:	41 54                	push   %r12
  416812:	4c 8d 2d e7 ff ff ff 	lea    -0x19(%rip),%r13        # 416800 <_ZN5boost15program_options19options_descriptionD1Ev>
  416819:	55                   	push   %rbp
  41681a:	53                   	push   %rbx
  41681b:	49 89 fc             	mov    %rdi,%r12
  41681e:	4d 01 dd             	add    %r11,%r13
  416821:	48 83 ec 08          	sub    $0x8,%rsp
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  416825:	4c 8b 7f 70          	mov    0x70(%rdi),%r15
  416829:	48 8b 6f 68          	mov    0x68(%rdi),%rbp
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
  41682d:	49 39 ef             	cmp    %rbp,%r15
  416830:	74 63                	je     416895 <_ZN5boost15program_options19options_descriptionD1Ev+0x95>
  416832:	48 b8 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rax
  416839:	ff ff ff 
  41683c:	4d 8d 74 05 00       	lea    0x0(%r13,%rax,1),%r14
  416841:	eb 0e                	jmp    416851 <_ZN5boost15program_options19options_descriptionD1Ev+0x51>
  416843:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  416848:	48 83 c5 10          	add    $0x10,%rbp
  41684c:	49 39 ef             	cmp    %rbp,%r15
  41684f:	74 3f                	je     416890 <_ZN5boost15program_options19options_descriptionD1Ev+0x90>
  416851:	48 8b 5d 08          	mov    0x8(%rbp),%rbx
  416855:	48 85 db             	test   %rbx,%rbx
  416858:	74 ee                	je     416848 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
  41685a:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  41685f:	75 e7                	jne    416848 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
            dispose();
  416861:	48 8b 03             	mov    (%rbx),%rax
  416864:	48 89 df             	mov    %rbx,%rdi
  416867:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41686a:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  41686f:	75 d7                	jne    416848 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
            destroy();
  416871:	48 8b 03             	mov    (%rbx),%rax
        delete this;
  416874:	48 89 df             	mov    %rbx,%rdi
            destroy();
  416877:	48 8b 50 18          	mov    0x18(%rax),%rdx
  41687b:	4c 39 f2             	cmp    %r14,%rdx
  41687e:	0f 85 1a 01 00 00    	jne    41699e <_ZN5boost15program_options19options_descriptionD1Ev+0x19e>
  416884:	48 83 c5 10          	add    $0x10,%rbp
        delete this;
  416888:	ff 50 08             	callq  *0x8(%rax)
  41688b:	49 39 ef             	cmp    %rbp,%r15
  41688e:	75 c1                	jne    416851 <_ZN5boost15program_options19options_descriptionD1Ev+0x51>
  416890:	49 8b 6c 24 68       	mov    0x68(%r12),%rbp
	if (__p)
  416895:	48 85 ed             	test   %rbp,%rbp
  416898:	74 15                	je     4168af <_ZN5boost15program_options19options_descriptionD1Ev+0xaf>
  41689a:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4168a1:	ff ff ff 
  4168a4:	48 89 ef             	mov    %rbp,%rdi
  4168a7:	4d 89 ef             	mov    %r13,%r15
  4168aa:	4c 01 e8             	add    %r13,%rax
  4168ad:	ff d0                	callq  *%rax
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
	if (_M_impl._M_start._M_p)
  4168af:	49 8b 7c 24 40       	mov    0x40(%r12),%rdi
  4168b4:	48 85 ff             	test   %rdi,%rdi
  4168b7:	74 12                	je     4168cb <_ZN5boost15program_options19options_descriptionD1Ev+0xcb>
  4168b9:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4168c0:	ff ff ff 
  4168c3:	4d 89 ef             	mov    %r13,%r15
  4168c6:	4c 01 e8             	add    %r13,%rax
  4168c9:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4168cb:	4d 8b 7c 24 30       	mov    0x30(%r12),%r15
  4168d0:	49 8b 6c 24 28       	mov    0x28(%r12),%rbp
  4168d5:	49 39 ef             	cmp    %rbp,%r15
  4168d8:	74 63                	je     41693d <_ZN5boost15program_options19options_descriptionD1Ev+0x13d>
  4168da:	48 b8 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rax
  4168e1:	ff ff ff 
  4168e4:	4d 8d 74 05 00       	lea    0x0(%r13,%rax,1),%r14
  4168e9:	eb 0e                	jmp    4168f9 <_ZN5boost15program_options19options_descriptionD1Ev+0xf9>
  4168eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4168f0:	48 83 c5 10          	add    $0x10,%rbp
  4168f4:	49 39 ef             	cmp    %rbp,%r15
  4168f7:	74 3f                	je     416938 <_ZN5boost15program_options19options_descriptionD1Ev+0x138>
  4168f9:	48 8b 5d 08          	mov    0x8(%rbp),%rbx
  4168fd:	48 85 db             	test   %rbx,%rbx
  416900:	74 ee                	je     4168f0 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
        if( atomic_decrement( &use_count_ ) == 1 )
  416902:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  416907:	75 e7                	jne    4168f0 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
            dispose();
  416909:	48 8b 03             	mov    (%rbx),%rax
  41690c:	48 89 df             	mov    %rbx,%rdi
  41690f:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  416912:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  416917:	75 d7                	jne    4168f0 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
            destroy();
  416919:	48 8b 03             	mov    (%rbx),%rax
        delete this;
  41691c:	48 89 df             	mov    %rbx,%rdi
            destroy();
  41691f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  416923:	4c 39 f2             	cmp    %r14,%rdx
  416926:	75 6f                	jne    416997 <_ZN5boost15program_options19options_descriptionD1Ev+0x197>
  416928:	48 83 c5 10          	add    $0x10,%rbp
        delete this;
  41692c:	ff 50 08             	callq  *0x8(%rax)
  41692f:	49 39 ef             	cmp    %rbp,%r15
  416932:	75 c5                	jne    4168f9 <_ZN5boost15program_options19options_descriptionD1Ev+0xf9>
  416934:	0f 1f 40 00          	nopl   0x0(%rax)
  416938:	49 8b 6c 24 28       	mov    0x28(%r12),%rbp
	if (__p)
  41693d:	48 85 ed             	test   %rbp,%rbp
  416940:	74 15                	je     416957 <_ZN5boost15program_options19options_descriptionD1Ev+0x157>
  416942:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416949:	ff ff ff 
  41694c:	48 89 ef             	mov    %rbp,%rdi
  41694f:	4d 89 ef             	mov    %r13,%r15
  416952:	4c 01 e8             	add    %r13,%rax
  416955:	ff d0                	callq  *%rax
  416957:	49 8b 3c 24          	mov    (%r12),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41695b:	49 83 c4 10          	add    $0x10,%r12
	if (!_M_is_local())
  41695f:	4c 39 e7             	cmp    %r12,%rdi
  416962:	74 24                	je     416988 <_ZN5boost15program_options19options_descriptionD1Ev+0x188>
  416964:	48 83 c4 08          	add    $0x8,%rsp
  416968:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41696f:	ff ff ff 
  416972:	5b                   	pop    %rbx
  416973:	4c 01 e8             	add    %r13,%rax
  416976:	5d                   	pop    %rbp
  416977:	41 5c                	pop    %r12
  416979:	41 5d                	pop    %r13
  41697b:	41 5e                	pop    %r14
  41697d:	41 5f                	pop    %r15
  41697f:	ff e0                	jmpq   *%rax
  416981:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  416988:	48 83 c4 08          	add    $0x8,%rsp
  41698c:	5b                   	pop    %rbx
  41698d:	5d                   	pop    %rbp
  41698e:	41 5c                	pop    %r12
  416990:	41 5d                	pop    %r13
  416992:	41 5e                	pop    %r14
  416994:	41 5f                	pop    %r15
  416996:	c3                   	retq   
            destroy();
  416997:	ff d2                	callq  *%rdx
  416999:	e9 52 ff ff ff       	jmpq   4168f0 <_ZN5boost15program_options19options_descriptionD1Ev+0xf0>
  41699e:	ff d2                	callq  *%rdx
  4169a0:	e9 a3 fe ff ff       	jmpq   416848 <_ZN5boost15program_options19options_descriptionD1Ev+0x48>
  4169a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4169ac:	00 00 00 
  4169af:	90                   	nop

00000000004169b0 <_ZN4YAML6detail14iterator_valueD1Ev>:
#include <utility>
#include <vector>

namespace YAML {
namespace detail {
struct iterator_value : public Node, std::pair<Node, Node> {
  4169b0:	55                   	push   %rbp
  4169b1:	53                   	push   %rbx
  4169b2:	48 89 fd             	mov    %rdi,%rbp
  4169b5:	48 8d 1d f4 ff ff ff 	lea    -0xc(%rip),%rbx        # 4169b0 <_ZN4YAML6detail14iterator_valueD1Ev>
  4169bc:	49 bb 50 46 21 00 00 	movabs $0x214650,%r11
  4169c3:	00 00 00 
  4169c6:	48 83 ec 08          	sub    $0x8,%rsp
  4169ca:	48 8b 7f 50          	mov    0x50(%rdi),%rdi
  4169ce:	4c 01 db             	add    %r11,%rbx
  4169d1:	48 85 ff             	test   %rdi,%rdi
  4169d4:	74 0f                	je     4169e5 <_ZN4YAML6detail14iterator_valueD1Ev+0x35>
  4169d6:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  4169dd:	ff ff ff 
  4169e0:	48 01 d8             	add    %rbx,%rax
  4169e3:	ff d0                	callq  *%rax
  4169e5:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  4169e9:	48 85 ff             	test   %rdi,%rdi
  4169ec:	74 0f                	je     4169fd <_ZN4YAML6detail14iterator_valueD1Ev+0x4d>
  4169ee:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  4169f5:	ff ff ff 
  4169f8:	48 01 d8             	add    %rbx,%rax
  4169fb:	ff d0                	callq  *%rax
  4169fd:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  416a01:	48 85 ff             	test   %rdi,%rdi
  416a04:	74 1a                	je     416a20 <_ZN4YAML6detail14iterator_valueD1Ev+0x70>
  416a06:	48 83 c4 08          	add    $0x8,%rsp
  416a0a:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  416a11:	ff ff ff 
  416a14:	48 01 d8             	add    %rbx,%rax
  416a17:	5b                   	pop    %rbx
  416a18:	5d                   	pop    %rbp
  416a19:	ff e0                	jmpq   *%rax
  416a1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  416a20:	48 83 c4 08          	add    $0x8,%rsp
  416a24:	5b                   	pop    %rbx
  416a25:	5d                   	pop    %rbp
  416a26:	c3                   	retq   
  416a27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  416a2e:	00 00 

0000000000416a30 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  416a30:	41 57                	push   %r15
  416a32:	41 55                	push   %r13
  416a34:	4c 8d 2d f5 ff ff ff 	lea    -0xb(%rip),%r13        # 416a30 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
  416a3b:	41 54                	push   %r12
  416a3d:	55                   	push   %rbp
  416a3e:	49 bb d0 45 21 00 00 	movabs $0x2145d0,%r11
  416a45:	00 00 00 
  416a48:	53                   	push   %rbx
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  416a49:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  416a4d:	4d 01 dd             	add    %r11,%r13
  416a50:	48 8b 1f             	mov    (%rdi),%rbx
  416a53:	48 39 dd             	cmp    %rbx,%rbp
  416a56:	74 33                	je     416a8b <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x5b>
  416a58:	49 89 fc             	mov    %rdi,%r12
  416a5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  416a60:	48 8b 3b             	mov    (%rbx),%rdi
  416a63:	48 8d 43 10          	lea    0x10(%rbx),%rax
  416a67:	48 39 c7             	cmp    %rax,%rdi
  416a6a:	74 12                	je     416a7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x4e>
  416a6c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416a73:	ff ff ff 
  416a76:	4d 89 ef             	mov    %r13,%r15
  416a79:	4c 01 e8             	add    %r13,%rax
  416a7c:	ff d0                	callq  *%rax
  416a7e:	48 83 c3 20          	add    $0x20,%rbx
  416a82:	48 39 dd             	cmp    %rbx,%rbp
  416a85:	75 d9                	jne    416a60 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x30>
  416a87:	49 8b 1c 24          	mov    (%r12),%rbx
	if (__p)
  416a8b:	48 85 db             	test   %rbx,%rbx
  416a8e:	74 20                	je     416ab0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x80>
  416a90:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416a97:	ff ff ff 
  416a9a:	48 89 df             	mov    %rbx,%rdi
  416a9d:	4c 01 e8             	add    %r13,%rax
		      _M_get_Tp_allocator()); }
  416aa0:	5b                   	pop    %rbx
  416aa1:	5d                   	pop    %rbp
  416aa2:	41 5c                	pop    %r12
  416aa4:	41 5d                	pop    %r13
  416aa6:	41 5f                	pop    %r15
  416aa8:	ff e0                	jmpq   *%rax
  416aaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  416ab0:	5b                   	pop    %rbx
  416ab1:	5d                   	pop    %rbp
  416ab2:	41 5c                	pop    %r12
  416ab4:	41 5d                	pop    %r13
  416ab6:	41 5f                	pop    %r15
  416ab8:	c3                   	retq   
  416ab9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000416ac0 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev>:
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
  416ac0:	41 57                	push   %r15
  416ac2:	55                   	push   %rbp
  416ac3:	49 bb 40 45 21 00 00 	movabs $0x214540,%r11
  416aca:	00 00 00 
  416acd:	53                   	push   %rbx
  416ace:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 416ac0 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev>
  416ad5:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  416adc:	ff ff ff 
  416adf:	48 89 fd             	mov    %rdi,%rbp
  416ae2:	4c 01 db             	add    %r11,%rbx
  416ae5:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416ae9:	48 83 c0 10          	add    $0x10,%rax
  416aed:	48 89 07             	mov    %rax,(%rdi)
  416af0:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  416af4:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  416af8:	48 39 c7             	cmp    %rax,%rdi
  416afb:	74 12                	je     416b0f <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev+0x4f>
  416afd:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416b04:	ff ff ff 
  416b07:	49 89 df             	mov    %rbx,%r15
  416b0a:	48 01 d8             	add    %rbx,%rax
  416b0d:	ff d0                	callq  *%rax
  416b0f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  416b16:	ff ff ff 
  416b19:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  416b1d:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416b21:	48 83 c0 10          	add    $0x10,%rax
  416b25:	48 89 45 00          	mov    %rax,0x0(%rbp)
  416b29:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  416b30:	ff ff ff 
  416b33:	48 01 d8             	add    %rbx,%rax
  416b36:	5b                   	pop    %rbx
  416b37:	5d                   	pop    %rbp
  416b38:	41 5f                	pop    %r15
  416b3a:	ff e0                	jmpq   *%rax
  416b3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000416b40 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev>:
  416b40:	41 57                	push   %r15
  416b42:	55                   	push   %rbp
  416b43:	49 bb c0 44 21 00 00 	movabs $0x2144c0,%r11
  416b4a:	00 00 00 
  416b4d:	53                   	push   %rbx
  416b4e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 416b40 <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev>
  416b55:	48 b8 f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rax
  416b5c:	ff ff ff 
  416b5f:	48 89 fd             	mov    %rdi,%rbp
  416b62:	4c 01 db             	add    %r11,%rbx
  416b65:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416b69:	48 83 c0 10          	add    $0x10,%rax
  416b6d:	48 89 07             	mov    %rax,(%rdi)
  416b70:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  416b74:	48 8d 45 58          	lea    0x58(%rbp),%rax
	if (!_M_is_local())
  416b78:	48 39 c7             	cmp    %rax,%rdi
  416b7b:	74 12                	je     416b8f <_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED0Ev+0x4f>
  416b7d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416b84:	ff ff ff 
  416b87:	49 89 df             	mov    %rbx,%r15
  416b8a:	48 01 d8             	add    %rbx,%rax
  416b8d:	ff d0                	callq  *%rax
  416b8f:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  416b96:	ff ff ff 
  416b99:	48 8d 7d 38          	lea    0x38(%rbp),%rdi
  416b9d:	49 89 df             	mov    %rbx,%r15
  416ba0:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  416ba4:	48 83 c0 10          	add    $0x10,%rax
  416ba8:	48 89 45 00          	mov    %rax,0x0(%rbp)
  416bac:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  416bb3:	ff ff ff 
  416bb6:	48 01 d8             	add    %rbx,%rax
  416bb9:	ff d0                	callq  *%rax
  416bbb:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  416bc2:	ff ff ff 
  416bc5:	48 89 ef             	mov    %rbp,%rdi
  416bc8:	be 68 00 00 00       	mov    $0x68,%esi
  416bcd:	48 01 d8             	add    %rbx,%rax
  416bd0:	5b                   	pop    %rbx
  416bd1:	5d                   	pop    %rbp
  416bd2:	41 5f                	pop    %r15
  416bd4:	ff e0                	jmpq   *%rax
  416bd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  416bdd:	00 00 00 

0000000000416be0 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE>:
inline bool node::equals(const T& rhs, shared_memory_holder pMemory) {
  416be0:	41 57                	push   %r15
  416be2:	41 56                	push   %r14
  416be4:	49 bb 20 44 21 00 00 	movabs $0x214420,%r11
  416beb:	00 00 00 
  416bee:	41 55                	push   %r13
  416bf0:	41 54                	push   %r12
  416bf2:	49 89 f6             	mov    %rsi,%r14
  416bf5:	55                   	push   %rbp
  416bf6:	53                   	push   %rbx
  416bf7:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 416be0 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE>
  416bfe:	48 83 ec 28          	sub    $0x28,%rsp
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  416c02:	4c 8b 62 08          	mov    0x8(%rdx),%r12
  416c06:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  416c09:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
  416c0e:	48 89 e5             	mov    %rsp,%rbp
      { _M_string_length = __length; }
  416c11:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  416c18:	00 00 
  416c1a:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  416c1f:	4d 85 e4             	test   %r12,%r12
	: allocator_type(__a), _M_p(__dat) { }
  416c22:	48 89 04 24          	mov    %rax,(%rsp)
  416c26:	74 0d                	je     416c35 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x55>
  416c28:	49 8d 44 24 08       	lea    0x8(%r12),%rax
  416c2d:	f0 83 00 01          	lock addl $0x1,(%rax)
  416c31:	f0 83 00 01          	lock addl $0x1,(%rax)
  416c35:	48 8b 07             	mov    (%rdi),%rax
  416c38:	48 85 c0             	test   %rax,%rax
  416c3b:	0f 84 cd 00 00 00    	je     416d0e <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x12e>
  416c41:	48 8b 30             	mov    (%rax),%rsi
  416c44:	48 85 f6             	test   %rsi,%rsi
  416c47:	0f 84 d0 00 00 00    	je     416d1d <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x13d>
  416c4d:	44 0f b6 2e          	movzbl (%rsi),%r13d
    return m_isDefined ? m_type : NodeType::Undefined;
  416c51:	45 84 ed             	test   %r13b,%r13b
  416c54:	74 0d                	je     416c63 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x83>
    if (!node.IsScalar())
  416c56:	83 7e 04 02          	cmpl   $0x2,0x4(%rsi)
  416c5a:	0f 84 90 00 00 00    	je     416cf0 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x110>
      return false;
  416c60:	45 31 ed             	xor    %r13d,%r13d
        if( pi_ != 0 ) pi_->release();
  416c63:	4d 85 e4             	test   %r12,%r12
  416c66:	74 1a                	je     416c82 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xa2>
  416c68:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  416c6f:	ff ff ff 
  416c72:	4c 89 e7             	mov    %r12,%rdi
  416c75:	4c 8d 3c 03          	lea    (%rbx,%rax,1),%r15
  416c79:	41 ff d7             	callq  *%r15
  416c7c:	4c 89 e7             	mov    %r12,%rdi
  416c7f:	41 ff d7             	callq  *%r15
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  416c82:	45 84 ed             	test   %r13b,%r13b
  416c85:	4c 8b 24 24          	mov    (%rsp),%r12
  416c89:	75 35                	jne    416cc0 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xe0>
  return false;
  416c8b:	45 31 ed             	xor    %r13d,%r13d
	if (!_M_is_local())
  416c8e:	48 83 c5 10          	add    $0x10,%rbp
  416c92:	49 39 ec             	cmp    %rbp,%r12
  416c95:	74 15                	je     416cac <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xcc>
  416c97:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416c9e:	ff ff ff 
  416ca1:	4c 89 e7             	mov    %r12,%rdi
  416ca4:	49 89 df             	mov    %rbx,%r15
  416ca7:	48 01 d8             	add    %rbx,%rax
  416caa:	ff d0                	callq  *%rax
}
  416cac:	48 83 c4 28          	add    $0x28,%rsp
  416cb0:	44 89 e8             	mov    %r13d,%eax
  416cb3:	5b                   	pop    %rbx
  416cb4:	5d                   	pop    %rbp
  416cb5:	41 5c                	pop    %r12
  416cb7:	41 5d                	pop    %r13
  416cb9:	41 5e                	pop    %r14
  416cbb:	41 5f                	pop    %r15
  416cbd:	c3                   	retq   
  416cbe:	66 90                	xchg   %ax,%ax
  416cc0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
  416cc5:	49 3b 56 08          	cmp    0x8(%r14),%rdx
  416cc9:	75 c0                	jne    416c8b <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xab>
	if (__n == 0)
  416ccb:	48 85 d2             	test   %rdx,%rdx
  416cce:	74 be                	je     416c8e <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xae>
	return __builtin_memcmp(__s1, __s2, __n);
  416cd0:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  416cd7:	ff ff ff 
  416cda:	49 8b 36             	mov    (%r14),%rsi
  416cdd:	4c 89 e7             	mov    %r12,%rdi
  416ce0:	48 01 d8             	add    %rbx,%rax
  416ce3:	49 89 df             	mov    %rbx,%r15
  416ce6:	ff d0                	callq  *%rax
  416ce8:	85 c0                	test   %eax,%eax
  416cea:	41 0f 94 c5          	sete   %r13b
  416cee:	eb 9e                	jmp    416c8e <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xae>
	this->_M_assign(__str);
  416cf0:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  416cf7:	ff ff ff 
  const std::string& scalar() const { return m_scalar; }
  416cfa:	48 83 c6 30          	add    $0x30,%rsi
  416cfe:	48 89 ef             	mov    %rbp,%rdi
  416d01:	49 89 df             	mov    %rbx,%r15
  416d04:	48 01 d8             	add    %rbx,%rax
  416d07:	ff d0                	callq  *%rax
  416d09:	e9 55 ff ff ff       	jmpq   416c63 <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x83>
  416d0e:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  416d15:	ff ff ff 
  416d18:	48 01 d8             	add    %rbx,%rax
  416d1b:	ff d0                	callq  *%rax
  416d1d:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  416d24:	ff ff ff 
  416d27:	48 01 d8             	add    %rbx,%rax
  416d2a:	ff d0                	callq  *%rax
  416d2c:	4d 85 e4             	test   %r12,%r12
  416d2f:	49 89 c5             	mov    %rax,%r13
  416d32:	74 1a                	je     416d4e <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x16e>
  416d34:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  416d3b:	ff ff ff 
  416d3e:	4c 89 e7             	mov    %r12,%rdi
  416d41:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  416d45:	41 ff d6             	callq  *%r14
  416d48:	4c 89 e7             	mov    %r12,%rdi
  416d4b:	41 ff d6             	callq  *%r14
  416d4e:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  416d52:	48 83 c5 10          	add    $0x10,%rbp
  416d56:	48 39 ef             	cmp    %rbp,%rdi
  416d59:	74 12                	je     416d6d <_ZN4YAML6detail4node6equalsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x18d>
  416d5b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416d62:	ff ff ff 
  416d65:	49 89 df             	mov    %rbx,%r15
  416d68:	48 01 d8             	add    %rbx,%rax
  416d6b:	ff d0                	callq  *%rax
  416d6d:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  416d74:	ff ff ff 
  416d77:	4c 89 ef             	mov    %r13,%rdi
  416d7a:	49 89 df             	mov    %rbx,%r15
  416d7d:	48 01 d8             	add    %rbx,%rax
  416d80:	ff d0                	callq  *%rax
  416d82:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  416d89:	00 00 00 
  416d8c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000416d90 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  416d90:	41 57                	push   %r15
  416d92:	41 55                	push   %r13
  416d94:	49 89 fd             	mov    %rdi,%r13
  416d97:	41 54                	push   %r12
  416d99:	55                   	push   %rbp
  416d9a:	48 8d 2d ef ff ff ff 	lea    -0x11(%rip),%rbp        # 416d90 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev>
  416da1:	53                   	push   %rbx
  416da2:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  416da6:	49 bb 70 42 21 00 00 	movabs $0x214270,%r11
  416dad:	00 00 00 
  416db0:	4c 01 dd             	add    %r11,%rbp
  416db3:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  416dba:	ff ff ff 
  416dbd:	49 01 ec             	add    %rbp,%r12
  416dc0:	48 85 ff             	test   %rdi,%rdi
  416dc3:	74 14                	je     416dd9 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev+0x49>
  416dc5:	0f 1f 00             	nopl   (%rax)
  416dc8:	48 8b 1f             	mov    (%rdi),%rbx
  416dcb:	49 89 ef             	mov    %rbp,%r15
  416dce:	41 ff d4             	callq  *%r12
  416dd1:	48 85 db             	test   %rbx,%rbx
  416dd4:	48 89 df             	mov    %rbx,%rdi
  416dd7:	75 ef                	jne    416dc8 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev+0x38>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  416dd9:	49 8b 45 08          	mov    0x8(%r13),%rax
  416ddd:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  416de1:	31 f6                	xor    %esi,%esi
  416de3:	49 89 ef             	mov    %rbp,%r15
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  416de6:	49 83 c5 30          	add    $0x30,%r13
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  416dea:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  416df1:	00 
  416df2:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  416df9:	ff ff ff 
  416dfc:	48 01 e8             	add    %rbp,%rax
  416dff:	ff d0                	callq  *%rax
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  416e01:	49 8b 7d d0          	mov    -0x30(%r13),%rdi
      _M_element_count = 0;
  416e05:	49 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%r13)
  416e0c:	00 
      _M_before_begin._M_nxt = nullptr;
  416e0d:	49 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%r13)
  416e14:	00 
	if (_M_uses_single_bucket(__bkts))
  416e15:	4c 39 ef             	cmp    %r13,%rdi
  416e18:	74 17                	je     416e31 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEED1Ev+0xa1>
  416e1a:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  416e21:	ff ff ff 
    }
  416e24:	5b                   	pop    %rbx
  416e25:	48 01 e8             	add    %rbp,%rax
  416e28:	5d                   	pop    %rbp
  416e29:	41 5c                	pop    %r12
  416e2b:	41 5d                	pop    %r13
  416e2d:	41 5f                	pop    %r15
  416e2f:	ff e0                	jmpq   *%rax
  416e31:	5b                   	pop    %rbx
  416e32:	5d                   	pop    %rbp
  416e33:	41 5c                	pop    %r12
  416e35:	41 5d                	pop    %r13
  416e37:	41 5f                	pop    %r15
  416e39:	c3                   	retq   
  416e3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000416e40 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
  416e40:	41 57                	push   %r15
  416e42:	41 56                	push   %r14
  416e44:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 416e40 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_>
  416e4b:	41 55                	push   %r13
  416e4d:	41 54                	push   %r12
  416e4f:	49 bb c0 41 21 00 00 	movabs $0x2141c0,%r11
  416e56:	00 00 00 
  416e59:	55                   	push   %rbp
  416e5a:	53                   	push   %rbx
  416e5b:	4d 01 de             	add    %r11,%r14
  416e5e:	49 89 fc             	mov    %rdi,%r12
  416e61:	48 83 ec 18          	sub    $0x18,%rsp
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
  416e65:	48 39 fe             	cmp    %rdi,%rsi
  416e68:	74 67                	je     416ed1 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x91>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416e6a:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
  416e6e:	48 8b 1e             	mov    (%rsi),%rbx
  416e71:	48 8b 3f             	mov    (%rdi),%rdi
			 - this->_M_impl._M_start); }
  416e74:	49 8b 44 24 10       	mov    0x10(%r12),%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416e79:	49 89 ed             	mov    %rbp,%r13
  416e7c:	49 29 dd             	sub    %rbx,%r13
			 - this->_M_impl._M_start); }
  416e7f:	48 29 f8             	sub    %rdi,%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416e82:	4c 89 ee             	mov    %r13,%rsi
			 - this->_M_impl._M_start); }
  416e85:	48 c1 f8 03          	sar    $0x3,%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416e89:	48 c1 fe 03          	sar    $0x3,%rsi
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
  416e8d:	48 39 f0             	cmp    %rsi,%rax
  416e90:	0f 82 9a 00 00 00    	jb     416f30 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xf0>
  416e96:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
  416e9b:	48 89 ca             	mov    %rcx,%rdx
  416e9e:	48 29 fa             	sub    %rdi,%rdx
  416ea1:	49 89 d0             	mov    %rdx,%r8
  416ea4:	49 c1 f8 03          	sar    $0x3,%r8
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
	    }
	  else if (size() >= __xlen)
  416ea8:	4c 39 c6             	cmp    %r8,%rsi
  416eab:	77 3b                	ja     416ee8 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xa8>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  416ead:	31 c0                	xor    %eax,%eax
  416eaf:	48 85 f6             	test   %rsi,%rsi
  416eb2:	7e 15                	jle    416ec9 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x89>
  416eb4:	0f 1f 40 00          	nopl   0x0(%rax)
	      *__result = *__first;
  416eb8:	48 8b 14 c3          	mov    (%rbx,%rax,8),%rdx
  416ebc:	48 89 14 c7          	mov    %rdx,(%rdi,%rax,8)
  416ec0:	48 83 c0 01          	add    $0x1,%rax
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  416ec4:	48 39 f0             	cmp    %rsi,%rax
  416ec7:	75 ef                	jne    416eb8 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x78>
  416ec9:	4c 01 ef             	add    %r13,%rdi
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
  416ecc:	49 89 7c 24 08       	mov    %rdi,0x8(%r12)
	}
      return *this;
    }
  416ed1:	48 83 c4 18          	add    $0x18,%rsp
  416ed5:	4c 89 e0             	mov    %r12,%rax
  416ed8:	5b                   	pop    %rbx
  416ed9:	5d                   	pop    %rbp
  416eda:	41 5c                	pop    %r12
  416edc:	41 5d                	pop    %r13
  416ede:	41 5e                	pop    %r14
  416ee0:	41 5f                	pop    %r15
  416ee2:	c3                   	retq   
  416ee3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
  416ee8:	48 01 da             	add    %rbx,%rdx
  416eeb:	31 c0                	xor    %eax,%eax
  416eed:	4d 85 c0             	test   %r8,%r8
  416ef0:	7e 31                	jle    416f23 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xe3>
  416ef2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      *__result = *__first;
  416ef8:	48 8b 34 c3          	mov    (%rbx,%rax,8),%rsi
  416efc:	48 89 34 c7          	mov    %rsi,(%rdi,%rax,8)
  416f00:	48 83 c0 01          	add    $0x1,%rax
	  for(_Distance __n = __last - __first; __n > 0; --__n)
  416f04:	4c 39 c0             	cmp    %r8,%rax
  416f07:	75 ef                	jne    416ef8 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xb8>
  416f09:	48 39 d5             	cmp    %rdx,%rbp
  416f0c:	74 bb                	je     416ec9 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x89>
  416f0e:	66 90                	xchg   %ax,%ax
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  416f10:	48 85 c9             	test   %rcx,%rcx
  416f13:	74 06                	je     416f1b <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xdb>
  416f15:	48 8b 02             	mov    (%rdx),%rax
  416f18:	48 89 01             	mov    %rax,(%rcx)
  416f1b:	48 83 c2 08          	add    $0x8,%rdx
  416f1f:	48 83 c1 08          	add    $0x8,%rcx
  416f23:	48 39 d5             	cmp    %rdx,%rbp
  416f26:	75 e8                	jne    416f10 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0xd0>
  416f28:	eb 9f                	jmp    416ec9 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x89>
  416f2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  416f30:	31 c0                	xor    %eax,%eax
  416f32:	48 85 f6             	test   %rsi,%rsi
  416f35:	74 28                	je     416f5f <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x11f>
	if (__n > this->max_size())
  416f37:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  416f3e:	ff ff 1f 
  416f41:	48 39 c6             	cmp    %rax,%rsi
  416f44:	77 75                	ja     416fbb <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x17b>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  416f46:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  416f4d:	ff ff ff 
  416f50:	4c 89 ef             	mov    %r13,%rdi
  416f53:	4d 89 f7             	mov    %r14,%r15
  416f56:	4c 01 f0             	add    %r14,%rax
  416f59:	ff d0                	callq  *%rax
  416f5b:	49 8b 3c 24          	mov    (%r12),%rdi
  416f5f:	48 39 eb             	cmp    %rbp,%rbx
  416f62:	48 89 c1             	mov    %rax,%rcx
  416f65:	48 89 da             	mov    %rbx,%rdx
  416f68:	74 1e                	je     416f88 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x148>
  416f6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  416f70:	48 85 c9             	test   %rcx,%rcx
  416f73:	74 06                	je     416f7b <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x13b>
  416f75:	48 8b 32             	mov    (%rdx),%rsi
  416f78:	48 89 31             	mov    %rsi,(%rcx)
	++_M_current;
  416f7b:	48 83 c2 08          	add    $0x8,%rdx
  416f7f:	48 83 c1 08          	add    $0x8,%rcx
  416f83:	48 39 d5             	cmp    %rdx,%rbp
  416f86:	75 e8                	jne    416f70 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x130>
	if (__p)
  416f88:	48 85 ff             	test   %rdi,%rdi
  416f8b:	74 1c                	je     416fa9 <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x169>
      { ::operator delete(__p); }
  416f8d:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  416f94:	ff ff ff 
  416f97:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  416f9c:	4d 89 f7             	mov    %r14,%r15
  416f9f:	4c 01 f2             	add    %r14,%rdx
  416fa2:	ff d2                	callq  *%rdx
  416fa4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
  416fa9:	4a 8d 3c 28          	lea    (%rax,%r13,1),%rdi
	      this->_M_impl._M_start = __tmp;
  416fad:	49 89 04 24          	mov    %rax,(%r12)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
  416fb1:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  416fb6:	e9 11 ff ff ff       	jmpq   416ecc <_ZNSt6vectorI8LocationSaIS0_EEaSERKS2_+0x8c>
	  std::__throw_bad_alloc();
  416fbb:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  416fc2:	ff ff ff 
  416fc5:	4d 89 f7             	mov    %r14,%r15
  416fc8:	4c 01 f0             	add    %r14,%rax
  416fcb:	ff d0                	callq  *%rax
  416fcd:	0f 1f 00             	nopl   (%rax)

0000000000416fd0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm>:
    vector<_Tp, _Alloc>::
  416fd0:	41 57                	push   %r15
  416fd2:	41 56                	push   %r14
  416fd4:	49 bb 30 40 21 00 00 	movabs $0x214030,%r11
  416fdb:	00 00 00 
  416fde:	41 55                	push   %r13
  416fe0:	41 54                	push   %r12
  416fe2:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 416fd0 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm>
  416fe9:	55                   	push   %rbp
  416fea:	53                   	push   %rbx
      if (__n > this->max_size())
  416feb:	48 b8 cc cc cc cc cc 	movabs $0xccccccccccccccc,%rax
  416ff2:	cc cc 0c 
  416ff5:	4d 01 dc             	add    %r11,%r12
    vector<_Tp, _Alloc>::
  416ff8:	48 83 ec 18          	sub    $0x18,%rsp
      if (__n > this->max_size())
  416ffc:	48 39 c6             	cmp    %rax,%rsi
  416fff:	0f 87 ee 00 00 00    	ja     4170f3 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0x123>
  417005:	48 8b 1f             	mov    (%rdi),%rbx
			 - this->_M_impl._M_start); }
  417008:	48 8b 47 10          	mov    0x10(%rdi),%rax
  41700c:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
  417013:	cc cc cc 
  417016:	49 89 fd             	mov    %rdi,%r13
  417019:	49 89 f6             	mov    %rsi,%r14
  41701c:	48 29 d8             	sub    %rbx,%rax
  41701f:	48 c1 f8 02          	sar    $0x2,%rax
  417023:	48 0f af c2          	imul   %rdx,%rax
      if (this->capacity() < __n)
  417027:	48 39 c6             	cmp    %rax,%rsi
  41702a:	77 14                	ja     417040 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0x70>
    }
  41702c:	48 83 c4 18          	add    $0x18,%rsp
  417030:	5b                   	pop    %rbx
  417031:	5d                   	pop    %rbp
  417032:	41 5c                	pop    %r12
  417034:	41 5d                	pop    %r13
  417036:	41 5e                	pop    %r14
  417038:	41 5f                	pop    %r15
  41703a:	c3                   	retq   
  41703b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  417040:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  417044:	48 89 e8             	mov    %rbp,%rax
  417047:	48 29 d8             	sub    %rbx,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41704a:	48 85 f6             	test   %rsi,%rsi
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41704d:	48 89 04 24          	mov    %rax,(%rsp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  417051:	0f 84 95 00 00 00    	je     4170ec <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0x11c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  417057:	4c 8d 34 b6          	lea    (%rsi,%rsi,4),%r14
  41705b:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  417062:	ff ff ff 
  417065:	4d 89 e7             	mov    %r12,%r15
  417068:	4c 01 e0             	add    %r12,%rax
  41706b:	49 c1 e6 02          	shl    $0x2,%r14
  41706f:	4c 89 f7             	mov    %r14,%rdi
  417072:	ff d0                	callq  *%rax
  417074:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  417078:	48 39 eb             	cmp    %rbp,%rbx
  41707b:	48 89 c2             	mov    %rax,%rdx
  41707e:	74 26                	je     4170a6 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xd6>
  417080:	48 85 d2             	test   %rdx,%rdx
  417083:	74 14                	je     417099 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xc9>
  417085:	48 8b 0b             	mov    (%rbx),%rcx
  417088:	48 89 0a             	mov    %rcx,(%rdx)
  41708b:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
  41708f:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  417093:	8b 4b 10             	mov    0x10(%rbx),%ecx
  417096:	89 4a 10             	mov    %ecx,0x10(%rdx)
      { return _M_current; }

      move_iterator&
      operator++()
      {
	++_M_current;
  417099:	48 83 c3 14          	add    $0x14,%rbx
  41709d:	48 83 c2 14          	add    $0x14,%rdx
  4170a1:	48 39 dd             	cmp    %rbx,%rbp
  4170a4:	75 da                	jne    417080 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xb0>
	if (__p)
  4170a6:	48 85 ff             	test   %rdi,%rdi
  4170a9:	74 1c                	je     4170c7 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xf7>
      { ::operator delete(__p); }
  4170ab:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  4170b2:	ff ff ff 
  4170b5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4170ba:	4d 89 e7             	mov    %r12,%r15
  4170bd:	4c 01 e2             	add    %r12,%rdx
  4170c0:	ff d2                	callq  *%rdx
  4170c2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	  this->_M_impl._M_finish = __tmp + __old_size;
  4170c7:	48 8b 2c 24          	mov    (%rsp),%rbp
	  this->_M_impl._M_start = __tmp;
  4170cb:	49 89 45 00          	mov    %rax,0x0(%r13)
	  this->_M_impl._M_finish = __tmp + __old_size;
  4170cf:	48 01 c5             	add    %rax,%rbp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  4170d2:	4c 01 f0             	add    %r14,%rax
	  this->_M_impl._M_finish = __tmp + __old_size;
  4170d5:	49 89 6d 08          	mov    %rbp,0x8(%r13)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  4170d9:	49 89 45 10          	mov    %rax,0x10(%r13)
    }
  4170dd:	48 83 c4 18          	add    $0x18,%rsp
  4170e1:	5b                   	pop    %rbx
  4170e2:	5d                   	pop    %rbp
  4170e3:	41 5c                	pop    %r12
  4170e5:	41 5d                	pop    %r13
  4170e7:	41 5e                	pop    %r14
  4170e9:	41 5f                	pop    %r15
  4170eb:	c3                   	retq   
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  4170ec:	48 89 df             	mov    %rbx,%rdi
  4170ef:	31 c0                	xor    %eax,%eax
  4170f1:	eb 85                	jmp    417078 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE7reserveEm+0xa8>
	__throw_length_error(__N("vector::reserve"));
  4170f3:	48 b8 78 89 df ff ff 	movabs $0xffffffffffdf8978,%rax
  4170fa:	ff ff ff 
  4170fd:	4d 89 e7             	mov    %r12,%r15
  417100:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  417104:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41710b:	ff ff ff 
  41710e:	4c 01 e0             	add    %r12,%rax
  417111:	ff d0                	callq  *%rax
  417113:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41711a:	00 00 00 
  41711d:	0f 1f 00             	nopl   (%rax)

0000000000417120 <_ZN5boost15program_options5valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPNS0_11typed_valueIT_cEEPS9_>:
    value(T* v)
  417120:	41 57                	push   %r15
  417122:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 417120 <_ZN5boost15program_options5valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPNS0_11typed_valueIT_cEEPS9_>
  417129:	53                   	push   %rbx
  41712a:	49 bb e0 3e 21 00 00 	movabs $0x213ee0,%r11
  417131:	00 00 00 
        typed_value<T>* r = new typed_value<T>(v);
  417134:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41713b:	ff ff ff 
    value(T* v)
  41713e:	48 89 fb             	mov    %rdi,%rbx
  417141:	4d 01 df             	add    %r11,%r15
  417144:	48 83 ec 08          	sub    $0x8,%rsp
        typed_value<T>* r = new typed_value<T>(v);
  417148:	bf b0 00 00 00       	mov    $0xb0,%edi
  41714d:	4c 01 f8             	add    %r15,%rax
  417150:	ff d0                	callq  *%rax
          m_zero_tokens(false), m_required(false)
  417152:	48 ba f8 fa ff ff ff 	movabs $0xfffffffffffffaf8,%rdx
  417159:	ff ff ff 
  41715c:	48 89 58 10          	mov    %rbx,0x10(%rax)
      { _M_string_length = __length; }
  417160:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  417167:	00 
  417168:	4c 01 fa             	add    %r15,%rdx
      { __c1 = __c2; }
  41716b:	c6 40 28 00          	movb   $0x0,0x28(%rax)
          : content(0)
  41716f:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
  417176:	00 
  417177:	48 89 10             	mov    %rdx,(%rax)
  41717a:	48 83 c2 70          	add    $0x70,%rdx
  41717e:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
  417185:	00 
  417186:	48 89 50 08          	mov    %rdx,0x8(%rax)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41718a:	48 8d 50 28          	lea    0x28(%rax),%rdx
  41718e:	c6 40 50 00          	movb   $0x0,0x50(%rax)
  417192:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
  417199:	00 
      { _M_string_length = __length; }
  41719a:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  4171a1:	00 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4171a2:	48 89 50 18          	mov    %rdx,0x18(%rax)
  4171a6:	48 8d 50 50          	lea    0x50(%rax),%rdx
  4171aa:	c6 40 78 00          	movb   $0x0,0x78(%rax)
  4171ae:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%rax)
  4171b5:	c6 80 89 00 00 00 00 	movb   $0x0,0x89(%rax)
  4171bc:	48 89 50 40          	mov    %rdx,0x40(%rax)
  4171c0:	48 8d 50 78          	lea    0x78(%rax),%rdx
  4171c4:	c6 80 8a 00 00 00 00 	movb   $0x0,0x8a(%rax)
  4171cb:	c6 80 8b 00 00 00 00 	movb   $0x0,0x8b(%rax)
  4171d2:	c6 80 8c 00 00 00 00 	movb   $0x0,0x8c(%rax)
  4171d9:	48 89 50 68          	mov    %rdx,0x68(%rax)
  function_base() : vtable(0) { }
  4171dd:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
  4171e4:	00 00 00 00 

        return r;        
    }
  4171e8:	48 83 c4 08          	add    $0x8,%rsp
  4171ec:	5b                   	pop    %rbx
  4171ed:	41 5f                	pop    %r15
  4171ef:	c3                   	retq   

00000000004171f0 <_ZN5boost15program_options6detail7cmdlineD1Ev>:
        line parsing. In addition, it's possible to install additional parser
        which will process custom option styles.

        @todo mininal match length for guessing?
    */
    class BOOST_PROGRAM_OPTIONS_DECL cmdline {
  4171f0:	55                   	push   %rbp
  4171f1:	53                   	push   %rbx
  4171f2:	48 8d 2d f7 ff ff ff 	lea    -0x9(%rip),%rbp        # 4171f0 <_ZN5boost15program_options6detail7cmdlineD1Ev>
  4171f9:	49 bb 10 3e 21 00 00 	movabs $0x213e10,%r11
  417200:	00 00 00 
  417203:	48 89 fb             	mov    %rdi,%rbx
  417206:	48 83 ec 08          	sub    $0x8,%rsp
      if (vtable) {
  41720a:	48 8b 47 50          	mov    0x50(%rdi),%rax
  41720e:	4c 01 dd             	add    %r11,%rbp
  417211:	48 85 c0             	test   %rax,%rax
  417214:	74 04                	je     41721a <_ZN5boost15program_options6detail7cmdlineD1Ev+0x2a>
        if (!this->has_trivial_copy_and_destroy())
  417216:	a8 01                	test   $0x1,%al
  417218:	74 46                	je     417260 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x70>
      if (vtable) {
  41721a:	48 8b 43 30          	mov    0x30(%rbx),%rax
  41721e:	48 85 c0             	test   %rax,%rax
  417221:	74 1e                	je     417241 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x51>
        if (!this->has_trivial_copy_and_destroy())
  417223:	a8 01                	test   $0x1,%al
  417225:	75 1a                	jne    417241 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x51>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  417227:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
          get_vtable()->clear(this->functor);
  41722b:	48 8d 7b 38          	lea    0x38(%rbx),%rdi
  41722f:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  417232:	48 85 c0             	test   %rax,%rax
  417235:	74 0a                	je     417241 <_ZN5boost15program_options6detail7cmdlineD1Ev+0x51>
            base.manager(functor, functor, destroy_functor_tag);
  417237:	ba 02 00 00 00       	mov    $0x2,%edx
  41723c:	48 89 fe             	mov    %rdi,%rsi
  41723f:	ff d0                	callq  *%rax
  417241:	48 83 c4 08          	add    $0x8,%rsp
  417245:	48 b8 30 ba de ff ff 	movabs $0xffffffffffdeba30,%rax
  41724c:	ff ff ff 
  41724f:	48 89 df             	mov    %rbx,%rdi
  417252:	48 01 e8             	add    %rbp,%rax
  417255:	5b                   	pop    %rbx
  417256:	5d                   	pop    %rbp
  417257:	ff e0                	jmpq   *%rax
  417259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  417260:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  417264:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  417267:	48 85 c0             	test   %rax,%rax
  41726a:	74 ae                	je     41721a <_ZN5boost15program_options6detail7cmdlineD1Ev+0x2a>
          get_vtable()->clear(this->functor);
  41726c:	48 8d 7f 58          	lea    0x58(%rdi),%rdi
            base.manager(functor, functor, destroy_functor_tag);
  417270:	ba 02 00 00 00       	mov    $0x2,%edx
  417275:	48 89 fe             	mov    %rdi,%rsi
  417278:	ff d0                	callq  *%rax
  41727a:	eb 9e                	jmp    41721a <_ZN5boost15program_options6detail7cmdlineD1Ev+0x2a>
  41727c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000417280 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  417280:	41 57                	push   %r15
  417282:	41 56                	push   %r14
  417284:	49 bb 80 3d 21 00 00 	movabs $0x213d80,%r11
  41728b:	00 00 00 
  41728e:	41 55                	push   %r13
  417290:	41 54                	push   %r12
  417292:	55                   	push   %rbp
  417293:	53                   	push   %rbx
  417294:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 417280 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev>
  41729b:	48 83 ec 18          	sub    $0x18,%rsp
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41729f:	4c 8b 6f 08          	mov    0x8(%rdi),%r13
  4172a3:	4c 8b 27             	mov    (%rdi),%r12
  4172a6:	4c 01 db             	add    %r11,%rbx
      ~vector() _GLIBCXX_NOEXCEPT
  4172a9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	  for (; __first != __last; ++__first)
  4172ae:	4d 39 e5             	cmp    %r12,%r13
  4172b1:	0f 84 ec 00 00 00    	je     4173a3 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x123>
  4172b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4172be:	00 00 
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  4172c0:	49 8b 6c 24 48       	mov    0x48(%r12),%rbp
  4172c5:	4d 8b 74 24 40       	mov    0x40(%r12),%r14
  4172ca:	4c 39 f5             	cmp    %r14,%rbp
  4172cd:	74 2d                	je     4172fc <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x7c>
  4172cf:	90                   	nop
  4172d0:	49 8b 3e             	mov    (%r14),%rdi
	if (!_M_is_local())
  4172d3:	49 8d 56 10          	lea    0x10(%r14),%rdx
  4172d7:	48 39 d7             	cmp    %rdx,%rdi
  4172da:	74 12                	je     4172ee <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x6e>
  4172dc:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  4172e3:	ff ff ff 
  4172e6:	49 89 df             	mov    %rbx,%r15
  4172e9:	48 01 da             	add    %rbx,%rdx
  4172ec:	ff d2                	callq  *%rdx
  4172ee:	49 83 c6 20          	add    $0x20,%r14
  4172f2:	4c 39 f5             	cmp    %r14,%rbp
  4172f5:	75 d9                	jne    4172d0 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x50>
  4172f7:	4d 8b 74 24 40       	mov    0x40(%r12),%r14
	if (__p)
  4172fc:	4d 85 f6             	test   %r14,%r14
  4172ff:	74 15                	je     417316 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x96>
  417301:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  417308:	ff ff ff 
  41730b:	4c 89 f7             	mov    %r14,%rdi
  41730e:	49 89 df             	mov    %rbx,%r15
  417311:	48 01 d8             	add    %rbx,%rax
  417314:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  417316:	49 8b 6c 24 30       	mov    0x30(%r12),%rbp
  41731b:	4d 8b 74 24 28       	mov    0x28(%r12),%r14
  417320:	4c 39 f5             	cmp    %r14,%rbp
  417323:	74 2f                	je     417354 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xd4>
  417325:	0f 1f 00             	nopl   (%rax)
  417328:	49 8b 3e             	mov    (%r14),%rdi
  41732b:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41732f:	48 39 d7             	cmp    %rdx,%rdi
  417332:	74 12                	je     417346 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xc6>
  417334:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  41733b:	ff ff ff 
  41733e:	49 89 df             	mov    %rbx,%r15
  417341:	48 01 da             	add    %rbx,%rdx
  417344:	ff d2                	callq  *%rdx
  417346:	49 83 c6 20          	add    $0x20,%r14
  41734a:	4c 39 f5             	cmp    %r14,%rbp
  41734d:	75 d9                	jne    417328 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xa8>
  41734f:	4d 8b 74 24 28       	mov    0x28(%r12),%r14
	if (__p)
  417354:	4d 85 f6             	test   %r14,%r14
  417357:	74 15                	je     41736e <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0xee>
  417359:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  417360:	ff ff ff 
  417363:	4c 89 f7             	mov    %r14,%rdi
  417366:	49 89 df             	mov    %rbx,%r15
  417369:	48 01 d8             	add    %rbx,%rax
  41736c:	ff d0                	callq  *%rax
  41736e:	49 8b 3c 24          	mov    (%r12),%rdi
  417372:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  417377:	48 39 c7             	cmp    %rax,%rdi
  41737a:	74 12                	je     41738e <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x10e>
  41737c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  417383:	ff ff ff 
  417386:	49 89 df             	mov    %rbx,%r15
  417389:	48 01 d8             	add    %rbx,%rax
  41738c:	ff d0                	callq  *%rax
  41738e:	49 83 c4 60          	add    $0x60,%r12
  417392:	4d 39 e5             	cmp    %r12,%r13
  417395:	0f 85 25 ff ff ff    	jne    4172c0 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x40>
  41739b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4173a0:	4c 8b 20             	mov    (%rax),%r12
  4173a3:	4d 85 e4             	test   %r12,%r12
  4173a6:	74 20                	je     4173c8 <_ZNSt6vectorIN5boost15program_options12basic_optionIcEESaIS3_EED1Ev+0x148>
		      _M_get_Tp_allocator()); }
  4173a8:	48 83 c4 18          	add    $0x18,%rsp
  4173ac:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4173b3:	ff ff ff 
  4173b6:	4c 89 e7             	mov    %r12,%rdi
  4173b9:	48 01 d8             	add    %rbx,%rax
  4173bc:	5b                   	pop    %rbx
  4173bd:	5d                   	pop    %rbp
  4173be:	41 5c                	pop    %r12
  4173c0:	41 5d                	pop    %r13
  4173c2:	41 5e                	pop    %r14
  4173c4:	41 5f                	pop    %r15
  4173c6:	ff e0                	jmpq   *%rax
  4173c8:	48 83 c4 18          	add    $0x18,%rsp
  4173cc:	5b                   	pop    %rbx
  4173cd:	5d                   	pop    %rbp
  4173ce:	41 5c                	pop    %r12
  4173d0:	41 5d                	pop    %r13
  4173d2:	41 5e                	pop    %r14
  4173d4:	41 5f                	pop    %r15
  4173d6:	c3                   	retq   
  4173d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4173de:	00 00 

00000000004173e0 <_ZNK4YAML4Node2asIiEEKT_v>:
inline const T Node::as() const {
  4173e0:	41 57                	push   %r15
  4173e2:	41 54                	push   %r12
  4173e4:	49 bb 20 3c 21 00 00 	movabs $0x213c20,%r11
  4173eb:	00 00 00 
  4173ee:	55                   	push   %rbp
  4173ef:	53                   	push   %rbx
  4173f0:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 4173e0 <_ZNK4YAML4Node2asIiEEKT_v>
  4173f7:	48 83 ec 18          	sub    $0x18,%rsp
  4173fb:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  4173fe:	80 3f 00             	cmpb   $0x0,(%rdi)
  417401:	74 32                	je     417435 <_ZNK4YAML4Node2asIiEEKT_v+0x55>
    if (!node.m_pNode)
  417403:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
  417408:	0f 84 d8 00 00 00    	je     4174e6 <_ZNK4YAML4Node2asIiEEKT_v+0x106>
    if (convert<T>::decode(node, t))
  41740e:	48 b8 60 b5 de ff ff 	movabs $0xffffffffffdeb560,%rax
  417415:	ff ff ff 
  417418:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
  41741d:	48 01 d8             	add    %rbx,%rax
  417420:	ff d0                	callq  *%rax
  417422:	84 c0                	test   %al,%al
  417424:	74 69                	je     41748f <_ZNK4YAML4Node2asIiEEKT_v+0xaf>
      return t;
  417426:	8b 44 24 0c          	mov    0xc(%rsp),%eax
}
  41742a:	48 83 c4 18          	add    $0x18,%rsp
  41742e:	5b                   	pop    %rbx
  41742f:	5d                   	pop    %rbp
  417430:	41 5c                	pop    %r12
  417432:	41 5f                	pop    %r15
  417434:	c3                   	retq   
    throw InvalidNode();
  417435:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41743c:	ff ff ff 
  41743f:	bf 40 00 00 00       	mov    $0x40,%edi
  417444:	49 89 df             	mov    %rbx,%r15
  417447:	48 01 d8             	add    %rbx,%rax
  41744a:	ff d0                	callq  *%rax
  41744c:	48 89 c5             	mov    %rax,%rbp
  41744f:	48 89 c7             	mov    %rax,%rdi
  417452:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  417459:	ff ff ff 
  41745c:	48 01 d8             	add    %rbx,%rax
  41745f:	ff d0                	callq  *%rax
  417461:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  417468:	ff ff ff 
  41746b:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41746f:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  417476:	ff ff ff 
      throw TypedBadConversion<T>();
  417479:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41747d:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  417484:	ff ff ff 
  417487:	48 89 ef             	mov    %rbp,%rdi
  41748a:	48 01 d8             	add    %rbx,%rax
  41748d:	ff d0                	callq  *%rax
    throw TypedBadConversion<T>();
  41748f:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  417496:	ff ff ff 
  417499:	bf 40 00 00 00       	mov    $0x40,%edi
  41749e:	49 89 df             	mov    %rbx,%r15
  4174a1:	48 01 d8             	add    %rbx,%rax
  4174a4:	ff d0                	callq  *%rax
  4174a6:	48 89 c5             	mov    %rax,%rbp
  TypedBadConversion() : BadConversion() {}
  4174a9:	48 89 c7             	mov    %rax,%rdi
  4174ac:	48 b8 40 b0 de ff ff 	movabs $0xffffffffffdeb040,%rax
  4174b3:	ff ff ff 
  4174b6:	48 01 d8             	add    %rbx,%rax
  4174b9:	ff d0                	callq  *%rax
  4174bb:	48 b8 28 fc ff ff ff 	movabs $0xfffffffffffffc28,%rax
  4174c2:	ff ff ff 
  4174c5:	48 01 d8             	add    %rbx,%rax
  4174c8:	48 89 45 00          	mov    %rax,0x0(%rbp)
      throw TypedBadConversion<T>();
  4174cc:	48 b8 b0 95 de ff ff 	movabs $0xffffffffffde95b0,%rax
  4174d3:	ff ff ff 
  4174d6:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4174da:	48 b8 18 f8 ff ff ff 	movabs $0xfffffffffffff818,%rax
  4174e1:	ff ff ff 
  4174e4:	eb 93                	jmp    417479 <_ZNK4YAML4Node2asIiEEKT_v+0x99>
  4174e6:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  4174ed:	ff ff ff 
  4174f0:	bf 40 00 00 00       	mov    $0x40,%edi
  4174f5:	49 89 df             	mov    %rbx,%r15
  4174f8:	48 01 d8             	add    %rbx,%rax
  4174fb:	ff d0                	callq  *%rax
  4174fd:	48 89 c5             	mov    %rax,%rbp
  417500:	48 89 c7             	mov    %rax,%rdi
  417503:	48 b8 40 b0 de ff ff 	movabs $0xffffffffffdeb040,%rax
  41750a:	ff ff ff 
  41750d:	48 01 d8             	add    %rbx,%rax
  417510:	ff d0                	callq  *%rax
  417512:	eb a7                	jmp    4174bb <_ZNK4YAML4Node2asIiEEKT_v+0xdb>
    throw InvalidNode();
  417514:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41751b:	ff ff ff 
  41751e:	49 89 c4             	mov    %rax,%r12
  417521:	48 89 ef             	mov    %rbp,%rdi
  417524:	49 89 df             	mov    %rbx,%r15
  417527:	48 01 da             	add    %rbx,%rdx
  41752a:	ff d2                	callq  *%rdx
  41752c:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  417533:	ff ff ff 
  417536:	4c 89 e7             	mov    %r12,%rdi
  417539:	48 01 d8             	add    %rbx,%rax
  41753c:	ff d0                	callq  *%rax
  41753e:	eb d4                	jmp    417514 <_ZNK4YAML4Node2asIiEEKT_v+0x134>
  417540:	eb d2                	jmp    417514 <_ZNK4YAML4Node2asIiEEKT_v+0x134>
  417542:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  417549:	00 00 00 
  41754c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000417550 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  417550:	41 57                	push   %r15
  417552:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 417550 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  417559:	41 56                	push   %r14
  41755b:	49 bb b0 3a 21 00 00 	movabs $0x213ab0,%r11
  417562:	00 00 00 
  417565:	41 55                	push   %r13
  417567:	41 54                	push   %r12
  417569:	55                   	push   %rbp
  41756a:	53                   	push   %rbx
  41756b:	4d 01 df             	add    %r11,%r15
  41756e:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  417575:	ff ff ff 
  417578:	48 b8 50 c5 de ff ff 	movabs $0xffffffffffdec550,%rax
  41757f:	ff ff ff 
  417582:	48 83 ec 08          	sub    $0x8,%rsp
  417586:	4c 01 fd             	add    %r15,%rbp
      while (__x != 0)
  417589:	48 85 f6             	test   %rsi,%rsi
	  _M_erase(_S_right(__x));
  41758c:	4e 8d 2c 38          	lea    (%rax,%r15,1),%r13
      while (__x != 0)
  417590:	74 47                	je     4175d9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x89>
  417592:	49 89 fe             	mov    %rdi,%r14
  417595:	48 89 f3             	mov    %rsi,%rbx
  417598:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41759f:	00 
	  _M_erase(_S_right(__x));
  4175a0:	4c 89 f7             	mov    %r14,%rdi
  4175a3:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  4175a7:	41 ff d5             	callq  *%r13
  4175aa:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4175ae:	48 8d 43 50          	lea    0x50(%rbx),%rax
  4175b2:	4c 8b 63 10          	mov    0x10(%rbx),%r12
	if (!_M_is_local())
  4175b6:	48 39 c7             	cmp    %rax,%rdi
  4175b9:	74 02                	je     4175bd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6d>
  4175bb:	ff d5                	callq  *%rbp
  4175bd:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4175c1:	48 8d 43 30          	lea    0x30(%rbx),%rax
	if (!_M_is_local())
  4175c5:	48 39 c7             	cmp    %rax,%rdi
  4175c8:	74 02                	je     4175cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x7c>
  4175ca:	ff d5                	callq  *%rbp
  4175cc:	48 89 df             	mov    %rbx,%rdi
  4175cf:	4c 89 e3             	mov    %r12,%rbx
  4175d2:	ff d5                	callq  *%rbp
      while (__x != 0)
  4175d4:	4d 85 e4             	test   %r12,%r12
  4175d7:	75 c7                	jne    4175a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x50>
    }
  4175d9:	48 83 c4 08          	add    $0x8,%rsp
  4175dd:	5b                   	pop    %rbx
  4175de:	5d                   	pop    %rbp
  4175df:	41 5c                	pop    %r12
  4175e1:	41 5d                	pop    %r13
  4175e3:	41 5e                	pop    %r14
  4175e5:	41 5f                	pop    %r15
  4175e7:	c3                   	retq   
  4175e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4175ef:	00 

00000000004175f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  4175f0:	41 57                	push   %r15
  4175f2:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 4175f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
  4175f9:	41 56                	push   %r14
  4175fb:	49 bb 10 3a 21 00 00 	movabs $0x213a10,%r11
  417602:	00 00 00 
  417605:	41 55                	push   %r13
  417607:	41 54                	push   %r12
  417609:	55                   	push   %rbp
  41760a:	53                   	push   %rbx
  41760b:	4d 01 df             	add    %r11,%r15
  41760e:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  417615:	ff ff ff 
  417618:	48 b8 f0 c5 de ff ff 	movabs $0xffffffffffdec5f0,%rax
  41761f:	ff ff ff 
  417622:	48 83 ec 08          	sub    $0x8,%rsp
  417626:	4c 01 fd             	add    %r15,%rbp
      while (__x != 0)
  417629:	48 85 f6             	test   %rsi,%rsi
	  _M_erase(_S_right(__x));
  41762c:	4e 8d 2c 38          	lea    (%rax,%r15,1),%r13
      while (__x != 0)
  417630:	74 56                	je     417688 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x98>
  417632:	49 89 fe             	mov    %rdi,%r14
  417635:	48 89 f3             	mov    %rsi,%rbx
  417638:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41763f:	00 
	  _M_erase(_S_right(__x));
  417640:	4c 89 f7             	mov    %r14,%rdi
  417643:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  417647:	41 ff d5             	callq  *%r13
  41764a:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41764e:	48 8d 43 70          	lea    0x70(%rbx),%rax
  417652:	4c 8b 63 10          	mov    0x10(%rbx),%r12
	if (!_M_is_local())
  417656:	48 39 c7             	cmp    %rax,%rdi
  417659:	74 02                	je     41765d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x6d>
  41765b:	ff d5                	callq  *%rbp
  41765d:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417661:	48 8d 43 50          	lea    0x50(%rbx),%rax
	if (!_M_is_local())
  417665:	48 39 c7             	cmp    %rax,%rdi
  417668:	74 02                	je     41766c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x7c>
  41766a:	ff d5                	callq  *%rbp
  41766c:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417670:	48 8d 43 30          	lea    0x30(%rbx),%rax
	if (!_M_is_local())
  417674:	48 39 c7             	cmp    %rax,%rdi
  417677:	74 02                	je     41767b <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x8b>
  417679:	ff d5                	callq  *%rbp
  41767b:	48 89 df             	mov    %rbx,%rdi
  41767e:	4c 89 e3             	mov    %r12,%rbx
  417681:	ff d5                	callq  *%rbp
      while (__x != 0)
  417683:	4d 85 e4             	test   %r12,%r12
  417686:	75 b8                	jne    417640 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x50>
    }
  417688:	48 83 c4 08          	add    $0x8,%rsp
  41768c:	5b                   	pop    %rbx
  41768d:	5d                   	pop    %rbp
  41768e:	41 5c                	pop    %r12
  417690:	41 5d                	pop    %r13
  417692:	41 5e                	pop    %r14
  417694:	41 5f                	pop    %r15
  417696:	c3                   	retq   
  417697:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41769e:	00 00 

00000000004176a0 <_ZN5boost15program_options22error_with_option_nameD1Ev>:
        ~error_with_option_name() throw() {}
  4176a0:	41 57                	push   %r15
  4176a2:	41 56                	push   %r14
  4176a4:	49 bb 60 39 21 00 00 	movabs $0x213960,%r11
  4176ab:	00 00 00 
  4176ae:	41 55                	push   %r13
  4176b0:	41 54                	push   %r12
  4176b2:	48 b8 c0 ff ff ff ff 	movabs $0xffffffffffffffc0,%rax
  4176b9:	ff ff ff 
  4176bc:	55                   	push   %rbp
  4176bd:	53                   	push   %rbx
  4176be:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 4176a0 <_ZN5boost15program_options22error_with_option_nameD1Ev>
  4176c5:	49 89 fd             	mov    %rdi,%r13
  4176c8:	4c 01 db             	add    %r11,%rbx
  4176cb:	48 83 ec 18          	sub    $0x18,%rsp
  4176cf:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  4176d3:	48 83 c0 10          	add    $0x10,%rax
  4176d7:	48 89 07             	mov    %rax,(%rdi)
  4176da:	48 8b bf 98 00 00 00 	mov    0x98(%rdi),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  4176e1:	49 8d 85 a8 00 00 00 	lea    0xa8(%r13),%rax
	if (!_M_is_local())
  4176e8:	48 39 c7             	cmp    %rax,%rdi
  4176eb:	74 12                	je     4176ff <_ZN5boost15program_options22error_with_option_nameD1Ev+0x5f>
  4176ed:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  4176f4:	ff ff ff 
  4176f7:	49 89 df             	mov    %rbx,%r15
  4176fa:	48 01 dd             	add    %rbx,%rbp
  4176fd:	ff d5                	callq  *%rbp
  4176ff:	49 8b 7d 78          	mov    0x78(%r13),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417703:	49 8d 85 88 00 00 00 	lea    0x88(%r13),%rax
	if (!_M_is_local())
  41770a:	48 39 c7             	cmp    %rax,%rdi
  41770d:	74 12                	je     417721 <_ZN5boost15program_options22error_with_option_nameD1Ev+0x81>
  41770f:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  417716:	ff ff ff 
  417719:	49 89 df             	mov    %rbx,%r15
  41771c:	48 01 dd             	add    %rbx,%rbp
  41771f:	ff d5                	callq  *%rbp
    class map
  417721:	49 8d 45 48          	lea    0x48(%r13),%rax
  417725:	4d 8b 75 58          	mov    0x58(%r13),%r14
  417729:	48 ba f0 c5 de ff ff 	movabs $0xffffffffffdec5f0,%rdx
  417730:	ff ff ff 
  417733:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  41773a:	ff ff ff 
  41773d:	48 89 04 24          	mov    %rax,(%rsp)
	  _M_erase(_S_right(__x));
  417741:	48 8d 04 1a          	lea    (%rdx,%rbx,1),%rax
  417745:	48 01 dd             	add    %rbx,%rbp
      while (__x != 0)
  417748:	4d 85 f6             	test   %r14,%r14
	  _M_erase(_S_right(__x));
  41774b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
      while (__x != 0)
  417750:	74 5f                	je     4177b1 <_ZN5boost15program_options22error_with_option_nameD1Ev+0x111>
  417752:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  _M_erase(_S_right(__x));
  417758:	48 8b 3c 24          	mov    (%rsp),%rdi
  41775c:	49 8b 76 18          	mov    0x18(%r14),%rsi
  417760:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  417765:	ff d0                	callq  *%rax
  417767:	49 8b 7e 60          	mov    0x60(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41776b:	49 8d 56 70          	lea    0x70(%r14),%rdx
  41776f:	4d 8b 66 10          	mov    0x10(%r14),%r12
	if (!_M_is_local())
  417773:	48 39 d7             	cmp    %rdx,%rdi
  417776:	74 05                	je     41777d <_ZN5boost15program_options22error_with_option_nameD1Ev+0xdd>
  417778:	49 89 df             	mov    %rbx,%r15
  41777b:	ff d5                	callq  *%rbp
  41777d:	49 8b 7e 40          	mov    0x40(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417781:	49 8d 56 50          	lea    0x50(%r14),%rdx
	if (!_M_is_local())
  417785:	48 39 d7             	cmp    %rdx,%rdi
  417788:	74 05                	je     41778f <_ZN5boost15program_options22error_with_option_nameD1Ev+0xef>
  41778a:	49 89 df             	mov    %rbx,%r15
  41778d:	ff d5                	callq  *%rbp
  41778f:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  417793:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  417797:	48 39 d7             	cmp    %rdx,%rdi
  41779a:	74 05                	je     4177a1 <_ZN5boost15program_options22error_with_option_nameD1Ev+0x101>
  41779c:	49 89 df             	mov    %rbx,%r15
  41779f:	ff d5                	callq  *%rbp
  4177a1:	4c 89 f7             	mov    %r14,%rdi
  4177a4:	49 89 df             	mov    %rbx,%r15
  4177a7:	4d 89 e6             	mov    %r12,%r14
  4177aa:	ff d5                	callq  *%rbp
      while (__x != 0)
  4177ac:	4d 85 e4             	test   %r12,%r12
  4177af:	75 a7                	jne    417758 <_ZN5boost15program_options22error_with_option_nameD1Ev+0xb8>
      { _M_erase(_M_begin()); }
  4177b1:	48 b8 50 c5 de ff ff 	movabs $0xffffffffffdec550,%rax
  4177b8:	ff ff ff 
  4177bb:	49 8d 7d 18          	lea    0x18(%r13),%rdi
  4177bf:	49 8b 75 28          	mov    0x28(%r13),%rsi
  4177c3:	48 01 d8             	add    %rbx,%rax
  4177c6:	ff d0                	callq  *%rax
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  4177c8:	48 b8 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rax
  4177cf:	ff ff ff 
  4177d2:	4c 89 ef             	mov    %r13,%rdi
  4177d5:	48 01 d8             	add    %rbx,%rax
  4177d8:	49 89 45 00          	mov    %rax,0x0(%r13)
        ~error_with_option_name() throw() {}
  4177dc:	48 83 c4 18          	add    $0x18,%rsp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  4177e0:	48 b8 40 ea dd ff ff 	movabs $0xffffffffffddea40,%rax
  4177e7:	ff ff ff 
  4177ea:	48 01 d8             	add    %rbx,%rax
        ~error_with_option_name() throw() {}
  4177ed:	5b                   	pop    %rbx
  4177ee:	5d                   	pop    %rbp
  4177ef:	41 5c                	pop    %r12
  4177f1:	41 5d                	pop    %r13
  4177f3:	41 5e                	pop    %r14
  4177f5:	41 5f                	pop    %r15
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  4177f7:	ff e0                	jmpq   *%rax
  4177f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000417800 <_ZN5boost15program_options22error_with_option_nameD0Ev>:
        ~error_with_option_name() throw() {}
  417800:	41 57                	push   %r15
  417802:	55                   	push   %rbp
  417803:	49 bb 00 38 21 00 00 	movabs $0x213800,%r11
  41780a:	00 00 00 
  41780d:	53                   	push   %rbx
  41780e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417800 <_ZN5boost15program_options22error_with_option_nameD0Ev>
  417815:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  41781c:	ff ff ff 
  41781f:	48 89 fd             	mov    %rdi,%rbp
  417822:	4c 01 db             	add    %r11,%rbx
  417825:	48 01 d8             	add    %rbx,%rax
  417828:	ff d0                	callq  *%rax
  41782a:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417831:	ff ff ff 
  417834:	48 89 ef             	mov    %rbp,%rdi
  417837:	be b8 00 00 00       	mov    $0xb8,%esi
  41783c:	48 01 d8             	add    %rbx,%rax
  41783f:	5b                   	pop    %rbx
  417840:	5d                   	pop    %rbp
  417841:	41 5f                	pop    %r15
  417843:	ff e0                	jmpq   *%rax
  417845:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41784c:	00 00 00 
  41784f:	90                   	nop

0000000000417850 <_ZN5boost15program_options16validation_errorD1Ev>:

        ~validation_error() throw() {}
  417850:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 417850 <_ZN5boost15program_options16validation_errorD1Ev>
  417857:	49 bb b0 37 21 00 00 	movabs $0x2137b0,%r11
  41785e:	00 00 00 
  417861:	48 ba 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rdx
  417868:	ff ff ff 
  41786b:	4c 01 d8             	add    %r11,%rax
  41786e:	48 01 c2             	add    %rax,%rdx
  417871:	48 89 17             	mov    %rdx,(%rdi)
  417874:	48 ba a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rdx
  41787b:	ff ff ff 
  41787e:	48 01 d0             	add    %rdx,%rax
  417881:	ff e0                	jmpq   *%rax
  417883:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41788a:	00 00 00 
  41788d:	0f 1f 00             	nopl   (%rax)

0000000000417890 <_ZN5boost15program_options16validation_errorD0Ev>:
  417890:	41 57                	push   %r15
  417892:	55                   	push   %rbp
  417893:	49 bb 70 37 21 00 00 	movabs $0x213770,%r11
  41789a:	00 00 00 
  41789d:	53                   	push   %rbx
  41789e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417890 <_ZN5boost15program_options16validation_errorD0Ev>
  4178a5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4178ac:	ff ff ff 
  4178af:	48 89 fd             	mov    %rdi,%rbp
  4178b2:	4c 01 db             	add    %r11,%rbx
  4178b5:	48 01 d8             	add    %rbx,%rax
  4178b8:	48 89 07             	mov    %rax,(%rdi)
  4178bb:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  4178c2:	ff ff ff 
  4178c5:	48 01 d8             	add    %rbx,%rax
  4178c8:	ff d0                	callq  *%rax
  4178ca:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4178d1:	ff ff ff 
  4178d4:	48 89 ef             	mov    %rbp,%rdi
  4178d7:	be c0 00 00 00       	mov    $0xc0,%esi
  4178dc:	48 01 d8             	add    %rbx,%rax
  4178df:	5b                   	pop    %rbx
  4178e0:	5d                   	pop    %rbp
  4178e1:	41 5f                	pop    %r15
  4178e3:	ff e0                	jmpq   *%rax
  4178e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4178ec:	00 00 00 
  4178ef:	90                   	nop

00000000004178f0 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev>:
            ~error_info_injector() throw()
  4178f0:	55                   	push   %rbp
  4178f1:	53                   	push   %rbx
  4178f2:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 4178f0 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev>
  4178f9:	49 bb 10 37 21 00 00 	movabs $0x213710,%r11
  417900:	00 00 00 
                }
  417903:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  41790a:	ff ff ff 
            ~error_info_injector() throw()
  41790d:	48 89 fd             	mov    %rdi,%rbp
  417910:	4c 01 db             	add    %r11,%rbx
  417913:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417917:	48 01 d8             	add    %rbx,%rax
  41791a:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  41791d:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417924:	ff ff ff 
  417927:	48 01 d8             	add    %rbx,%rax
  41792a:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417931:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417938:	48 85 ff             	test   %rdi,%rdi
  41793b:	74 06                	je     417943 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev+0x53>
  41793d:	48 8b 07             	mov    (%rdi),%rax
  417940:	ff 50 20             	callq  *0x20(%rax)
  417943:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  41794a:	ff ff ff 
  41794d:	48 89 ef             	mov    %rbp,%rdi
  417950:	48 01 d8             	add    %rbx,%rax
  417953:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417957:	48 83 c4 08          	add    $0x8,%rsp
  41795b:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  417962:	ff ff ff 
  417965:	48 01 d8             	add    %rbx,%rax
  417968:	5b                   	pop    %rbx
  417969:	5d                   	pop    %rbp
  41796a:	ff e0                	jmpq   *%rax
  41796c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000417970 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev>:
            ~error_info_injector() throw()
  417970:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417977:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417977 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED1Ev+0x7>
  41797e:	49 ba 89 36 21 00 00 	movabs $0x213689,%r10
  417985:	00 00 00 
  417988:	4d 01 d3             	add    %r10,%r11
  41798b:	49 ba f0 c8 de ff ff 	movabs $0xffffffffffdec8f0,%r10
  417992:	ff ff ff 
  417995:	4d 01 da             	add    %r11,%r10
  417998:	41 ff e2             	jmpq   *%r10
  41799b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004179a0 <_ZN5boost15program_options20invalid_option_valueD1Ev>:
        std::string get_template(kind_t kind);
        kind_t m_kind;
    };

    /** Class thrown if there is an invalid option value given */
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  4179a0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4179a0 <_ZN5boost15program_options20invalid_option_valueD1Ev>
  4179a7:	49 bb 60 36 21 00 00 	movabs $0x213660,%r11
  4179ae:	00 00 00 
        ~validation_error() throw() {}
  4179b1:	48 ba 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rdx
  4179b8:	ff ff ff 
  4179bb:	4c 01 d8             	add    %r11,%rax
  4179be:	48 01 c2             	add    %rax,%rdx
  4179c1:	48 89 17             	mov    %rdx,(%rdi)
  4179c4:	48 ba a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rdx
  4179cb:	ff ff ff 
  4179ce:	48 01 d0             	add    %rdx,%rax
  4179d1:	ff e0                	jmpq   *%rax
  4179d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4179da:	00 00 00 
  4179dd:	0f 1f 00             	nopl   (%rax)

00000000004179e0 <_ZN5boost15program_options20invalid_option_valueD0Ev>:
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  4179e0:	41 57                	push   %r15
  4179e2:	55                   	push   %rbp
  4179e3:	49 bb 20 36 21 00 00 	movabs $0x213620,%r11
  4179ea:	00 00 00 
  4179ed:	53                   	push   %rbx
  4179ee:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 4179e0 <_ZN5boost15program_options20invalid_option_valueD0Ev>
        ~validation_error() throw() {}
  4179f5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4179fc:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  4179ff:	48 89 fd             	mov    %rdi,%rbp
  417a02:	4c 01 db             	add    %r11,%rbx
        ~validation_error() throw() {}
  417a05:	48 01 d8             	add    %rbx,%rax
  417a08:	48 89 07             	mov    %rax,(%rdi)
  417a0b:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  417a12:	ff ff ff 
  417a15:	48 01 d8             	add    %rbx,%rax
  417a18:	ff d0                	callq  *%rax
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  417a1a:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417a21:	ff ff ff 
  417a24:	48 89 ef             	mov    %rbp,%rdi
  417a27:	be c0 00 00 00       	mov    $0xc0,%esi
  417a2c:	48 01 d8             	add    %rbx,%rax
  417a2f:	5b                   	pop    %rbx
  417a30:	5d                   	pop    %rbp
  417a31:	41 5f                	pop    %r15
  417a33:	ff e0                	jmpq   *%rax
  417a35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  417a3c:	00 00 00 
  417a3f:	90                   	nop

0000000000417a40 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev>:
  417a40:	55                   	push   %rbp
  417a41:	53                   	push   %rbx
  417a42:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 417a40 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev>
  417a49:	49 bb c0 35 21 00 00 	movabs $0x2135c0,%r11
  417a50:	00 00 00 
                }
  417a53:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  417a5a:	ff ff ff 
            ~error_info_injector() throw()
  417a5d:	48 89 fd             	mov    %rdi,%rbp
  417a60:	4c 01 db             	add    %r11,%rbx
  417a63:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417a67:	48 01 d8             	add    %rbx,%rax
  417a6a:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417a6d:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417a74:	ff ff ff 
  417a77:	48 01 d8             	add    %rbx,%rax
  417a7a:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417a81:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417a88:	48 85 ff             	test   %rdi,%rdi
  417a8b:	74 06                	je     417a93 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev+0x53>
  417a8d:	48 8b 07             	mov    (%rdi),%rax
  417a90:	ff 50 20             	callq  *0x20(%rax)
        ~validation_error() throw() {}
  417a93:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417a9a:	ff ff ff 
  417a9d:	48 89 ef             	mov    %rbp,%rdi
  417aa0:	48 01 d8             	add    %rbx,%rax
  417aa3:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417aa7:	48 83 c4 08          	add    $0x8,%rsp
  417aab:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  417ab2:	ff ff ff 
  417ab5:	48 01 d8             	add    %rbx,%rax
  417ab8:	5b                   	pop    %rbx
  417ab9:	5d                   	pop    %rbp
  417aba:	ff e0                	jmpq   *%rax
  417abc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000417ac0 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev>:
            ~error_info_injector() throw()
  417ac0:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417ac7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417ac7 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED1Ev+0x7>
  417ace:	49 ba 39 35 21 00 00 	movabs $0x213539,%r10
  417ad5:	00 00 00 
  417ad8:	4d 01 d3             	add    %r10,%r11
  417adb:	49 ba 40 ca de ff ff 	movabs $0xffffffffffdeca40,%r10
  417ae2:	ff ff ff 
  417ae5:	4d 01 da             	add    %r11,%r10
  417ae8:	41 ff e2             	jmpq   *%r10
  417aeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417af0 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev>:
  417af0:	41 57                	push   %r15
  417af2:	55                   	push   %rbp
  417af3:	49 bb 10 35 21 00 00 	movabs $0x213510,%r11
  417afa:	00 00 00 
  417afd:	53                   	push   %rbx
  417afe:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417af0 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev>
                }
  417b05:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  417b0c:	ff ff ff 
            ~error_info_injector() throw()
  417b0f:	48 89 fd             	mov    %rdi,%rbp
  417b12:	4c 01 db             	add    %r11,%rbx
                }
  417b15:	48 01 d8             	add    %rbx,%rax
  417b18:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417b1b:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417b22:	ff ff ff 
  417b25:	48 01 d8             	add    %rbx,%rax
  417b28:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417b2f:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417b36:	48 85 ff             	test   %rdi,%rdi
  417b39:	74 06                	je     417b41 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev+0x51>
  417b3b:	48 8b 07             	mov    (%rdi),%rax
  417b3e:	ff 50 20             	callq  *0x20(%rax)
  417b41:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417b48:	ff ff ff 
  417b4b:	48 89 ef             	mov    %rbp,%rdi
  417b4e:	48 01 d8             	add    %rbx,%rax
  417b51:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417b55:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  417b5c:	ff ff ff 
  417b5f:	48 01 d8             	add    %rbx,%rax
  417b62:	ff d0                	callq  *%rax
                }
  417b64:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417b6b:	ff ff ff 
  417b6e:	48 89 ef             	mov    %rbp,%rdi
  417b71:	be e8 00 00 00       	mov    $0xe8,%esi
  417b76:	48 01 d8             	add    %rbx,%rax
  417b79:	5b                   	pop    %rbx
  417b7a:	5d                   	pop    %rbp
  417b7b:	41 5f                	pop    %r15
  417b7d:	ff e0                	jmpq   *%rax
  417b7f:	90                   	nop

0000000000417b80 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev>:
            ~error_info_injector() throw()
  417b80:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417b87:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417b87 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEED0Ev+0x7>
  417b8e:	49 ba 79 34 21 00 00 	movabs $0x213479,%r10
  417b95:	00 00 00 
  417b98:	4d 01 d3             	add    %r10,%r11
  417b9b:	49 ba f0 ca de ff ff 	movabs $0xffffffffffdecaf0,%r10
  417ba2:	ff ff ff 
  417ba5:	4d 01 da             	add    %r11,%r10
  417ba8:	41 ff e2             	jmpq   *%r10
  417bab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417bb0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>:
            ~clone_impl() throw()
  417bb0:	55                   	push   %rbp
  417bb1:	53                   	push   %rbx
  417bb2:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 417bb0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>
  417bb9:	49 bb 50 34 21 00 00 	movabs $0x213450,%r11
  417bc0:	00 00 00 
                }
  417bc3:	48 b8 b0 f5 ff ff ff 	movabs $0xfffffffffffff5b0,%rax
  417bca:	ff ff ff 
            ~clone_impl() throw()
  417bcd:	48 89 fd             	mov    %rdi,%rbp
  417bd0:	4c 01 db             	add    %r11,%rbx
  417bd3:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417bd7:	48 01 d8             	add    %rbx,%rax
  417bda:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417be1:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  417be8:	ff ff ff 
  417beb:	48 01 d8             	add    %rbx,%rax
  417bee:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417bf1:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417bf8:	ff ff ff 
  417bfb:	48 01 d8             	add    %rbx,%rax
  417bfe:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417c05:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417c0c:	48 85 ff             	test   %rdi,%rdi
  417c0f:	74 06                	je     417c17 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev+0x67>
  417c11:	48 8b 07             	mov    (%rdi),%rax
  417c14:	ff 50 20             	callq  *0x20(%rax)
  417c17:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417c1e:	ff ff ff 
  417c21:	48 89 ef             	mov    %rbp,%rdi
  417c24:	48 01 d8             	add    %rbx,%rax
  417c27:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417c2b:	48 83 c4 08          	add    $0x8,%rsp
  417c2f:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  417c36:	ff ff ff 
  417c39:	48 01 d8             	add    %rbx,%rax
  417c3c:	5b                   	pop    %rbx
  417c3d:	5d                   	pop    %rbp
  417c3e:	ff e0                	jmpq   *%rax

0000000000417c40 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>:
            ~clone_impl() throw()
  417c40:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417c47:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417c47 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev+0x7>
  417c4e:	49 ba b9 33 21 00 00 	movabs $0x2133b9,%r10
  417c55:	00 00 00 
  417c58:	4d 01 d3             	add    %r10,%r11
  417c5b:	49 ba b0 cb de ff ff 	movabs $0xffffffffffdecbb0,%r10
  417c62:	ff ff ff 
  417c65:	4d 01 da             	add    %r11,%r10
  417c68:	41 ff e2             	jmpq   *%r10
  417c6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417c70 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev>:
  417c70:	4c 8b 17             	mov    (%rdi),%r10
  417c73:	49 03 7a d8          	add    -0x28(%r10),%rdi
  417c77:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417c77 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED1Ev+0x7>
  417c7e:	49 ba 89 33 21 00 00 	movabs $0x213389,%r10
  417c85:	00 00 00 
  417c88:	4d 01 d3             	add    %r10,%r11
  417c8b:	49 ba b0 cb de ff ff 	movabs $0xffffffffffdecbb0,%r10
  417c92:	ff ff ff 
  417c95:	4d 01 da             	add    %r11,%r10
  417c98:	41 ff e2             	jmpq   *%r10
  417c9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417ca0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>:
  417ca0:	55                   	push   %rbp
  417ca1:	53                   	push   %rbx
  417ca2:	48 8d 1d f7 ff ff ff 	lea    -0x9(%rip),%rbx        # 417ca0 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>
  417ca9:	49 bb 60 33 21 00 00 	movabs $0x213360,%r11
  417cb0:	00 00 00 
                }
  417cb3:	48 b8 a0 f4 ff ff ff 	movabs $0xfffffffffffff4a0,%rax
  417cba:	ff ff ff 
            ~clone_impl() throw()
  417cbd:	48 89 fd             	mov    %rdi,%rbp
  417cc0:	4c 01 db             	add    %r11,%rbx
  417cc3:	48 83 ec 08          	sub    $0x8,%rsp
                }
  417cc7:	48 01 d8             	add    %rbx,%rax
  417cca:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417cd1:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  417cd8:	ff ff ff 
  417cdb:	48 01 d8             	add    %rbx,%rax
  417cde:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417ce1:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417ce8:	ff ff ff 
  417ceb:	48 01 d8             	add    %rbx,%rax
  417cee:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417cf5:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417cfc:	48 85 ff             	test   %rdi,%rdi
  417cff:	74 06                	je     417d07 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev+0x67>
  417d01:	48 8b 07             	mov    (%rdi),%rax
  417d04:	ff 50 20             	callq  *0x20(%rax)
  417d07:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417d0e:	ff ff ff 
  417d11:	48 89 ef             	mov    %rbp,%rdi
  417d14:	48 01 d8             	add    %rbx,%rax
  417d17:	48 89 45 00          	mov    %rax,0x0(%rbp)
                }
  417d1b:	48 83 c4 08          	add    $0x8,%rsp
  417d1f:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  417d26:	ff ff ff 
  417d29:	48 01 d8             	add    %rbx,%rax
  417d2c:	5b                   	pop    %rbx
  417d2d:	5d                   	pop    %rbp
  417d2e:	ff e0                	jmpq   *%rax

0000000000417d30 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>:
            ~clone_impl() throw()
  417d30:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417d37:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417d37 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev+0x7>
  417d3e:	49 ba c9 32 21 00 00 	movabs $0x2132c9,%r10
  417d45:	00 00 00 
  417d48:	4d 01 d3             	add    %r10,%r11
  417d4b:	49 ba a0 cc de ff ff 	movabs $0xffffffffffdecca0,%r10
  417d52:	ff ff ff 
  417d55:	4d 01 da             	add    %r11,%r10
  417d58:	41 ff e2             	jmpq   *%r10
  417d5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417d60 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev>:
  417d60:	4c 8b 17             	mov    (%rdi),%r10
  417d63:	49 03 7a d8          	add    -0x28(%r10),%rdi
  417d67:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417d67 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED1Ev+0x7>
  417d6e:	49 ba 99 32 21 00 00 	movabs $0x213299,%r10
  417d75:	00 00 00 
  417d78:	4d 01 d3             	add    %r10,%r11
  417d7b:	49 ba a0 cc de ff ff 	movabs $0xffffffffffdecca0,%r10
  417d82:	ff ff ff 
  417d85:	4d 01 da             	add    %r11,%r10
  417d88:	41 ff e2             	jmpq   *%r10
  417d8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417d90 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev>:
            ~error_info_injector() throw()
  417d90:	41 57                	push   %r15
  417d92:	55                   	push   %rbp
  417d93:	49 bb 70 32 21 00 00 	movabs $0x213270,%r11
  417d9a:	00 00 00 
  417d9d:	53                   	push   %rbx
  417d9e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417d90 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev>
                }
  417da5:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  417dac:	ff ff ff 
            ~error_info_injector() throw()
  417daf:	48 89 fd             	mov    %rdi,%rbp
  417db2:	4c 01 db             	add    %r11,%rbx
                }
  417db5:	48 01 d8             	add    %rbx,%rax
  417db8:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417dbb:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417dc2:	ff ff ff 
  417dc5:	48 01 d8             	add    %rbx,%rax
  417dc8:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417dcf:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417dd6:	48 85 ff             	test   %rdi,%rdi
  417dd9:	74 06                	je     417de1 <_ZN5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev+0x51>
  417ddb:	48 8b 07             	mov    (%rdi),%rax
  417dde:	ff 50 20             	callq  *0x20(%rax)
  417de1:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417de8:	ff ff ff 
  417deb:	48 89 ef             	mov    %rbp,%rdi
  417dee:	48 01 d8             	add    %rbx,%rax
  417df1:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417df5:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  417dfc:	ff ff ff 
  417dff:	48 01 d8             	add    %rbx,%rax
  417e02:	ff d0                	callq  *%rax
                }
  417e04:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417e0b:	ff ff ff 
  417e0e:	48 89 ef             	mov    %rbp,%rdi
  417e11:	be e8 00 00 00       	mov    $0xe8,%esi
  417e16:	48 01 d8             	add    %rbx,%rax
  417e19:	5b                   	pop    %rbx
  417e1a:	5d                   	pop    %rbp
  417e1b:	41 5f                	pop    %r15
  417e1d:	ff e0                	jmpq   *%rax
  417e1f:	90                   	nop

0000000000417e20 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev>:
            ~error_info_injector() throw()
  417e20:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417e27:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417e27 <_ZThn192_N5boost16exception_detail19error_info_injectorINS_15program_options20invalid_option_valueEED0Ev+0x7>
  417e2e:	49 ba d9 31 21 00 00 	movabs $0x2131d9,%r10
  417e35:	00 00 00 
  417e38:	4d 01 d3             	add    %r10,%r11
  417e3b:	49 ba 90 cd de ff ff 	movabs $0xffffffffffdecd90,%r10
  417e42:	ff ff ff 
  417e45:	4d 01 da             	add    %r11,%r10
  417e48:	41 ff e2             	jmpq   *%r10
  417e4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417e50 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>:
            ~clone_impl() throw()
  417e50:	41 57                	push   %r15
  417e52:	55                   	push   %rbp
  417e53:	49 bb b0 31 21 00 00 	movabs $0x2131b0,%r11
  417e5a:	00 00 00 
  417e5d:	53                   	push   %rbx
  417e5e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417e50 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>
                }
  417e65:	48 b8 b0 f5 ff ff ff 	movabs $0xfffffffffffff5b0,%rax
  417e6c:	ff ff ff 
            ~clone_impl() throw()
  417e6f:	48 89 fd             	mov    %rdi,%rbp
  417e72:	4c 01 db             	add    %r11,%rbx
                }
  417e75:	48 01 d8             	add    %rbx,%rax
  417e78:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417e7f:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  417e86:	ff ff ff 
  417e89:	48 01 d8             	add    %rbx,%rax
  417e8c:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417e8f:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417e96:	ff ff ff 
  417e99:	48 01 d8             	add    %rbx,%rax
  417e9c:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417ea3:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417eaa:	48 85 ff             	test   %rdi,%rdi
  417ead:	74 06                	je     417eb5 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev+0x65>
  417eaf:	48 8b 07             	mov    (%rdi),%rax
  417eb2:	ff 50 20             	callq  *0x20(%rax)
  417eb5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417ebc:	ff ff ff 
  417ebf:	48 89 ef             	mov    %rbp,%rdi
  417ec2:	48 01 d8             	add    %rbx,%rax
  417ec5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417ec9:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  417ed0:	ff ff ff 
  417ed3:	48 01 d8             	add    %rbx,%rax
  417ed6:	ff d0                	callq  *%rax
                }
  417ed8:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417edf:	ff ff ff 
  417ee2:	48 89 ef             	mov    %rbp,%rdi
  417ee5:	be f0 00 00 00       	mov    $0xf0,%esi
  417eea:	48 01 d8             	add    %rbx,%rax
  417eed:	5b                   	pop    %rbx
  417eee:	5d                   	pop    %rbp
  417eef:	41 5f                	pop    %r15
  417ef1:	ff e0                	jmpq   *%rax
  417ef3:	0f 1f 00             	nopl   (%rax)
  417ef6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  417efd:	00 00 00 

0000000000417f00 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>:
            ~clone_impl() throw()
  417f00:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  417f07:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417f07 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev+0x7>
  417f0e:	49 ba f9 30 21 00 00 	movabs $0x2130f9,%r10
  417f15:	00 00 00 
  417f18:	4d 01 d3             	add    %r10,%r11
  417f1b:	49 ba 50 ce de ff ff 	movabs $0xffffffffffdece50,%r10
  417f22:	ff ff ff 
  417f25:	4d 01 da             	add    %r11,%r10
  417f28:	41 ff e2             	jmpq   *%r10
  417f2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417f30 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev>:
  417f30:	4c 8b 17             	mov    (%rdi),%r10
  417f33:	49 03 7a d8          	add    -0x28(%r10),%rdi
  417f37:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 417f37 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEED0Ev+0x7>
  417f3e:	49 ba c9 30 21 00 00 	movabs $0x2130c9,%r10
  417f45:	00 00 00 
  417f48:	4d 01 d3             	add    %r10,%r11
  417f4b:	49 ba 50 ce de ff ff 	movabs $0xffffffffffdece50,%r10
  417f52:	ff ff ff 
  417f55:	4d 01 da             	add    %r11,%r10
  417f58:	41 ff e2             	jmpq   *%r10
  417f5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000417f60 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>:
  417f60:	41 57                	push   %r15
  417f62:	55                   	push   %rbp
  417f63:	49 bb a0 30 21 00 00 	movabs $0x2130a0,%r11
  417f6a:	00 00 00 
  417f6d:	53                   	push   %rbx
  417f6e:	48 8d 1d eb ff ff ff 	lea    -0x15(%rip),%rbx        # 417f60 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>
                }
  417f75:	48 b8 a0 f4 ff ff ff 	movabs $0xfffffffffffff4a0,%rax
  417f7c:	ff ff ff 
            ~clone_impl() throw()
  417f7f:	48 89 fd             	mov    %rdi,%rbp
  417f82:	4c 01 db             	add    %r11,%rbx
                }
  417f85:	48 01 d8             	add    %rbx,%rax
  417f88:	48 89 87 e8 00 00 00 	mov    %rax,0xe8(%rdi)
                }
  417f8f:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  417f96:	ff ff ff 
  417f99:	48 01 d8             	add    %rbx,%rax
  417f9c:	48 89 07             	mov    %rax,(%rdi)
    ~exception() throw()
  417f9f:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  417fa6:	ff ff ff 
  417fa9:	48 01 d8             	add    %rbx,%rax
  417fac:	48 89 87 c0 00 00 00 	mov    %rax,0xc0(%rdi)
                if( px_ && px_->release() )
  417fb3:	48 8b bf c8 00 00 00 	mov    0xc8(%rdi),%rdi
  417fba:	48 85 ff             	test   %rdi,%rdi
  417fbd:	74 06                	je     417fc5 <_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev+0x65>
  417fbf:	48 8b 07             	mov    (%rdi),%rax
  417fc2:	ff 50 20             	callq  *0x20(%rax)
  417fc5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  417fcc:	ff ff ff 
  417fcf:	48 89 ef             	mov    %rbp,%rdi
  417fd2:	48 01 d8             	add    %rbx,%rax
  417fd5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  417fd9:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  417fe0:	ff ff ff 
  417fe3:	48 01 d8             	add    %rbx,%rax
  417fe6:	ff d0                	callq  *%rax
                }
  417fe8:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  417fef:	ff ff ff 
  417ff2:	48 89 ef             	mov    %rbp,%rdi
  417ff5:	be f0 00 00 00       	mov    $0xf0,%esi
  417ffa:	48 01 d8             	add    %rbx,%rax
  417ffd:	5b                   	pop    %rbx
  417ffe:	5d                   	pop    %rbp
  417fff:	41 5f                	pop    %r15
  418001:	ff e0                	jmpq   *%rax
  418003:	0f 1f 00             	nopl   (%rax)
  418006:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41800d:	00 00 00 

0000000000418010 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>:
            ~clone_impl() throw()
  418010:	48 81 ef c0 00 00 00 	sub    $0xc0,%rdi
  418017:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 418017 <_ZThn192_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev+0x7>
  41801e:	49 ba e9 2f 21 00 00 	movabs $0x212fe9,%r10
  418025:	00 00 00 
  418028:	4d 01 d3             	add    %r10,%r11
  41802b:	49 ba 60 cf de ff ff 	movabs $0xffffffffffdecf60,%r10
  418032:	ff ff ff 
  418035:	4d 01 da             	add    %r11,%r10
  418038:	41 ff e2             	jmpq   *%r10
  41803b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000418040 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev>:
  418040:	4c 8b 17             	mov    (%rdi),%r10
  418043:	49 03 7a d8          	add    -0x28(%r10),%rdi
  418047:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 418047 <_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEED0Ev+0x7>
  41804e:	49 ba b9 2f 21 00 00 	movabs $0x212fb9,%r10
  418055:	00 00 00 
  418058:	4d 01 d3             	add    %r10,%r11
  41805b:	49 ba 60 cf de ff ff 	movabs $0xffffffffffdecf60,%r10
  418062:	ff ff ff 
  418065:	4d 01 da             	add    %r11,%r10
  418068:	41 ff e2             	jmpq   *%r10
  41806b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000418070 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  418070:	41 57                	push   %r15
  418072:	41 56                	push   %r14
  418074:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 418070 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
  41807b:	41 55                	push   %r13
  41807d:	41 54                	push   %r12
  41807f:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  418086:	ff ff ff 
  418089:	55                   	push   %rbp
  41808a:	53                   	push   %rbx
  41808b:	49 bb 90 2f 21 00 00 	movabs $0x212f90,%r11
  418092:	00 00 00 
  418095:	4d 01 df             	add    %r11,%r15
  418098:	48 83 ec 68          	sub    $0x68,%rsp
      while (__x != 0)
  41809c:	48 85 f6             	test   %rsi,%rsi
  41809f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  4180a4:	48 b8 70 d0 de ff ff 	movabs $0xffffffffffded070,%rax
  4180ab:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  4180ae:	48 89 74 24 58       	mov    %rsi,0x58(%rsp)
	  _M_erase(_S_right(__x));
  4180b3:	4e 8d 34 38          	lea    (%rax,%r15,1),%r14
      while (__x != 0)
  4180b7:	0f 84 12 03 00 00    	je     4183cf <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x35f>
  4180bd:	4c 89 f0             	mov    %r14,%rax
  4180c0:	49 89 fe             	mov    %rdi,%r14
  4180c3:	49 89 c5             	mov    %rax,%r13
  4180c6:	48 89 f0             	mov    %rsi,%rax
  4180c9:	48 8b 40 18          	mov    0x18(%rax),%rax
  4180cd:	48 85 c0             	test   %rax,%rax
  4180d0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  4180d5:	0f 84 b7 02 00 00    	je     418392 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x322>
  4180db:	48 8b 40 18          	mov    0x18(%rax),%rax
  4180df:	48 85 c0             	test   %rax,%rax
  4180e2:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
  4180e7:	0f 84 68 02 00 00    	je     418355 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2e5>
  4180ed:	48 8b 40 18          	mov    0x18(%rax),%rax
  4180f1:	48 85 c0             	test   %rax,%rax
  4180f4:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  4180f9:	0f 84 19 02 00 00    	je     418318 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2a8>
  4180ff:	48 8b 40 18          	mov    0x18(%rax),%rax
  418103:	48 85 c0             	test   %rax,%rax
  418106:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  41810b:	0f 84 ca 01 00 00    	je     4182db <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x26b>
  418111:	48 8b 40 18          	mov    0x18(%rax),%rax
  418115:	48 85 c0             	test   %rax,%rax
  418118:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  41811d:	0f 84 7b 01 00 00    	je     41829e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x22e>
  418123:	48 8b 40 18          	mov    0x18(%rax),%rax
  418127:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  41812c:	48 85 c0             	test   %rax,%rax
  41812f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  418134:	4a 8d 2c 39          	lea    (%rcx,%r15,1),%rbp
  418138:	0f 84 23 01 00 00    	je     418261 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1f1>
  41813e:	48 8b 40 18          	mov    0x18(%rax),%rax
  418142:	48 89 c1             	mov    %rax,%rcx
  418145:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41814a:	48 b8 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rax
  418151:	ff ff ff 
  418154:	4c 01 f8             	add    %r15,%rax
  418157:	48 85 c9             	test   %rcx,%rcx
  41815a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41815f:	0f 84 c5 00 00 00    	je     41822a <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1ba>
  418165:	0f 1f 00             	nopl   (%rax)
  418168:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41816d:	4c 8b 60 18          	mov    0x18(%rax),%r12
  418171:	4d 85 e4             	test   %r12,%r12
  418174:	75 17                	jne    41818d <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x11d>
  418176:	e9 82 00 00 00       	jmpq   4181fd <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x18d>
  41817b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  418180:	4c 89 e7             	mov    %r12,%rdi
  418183:	49 89 dc             	mov    %rbx,%r12
  418186:	ff d5                	callq  *%rbp
  418188:	48 85 db             	test   %rbx,%rbx
  41818b:	74 6b                	je     4181f8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x188>
	  _M_erase(_S_right(__x));
  41818d:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
  418192:	4c 89 f7             	mov    %r14,%rdi
  418195:	41 ff d5             	callq  *%r13
  418198:	49 8b 44 24 28       	mov    0x28(%r12),%rax
  41819d:	49 8b 5c 24 10       	mov    0x10(%r12),%rbx
  4181a2:	48 85 c0             	test   %rax,%rax
  4181a5:	74 d9                	je     418180 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
        if( atomic_decrement( &use_count_ ) == 1 )
  4181a7:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  4181ac:	75 d2                	jne    418180 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
            dispose();
  4181ae:	48 8b 10             	mov    (%rax),%rdx
  4181b1:	48 89 c7             	mov    %rax,%rdi
  4181b4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4181b9:	ff 52 10             	callq  *0x10(%rdx)
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_sub(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }
  4181bc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4181c1:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  4181c6:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4181cb:	83 fa 01             	cmp    $0x1,%edx
  4181ce:	75 b0                	jne    418180 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
            destroy();
  4181d0:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  4181d3:	48 89 c7             	mov    %rax,%rdi
            destroy();
  4181d6:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  4181da:	48 3b 4c 24 18       	cmp    0x18(%rsp),%rcx
  4181df:	0f 85 3a 02 00 00    	jne    41841f <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3af>
        delete this;
  4181e5:	ff 52 08             	callq  *0x8(%rdx)
  4181e8:	4c 89 e7             	mov    %r12,%rdi
  4181eb:	49 89 dc             	mov    %rbx,%r12
  4181ee:	ff d5                	callq  *%rbp
      while (__x != 0)
  4181f0:	48 85 db             	test   %rbx,%rbx
  4181f3:	75 98                	jne    41818d <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x11d>
  4181f5:	0f 1f 00             	nopl   (%rax)
  4181f8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4181fd:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418201:	48 8b 40 28          	mov    0x28(%rax),%rax
  418205:	48 85 c0             	test   %rax,%rax
  418208:	74 0b                	je     418215 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
        if( atomic_decrement( &use_count_ ) == 1 )
  41820a:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  41820f:	0f 84 cb 01 00 00    	je     4183e0 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x370>
  418215:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41821a:	ff d5                	callq  *%rbp
  41821c:	48 85 db             	test   %rbx,%rbx
  41821f:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  418224:	0f 85 3e ff ff ff    	jne    418168 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xf8>
  41822a:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41822f:	4c 8b 60 28          	mov    0x28(%rax),%r12
  418233:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418237:	4d 85 e4             	test   %r12,%r12
  41823a:	74 0d                	je     418249 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
  41823c:	f0 41 83 6c 24 08 01 	lock subl $0x1,0x8(%r12)
  418243:	0f 84 dd 01 00 00    	je     418426 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3b6>
  418249:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41824e:	ff d5                	callq  *%rbp
  418250:	48 85 db             	test   %rbx,%rbx
  418253:	48 89 d8             	mov    %rbx,%rax
  418256:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  41825b:	0f 85 dd fe ff ff    	jne    41813e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xce>
  418261:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  418266:	48 8b 58 28          	mov    0x28(%rax),%rbx
  41826a:	48 8b 68 10          	mov    0x10(%rax),%rbp
  41826e:	48 85 db             	test   %rbx,%rbx
  418271:	74 0b                	je     41827e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
  418273:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  418278:	0f 84 eb 01 00 00    	je     418469 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3f9>
  41827e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  418283:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  418288:	4c 01 f8             	add    %r15,%rax
  41828b:	ff d0                	callq  *%rax
  41828d:	48 85 ed             	test   %rbp,%rbp
  418290:	48 89 e8             	mov    %rbp,%rax
  418293:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
  418298:	0f 85 85 fe ff ff    	jne    418123 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xb3>
  41829e:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  4182a3:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4182a7:	48 8b 68 10          	mov    0x10(%rax),%rbp
  4182ab:	48 85 db             	test   %rbx,%rbx
  4182ae:	74 0b                	je     4182bb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
  4182b0:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  4182b5:	0f 84 f4 01 00 00    	je     4184af <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x43f>
  4182bb:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4182c0:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  4182c5:	4c 01 f8             	add    %r15,%rax
  4182c8:	ff d0                	callq  *%rax
  4182ca:	48 85 ed             	test   %rbp,%rbp
  4182cd:	48 89 e8             	mov    %rbp,%rax
  4182d0:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  4182d5:	0f 85 36 fe ff ff    	jne    418111 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa1>
  4182db:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  4182e0:	48 8b 58 28          	mov    0x28(%rax),%rbx
  4182e4:	48 8b 68 10          	mov    0x10(%rax),%rbp
  4182e8:	48 85 db             	test   %rbx,%rbx
  4182eb:	74 0b                	je     4182f8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
  4182ed:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  4182f2:	0f 84 7b 02 00 00    	je     418573 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x503>
  4182f8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4182fd:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  418302:	4c 01 f8             	add    %r15,%rax
  418305:	ff d0                	callq  *%rax
  418307:	48 85 ed             	test   %rbp,%rbp
  41830a:	48 89 e8             	mov    %rbp,%rax
  41830d:	48 89 6c 24 48       	mov    %rbp,0x48(%rsp)
  418312:	0f 85 e7 fd ff ff    	jne    4180ff <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x8f>
  418318:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  41831d:	48 8b 58 28          	mov    0x28(%rax),%rbx
  418321:	48 8b 68 10          	mov    0x10(%rax),%rbp
  418325:	48 85 db             	test   %rbx,%rbx
  418328:	74 0b                	je     418335 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
  41832a:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  41832f:	0f 84 76 02 00 00    	je     4185ab <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x53b>
  418335:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41833a:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41833f:	4c 01 f8             	add    %r15,%rax
  418342:	ff d0                	callq  *%rax
  418344:	48 85 ed             	test   %rbp,%rbp
  418347:	48 89 e8             	mov    %rbp,%rax
  41834a:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  41834f:	0f 85 98 fd ff ff    	jne    4180ed <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x7d>
  418355:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41835a:	48 8b 58 28          	mov    0x28(%rax),%rbx
  41835e:	48 8b 68 10          	mov    0x10(%rax),%rbp
  418362:	48 85 db             	test   %rbx,%rbx
  418365:	74 0b                	je     418372 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
  418367:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  41836c:	0f 84 83 01 00 00    	je     4184f5 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x485>
  418372:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  418377:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41837c:	4c 01 f8             	add    %r15,%rax
  41837f:	ff d0                	callq  *%rax
  418381:	48 85 ed             	test   %rbp,%rbp
  418384:	48 89 e8             	mov    %rbp,%rax
  418387:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
  41838c:	0f 85 49 fd ff ff    	jne    4180db <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x6b>
  418392:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  418397:	48 8b 58 28          	mov    0x28(%rax),%rbx
  41839b:	48 8b 68 10          	mov    0x10(%rax),%rbp
  41839f:	48 85 db             	test   %rbx,%rbx
  4183a2:	74 0b                	je     4183af <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
  4183a4:	f0 83 6b 08 01       	lock subl $0x1,0x8(%rbx)
  4183a9:	0f 84 7e 01 00 00    	je     41852d <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x4bd>
  4183af:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4183b4:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
  4183b9:	4c 01 f8             	add    %r15,%rax
  4183bc:	ff d0                	callq  *%rax
  4183be:	48 85 ed             	test   %rbp,%rbp
  4183c1:	48 89 e8             	mov    %rbp,%rax
  4183c4:	48 89 6c 24 58       	mov    %rbp,0x58(%rsp)
  4183c9:	0f 85 fa fc ff ff    	jne    4180c9 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x59>
    }
  4183cf:	48 83 c4 68          	add    $0x68,%rsp
  4183d3:	5b                   	pop    %rbx
  4183d4:	5d                   	pop    %rbp
  4183d5:	41 5c                	pop    %r12
  4183d7:	41 5d                	pop    %r13
  4183d9:	41 5e                	pop    %r14
  4183db:	41 5f                	pop    %r15
  4183dd:	c3                   	retq   
  4183de:	66 90                	xchg   %ax,%ax
            dispose();
  4183e0:	48 8b 10             	mov    (%rax),%rdx
  4183e3:	48 89 c7             	mov    %rax,%rdi
  4183e6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4183eb:	ff 52 10             	callq  *0x10(%rdx)
  4183ee:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4183f3:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  4183f8:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4183fd:	83 fa 01             	cmp    $0x1,%edx
  418400:	0f 85 0f fe ff ff    	jne    418215 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
            destroy();
  418406:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  418409:	48 89 c7             	mov    %rax,%rdi
            destroy();
  41840c:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  418410:	48 3b 4c 24 18       	cmp    0x18(%rsp),%rcx
  418415:	75 4b                	jne    418462 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x3f2>
        delete this;
  418417:	ff 52 08             	callq  *0x8(%rdx)
  41841a:	e9 f6 fd ff ff       	jmpq   418215 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
            destroy();
  41841f:	ff d1                	callq  *%rcx
  418421:	e9 5a fd ff ff       	jmpq   418180 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x110>
            dispose();
  418426:	49 8b 04 24          	mov    (%r12),%rax
  41842a:	4c 89 e7             	mov    %r12,%rdi
  41842d:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418430:	f0 41 83 6c 24 0c 01 	lock subl $0x1,0xc(%r12)
  418437:	0f 85 0c fe ff ff    	jne    418249 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
            destroy();
  41843d:	49 8b 14 24          	mov    (%r12),%rdx
  418441:	48 b9 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rcx
  418448:	ff ff ff 
        delete this;
  41844b:	4c 89 e7             	mov    %r12,%rdi
  41844e:	4c 01 f9             	add    %r15,%rcx
            destroy();
  418451:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418455:	48 39 c8             	cmp    %rcx,%rax
  418458:	75 4e                	jne    4184a8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x438>
        delete this;
  41845a:	ff 52 08             	callq  *0x8(%rdx)
  41845d:	e9 e7 fd ff ff       	jmpq   418249 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
            destroy();
  418462:	ff d1                	callq  *%rcx
  418464:	e9 ac fd ff ff       	jmpq   418215 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1a5>
            dispose();
  418469:	48 8b 03             	mov    (%rbx),%rax
  41846c:	48 89 df             	mov    %rbx,%rdi
  41846f:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418472:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  418477:	0f 85 01 fe ff ff    	jne    41827e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
            destroy();
  41847d:	48 8b 13             	mov    (%rbx),%rdx
  418480:	48 b9 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rcx
  418487:	ff ff ff 
        delete this;
  41848a:	48 89 df             	mov    %rbx,%rdi
  41848d:	4c 01 f9             	add    %r15,%rcx
            destroy();
  418490:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418494:	48 39 c8             	cmp    %rcx,%rax
  418497:	75 4e                	jne    4184e7 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x477>
        delete this;
  418499:	ff 52 08             	callq  *0x8(%rdx)
  41849c:	e9 dd fd ff ff       	jmpq   41827e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
  4184a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            destroy();
  4184a8:	ff d0                	callq  *%rax
  4184aa:	e9 9a fd ff ff       	jmpq   418249 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d9>
            dispose();
  4184af:	48 8b 03             	mov    (%rbx),%rax
  4184b2:	48 89 df             	mov    %rbx,%rdi
  4184b5:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4184b8:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  4184bd:	0f 85 f8 fd ff ff    	jne    4182bb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
            destroy();
  4184c3:	48 8b 13             	mov    (%rbx),%rdx
  4184c6:	48 b9 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rcx
  4184cd:	ff ff ff 
        delete this;
  4184d0:	48 89 df             	mov    %rbx,%rdi
  4184d3:	4c 01 f9             	add    %r15,%rcx
            destroy();
  4184d6:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4184da:	48 39 c8             	cmp    %rcx,%rax
  4184dd:	75 0f                	jne    4184ee <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x47e>
        delete this;
  4184df:	ff 52 08             	callq  *0x8(%rdx)
  4184e2:	e9 d4 fd ff ff       	jmpq   4182bb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
            destroy();
  4184e7:	ff d0                	callq  *%rax
  4184e9:	e9 90 fd ff ff       	jmpq   41827e <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x20e>
  4184ee:	ff d0                	callq  *%rax
  4184f0:	e9 c6 fd ff ff       	jmpq   4182bb <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x24b>
            dispose();
  4184f5:	48 8b 03             	mov    (%rbx),%rax
  4184f8:	48 89 df             	mov    %rbx,%rdi
  4184fb:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4184fe:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  418503:	0f 85 69 fe ff ff    	jne    418372 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
            destroy();
  418509:	48 8b 13             	mov    (%rbx),%rdx
  41850c:	48 b9 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rcx
  418513:	ff ff ff 
        delete this;
  418516:	48 89 df             	mov    %rbx,%rdi
  418519:	4c 01 f9             	add    %r15,%rcx
            destroy();
  41851c:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418520:	48 39 c8             	cmp    %rcx,%rax
  418523:	75 40                	jne    418565 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x4f5>
        delete this;
  418525:	ff 52 08             	callq  *0x8(%rdx)
  418528:	e9 45 fe ff ff       	jmpq   418372 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
            dispose();
  41852d:	48 8b 03             	mov    (%rbx),%rax
  418530:	48 89 df             	mov    %rbx,%rdi
  418533:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  418536:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  41853b:	0f 85 6e fe ff ff    	jne    4183af <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
            destroy();
  418541:	48 8b 13             	mov    (%rbx),%rdx
  418544:	48 b9 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rcx
  41854b:	ff ff ff 
        delete this;
  41854e:	48 89 df             	mov    %rbx,%rdi
  418551:	4c 01 f9             	add    %r15,%rcx
            destroy();
  418554:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418558:	48 39 c8             	cmp    %rcx,%rax
  41855b:	75 0f                	jne    41856c <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x4fc>
        delete this;
  41855d:	ff 52 08             	callq  *0x8(%rdx)
  418560:	e9 4a fe ff ff       	jmpq   4183af <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
            destroy();
  418565:	ff d0                	callq  *%rax
  418567:	e9 06 fe ff ff       	jmpq   418372 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x302>
  41856c:	ff d0                	callq  *%rax
  41856e:	e9 3c fe ff ff       	jmpq   4183af <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x33f>
            dispose();
  418573:	48 8b 03             	mov    (%rbx),%rax
  418576:	48 89 df             	mov    %rbx,%rdi
  418579:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41857c:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  418581:	0f 85 71 fd ff ff    	jne    4182f8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
            destroy();
  418587:	48 8b 13             	mov    (%rbx),%rdx
  41858a:	48 b9 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rcx
  418591:	ff ff ff 
        delete this;
  418594:	48 89 df             	mov    %rbx,%rdi
  418597:	4c 01 f9             	add    %r15,%rcx
            destroy();
  41859a:	48 8b 42 18          	mov    0x18(%rdx),%rax
  41859e:	48 39 c8             	cmp    %rcx,%rax
  4185a1:	75 40                	jne    4185e3 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x573>
        delete this;
  4185a3:	ff 52 08             	callq  *0x8(%rdx)
  4185a6:	e9 4d fd ff ff       	jmpq   4182f8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
            dispose();
  4185ab:	48 8b 03             	mov    (%rbx),%rax
  4185ae:	48 89 df             	mov    %rbx,%rdi
  4185b1:	ff 50 10             	callq  *0x10(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4185b4:	f0 83 6b 0c 01       	lock subl $0x1,0xc(%rbx)
  4185b9:	0f 85 76 fd ff ff    	jne    418335 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
            destroy();
  4185bf:	48 8b 13             	mov    (%rbx),%rdx
  4185c2:	48 b9 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rcx
  4185c9:	ff ff ff 
        delete this;
  4185cc:	48 89 df             	mov    %rbx,%rdi
  4185cf:	4c 01 f9             	add    %r15,%rcx
            destroy();
  4185d2:	48 8b 42 18          	mov    0x18(%rdx),%rax
  4185d6:	48 39 c8             	cmp    %rcx,%rax
  4185d9:	75 0f                	jne    4185ea <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x57a>
        delete this;
  4185db:	ff 52 08             	callq  *0x8(%rdx)
  4185de:	e9 52 fd ff ff       	jmpq   418335 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
            destroy();
  4185e3:	ff d0                	callq  *%rax
  4185e5:	e9 0e fd ff ff       	jmpq   4182f8 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x288>
  4185ea:	ff d0                	callq  *%rax
  4185ec:	e9 44 fd ff ff       	jmpq   418335 <_ZNSt8_Rb_treeIN5boost10shared_ptrIN4YAML6detail4nodeEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2c5>
  4185f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4185f8:	00 00 00 
  4185fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000418600 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv>:
    virtual void dispose() // nothrow
  418600:	41 57                	push   %r15
  418602:	41 56                	push   %r14
  418604:	49 bb 00 2a 21 00 00 	movabs $0x212a00,%r11
  41860b:	00 00 00 
  41860e:	41 55                	push   %r13
  418610:	41 54                	push   %r12
  418612:	55                   	push   %rbp
  418613:	53                   	push   %rbx
  418614:	48 8d 2d e5 ff ff ff 	lea    -0x1b(%rip),%rbp        # 418600 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv>
  41861b:	48 83 ec 18          	sub    $0x18,%rsp
        boost::checked_delete( px_ );
  41861f:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  418623:	4c 01 dd             	add    %r11,%rbp
  418626:	4d 85 e4             	test   %r12,%r12
  418629:	0f 84 d1 00 00 00    	je     418700 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x100>
  41862f:	4d 8b 7c 24 10       	mov    0x10(%r12),%r15
      while (__x != 0)
  418634:	4d 85 ff             	test   %r15,%r15
  418637:	0f 84 9b 00 00 00    	je     4186d8 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0xd8>
	  _M_erase(_S_right(__x));
  41863d:	48 b8 70 d0 de ff ff 	movabs $0xffffffffffded070,%rax
  418644:	ff ff ff 
  418647:	49 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r13
  41864e:	ff ff ff 
  418651:	4c 8d 34 28          	lea    (%rax,%rbp,1),%r14
  418655:	48 b8 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rax
  41865c:	ff ff ff 
  41865f:	49 01 ed             	add    %rbp,%r13
  418662:	48 01 e8             	add    %rbp,%rax
  418665:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41866a:	eb 15                	jmp    418681 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x81>
  41866c:	0f 1f 40 00          	nopl   0x0(%rax)
  418670:	4c 89 ff             	mov    %r15,%rdi
  418673:	49 89 ef             	mov    %rbp,%r15
  418676:	41 ff d5             	callq  *%r13
      while (__x != 0)
  418679:	48 85 db             	test   %rbx,%rbx
  41867c:	49 89 df             	mov    %rbx,%r15
  41867f:	74 57                	je     4186d8 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0xd8>
	  _M_erase(_S_right(__x));
  418681:	49 8b 77 18          	mov    0x18(%r15),%rsi
  418685:	4c 89 e7             	mov    %r12,%rdi
  418688:	41 ff d6             	callq  *%r14
  41868b:	49 8b 47 28          	mov    0x28(%r15),%rax
  41868f:	49 8b 5f 10          	mov    0x10(%r15),%rbx
  418693:	48 85 c0             	test   %rax,%rax
  418696:	74 d8                	je     418670 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
        if( atomic_decrement( &use_count_ ) == 1 )
  418698:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  41869d:	75 d1                	jne    418670 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
            dispose();
  41869f:	48 8b 10             	mov    (%rax),%rdx
  4186a2:	48 89 c7             	mov    %rax,%rdi
  4186a5:	48 89 04 24          	mov    %rax,(%rsp)
  4186a9:	ff 52 10             	callq  *0x10(%rdx)
  4186ac:	48 8b 04 24          	mov    (%rsp),%rax
  4186b0:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  4186b5:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  4186ba:	83 fa 01             	cmp    $0x1,%edx
  4186bd:	75 b1                	jne    418670 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
            destroy();
  4186bf:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  4186c2:	48 89 c7             	mov    %rax,%rdi
            destroy();
  4186c5:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  4186c9:	48 3b 4c 24 08       	cmp    0x8(%rsp),%rcx
  4186ce:	75 3f                	jne    41870f <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x10f>
        delete this;
  4186d0:	ff 52 08             	callq  *0x8(%rdx)
  4186d3:	eb 9b                	jmp    418670 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
  4186d5:	0f 1f 00             	nopl   (%rax)
    }
  4186d8:	48 83 c4 18          	add    $0x18,%rsp
  4186dc:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4186e3:	ff ff ff 
  4186e6:	4c 89 e7             	mov    %r12,%rdi
  4186e9:	5b                   	pop    %rbx
  4186ea:	48 01 e8             	add    %rbp,%rax
  4186ed:	be 30 00 00 00       	mov    $0x30,%esi
  4186f2:	5d                   	pop    %rbp
  4186f3:	41 5c                	pop    %r12
  4186f5:	41 5d                	pop    %r13
  4186f7:	41 5e                	pop    %r14
  4186f9:	41 5f                	pop    %r15
  4186fb:	ff e0                	jmpq   *%rax
  4186fd:	0f 1f 00             	nopl   (%rax)
  418700:	48 83 c4 18          	add    $0x18,%rsp
  418704:	5b                   	pop    %rbx
  418705:	5d                   	pop    %rbp
  418706:	41 5c                	pop    %r12
  418708:	41 5d                	pop    %r13
  41870a:	41 5e                	pop    %r14
  41870c:	41 5f                	pop    %r15
  41870e:	c3                   	retq   
            destroy();
  41870f:	ff d1                	callq  *%rcx
  418711:	e9 5a ff ff ff       	jmpq   418670 <_ZN5boost6detail17sp_counted_impl_pIN4YAML6detail6memoryEE7disposeEv+0x70>
  418716:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41871d:	00 00 00 

0000000000418720 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  418720:	41 57                	push   %r15
  418722:	41 56                	push   %r14
  418724:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 418720 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
  41872b:	41 55                	push   %r13
  41872d:	41 54                	push   %r12
  41872f:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  418736:	ff ff ff 
  418739:	55                   	push   %rbp
  41873a:	53                   	push   %rbx
  41873b:	49 bb e0 28 21 00 00 	movabs $0x2128e0,%r11
  418742:	00 00 00 
  418745:	4d 01 df             	add    %r11,%r15
  418748:	48 83 ec 58          	sub    $0x58,%rsp
      while (__x != 0)
  41874c:	48 85 f6             	test   %rsi,%rsi
  41874f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  418754:	48 b8 20 d7 de ff ff 	movabs $0xffffffffffded720,%rax
  41875b:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41875e:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
	  _M_erase(_S_right(__x));
  418763:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
      while (__x != 0)
  418767:	0f 84 d3 01 00 00    	je     418940 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x220>
  41876d:	49 89 fd             	mov    %rdi,%r13
  418770:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  418775:	48 8b 40 18          	mov    0x18(%rax),%rax
  418779:	48 85 c0             	test   %rax,%rax
  41877c:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  418781:	0f 84 95 01 00 00    	je     41891c <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1fc>
  418787:	48 8b 40 18          	mov    0x18(%rax),%rax
  41878b:	48 85 c0             	test   %rax,%rax
  41878e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  418793:	0f 84 5c 01 00 00    	je     4188f5 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1d5>
  418799:	48 8b 40 18          	mov    0x18(%rax),%rax
  41879d:	48 85 c0             	test   %rax,%rax
  4187a0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  4187a5:	0f 84 23 01 00 00    	je     4188ce <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1ae>
  4187ab:	48 8b 40 18          	mov    0x18(%rax),%rax
  4187af:	48 85 c0             	test   %rax,%rax
  4187b2:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  4187b7:	0f 84 ea 00 00 00    	je     4188a7 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x187>
  4187bd:	48 8b 40 18          	mov    0x18(%rax),%rax
  4187c1:	48 85 c0             	test   %rax,%rax
  4187c4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4187c9:	0f 84 b1 00 00 00    	je     418880 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x160>
  4187cf:	48 8b 40 18          	mov    0x18(%rax),%rax
  4187d3:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  4187d8:	48 85 c0             	test   %rax,%rax
  4187db:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4187e0:	4a 8d 2c 3a          	lea    (%rdx,%r15,1),%rbp
  4187e4:	74 73                	je     418859 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x139>
  4187e6:	48 8b 40 18          	mov    0x18(%rax),%rax
  4187ea:	48 85 c0             	test   %rax,%rax
  4187ed:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4187f2:	74 4a                	je     41883e <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x11e>
  4187f4:	0f 1f 40 00          	nopl   0x0(%rax)
  4187f8:	4c 8b 70 18          	mov    0x18(%rax),%r14
  4187fc:	4d 85 f6             	test   %r14,%r14
  4187ff:	74 27                	je     418828 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x108>
  418801:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  418808:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41880c:	4c 89 ef             	mov    %r13,%rdi
  41880f:	41 ff d4             	callq  *%r12
  418812:	49 8b 5e 10          	mov    0x10(%r14),%rbx
  418816:	4c 89 f7             	mov    %r14,%rdi
  418819:	ff d5                	callq  *%rbp
      while (__x != 0)
  41881b:	48 85 db             	test   %rbx,%rbx
  41881e:	49 89 de             	mov    %rbx,%r14
  418821:	75 e5                	jne    418808 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xe8>
  418823:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  418828:	48 8b 58 10          	mov    0x10(%rax),%rbx
  41882c:	48 89 c7             	mov    %rax,%rdi
  41882f:	ff d5                	callq  *%rbp
  418831:	48 85 db             	test   %rbx,%rbx
  418834:	48 89 d8             	mov    %rbx,%rax
  418837:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  41883c:	75 ba                	jne    4187f8 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xd8>
  41883e:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  418843:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418847:	48 89 c7             	mov    %rax,%rdi
  41884a:	ff d5                	callq  *%rbp
  41884c:	48 85 db             	test   %rbx,%rbx
  41884f:	48 89 d8             	mov    %rbx,%rax
  418852:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  418857:	75 8d                	jne    4187e6 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xc6>
  418859:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41885e:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418862:	48 89 c7             	mov    %rax,%rdi
  418865:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41886a:	4c 01 f8             	add    %r15,%rax
  41886d:	ff d0                	callq  *%rax
  41886f:	48 85 db             	test   %rbx,%rbx
  418872:	48 89 d8             	mov    %rbx,%rax
  418875:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  41887a:	0f 85 4f ff ff ff    	jne    4187cf <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xaf>
  418880:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  418885:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418889:	48 89 c7             	mov    %rax,%rdi
  41888c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  418891:	4c 01 f8             	add    %r15,%rax
  418894:	ff d0                	callq  *%rax
  418896:	48 85 db             	test   %rbx,%rbx
  418899:	48 89 d8             	mov    %rbx,%rax
  41889c:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  4188a1:	0f 85 16 ff ff ff    	jne    4187bd <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x9d>
  4188a7:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4188ac:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4188b0:	48 89 c7             	mov    %rax,%rdi
  4188b3:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4188b8:	4c 01 f8             	add    %r15,%rax
  4188bb:	ff d0                	callq  *%rax
  4188bd:	48 85 db             	test   %rbx,%rbx
  4188c0:	48 89 d8             	mov    %rbx,%rax
  4188c3:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  4188c8:	0f 85 dd fe ff ff    	jne    4187ab <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x8b>
  4188ce:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  4188d3:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4188d7:	48 89 c7             	mov    %rax,%rdi
  4188da:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4188df:	4c 01 f8             	add    %r15,%rax
  4188e2:	ff d0                	callq  *%rax
  4188e4:	48 85 db             	test   %rbx,%rbx
  4188e7:	48 89 d8             	mov    %rbx,%rax
  4188ea:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  4188ef:	0f 85 a4 fe ff ff    	jne    418799 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x79>
  4188f5:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  4188fa:	48 8b 58 10          	mov    0x10(%rax),%rbx
  4188fe:	48 89 c7             	mov    %rax,%rdi
  418901:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  418906:	4c 01 f8             	add    %r15,%rax
  418909:	ff d0                	callq  *%rax
  41890b:	48 85 db             	test   %rbx,%rbx
  41890e:	48 89 d8             	mov    %rbx,%rax
  418911:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  418916:	0f 85 6b fe ff ff    	jne    418787 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x67>
  41891c:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  418921:	48 8b 58 10          	mov    0x10(%rax),%rbx
  418925:	48 89 c7             	mov    %rax,%rdi
  418928:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41892d:	4c 01 f8             	add    %r15,%rax
  418930:	ff d0                	callq  *%rax
  418932:	48 85 db             	test   %rbx,%rbx
  418935:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  41893a:	0f 85 30 fe ff ff    	jne    418770 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x50>
    }
  418940:	48 83 c4 58          	add    $0x58,%rsp
  418944:	5b                   	pop    %rbx
  418945:	5d                   	pop    %rbp
  418946:	41 5c                	pop    %r12
  418948:	41 5d                	pop    %r13
  41894a:	41 5e                	pop    %r14
  41894c:	41 5f                	pop    %r15
  41894e:	c3                   	retq   
  41894f:	90                   	nop

0000000000418950 <_ZN4YAML6detail4node12mark_definedEv>:

  template <typename T>
  bool equals(const T& rhs, shared_memory_holder pMemory);
  bool equals(const char* rhs, shared_memory_holder pMemory);

  void mark_defined() {
  418950:	41 57                	push   %r15
  418952:	41 56                	push   %r14
  418954:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 418950 <_ZN4YAML6detail4node12mark_definedEv>
  41895b:	41 55                	push   %r13
  41895d:	41 54                	push   %r12
  41895f:	49 bb b0 26 21 00 00 	movabs $0x2126b0,%r11
  418966:	00 00 00 
  418969:	55                   	push   %rbp
  41896a:	53                   	push   %rbx
  41896b:	4d 01 df             	add    %r11,%r15
  41896e:	48 83 ec 18          	sub    $0x18,%rsp
  418972:	48 8b 07             	mov    (%rdi),%rax
  418975:	48 85 c0             	test   %rax,%rax
  418978:	0f 84 ea 00 00 00    	je     418a68 <_ZN4YAML6detail4node12mark_definedEv+0x118>
  41897e:	49 89 fd             	mov    %rdi,%r13
  418981:	48 8b 38             	mov    (%rax),%rdi
  418984:	48 85 ff             	test   %rdi,%rdi
  418987:	0f 84 ea 00 00 00    	je     418a77 <_ZN4YAML6detail4node12mark_definedEv+0x127>
    if (is_defined())
  41898d:	80 3f 00             	cmpb   $0x0,(%rdi)
  418990:	0f 85 c3 00 00 00    	jne    418a59 <_ZN4YAML6detail4node12mark_definedEv+0x109>
  void mark_defined() { m_pData->mark_defined(); }
  418996:	48 b8 80 e5 dd ff ff 	movabs $0xffffffffffdde580,%rax
  41899d:	ff ff ff 
      { return const_iterator(&this->_M_impl._M_header); }
  4189a0:	49 8d 6d 18          	lea    0x18(%r13),%rbp
	_M_node = _Rb_tree_increment(_M_node);
  4189a4:	48 bb c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rbx
  4189ab:	ff ff ff 
  4189ae:	4c 01 f8             	add    %r15,%rax
  4189b1:	4c 01 fb             	add    %r15,%rbx
  4189b4:	ff d0                	callq  *%rax
      return;

    m_pRef->mark_defined();
    for (nodes::iterator it = m_dependencies.begin();
  4189b6:	4d 8b 75 28          	mov    0x28(%r13),%r14
  4189ba:	48 b8 50 d9 de ff ff 	movabs $0xffffffffffded950,%rax
  4189c1:	ff ff ff 
         it != m_dependencies.end(); ++it)
      (*it)->mark_defined();
  4189c4:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
    for (nodes::iterator it = m_dependencies.begin();
  4189c8:	49 39 ee             	cmp    %rbp,%r14
  4189cb:	74 17                	je     4189e4 <_ZN4YAML6detail4node12mark_definedEv+0x94>
  4189cd:	0f 1f 00             	nopl   (%rax)
      (*it)->mark_defined();
  4189d0:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  4189d4:	41 ff d4             	callq  *%r12
  4189d7:	4c 89 f7             	mov    %r14,%rdi
  4189da:	ff d3                	callq  *%rbx
    for (nodes::iterator it = m_dependencies.begin();
  4189dc:	48 39 e8             	cmp    %rbp,%rax
  4189df:	49 89 c6             	mov    %rax,%r14
  4189e2:	75 ec                	jne    4189d0 <_ZN4YAML6detail4node12mark_definedEv+0x80>
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
      { _M_t.clear(); }
  4189e4:	49 8d 45 10          	lea    0x10(%r13),%rax
  4189e8:	48 89 04 24          	mov    %rax,(%rsp)
  4189ec:	49 8b 45 20          	mov    0x20(%r13),%rax
      while (__x != 0)
  4189f0:	48 85 c0             	test   %rax,%rax
  4189f3:	74 4c                	je     418a41 <_ZN4YAML6detail4node12mark_definedEv+0xf1>
  4189f5:	48 ba 20 d7 de ff ff 	movabs $0xffffffffffded720,%rdx
  4189fc:	ff ff ff 
  4189ff:	49 89 c6             	mov    %rax,%r14
  418a02:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  418a09:	ff ff ff 
	  _M_erase(_S_right(__x));
  418a0c:	4a 8d 04 3a          	lea    (%rdx,%r15,1),%rax
  418a10:	4d 01 fc             	add    %r15,%r12
  418a13:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  418a18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  418a1f:	00 
  418a20:	49 8b 76 18          	mov    0x18(%r14),%rsi
  418a24:	48 8b 3c 24          	mov    (%rsp),%rdi
  418a28:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  418a2d:	ff d0                	callq  *%rax
  418a2f:	49 8b 5e 10          	mov    0x10(%r14),%rbx
  418a33:	4c 89 f7             	mov    %r14,%rdi
  418a36:	41 ff d4             	callq  *%r12
      while (__x != 0)
  418a39:	48 85 db             	test   %rbx,%rbx
  418a3c:	49 89 de             	mov    %rbx,%r14
  418a3f:	75 df                	jne    418a20 <_ZN4YAML6detail4node12mark_definedEv+0xd0>
	    this->_M_header._M_parent = 0;
  418a41:	49 c7 45 20 00 00 00 	movq   $0x0,0x20(%r13)
  418a48:	00 
	    this->_M_header._M_left = &this->_M_header;
  418a49:	49 89 6d 28          	mov    %rbp,0x28(%r13)
	    this->_M_header._M_right = &this->_M_header;
  418a4d:	49 89 6d 30          	mov    %rbp,0x30(%r13)
	    this->_M_node_count = 0;
  418a51:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
  418a58:	00 
    m_dependencies.clear();
  }
  418a59:	48 83 c4 18          	add    $0x18,%rsp
  418a5d:	5b                   	pop    %rbx
  418a5e:	5d                   	pop    %rbp
  418a5f:	41 5c                	pop    %r12
  418a61:	41 5d                	pop    %r13
  418a63:	41 5e                	pop    %r14
  418a65:	41 5f                	pop    %r15
  418a67:	c3                   	retq   
  418a68:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  418a6f:	ff ff ff 
  418a72:	4c 01 f8             	add    %r15,%rax
  418a75:	ff d0                	callq  *%rax
  418a77:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  418a7e:	ff ff ff 
  418a81:	4c 01 f8             	add    %r15,%rax
  418a84:	ff d0                	callq  *%rax
  418a86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418a8d:	00 00 00 

0000000000418a90 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  418a90:	41 57                	push   %r15
  418a92:	41 56                	push   %r14
  418a94:	49 bb 70 25 21 00 00 	movabs $0x212570,%r11
  418a9b:	00 00 00 
  418a9e:	41 55                	push   %r13
  418aa0:	41 54                	push   %r12
  418aa2:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 418a90 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_>
  418aa9:	55                   	push   %rbp
  418aaa:	53                   	push   %rbx
  418aab:	49 89 fd             	mov    %rdi,%r13
  418aae:	4d 01 dc             	add    %r11,%r12
  418ab1:	49 89 f6             	mov    %rsi,%r14
      { return &this->_M_impl._M_header; }
  418ab4:	48 8d 6f 08          	lea    0x8(%rdi),%rbp
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  418ab8:	48 83 ec 18          	sub    $0x18,%rsp
  418abc:	48 8b 57 10          	mov    0x10(%rdi),%rdx
      while (__x != 0)
  418ac0:	48 85 d2             	test   %rdx,%rdx
  418ac3:	74 53                	je     418b18 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x88>
  418ac5:	48 8b 3e             	mov    (%rsi),%rdi
  418ac8:	eb 18                	jmp    418ae2 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x52>
  418aca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  418ad0:	48 8b 42 10          	mov    0x10(%rdx),%rax
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  418ad4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
      while (__x != 0)
  418ada:	48 85 c0             	test   %rax,%rax
  418add:	74 18                	je     418af7 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x67>
  418adf:	48 89 c2             	mov    %rax,%rdx
  418ae2:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  418ae6:	48 39 f9             	cmp    %rdi,%rcx
  418ae9:	77 e5                	ja     418ad0 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x40>
  418aeb:	48 8b 42 18          	mov    0x18(%rdx),%rax
  418aef:	45 31 c0             	xor    %r8d,%r8d
      while (__x != 0)
  418af2:	48 85 c0             	test   %rax,%rax
  418af5:	75 e8                	jne    418adf <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x4f>
      if (__comp)
  418af7:	45 84 c0             	test   %r8b,%r8b
  418afa:	48 89 d3             	mov    %rdx,%rbx
  418afd:	48 89 d0             	mov    %rdx,%rax
  418b00:	75 1e                	jne    418b20 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x90>
      return _Res(iterator(__res.first), false);
  418b02:	31 d2                	xor    %edx,%edx
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
  418b04:	48 39 cf             	cmp    %rcx,%rdi
  418b07:	77 40                	ja     418b49 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0xb9>
    }
  418b09:	48 83 c4 18          	add    $0x18,%rsp
  418b0d:	5b                   	pop    %rbx
  418b0e:	5d                   	pop    %rbp
  418b0f:	41 5c                	pop    %r12
  418b11:	41 5d                	pop    %r13
  418b13:	41 5e                	pop    %r14
  418b15:	41 5f                	pop    %r15
  418b17:	c3                   	retq   
      { return &this->_M_impl._M_header; }
  418b18:	48 89 eb             	mov    %rbp,%rbx
  418b1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  if (__j == begin())
  418b20:	49 39 5d 18          	cmp    %rbx,0x18(%r13)
  418b24:	74 23                	je     418b49 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0xb9>
	_M_node = _Rb_tree_decrement(_M_node);
  418b26:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  418b2d:	ff ff ff 
  418b30:	48 89 df             	mov    %rbx,%rdi
  418b33:	4d 89 e7             	mov    %r12,%r15
  418b36:	4c 01 e0             	add    %r12,%rax
  418b39:	ff d0                	callq  *%rax
  418b3b:	49 8b 3e             	mov    (%r14),%rdi
  418b3e:	48 8b 48 20          	mov    0x20(%rax),%rcx
      return _Res(iterator(__res.first), false);
  418b42:	31 d2                	xor    %edx,%edx
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
  418b44:	48 39 cf             	cmp    %rcx,%rdi
  418b47:	76 c0                	jbe    418b09 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x79>
	bool __insert_left = (__x != 0 || __p == _M_end()
  418b49:	48 39 dd             	cmp    %rbx,%rbp
  418b4c:	74 6b                	je     418bb9 <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0x129>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
  418b4e:	48 8b 43 20          	mov    0x20(%rbx),%rax
  418b52:	49 39 06             	cmp    %rax,(%r14)
  418b55:	0f 92 44 24 08       	setb   0x8(%rsp)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  418b5a:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  418b61:	ff ff ff 
  418b64:	4d 89 e7             	mov    %r12,%r15
  418b67:	bf 28 00 00 00       	mov    $0x28,%edi
  418b6c:	4c 01 e0             	add    %r12,%rax
  418b6f:	ff d0                	callq  *%rax
  418b71:	49 8b 16             	mov    (%r14),%rdx
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  418b74:	0f b6 7c 24 08       	movzbl 0x8(%rsp),%edi
  418b79:	49 b8 f0 e3 dd ff ff 	movabs $0xffffffffffdde3f0,%r8
  418b80:	ff ff ff 
  418b83:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  418b88:	48 89 e9             	mov    %rbp,%rcx
  418b8b:	48 89 c6             	mov    %rax,%rsi
  418b8e:	4d 01 e0             	add    %r12,%r8
  418b91:	48 89 50 20          	mov    %rdx,0x20(%rax)
  418b95:	48 89 da             	mov    %rbx,%rdx
  418b98:	41 ff d0             	callq  *%r8
	++_M_impl._M_node_count;
  418b9b:	49 83 45 28 01       	addq   $0x1,0x28(%r13)
		      true);
  418ba0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    }
  418ba5:	48 83 c4 18          	add    $0x18,%rsp
  418ba9:	5b                   	pop    %rbx
		      true);
  418baa:	ba 01 00 00 00       	mov    $0x1,%edx
    }
  418baf:	5d                   	pop    %rbp
  418bb0:	41 5c                	pop    %r12
  418bb2:	41 5d                	pop    %r13
  418bb4:	41 5e                	pop    %r14
  418bb6:	41 5f                	pop    %r15
  418bb8:	c3                   	retq   
	bool __insert_left = (__x != 0 || __p == _M_end()
  418bb9:	c6 44 24 08 01       	movb   $0x1,0x8(%rsp)
  418bbe:	eb 9a                	jmp    418b5a <_ZNSt8_Rb_treeIPN4YAML6detail4nodeES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE16_M_insert_uniqueIS3_EESt4pairISt17_Rb_tree_iteratorIS3_EbEOT_+0xca>

0000000000418bc0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  418bc0:	41 57                	push   %r15
  418bc2:	41 55                	push   %r13
  418bc4:	49 89 fd             	mov    %rdi,%r13
  418bc7:	41 54                	push   %r12
  418bc9:	55                   	push   %rbp
  418bca:	48 8d 2d ef ff ff ff 	lea    -0x11(%rip),%rbp        # 418bc0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv>
  418bd1:	53                   	push   %rbx
  418bd2:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  418bd6:	49 bb 40 24 21 00 00 	movabs $0x212440,%r11
  418bdd:	00 00 00 
  418be0:	4c 01 dd             	add    %r11,%rbp
  418be3:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  418bea:	ff ff ff 
      { ::operator delete(__p); }
  418bed:	49 01 ec             	add    %rbp,%r12
  418bf0:	48 85 ff             	test   %rdi,%rdi
  418bf3:	74 14                	je     418c09 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv+0x49>
  418bf5:	0f 1f 00             	nopl   (%rax)
  418bf8:	48 8b 1f             	mov    (%rdi),%rbx
  418bfb:	49 89 ef             	mov    %rbp,%r15
  418bfe:	41 ff d4             	callq  *%r12
  418c01:	48 85 db             	test   %rbx,%rbx
  418c04:	48 89 df             	mov    %rbx,%rdi
  418c07:	75 ef                	jne    418bf8 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE5clearEv+0x38>
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
  418c09:	49 8b 45 08          	mov    0x8(%r13),%rax
  418c0d:	49 89 ef             	mov    %rbp,%r15
  418c10:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  418c14:	31 f6                	xor    %esi,%esi
  418c16:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  418c1d:	00 
  418c1e:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  418c25:	ff ff ff 
  418c28:	48 01 e8             	add    %rbp,%rax
  418c2b:	ff d0                	callq  *%rax
    }
  418c2d:	5b                   	pop    %rbx
      _M_element_count = 0;
  418c2e:	49 c7 45 18 00 00 00 	movq   $0x0,0x18(%r13)
  418c35:	00 
      _M_before_begin._M_nxt = nullptr;
  418c36:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
  418c3d:	00 
    }
  418c3e:	5d                   	pop    %rbp
  418c3f:	41 5c                	pop    %r12
  418c41:	41 5d                	pop    %r13
  418c43:	41 5f                	pop    %r15
  418c45:	c3                   	retq   
  418c46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418c4d:	00 00 00 

0000000000418c50 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  418c50:	41 57                	push   %r15
  418c52:	41 56                	push   %r14
  418c54:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 418c50 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_>
  418c5b:	41 55                	push   %r13
  418c5d:	41 54                	push   %r12
  418c5f:	49 bb b0 23 21 00 00 	movabs $0x2123b0,%r11
  418c66:	00 00 00 
  418c69:	55                   	push   %rbp
  418c6a:	53                   	push   %rbx
  418c6b:	4d 01 de             	add    %r11,%r14
  418c6e:	49 89 fc             	mov    %rdi,%r12
  418c71:	49 89 d5             	mov    %rdx,%r13
  418c74:	48 83 ec 18          	sub    $0x18,%rsp
	if (!_M_buckets)
  418c78:	48 83 3f 00          	cmpq   $0x0,(%rdi)
	__bucket_type* __buckets = nullptr;
  418c7c:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  418c83:	00 
	if (!_M_buckets)
  418c84:	0f 84 05 01 00 00    	je     418d8f <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x13f>
	    if (!__ht._M_before_begin._M_nxt)
  418c8a:	48 8b 5e 10          	mov    0x10(%rsi),%rbx
  418c8e:	48 85 db             	test   %rbx,%rbx
  418c91:	0f 84 b0 00 00 00    	je     418d47 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xf7>
		    { return __roan(__n->_M_v()); });
  418c97:	49 8b 45 00          	mov    0x0(%r13),%rax
	  if (_M_nodes)
  418c9b:	48 8b 28             	mov    (%rax),%rbp
  418c9e:	48 85 ed             	test   %rbp,%rbp
  418ca1:	0f 84 18 01 00 00    	je     418dbf <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x16f>
	      _M_nodes = _M_nodes->_M_next();
  418ca7:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  418cab:	48 89 10             	mov    %rdx,(%rax)
  418cae:	48 8b 43 08          	mov    0x8(%rbx),%rax
	      __node->_M_nxt = nullptr;
  418cb2:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
  418cb9:	00 
  418cba:	48 89 45 08          	mov    %rax,0x8(%rbp)
  418cbe:	48 8b 43 10          	mov    0x10(%rbx),%rax
    { return __num % __den; }
  418cc2:	31 d2                	xor    %edx,%edx
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  418cc4:	49 8b 34 24          	mov    (%r12),%rsi
      { __to->_M_hash_code = __from->_M_hash_code; }
  418cc8:	48 89 45 10          	mov    %rax,0x10(%rbp)
	    _M_before_begin._M_nxt = __this_n;
  418ccc:	49 89 6c 24 10       	mov    %rbp,0x10(%r12)
    { return __num % __den; }
  418cd1:	49 f7 74 24 08       	divq   0x8(%r12)
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  418cd6:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  418cdb:	48 89 04 d6          	mov    %rax,(%rsi,%rdx,8)
  418cdf:	48 8b 1b             	mov    (%rbx),%rbx
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  418ce2:	48 85 db             	test   %rbx,%rbx
  418ce5:	75 14                	jne    418cfb <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xab>
  418ce7:	eb 5e                	jmp    418d47 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xf7>
  418ce9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  418cf0:	48 8b 1b             	mov    (%rbx),%rbx
  418cf3:	48 89 cd             	mov    %rcx,%rbp
  418cf6:	48 85 db             	test   %rbx,%rbx
  418cf9:	74 4c                	je     418d47 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xf7>
		    { return __roan(__n->_M_v()); });
  418cfb:	49 8b 45 00          	mov    0x0(%r13),%rax
	  if (_M_nodes)
  418cff:	48 8b 08             	mov    (%rax),%rcx
  418d02:	48 85 c9             	test   %rcx,%rcx
  418d05:	74 59                	je     418d60 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x110>
	      _M_nodes = _M_nodes->_M_next();
  418d07:	48 8b 11             	mov    (%rcx),%rdx
  418d0a:	48 89 10             	mov    %rdx,(%rax)
  418d0d:	48 8b 43 08          	mov    0x8(%rbx),%rax
	      __node->_M_nxt = nullptr;
  418d11:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
  418d18:	48 89 41 08          	mov    %rax,0x8(%rcx)
  418d1c:	48 8b 43 10          	mov    0x10(%rbx),%rax
		__prev_n->_M_nxt = __this_n;
  418d20:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
    { return __num % __den; }
  418d24:	31 d2                	xor    %edx,%edx
      { __to->_M_hash_code = __from->_M_hash_code; }
  418d26:	48 89 41 10          	mov    %rax,0x10(%rcx)
    { return __num % __den; }
  418d2a:	49 f7 74 24 08       	divq   0x8(%r12)
		if (!_M_buckets[__bkt])
  418d2f:	48 8d 04 d6          	lea    (%rsi,%rdx,8),%rax
  418d33:	48 83 38 00          	cmpq   $0x0,(%rax)
  418d37:	75 b7                	jne    418cf0 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xa0>
		  _M_buckets[__bkt] = __prev_n;
  418d39:	48 89 28             	mov    %rbp,(%rax)
  418d3c:	48 8b 1b             	mov    (%rbx),%rbx
  418d3f:	48 89 cd             	mov    %rcx,%rbp
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  418d42:	48 85 db             	test   %rbx,%rbx
  418d45:	75 b4                	jne    418cfb <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xab>
      }
  418d47:	48 83 c4 18          	add    $0x18,%rsp
  418d4b:	5b                   	pop    %rbx
  418d4c:	5d                   	pop    %rbp
  418d4d:	41 5c                	pop    %r12
  418d4f:	41 5d                	pop    %r13
  418d51:	41 5e                	pop    %r14
  418d53:	41 5f                	pop    %r15
  418d55:	c3                   	retq   
  418d56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418d5d:	00 00 00 
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  418d60:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  418d67:	ff ff ff 
  418d6a:	bf 18 00 00 00       	mov    $0x18,%edi
  418d6f:	4d 89 f7             	mov    %r14,%r15
  418d72:	4c 01 f0             	add    %r14,%rax
  418d75:	ff d0                	callq  *%rax
  418d77:	48 89 c1             	mov    %rax,%rcx
    _Hash_node_base() noexcept : _M_nxt() { }
  418d7a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  418d81:	48 8b 43 08          	mov    0x8(%rbx),%rax
  418d85:	49 8b 34 24          	mov    (%r12),%rsi
  418d89:	48 89 41 08          	mov    %rax,0x8(%rcx)
  418d8d:	eb 8d                	jmp    418d1c <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0xcc>
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  418d8f:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
	if (__builtin_expect(__n == 1, false))
  418d93:	48 83 ff 01          	cmp    $0x1,%rdi
  418d97:	74 54                	je     418ded <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x19d>
	return __hashtable_alloc::_M_allocate_buckets(__n);
  418d99:	48 b8 f0 2c de ff ff 	movabs $0xffffffffffde2cf0,%rax
  418da0:	ff ff ff 
  418da3:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  418da8:	4c 01 f0             	add    %r14,%rax
  418dab:	ff d0                	callq  *%rax
  418dad:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  418db2:	48 89 04 24          	mov    %rax,(%rsp)
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  418db6:	49 89 04 24          	mov    %rax,(%r12)
  418dba:	e9 cb fe ff ff       	jmpq   418c8a <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x3a>
  418dbf:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  418dc6:	ff ff ff 
  418dc9:	bf 18 00 00 00       	mov    $0x18,%edi
  418dce:	4d 89 f7             	mov    %r14,%r15
  418dd1:	4c 01 f0             	add    %r14,%rax
  418dd4:	ff d0                	callq  *%rax
  418dd6:	48 89 c5             	mov    %rax,%rbp
  418dd9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  418de0:	48 8b 43 08          	mov    0x8(%rbx),%rax
  418de4:	48 89 45 08          	mov    %rax,0x8(%rbp)
  418de8:	e9 d1 fe ff ff       	jmpq   418cbe <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x6e>
	    return &_M_single_bucket;
  418ded:	49 8d 44 24 30       	lea    0x30(%r12),%rax
	    _M_single_bucket = nullptr;
  418df2:	49 c7 44 24 30 00 00 	movq   $0x0,0x30(%r12)
  418df9:	00 00 
	    return &_M_single_bucket;
  418dfb:	48 89 04 24          	mov    %rax,(%rsp)
  418dff:	eb b5                	jmp    418db6 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x166>
	__catch(...)
  418e01:	48 89 c7             	mov    %rax,%rdi
  418e04:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  418e0b:	ff ff ff 
  418e0e:	4d 89 f7             	mov    %r14,%r15
  418e11:	4c 01 f0             	add    %r14,%rax
  418e14:	ff d0                	callq  *%rax
	    clear();
  418e16:	48 b8 c0 db de ff ff 	movabs $0xffffffffffdedbc0,%rax
  418e1d:	ff ff ff 
  418e20:	4c 89 e7             	mov    %r12,%rdi
  418e23:	4c 01 f0             	add    %r14,%rax
  418e26:	ff d0                	callq  *%rax
	    if (__buckets)
  418e28:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  418e2d:	74 1c                	je     418e4b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x1fb>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  418e2f:	49 8b 3c 24          	mov    (%r12),%rdi
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  418e33:	49 83 c4 30          	add    $0x30,%r12
	if (_M_uses_single_bucket(__bkts))
  418e37:	4c 39 e7             	cmp    %r12,%rdi
  418e3a:	74 0f                	je     418e4b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_aSERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE0_EEvSG_RKT_+0x1fb>
      { ::operator delete(__p); }
  418e3c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  418e43:	ff ff ff 
  418e46:	4c 01 f0             	add    %r14,%rax
  418e49:	ff d0                	callq  *%rax
	    __throw_exception_again;
  418e4b:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  418e52:	ff ff ff 
  418e55:	4d 89 f7             	mov    %r14,%r15
  418e58:	4c 01 f0             	add    %r14,%rax
  418e5b:	ff d0                	callq  *%rax
	__catch(...)
  418e5d:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  418e64:	ff ff ff 
  418e67:	48 89 c3             	mov    %rax,%rbx
  418e6a:	4d 89 f7             	mov    %r14,%r15
  418e6d:	4c 01 f2             	add    %r14,%rdx
  418e70:	ff d2                	callq  *%rdx
  418e72:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  418e79:	ff ff ff 
  418e7c:	48 89 df             	mov    %rbx,%rdi
  418e7f:	4c 01 f0             	add    %r14,%rax
  418e82:	ff d0                	callq  *%rax
  418e84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418e8b:	00 00 00 
  418e8e:	66 90                	xchg   %ax,%ax

0000000000418e90 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
  418e90:	41 57                	push   %r15
  418e92:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  418e94:	48 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rcx
  418e9b:	cc cc cc 
  418e9e:	41 55                	push   %r13
  418ea0:	41 54                	push   %r12
  418ea2:	49 bb 70 21 21 00 00 	movabs $0x212170,%r11
  418ea9:	00 00 00 
  418eac:	55                   	push   %rbp
  418ead:	53                   	push   %rbx
  418eae:	48 89 fd             	mov    %rdi,%rbp
  418eb1:	48 8d 1d d8 ff ff ff 	lea    -0x28(%rip),%rbx        # 418e90 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_>
  418eb8:	49 89 f6             	mov    %rsi,%r14
  418ebb:	48 83 ec 18          	sub    $0x18,%rsp
  418ebf:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  418ec3:	48 8b 3f             	mov    (%rdi),%rdi
  418ec6:	4c 01 db             	add    %r11,%rbx
  418ec9:	4c 89 c2             	mov    %r8,%rdx
  418ecc:	48 29 fa             	sub    %rdi,%rdx
  418ecf:	48 89 d0             	mov    %rdx,%rax
  418ed2:	48 c1 f8 02          	sar    $0x2,%rax
  418ed6:	48 0f af c1          	imul   %rcx,%rax
      if (__a < __b)
  418eda:	48 85 c0             	test   %rax,%rax
  418edd:	74 21                	je     418f00 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x70>
  418edf:	48 01 c0             	add    %rax,%rax
  418ee2:	72 13                	jb     418ef7 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  418ee4:	48 b9 cc cc cc cc cc 	movabs $0xccccccccccccccc,%rcx
  418eeb:	cc cc 0c 
  418eee:	48 39 c8             	cmp    %rcx,%rax
  418ef1:	0f 86 e1 00 00 00    	jbe    418fd8 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x148>
  418ef7:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
  418efe:	eb 06                	jmp    418f06 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x76>
  418f00:	41 bd 14 00 00 00    	mov    $0x14,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  418f06:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  418f0d:	ff ff ff 
  418f10:	4c 89 ef             	mov    %r13,%rdi
  418f13:	49 89 df             	mov    %rbx,%r15
  418f16:	48 01 d8             	add    %rbx,%rax
  418f19:	ff d0                	callq  *%rax
  418f1b:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  418f1f:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  418f23:	48 8d 48 14          	lea    0x14(%rax),%rcx
  418f27:	49 89 c4             	mov    %rax,%r12
  418f2a:	49 01 c5             	add    %rax,%r13
  418f2d:	4c 89 c2             	mov    %r8,%rdx
  418f30:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  418f33:	4c 01 e2             	add    %r12,%rdx
  418f36:	74 15                	je     418f4d <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xbd>
  418f38:	49 8b 06             	mov    (%r14),%rax
  418f3b:	48 89 02             	mov    %rax,(%rdx)
  418f3e:	49 8b 46 08          	mov    0x8(%r14),%rax
  418f42:	48 89 42 08          	mov    %rax,0x8(%rdx)
  418f46:	41 8b 46 10          	mov    0x10(%r14),%eax
  418f4a:	89 42 10             	mov    %eax,0x10(%rdx)
  418f4d:	4c 39 c7             	cmp    %r8,%rdi
  418f50:	74 44                	je     418f96 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x106>
  418f52:	48 89 fa             	mov    %rdi,%rdx
  418f55:	4c 89 e1             	mov    %r12,%rcx
  418f58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  418f5f:	00 
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  418f60:	48 85 c9             	test   %rcx,%rcx
  418f63:	74 14                	je     418f79 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xe9>
  418f65:	48 8b 32             	mov    (%rdx),%rsi
  418f68:	48 89 31             	mov    %rsi,(%rcx)
  418f6b:	48 8b 72 08          	mov    0x8(%rdx),%rsi
  418f6f:	48 89 71 08          	mov    %rsi,0x8(%rcx)
  418f73:	8b 72 10             	mov    0x10(%rdx),%esi
  418f76:	89 71 10             	mov    %esi,0x10(%rcx)
  418f79:	48 83 c2 14          	add    $0x14,%rdx
  418f7d:	48 83 c1 14          	add    $0x14,%rcx
  418f81:	4c 39 c2             	cmp    %r8,%rdx
  418f84:	75 da                	jne    418f60 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xd0>
  418f86:	48 8d 47 14          	lea    0x14(%rdi),%rax
  418f8a:	48 29 c2             	sub    %rax,%rdx
  418f8d:	48 c1 ea 02          	shr    $0x2,%rdx
  418f91:	49 8d 4c 94 28       	lea    0x28(%r12,%rdx,4),%rcx
	if (__p)
  418f96:	48 85 ff             	test   %rdi,%rdi
  418f99:	74 1c                	je     418fb7 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x127>
      { ::operator delete(__p); }
  418f9b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  418fa2:	ff ff ff 
  418fa5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  418faa:	49 89 df             	mov    %rbx,%r15
  418fad:	48 01 d8             	add    %rbx,%rax
  418fb0:	ff d0                	callq  *%rax
  418fb2:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
  418fb7:	4c 89 65 00          	mov    %r12,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  418fbb:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  418fbf:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
      }
  418fc3:	48 83 c4 18          	add    $0x18,%rsp
  418fc7:	5b                   	pop    %rbx
  418fc8:	5d                   	pop    %rbp
  418fc9:	41 5c                	pop    %r12
  418fcb:	41 5d                	pop    %r13
  418fcd:	41 5e                	pop    %r14
  418fcf:	41 5f                	pop    %r15
  418fd1:	c3                   	retq   
  418fd2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  418fd8:	48 85 c0             	test   %rax,%rax
  418fdb:	75 10                	jne    418fed <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x15d>
  418fdd:	b9 14 00 00 00       	mov    $0x14,%ecx
  418fe2:	45 31 ed             	xor    %r13d,%r13d
  418fe5:	45 31 e4             	xor    %r12d,%r12d
  418fe8:	e9 46 ff ff ff       	jmpq   418f33 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0xa3>
  418fed:	4c 8d 2c 80          	lea    (%rax,%rax,4),%r13
  418ff1:	49 c1 e5 02          	shl    $0x2,%r13
  418ff5:	e9 0c ff ff ff       	jmpq   418f06 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE19_M_emplace_back_auxIJS4_EEEvDpOT_+0x76>
  418ffa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000419000 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  419000:	48 8d 15 f9 ff ff ff 	lea    -0x7(%rip),%rdx        # 419000 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_>
  419007:	49 bb 00 20 21 00 00 	movabs $0x212000,%r11
  41900e:	00 00 00 
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  419011:	48 8b 47 08          	mov    0x8(%rdi),%rax
  419015:	4c 01 da             	add    %r11,%rdx
  419018:	48 3b 47 10          	cmp    0x10(%rdi),%rax
  41901c:	74 22                	je     419040 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_+0x40>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41901e:	48 85 c0             	test   %rax,%rax
  419021:	74 14                	je     419037 <_ZNSt6vectorIN21libMultiRobotPlanning8NeighborI5State6ActioniEESaIS4_EE12emplace_backIJS4_EEEvDpOT_+0x37>
  419023:	48 8b 16             	mov    (%rsi),%rdx
  419026:	48 89 10             	mov    %rdx,(%rax)
  419029:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  41902d:	48 89 50 08          	mov    %rdx,0x8(%rax)
  419031:	8b 56 10             	mov    0x10(%rsi),%edx
  419034:	89 50 10             	mov    %edx,0x10(%rax)
	    ++this->_M_impl._M_finish;
  419037:	48 83 c0 14          	add    $0x14,%rax
  41903b:	48 89 47 08          	mov    %rax,0x8(%rdi)
  41903f:	c3                   	retq   
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  419040:	48 b8 90 de de ff ff 	movabs $0xffffffffffdede90,%rax
  419047:	ff ff ff 
  41904a:	48 01 d0             	add    %rdx,%rax
  41904d:	ff e0                	jmpq   *%rax
  41904f:	90                   	nop

0000000000419050 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  419050:	4c 63 0e             	movslq (%rsi),%r9
  419053:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx
  419058:	48 63 56 04          	movslq 0x4(%rsi),%rdx
  41905c:	4c 8b 47 08          	mov    0x8(%rdi),%r8
  419060:	49 8d 04 09          	lea    (%r9,%rcx,1),%rax
  419064:	4d 89 ca             	mov    %r9,%r10
  419067:	49 89 d3             	mov    %rdx,%r11
  41906a:	48 01 ca             	add    %rcx,%rdx
  41906d:	49 89 c1             	mov    %rax,%r9
  419070:	49 c1 e1 06          	shl    $0x6,%r9
  419074:	49 01 d1             	add    %rdx,%r9
  419077:	48 89 c2             	mov    %rax,%rdx
  41907a:	48 c1 ea 02          	shr    $0x2,%rdx
  41907e:	49 01 d1             	add    %rdx,%r9
    { return __num % __den; }
  419081:	31 d2                	xor    %edx,%edx
  419083:	49 31 c1             	xor    %rax,%r9
  419086:	4c 89 c8             	mov    %r9,%rax
  419089:	49 f7 f0             	div    %r8
      __node_base* __prev_p = _M_buckets[__n];
  41908c:	48 8b 07             	mov    (%rdi),%rax
  41908f:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
      if (!__prev_p)
  419093:	48 85 c0             	test   %rax,%rax
  419096:	74 49                	je     4190e1 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x91>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  419098:	53                   	push   %rbx
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  419099:	48 8b 08             	mov    (%rax),%rcx
  41909c:	48 89 d3             	mov    %rdx,%rbx
  41909f:	48 8b 71 10          	mov    0x10(%rcx),%rsi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  4190a3:	49 39 f1             	cmp    %rsi,%r9
  4190a6:	74 28                	je     4190d0 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x80>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  4190a8:	48 8b 01             	mov    (%rcx),%rax
  4190ab:	48 85 c0             	test   %rax,%rax
  4190ae:	74 14                	je     4190c4 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x74>
  4190b0:	48 8b 70 10          	mov    0x10(%rax),%rsi
    { return __num % __den; }
  4190b4:	31 d2                	xor    %edx,%edx
  4190b6:	48 89 c1             	mov    %rax,%rcx
  4190b9:	48 89 f0             	mov    %rsi,%rax
  4190bc:	49 f7 f0             	div    %r8
  4190bf:	48 39 d3             	cmp    %rdx,%rbx
  4190c2:	74 df                	je     4190a3 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x53>
      return __p ? const_iterator(__p) : end();
  4190c4:	31 c0                	xor    %eax,%eax
    }
  4190c6:	5b                   	pop    %rbx
  4190c7:	c3                   	retq   
  4190c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4190cf:	00 
  4190d0:	44 3b 51 08          	cmp    0x8(%rcx),%r10d
  4190d4:	75 d2                	jne    4190a8 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x58>
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  4190d6:	44 3b 59 0c          	cmp    0xc(%rcx),%r11d
  4190da:	75 cc                	jne    4190a8 <_ZNKSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE4findERKS0_+0x58>
      : _M_cur(__p) { }
  4190dc:	48 89 c8             	mov    %rcx,%rax
  4190df:	5b                   	pop    %rbx
  4190e0:	c3                   	retq   
      return __p ? const_iterator(__p) : end();
  4190e1:	31 c0                	xor    %eax,%eax
  4190e3:	c3                   	retq   
  4190e4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4190eb:	00 00 00 
  4190ee:	66 90                	xchg   %ax,%ax

00000000004190f0 <_ZNK11Environment10stateValidERK5StatePK11Constraints>:
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
  4190f0:	8b 4e 04             	mov    0x4(%rsi),%ecx
  4190f3:	48 8d 05 f6 ff ff ff 	lea    -0xa(%rip),%rax        # 4190f0 <_ZNK11Environment10stateValidERK5StatePK11Constraints>
  4190fa:	49 bb 10 1f 21 00 00 	movabs $0x211f10,%r11
  419101:	00 00 00 
  419104:	4c 01 d8             	add    %r11,%rax
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  419107:	85 c9                	test   %ecx,%ecx
  419109:	78 14                	js     41911f <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x2f>
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
  41910b:	3b 4f 18             	cmp    0x18(%rdi),%ecx
  41910e:	7d 0f                	jge    41911f <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x2f>
  419110:	44 8b 46 08          	mov    0x8(%rsi),%r8d
  419114:	45 85 c0             	test   %r8d,%r8d
  419117:	78 06                	js     41911f <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x2f>
  419119:	44 3b 47 1c          	cmp    0x1c(%rdi),%r8d
  41911d:	7c 09                	jl     419128 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x38>
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  41911f:	31 c0                	xor    %eax,%eax
  }
  419121:	c3                   	retq   
  419122:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  bool stateValid(const State& s, const Constraints* m_constraints) const{
  419128:	55                   	push   %rbp
  419129:	53                   	push   %rbx
  41912a:	48 89 d5             	mov    %rdx,%rbp
      find(const key_type& __x)
      { return _M_h.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_h.find(__x); }
  41912d:	48 ba 50 e0 de ff ff 	movabs $0xffffffffffdee050,%rdx
  419134:	ff ff ff 
  419137:	48 83 c7 20          	add    $0x20,%rdi
  41913b:	48 89 f3             	mov    %rsi,%rbx
  41913e:	48 83 ec 18          	sub    $0x18,%rsp
  419142:	48 01 d0             	add    %rdx,%rax
  419145:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  419149:	44 89 44 24 0c       	mov    %r8d,0xc(%rsp)
  41914e:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
  419153:	ff d0                	callq  *%rax
    return s.x >= 0 && s.x < m_dimx && s.y >= 0 && s.y < m_dimy &&
  419155:	48 85 c0             	test   %rax,%rax
  419158:	74 0e                	je     419168 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x78>
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  41915a:	31 c0                	xor    %eax,%eax
  }
  41915c:	48 83 c4 18          	add    $0x18,%rsp
  419160:	5b                   	pop    %rbx
  419161:	5d                   	pop    %rbp
  419162:	c3                   	retq   
  419163:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		for (int i = 0; i < vertexConstraints_size; ++i) {
  419168:	8b 95 40 06 00 00    	mov    0x640(%rbp),%edx
           !m_constraints->isIncluded(VertexConstraint(s.time, s.x, s.y));
  41916e:	8b 7b 08             	mov    0x8(%rbx),%edi
  419171:	8b 73 04             	mov    0x4(%rbx),%esi
  419174:	8b 0b                	mov    (%rbx),%ecx
  419176:	85 d2                	test   %edx,%edx
  419178:	7f 11                	jg     41918b <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x9b>
  41917a:	eb 24                	jmp    4191a0 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0xb0>
  41917c:	0f 1f 40 00          	nopl   0x0(%rax)
  419180:	83 c0 01             	add    $0x1,%eax
  419183:	48 83 c5 0c          	add    $0xc,%rbp
  419187:	39 c2                	cmp    %eax,%edx
  419189:	7e 15                	jle    4191a0 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0xb0>
  41918b:	3b 4d 00             	cmp    0x0(%rbp),%ecx
  41918e:	75 f0                	jne    419180 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x90>
  419190:	3b 75 04             	cmp    0x4(%rbp),%esi
  419193:	75 eb                	jne    419180 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x90>
  419195:	3b 7d 08             	cmp    0x8(%rbp),%edi
  419198:	74 c0                	je     41915a <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x6a>
  41919a:	eb e4                	jmp    419180 <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x90>
  41919c:	0f 1f 40 00          	nopl   0x0(%rax)
           m_obstacles.find(Location(s.x, s.y)) == m_obstacles.end() &&
  4191a0:	b8 01 00 00 00       	mov    $0x1,%eax
  4191a5:	eb b5                	jmp    41915c <_ZNK11Environment10stateValidERK5StatePK11Constraints+0x6c>
  4191a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4191ae:	00 00 

00000000004191b0 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints>:
  void getNeighbors(const State& s,
  4191b0:	41 57                	push   %r15
  4191b2:	41 56                	push   %r14
  4191b4:	49 89 d7             	mov    %rdx,%r15
  4191b7:	41 55                	push   %r13
  4191b9:	41 54                	push   %r12
  4191bb:	49 bb 50 1e 21 00 00 	movabs $0x211e50,%r11
  4191c2:	00 00 00 
  4191c5:	55                   	push   %rbp
  4191c6:	53                   	push   %rbx
  4191c7:	48 89 cd             	mov    %rcx,%rbp
  4191ca:	48 8d 1d df ff ff ff 	lea    -0x21(%rip),%rbx        # 4191b0 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints>
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4191d1:	49 be f0 e0 de ff ff 	movabs $0xffffffffffdee0f0,%r14
  4191d8:	ff ff ff 
  void getNeighbors(const State& s,
  4191db:	49 89 f5             	mov    %rsi,%r13
  4191de:	48 83 ec 48          	sub    $0x48,%rsp
	this->_M_impl._M_finish = __pos;
  4191e2:	48 8b 02             	mov    (%rdx),%rax
      State n(s.time + 1, s.x, s.y);
  4191e5:	8b 4e 04             	mov    0x4(%rsi),%ecx
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4191e8:	4c 8d 64 24 14       	lea    0x14(%rsp),%r12
  4191ed:	4c 01 db             	add    %r11,%rbx
  void getNeighbors(const State& s,
  4191f0:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  4191f5:	48 89 42 08          	mov    %rax,0x8(%rdx)
      State n(s.time + 1, s.x, s.y);
  4191f9:	8b 06                	mov    (%rsi),%eax
  4191fb:	8b 56 08             	mov    0x8(%rsi),%edx
  State(int time, int x, int y) : time(time), x(x), y(y) {}
  4191fe:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419202:	4c 89 e6             	mov    %r12,%rsi
      State n(s.time + 1, s.x, s.y);
  419205:	83 c0 01             	add    $0x1,%eax
  419208:	89 44 24 14          	mov    %eax,0x14(%rsp)
  41920c:	89 54 24 1c          	mov    %edx,0x1c(%rsp)
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419210:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  419214:	48 89 ea             	mov    %rbp,%rdx
  419217:	ff d0                	callq  *%rax
  419219:	84 c0                	test   %al,%al
  41921b:	0f 85 ef 00 00 00    	jne    419310 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x160>
      State n(s.time + 1, s.x - 1, s.y);
  419221:	41 8b 7d 00          	mov    0x0(%r13),%edi
  419225:	41 8b 45 04          	mov    0x4(%r13),%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419229:	4c 89 e6             	mov    %r12,%rsi
      State n(s.time + 1, s.x - 1, s.y);
  41922c:	41 8b 4d 08          	mov    0x8(%r13),%ecx
  419230:	8d 57 01             	lea    0x1(%rdi),%edx
  419233:	83 e8 01             	sub    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419236:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41923b:	89 44 24 18          	mov    %eax,0x18(%rsp)
  41923f:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
  419243:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  419247:	89 54 24 14          	mov    %edx,0x14(%rsp)
  41924b:	48 89 ea             	mov    %rbp,%rdx
  41924e:	ff d0                	callq  *%rax
  419250:	84 c0                	test   %al,%al
  419252:	0f 85 48 02 00 00    	jne    4194a0 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x2f0>
      State n(s.time + 1, s.x + 1, s.y);
  419258:	41 8b 75 00          	mov    0x0(%r13),%esi
  41925c:	41 8b 45 04          	mov    0x4(%r13),%eax
  419260:	41 8b 4d 08          	mov    0x8(%r13),%ecx
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419264:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
      State n(s.time + 1, s.x + 1, s.y);
  419269:	8d 56 01             	lea    0x1(%rsi),%edx
  41926c:	83 c0 01             	add    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  41926f:	4c 89 e6             	mov    %r12,%rsi
  419272:	89 44 24 18          	mov    %eax,0x18(%rsp)
  419276:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
  41927a:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41927e:	89 54 24 14          	mov    %edx,0x14(%rsp)
  419282:	48 89 ea             	mov    %rbp,%rdx
  419285:	ff d0                	callq  *%rax
  419287:	84 c0                	test   %al,%al
  419289:	0f 85 b1 01 00 00    	jne    419440 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x290>
      State n(s.time + 1, s.x, s.y + 1);
  41928f:	41 8b 7d 00          	mov    0x0(%r13),%edi
  419293:	41 8b 45 08          	mov    0x8(%r13),%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419297:	4c 89 e6             	mov    %r12,%rsi
      State n(s.time + 1, s.x, s.y + 1);
  41929a:	41 8b 4d 04          	mov    0x4(%r13),%ecx
  41929e:	8d 57 01             	lea    0x1(%rdi),%edx
  4192a1:	83 c0 01             	add    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4192a4:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4192a9:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  4192ad:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
  4192b1:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  4192b5:	89 54 24 14          	mov    %edx,0x14(%rsp)
  4192b9:	48 89 ea             	mov    %rbp,%rdx
  4192bc:	ff d0                	callq  *%rax
  4192be:	84 c0                	test   %al,%al
  4192c0:	0f 85 1a 01 00 00    	jne    4193e0 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x230>
      State n(s.time + 1, s.x, s.y - 1);
  4192c6:	41 8b 75 00          	mov    0x0(%r13),%esi
  4192ca:	41 8b 45 08          	mov    0x8(%r13),%eax
  4192ce:	41 8b 4d 04          	mov    0x4(%r13),%ecx
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4192d2:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
      State n(s.time + 1, s.x, s.y - 1);
  4192d7:	8d 56 01             	lea    0x1(%rsi),%edx
  4192da:	83 e8 01             	sub    $0x1,%eax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4192dd:	4c 89 e6             	mov    %r12,%rsi
  4192e0:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  4192e4:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
  4192e8:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  4192ec:	89 54 24 14          	mov    %edx,0x14(%rsp)
  4192f0:	48 89 ea             	mov    %rbp,%rdx
  4192f3:	ff d0                	callq  *%rax
  4192f5:	84 c0                	test   %al,%al
  4192f7:	75 77                	jne    419370 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x1c0>
  }
  4192f9:	48 83 c4 48          	add    $0x48,%rsp
  4192fd:	5b                   	pop    %rbx
  4192fe:	5d                   	pop    %rbp
  4192ff:	41 5c                	pop    %r12
  419301:	41 5d                	pop    %r13
  419303:	41 5e                	pop    %r14
  419305:	41 5f                	pop    %r15
  419307:	c3                   	retq   
  419308:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41930f:	00 
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419310:	48 b8 30 94 de ff ff 	movabs $0xffffffffffde9430,%rax
  419317:	ff ff ff 
  41931a:	48 89 ea             	mov    %rbp,%rdx
  41931d:	4c 89 e6             	mov    %r12,%rsi
  419320:	48 01 d8             	add    %rbx,%rax
  419323:	4c 89 ef             	mov    %r13,%rdi
  419326:	ff d0                	callq  *%rax
  419328:	84 c0                	test   %al,%al
  41932a:	0f 84 f1 fe ff ff    	je     419221 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x71>
    \tparam Cost Custom Cost type (integer or floating point types)
*/
template <typename State, typename Action, typename Cost>
struct Neighbor {
  Neighbor(const State& state, const Action& action, Cost cost)
      : state(state), action(action), cost(cost) {}
  419330:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419335:	c7 44 24 2c 04 00 00 	movl   $0x4,0x2c(%rsp)
  41933c:	00 
            Neighbor<State, Action, int>(n, Action::Wait, 1));
  41933d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  419342:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  419349:	00 
  41934a:	4c 89 ff             	mov    %r15,%rdi
  41934d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419352:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  419356:	89 44 24 28          	mov    %eax,0x28(%rsp)
  41935a:	48 b8 00 e0 de ff ff 	movabs $0xffffffffffdee000,%rax
  419361:	ff ff ff 
  419364:	48 01 d8             	add    %rbx,%rax
  419367:	ff d0                	callq  *%rax
  419369:	e9 b3 fe ff ff       	jmpq   419221 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x71>
  41936e:	66 90                	xchg   %ax,%ax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419370:	48 b8 30 94 de ff ff 	movabs $0xffffffffffde9430,%rax
  419377:	ff ff ff 
  41937a:	48 89 ea             	mov    %rbp,%rdx
  41937d:	4c 89 e6             	mov    %r12,%rsi
  419380:	48 01 d8             	add    %rbx,%rax
  419383:	4c 89 ef             	mov    %r13,%rdi
  419386:	ff d0                	callq  *%rax
  419388:	84 c0                	test   %al,%al
  41938a:	0f 84 69 ff ff ff    	je     4192f9 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x149>
  419390:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419395:	c7 44 24 2c 01 00 00 	movl   $0x1,0x2c(%rsp)
  41939c:	00 
            Neighbor<State, Action, int>(n, Action::Down, 1));
  41939d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4193a2:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  4193a9:	00 
  4193aa:	4c 89 ff             	mov    %r15,%rdi
  4193ad:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4193b2:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  4193b6:	89 44 24 28          	mov    %eax,0x28(%rsp)
  4193ba:	48 b8 00 e0 de ff ff 	movabs $0xffffffffffdee000,%rax
  4193c1:	ff ff ff 
  4193c4:	48 01 d8             	add    %rbx,%rax
  4193c7:	ff d0                	callq  *%rax
  }
  4193c9:	48 83 c4 48          	add    $0x48,%rsp
  4193cd:	5b                   	pop    %rbx
  4193ce:	5d                   	pop    %rbp
  4193cf:	41 5c                	pop    %r12
  4193d1:	41 5d                	pop    %r13
  4193d3:	41 5e                	pop    %r14
  4193d5:	41 5f                	pop    %r15
  4193d7:	c3                   	retq   
  4193d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4193df:	00 
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4193e0:	48 b8 30 94 de ff ff 	movabs $0xffffffffffde9430,%rax
  4193e7:	ff ff ff 
  4193ea:	48 89 ea             	mov    %rbp,%rdx
  4193ed:	4c 89 e6             	mov    %r12,%rsi
  4193f0:	48 01 d8             	add    %rbx,%rax
  4193f3:	4c 89 ef             	mov    %r13,%rdi
  4193f6:	ff d0                	callq  *%rax
  4193f8:	84 c0                	test   %al,%al
  4193fa:	0f 84 c6 fe ff ff    	je     4192c6 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x116>
  419400:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419405:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%rsp)
  41940c:	00 
        neighbors.emplace_back(Neighbor<State, Action, int>(n, Action::Up, 1));
  41940d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  419412:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  419419:	00 
  41941a:	4c 89 ff             	mov    %r15,%rdi
  41941d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419422:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  419426:	89 44 24 28          	mov    %eax,0x28(%rsp)
  41942a:	48 b8 00 e0 de ff ff 	movabs $0xffffffffffdee000,%rax
  419431:	ff ff ff 
  419434:	48 01 d8             	add    %rbx,%rax
  419437:	ff d0                	callq  *%rax
  419439:	e9 88 fe ff ff       	jmpq   4192c6 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0x116>
  41943e:	66 90                	xchg   %ax,%ax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  419440:	48 b8 30 94 de ff ff 	movabs $0xffffffffffde9430,%rax
  419447:	ff ff ff 
  41944a:	48 89 ea             	mov    %rbp,%rdx
  41944d:	4c 89 e6             	mov    %r12,%rsi
  419450:	48 01 d8             	add    %rbx,%rax
  419453:	4c 89 ef             	mov    %r13,%rdi
  419456:	ff d0                	callq  *%rax
  419458:	84 c0                	test   %al,%al
  41945a:	0f 84 2f fe ff ff    	je     41928f <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xdf>
  419460:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  419465:	c7 44 24 2c 03 00 00 	movl   $0x3,0x2c(%rsp)
  41946c:	00 
            Neighbor<State, Action, int>(n, Action::Right, 1));
  41946d:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  419472:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  419479:	00 
  41947a:	4c 89 ff             	mov    %r15,%rdi
  41947d:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419482:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  419486:	89 44 24 28          	mov    %eax,0x28(%rsp)
  41948a:	48 b8 00 e0 de ff ff 	movabs $0xffffffffffdee000,%rax
  419491:	ff ff ff 
  419494:	48 01 d8             	add    %rbx,%rax
  419497:	ff d0                	callq  *%rax
  419499:	e9 f1 fd ff ff       	jmpq   41928f <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xdf>
  41949e:	66 90                	xchg   %ax,%ax
      if (stateValid(n, m_constraints) && transitionValid(s, n, m_constraints)) {
  4194a0:	48 b8 30 94 de ff ff 	movabs $0xffffffffffde9430,%rax
  4194a7:	ff ff ff 
  4194aa:	48 89 ea             	mov    %rbp,%rdx
  4194ad:	4c 89 e6             	mov    %r12,%rsi
  4194b0:	48 01 d8             	add    %rbx,%rax
  4194b3:	4c 89 ef             	mov    %r13,%rdi
  4194b6:	ff d0                	callq  *%rax
  4194b8:	84 c0                	test   %al,%al
  4194ba:	0f 84 98 fd ff ff    	je     419258 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xa8>
  4194c0:	48 8b 44 24 14       	mov    0x14(%rsp),%rax
  4194c5:	c7 44 24 2c 02 00 00 	movl   $0x2,0x2c(%rsp)
  4194cc:	00 
            Neighbor<State, Action, int>(n, Action::Left, 1));
  4194cd:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  4194d2:	c7 44 24 30 01 00 00 	movl   $0x1,0x30(%rsp)
  4194d9:	00 
  4194da:	4c 89 ff             	mov    %r15,%rdi
  4194dd:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4194e2:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  4194e6:	89 44 24 28          	mov    %eax,0x28(%rsp)
  4194ea:	48 b8 00 e0 de ff ff 	movabs $0xffffffffffdee000,%rax
  4194f1:	ff ff ff 
  4194f4:	48 01 d8             	add    %rbx,%rax
  4194f7:	ff d0                	callq  *%rax
  4194f9:	e9 5a fd ff ff       	jmpq   419258 <_ZNK11Environment12getNeighborsERK5StateRSt6vectorIN21libMultiRobotPlanning8NeighborIS0_6ActioniEESaIS7_EEPK11Constraints+0xa8>
  4194fe:	66 90                	xchg   %ax,%ax

0000000000419500 <_ZN5swarm14memTupleRunnerIFvm9AstarNode7LLNodee19LowLevelEnvironmentEXadL_Z6LL_pllmS1_S2_S3_EEJS1_S2_S3_EEEvmm>:
inline void memTupleRunner(Timestamp ts, uint64_t t0) {
  419500:	41 57                	push   %r15
  419502:	55                   	push   %rbp
  419503:	48 89 f8             	mov    %rdi,%rax
  419506:	53                   	push   %rbx
  419507:	48 89 f5             	mov    %rsi,%rbp
    callFunc(f, ts, *tup, typename gens<sizeof...(Args)>::type());
  41950a:	b9 11 00 00 00       	mov    $0x11,%ecx
  41950f:	48 8d 1d ea ff ff ff 	lea    -0x16(%rip),%rbx        # 419500 <_ZN5swarm14memTupleRunnerIFvm9AstarNode7LLNodee19LowLevelEnvironmentEXadL_Z6LL_pllmS1_S2_S3_EEJS1_S2_S3_EEEvmm>
  419516:	49 bb 00 1b 21 00 00 	movabs $0x211b00,%r11
  41951d:	00 00 00 
inline void memTupleRunner(Timestamp ts, uint64_t t0) {
  419520:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
    callFunc(f, ts, *tup, typename gens<sizeof...(Args)>::type());
  419527:	48 89 e7             	mov    %rsp,%rdi
template<int N, int... S> struct gens : gens<N-1, N-1, S...> {};
template<int...S> struct gens<0, S...>{ typedef seq<S...> type; };

template<typename F, typename FirstArg, typename Tuple, int... S>
inline void callFunc(F f, FirstArg ts, Tuple tup, seq<S...>) {
    f(ts, std::get<S>(tup)...);
  41952a:	48 83 ec 08          	sub    $0x8,%rsp
  41952e:	4c 01 db             	add    %r11,%rbx
  419531:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  419534:	48 89 c7             	mov    %rax,%rdi
  419537:	48 b8 e0 45 de ff ff 	movabs $0xffffffffffde45e0,%rax
  41953e:	ff ff ff 
  419541:	48 01 d8             	add    %rbx,%rax
  419544:	ff 74 24 28          	pushq  0x28(%rsp)
  419548:	ff 74 24 28          	pushq  0x28(%rsp)
  41954c:	ff 74 24 28          	pushq  0x28(%rsp)
  419550:	ff 74 24 28          	pushq  0x28(%rsp)
  419554:	ff 74 24 28          	pushq  0x28(%rsp)
  419558:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41955f:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  419566:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41956d:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  419574:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  41957b:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  419582:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  419589:	ff b4 24 90 00 00 00 	pushq  0x90(%rsp)
  419590:	48 83 ec 20          	sub    $0x20,%rsp
  419594:	48 8b 94 24 f8 00 00 	mov    0xf8(%rsp),%rdx
  41959b:	00 
  41959c:	48 89 14 24          	mov    %rdx,(%rsp)
  4195a0:	48 8b 94 24 00 01 00 	mov    0x100(%rsp),%rdx
  4195a7:	00 
  4195a8:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  4195ad:	48 8b 94 24 08 01 00 	mov    0x108(%rsp),%rdx
  4195b4:	00 
  4195b5:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  4195ba:	8b 94 24 10 01 00 00 	mov    0x110(%rsp),%edx
  4195c1:	89 54 24 18          	mov    %edx,0x18(%rsp)
  4195c5:	ff d0                	callq  *%rax
}
  4195c7:	48 81 c4 20 01 00 00 	add    $0x120,%rsp
    delete tup;
  4195ce:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  4195d5:	ff ff ff 
  4195d8:	48 89 ef             	mov    %rbp,%rdi
  4195db:	48 01 d8             	add    %rbx,%rax
  4195de:	be 88 00 00 00       	mov    $0x88,%esi
}
  4195e3:	5b                   	pop    %rbx
  4195e4:	5d                   	pop    %rbp
  4195e5:	41 5f                	pop    %r15
    delete tup;
  4195e7:	ff e0                	jmpq   *%rax
  4195e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004195f0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
  4195f0:	41 57                	push   %r15
  4195f2:	41 56                	push   %r14
  4195f4:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 4195f0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_>
  4195fb:	41 55                	push   %r13
  4195fd:	41 54                	push   %r12
  4195ff:	49 bb 10 1a 21 00 00 	movabs $0x211a10,%r11
  419606:	00 00 00 
  419609:	55                   	push   %rbp
  41960a:	53                   	push   %rbx
  41960b:	4d 01 de             	add    %r11,%r14
  41960e:	48 89 fd             	mov    %rdi,%rbp
  419611:	48 83 ec 18          	sub    $0x18,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419615:	48 8b 47 08          	mov    0x8(%rdi),%rax
  419619:	48 2b 07             	sub    (%rdi),%rax
  41961c:	48 c1 f8 02          	sar    $0x2,%rax
  419620:	48 85 c0             	test   %rax,%rax
  419623:	74 2b                	je     419650 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x60>
  419625:	48 01 c0             	add    %rax,%rax
  419628:	72 13                	jb     41963d <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x4d>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41962a:	48 ba ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rdx
  419631:	ff ff 3f 
  419634:	48 39 d0             	cmp    %rdx,%rax
  419637:	0f 86 cf 00 00 00    	jbe    41970c <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x11c>
  41963d:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  419644:	eb 10                	jmp    419656 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x66>
  419646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41964d:	00 00 00 
  419650:	41 bd 04 00 00 00    	mov    $0x4,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419656:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41965d:	ff ff ff 
  419660:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  419665:	4c 89 ef             	mov    %r13,%rdi
  419668:	4d 89 f7             	mov    %r14,%r15
  41966b:	4c 01 f0             	add    %r14,%rax
  41966e:	ff d0                	callq  *%rax
  419670:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  419675:	48 89 c3             	mov    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419678:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
  41967c:	4c 8b 65 08          	mov    0x8(%rbp),%r12
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419680:	48 89 da             	mov    %rbx,%rdx
  419683:	8b 36                	mov    (%rsi),%esi
  419685:	49 29 cc             	sub    %rcx,%r12
  419688:	4c 89 e0             	mov    %r12,%rax
  41968b:	48 c1 f8 02          	sar    $0x2,%rax
  41968f:	4c 01 e2             	add    %r12,%rdx
  419692:	74 02                	je     419696 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xa6>
  419694:	89 32                	mov    %esi,(%rdx)
	  if (_Num)
  419696:	48 85 c0             	test   %rax,%rax
  419699:	75 45                	jne    4196e0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xf0>
	if (__p)
  41969b:	48 85 c9             	test   %rcx,%rcx
	    ++__new_finish;
  41969e:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  4196a3:	74 15                	je     4196ba <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xca>
      { ::operator delete(__p); }
  4196a5:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4196ac:	ff ff ff 
  4196af:	48 89 cf             	mov    %rcx,%rdi
  4196b2:	4d 89 f7             	mov    %r14,%r15
  4196b5:	4c 01 f0             	add    %r14,%rax
  4196b8:	ff d0                	callq  *%rax
	this->_M_impl._M_start = __new_start;
  4196ba:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  4196be:	4c 01 eb             	add    %r13,%rbx
	this->_M_impl._M_finish = __new_finish;
  4196c1:	4c 89 65 08          	mov    %r12,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  4196c5:	48 89 5d 10          	mov    %rbx,0x10(%rbp)
      }
  4196c9:	48 83 c4 18          	add    $0x18,%rsp
  4196cd:	5b                   	pop    %rbx
  4196ce:	5d                   	pop    %rbp
  4196cf:	41 5c                	pop    %r12
  4196d1:	41 5d                	pop    %r13
  4196d3:	41 5e                	pop    %r14
  4196d5:	41 5f                	pop    %r15
  4196d7:	c3                   	retq   
  4196d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4196df:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  4196e0:	48 b8 80 e9 dd ff ff 	movabs $0xffffffffffdde980,%rax
  4196e7:	ff ff ff 
  4196ea:	4c 89 e2             	mov    %r12,%rdx
  4196ed:	48 89 ce             	mov    %rcx,%rsi
  4196f0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  4196f5:	48 89 df             	mov    %rbx,%rdi
  4196f8:	4d 89 f7             	mov    %r14,%r15
  4196fb:	4c 01 f0             	add    %r14,%rax
	    ++__new_finish;
  4196fe:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  419703:	ff d0                	callq  *%rax
  419705:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41970a:	eb 99                	jmp    4196a5 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0xb5>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41970c:	45 31 ed             	xor    %r13d,%r13d
  41970f:	31 db                	xor    %ebx,%ebx
  419711:	48 85 c0             	test   %rax,%rax
  419714:	0f 84 5e ff ff ff    	je     419678 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x88>
  41971a:	4c 8d 2c 85 00 00 00 	lea    0x0(,%rax,4),%r13
  419721:	00 
  419722:	e9 2f ff ff ff       	jmpq   419656 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_+0x66>
  419727:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41972e:	00 00 

0000000000419730 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  419730:	55                   	push   %rbp
  419731:	53                   	push   %rbx
  419732:	b9 b9 79 37 9e       	mov    $0x9e3779b9,%ecx
  419737:	48 63 06             	movslq (%rsi),%rax
  41973a:	4c 63 46 04          	movslq 0x4(%rsi),%r8
  41973e:	4c 8b 4f 08          	mov    0x8(%rdi),%r9
  419742:	49 89 c2             	mov    %rax,%r10
  419745:	48 01 c8             	add    %rcx,%rax
  419748:	4d 89 c3             	mov    %r8,%r11
  41974b:	48 89 c2             	mov    %rax,%rdx
  41974e:	49 01 c8             	add    %rcx,%r8
  419751:	48 c1 e2 06          	shl    $0x6,%rdx
  419755:	4c 01 c2             	add    %r8,%rdx
  419758:	49 89 c0             	mov    %rax,%r8
  41975b:	49 c1 e8 02          	shr    $0x2,%r8
  41975f:	49 01 d0             	add    %rdx,%r8
  419762:	4c 31 c0             	xor    %r8,%rax
  419765:	4c 63 46 08          	movslq 0x8(%rsi),%r8
  419769:	48 89 c2             	mov    %rax,%rdx
  41976c:	48 c1 e2 06          	shl    $0x6,%rdx
  419770:	4c 89 c3             	mov    %r8,%rbx
  419773:	49 01 c8             	add    %rcx,%r8
  419776:	49 01 d0             	add    %rdx,%r8
  419779:	48 89 c2             	mov    %rax,%rdx
  41977c:	48 c1 ea 02          	shr    $0x2,%rdx
  419780:	49 01 d0             	add    %rdx,%r8
    { return __num % __den; }
  419783:	31 d2                	xor    %edx,%edx
  419785:	49 31 c0             	xor    %rax,%r8
  419788:	4c 89 c0             	mov    %r8,%rax
  41978b:	49 f7 f1             	div    %r9
      __node_base* __prev_p = _M_buckets[__n];
  41978e:	48 8b 07             	mov    (%rdi),%rax
  419791:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
      if (!__prev_p)
  419795:	48 85 c0             	test   %rax,%rax
  419798:	74 2b                	je     4197c5 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x95>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  41979a:	48 8b 08             	mov    (%rax),%rcx
  41979d:	48 89 d5             	mov    %rdx,%rbp
  4197a0:	48 8b 71 30          	mov    0x30(%rcx),%rsi
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  4197a4:	4c 39 c6             	cmp    %r8,%rsi
  4197a7:	74 27                	je     4197d0 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0xa0>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  4197a9:	48 8b 01             	mov    (%rcx),%rax
  4197ac:	48 85 c0             	test   %rax,%rax
  4197af:	74 14                	je     4197c5 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x95>
  4197b1:	48 8b 70 30          	mov    0x30(%rax),%rsi
    { return __num % __den; }
  4197b5:	31 d2                	xor    %edx,%edx
  4197b7:	48 89 c1             	mov    %rax,%rcx
  4197ba:	48 89 f0             	mov    %rsi,%rax
  4197bd:	49 f7 f1             	div    %r9
  4197c0:	48 39 d5             	cmp    %rdx,%rbp
  4197c3:	74 df                	je     4197a4 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x74>
      return __p ? iterator(__p) : end();
  4197c5:	31 c0                	xor    %eax,%eax
    }
  4197c7:	5b                   	pop    %rbx
  4197c8:	5d                   	pop    %rbp
  4197c9:	c3                   	retq   
  4197ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    return time == s.time && x == s.x && y == s.y;
  4197d0:	44 3b 51 08          	cmp    0x8(%rcx),%r10d
  4197d4:	75 d3                	jne    4197a9 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x79>
  4197d6:	44 3b 59 0c          	cmp    0xc(%rcx),%r11d
  4197da:	75 cd                	jne    4197a9 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x79>
  4197dc:	3b 59 10             	cmp    0x10(%rcx),%ebx
  4197df:	75 c8                	jne    4197a9 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE4findERS2_+0x79>
      : _M_cur(__p) { }
  4197e1:	48 89 c8             	mov    %rcx,%rax
  4197e4:	5b                   	pop    %rbx
  4197e5:	5d                   	pop    %rbp
  4197e6:	c3                   	retq   
  4197e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4197ee:	00 00 

00000000004197f0 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  4197f0:	41 57                	push   %r15
  4197f2:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  4197f4:	48 b9 b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rcx
  4197fb:	db b6 6d 
  4197fe:	41 55                	push   %r13
  419800:	41 54                	push   %r12
  419802:	49 bb 10 18 21 00 00 	movabs $0x211810,%r11
  419809:	00 00 00 
  41980c:	55                   	push   %rbp
  41980d:	53                   	push   %rbx
  41980e:	48 89 fd             	mov    %rdi,%rbp
  419811:	48 8d 1d d8 ff ff ff 	lea    -0x28(%rip),%rbx        # 4197f0 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>
  419818:	49 89 f6             	mov    %rsi,%r14
  41981b:	48 83 ec 18          	sub    $0x18,%rsp
  41981f:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  419823:	48 8b 3f             	mov    (%rdi),%rdi
  419826:	4c 01 db             	add    %r11,%rbx
  419829:	4c 89 c0             	mov    %r8,%rax
  41982c:	48 29 f8             	sub    %rdi,%rax
  41982f:	48 89 c2             	mov    %rax,%rdx
  419832:	48 c1 fa 02          	sar    $0x2,%rdx
  419836:	48 0f af d1          	imul   %rcx,%rdx
      if (__a < __b)
  41983a:	48 85 d2             	test   %rdx,%rdx
  41983d:	74 21                	je     419860 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x70>
  41983f:	48 01 d2             	add    %rdx,%rdx
  419842:	72 13                	jb     419857 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  419844:	48 b9 24 49 92 24 49 	movabs $0x924924924924924,%rcx
  41984b:	92 24 09 
  41984e:	48 39 ca             	cmp    %rcx,%rdx
  419851:	0f 86 19 01 00 00    	jbe    419970 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x180>
  419857:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
  41985e:	eb 06                	jmp    419866 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  419860:	41 bd 1c 00 00 00    	mov    $0x1c,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419866:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41986d:	ff ff ff 
  419870:	4c 89 ef             	mov    %r13,%rdi
  419873:	49 89 df             	mov    %rbx,%r15
  419876:	48 01 d8             	add    %rbx,%rax
  419879:	ff d0                	callq  *%rax
  41987b:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  41987f:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  419883:	49 89 c4             	mov    %rax,%r12
  419886:	49 01 c5             	add    %rax,%r13
  419889:	49 8d 54 24 1c       	lea    0x1c(%r12),%rdx
  41988e:	4c 89 c0             	mov    %r8,%rax
  419891:	48 29 f8             	sub    %rdi,%rax
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419894:	4c 01 e0             	add    %r12,%rax
  419897:	74 1d                	je     4198b6 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xc6>
  419899:	49 8b 0e             	mov    (%r14),%rcx
  41989c:	48 89 08             	mov    %rcx,(%rax)
  41989f:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  4198a3:	48 89 48 08          	mov    %rcx,0x8(%rax)
  4198a7:	49 8b 4e 10          	mov    0x10(%r14),%rcx
  4198ab:	48 89 48 10          	mov    %rcx,0x10(%rax)
  4198af:	41 8b 4e 18          	mov    0x18(%r14),%ecx
  4198b3:	89 48 18             	mov    %ecx,0x18(%rax)
  4198b6:	4c 39 c7             	cmp    %r8,%rdi
  4198b9:	74 75                	je     419930 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x140>
  4198bb:	48 89 fa             	mov    %rdi,%rdx
  4198be:	4c 89 e1             	mov    %r12,%rcx
  4198c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4198c8:	48 85 c9             	test   %rcx,%rcx
  4198cb:	74 1c                	je     4198e9 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xf9>
  4198cd:	48 8b 02             	mov    (%rdx),%rax
  4198d0:	48 89 01             	mov    %rax,(%rcx)
  4198d3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4198d7:	48 89 41 08          	mov    %rax,0x8(%rcx)
  4198db:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  4198df:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  4198e3:	8b 72 18             	mov    0x18(%rdx),%esi
  4198e6:	89 71 18             	mov    %esi,0x18(%rcx)
  4198e9:	48 83 c2 1c          	add    $0x1c,%rdx
  4198ed:	48 83 c1 1c          	add    $0x1c,%rcx
  4198f1:	4c 39 c2             	cmp    %r8,%rdx
  4198f4:	75 d2                	jne    4198c8 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xd8>
  4198f6:	48 8d 47 1c          	lea    0x1c(%rdi),%rax
  4198fa:	48 29 c2             	sub    %rax,%rdx
  4198fd:	48 b8 b7 6d db b6 6d 	movabs $0x2db6db6db6db6db7,%rax
  419904:	db b6 2d 
  419907:	48 c1 ea 02          	shr    $0x2,%rdx
  41990b:	48 0f af d0          	imul   %rax,%rdx
  41990f:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
  419916:	ff ff 3f 
  419919:	48 21 c2             	and    %rax,%rdx
  41991c:	48 83 c2 01          	add    $0x1,%rdx
  419920:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  419927:	00 
  419928:	48 29 d0             	sub    %rdx,%rax
  41992b:	49 8d 54 84 1c       	lea    0x1c(%r12,%rax,4),%rdx
	if (__p)
  419930:	48 85 ff             	test   %rdi,%rdi
  419933:	74 1c                	je     419951 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x161>
      { ::operator delete(__p); }
  419935:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41993c:	ff ff ff 
  41993f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  419944:	49 89 df             	mov    %rbx,%r15
  419947:	48 01 d8             	add    %rbx,%rax
  41994a:	ff d0                	callq  *%rax
  41994c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	this->_M_impl._M_start = __new_start;
  419951:	4c 89 65 00          	mov    %r12,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  419955:	48 89 55 08          	mov    %rdx,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  419959:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
      }
  41995d:	48 83 c4 18          	add    $0x18,%rsp
  419961:	5b                   	pop    %rbx
  419962:	5d                   	pop    %rbp
  419963:	41 5c                	pop    %r12
  419965:	41 5d                	pop    %r13
  419967:	41 5e                	pop    %r14
  419969:	41 5f                	pop    %r15
  41996b:	c3                   	retq   
  41996c:	0f 1f 40 00          	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  419970:	48 85 d2             	test   %rdx,%rdx
  419973:	75 10                	jne    419985 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x195>
  419975:	ba 1c 00 00 00       	mov    $0x1c,%edx
  41997a:	45 31 ed             	xor    %r13d,%r13d
  41997d:	45 31 e4             	xor    %r12d,%r12d
  419980:	e9 0f ff ff ff       	jmpq   419894 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xa4>
  419985:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  41998c:	00 
  41998d:	49 29 d5             	sub    %rdx,%r13
  419990:	49 c1 e5 02          	shl    $0x2,%r13
  419994:	e9 cd fe ff ff       	jmpq   419866 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  419999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004199a0 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  4199a0:	41 57                	push   %r15
  4199a2:	41 56                	push   %r14
  4199a4:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 4199a0 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
  4199ab:	41 55                	push   %r13
  4199ad:	41 54                	push   %r12
  4199af:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4199b6:	ff ff ff 
  4199b9:	55                   	push   %rbp
  4199ba:	53                   	push   %rbx
  4199bb:	49 bb 60 16 21 00 00 	movabs $0x211660,%r11
  4199c2:	00 00 00 
  4199c5:	4d 01 df             	add    %r11,%r15
  4199c8:	48 83 ec 58          	sub    $0x58,%rsp
      while (__x != 0)
  4199cc:	48 85 f6             	test   %rsi,%rsi
  4199cf:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  4199d4:	48 b8 a0 e9 de ff ff 	movabs $0xffffffffffdee9a0,%rax
  4199db:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  4199de:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
	  _M_erase(_S_right(__x));
  4199e3:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
      while (__x != 0)
  4199e7:	0f 84 d3 01 00 00    	je     419bc0 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x220>
  4199ed:	49 89 fd             	mov    %rdi,%r13
  4199f0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  4199f5:	48 8b 40 18          	mov    0x18(%rax),%rax
  4199f9:	48 85 c0             	test   %rax,%rax
  4199fc:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  419a01:	0f 84 95 01 00 00    	je     419b9c <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1fc>
  419a07:	48 8b 40 18          	mov    0x18(%rax),%rax
  419a0b:	48 85 c0             	test   %rax,%rax
  419a0e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  419a13:	0f 84 5c 01 00 00    	je     419b75 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1d5>
  419a19:	48 8b 40 18          	mov    0x18(%rax),%rax
  419a1d:	48 85 c0             	test   %rax,%rax
  419a20:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  419a25:	0f 84 23 01 00 00    	je     419b4e <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1ae>
  419a2b:	48 8b 40 18          	mov    0x18(%rax),%rax
  419a2f:	48 85 c0             	test   %rax,%rax
  419a32:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  419a37:	0f 84 ea 00 00 00    	je     419b27 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x187>
  419a3d:	48 8b 40 18          	mov    0x18(%rax),%rax
  419a41:	48 85 c0             	test   %rax,%rax
  419a44:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  419a49:	0f 84 b1 00 00 00    	je     419b00 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x160>
  419a4f:	48 8b 40 18          	mov    0x18(%rax),%rax
  419a53:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  419a58:	48 85 c0             	test   %rax,%rax
  419a5b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  419a60:	4a 8d 2c 3a          	lea    (%rdx,%r15,1),%rbp
  419a64:	74 73                	je     419ad9 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x139>
  419a66:	48 8b 40 18          	mov    0x18(%rax),%rax
  419a6a:	48 85 c0             	test   %rax,%rax
  419a6d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  419a72:	74 4a                	je     419abe <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x11e>
  419a74:	0f 1f 40 00          	nopl   0x0(%rax)
  419a78:	4c 8b 70 18          	mov    0x18(%rax),%r14
  419a7c:	4d 85 f6             	test   %r14,%r14
  419a7f:	74 27                	je     419aa8 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x108>
  419a81:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  419a88:	49 8b 76 18          	mov    0x18(%r14),%rsi
  419a8c:	4c 89 ef             	mov    %r13,%rdi
  419a8f:	41 ff d4             	callq  *%r12
  419a92:	49 8b 5e 10          	mov    0x10(%r14),%rbx
  419a96:	4c 89 f7             	mov    %r14,%rdi
  419a99:	ff d5                	callq  *%rbp
      while (__x != 0)
  419a9b:	48 85 db             	test   %rbx,%rbx
  419a9e:	49 89 de             	mov    %rbx,%r14
  419aa1:	75 e5                	jne    419a88 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xe8>
  419aa3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  419aa8:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419aac:	48 89 c7             	mov    %rax,%rdi
  419aaf:	ff d5                	callq  *%rbp
  419ab1:	48 85 db             	test   %rbx,%rbx
  419ab4:	48 89 d8             	mov    %rbx,%rax
  419ab7:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  419abc:	75 ba                	jne    419a78 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xd8>
  419abe:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  419ac3:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419ac7:	48 89 c7             	mov    %rax,%rdi
  419aca:	ff d5                	callq  *%rbp
  419acc:	48 85 db             	test   %rbx,%rbx
  419acf:	48 89 d8             	mov    %rbx,%rax
  419ad2:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  419ad7:	75 8d                	jne    419a66 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xc6>
  419ad9:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  419ade:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419ae2:	48 89 c7             	mov    %rax,%rdi
  419ae5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419aea:	4c 01 f8             	add    %r15,%rax
  419aed:	ff d0                	callq  *%rax
  419aef:	48 85 db             	test   %rbx,%rbx
  419af2:	48 89 d8             	mov    %rbx,%rax
  419af5:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  419afa:	0f 85 4f ff ff ff    	jne    419a4f <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xaf>
  419b00:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  419b05:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419b09:	48 89 c7             	mov    %rax,%rdi
  419b0c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419b11:	4c 01 f8             	add    %r15,%rax
  419b14:	ff d0                	callq  *%rax
  419b16:	48 85 db             	test   %rbx,%rbx
  419b19:	48 89 d8             	mov    %rbx,%rax
  419b1c:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  419b21:	0f 85 16 ff ff ff    	jne    419a3d <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x9d>
  419b27:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  419b2c:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419b30:	48 89 c7             	mov    %rax,%rdi
  419b33:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419b38:	4c 01 f8             	add    %r15,%rax
  419b3b:	ff d0                	callq  *%rax
  419b3d:	48 85 db             	test   %rbx,%rbx
  419b40:	48 89 d8             	mov    %rbx,%rax
  419b43:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  419b48:	0f 85 dd fe ff ff    	jne    419a2b <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x8b>
  419b4e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  419b53:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419b57:	48 89 c7             	mov    %rax,%rdi
  419b5a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419b5f:	4c 01 f8             	add    %r15,%rax
  419b62:	ff d0                	callq  *%rax
  419b64:	48 85 db             	test   %rbx,%rbx
  419b67:	48 89 d8             	mov    %rbx,%rax
  419b6a:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  419b6f:	0f 85 a4 fe ff ff    	jne    419a19 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x79>
  419b75:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  419b7a:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419b7e:	48 89 c7             	mov    %rax,%rdi
  419b81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419b86:	4c 01 f8             	add    %r15,%rax
  419b89:	ff d0                	callq  *%rax
  419b8b:	48 85 db             	test   %rbx,%rbx
  419b8e:	48 89 d8             	mov    %rbx,%rax
  419b91:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  419b96:	0f 85 6b fe ff ff    	jne    419a07 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x67>
  419b9c:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  419ba1:	48 8b 58 10          	mov    0x10(%rax),%rbx
  419ba5:	48 89 c7             	mov    %rax,%rdi
  419ba8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  419bad:	4c 01 f8             	add    %r15,%rax
  419bb0:	ff d0                	callq  *%rax
  419bb2:	48 85 db             	test   %rbx,%rbx
  419bb5:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  419bba:	0f 85 30 fe ff ff    	jne    4199f0 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x50>
    }
  419bc0:	48 83 c4 58          	add    $0x58,%rsp
  419bc4:	5b                   	pop    %rbx
  419bc5:	5d                   	pop    %rbp
  419bc6:	41 5c                	pop    %r12
  419bc8:	41 5d                	pop    %r13
  419bca:	41 5e                	pop    %r14
  419bcc:	41 5f                	pop    %r15
  419bce:	c3                   	retq   
  419bcf:	90                   	nop

0000000000419bd0 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE>:
    basic_command_line_parser<charT>::extra_parser(ext_parser ext)
  419bd0:	41 57                	push   %r15
  419bd2:	41 54                	push   %r12
  419bd4:	49 bb 30 14 21 00 00 	movabs $0x211430,%r11
  419bdb:	00 00 00 
  419bde:	55                   	push   %rbp
  419bdf:	53                   	push   %rbx
  419be0:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 419bd0 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE>
  419be7:	49 89 fc             	mov    %rdi,%r12
  419bea:	48 83 ec 28          	sub    $0x28,%rsp
  419bee:	48 8b 06             	mov    (%rsi),%rax
  419bf1:	4c 01 db             	add    %r11,%rbx
  419bf4:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  419bfb:	00 
#endif

  private:
    void assign_to_own(const BOOST_FUNCTION_FUNCTION& f)
    {
      if (!f.empty()) {
  419bfc:	48 85 c0             	test   %rax,%rax
  419bff:	74 23                	je     419c24 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x54>
        this->vtable = f.vtable;
        if (this->has_trivial_copy_and_destroy())
  419c01:	a8 01                	test   $0x1,%al
        this->vtable = f.vtable;
  419c03:	48 89 04 24          	mov    %rax,(%rsp)
        if (this->has_trivial_copy_and_destroy())
  419c07:	74 6f                	je     419c78 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xa8>
          this->functor = f.functor;
  419c09:	48 8b 46 08          	mov    0x8(%rsi),%rax
  419c0d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  419c12:	48 8b 46 10          	mov    0x10(%rsi),%rax
  419c16:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  419c1b:	48 8b 46 18          	mov    0x18(%rsi),%rax
  419c1f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  419c24:	48 89 e5             	mov    %rsp,%rbp
        detail::cmdline::set_additional_parser(ext);
  419c27:	48 b8 10 ea dd ff ff 	movabs $0xffffffffffddea10,%rax
  419c2e:	ff ff ff 
  419c31:	48 89 ee             	mov    %rbp,%rsi
  419c34:	4c 89 e7             	mov    %r12,%rdi
  419c37:	49 89 df             	mov    %rbx,%r15
  419c3a:	48 01 d8             	add    %rbx,%rax
  419c3d:	ff d0                	callq  *%rax
      if (vtable) {
  419c3f:	48 8b 04 24          	mov    (%rsp),%rax
  419c43:	48 85 c0             	test   %rax,%rax
  419c46:	74 1e                	je     419c66 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x96>
        if (!this->has_trivial_copy_and_destroy())
  419c48:	a8 01                	test   $0x1,%al
  419c4a:	75 1a                	jne    419c66 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x96>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  419c4c:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  419c50:	48 8b 00             	mov    (%rax),%rax
          if (base.manager)
  419c53:	48 85 c0             	test   %rax,%rax
  419c56:	74 0e                	je     419c66 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x96>
            base.manager(functor, functor, destroy_functor_tag);
  419c58:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
  419c5c:	ba 02 00 00 00       	mov    $0x2,%edx
  419c61:	48 89 fe             	mov    %rdi,%rsi
  419c64:	ff d0                	callq  *%rax
    }
  419c66:	48 83 c4 28          	add    $0x28,%rsp
  419c6a:	4c 89 e0             	mov    %r12,%rax
  419c6d:	5b                   	pop    %rbx
  419c6e:	5d                   	pop    %rbp
  419c6f:	41 5c                	pop    %r12
  419c71:	41 5f                	pop    %r15
  419c73:	c3                   	retq   
  419c74:	0f 1f 40 00          	nopl   0x0(%rax)
        else
          get_vtable()->base.manager(f.functor, this->functor,
  419c78:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  419c7d:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
          get_vtable()->base.manager(f.functor, this->functor,
  419c81:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
  419c85:	48 89 e5             	mov    %rsp,%rbp
  419c88:	31 d2                	xor    %edx,%edx
  419c8a:	48 89 ce             	mov    %rcx,%rsi
  419c8d:	ff 10                	callq  *(%rax)
  419c8f:	eb 96                	jmp    419c27 <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0x57>
      if (vtable) {
  419c91:	48 8b 14 24          	mov    (%rsp),%rdx
  419c95:	49 89 c4             	mov    %rax,%r12
  419c98:	48 85 d2             	test   %rdx,%rdx
  419c9b:	74 1f                	je     419cbc <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xec>
        if (!this->has_trivial_copy_and_destroy())
  419c9d:	f6 c2 01             	test   $0x1,%dl
  419ca0:	75 1a                	jne    419cbc <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xec>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  419ca2:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
  419ca6:	48 8b 0a             	mov    (%rdx),%rcx
          if (base.manager)
  419ca9:	48 85 c9             	test   %rcx,%rcx
  419cac:	74 0e                	je     419cbc <_ZN5boost15program_options25basic_command_line_parserIcE12extra_parserENS_9function1ISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ERKSA_EE+0xec>
            base.manager(functor, functor, destroy_functor_tag);
  419cae:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
  419cb2:	ba 02 00 00 00       	mov    $0x2,%edx
  419cb7:	48 89 fe             	mov    %rdi,%rsi
  419cba:	ff d1                	callq  *%rcx
  419cbc:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  419cc3:	ff ff ff 
  419cc6:	4c 89 e7             	mov    %r12,%rdi
  419cc9:	49 89 df             	mov    %rbx,%r15
  419ccc:	48 01 d8             	add    %rbx,%rax
  419ccf:	ff d0                	callq  *%rax
  419cd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  419cd8:	00 00 00 
  419cdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000419ce0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  419ce0:	41 57                	push   %r15
  419ce2:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419ce4:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
  419ceb:	aa aa aa 
  419cee:	41 55                	push   %r13
  419cf0:	41 54                	push   %r12
  419cf2:	49 bb 20 13 21 00 00 	movabs $0x211320,%r11
  419cf9:	00 00 00 
  419cfc:	55                   	push   %rbp
  419cfd:	53                   	push   %rbx
  419cfe:	48 89 fb             	mov    %rdi,%rbx
  419d01:	48 8d 2d d8 ff ff ff 	lea    -0x28(%rip),%rbp        # 419ce0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>
  419d08:	49 89 f6             	mov    %rsi,%r14
  419d0b:	48 83 ec 18          	sub    $0x18,%rsp
  419d0f:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  419d13:	48 8b 3f             	mov    (%rdi),%rdi
  419d16:	4c 01 dd             	add    %r11,%rbp
  419d19:	4c 89 c2             	mov    %r8,%rdx
  419d1c:	48 29 fa             	sub    %rdi,%rdx
  419d1f:	48 89 d0             	mov    %rdx,%rax
  419d22:	48 c1 f8 02          	sar    $0x2,%rax
  419d26:	48 0f af c1          	imul   %rcx,%rax
  419d2a:	48 85 c0             	test   %rax,%rax
  419d2d:	74 21                	je     419d50 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x70>
  419d2f:	48 01 c0             	add    %rax,%rax
  419d32:	72 13                	jb     419d47 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  419d34:	48 b9 55 55 55 55 55 	movabs $0x1555555555555555,%rcx
  419d3b:	55 55 15 
  419d3e:	48 39 c8             	cmp    %rcx,%rax
  419d41:	0f 86 c9 00 00 00    	jbe    419e10 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x130>
  419d47:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  419d4e:	eb 06                	jmp    419d56 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  419d50:	41 bd 0c 00 00 00    	mov    $0xc,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419d56:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  419d5d:	ff ff ff 
  419d60:	4c 89 ef             	mov    %r13,%rdi
  419d63:	49 89 ef             	mov    %rbp,%r15
  419d66:	48 01 e8             	add    %rbp,%rax
  419d69:	ff d0                	callq  *%rax
  419d6b:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  419d6f:	48 8b 3b             	mov    (%rbx),%rdi
  419d72:	48 8d 48 0c          	lea    0xc(%rax),%rcx
  419d76:	49 89 c4             	mov    %rax,%r12
  419d79:	49 01 c5             	add    %rax,%r13
  419d7c:	4c 89 c2             	mov    %r8,%rdx
  419d7f:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419d82:	4c 01 e2             	add    %r12,%rdx
  419d85:	74 0d                	je     419d94 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xb4>
  419d87:	49 8b 06             	mov    (%r14),%rax
  419d8a:	48 89 02             	mov    %rax,(%rdx)
  419d8d:	41 8b 46 08          	mov    0x8(%r14),%eax
  419d91:	89 42 08             	mov    %eax,0x8(%rdx)
  419d94:	4c 39 c7             	cmp    %r8,%rdi
  419d97:	74 35                	je     419dce <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xee>
  419d99:	48 89 fa             	mov    %rdi,%rdx
  419d9c:	4c 89 e1             	mov    %r12,%rcx
  419d9f:	90                   	nop
  419da0:	48 85 c9             	test   %rcx,%rcx
  419da3:	74 0c                	je     419db1 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xd1>
  419da5:	48 8b 32             	mov    (%rdx),%rsi
  419da8:	48 89 31             	mov    %rsi,(%rcx)
  419dab:	8b 72 08             	mov    0x8(%rdx),%esi
  419dae:	89 71 08             	mov    %esi,0x8(%rcx)
  419db1:	48 83 c2 0c          	add    $0xc,%rdx
  419db5:	48 83 c1 0c          	add    $0xc,%rcx
  419db9:	4c 39 c2             	cmp    %r8,%rdx
  419dbc:	75 e2                	jne    419da0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xc0>
  419dbe:	48 8d 47 0c          	lea    0xc(%rdi),%rax
  419dc2:	48 29 c2             	sub    %rax,%rdx
  419dc5:	48 c1 ea 02          	shr    $0x2,%rdx
  419dc9:	49 8d 4c 94 18       	lea    0x18(%r12,%rdx,4),%rcx
	if (__p)
  419dce:	48 85 ff             	test   %rdi,%rdi
  419dd1:	74 1c                	je     419def <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x10f>
      { ::operator delete(__p); }
  419dd3:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  419dda:	ff ff ff 
  419ddd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  419de2:	49 89 ef             	mov    %rbp,%r15
  419de5:	48 01 e8             	add    %rbp,%rax
  419de8:	ff d0                	callq  *%rax
  419dea:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_start = __new_start;
  419def:	4c 89 23             	mov    %r12,(%rbx)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  419df2:	4c 89 6b 10          	mov    %r13,0x10(%rbx)
	this->_M_impl._M_finish = __new_finish;
  419df6:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
      }
  419dfa:	48 83 c4 18          	add    $0x18,%rsp
  419dfe:	5b                   	pop    %rbx
  419dff:	5d                   	pop    %rbp
  419e00:	41 5c                	pop    %r12
  419e02:	41 5d                	pop    %r13
  419e04:	41 5e                	pop    %r14
  419e06:	41 5f                	pop    %r15
  419e08:	c3                   	retq   
  419e09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  419e10:	48 85 c0             	test   %rax,%rax
  419e13:	75 10                	jne    419e25 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x145>
  419e15:	b9 0c 00 00 00       	mov    $0xc,%ecx
  419e1a:	45 31 ed             	xor    %r13d,%r13d
  419e1d:	45 31 e4             	xor    %r12d,%r12d
  419e20:	e9 5d ff ff ff       	jmpq   419d82 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xa2>
  419e25:	4c 8d 2c 40          	lea    (%rax,%rax,2),%r13
  419e29:	49 c1 e5 02          	shl    $0x2,%r13
  419e2d:	e9 24 ff ff ff       	jmpq   419d56 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  419e32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  419e39:	00 00 00 
  419e3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000419e40 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  419e40:	41 57                	push   %r15
  419e42:	41 56                	push   %r14
  419e44:	49 bb c0 11 21 00 00 	movabs $0x2111c0,%r11
  419e4b:	00 00 00 
  419e4e:	41 55                	push   %r13
  419e50:	41 54                	push   %r12
  419e52:	49 89 fc             	mov    %rdi,%r12
  419e55:	55                   	push   %rbp
  419e56:	53                   	push   %rbx
  419e57:	48 8d 2d e2 ff ff ff 	lea    -0x1e(%rip),%rbp        # 419e40 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>
  419e5e:	49 89 f6             	mov    %rsi,%r14
  419e61:	48 83 ec 18          	sub    $0x18,%rsp
  419e65:	4d 8b 44 24 08       	mov    0x8(%r12),%r8
  419e6a:	48 8b 3f             	mov    (%rdi),%rdi
  419e6d:	4c 01 dd             	add    %r11,%rbp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  419e70:	4c 89 c2             	mov    %r8,%rdx
  419e73:	48 29 fa             	sub    %rdi,%rdx
  419e76:	48 89 d0             	mov    %rdx,%rax
  419e79:	48 c1 f8 03          	sar    $0x3,%rax
  419e7d:	48 85 c0             	test   %rax,%rax
  419e80:	74 26                	je     419ea8 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x68>
  419e82:	48 01 c0             	add    %rax,%rax
  419e85:	72 13                	jb     419e9a <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x5a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  419e87:	48 b9 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rcx
  419e8e:	ff ff 1f 
  419e91:	48 39 c8             	cmp    %rcx,%rax
  419e94:	0f 86 c6 00 00 00    	jbe    419f60 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x120>
  419e9a:	48 c7 c3 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rbx
  419ea1:	eb 0a                	jmp    419ead <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x6d>
  419ea3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  419ea8:	bb 08 00 00 00       	mov    $0x8,%ebx
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419ead:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  419eb4:	ff ff ff 
  419eb7:	48 89 df             	mov    %rbx,%rdi
  419eba:	49 89 ef             	mov    %rbp,%r15
  419ebd:	48 01 e8             	add    %rbp,%rax
  419ec0:	ff d0                	callq  *%rax
  419ec2:	4d 8b 44 24 08       	mov    0x8(%r12),%r8
  419ec7:	49 8b 3c 24          	mov    (%r12),%rdi
  419ecb:	48 8d 48 08          	lea    0x8(%rax),%rcx
  419ecf:	49 89 c5             	mov    %rax,%r13
  419ed2:	48 01 c3             	add    %rax,%rbx
  419ed5:	4c 89 c2             	mov    %r8,%rdx
  419ed8:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  419edb:	4c 01 ea             	add    %r13,%rdx
  419ede:	74 06                	je     419ee6 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xa6>
  419ee0:	49 8b 06             	mov    (%r14),%rax
  419ee3:	48 89 02             	mov    %rax,(%rdx)
  419ee6:	4c 39 c7             	cmp    %r8,%rdi
  419ee9:	74 35                	je     419f20 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xe0>
  419eeb:	48 89 fa             	mov    %rdi,%rdx
  419eee:	4c 89 e9             	mov    %r13,%rcx
  419ef1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  419ef8:	48 85 c9             	test   %rcx,%rcx
  419efb:	74 06                	je     419f03 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xc3>
  419efd:	48 8b 32             	mov    (%rdx),%rsi
  419f00:	48 89 31             	mov    %rsi,(%rcx)
  419f03:	48 83 c2 08          	add    $0x8,%rdx
  419f07:	48 83 c1 08          	add    $0x8,%rcx
  419f0b:	4c 39 c2             	cmp    %r8,%rdx
  419f0e:	75 e8                	jne    419ef8 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xb8>
  419f10:	48 8d 47 08          	lea    0x8(%rdi),%rax
  419f14:	48 29 c2             	sub    %rax,%rdx
  419f17:	48 c1 ea 03          	shr    $0x3,%rdx
  419f1b:	49 8d 4c d5 10       	lea    0x10(%r13,%rdx,8),%rcx
	if (__p)
  419f20:	48 85 ff             	test   %rdi,%rdi
  419f23:	74 1c                	je     419f41 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x101>
      { ::operator delete(__p); }
  419f25:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  419f2c:	ff ff ff 
  419f2f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  419f34:	49 89 ef             	mov    %rbp,%r15
  419f37:	48 01 e8             	add    %rbp,%rax
  419f3a:	ff d0                	callq  *%rax
  419f3c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_start = __new_start;
  419f41:	4d 89 2c 24          	mov    %r13,(%r12)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  419f45:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
	this->_M_impl._M_finish = __new_finish;
  419f4a:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
      }
  419f4f:	48 83 c4 18          	add    $0x18,%rsp
  419f53:	5b                   	pop    %rbx
  419f54:	5d                   	pop    %rbp
  419f55:	41 5c                	pop    %r12
  419f57:	41 5d                	pop    %r13
  419f59:	41 5e                	pop    %r14
  419f5b:	41 5f                	pop    %r15
  419f5d:	c3                   	retq   
  419f5e:	66 90                	xchg   %ax,%ax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  419f60:	48 85 c0             	test   %rax,%rax
  419f63:	75 0f                	jne    419f74 <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x134>
  419f65:	b9 08 00 00 00       	mov    $0x8,%ecx
  419f6a:	31 db                	xor    %ebx,%ebx
  419f6c:	45 31 ed             	xor    %r13d,%r13d
  419f6f:	e9 67 ff ff ff       	jmpq   419edb <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x9b>
  419f74:	48 8d 1c c5 00 00 00 	lea    0x0(,%rax,8),%rbx
  419f7b:	00 
  419f7c:	e9 2c ff ff ff       	jmpq   419ead <_ZNSt6vectorI8LocationSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x6d>
  419f81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  419f88:	00 00 00 
  419f8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000419f90 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  419f90:	41 57                	push   %r15
  419f92:	41 56                	push   %r14
  419f94:	49 bb 70 10 21 00 00 	movabs $0x211070,%r11
  419f9b:	00 00 00 
  419f9e:	41 55                	push   %r13
  419fa0:	4c 8d 2d e9 ff ff ff 	lea    -0x17(%rip),%r13        # 419f90 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_>
  419fa7:	41 54                	push   %r12
  419fa9:	55                   	push   %rbp
  419faa:	53                   	push   %rbx
  419fab:	48 89 fd             	mov    %rdi,%rbp
  419fae:	4d 01 dd             	add    %r11,%r13
  419fb1:	48 83 ec 18          	sub    $0x18,%rsp
	if (!_M_buckets)
  419fb5:	48 83 3f 00          	cmpq   $0x0,(%rdi)
	__bucket_type* __buckets = nullptr;
  419fb9:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  419fc0:	00 
	if (!_M_buckets)
  419fc1:	0f 84 ce 00 00 00    	je     41a095 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x105>
	    if (!__ht._M_before_begin._M_nxt)
  419fc7:	48 8b 5e 10          	mov    0x10(%rsi),%rbx
  419fcb:	48 85 db             	test   %rbx,%rbx
  419fce:	0f 84 b2 00 00 00    	je     41a086 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xf6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  419fd4:	49 be 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%r14
  419fdb:	ff ff ff 
  419fde:	bf 18 00 00 00       	mov    $0x18,%edi
  419fe3:	4d 89 ef             	mov    %r13,%r15
  419fe6:	4b 8d 04 2e          	lea    (%r14,%r13,1),%rax
  419fea:	ff d0                	callq  *%rax
    _Hash_node_base() noexcept : _M_nxt() { }
  419fec:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  419ff3:	49 89 c4             	mov    %rax,%r12
  419ff6:	48 8b 43 08          	mov    0x8(%rbx),%rax
    { return __num % __den; }
  419ffa:	31 d2                	xor    %edx,%edx
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  419ffc:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
  41a000:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  41a005:	48 8b 43 10          	mov    0x10(%rbx),%rax
	    _M_before_begin._M_nxt = __this_n;
  41a009:	4c 89 65 10          	mov    %r12,0x10(%rbp)
      { __to->_M_hash_code = __from->_M_hash_code; }
  41a00d:	49 89 44 24 10       	mov    %rax,0x10(%r12)
    { return __num % __den; }
  41a012:	48 f7 75 08          	divq   0x8(%rbp)
	    _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
  41a016:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41a01a:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  41a01e:	48 8b 1b             	mov    (%rbx),%rbx
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  41a021:	48 85 db             	test   %rbx,%rbx
  41a024:	74 60                	je     41a086 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xf6>
  41a026:	4d 01 ee             	add    %r13,%r14
  41a029:	eb 10                	jmp    41a03b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xab>
  41a02b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  41a030:	48 8b 1b             	mov    (%rbx),%rbx
  41a033:	49 89 cc             	mov    %rcx,%r12
  41a036:	48 85 db             	test   %rbx,%rbx
  41a039:	74 4b                	je     41a086 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xf6>
  41a03b:	bf 18 00 00 00       	mov    $0x18,%edi
  41a040:	4d 89 ef             	mov    %r13,%r15
  41a043:	41 ff d6             	callq  *%r14
    _Hash_node_base() noexcept : _M_nxt() { }
  41a046:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  41a04d:	48 89 c1             	mov    %rax,%rcx
  41a050:	48 8b 43 08          	mov    0x8(%rbx),%rax
    { return __num % __den; }
  41a054:	31 d2                	xor    %edx,%edx
  41a056:	48 89 41 08          	mov    %rax,0x8(%rcx)
  41a05a:	48 8b 43 10          	mov    0x10(%rbx),%rax
		__prev_n->_M_nxt = __this_n;
  41a05e:	49 89 0c 24          	mov    %rcx,(%r12)
      { __to->_M_hash_code = __from->_M_hash_code; }
  41a062:	48 89 41 10          	mov    %rax,0x10(%rcx)
    { return __num % __den; }
  41a066:	48 f7 75 08          	divq   0x8(%rbp)
		if (!_M_buckets[__bkt])
  41a06a:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41a06e:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  41a072:	48 83 38 00          	cmpq   $0x0,(%rax)
  41a076:	75 b8                	jne    41a030 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xa0>
		  _M_buckets[__bkt] = __prev_n;
  41a078:	4c 89 20             	mov    %r12,(%rax)
  41a07b:	48 8b 1b             	mov    (%rbx),%rbx
  41a07e:	49 89 cc             	mov    %rcx,%r12
	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
  41a081:	48 85 db             	test   %rbx,%rbx
  41a084:	75 b5                	jne    41a03b <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0xab>
      }
  41a086:	48 83 c4 18          	add    $0x18,%rsp
  41a08a:	5b                   	pop    %rbx
  41a08b:	5d                   	pop    %rbp
  41a08c:	41 5c                	pop    %r12
  41a08e:	41 5d                	pop    %r13
  41a090:	41 5e                	pop    %r14
  41a092:	41 5f                	pop    %r15
  41a094:	c3                   	retq   
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  41a095:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
	if (__builtin_expect(__n == 1, false))
  41a099:	48 83 ff 01          	cmp    $0x1,%rdi
  41a09d:	74 26                	je     41a0c5 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x135>
	return __hashtable_alloc::_M_allocate_buckets(__n);
  41a09f:	48 b8 f0 2c de ff ff 	movabs $0xffffffffffde2cf0,%rax
  41a0a6:	ff ff ff 
  41a0a9:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41a0ae:	4c 01 e8             	add    %r13,%rax
  41a0b1:	ff d0                	callq  *%rax
  41a0b3:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41a0b8:	48 89 04 24          	mov    %rax,(%rsp)
	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
  41a0bc:	48 89 45 00          	mov    %rax,0x0(%rbp)
  41a0c0:	e9 02 ff ff ff       	jmpq   419fc7 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x37>
	    return &_M_single_bucket;
  41a0c5:	48 8d 45 30          	lea    0x30(%rbp),%rax
	    _M_single_bucket = nullptr;
  41a0c9:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
  41a0d0:	00 
	    return &_M_single_bucket;
  41a0d1:	48 89 04 24          	mov    %rax,(%rsp)
  41a0d5:	eb e5                	jmp    41a0bc <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x12c>
	__catch(...)
  41a0d7:	48 89 c7             	mov    %rax,%rdi
  41a0da:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41a0e1:	ff ff ff 
  41a0e4:	4d 89 ef             	mov    %r13,%r15
  41a0e7:	4c 01 e8             	add    %r13,%rax
  41a0ea:	ff d0                	callq  *%rax
	    clear();
  41a0ec:	48 b8 c0 db de ff ff 	movabs $0xffffffffffdedbc0,%rax
  41a0f3:	ff ff ff 
  41a0f6:	48 89 ef             	mov    %rbp,%rdi
  41a0f9:	4c 01 e8             	add    %r13,%rax
  41a0fc:	ff d0                	callq  *%rax
	    if (__buckets)
  41a0fe:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  41a103:	74 1c                	je     41a121 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x191>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41a105:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  41a109:	48 83 c5 30          	add    $0x30,%rbp
	if (_M_uses_single_bucket(__bkts))
  41a10d:	48 39 ef             	cmp    %rbp,%rdi
  41a110:	74 0f                	je     41a121 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_assignIZNSD_C4ERKSD_EUlPKNS2_10_Hash_nodeIS0_Lb1EEEE_EEvSG_RKT_+0x191>
      { ::operator delete(__p); }
  41a112:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41a119:	ff ff ff 
  41a11c:	4c 01 e8             	add    %r13,%rax
  41a11f:	ff d0                	callq  *%rax
	    __throw_exception_again;
  41a121:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41a128:	ff ff ff 
  41a12b:	4d 89 ef             	mov    %r13,%r15
  41a12e:	4c 01 e8             	add    %r13,%rax
  41a131:	ff d0                	callq  *%rax
	__catch(...)
  41a133:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41a13a:	ff ff ff 
  41a13d:	48 89 c3             	mov    %rax,%rbx
  41a140:	4d 89 ef             	mov    %r13,%r15
  41a143:	4c 01 ea             	add    %r13,%rdx
  41a146:	ff d2                	callq  *%rdx
  41a148:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41a14f:	ff ff ff 
  41a152:	48 89 df             	mov    %rbx,%rdi
  41a155:	4c 01 e8             	add    %r13,%rax
  41a158:	ff d0                	callq  *%rax
  41a15a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000041a160 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41a160:	41 57                	push   %r15
  41a162:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a164:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
  41a16b:	aa aa aa 
  41a16e:	41 55                	push   %r13
  41a170:	41 54                	push   %r12
  41a172:	49 bb a0 0e 21 00 00 	movabs $0x210ea0,%r11
  41a179:	00 00 00 
  41a17c:	55                   	push   %rbp
  41a17d:	53                   	push   %rbx
  41a17e:	48 89 fb             	mov    %rdi,%rbx
  41a181:	48 8d 2d d8 ff ff ff 	lea    -0x28(%rip),%rbp        # 41a160 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_>
  41a188:	49 89 f6             	mov    %rsi,%r14
  41a18b:	48 83 ec 18          	sub    $0x18,%rsp
  41a18f:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  41a193:	48 8b 3f             	mov    (%rdi),%rdi
  41a196:	4c 01 dd             	add    %r11,%rbp
  41a199:	4c 89 c2             	mov    %r8,%rdx
  41a19c:	48 29 fa             	sub    %rdi,%rdx
  41a19f:	48 89 d0             	mov    %rdx,%rax
  41a1a2:	48 c1 f8 02          	sar    $0x2,%rax
  41a1a6:	48 0f af c1          	imul   %rcx,%rax
  41a1aa:	48 85 c0             	test   %rax,%rax
  41a1ad:	74 21                	je     41a1d0 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x70>
  41a1af:	48 01 c0             	add    %rax,%rax
  41a1b2:	72 13                	jb     41a1c7 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41a1b4:	48 b9 55 55 55 55 55 	movabs $0x1555555555555555,%rcx
  41a1bb:	55 55 15 
  41a1be:	48 39 c8             	cmp    %rcx,%rax
  41a1c1:	0f 86 c9 00 00 00    	jbe    41a290 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x130>
  41a1c7:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  41a1ce:	eb 06                	jmp    41a1d6 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  41a1d0:	41 bd 0c 00 00 00    	mov    $0xc,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41a1d6:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41a1dd:	ff ff ff 
  41a1e0:	4c 89 ef             	mov    %r13,%rdi
  41a1e3:	49 89 ef             	mov    %rbp,%r15
  41a1e6:	48 01 e8             	add    %rbp,%rax
  41a1e9:	ff d0                	callq  *%rax
  41a1eb:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  41a1ef:	48 8b 3b             	mov    (%rbx),%rdi
  41a1f2:	48 8d 48 0c          	lea    0xc(%rax),%rcx
  41a1f6:	49 89 c4             	mov    %rax,%r12
  41a1f9:	49 01 c5             	add    %rax,%r13
  41a1fc:	4c 89 c2             	mov    %r8,%rdx
  41a1ff:	48 29 fa             	sub    %rdi,%rdx
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41a202:	4c 01 e2             	add    %r12,%rdx
  41a205:	74 0d                	je     41a214 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xb4>
  41a207:	49 8b 06             	mov    (%r14),%rax
  41a20a:	48 89 02             	mov    %rax,(%rdx)
  41a20d:	41 8b 46 08          	mov    0x8(%r14),%eax
  41a211:	89 42 08             	mov    %eax,0x8(%rdx)
  41a214:	4c 39 c7             	cmp    %r8,%rdi
  41a217:	74 35                	je     41a24e <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xee>
  41a219:	48 89 fa             	mov    %rdi,%rdx
  41a21c:	4c 89 e1             	mov    %r12,%rcx
  41a21f:	90                   	nop
  41a220:	48 85 c9             	test   %rcx,%rcx
  41a223:	74 0c                	je     41a231 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xd1>
  41a225:	48 8b 32             	mov    (%rdx),%rsi
  41a228:	48 89 31             	mov    %rsi,(%rcx)
  41a22b:	8b 72 08             	mov    0x8(%rdx),%esi
  41a22e:	89 71 08             	mov    %esi,0x8(%rcx)
  41a231:	48 83 c2 0c          	add    $0xc,%rdx
  41a235:	48 83 c1 0c          	add    $0xc,%rcx
  41a239:	4c 39 c2             	cmp    %r8,%rdx
  41a23c:	75 e2                	jne    41a220 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xc0>
  41a23e:	48 8d 47 0c          	lea    0xc(%rdi),%rax
  41a242:	48 29 c2             	sub    %rax,%rdx
  41a245:	48 c1 ea 02          	shr    $0x2,%rdx
  41a249:	49 8d 4c 94 18       	lea    0x18(%r12,%rdx,4),%rcx
	if (__p)
  41a24e:	48 85 ff             	test   %rdi,%rdi
  41a251:	74 1c                	je     41a26f <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x10f>
      { ::operator delete(__p); }
  41a253:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41a25a:	ff ff ff 
  41a25d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41a262:	49 89 ef             	mov    %rbp,%r15
  41a265:	48 01 e8             	add    %rbp,%rax
  41a268:	ff d0                	callq  *%rax
  41a26a:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
	this->_M_impl._M_start = __new_start;
  41a26f:	4c 89 23             	mov    %r12,(%rbx)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a272:	4c 89 6b 10          	mov    %r13,0x10(%rbx)
	this->_M_impl._M_finish = __new_finish;
  41a276:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
      }
  41a27a:	48 83 c4 18          	add    $0x18,%rsp
  41a27e:	5b                   	pop    %rbx
  41a27f:	5d                   	pop    %rbp
  41a280:	41 5c                	pop    %r12
  41a282:	41 5d                	pop    %r13
  41a284:	41 5e                	pop    %r14
  41a286:	41 5f                	pop    %r15
  41a288:	c3                   	retq   
  41a289:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41a290:	48 85 c0             	test   %rax,%rax
  41a293:	75 10                	jne    41a2a5 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x145>
  41a295:	b9 0c 00 00 00       	mov    $0xc,%ecx
  41a29a:	45 31 ed             	xor    %r13d,%r13d
  41a29d:	45 31 e4             	xor    %r12d,%r12d
  41a2a0:	e9 5d ff ff ff       	jmpq   41a202 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0xa2>
  41a2a5:	4c 8d 2c 40          	lea    (%rax,%rax,2),%r13
  41a2a9:	49 c1 e5 02          	shl    $0x2,%r13
  41a2ad:	e9 24 ff ff ff       	jmpq   41a1d6 <_ZNSt6vectorI5StateSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_+0x76>
  41a2b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a2b9:	00 00 00 
  41a2bc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041a2c0 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41a2c0:	41 57                	push   %r15
  41a2c2:	41 56                	push   %r14
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a2c4:	48 b9 b7 6d db b6 6d 	movabs $0x6db6db6db6db6db7,%rcx
  41a2cb:	db b6 6d 
  41a2ce:	41 55                	push   %r13
  41a2d0:	41 54                	push   %r12
  41a2d2:	49 bb 40 0d 21 00 00 	movabs $0x210d40,%r11
  41a2d9:	00 00 00 
  41a2dc:	55                   	push   %rbp
  41a2dd:	53                   	push   %rbx
  41a2de:	48 89 fd             	mov    %rdi,%rbp
  41a2e1:	48 8d 1d d8 ff ff ff 	lea    -0x28(%rip),%rbx        # 41a2c0 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>
  41a2e8:	49 89 f6             	mov    %rsi,%r14
  41a2eb:	48 83 ec 18          	sub    $0x18,%rsp
  41a2ef:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  41a2f3:	48 8b 3f             	mov    (%rdi),%rdi
  41a2f6:	4c 01 db             	add    %r11,%rbx
  41a2f9:	4c 89 c0             	mov    %r8,%rax
  41a2fc:	48 29 f8             	sub    %rdi,%rax
  41a2ff:	48 89 c2             	mov    %rax,%rdx
  41a302:	48 c1 fa 02          	sar    $0x2,%rdx
  41a306:	48 0f af d1          	imul   %rcx,%rdx
  41a30a:	48 85 d2             	test   %rdx,%rdx
  41a30d:	74 21                	je     41a330 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x70>
  41a30f:	48 01 d2             	add    %rdx,%rdx
  41a312:	72 13                	jb     41a327 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x67>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41a314:	48 b9 24 49 92 24 49 	movabs $0x924924924924924,%rcx
  41a31b:	92 24 09 
  41a31e:	48 39 ca             	cmp    %rcx,%rdx
  41a321:	0f 86 19 01 00 00    	jbe    41a440 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x180>
  41a327:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
  41a32e:	eb 06                	jmp    41a336 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  41a330:	41 bd 1c 00 00 00    	mov    $0x1c,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41a336:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41a33d:	ff ff ff 
  41a340:	4c 89 ef             	mov    %r13,%rdi
  41a343:	49 89 df             	mov    %rbx,%r15
  41a346:	48 01 d8             	add    %rbx,%rax
  41a349:	ff d0                	callq  *%rax
  41a34b:	4c 8b 45 08          	mov    0x8(%rbp),%r8
  41a34f:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  41a353:	49 89 c4             	mov    %rax,%r12
  41a356:	49 01 c5             	add    %rax,%r13
  41a359:	49 8d 54 24 1c       	lea    0x1c(%r12),%rdx
  41a35e:	4c 89 c0             	mov    %r8,%rax
  41a361:	48 29 f8             	sub    %rdi,%rax
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41a364:	4c 01 e0             	add    %r12,%rax
  41a367:	74 1d                	je     41a386 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xc6>
  41a369:	49 8b 0e             	mov    (%r14),%rcx
  41a36c:	48 89 08             	mov    %rcx,(%rax)
  41a36f:	49 8b 4e 08          	mov    0x8(%r14),%rcx
  41a373:	48 89 48 08          	mov    %rcx,0x8(%rax)
  41a377:	49 8b 4e 10          	mov    0x10(%r14),%rcx
  41a37b:	48 89 48 10          	mov    %rcx,0x10(%rax)
  41a37f:	41 8b 4e 18          	mov    0x18(%r14),%ecx
  41a383:	89 48 18             	mov    %ecx,0x18(%rax)
  41a386:	4c 39 c7             	cmp    %r8,%rdi
  41a389:	74 75                	je     41a400 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x140>
  41a38b:	48 89 fa             	mov    %rdi,%rdx
  41a38e:	4c 89 e1             	mov    %r12,%rcx
  41a391:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41a398:	48 85 c9             	test   %rcx,%rcx
  41a39b:	74 1c                	je     41a3b9 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xf9>
  41a39d:	48 8b 02             	mov    (%rdx),%rax
  41a3a0:	48 89 01             	mov    %rax,(%rcx)
  41a3a3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  41a3a7:	48 89 41 08          	mov    %rax,0x8(%rcx)
  41a3ab:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  41a3af:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  41a3b3:	8b 72 18             	mov    0x18(%rdx),%esi
  41a3b6:	89 71 18             	mov    %esi,0x18(%rcx)
  41a3b9:	48 83 c2 1c          	add    $0x1c,%rdx
  41a3bd:	48 83 c1 1c          	add    $0x1c,%rcx
  41a3c1:	4c 39 c2             	cmp    %r8,%rdx
  41a3c4:	75 d2                	jne    41a398 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xd8>
  41a3c6:	48 8d 47 1c          	lea    0x1c(%rdi),%rax
  41a3ca:	48 29 c2             	sub    %rax,%rdx
  41a3cd:	48 b8 b7 6d db b6 6d 	movabs $0x2db6db6db6db6db7,%rax
  41a3d4:	db b6 2d 
  41a3d7:	48 c1 ea 02          	shr    $0x2,%rdx
  41a3db:	48 0f af d0          	imul   %rax,%rdx
  41a3df:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
  41a3e6:	ff ff 3f 
  41a3e9:	48 21 c2             	and    %rax,%rdx
  41a3ec:	48 83 c2 01          	add    $0x1,%rdx
  41a3f0:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax
  41a3f7:	00 
  41a3f8:	48 29 d0             	sub    %rdx,%rax
  41a3fb:	49 8d 54 84 1c       	lea    0x1c(%r12,%rax,4),%rdx
	if (__p)
  41a400:	48 85 ff             	test   %rdi,%rdi
  41a403:	74 1c                	je     41a421 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x161>
      { ::operator delete(__p); }
  41a405:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41a40c:	ff ff ff 
  41a40f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41a414:	49 89 df             	mov    %rbx,%r15
  41a417:	48 01 d8             	add    %rbx,%rax
  41a41a:	ff d0                	callq  *%rax
  41a41c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	this->_M_impl._M_start = __new_start;
  41a421:	4c 89 65 00          	mov    %r12,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  41a425:	48 89 55 08          	mov    %rdx,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a429:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
      }
  41a42d:	48 83 c4 18          	add    $0x18,%rsp
  41a431:	5b                   	pop    %rbx
  41a432:	5d                   	pop    %rbp
  41a433:	41 5c                	pop    %r12
  41a435:	41 5d                	pop    %r13
  41a437:	41 5e                	pop    %r14
  41a439:	41 5f                	pop    %r15
  41a43b:	c3                   	retq   
  41a43c:	0f 1f 40 00          	nopl   0x0(%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41a440:	48 85 d2             	test   %rdx,%rdx
  41a443:	75 10                	jne    41a455 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x195>
  41a445:	ba 1c 00 00 00       	mov    $0x1c,%edx
  41a44a:	45 31 ed             	xor    %r13d,%r13d
  41a44d:	45 31 e4             	xor    %r12d,%r12d
  41a450:	e9 0f ff ff ff       	jmpq   41a364 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0xa4>
  41a455:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  41a45c:	00 
  41a45d:	49 29 d5             	sub    %rdx,%r13
  41a460:	49 c1 e5 02          	shl    $0x2,%r13
  41a464:	e9 cd fe ff ff       	jmpq   41a336 <_ZNSt6vectorI9AstarNodeSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x76>
  41a469:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041a470 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41a470:	41 57                	push   %r15
  41a472:	41 56                	push   %r14
  41a474:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 41a470 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_>
  41a47b:	41 55                	push   %r13
  41a47d:	41 54                	push   %r12
  41a47f:	49 bb 90 0b 21 00 00 	movabs $0x210b90,%r11
  41a486:	00 00 00 
  41a489:	55                   	push   %rbp
  41a48a:	53                   	push   %rbx
  41a48b:	4d 01 de             	add    %r11,%r14
  41a48e:	48 89 fd             	mov    %rdi,%rbp
  41a491:	48 83 ec 18          	sub    $0x18,%rsp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a495:	48 8b 47 08          	mov    0x8(%rdi),%rax
  41a499:	48 2b 07             	sub    (%rdi),%rax
  41a49c:	48 c1 f8 02          	sar    $0x2,%rax
  41a4a0:	48 85 c0             	test   %rax,%rax
  41a4a3:	74 2b                	je     41a4d0 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x60>
  41a4a5:	48 01 c0             	add    %rax,%rax
  41a4a8:	72 13                	jb     41a4bd <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x4d>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41a4aa:	48 ba ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rdx
  41a4b1:	ff ff 3f 
  41a4b4:	48 39 d0             	cmp    %rdx,%rax
  41a4b7:	0f 86 cf 00 00 00    	jbe    41a58c <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x11c>
  41a4bd:	49 c7 c5 fc ff ff ff 	mov    $0xfffffffffffffffc,%r13
  41a4c4:	eb 10                	jmp    41a4d6 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x66>
  41a4c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a4cd:	00 00 00 
  41a4d0:	41 bd 04 00 00 00    	mov    $0x4,%r13d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41a4d6:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41a4dd:	ff ff ff 
  41a4e0:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41a4e5:	4c 89 ef             	mov    %r13,%rdi
  41a4e8:	4d 89 f7             	mov    %r14,%r15
  41a4eb:	4c 01 f0             	add    %r14,%rax
  41a4ee:	ff d0                	callq  *%rax
  41a4f0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41a4f5:	48 89 c3             	mov    %rax,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41a4f8:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
  41a4fc:	4c 8b 65 08          	mov    0x8(%rbp),%r12
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41a500:	48 89 da             	mov    %rbx,%rdx
  41a503:	8b 36                	mov    (%rsi),%esi
  41a505:	49 29 cc             	sub    %rcx,%r12
  41a508:	4c 89 e0             	mov    %r12,%rax
  41a50b:	48 c1 f8 02          	sar    $0x2,%rax
  41a50f:	4c 01 e2             	add    %r12,%rdx
  41a512:	74 02                	je     41a516 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xa6>
  41a514:	89 32                	mov    %esi,(%rdx)
	  if (_Num)
  41a516:	48 85 c0             	test   %rax,%rax
  41a519:	75 45                	jne    41a560 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xf0>
	if (__p)
  41a51b:	48 85 c9             	test   %rcx,%rcx
	    ++__new_finish;
  41a51e:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  41a523:	74 15                	je     41a53a <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xca>
      { ::operator delete(__p); }
  41a525:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41a52c:	ff ff ff 
  41a52f:	48 89 cf             	mov    %rcx,%rdi
  41a532:	4d 89 f7             	mov    %r14,%r15
  41a535:	4c 01 f0             	add    %r14,%rax
  41a538:	ff d0                	callq  *%rax
	this->_M_impl._M_start = __new_start;
  41a53a:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a53e:	4c 01 eb             	add    %r13,%rbx
	this->_M_impl._M_finish = __new_finish;
  41a541:	4c 89 65 08          	mov    %r12,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41a545:	48 89 5d 10          	mov    %rbx,0x10(%rbp)
      }
  41a549:	48 83 c4 18          	add    $0x18,%rsp
  41a54d:	5b                   	pop    %rbx
  41a54e:	5d                   	pop    %rbp
  41a54f:	41 5c                	pop    %r12
  41a551:	41 5d                	pop    %r13
  41a553:	41 5e                	pop    %r14
  41a555:	41 5f                	pop    %r15
  41a557:	c3                   	retq   
  41a558:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41a55f:	00 
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  41a560:	48 b8 80 e9 dd ff ff 	movabs $0xffffffffffdde980,%rax
  41a567:	ff ff ff 
  41a56a:	4c 89 e2             	mov    %r12,%rdx
  41a56d:	48 89 ce             	mov    %rcx,%rsi
  41a570:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41a575:	48 89 df             	mov    %rbx,%rdi
  41a578:	4d 89 f7             	mov    %r14,%r15
  41a57b:	4c 01 f0             	add    %r14,%rax
	    ++__new_finish;
  41a57e:	4e 8d 64 23 04       	lea    0x4(%rbx,%r12,1),%r12
  41a583:	ff d0                	callq  *%rax
  41a585:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41a58a:	eb 99                	jmp    41a525 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0xb5>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41a58c:	45 31 ed             	xor    %r13d,%r13d
  41a58f:	31 db                	xor    %ebx,%ebx
  41a591:	48 85 c0             	test   %rax,%rax
  41a594:	0f 84 5e ff ff ff    	je     41a4f8 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x88>
  41a59a:	4c 8d 2c 85 00 00 00 	lea    0x0(,%rax,4),%r13
  41a5a1:	00 
  41a5a2:	e9 2f ff ff ff       	jmpq   41a4d6 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_+0x66>
  41a5a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41a5ae:	00 00 

000000000041a5b0 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv>:

  value_type dereference() const {
  41a5b0:	41 57                	push   %r15
  41a5b2:	41 56                	push   %r14
  41a5b4:	49 bb 50 0a 21 00 00 	movabs $0x210a50,%r11
  41a5bb:	00 00 00 
  41a5be:	41 55                	push   %r13
  41a5c0:	41 54                	push   %r12
  41a5c2:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41a5b0 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv>
  41a5c9:	55                   	push   %rbp
  41a5ca:	53                   	push   %rbx
  41a5cb:	48 89 fb             	mov    %rdi,%rbx
  41a5ce:	4d 01 dc             	add    %r11,%r12
  41a5d1:	48 83 ec 08          	sub    $0x8,%rsp
    switch (m_type) {
  41a5d5:	8b 06                	mov    (%rsi),%eax
  41a5d7:	83 f8 01             	cmp    $0x1,%eax
  41a5da:	0f 84 d8 00 00 00    	je     41a6b8 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x108>
  41a5e0:	83 f8 02             	cmp    $0x2,%eax
  41a5e3:	0f 85 8f 01 00 00    	jne    41a778 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
  41a5e9:	48 8b 46 10          	mov    0x10(%rsi),%rax
        return value_type(*m_mapIt->first, *m_mapIt->second);
  41a5ed:	48 8b 50 28          	mov    0x28(%rax),%rdx
  41a5f1:	48 8b 40 20          	mov    0x20(%rax),%rax
    const typename base_type::value_type& v = *this->base();
    if (v.pNode)
      return value_type(Node(*v, m_pMemory));
    if (v.first && v.second)
  41a5f5:	48 85 d2             	test   %rdx,%rdx
  41a5f8:	0f 84 7a 01 00 00    	je     41a778 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
  41a5fe:	48 85 c0             	test   %rax,%rax
  41a601:	0f 84 71 01 00 00    	je     41a778 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a607:	48 8b 6e 28          	mov    0x28(%rsi),%rbp
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a60b:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a60f:	48 85 ed             	test   %rbp,%rbp
  41a612:	0f 84 b8 01 00 00    	je     41a7d0 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x220>
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  41a618:	48 8d 4d 08          	lea    0x8(%rbp),%rcx
  41a61c:	f0 83 01 01          	lock addl $0x1,(%rcx)
  41a620:	f0 83 01 01          	lock addl $0x1,(%rcx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a624:	4c 8b 6e 28          	mov    0x28(%rsi),%r13
  41a628:	4c 8b 46 20          	mov    0x20(%rsi),%r8
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a62c:	4d 85 ed             	test   %r13,%r13
  41a62f:	0f 84 9e 01 00 00    	je     41a7d3 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x223>
  41a635:	49 8d 75 08          	lea    0x8(%r13),%rsi
  41a639:	f0 83 06 01          	lock addl $0x1,(%rsi)
  41a63d:	f0 83 06 01          	lock addl $0x1,(%rsi)
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  41a641:	c6 03 00             	movb   $0x0,(%rbx)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41a644:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  41a64b:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41a64c:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  41a653:	00 
  41a654:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  41a65b:	00 
      m_pNode(rhs.m_pNode) {}
  41a65c:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a660:	4c 89 43 28          	mov    %r8,0x28(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a664:	4c 89 6b 30          	mov    %r13,0x30(%rbx)
  41a668:	f0 83 06 01          	lock addl $0x1,(%rsi)
  41a66c:	48 89 43 38          	mov    %rax,0x38(%rbx)
  41a670:	c6 43 40 01          	movb   $0x1,0x40(%rbx)
  41a674:	48 89 7b 48          	mov    %rdi,0x48(%rbx)
  41a678:	48 89 6b 50          	mov    %rbp,0x50(%rbx)
  41a67c:	f0 83 01 01          	lock addl $0x1,(%rcx)
        if( pi_ != 0 ) pi_->release();
  41a680:	49 be c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r14
  41a687:	ff ff ff 
  41a68a:	4c 89 ef             	mov    %r13,%rdi
  41a68d:	48 89 53 58          	mov    %rdx,0x58(%rbx)
  41a691:	4f 8d 3c 26          	lea    (%r14,%r12,1),%r15
  41a695:	41 ff d7             	callq  *%r15
  41a698:	4c 89 ef             	mov    %r13,%rdi
  41a69b:	41 ff d7             	callq  *%r15
  41a69e:	48 89 ef             	mov    %rbp,%rdi
  41a6a1:	4d 01 f4             	add    %r14,%r12
  41a6a4:	41 ff d4             	callq  *%r12
  41a6a7:	48 89 ef             	mov    %rbp,%rdi
  41a6aa:	41 ff d4             	callq  *%r12
  41a6ad:	e9 9c 00 00 00       	jmpq   41a74e <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
  41a6b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return value_type(**m_seqIt);
  41a6b8:	48 8b 46 08          	mov    0x8(%rsi),%rax
  41a6bc:	48 8b 08             	mov    (%rax),%rcx
    if (v.pNode)
  41a6bf:	48 85 c9             	test   %rcx,%rcx
  41a6c2:	0f 84 b0 00 00 00    	je     41a778 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1c8>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a6c8:	48 8b 6e 28          	mov    0x28(%rsi),%rbp
  41a6cc:	48 8b 56 20          	mov    0x20(%rsi),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a6d0:	48 85 ed             	test   %rbp,%rbp
  41a6d3:	0f 84 87 00 00 00    	je     41a760 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x1b0>
  41a6d9:	48 8d 45 08          	lea    0x8(%rbp),%rax
  41a6dd:	f0 83 00 01          	lock addl $0x1,(%rax)
  41a6e1:	f0 83 00 01          	lock addl $0x1,(%rax)
  41a6e5:	c6 07 01             	movb   $0x1,(%rdi)
  41a6e8:	48 89 57 08          	mov    %rdx,0x8(%rdi)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a6ec:	48 89 6f 10          	mov    %rbp,0x10(%rdi)
  41a6f0:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41a6f4:	48 85 ed             	test   %rbp,%rbp
  41a6f7:	48 89 4b 18          	mov    %rcx,0x18(%rbx)
  41a6fb:	c6 43 20 00          	movb   $0x0,0x20(%rbx)
  41a6ff:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  41a706:	00 
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a707:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  41a70e:	00 
  41a70f:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  41a716:	00 
  41a717:	c6 43 40 00          	movb   $0x0,0x40(%rbx)
  41a71b:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
  41a722:	00 
  41a723:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
  41a72a:	00 
  41a72b:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  41a732:	00 
        if( pi_ != 0 ) pi_->release();
  41a733:	74 19                	je     41a74e <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
  41a735:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41a73c:	ff ff ff 
  41a73f:	48 89 ef             	mov    %rbp,%rdi
  41a742:	49 01 c4             	add    %rax,%r12
  41a745:	41 ff d4             	callq  *%r12
  41a748:	48 89 ef             	mov    %rbp,%rdi
  41a74b:	41 ff d4             	callq  *%r12
      return value_type(Node(*v.first, m_pMemory), Node(*v.second, m_pMemory));
    return value_type();
  }
  41a74e:	48 83 c4 08          	add    $0x8,%rsp
  41a752:	48 89 d8             	mov    %rbx,%rax
  41a755:	5b                   	pop    %rbx
  41a756:	5d                   	pop    %rbp
  41a757:	41 5c                	pop    %r12
  41a759:	41 5d                	pop    %r13
  41a75b:	41 5e                	pop    %r14
  41a75d:	41 5f                	pop    %r15
  41a75f:	c3                   	retq   
  41a760:	c6 07 01             	movb   $0x1,(%rdi)
  41a763:	48 89 57 08          	mov    %rdx,0x8(%rdi)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a767:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  41a76e:	00 
  41a76f:	e9 80 ff ff ff       	jmpq   41a6f4 <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x144>
  41a774:	0f 1f 40 00          	nopl   0x0(%rax)
inline Node::Node() : m_isValid(true), m_pNode(NULL) {}
  41a778:	c6 03 01             	movb   $0x1,(%rbx)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41a77b:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  41a782:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41a783:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  41a78a:	00 
  41a78b:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  41a792:	00 
  41a793:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
  41a797:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  41a79e:	00 
  41a79f:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  41a7a6:	00 
  41a7a7:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  41a7ae:	00 
  41a7af:	c6 43 40 01          	movb   $0x1,0x40(%rbx)
  41a7b3:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
  41a7ba:	00 
  41a7bb:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
  41a7c2:	00 
  41a7c3:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  41a7ca:	00 
  41a7cb:	e9 7e ff ff ff       	jmpq   41a74e <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a7d0:	49 89 f8             	mov    %rdi,%r8
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a7d3:	48 85 ed             	test   %rbp,%rbp
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  41a7d6:	c6 03 00             	movb   $0x0,(%rbx)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41a7d9:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  41a7e0:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41a7e1:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  41a7e8:	00 
  41a7e9:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  41a7f0:	00 
      m_pNode(rhs.m_pNode) {}
  41a7f1:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41a7f5:	4c 89 43 28          	mov    %r8,0x28(%rbx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41a7f9:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  41a800:	00 
  41a801:	48 89 43 38          	mov    %rax,0x38(%rbx)
  41a805:	c6 43 40 01          	movb   $0x1,0x40(%rbx)
  41a809:	48 89 7b 48          	mov    %rdi,0x48(%rbx)
  41a80d:	48 89 6b 50          	mov    %rbp,0x50(%rbx)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41a811:	75 09                	jne    41a81c <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x26c>
  41a813:	48 89 53 58          	mov    %rdx,0x58(%rbx)
  41a817:	e9 32 ff ff ff       	jmpq   41a74e <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0x19e>
  41a81c:	f0 83 45 08 01       	lock addl $0x1,0x8(%rbp)
  41a821:	49 be c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%r14
  41a828:	ff ff ff 
  41a82b:	48 89 53 58          	mov    %rdx,0x58(%rbx)
  41a82f:	e9 6a fe ff ff       	jmpq   41a69e <_ZNK4YAML6detail13iterator_baseINS0_14iterator_valueEE11dereferenceEv+0xee>
  41a834:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a83b:	00 00 00 
  41a83e:	66 90                	xchg   %ax,%ax

000000000041a840 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41a840:	41 57                	push   %r15
  41a842:	41 56                	push   %r14
  41a844:	4c 8d 35 f5 ff ff ff 	lea    -0xb(%rip),%r14        # 41a840 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_>
  41a84b:	41 55                	push   %r13
  41a84d:	41 54                	push   %r12
  41a84f:	49 bb c0 07 21 00 00 	movabs $0x2107c0,%r11
  41a856:	00 00 00 
  41a859:	55                   	push   %rbp
  41a85a:	53                   	push   %rbx
  41a85b:	4d 01 de             	add    %r11,%r14
  41a85e:	48 83 ec 18          	sub    $0x18,%rsp
  41a862:	48 8b 5f 10          	mov    0x10(%rdi),%rbx
  41a866:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  41a86b:	48 89 34 24          	mov    %rsi,(%rsp)
      while (__x != 0)
  41a86f:	48 85 db             	test   %rbx,%rbx
  41a872:	0f 84 b6 00 00 00    	je     41a92e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xee>
  41a878:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
  41a87c:	4c 8b 26             	mov    (%rsi),%r12
  41a87f:	eb 36                	jmp    41a8b7 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x77>
  41a881:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	return __builtin_memcmp(__s1, __s2, __n);
  41a888:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  41a88f:	ff ff ff 
  41a892:	48 8b 73 20          	mov    0x20(%rbx),%rsi
  41a896:	4c 89 e7             	mov    %r12,%rdi
  41a899:	4c 01 f0             	add    %r14,%rax
  41a89c:	4d 89 f7             	mov    %r14,%r15
  41a89f:	ff d0                	callq  *%rax
	if (!__r)
  41a8a1:	85 c0                	test   %eax,%eax
  41a8a3:	74 25                	je     41a8ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x8a>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  41a8a5:	85 c0                	test   %eax,%eax
  41a8a7:	78 37                	js     41a8e0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xa0>
  41a8a9:	48 8b 43 18          	mov    0x18(%rbx),%rax
  41a8ad:	31 f6                	xor    %esi,%esi
      while (__x != 0)
  41a8af:	48 85 c0             	test   %rax,%rax
  41a8b2:	74 3a                	je     41a8ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xae>
  41a8b4:	48 89 c3             	mov    %rax,%rbx
  41a8b7:	48 8b 6b 28          	mov    0x28(%rbx),%rbp
  41a8bb:	4c 89 ea             	mov    %r13,%rdx
  41a8be:	4c 39 ed             	cmp    %r13,%rbp
  41a8c1:	48 0f 46 d5          	cmovbe %rbp,%rdx
	if (__n == 0)
  41a8c5:	48 85 d2             	test   %rdx,%rdx
  41a8c8:	75 be                	jne    41a888 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x48>
	const difference_type __d = difference_type(__n1 - __n2);
  41a8ca:	4c 89 e8             	mov    %r13,%rax
  41a8cd:	48 29 e8             	sub    %rbp,%rax
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
  41a8d0:	48 3d ff ff ff 7f    	cmp    $0x7fffffff,%rax
  41a8d6:	7f d1                	jg     41a8a9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x69>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
  41a8d8:	48 3d 00 00 00 80    	cmp    $0xffffffff80000000,%rax
  41a8de:	7d c5                	jge    41a8a5 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x65>
  41a8e0:	48 8b 43 10          	mov    0x10(%rbx),%rax
  41a8e4:	be 01 00 00 00       	mov    $0x1,%esi
  41a8e9:	48 85 c0             	test   %rax,%rax
  41a8ec:	75 c6                	jne    41a8b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0x74>
      if (__comp)
  41a8ee:	40 84 f6             	test   %sil,%sil
  41a8f1:	48 89 dd             	mov    %rbx,%rbp
  41a8f4:	75 42                	jne    41a938 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xf8>
    { return __lhs.compare(__rhs) < 0; }
  41a8f6:	48 b8 a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rax
  41a8fd:	ff ff ff 
  41a900:	48 8d 7d 20          	lea    0x20(%rbp),%rdi
  41a904:	48 8b 34 24          	mov    (%rsp),%rsi
  41a908:	4c 01 f0             	add    %r14,%rax
  41a90b:	4d 89 f7             	mov    %r14,%r15
  41a90e:	ff d0                	callq  *%rax
	return _Res(__x, __y);
  41a910:	31 d2                	xor    %edx,%edx
  41a912:	85 c0                	test   %eax,%eax
  41a914:	48 0f 48 ea          	cmovs  %rdx,%rbp
  41a918:	48 0f 48 d3          	cmovs  %rbx,%rdx
    }
  41a91c:	48 83 c4 18          	add    $0x18,%rsp
  41a920:	48 89 e8             	mov    %rbp,%rax
  41a923:	5b                   	pop    %rbx
  41a924:	5d                   	pop    %rbp
  41a925:	41 5c                	pop    %r12
  41a927:	41 5d                	pop    %r13
  41a929:	41 5e                	pop    %r14
  41a92b:	41 5f                	pop    %r15
  41a92d:	c3                   	retq   
      { return &this->_M_impl._M_header; }
  41a92e:	48 8d 5f 08          	lea    0x8(%rdi),%rbx
  41a932:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  if (__j == begin())
  41a938:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	    return _Res(__x, __y);
  41a93d:	31 ed                	xor    %ebp,%ebp
  41a93f:	48 89 da             	mov    %rbx,%rdx
	  if (__j == begin())
  41a942:	48 39 58 18          	cmp    %rbx,0x18(%rax)
  41a946:	74 d4                	je     41a91c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xdc>
	_M_node = _Rb_tree_decrement(_M_node);
  41a948:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  41a94f:	ff ff ff 
  41a952:	48 89 df             	mov    %rbx,%rdi
  41a955:	4d 89 f7             	mov    %r14,%r15
  41a958:	4c 01 f0             	add    %r14,%rax
  41a95b:	ff d0                	callq  *%rax
  41a95d:	48 89 c5             	mov    %rax,%rbp
  41a960:	eb 94                	jmp    41a8f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_+0xb6>
  41a962:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41a969:	00 00 00 
  41a96c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041a970 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41a970:	41 57                	push   %r15
      { return &this->_M_impl._M_header; }
  41a972:	48 8d 47 08          	lea    0x8(%rdi),%rax
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41a976:	41 56                	push   %r14
  41a978:	4c 8d 3d f1 ff ff ff 	lea    -0xf(%rip),%r15        # 41a970 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_>
  41a97f:	41 55                	push   %r13
  41a981:	41 54                	push   %r12
  41a983:	55                   	push   %rbp
  41a984:	53                   	push   %rbx
  41a985:	49 bb 90 06 21 00 00 	movabs $0x210690,%r11
  41a98c:	00 00 00 
  41a98f:	4d 01 df             	add    %r11,%r15
  41a992:	49 89 fd             	mov    %rdi,%r13
  41a995:	49 89 d4             	mov    %rdx,%r12
  41a998:	48 83 ec 08          	sub    $0x8,%rsp
      if (__pos._M_node == _M_end())
  41a99c:	48 39 c6             	cmp    %rax,%rsi
  41a99f:	0f 84 93 00 00 00    	je     41aa38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xc8>
  41a9a5:	4c 8d 76 20          	lea    0x20(%rsi),%r14
  41a9a9:	48 bb a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rbx
  41a9b0:	ff ff ff 
  41a9b3:	48 89 f5             	mov    %rsi,%rbp
  41a9b6:	4c 01 fb             	add    %r15,%rbx
  41a9b9:	48 89 d7             	mov    %rdx,%rdi
  41a9bc:	4c 89 f6             	mov    %r14,%rsi
  41a9bf:	ff d3                	callq  *%rbx
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
  41a9c1:	85 c0                	test   %eax,%eax
  41a9c3:	78 2b                	js     41a9f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x80>
  41a9c5:	4c 89 e6             	mov    %r12,%rsi
  41a9c8:	4c 89 f7             	mov    %r14,%rdi
  41a9cb:	ff d3                	callq  *%rbx
  41a9cd:	89 c1                	mov    %eax,%ecx
	return _Res(__pos._M_node, 0);
  41a9cf:	31 d2                	xor    %edx,%edx
  41a9d1:	48 89 e8             	mov    %rbp,%rax
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
  41a9d4:	85 c9                	test   %ecx,%ecx
  41a9d6:	0f 88 ac 00 00 00    	js     41aa88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x118>
    }
  41a9dc:	48 83 c4 08          	add    $0x8,%rsp
  41a9e0:	5b                   	pop    %rbx
  41a9e1:	5d                   	pop    %rbp
  41a9e2:	41 5c                	pop    %r12
  41a9e4:	41 5d                	pop    %r13
  41a9e6:	41 5e                	pop    %r14
  41a9e8:	41 5f                	pop    %r15
  41a9ea:	c3                   	retq   
  41a9eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	  if (__pos._M_node == _M_leftmost()) // begin()
  41a9f0:	49 8b 45 18          	mov    0x18(%r13),%rax
  41a9f4:	48 39 e8             	cmp    %rbp,%rax
	    return _Res(_M_leftmost(), _M_leftmost());
  41a9f7:	48 89 c2             	mov    %rax,%rdx
	  if (__pos._M_node == _M_leftmost()) // begin()
  41a9fa:	74 e0                	je     41a9dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
	_M_node = _Rb_tree_decrement(_M_node);
  41a9fc:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  41aa03:	ff ff ff 
  41aa06:	48 89 ef             	mov    %rbp,%rdi
  41aa09:	4c 01 f8             	add    %r15,%rax
  41aa0c:	ff d0                	callq  *%rax
  41aa0e:	4c 89 e6             	mov    %r12,%rsi
  41aa11:	49 89 c6             	mov    %rax,%r14
  41aa14:	48 8d 78 20          	lea    0x20(%rax),%rdi
  41aa18:	ff d3                	callq  *%rbx
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
  41aa1a:	85 c0                	test   %eax,%eax
  41aa1c:	79 3f                	jns    41aa5d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xed>
	      if (_S_right(__before._M_node) == 0)
  41aa1e:	49 83 7e 18 00       	cmpq   $0x0,0x18(%r14)
		return _Res(__pos._M_node, __pos._M_node);
  41aa23:	48 89 e8             	mov    %rbp,%rax
  41aa26:	48 89 ea             	mov    %rbp,%rdx
	      if (_S_right(__before._M_node) == 0)
  41aa29:	75 b1                	jne    41a9dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
		return _Res(0, __before._M_node);
  41aa2b:	31 c0                	xor    %eax,%eax
  41aa2d:	4c 89 f2             	mov    %r14,%rdx
  41aa30:	eb aa                	jmp    41a9dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
  41aa32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
  41aa38:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
  41aa3d:	74 1e                	je     41aa5d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xed>
  41aa3f:	48 8b 5f 20          	mov    0x20(%rdi),%rbx
  41aa43:	48 b8 a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rax
  41aa4a:	ff ff ff 
  41aa4d:	48 89 d6             	mov    %rdx,%rsi
  41aa50:	4c 01 f8             	add    %r15,%rax
  41aa53:	48 8d 7b 20          	lea    0x20(%rbx),%rdi
  41aa57:	ff d0                	callq  *%rax
  41aa59:	85 c0                	test   %eax,%eax
  41aa5b:	78 73                	js     41aad0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x160>
	    return _M_get_insert_unique_pos(__k);
  41aa5d:	48 b8 40 f8 de ff ff 	movabs $0xffffffffffdef840,%rax
  41aa64:	ff ff ff 
  41aa67:	4c 89 e6             	mov    %r12,%rsi
  41aa6a:	4c 89 ef             	mov    %r13,%rdi
  41aa6d:	4c 01 f8             	add    %r15,%rax
  41aa70:	ff d0                	callq  *%rax
    }
  41aa72:	48 83 c4 08          	add    $0x8,%rsp
  41aa76:	5b                   	pop    %rbx
  41aa77:	5d                   	pop    %rbp
  41aa78:	41 5c                	pop    %r12
  41aa7a:	41 5d                	pop    %r13
  41aa7c:	41 5e                	pop    %r14
  41aa7e:	41 5f                	pop    %r15
  41aa80:	c3                   	retq   
  41aa81:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  if (__pos._M_node == _M_rightmost())
  41aa88:	49 8b 55 20          	mov    0x20(%r13),%rdx
  41aa8c:	48 39 ea             	cmp    %rbp,%rdx
  41aa8f:	74 57                	je     41aae8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x178>
	_M_node = _Rb_tree_increment(_M_node);
  41aa91:	48 b8 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%rax
  41aa98:	ff ff ff 
  41aa9b:	48 89 ef             	mov    %rbp,%rdi
  41aa9e:	4c 01 f8             	add    %r15,%rax
  41aaa1:	ff d0                	callq  *%rax
  41aaa3:	4c 89 e7             	mov    %r12,%rdi
  41aaa6:	49 89 c6             	mov    %rax,%r14
  41aaa9:	48 8d 70 20          	lea    0x20(%rax),%rsi
  41aaad:	ff d3                	callq  *%rbx
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
  41aaaf:	85 c0                	test   %eax,%eax
  41aab1:	79 aa                	jns    41aa5d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0xed>
	      if (_S_right(__pos._M_node) == 0)
  41aab3:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
		return _Res(__after._M_node, __after._M_node);
  41aab8:	4c 89 f0             	mov    %r14,%rax
  41aabb:	4c 89 f2             	mov    %r14,%rdx
	      if (_S_right(__pos._M_node) == 0)
  41aabe:	0f 85 18 ff ff ff    	jne    41a9dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
		return _Res(0, __pos._M_node);
  41aac4:	31 c0                	xor    %eax,%eax
  41aac6:	48 89 ea             	mov    %rbp,%rdx
  41aac9:	e9 0e ff ff ff       	jmpq   41a9dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
  41aace:	66 90                	xchg   %ax,%ax
    }
  41aad0:	48 83 c4 08          	add    $0x8,%rsp
	    return _Res(0, _M_rightmost());
  41aad4:	48 89 da             	mov    %rbx,%rdx
  41aad7:	31 c0                	xor    %eax,%eax
    }
  41aad9:	5b                   	pop    %rbx
  41aada:	5d                   	pop    %rbp
  41aadb:	41 5c                	pop    %r12
  41aadd:	41 5d                	pop    %r13
  41aadf:	41 5e                	pop    %r14
  41aae1:	41 5f                	pop    %r15
  41aae3:	c3                   	retq   
  41aae4:	0f 1f 40 00          	nopl   0x0(%rax)
	    return _Res(0, _M_rightmost());
  41aae8:	31 c0                	xor    %eax,%eax
  41aaea:	e9 ed fe ff ff       	jmpq   41a9dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_+0x6c>
  41aaef:	90                   	nop

000000000041aaf0 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
        virtual void set_option_name(const std::string& option_name)
  41aaf0:	41 57                	push   %r15
  41aaf2:	41 56                	push   %r14
  41aaf4:	49 bb 10 05 21 00 00 	movabs $0x210510,%r11
  41aafb:	00 00 00 
  41aafe:	41 55                	push   %r13
  41ab00:	41 54                	push   %r12
  41ab02:	49 89 ff             	mov    %rdi,%r15
  41ab05:	55                   	push   %rbp
  41ab06:	53                   	push   %rbx
  41ab07:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41aaf0 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  41ab0e:	48 83 ec 58          	sub    $0x58,%rsp
  41ab12:	4c 01 db             	add    %r11,%rbx
	: allocator_type(__a), _M_p(__dat) { }
  41ab15:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
  41ab1a:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  41ab1f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41ab24:	48 89 c8             	mov    %rcx,%rax
  41ab27:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
          _M_construct(__beg, __end, _Tag());
  41ab2c:	48 89 cf             	mov    %rcx,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41ab2f:	48 83 c0 10          	add    $0x10,%rax
  41ab33:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
          _M_construct(__beg, __end, _Tag());
  41ab38:	48 b8 8e 89 df ff ff 	movabs $0xffffffffffdf898e,%rax
  41ab3f:	ff ff ff 
  41ab42:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41ab46:	48 b8 88 89 df ff ff 	movabs $0xffffffffffdf8988,%rax
  41ab4d:	ff ff ff 
  41ab50:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41ab54:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  41ab5b:	ff ff ff 
  41ab5e:	48 01 d8             	add    %rbx,%rax
  41ab61:	ff d0                	callq  *%rax
      { return &this->_M_impl._M_header; }
  41ab63:	49 8d 4f 20          	lea    0x20(%r15),%rcx
  41ab67:	48 89 cd             	mov    %rcx,%rbp
  41ab6a:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  41ab6f:	49 8b 4f 28          	mov    0x28(%r15),%rcx
      while (__x != 0)
  41ab73:	48 85 c9             	test   %rcx,%rcx
  41ab76:	0f 84 f4 00 00 00    	je     41ac70 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
  41ab7c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41ab81:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  41ab86:	49 89 ce             	mov    %rcx,%r14
  41ab89:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41ab8e:	eb 2f                	jmp    41abbf <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf>
	return __builtin_memcmp(__s1, __s2, __n);
  41ab90:	48 b8 e0 e4 dd ff ff 	movabs $0xffffffffffdde4e0,%rax
  41ab97:	ff ff ff 
  41ab9a:	49 8b 7e 20          	mov    0x20(%r14),%rdi
  41ab9e:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41aba3:	48 01 d8             	add    %rbx,%rax
  41aba6:	49 89 df             	mov    %rbx,%r15
  41aba9:	ff d0                	callq  *%rax
	if (!__r)
  41abab:	85 c0                	test   %eax,%eax
  41abad:	74 23                	je     41abd2 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe2>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41abaf:	85 c0                	test   %eax,%eax
  41abb1:	78 3e                	js     41abf1 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x101>
	  __x = _S_right(__x);
  41abb3:	4c 89 f5             	mov    %r14,%rbp
	  __y = __x, __x = _S_left(__x);
  41abb6:	4d 8b 76 10          	mov    0x10(%r14),%r14
      while (__x != 0)
  41abba:	4d 85 f6             	test   %r14,%r14
  41abbd:	74 3b                	je     41abfa <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10a>
  41abbf:	4d 8b 6e 28          	mov    0x28(%r14),%r13
  41abc3:	4c 89 e2             	mov    %r12,%rdx
  41abc6:	4d 39 e5             	cmp    %r12,%r13
  41abc9:	49 0f 46 d5          	cmovbe %r13,%rdx
	if (__n == 0)
  41abcd:	48 85 d2             	test   %rdx,%rdx
  41abd0:	75 be                	jne    41ab90 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>
	const difference_type __d = difference_type(__n1 - __n2);
  41abd2:	4d 89 e8             	mov    %r13,%r8
  41abd5:	4d 29 e0             	sub    %r12,%r8
	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
  41abd8:	49 81 f8 ff ff ff 7f 	cmp    $0x7fffffff,%r8
  41abdf:	7f d2                	jg     41abb3 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc3>
	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
  41abe1:	49 81 f8 00 00 00 80 	cmp    $0xffffffff80000000,%r8
  41abe8:	7c 07                	jl     41abf1 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x101>
	  return int(__d);
  41abea:	44 89 c0             	mov    %r8d,%eax
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41abed:	85 c0                	test   %eax,%eax
  41abef:	79 c2                	jns    41abb3 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc3>
  41abf1:	4d 8b 76 18          	mov    0x18(%r14),%r14
      while (__x != 0)
  41abf5:	4d 85 f6             	test   %r14,%r14
  41abf8:	75 c5                	jne    41abbf <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcf>
	if (__i == end() || key_comp()(__k, (*__i).first))
  41abfa:	48 39 6c 24 18       	cmp    %rbp,0x18(%rsp)
  41abff:	74 6f                	je     41ac70 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
    { return __lhs.compare(__rhs) < 0; }
  41ac01:	48 b8 a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rax
  41ac08:	ff ff ff 
  41ac0b:	48 8d 75 20          	lea    0x20(%rbp),%rsi
  41ac0f:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41ac14:	48 01 d8             	add    %rbx,%rax
  41ac17:	49 89 df             	mov    %rbx,%r15
  41ac1a:	ff d0                	callq  *%rax
  41ac1c:	85 c0                	test   %eax,%eax
  41ac1e:	78 50                	js     41ac70 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x180>
	this->_M_assign(__str);
  41ac20:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  41ac27:	ff ff ff 
	return (*__i).second;
  41ac2a:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
  41ac2e:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  41ac33:	49 89 df             	mov    %rbx,%r15
  41ac36:	48 01 d8             	add    %rbx,%rax
  41ac39:	ff d0                	callq  *%rax
	if (!_M_is_local())
  41ac3b:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  41ac40:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41ac45:	49 83 c4 10          	add    $0x10,%r12
  41ac49:	4c 39 e7             	cmp    %r12,%rdi
  41ac4c:	74 0f                	je     41ac5d <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16d>
  41ac4e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ac55:	ff ff ff 
  41ac58:	48 01 d8             	add    %rbx,%rax
  41ac5b:	ff d0                	callq  *%rax
        {           set_substitute("option", option_name);}
  41ac5d:	48 83 c4 58          	add    $0x58,%rsp
  41ac61:	5b                   	pop    %rbx
  41ac62:	5d                   	pop    %rbp
  41ac63:	41 5c                	pop    %r12
  41ac65:	41 5d                	pop    %r13
  41ac67:	41 5e                	pop    %r14
  41ac69:	41 5f                	pop    %r15
  41ac6b:	c3                   	retq   
  41ac6c:	0f 1f 40 00          	nopl   0x0(%rax)
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41ac70:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41ac77:	ff ff ff 
  41ac7a:	bf 60 00 00 00       	mov    $0x60,%edi
  41ac7f:	49 89 df             	mov    %rbx,%r15
  41ac82:	48 01 d8             	add    %rbx,%rax
  41ac85:	ff d0                	callq  *%rax
  41ac87:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  41ac8c:	49 89 c5             	mov    %rax,%r13
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
  41ac8f:	4c 8d 78 20          	lea    0x20(%rax),%r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ac93:	48 8d 40 30          	lea    0x30(%rax),%rax
          _M_construct(__beg, __end, _Tag());
  41ac97:	4c 89 ff             	mov    %r15,%rdi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ac9a:	49 89 c4             	mov    %rax,%r12
	: allocator_type(__a), _M_p(__dat) { }
  41ac9d:	49 89 45 20          	mov    %rax,0x20(%r13)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41aca1:	48 89 f2             	mov    %rsi,%rdx
          _M_construct(__beg, __end, _Tag());
  41aca4:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  41acab:	ff ff ff 
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41acae:	48 03 54 24 38       	add    0x38(%rsp),%rdx
          _M_construct(__beg, __end, _Tag());
  41acb3:	48 01 d8             	add    %rbx,%rax
  41acb6:	ff d0                	callq  *%rax
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
  41acb8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41acbd:	49 8d 4d 50          	lea    0x50(%r13),%rcx
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
  41acc1:	48 89 ee             	mov    %rbp,%rsi
      { _M_string_length = __length; }
  41acc4:	49 c7 45 48 00 00 00 	movq   $0x0,0x48(%r13)
  41accb:	00 
      { __c1 = __c2; }
  41accc:	41 c6 45 50 00       	movb   $0x0,0x50(%r13)
  41acd1:	4c 89 fa             	mov    %r15,%rdx
	: allocator_type(__a), _M_p(__dat) { }
  41acd4:	49 89 4d 40          	mov    %rcx,0x40(%r13)
  41acd8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41acdd:	48 8d 78 18          	lea    0x18(%rax),%rdi
  41ace1:	48 b8 70 f9 de ff ff 	movabs $0xffffffffffdef970,%rax
  41ace8:	ff ff ff 
  41aceb:	48 01 d8             	add    %rbx,%rax
  41acee:	ff d0                	callq  *%rax
	    if (__res.second)
  41acf0:	48 85 d2             	test   %rdx,%rdx
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
  41acf3:	48 89 c5             	mov    %rax,%rbp
	    if (__res.second)
  41acf6:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41acfb:	74 6c                	je     41ad69 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x279>
      bool __insert_left = (__x != 0 || __p == _M_end()
  41acfd:	48 39 54 24 18       	cmp    %rdx,0x18(%rsp)
  41ad02:	40 0f 94 c7          	sete   %dil
			    || _M_impl._M_key_compare(_S_key(__z),
  41ad06:	48 85 c0             	test   %rax,%rax
  41ad09:	0f 95 c0             	setne  %al
      bool __insert_left = (__x != 0 || __p == _M_end()
  41ad0c:	40 08 c7             	or     %al,%dil
  41ad0f:	75 28                	jne    41ad39 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x249>
    { return __lhs.compare(__rhs) < 0; }
  41ad11:	48 b8 a0 e3 dd ff ff 	movabs $0xffffffffffdde3a0,%rax
  41ad18:	ff ff ff 
  41ad1b:	4c 89 ff             	mov    %r15,%rdi
  41ad1e:	48 8d 72 20          	lea    0x20(%rdx),%rsi
  41ad22:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41ad27:	49 89 df             	mov    %rbx,%r15
  41ad2a:	48 01 d8             	add    %rbx,%rax
  41ad2d:	ff d0                	callq  *%rax
			    || _M_impl._M_key_compare(_S_key(__z),
  41ad2f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  41ad34:	c1 e8 1f             	shr    $0x1f,%eax
  41ad37:	89 c7                	mov    %eax,%edi
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  41ad39:	48 b8 f0 e3 dd ff ff 	movabs $0xffffffffffdde3f0,%rax
  41ad40:	ff ff ff 
  41ad43:	40 0f b6 ff          	movzbl %dil,%edi
  41ad47:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  41ad4c:	48 01 d8             	add    %rbx,%rax
  41ad4f:	4c 89 ee             	mov    %r13,%rsi
  41ad52:	49 89 df             	mov    %rbx,%r15
  41ad55:	ff d0                	callq  *%rax
      ++_M_impl._M_node_count;
  41ad57:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41ad5c:	4c 89 ed             	mov    %r13,%rbp
  41ad5f:	48 83 40 40 01       	addq   $0x1,0x40(%rax)
  41ad64:	e9 b7 fe ff ff       	jmpq   41ac20 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x130>
  41ad69:	49 8b 7d 40          	mov    0x40(%r13),%rdi
  41ad6d:	49 be 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r14
  41ad74:	ff ff ff 
	if (!_M_is_local())
  41ad77:	48 39 f9             	cmp    %rdi,%rcx
  41ad7a:	74 09                	je     41ad85 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x295>
      { ::operator delete(__p); }
  41ad7c:	49 89 df             	mov    %rbx,%r15
  41ad7f:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41ad83:	ff d0                	callq  *%rax
  41ad85:	49 8b 7d 20          	mov    0x20(%r13),%rdi
  41ad89:	49 39 fc             	cmp    %rdi,%r12
  41ad8c:	74 09                	je     41ad97 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a7>
  41ad8e:	49 89 df             	mov    %rbx,%r15
  41ad91:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41ad95:	ff d0                	callq  *%rax
  41ad97:	4c 89 ef             	mov    %r13,%rdi
  41ad9a:	49 89 df             	mov    %rbx,%r15
  41ad9d:	49 01 de             	add    %rbx,%r14
  41ada0:	41 ff d6             	callq  *%r14
  41ada3:	e9 78 fe ff ff       	jmpq   41ac20 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x130>
	  __catch(...)
  41ada8:	48 89 c7             	mov    %rax,%rdi
  41adab:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41adb2:	ff ff ff 
  41adb5:	49 89 df             	mov    %rbx,%r15
  41adb8:	48 01 d8             	add    %rbx,%rax
  41adbb:	ff d0                	callq  *%rax
  41adbd:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41adc4:	ff ff ff 
  41adc7:	4c 89 ef             	mov    %r13,%rdi
  41adca:	48 01 d8             	add    %rbx,%rax
  41adcd:	ff d0                	callq  *%rax
	      __throw_exception_again;
  41adcf:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41add6:	ff ff ff 
  41add9:	48 01 d8             	add    %rbx,%rax
  41addc:	ff d0                	callq  *%rax
  41adde:	48 89 c5             	mov    %rax,%rbp
  41ade1:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  41ade6:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41adeb:	49 83 c4 10          	add    $0x10,%r12
  41adef:	4c 39 e7             	cmp    %r12,%rdi
  41adf2:	74 12                	je     41ae06 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x316>
  41adf4:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41adfb:	ff ff ff 
  41adfe:	49 89 df             	mov    %rbx,%r15
  41ae01:	48 01 d8             	add    %rbx,%rax
  41ae04:	ff d0                	callq  *%rax
  41ae06:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41ae0d:	ff ff ff 
  41ae10:	48 89 ef             	mov    %rbp,%rdi
  41ae13:	49 89 df             	mov    %rbx,%r15
  41ae16:	48 01 d8             	add    %rbx,%rax
  41ae19:	ff d0                	callq  *%rax
  41ae1b:	48 89 c5             	mov    %rax,%rbp
	  __catch(...)
  41ae1e:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  41ae25:	ff ff ff 
  41ae28:	49 89 df             	mov    %rbx,%r15
  41ae2b:	48 01 d8             	add    %rbx,%rax
  41ae2e:	ff d0                	callq  *%rax
  41ae30:	eb af                	jmp    41ade1 <_ZN5boost15program_options22error_with_option_name15set_option_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f1>
  41ae32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ae39:	00 00 00 
  41ae3c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041ae40 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_>:
template<class T> inline void checked_delete(T * x)
  41ae40:	41 57                	push   %r15
  41ae42:	41 56                	push   %r14
  41ae44:	49 bb c0 01 21 00 00 	movabs $0x2101c0,%r11
  41ae4b:	00 00 00 
  41ae4e:	41 55                	push   %r13
  41ae50:	41 54                	push   %r12
  41ae52:	55                   	push   %rbp
  41ae53:	48 8d 2d e6 ff ff ff 	lea    -0x1a(%rip),%rbp        # 41ae40 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_>
  41ae5a:	53                   	push   %rbx
  41ae5b:	4c 01 dd             	add    %r11,%rbp
  41ae5e:	48 83 ec 18          	sub    $0x18,%rsp
    delete x;
  41ae62:	48 85 ff             	test   %rdi,%rdi
  41ae65:	0f 84 d5 00 00 00    	je     41af40 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x100>
  41ae6b:	4c 8b 7f 10          	mov    0x10(%rdi),%r15
  41ae6f:	49 89 fc             	mov    %rdi,%r12
      while (__x != 0)
  41ae72:	4d 85 ff             	test   %r15,%r15
  41ae75:	0f 84 9d 00 00 00    	je     41af18 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0xd8>
	  _M_erase(_S_right(__x));
  41ae7b:	48 b8 70 d0 de ff ff 	movabs $0xffffffffffded070,%rax
  41ae82:	ff ff ff 
  41ae85:	49 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r13
  41ae8c:	ff ff ff 
  41ae8f:	4c 8d 34 28          	lea    (%rax,%rbp,1),%r14
  41ae93:	48 b8 c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rax
  41ae9a:	ff ff ff 
  41ae9d:	49 01 ed             	add    %rbp,%r13
  41aea0:	48 01 e8             	add    %rbp,%rax
  41aea3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41aea8:	eb 17                	jmp    41aec1 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x81>
  41aeaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41aeb0:	4c 89 ff             	mov    %r15,%rdi
  41aeb3:	49 89 ef             	mov    %rbp,%r15
  41aeb6:	41 ff d5             	callq  *%r13
      while (__x != 0)
  41aeb9:	48 85 db             	test   %rbx,%rbx
  41aebc:	49 89 df             	mov    %rbx,%r15
  41aebf:	74 57                	je     41af18 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0xd8>
	  _M_erase(_S_right(__x));
  41aec1:	49 8b 77 18          	mov    0x18(%r15),%rsi
  41aec5:	4c 89 e7             	mov    %r12,%rdi
  41aec8:	41 ff d6             	callq  *%r14
        if( pi_ != 0 ) pi_->release();
  41aecb:	49 8b 47 28          	mov    0x28(%r15),%rax
  41aecf:	49 8b 5f 10          	mov    0x10(%r15),%rbx
  41aed3:	48 85 c0             	test   %rax,%rax
  41aed6:	74 d8                	je     41aeb0 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
        if( atomic_decrement( &use_count_ ) == 1 )
  41aed8:	f0 83 68 08 01       	lock subl $0x1,0x8(%rax)
  41aedd:	75 d1                	jne    41aeb0 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
            dispose();
  41aedf:	48 8b 10             	mov    (%rax),%rdx
  41aee2:	48 89 c7             	mov    %rax,%rdi
  41aee5:	48 89 04 24          	mov    %rax,(%rsp)
  41aee9:	ff 52 10             	callq  *0x10(%rdx)
      { return __atomic_fetch_sub(&_M_i, __i, __m); }
  41aeec:	48 8b 04 24          	mov    (%rsp),%rax
  41aef0:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  41aef5:	f0 0f c1 50 0c       	lock xadd %edx,0xc(%rax)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41aefa:	83 fa 01             	cmp    $0x1,%edx
  41aefd:	75 b1                	jne    41aeb0 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
            destroy();
  41aeff:	48 8b 10             	mov    (%rax),%rdx
        delete this;
  41af02:	48 89 c7             	mov    %rax,%rdi
            destroy();
  41af05:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  41af09:	48 3b 4c 24 08       	cmp    0x8(%rsp),%rcx
  41af0e:	75 3f                	jne    41af4f <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x10f>
        delete this;
  41af10:	ff 52 08             	callq  *0x8(%rdx)
  41af13:	eb 9b                	jmp    41aeb0 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
  41af15:	0f 1f 00             	nopl   (%rax)
}
  41af18:	48 83 c4 18          	add    $0x18,%rsp
    delete x;
  41af1c:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41af23:	ff ff ff 
  41af26:	4c 89 e7             	mov    %r12,%rdi
}
  41af29:	5b                   	pop    %rbx
    delete x;
  41af2a:	48 01 e8             	add    %rbp,%rax
  41af2d:	be 30 00 00 00       	mov    $0x30,%esi
}
  41af32:	5d                   	pop    %rbp
  41af33:	41 5c                	pop    %r12
  41af35:	41 5d                	pop    %r13
  41af37:	41 5e                	pop    %r14
  41af39:	41 5f                	pop    %r15
    delete x;
  41af3b:	ff e0                	jmpq   *%rax
  41af3d:	0f 1f 00             	nopl   (%rax)
}
  41af40:	48 83 c4 18          	add    $0x18,%rsp
  41af44:	5b                   	pop    %rbx
  41af45:	5d                   	pop    %rbp
  41af46:	41 5c                	pop    %r12
  41af48:	41 5d                	pop    %r13
  41af4a:	41 5e                	pop    %r14
  41af4c:	41 5f                	pop    %r15
  41af4e:	c3                   	retq   
            destroy();
  41af4f:	ff d1                	callq  *%rcx
  41af51:	e9 5a ff ff ff       	jmpq   41aeb0 <_ZN5boost14checked_deleteIN4YAML6detail6memoryEEEvPT_+0x70>
  41af56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41af5d:	00 00 00 

000000000041af60 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_>:
template<class T> inline void checked_delete(T * x)
  41af60:	41 57                	push   %r15
  41af62:	55                   	push   %rbp
  41af63:	48 8d 2d f6 ff ff ff 	lea    -0xa(%rip),%rbp        # 41af60 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_>
  41af6a:	49 bb a0 00 21 00 00 	movabs $0x2100a0,%r11
  41af71:	00 00 00 
  41af74:	53                   	push   %rbx
  41af75:	4c 01 dd             	add    %r11,%rbp
    delete x;
  41af78:	48 85 ff             	test   %rdi,%rdi
  41af7b:	74 3b                	je     41afb8 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_+0x58>
  41af7d:	48 89 fb             	mov    %rdi,%rbx
  41af80:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  41af84:	48 85 ff             	test   %rdi,%rdi
  41af87:	74 0f                	je     41af98 <_ZN5boost14checked_deleteIN4YAML6detail13memory_holderEEEvPT_+0x38>
  41af89:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41af90:	ff ff ff 
  41af93:	48 01 e8             	add    %rbp,%rax
  41af96:	ff d0                	callq  *%rax
  41af98:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41af9f:	ff ff ff 
  41afa2:	48 89 df             	mov    %rbx,%rdi
  41afa5:	be 10 00 00 00       	mov    $0x10,%esi
}
  41afaa:	5b                   	pop    %rbx
    delete x;
  41afab:	48 01 e8             	add    %rbp,%rax
}
  41afae:	5d                   	pop    %rbp
  41afaf:	41 5f                	pop    %r15
    delete x;
  41afb1:	ff e0                	jmpq   *%rax
  41afb3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
}
  41afb8:	5b                   	pop    %rbx
  41afb9:	5d                   	pop    %rbp
  41afba:	41 5f                	pop    %r15
  41afbc:	c3                   	retq   
  41afbd:	0f 1f 00             	nopl   (%rax)

000000000041afc0 <_ZNK4YAML4Node16EnsureNodeExistsEv>:
inline void Node::EnsureNodeExists() const {
  41afc0:	41 57                	push   %r15
  41afc2:	41 56                	push   %r14
  41afc4:	49 bb 40 00 21 00 00 	movabs $0x210040,%r11
  41afcb:	00 00 00 
  41afce:	41 55                	push   %r13
  41afd0:	41 54                	push   %r12
  41afd2:	55                   	push   %rbp
  41afd3:	53                   	push   %rbx
  41afd4:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41afc0 <_ZNK4YAML4Node16EnsureNodeExistsEv>
  41afdb:	48 83 ec 08          	sub    $0x8,%rsp
  41afdf:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41afe2:	80 3f 00             	cmpb   $0x0,(%rdi)
  41afe5:	0f 84 90 01 00 00    	je     41b17b <_ZNK4YAML4Node16EnsureNodeExistsEv+0x1bb>
  if (!m_pNode) {
  41afeb:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
  41aff0:	48 89 fd             	mov    %rdi,%rbp
  41aff3:	74 13                	je     41b008 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x48>
}
  41aff5:	48 83 c4 08          	add    $0x8,%rsp
  41aff9:	5b                   	pop    %rbx
  41affa:	5d                   	pop    %rbp
  41affb:	41 5c                	pop    %r12
  41affd:	41 5d                	pop    %r13
  41afff:	41 5e                	pop    %r14
  41b001:	41 5f                	pop    %r15
  41b003:	c3                   	retq   
  41b004:	0f 1f 40 00          	nopl   0x0(%rax)
    m_pMemory.reset(new detail::memory_holder);
  41b008:	49 be 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%r14
  41b00f:	ff ff ff 
  41b012:	bf 10 00 00 00       	mov    $0x10,%edi
  41b017:	49 89 df             	mov    %rbx,%r15
  41b01a:	4d 8d 2c 1e          	lea    (%r14,%rbx,1),%r13
  41b01e:	41 ff d5             	callq  *%r13
  Nodes m_nodes;
};

class YAML_CPP_API memory_holder {
 public:
  memory_holder() : m_pMemory(new memory) {}
  41b021:	bf 30 00 00 00       	mov    $0x30,%edi
  41b026:	49 89 c4             	mov    %rax,%r12
  41b029:	41 ff d5             	callq  *%r13
  41b02c:	49 89 c5             	mov    %rax,%r13
	    _M_node_count(0)
  41b02f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  41b036:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41b03d:	00 
  41b03e:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  41b045:	00 
	    this->_M_header._M_left = &this->_M_header;
  41b046:	48 8d 40 08          	lea    0x8(%rax),%rax
    explicit shared_ptr( Y * p ): px( p ), pn() // Y must be complete
  41b04a:	4d 89 2c 24          	mov    %r13,(%r12)
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41b04e:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
  41b055:	00 00 
            pi_ = new sp_counted_impl_p<Y>( p );
  41b057:	bf 18 00 00 00       	mov    $0x18,%edi
  41b05c:	49 89 45 18          	mov    %rax,0x18(%r13)
	    this->_M_header._M_right = &this->_M_header;
  41b060:	49 89 45 20          	mov    %rax,0x20(%r13)
  41b064:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41b068:	ff d0                	callq  *%rax
        return *this;
    }

    void swap(shared_count & r) // nothrow
    {
        sp_counted_base * tmp = r.pi_;
  41b06a:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    explicit sp_counted_impl_p( X * px ): px_( px )
  41b06f:	48 ba c0 ef ff ff ff 	movabs $0xffffffffffffefc0,%rdx
  41b076:	ff ff ff 
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
  41b079:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41b080:	48 01 da             	add    %rbx,%rdx
  41b083:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41b08a:	4c 89 68 10          	mov    %r13,0x10(%rax)
  41b08e:	48 89 10             	mov    %rdx,(%rax)
        r.pi_ = pi_;
  41b091:	49 89 44 24 08       	mov    %rax,0x8(%r12)
        if( pi_ != 0 ) pi_->release();
  41b096:	48 85 ff             	test   %rdi,%rdi
  41b099:	74 0f                	je     41b0aa <_ZNK4YAML4Node16EnsureNodeExistsEv+0xea>
  41b09b:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41b0a2:	ff ff ff 
  41b0a5:	48 01 d8             	add    %rbx,%rax
  41b0a8:	ff d0                	callq  *%rax
        BOOST_ASSERT( p == 0 || p != px ); // catch self-reset errors
  41b0aa:	4c 3b 65 08          	cmp    0x8(%rbp),%r12
  41b0ae:	0f 84 66 01 00 00    	je     41b21a <_ZNK4YAML4Node16EnsureNodeExistsEv+0x25a>
            pi_ = new sp_counted_impl_p<Y>( p );
  41b0b4:	bf 18 00 00 00       	mov    $0x18,%edi
  41b0b9:	49 89 df             	mov    %rbx,%r15
  41b0bc:	49 01 de             	add    %rbx,%r14
  41b0bf:	41 ff d6             	callq  *%r14
        sp_counted_base * tmp = r.pi_;
  41b0c2:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41b0c6:	48 ba 08 f0 ff ff ff 	movabs $0xfffffffffffff008,%rdx
  41b0cd:	ff ff ff 
  41b0d0:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41b0d7:	48 01 da             	add    %rbx,%rdx
  41b0da:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41b0e1:	4c 89 60 10          	mov    %r12,0x10(%rax)
  41b0e5:	48 89 10             	mov    %rdx,(%rax)
  41b0e8:	4c 89 65 08          	mov    %r12,0x8(%rbp)
        if( pi_ != 0 ) pi_->release();
  41b0ec:	48 85 ff             	test   %rdi,%rdi
        r.pi_ = pi_;
  41b0ef:	48 89 45 10          	mov    %rax,0x10(%rbp)
        if( pi_ != 0 ) pi_->release();
  41b0f3:	74 1c                	je     41b111 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x151>
  41b0f5:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41b0fc:	ff ff ff 
  41b0ff:	48 01 d8             	add    %rbx,%rax
  41b102:	ff d0                	callq  *%rax
  41b104:	4c 8b 65 08          	mov    0x8(%rbp),%r12
        BOOST_ASSERT( px != 0 );
  41b108:	4d 85 e4             	test   %r12,%r12
  41b10b:	0f 84 36 02 00 00    	je     41b347 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x387>
  41b111:	49 8b 3c 24          	mov    (%r12),%rdi
  41b115:	48 85 ff             	test   %rdi,%rdi
  41b118:	0f 84 f9 01 00 00    	je     41b317 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x357>

  node& create_node() { return m_pMemory->create_node(); }
  41b11e:	48 b8 a0 e4 dd ff ff 	movabs $0xffffffffffdde4a0,%rax
  41b125:	ff ff ff 
  41b128:	49 89 df             	mov    %rbx,%r15
  41b12b:	48 01 d8             	add    %rbx,%rax
  41b12e:	ff d0                	callq  *%rax
  41b130:	49 89 c4             	mov    %rax,%r12
    m_pNode = &m_pMemory->create_node();
  41b133:	48 89 45 18          	mov    %rax,0x18(%rbp)
    if (type != NodeType::Undefined)
      mark_defined();
    m_pRef->set_type(type);
  }
  void set_null() {
    mark_defined();
  41b137:	48 89 c7             	mov    %rax,%rdi
  41b13a:	48 b8 50 d9 de ff ff 	movabs $0xffffffffffded950,%rax
  41b141:	ff ff ff 
  41b144:	48 01 d8             	add    %rbx,%rax
  41b147:	ff d0                	callq  *%rax
  41b149:	49 8b 04 24          	mov    (%r12),%rax
  41b14d:	48 85 c0             	test   %rax,%rax
  41b150:	0f 84 00 02 00 00    	je     41b356 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x396>
  41b156:	48 8b 38             	mov    (%rax),%rdi
  41b159:	48 85 ff             	test   %rdi,%rdi
  41b15c:	74 77                	je     41b1d5 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x215>
}
  41b15e:	48 83 c4 08          	add    $0x8,%rsp
  void set_null() { m_pData->set_null(); }
  41b162:	48 b8 60 e4 dd ff ff 	movabs $0xffffffffffdde460,%rax
  41b169:	ff ff ff 
  41b16c:	48 01 d8             	add    %rbx,%rax
  41b16f:	5b                   	pop    %rbx
  41b170:	5d                   	pop    %rbp
  41b171:	41 5c                	pop    %r12
  41b173:	41 5d                	pop    %r13
  41b175:	41 5e                	pop    %r14
  41b177:	41 5f                	pop    %r15
  41b179:	ff e0                	jmpq   *%rax
    throw InvalidNode();
  41b17b:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41b182:	ff ff ff 
  41b185:	bf 40 00 00 00       	mov    $0x40,%edi
  41b18a:	49 89 df             	mov    %rbx,%r15
  41b18d:	48 01 d8             	add    %rbx,%rax
  41b190:	ff d0                	callq  *%rax
  41b192:	48 89 c5             	mov    %rax,%rbp
  41b195:	48 89 c7             	mov    %rax,%rdi
  41b198:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  41b19f:	ff ff ff 
  41b1a2:	48 01 d8             	add    %rbx,%rax
  41b1a5:	ff d0                	callq  *%rax
  41b1a7:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  41b1ae:	ff ff ff 
  41b1b1:	48 89 ef             	mov    %rbp,%rdi
  41b1b4:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41b1b8:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41b1bf:	ff ff ff 
  41b1c2:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41b1c6:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41b1cd:	ff ff ff 
  41b1d0:	48 01 d8             	add    %rbx,%rax
  41b1d3:	ff d0                	callq  *%rax
  41b1d5:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  41b1dc:	ff ff ff 
  41b1df:	48 01 d8             	add    %rbx,%rax
  41b1e2:	ff d0                	callq  *%rax
        catch(...)
  41b1e4:	48 89 c7             	mov    %rax,%rdi
  41b1e7:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41b1ee:	ff ff ff 
  41b1f1:	49 89 df             	mov    %rbx,%r15
  41b1f4:	48 01 d8             	add    %rbx,%rax
  41b1f7:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41b1f9:	48 b8 60 ff de ff ff 	movabs $0xffffffffffdeff60,%rax
  41b200:	ff ff ff 
  41b203:	4c 89 e7             	mov    %r12,%rdi
  41b206:	48 01 d8             	add    %rbx,%rax
  41b209:	ff d0                	callq  *%rax
            throw;
  41b20b:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41b212:	ff ff ff 
  41b215:	48 01 d8             	add    %rbx,%rax
  41b218:	ff d0                	callq  *%rax
        BOOST_ASSERT( p == 0 || p != px ); // catch self-reset errors
  41b21a:	48 b8 60 88 df ff ff 	movabs $0xffffffffffdf8860,%rax
  41b221:	ff ff ff 
  41b224:	ba ba 02 00 00       	mov    $0x2ba,%edx
  41b229:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  41b22d:	48 b8 00 7a df ff ff 	movabs $0xffffffffffdf7a00,%rax
  41b234:	ff ff ff 
  41b237:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41b23b:	48 b8 8f 89 df ff ff 	movabs $0xffffffffffdf898f,%rax
  41b242:	ff ff ff 
        BOOST_ASSERT( px != 0 );
  41b245:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41b249:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  41b250:	ff ff ff 
  41b253:	49 89 df             	mov    %rbx,%r15
  41b256:	48 01 d8             	add    %rbx,%rax
  41b259:	ff d0                	callq  *%rax
        catch(...)
  41b25b:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41b262:	ff ff ff 
  41b265:	48 89 c5             	mov    %rax,%rbp
  41b268:	49 89 df             	mov    %rbx,%r15
  41b26b:	48 01 da             	add    %rbx,%rdx
  41b26e:	ff d2                	callq  *%rdx
  41b270:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41b277:	ff ff ff 
  41b27a:	48 89 ef             	mov    %rbp,%rdi
  41b27d:	48 01 d8             	add    %rbx,%rax
  41b280:	ff d0                	callq  *%rax
  41b282:	48 89 c7             	mov    %rax,%rdi
  41b285:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41b28c:	ff ff ff 
  41b28f:	49 89 df             	mov    %rbx,%r15
  41b292:	48 01 d8             	add    %rbx,%rax
  41b295:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41b297:	48 b8 40 fe de ff ff 	movabs $0xffffffffffdefe40,%rax
  41b29e:	ff ff ff 
  41b2a1:	4c 89 ef             	mov    %r13,%rdi
  41b2a4:	48 01 d8             	add    %rbx,%rax
  41b2a7:	ff d0                	callq  *%rax
            throw;
  41b2a9:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41b2b0:	ff ff ff 
  41b2b3:	48 01 d8             	add    %rbx,%rax
  41b2b6:	ff d0                	callq  *%rax
  41b2b8:	48 89 c5             	mov    %rax,%rbp
    m_pMemory.reset(new detail::memory_holder);
  41b2bb:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41b2c2:	ff ff ff 
  41b2c5:	4c 89 e7             	mov    %r12,%rdi
  41b2c8:	be 10 00 00 00       	mov    $0x10,%esi
  41b2cd:	48 01 d8             	add    %rbx,%rax
  41b2d0:	49 89 df             	mov    %rbx,%r15
  41b2d3:	ff d0                	callq  *%rax
  41b2d5:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41b2dc:	ff ff ff 
  41b2df:	48 89 ef             	mov    %rbp,%rdi
  41b2e2:	48 01 d8             	add    %rbx,%rax
  41b2e5:	ff d0                	callq  *%rax
  41b2e7:	48 89 c5             	mov    %rax,%rbp
        catch(...)
  41b2ea:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  41b2f1:	ff ff ff 
  41b2f4:	49 89 df             	mov    %rbx,%r15
  41b2f7:	48 01 d8             	add    %rbx,%rax
  41b2fa:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41b2fc:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  41b301:	48 85 ff             	test   %rdi,%rdi
  41b304:	74 b5                	je     41b2bb <_ZNK4YAML4Node16EnsureNodeExistsEv+0x2fb>
  41b306:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41b30d:	ff ff ff 
  41b310:	48 01 d8             	add    %rbx,%rax
  41b313:	ff d0                	callq  *%rax
  41b315:	eb a4                	jmp    41b2bb <_ZNK4YAML4Node16EnsureNodeExistsEv+0x2fb>
  41b317:	48 b8 a0 86 df ff ff 	movabs $0xffffffffffdf86a0,%rax
  41b31e:	ff ff ff 
  41b321:	ba de 02 00 00       	mov    $0x2de,%edx
  41b326:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  41b32a:	48 b8 00 7a df ff ff 	movabs $0xffffffffffdf7a00,%rax
  41b331:	ff ff ff 
  41b334:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41b338:	48 b8 a9 7d df ff ff 	movabs $0xffffffffffdf7da9,%rax
  41b33f:	ff ff ff 
  41b342:	e9 fe fe ff ff       	jmpq   41b245 <_ZNK4YAML4Node16EnsureNodeExistsEv+0x285>
  41b347:	48 b8 8e ec dd ff ff 	movabs $0xffffffffffddec8e,%rax
  41b34e:	ff ff ff 
  41b351:	48 01 d8             	add    %rbx,%rax
  41b354:	ff d0                	callq  *%rax
  41b356:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  41b35d:	ff ff ff 
  41b360:	48 01 d8             	add    %rbx,%rax
  41b363:	ff d0                	callq  *%rax
    throw InvalidNode();
  41b365:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41b36c:	ff ff ff 
  41b36f:	49 89 c4             	mov    %rax,%r12
  41b372:	48 89 ef             	mov    %rbp,%rdi
  41b375:	49 89 df             	mov    %rbx,%r15
  41b378:	48 01 da             	add    %rbx,%rdx
  41b37b:	ff d2                	callq  *%rdx
  41b37d:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41b384:	ff ff ff 
  41b387:	4c 89 e7             	mov    %r12,%rdi
  41b38a:	48 01 d8             	add    %rbx,%rax
  41b38d:	ff d0                	callq  *%rax
  41b38f:	90                   	nop

000000000041b390 <_ZNK4YAML4NodeixIiEEKS0_RKT_>:
inline const Node Node::operator[](const Key& key) const {
  41b390:	41 57                	push   %r15
  41b392:	41 56                	push   %r14
  41b394:	49 bb 70 fc 20 00 00 	movabs $0x20fc70,%r11
  41b39b:	00 00 00 
  41b39e:	41 55                	push   %r13
  41b3a0:	4c 8d 2d e9 ff ff ff 	lea    -0x17(%rip),%r13        # 41b390 <_ZNK4YAML4NodeixIiEEKS0_RKT_>
  41b3a7:	41 54                	push   %r12
  41b3a9:	55                   	push   %rbp
  41b3aa:	53                   	push   %rbx
  41b3ab:	4d 01 dd             	add    %r11,%r13
  41b3ae:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  if (!m_isValid)
  41b3b5:	80 3e 00             	cmpb   $0x0,(%rsi)
inline const Node Node::operator[](const Key& key) const {
  41b3b8:	48 89 7c 24 40       	mov    %rdi,0x40(%rsp)
  41b3bd:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
  41b3c2:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  if (!m_isValid)
  41b3c7:	0f 84 3f 04 00 00    	je     41b80c <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x47c>
  41b3cd:	48 89 f3             	mov    %rsi,%rbx
  EnsureNodeExists();
  41b3d0:	48 b8 c0 ff de ff ff 	movabs $0xffffffffffdeffc0,%rax
  41b3d7:	ff ff ff 
  41b3da:	48 89 f7             	mov    %rsi,%rdi
  41b3dd:	4c 01 e8             	add    %r13,%rax
  41b3e0:	ff d0                	callq  *%rax
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41b3e2:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  41b3e6:	48 89 de             	mov    %rbx,%rsi
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b3e9:	48 8b 5b 10          	mov    0x10(%rbx),%rbx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41b3ed:	48 85 db             	test   %rbx,%rbx
  41b3f0:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41b3f5:	0f 84 55 01 00 00    	je     41b550 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1c0>
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  41b3fb:	48 8d 43 08          	lea    0x8(%rbx),%rax
  41b3ff:	f0 83 00 01          	lock addl $0x1,(%rax)
  detail::node* value = static_cast<const detail::node&>(*m_pNode)
  41b403:	48 8b 56 18          	mov    0x18(%rsi),%rdx
  41b407:	f0 83 00 01          	lock addl $0x1,(%rax)
  41b40b:	48 8b 12             	mov    (%rdx),%rdx
        BOOST_ASSERT( px != 0 );
  41b40e:	48 85 d2             	test   %rdx,%rdx
  41b411:	0f 84 60 04 00 00    	je     41b877 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x4e7>
  41b417:	f0 83 00 01          	lock addl $0x1,(%rax)
  41b41b:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  41b420:	48 8b 02             	mov    (%rdx),%rax
  41b423:	48 85 c0             	test   %rax,%rax
  41b426:	0f 84 3c 04 00 00    	je     41b868 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x4d8>
  switch (m_type) {
  41b42c:	8b 50 04             	mov    0x4(%rax),%edx
  41b42f:	83 fa 02             	cmp    $0x2,%edx
  41b432:	0f 84 40 01 00 00    	je     41b578 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1e8>
  41b438:	0f 82 82 00 00 00    	jb     41b4c0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x130>
  41b43e:	83 fa 03             	cmp    $0x3,%edx
  41b441:	0f 85 91 01 00 00    	jne    41b5d8 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x248>
  41b447:	48 85 db             	test   %rbx,%rbx
  41b44a:	0f 84 00 03 00 00    	je     41b750 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3c0>
  41b450:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  41b454:	f0 83 02 01          	lock addl $0x1,(%rdx)
    return key >= 0 ? get_idx<std::size_t>::get(
  41b458:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  41b45d:	45 31 e4             	xor    %r12d,%r12d
  41b460:	48 bd c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rbp
  41b467:	ff ff ff 
  41b46a:	8b 0e                	mov    (%rsi),%ecx
  41b46c:	85 c9                	test   %ecx,%ecx
  41b46e:	78 41                	js     41b4b1 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x121>
  41b470:	f0 83 02 01          	lock addl $0x1,(%rdx)
  41b474:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  41b479:	48 8b 48 50          	mov    0x50(%rax),%rcx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41b47d:	48 8b 40 58          	mov    0x58(%rax),%rax
  41b481:	48 63 12             	movslq (%rdx),%rdx
  41b484:	48 29 c8             	sub    %rcx,%rax
  41b487:	48 c1 f8 03          	sar    $0x3,%rax
    return key < sequence.size() ? sequence[key] : 0;
  41b48b:	48 39 d0             	cmp    %rdx,%rax
  41b48e:	0f 86 1c 04 00 00    	jbe    41b8b0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x520>
        if( pi_ != 0 ) pi_->release();
  41b494:	48 85 db             	test   %rbx,%rbx
  41b497:	4c 8b 24 d1          	mov    (%rcx,%rdx,8),%r12
  41b49b:	74 49                	je     41b4e6 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x156>
  41b49d:	48 bd c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rbp
  41b4a4:	ff ff ff 
  41b4a7:	48 89 df             	mov    %rbx,%rdi
  41b4aa:	4a 8d 44 2d 00       	lea    0x0(%rbp,%r13,1),%rax
  41b4af:	ff d0                	callq  *%rax
  41b4b1:	48 89 df             	mov    %rbx,%rdi
  41b4b4:	4a 8d 44 2d 00       	lea    0x0(%rbp,%r13,1),%rax
  41b4b9:	ff d0                	callq  *%rax
  41b4bb:	eb 06                	jmp    41b4c3 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x133>
  41b4bd:	0f 1f 00             	nopl   (%rax)
      return NULL;
  41b4c0:	45 31 e4             	xor    %r12d,%r12d
  41b4c3:	48 85 db             	test   %rbx,%rbx
  41b4c6:	74 1e                	je     41b4e6 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x156>
  41b4c8:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41b4cf:	ff ff ff 
  41b4d2:	48 89 df             	mov    %rbx,%rdi
  41b4d5:	49 8d 6c 05 00       	lea    0x0(%r13,%rax,1),%rbp
  41b4da:	ff d5                	callq  *%rbp
  41b4dc:	48 89 df             	mov    %rbx,%rdi
  41b4df:	ff d5                	callq  *%rbp
  41b4e1:	48 89 df             	mov    %rbx,%rdi
  41b4e4:	ff d5                	callq  *%rbp
  if (!value) {
  41b4e6:	4d 85 e4             	test   %r12,%r12
  41b4e9:	0f 84 85 02 00 00    	je     41b774 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3e4>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41b4ef:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b4f4:	48 8b 78 10          	mov    0x10(%rax),%rdi
  41b4f8:	48 8b 50 08          	mov    0x8(%rax),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41b4fc:	48 85 ff             	test   %rdi,%rdi
  41b4ff:	0f 84 2b 02 00 00    	je     41b730 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3a0>
  41b505:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41b509:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41b50d:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
  41b512:	c6 01 01             	movb   $0x1,(%rcx)
  41b515:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b519:	48 89 79 10          	mov    %rdi,0x10(%rcx)
  41b51d:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41b521:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41b528:	ff ff ff 
  41b52b:	4c 01 e8             	add    %r13,%rax
  41b52e:	4c 89 61 18          	mov    %r12,0x18(%rcx)
  41b532:	ff d0                	callq  *%rax
  41b534:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    return Node(ZombieNode);
  }
  return Node(*value, m_pMemory);
}
  41b539:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  41b540:	5b                   	pop    %rbx
  41b541:	5d                   	pop    %rbp
  41b542:	41 5c                	pop    %r12
  41b544:	41 5d                	pop    %r13
  41b546:	41 5e                	pop    %r14
  41b548:	41 5f                	pop    %r15
  41b54a:	c3                   	retq   
  41b54b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  41b550:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41b555:	48 8b 40 18          	mov    0x18(%rax),%rax
  41b559:	48 8b 10             	mov    (%rax),%rdx
        BOOST_ASSERT( px != 0 );
  41b55c:	48 85 d2             	test   %rdx,%rdx
  41b55f:	0f 84 12 03 00 00    	je     41b877 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x4e7>
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b565:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  41b56c:	00 00 
  41b56e:	e9 ad fe ff ff       	jmpq   41b420 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x90>
  41b573:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      throw BadSubscript();
  41b578:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41b57f:	ff ff ff 
  41b582:	bf 40 00 00 00       	mov    $0x40,%edi
  41b587:	4d 89 ef             	mov    %r13,%r15
  41b58a:	4c 01 e8             	add    %r13,%rax
  41b58d:	ff d0                	callq  *%rax
  41b58f:	48 89 c5             	mov    %rax,%rbp
  41b592:	48 89 c7             	mov    %rax,%rdi
  41b595:	48 b8 60 b1 de ff ff 	movabs $0xffffffffffdeb160,%rax
  41b59c:	ff ff ff 
  41b59f:	4c 01 e8             	add    %r13,%rax
  41b5a2:	ff d0                	callq  *%rax
  41b5a4:	48 b8 f0 94 de ff ff 	movabs $0xffffffffffde94f0,%rax
  41b5ab:	ff ff ff 
  41b5ae:	48 89 ef             	mov    %rbp,%rdi
  41b5b1:	49 8d 54 05 00       	lea    0x0(%r13,%rax,1),%rdx
  41b5b6:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  41b5bd:	ff ff ff 
  41b5c0:	49 8d 74 05 00       	lea    0x0(%r13,%rax,1),%rsi
  41b5c5:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41b5cc:	ff ff ff 
  41b5cf:	4c 01 e8             	add    %r13,%rax
  41b5d2:	ff d0                	callq  *%rax
  41b5d4:	0f 1f 40 00          	nopl   0x0(%rax)
  41b5d8:	4c 8b a0 88 00 00 00 	mov    0x88(%rax),%r12
      { return const_iterator(&this->_M_impl._M_header); }
  41b5df:	48 83 c0 78          	add    $0x78,%rax
  41b5e3:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41b5e8:	49 39 c4             	cmp    %rax,%r12
  41b5eb:	0f 84 cf fe ff ff    	je     41b4c0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x130>
  41b5f1:	48 8d 44 24 5c       	lea    0x5c(%rsp),%rax
  41b5f6:	48 8d 6b 08          	lea    0x8(%rbx),%rbp
  41b5fa:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41b5ff:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  41b604:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  41b609:	48 b8 60 b5 de ff ff 	movabs $0xffffffffffdeb560,%rax
  41b610:	ff ff ff 
  41b613:	4c 01 e8             	add    %r13,%rax
  41b616:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        if( pi_ != 0 ) pi_->release();
  41b61b:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41b622:	ff ff ff 
  41b625:	4d 8d 74 05 00       	lea    0x0(%r13,%rax,1),%r14
  41b62a:	e9 a4 00 00 00       	jmpq   41b6d3 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x343>
  41b62f:	90                   	nop
  41b630:	f0 83 45 00 01       	lock addl $0x1,0x0(%rbp)
    if (it->first->equals(key, pMemory)) {
  41b635:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  41b63a:	f0 83 45 00 01       	lock addl $0x1,0x0(%rbp)
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41b63f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41b644:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b649:	48 89 5c 24 70       	mov    %rbx,0x70(%rsp)
  41b64e:	48 89 4c 24 68       	mov    %rcx,0x68(%rsp)
  41b653:	f0 83 45 00 01       	lock addl $0x1,0x0(%rbp)
  41b658:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  41b65d:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  41b662:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41b667:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41b66c:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41b66e:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41b673:	41 89 c7             	mov    %eax,%r15d
  41b676:	48 85 ff             	test   %rdi,%rdi
  41b679:	74 03                	je     41b67e <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x2ee>
  41b67b:	41 ff d6             	callq  *%r14
  41b67e:	48 85 db             	test   %rbx,%rbx
  41b681:	0f 84 89 00 00 00    	je     41b710 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x380>
  41b687:	48 89 df             	mov    %rbx,%rdi
  41b68a:	41 ff d6             	callq  *%r14
  41b68d:	45 84 ff             	test   %r15b,%r15b
  41b690:	74 6e                	je     41b700 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x370>
    return lhs == rhs;
  41b692:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41b697:	8b 4c 24 5c          	mov    0x5c(%rsp),%ecx
  41b69b:	48 89 df             	mov    %rbx,%rdi
  41b69e:	39 08                	cmp    %ecx,(%rax)
  41b6a0:	41 0f 94 c7          	sete   %r15b
  41b6a4:	41 ff d6             	callq  *%r14
    if (it->first->equals(key, pMemory)) {
  41b6a7:	45 84 ff             	test   %r15b,%r15b
  41b6aa:	0f 85 f0 00 00 00    	jne    41b7a0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x410>
	_M_node = _Rb_tree_increment(_M_node);
  41b6b0:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41b6b7:	ff ff ff 
  41b6ba:	4c 89 e7             	mov    %r12,%rdi
  41b6bd:	4d 89 ef             	mov    %r13,%r15
  41b6c0:	4c 01 e8             	add    %r13,%rax
  41b6c3:	ff d0                	callq  *%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41b6c5:	48 3b 44 24 28       	cmp    0x28(%rsp),%rax
  41b6ca:	49 89 c4             	mov    %rax,%r12
  41b6cd:	0f 84 ed fd ff ff    	je     41b4c0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x130>
        if( pi_ != 0 ) pi_->add_ref_copy();
  41b6d3:	48 85 db             	test   %rbx,%rbx
  41b6d6:	0f 85 54 ff ff ff    	jne    41b630 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x2a0>
  41b6dc:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    if (it->first->equals(key, pMemory)) {
  41b6e1:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  41b6e6:	c6 44 24 60 01       	movb   $0x1,0x60(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b6eb:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
  41b6f2:	00 00 
  41b6f4:	48 89 74 24 68       	mov    %rsi,0x68(%rsp)
  41b6f9:	e9 5a ff ff ff       	jmpq   41b658 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x2c8>
  41b6fe:	66 90                	xchg   %ax,%ax
        if( pi_ != 0 ) pi_->release();
  41b700:	48 89 df             	mov    %rbx,%rdi
  41b703:	41 ff d6             	callq  *%r14
  41b706:	eb a8                	jmp    41b6b0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x320>
  41b708:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41b70f:	00 
  if (convert<T>::decode(Node(*this, pMemory), lhs)) {
  41b710:	45 84 ff             	test   %r15b,%r15b
  41b713:	74 9b                	je     41b6b0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x320>
    return lhs == rhs;
  41b715:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41b71a:	8b 74 24 5c          	mov    0x5c(%rsp),%esi
  41b71e:	39 30                	cmp    %esi,(%rax)
  41b720:	41 0f 94 c7          	sete   %r15b
  41b724:	e9 7e ff ff ff       	jmpq   41b6a7 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x317>
  41b729:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41b730:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41b735:	c6 00 01             	movb   $0x1,(%rax)
  41b738:	48 89 50 08          	mov    %rdx,0x8(%rax)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41b73c:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41b743:	00 
  41b744:	4c 89 60 18          	mov    %r12,0x18(%rax)
  41b748:	e9 ec fd ff ff       	jmpq   41b539 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1a9>
  41b74d:	0f 1f 00             	nopl   (%rax)
    return key >= 0 ? get_idx<std::size_t>::get(
  41b750:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  41b755:	48 63 12             	movslq (%rdx),%rdx
  41b758:	85 d2                	test   %edx,%edx
  41b75a:	78 18                	js     41b774 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x3e4>
  41b75c:	48 8b 48 50          	mov    0x50(%rax),%rcx
  41b760:	48 8b 40 58          	mov    0x58(%rax),%rax
  41b764:	48 29 c8             	sub    %rcx,%rax
  41b767:	48 c1 f8 03          	sar    $0x3,%rax
    return key < sequence.size() ? sequence[key] : 0;
  41b76b:	48 39 d0             	cmp    %rdx,%rax
  41b76e:	0f 87 20 fd ff ff    	ja     41b494 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x104>
inline Node::Node(Zombie) : m_isValid(false), m_pNode(NULL) {}
  41b774:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41b779:	c6 00 00             	movb   $0x0,(%rax)
    BOOST_CONSTEXPR shared_ptr() BOOST_SP_NOEXCEPT : px( 0 ), pn()
  41b77c:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41b783:	00 
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41b784:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41b78b:	00 
  41b78c:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  41b793:	00 
  41b794:	e9 a0 fd ff ff       	jmpq   41b539 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x1a9>
  41b799:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      return it->second;
  41b7a0:	4d 8b 64 24 28       	mov    0x28(%r12),%r12
  41b7a5:	e9 19 fd ff ff       	jmpq   41b4c3 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x133>
  41b7aa:	49 89 c4             	mov    %rax,%r12
        if( pi_ != 0 ) pi_->release();
  41b7ad:	48 85 db             	test   %rbx,%rbx
  41b7b0:	74 12                	je     41b7c4 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x434>
  41b7b2:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41b7b9:	ff ff ff 
  41b7bc:	48 89 df             	mov    %rbx,%rdi
  41b7bf:	4c 01 e8             	add    %r13,%rax
  41b7c2:	ff d0                	callq  *%rax
  41b7c4:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  41b7c9:	48 85 c0             	test   %rax,%rax
  41b7cc:	74 12                	je     41b7e0 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x450>
  41b7ce:	48 89 c7             	mov    %rax,%rdi
  41b7d1:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41b7d8:	ff ff ff 
  41b7db:	4c 01 e8             	add    %r13,%rax
  41b7de:	ff d0                	callq  *%rax
  41b7e0:	48 85 db             	test   %rbx,%rbx
  41b7e3:	74 12                	je     41b7f7 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x467>
  41b7e5:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41b7ec:	ff ff ff 
  41b7ef:	48 89 df             	mov    %rbx,%rdi
  41b7f2:	4c 01 e8             	add    %r13,%rax
  41b7f5:	ff d0                	callq  *%rax
  41b7f7:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41b7fe:	ff ff ff 
  41b801:	4c 89 e7             	mov    %r12,%rdi
  41b804:	4d 89 ef             	mov    %r13,%r15
  41b807:	4c 01 e8             	add    %r13,%rax
  41b80a:	ff d0                	callq  *%rax
    throw InvalidNode();
  41b80c:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41b813:	ff ff ff 
  41b816:	bf 40 00 00 00       	mov    $0x40,%edi
  41b81b:	4d 89 ef             	mov    %r13,%r15
  41b81e:	4c 01 e8             	add    %r13,%rax
  41b821:	ff d0                	callq  *%rax
  41b823:	48 89 c3             	mov    %rax,%rbx
  41b826:	48 89 c7             	mov    %rax,%rdi
  41b829:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  41b830:	ff ff ff 
  41b833:	4c 01 e8             	add    %r13,%rax
  41b836:	ff d0                	callq  *%rax
  41b838:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  41b83f:	ff ff ff 
  41b842:	48 89 df             	mov    %rbx,%rdi
  41b845:	49 8d 54 05 00       	lea    0x0(%r13,%rax,1),%rdx
  41b84a:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41b851:	ff ff ff 
  41b854:	49 8d 74 05 00       	lea    0x0(%r13,%rax,1),%rsi
  41b859:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41b860:	ff ff ff 
  41b863:	4c 01 e8             	add    %r13,%rax
  41b866:	ff d0                	callq  *%rax
  41b868:	48 b8 8c eb dd ff ff 	movabs $0xffffffffffddeb8c,%rax
  41b86f:	ff ff ff 
  41b872:	4c 01 e8             	add    %r13,%rax
  41b875:	ff d0                	callq  *%rax
  41b877:	48 b8 38 ec dd ff ff 	movabs $0xffffffffffddec38,%rax
  41b87e:	ff ff ff 
  41b881:	4c 01 e8             	add    %r13,%rax
  41b884:	ff d0                	callq  *%rax
  41b886:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41b88d:	ff ff ff 
  41b890:	48 89 c5             	mov    %rax,%rbp
  41b893:	48 89 df             	mov    %rbx,%rdi
  41b896:	4d 89 ef             	mov    %r13,%r15
  41b899:	4c 01 ea             	add    %r13,%rdx
  41b89c:	ff d2                	callq  *%rdx
  41b89e:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41b8a5:	ff ff ff 
  41b8a8:	48 89 ef             	mov    %rbp,%rdi
  41b8ab:	4c 01 e8             	add    %r13,%rax
  41b8ae:	ff d0                	callq  *%rax
    return key < sequence.size() ? sequence[key] : 0;
  41b8b0:	45 31 e4             	xor    %r12d,%r12d
  41b8b3:	e9 e5 fb ff ff       	jmpq   41b49d <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x10d>
      throw BadSubscript();
  41b8b8:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41b8bf:	ff ff ff 
  41b8c2:	49 89 c4             	mov    %rax,%r12
  41b8c5:	48 89 ef             	mov    %rbp,%rdi
  41b8c8:	4d 89 ef             	mov    %r13,%r15
  41b8cb:	4c 01 ea             	add    %r13,%rdx
  41b8ce:	ff d2                	callq  *%rdx
  41b8d0:	e9 d8 fe ff ff       	jmpq   41b7ad <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x41d>
  41b8d5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41b8da:	49 89 c4             	mov    %rax,%r12
  41b8dd:	48 85 ff             	test   %rdi,%rdi
  41b8e0:	74 0f                	je     41b8f1 <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x561>
  41b8e2:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41b8e9:	ff ff ff 
  41b8ec:	4c 01 e8             	add    %r13,%rax
  41b8ef:	ff d0                	callq  *%rax
  41b8f1:	48 85 db             	test   %rbx,%rbx
  41b8f4:	0f 84 b3 fe ff ff    	je     41b7ad <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x41d>
  41b8fa:	48 bd c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rbp
  41b901:	ff ff ff 
  41b904:	48 89 df             	mov    %rbx,%rdi
  41b907:	4c 01 ed             	add    %r13,%rbp
  41b90a:	ff d5                	callq  *%rbp
  41b90c:	48 89 df             	mov    %rbx,%rdi
  41b90f:	ff d5                	callq  *%rbp
  41b911:	e9 97 fe ff ff       	jmpq   41b7ad <_ZNK4YAML4NodeixIiEEKS0_RKT_+0x41d>
  41b916:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41b91d:	00 00 00 

000000000041b920 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41b920:	41 57                	push   %r15
  41b922:	55                   	push   %rbp
  41b923:	4c 8d 15 f6 ff ff ff 	lea    -0xa(%rip),%r10        # 41b920 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_>
  41b92a:	53                   	push   %rbx
  41b92b:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  41b92f:	49 bb e0 f6 20 00 00 	movabs $0x20f6e0,%r11
  41b936:	00 00 00 
  41b939:	4d 01 da             	add    %r11,%r10
      { return &this->_M_impl._M_header; }
  41b93c:	48 8d 5f 08          	lea    0x8(%rdi),%rbx
      while (__x != 0)
  41b940:	48 85 d2             	test   %rdx,%rdx
  41b943:	74 53                	je     41b998 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x78>
  41b945:	4c 8b 06             	mov    (%rsi),%r8
  41b948:	eb 18                	jmp    41b962 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x42>
  41b94a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41b950:	48 8b 42 10          	mov    0x10(%rdx),%rax
  41b954:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  41b95a:	48 85 c0             	test   %rax,%rax
  41b95d:	74 18                	je     41b977 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x57>
  41b95f:	48 89 c2             	mov    %rax,%rdx
  41b962:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  41b966:	49 39 c8             	cmp    %rcx,%r8
  41b969:	72 e5                	jb     41b950 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x30>
  41b96b:	48 8b 42 18          	mov    0x18(%rdx),%rax
  41b96f:	45 31 c9             	xor    %r9d,%r9d
      while (__x != 0)
  41b972:	48 85 c0             	test   %rax,%rax
  41b975:	75 e8                	jne    41b95f <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x3f>
      if (__comp)
  41b977:	45 84 c9             	test   %r9b,%r9b
  41b97a:	48 89 d3             	mov    %rdx,%rbx
  41b97d:	48 89 d0             	mov    %rdx,%rax
  41b980:	75 16                	jne    41b998 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x78>
	return _Res(__x, __y);
  41b982:	31 d2                	xor    %edx,%edx
  41b984:	4c 39 c1             	cmp    %r8,%rcx
  41b987:	48 0f 42 c2          	cmovb  %rdx,%rax
  41b98b:	48 0f 42 d3          	cmovb  %rbx,%rdx
    }
  41b98f:	5b                   	pop    %rbx
  41b990:	5d                   	pop    %rbp
  41b991:	41 5f                	pop    %r15
  41b993:	c3                   	retq   
  41b994:	0f 1f 40 00          	nopl   0x0(%rax)
	    return _Res(__x, __y);
  41b998:	31 c0                	xor    %eax,%eax
	  if (__j == begin())
  41b99a:	48 3b 5f 18          	cmp    0x18(%rdi),%rbx
	    return _Res(__x, __y);
  41b99e:	48 89 da             	mov    %rbx,%rdx
	  if (__j == begin())
  41b9a1:	74 ec                	je     41b98f <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x6f>
  41b9a3:	48 89 f5             	mov    %rsi,%rbp
	_M_node = _Rb_tree_decrement(_M_node);
  41b9a6:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  41b9ad:	ff ff ff 
  41b9b0:	48 89 df             	mov    %rbx,%rdi
  41b9b3:	4d 89 d7             	mov    %r10,%r15
  41b9b6:	4c 01 d0             	add    %r10,%rax
  41b9b9:	ff d0                	callq  *%rax
  41b9bb:	4c 8b 45 00          	mov    0x0(%rbp),%r8
  41b9bf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  41b9c3:	eb bd                	jmp    41b982 <_ZNSt8_Rb_treeImSt4pairIKm11ConstraintsESt10_Select1stIS3_ESt4lessImESaIS3_EE24_M_get_insert_unique_posERS1_+0x62>
  41b9c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41b9cc:	00 00 00 
  41b9cf:	90                   	nop

000000000041b9d0 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_>:
      operator[](const key_type& __k)
  41b9d0:	41 57                	push   %r15
  41b9d2:	41 56                	push   %r14
  41b9d4:	49 bb 30 f6 20 00 00 	movabs $0x20f630,%r11
  41b9db:	00 00 00 
  41b9de:	41 55                	push   %r13
  41b9e0:	41 54                	push   %r12
      { return &this->_M_impl._M_header; }
  41b9e2:	4c 8d 77 08          	lea    0x8(%rdi),%r14
  41b9e6:	55                   	push   %rbp
  41b9e7:	53                   	push   %rbx
  41b9e8:	48 8d 2d e1 ff ff ff 	lea    -0x1f(%rip),%rbp        # 41b9d0 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_>
  41b9ef:	49 89 fc             	mov    %rdi,%r12
  41b9f2:	48 83 ec 28          	sub    $0x28,%rsp
  41b9f6:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  41b9fa:	4c 01 dd             	add    %r11,%rbp
      while (__x != 0)
  41b9fd:	48 85 d2             	test   %rdx,%rdx
  41ba00:	0f 84 92 01 00 00    	je     41bb98 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x1c8>
  41ba06:	48 8b 06             	mov    (%rsi),%rax
      { return &this->_M_impl._M_header; }
  41ba09:	4c 89 f3             	mov    %r14,%rbx
  41ba0c:	eb 0e                	jmp    41ba1c <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x4c>
  41ba0e:	66 90                	xchg   %ax,%ax
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41ba10:	48 89 d3             	mov    %rdx,%rbx
	  __y = __x, __x = _S_left(__x);
  41ba13:	48 8b 52 10          	mov    0x10(%rdx),%rdx
      while (__x != 0)
  41ba17:	48 85 d2             	test   %rdx,%rdx
  41ba1a:	74 0f                	je     41ba2b <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x5b>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  41ba1c:	48 39 42 20          	cmp    %rax,0x20(%rdx)
  41ba20:	73 ee                	jae    41ba10 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x40>
  41ba22:	48 8b 52 18          	mov    0x18(%rdx),%rdx
      while (__x != 0)
  41ba26:	48 85 d2             	test   %rdx,%rdx
  41ba29:	75 f1                	jne    41ba1c <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x4c>
	if (__i == end() || key_comp()(__k, (*__i).first))
  41ba2b:	49 39 de             	cmp    %rbx,%r14
  41ba2e:	0f 84 64 01 00 00    	je     41bb98 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x1c8>
  41ba34:	48 39 43 20          	cmp    %rax,0x20(%rbx)
  41ba38:	0f 86 df 00 00 00    	jbe    41bb1d <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x14d>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41ba3e:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41ba45:	ff ff ff 
  41ba48:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41ba4d:	bf a8 06 00 00       	mov    $0x6a8,%edi
  41ba52:	48 01 e8             	add    %rbp,%rax
  41ba55:	49 89 ef             	mov    %rbp,%r15
  41ba58:	ff d0                	callq  *%rax
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
  41ba5a:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41ba5f:	49 89 c5             	mov    %rax,%r13
  41ba62:	4c 8d 40 20          	lea    0x20(%rax),%r8
		vertexConstraints_size = 0;
  41ba66:	c7 80 68 06 00 00 00 	movl   $0x0,0x668(%rax)
  41ba6d:	00 00 00 
		edgeConstraints_size = 0;
  41ba70:	c7 80 6c 06 00 00 00 	movl   $0x0,0x66c(%rax)
  41ba77:	00 00 00 
  41ba7a:	48 8b 0e             	mov    (%rsi),%rcx
  41ba7d:	48 89 48 20          	mov    %rcx,0x20(%rax)
  41ba81:	48 8b 53 20          	mov    0x20(%rbx),%rdx
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
  41ba85:	48 39 ca             	cmp    %rcx,%rdx
  41ba88:	0f 86 a2 00 00 00    	jbe    41bb30 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x160>
	  if (__pos._M_node == _M_leftmost()) // begin()
  41ba8e:	49 39 5c 24 18       	cmp    %rbx,0x18(%r12)
  41ba93:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  41ba98:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  41ba9d:	74 34                	je     41bad3 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x103>
	_M_node = _Rb_tree_decrement(_M_node);
  41ba9f:	48 b8 60 e7 dd ff ff 	movabs $0xffffffffffdde760,%rax
  41baa6:	ff ff ff 
  41baa9:	48 89 df             	mov    %rbx,%rdi
  41baac:	49 89 ef             	mov    %rbp,%r15
  41baaf:	48 01 e8             	add    %rbp,%rax
  41bab2:	ff d0                	callq  *%rax
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
  41bab4:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  41bab9:	48 39 48 20          	cmp    %rcx,0x20(%rax)
  41babd:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  41bac2:	0f 83 75 01 00 00    	jae    41bc3d <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x26d>
	      if (_S_right(__before._M_node) == 0)
  41bac8:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
  41bacd:	0f 84 59 01 00 00    	je     41bc2c <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x25c>
	  if (__pos._M_node == _M_leftmost()) // begin()
  41bad3:	48 89 d8             	mov    %rbx,%rax
      bool __insert_left = (__x != 0 || __p == _M_end()
  41bad6:	49 39 c6             	cmp    %rax,%r14
  41bad9:	0f 84 54 01 00 00    	je     41bc33 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x263>
  41badf:	48 85 db             	test   %rbx,%rbx
  41bae2:	0f 85 4b 01 00 00    	jne    41bc33 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x263>
  41bae8:	49 8b 4d 20          	mov    0x20(%r13),%rcx
  41baec:	48 8b 50 20          	mov    0x20(%rax),%rdx
			    || _M_impl._M_key_compare(_S_key(__z),
  41baf0:	31 ff                	xor    %edi,%edi
  41baf2:	48 39 d1             	cmp    %rdx,%rcx
  41baf5:	40 0f 92 c7          	setb   %dil
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  41baf9:	48 89 c2             	mov    %rax,%rdx
  41bafc:	48 b8 f0 e3 dd ff ff 	movabs $0xffffffffffdde3f0,%rax
  41bb03:	ff ff ff 
  41bb06:	4c 89 f1             	mov    %r14,%rcx
  41bb09:	4c 89 ee             	mov    %r13,%rsi
  41bb0c:	49 89 ef             	mov    %rbp,%r15
  41bb0f:	48 01 e8             	add    %rbp,%rax
  41bb12:	ff d0                	callq  *%rax
      ++_M_impl._M_node_count;
  41bb14:	49 83 44 24 28 01    	addq   $0x1,0x28(%r12)
  41bb1a:	4c 89 eb             	mov    %r13,%rbx
      }
  41bb1d:	48 83 c4 28          	add    $0x28,%rsp
	return (*__i).second;
  41bb21:	48 8d 43 28          	lea    0x28(%rbx),%rax
      }
  41bb25:	5b                   	pop    %rbx
  41bb26:	5d                   	pop    %rbp
  41bb27:	41 5c                	pop    %r12
  41bb29:	41 5d                	pop    %r13
  41bb2b:	41 5e                	pop    %r14
  41bb2d:	41 5f                	pop    %r15
  41bb2f:	c3                   	retq   
  41bb30:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
  41bb35:	0f 83 d7 00 00 00    	jae    41bc12 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x242>
	  if (__pos._M_node == _M_rightmost())
  41bb3b:	49 39 5c 24 20       	cmp    %rbx,0x20(%r12)
  41bb40:	0f 84 fc 00 00 00    	je     41bc42 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x272>
	_M_node = _Rb_tree_increment(_M_node);
  41bb46:	48 b8 40 e6 dd ff ff 	movabs $0xffffffffffdde640,%rax
  41bb4d:	ff ff ff 
  41bb50:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  41bb55:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  41bb5a:	48 01 e8             	add    %rbp,%rax
  41bb5d:	48 89 df             	mov    %rbx,%rdi
  41bb60:	49 89 ef             	mov    %rbp,%r15
  41bb63:	ff d0                	callq  *%rax
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
  41bb65:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  41bb6a:	48 39 48 20          	cmp    %rcx,0x20(%rax)
  41bb6e:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  41bb73:	0f 86 c4 00 00 00    	jbe    41bc3d <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x26d>
	      if (_S_right(__pos._M_node) == 0)
  41bb79:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
  41bb7e:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  41bb83:	0f 84 b9 00 00 00    	je     41bc42 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x272>
  41bb89:	48 89 c3             	mov    %rax,%rbx
  41bb8c:	e9 45 ff ff ff       	jmpq   41bad6 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x106>
  41bb91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41bb98:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41bb9f:	ff ff ff 
  41bba2:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41bba7:	bf a8 06 00 00       	mov    $0x6a8,%edi
  41bbac:	48 01 e8             	add    %rbp,%rax
  41bbaf:	49 89 ef             	mov    %rbp,%r15
  41bbb2:	ff d0                	callq  *%rax
  41bbb4:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41bbb9:	49 89 c5             	mov    %rax,%r13
  41bbbc:	48 8d 48 20          	lea    0x20(%rax),%rcx
  41bbc0:	48 8b 16             	mov    (%rsi),%rdx
		vertexConstraints_size = 0;
  41bbc3:	c7 80 68 06 00 00 00 	movl   $0x0,0x668(%rax)
  41bbca:	00 00 00 
		edgeConstraints_size = 0;
  41bbcd:	c7 80 6c 06 00 00 00 	movl   $0x0,0x66c(%rax)
  41bbd4:	00 00 00 
  41bbd7:	48 89 50 20          	mov    %rdx,0x20(%rax)
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
  41bbdb:	49 83 7c 24 28 00    	cmpq   $0x0,0x28(%r12)
  41bbe1:	74 0b                	je     41bbee <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x21e>
  41bbe3:	49 8b 44 24 20       	mov    0x20(%r12),%rax
  41bbe8:	48 39 50 20          	cmp    %rdx,0x20(%rax)
  41bbec:	72 3e                	jb     41bc2c <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x25c>
	    return _M_get_insert_unique_pos(__k);
  41bbee:	48 89 ce             	mov    %rcx,%rsi
	    return _M_get_insert_unique_pos(__k);
  41bbf1:	48 b8 20 09 df ff ff 	movabs $0xffffffffffdf0920,%rax
  41bbf8:	ff ff ff 
  41bbfb:	4c 89 e7             	mov    %r12,%rdi
  41bbfe:	48 01 e8             	add    %rbp,%rax
  41bc01:	ff d0                	callq  *%rax
	    if (__res.second)
  41bc03:	48 85 d2             	test   %rdx,%rdx
	    return _M_get_insert_unique_pos(__k);
  41bc06:	48 89 c3             	mov    %rax,%rbx
  41bc09:	48 89 d0             	mov    %rdx,%rax
	    if (__res.second)
  41bc0c:	0f 85 c4 fe ff ff    	jne    41bad6 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x106>
      { ::operator delete(__p); }
  41bc12:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41bc19:	ff ff ff 
  41bc1c:	4c 89 ef             	mov    %r13,%rdi
  41bc1f:	49 89 ef             	mov    %rbp,%r15
  41bc22:	48 01 e8             	add    %rbp,%rax
  41bc25:	ff d0                	callq  *%rax
  41bc27:	e9 f1 fe ff ff       	jmpq   41bb1d <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x14d>
		return _Res(0, __before._M_node);
  41bc2c:	31 db                	xor    %ebx,%ebx
  41bc2e:	e9 a3 fe ff ff       	jmpq   41bad6 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x106>
      bool __insert_left = (__x != 0 || __p == _M_end()
  41bc33:	bf 01 00 00 00       	mov    $0x1,%edi
  41bc38:	e9 bc fe ff ff       	jmpq   41baf9 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x129>
	    return _M_get_insert_unique_pos(__k);
  41bc3d:	4c 89 c6             	mov    %r8,%rsi
  41bc40:	eb af                	jmp    41bbf1 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x221>
	      if (_S_right(__pos._M_node) == 0)
  41bc42:	48 89 d8             	mov    %rbx,%rax
  41bc45:	e9 a6 fe ff ff       	jmpq   41baf0 <_ZNSt3mapIm11ConstraintsSt4lessImESaISt4pairIKmS0_EEEixERS4_+0x120>
  41bc4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000041bc50 <_ZN5swarm10bareRunnerIFvmiEXadL_Z19main_loop_task_paramiEEiEEvmm>:
inline void bareRunner(Timestamp ts, uint64_t arg0) {
  41bc50:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 41bc50 <_ZN5swarm10bareRunnerIFvmiEXadL_Z19main_loop_task_paramiEEiEEvmm>
  41bc57:	49 bb b0 f3 20 00 00 	movabs $0x20f3b0,%r11
  41bc5e:	00 00 00 
    (*f)(ts, uncastArg<T>(arg0));
  41bc61:	48 ba a0 50 de ff ff 	movabs $0xffffffffffde50a0,%rdx
  41bc68:	ff ff ff 
  41bc6b:	4c 01 d8             	add    %r11,%rax
  41bc6e:	48 01 d0             	add    %rdx,%rax
  41bc71:	ff e0                	jmpq   *%rax
  41bc73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41bc7a:	00 00 00 
  41bc7d:	0f 1f 00             	nopl   (%rax)

000000000041bc80 <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m>:
      __node_base* __prev_p = _M_buckets[__n];
  41bc80:	48 8b 07             	mov    (%rdi),%rax
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41bc83:	49 89 d3             	mov    %rdx,%r11
      __node_base* __prev_p = _M_buckets[__n];
  41bc86:	4c 8b 14 f0          	mov    (%rax,%rsi,8),%r10
      if (!__prev_p)
  41bc8a:	4d 85 d2             	test   %r10,%r10
  41bc8d:	74 2f                	je     41bcbe <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3e>
      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
  41bc8f:	4d 8b 0a             	mov    (%r10),%r9
  41bc92:	4d 8b 41 18          	mov    0x18(%r9),%r8
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  41bc96:	49 39 c8             	cmp    %rcx,%r8
  41bc99:	74 2d                	je     41bcc8 <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x48>
	  if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
  41bc9b:	49 8b 01             	mov    (%r9),%rax
  41bc9e:	48 85 c0             	test   %rax,%rax
  41bca1:	74 18                	je     41bcbb <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3b>
  41bca3:	4c 8b 40 18          	mov    0x18(%rax),%r8
    { return __num % __den; }
  41bca7:	31 d2                	xor    %edx,%edx
  41bca9:	4d 89 ca             	mov    %r9,%r10
  41bcac:	49 89 c1             	mov    %rax,%r9
  41bcaf:	4c 89 c0             	mov    %r8,%rax
  41bcb2:	48 f7 77 08          	divq   0x8(%rdi)
  41bcb6:	48 39 d6             	cmp    %rdx,%rsi
  41bcb9:	74 db                	je     41bc96 <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x16>
	return nullptr;
  41bcbb:	45 31 d2             	xor    %r10d,%r10d
    }
  41bcbe:	4c 89 d0             	mov    %r10,%rax
  41bcc1:	c3                   	retq   
  41bcc2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41bcc8:	41 8b 03             	mov    (%r11),%eax
  41bccb:	41 39 41 08          	cmp    %eax,0x8(%r9)
  41bccf:	75 ca                	jne    41bc9b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bcd1:	41 8b 41 0c          	mov    0xc(%r9),%eax
  41bcd5:	41 39 43 04          	cmp    %eax,0x4(%r11)
  41bcd9:	75 c0                	jne    41bc9b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bcdb:	41 8b 41 10          	mov    0x10(%r9),%eax
  41bcdf:	41 39 43 08          	cmp    %eax,0x8(%r11)
  41bce3:	75 b6                	jne    41bc9b <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x1b>
  41bce5:	eb d7                	jmp    41bcbe <_ZNKSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEmRS2_m+0x3e>
  41bce7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41bcee:	00 00 

000000000041bcf0 <_ZN5boost15throw_exceptionINS_16bad_lexical_castEEEvRKT_>:

#else

inline void throw_exception_assert_compatibility( std::exception const & ) { }

template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  41bcf0:	41 57                	push   %r15
  41bcf2:	41 55                	push   %r13
  41bcf4:	49 bb 10 f3 20 00 00 	movabs $0x20f310,%r11
  41bcfb:	00 00 00 
  41bcfe:	41 54                	push   %r12
  41bd00:	55                   	push   %rbp
  41bd01:	49 89 fc             	mov    %rdi,%r12
  41bd04:	53                   	push   %rbx
  41bd05:	48 8d 1d e4 ff ff ff 	lea    -0x1c(%rip),%rbx        # 41bcf0 <_ZN5boost15throw_exceptionINS_16bad_lexical_castEEEvRKT_>
    //All boost exceptions are required to derive from std::exception,
    //to ensure compatibility with BOOST_NO_EXCEPTIONS.
    throw_exception_assert_compatibility(e);

#ifndef BOOST_EXCEPTION_DISABLE
    throw enable_current_exception(enable_error_info(e));
  41bd0c:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41bd13:	ff ff ff 
  41bd16:	bf 48 00 00 00       	mov    $0x48,%edi
  41bd1b:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  41bd1e:	48 83 ec 40          	sub    $0x40,%rsp
    throw enable_current_exception(enable_error_info(e));
  41bd22:	49 89 df             	mov    %rbx,%r15
  41bd25:	48 01 d8             	add    %rbx,%rax
  41bd28:	ff d0                	callq  *%rax
  41bd2a:	48 89 c5             	mov    %rax,%rbp
  41bd2d:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  41bd32:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
                T(x)
  41bd37:	48 b9 50 f0 ff ff ff 	movabs $0xfffffffffffff050,%rcx
  41bd3e:	ff ff ff 
                px_(0)
  41bd41:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  41bd48:	00 00 
            throw_line_(-1)
  41bd4a:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  41bd51:	00 00 
                T(x)
  41bd53:	48 01 d9             	add    %rbx,%rcx
            throw_line_(-1)
  41bd56:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41bd5d:	00 00 
  41bd5f:	c7 44 24 38 ff ff ff 	movl   $0xffffffff,0x38(%rsp)
  41bd66:	ff 
    class BOOST_SYMBOL_VISIBLE bad_lexical_cast :
  41bd67:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41bd6c:	48 89 45 10          	mov    %rax,0x10(%rbp)
                T(x)
  41bd70:	48 b8 b0 f0 ff ff ff 	movabs $0xfffffffffffff0b0,%rax
  41bd77:	ff ff ff 
  41bd7a:	48 01 d8             	add    %rbx,%rax
  41bd7d:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  41bd82:	48 89 55 08          	mov    %rdx,0x8(%rbp)
  41bd86:	48 89 45 00          	mov    %rax,0x0(%rbp)
  41bd8a:	48 8d 50 38          	lea    0x38(%rax),%rdx
  41bd8e:	48 83 c0 70          	add    $0x70,%rax
                T(x)
  41bd92:	48 89 0c 24          	mov    %rcx,(%rsp)
                T(x)
  41bd96:	48 89 45 40          	mov    %rax,0x40(%rbp)
                T(x)
  41bd9a:	48 83 c1 28          	add    $0x28,%rcx
                copy_boost_exception(this,&x);
  41bd9e:	48 b8 80 a5 de ff ff 	movabs $0xffffffffffdea580,%rax
  41bda5:	ff ff ff 
                T(x)
  41bda8:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
                px_(x.px_)
  41bdad:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
  41bdb4:	00 
    exception
  41bdb5:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
  41bdbc:	00 
  41bdbd:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
  41bdc4:	00 
                copy_boost_exception(this,&x);
  41bdc5:	49 89 e4             	mov    %rsp,%r12
    exception
  41bdc8:	c7 45 38 ff ff ff ff 	movl   $0xffffffff,0x38(%rbp)
                T(x)
  41bdcf:	48 89 55 18          	mov    %rdx,0x18(%rbp)
                copy_boost_exception(this,&x);
  41bdd3:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  41bdd8:	48 8d 7d 18          	lea    0x18(%rbp),%rdi
  41bddc:	48 01 d8             	add    %rbx,%rax
  41bddf:	ff d0                	callq  *%rax
  41bde1:	48 b8 80 8b de ff ff 	movabs $0xffffffffffde8b80,%rax
  41bde8:	ff ff ff 
  41bdeb:	48 89 e7             	mov    %rsp,%rdi
  41bdee:	49 89 df             	mov    %rbx,%r15
  41bdf1:	48 01 d8             	add    %rbx,%rax
  41bdf4:	ff d0                	callq  *%rax
  41bdf6:	48 b8 e0 9c de ff ff 	movabs $0xffffffffffde9ce0,%rax
  41bdfd:	ff ff ff 
  41be00:	48 89 ef             	mov    %rbp,%rdi
  41be03:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41be07:	48 b8 d8 f8 ff ff ff 	movabs $0xfffffffffffff8d8,%rax
  41be0e:	ff ff ff 
  41be11:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41be15:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41be1c:	ff ff ff 
  41be1f:	48 01 d8             	add    %rbx,%rax
  41be22:	ff d0                	callq  *%rax
                T(x)
  41be24:	48 ba 80 8b de ff ff 	movabs $0xffffffffffde8b80,%rdx
  41be2b:	ff ff ff 
  41be2e:	49 89 c5             	mov    %rax,%r13
  41be31:	48 89 ef             	mov    %rbp,%rdi
  41be34:	48 01 da             	add    %rbx,%rdx
  41be37:	49 89 df             	mov    %rbx,%r15
  41be3a:	ff d2                	callq  *%rdx
  41be3c:	48 ba 80 8b de ff ff 	movabs $0xffffffffffde8b80,%rdx
  41be43:	ff ff ff 
  41be46:	4c 89 e7             	mov    %r12,%rdi
  41be49:	48 01 da             	add    %rbx,%rdx
  41be4c:	ff d2                	callq  *%rdx
  41be4e:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41be55:	ff ff ff 
  41be58:	48 89 ef             	mov    %rbp,%rdi
  41be5b:	48 01 da             	add    %rbx,%rdx
  41be5e:	ff d2                	callq  *%rdx
  41be60:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41be67:	ff ff ff 
  41be6a:	4c 89 ef             	mov    %r13,%rdi
  41be6d:	48 01 d8             	add    %rbx,%rax
  41be70:	ff d0                	callq  *%rax
  41be72:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41be79:	00 00 00 
  41be7c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041be80 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE>:

  return NULL;
}

template <typename Key>
inline node& node_data::get(const Key& key, shared_memory_holder pMemory) {
  41be80:	41 57                	push   %r15
  41be82:	41 56                	push   %r14
  41be84:	49 bb 80 f1 20 00 00 	movabs $0x20f180,%r11
  41be8b:	00 00 00 
  41be8e:	41 55                	push   %r13
  41be90:	41 54                	push   %r12
  41be92:	55                   	push   %rbp
  41be93:	53                   	push   %rbx
  41be94:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41be80 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE>
  41be9b:	48 83 ec 48          	sub    $0x48,%rsp
  switch (m_type) {
  41be9f:	8b 47 04             	mov    0x4(%rdi),%eax
  41bea2:	4c 01 db             	add    %r11,%rbx
inline node& node_data::get(const Key& key, shared_memory_holder pMemory) {
  41bea5:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  switch (m_type) {
  41beaa:	83 f8 02             	cmp    $0x2,%eax
  41bead:	0f 84 05 04 00 00    	je     41c2b8 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x438>
  41beb3:	49 89 f5             	mov    %rsi,%r13
  41beb6:	48 89 d5             	mov    %rdx,%rbp
  41beb9:	0f 82 d9 00 00 00    	jb     41bf98 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x118>
  41bebf:	83 f8 03             	cmp    $0x3,%eax
  41bec2:	0f 84 d0 00 00 00    	je     41bf98 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x118>
      { return iterator(&this->_M_impl._M_header); }
  41bec8:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  41becd:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
  41bed2:	48 89 f0             	mov    %rsi,%rax
      break;
    case NodeType::Scalar:
      throw BadSubscript();
  }

  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41bed5:	4c 8b be 88 00 00 00 	mov    0x88(%rsi),%r15
  41bedc:	48 83 c0 78          	add    $0x78,%rax
  41bee0:	48 89 c1             	mov    %rax,%rcx
  41bee3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41bee8:	48 b8 e0 bb de ff ff 	movabs $0xffffffffffdebbe0,%rax
  41beef:	ff ff ff 
    if (it->first->equals(key, pMemory)) {
  41bef2:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
  41bef6:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41befd:	ff ff ff 
  41bf00:	48 01 d8             	add    %rbx,%rax
  for (node_map::const_iterator it = m_map.begin(); it != m_map.end(); ++it) {
  41bf03:	49 39 cf             	cmp    %rcx,%r15
  41bf06:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41bf0b:	75 2e                	jne    41bf3b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xbb>
  41bf0d:	e9 0e 01 00 00       	jmpq   41c020 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x1a0>
  41bf12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	_M_node = _Rb_tree_increment(_M_node);
  41bf18:	48 b8 c0 e7 dd ff ff 	movabs $0xffffffffffdde7c0,%rax
  41bf1f:	ff ff ff 
  41bf22:	4c 89 ff             	mov    %r15,%rdi
  41bf25:	49 89 df             	mov    %rbx,%r15
  41bf28:	48 01 d8             	add    %rbx,%rax
  41bf2b:	ff d0                	callq  *%rax
  41bf2d:	48 3b 44 24 08       	cmp    0x8(%rsp),%rax
  41bf32:	49 89 c7             	mov    %rax,%r15
  41bf35:	0f 84 e5 00 00 00    	je     41c020 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x1a0>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41bf3b:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41bf3f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41bf44:	48 8b 45 08          	mov    0x8(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41bf48:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41bf4b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41bf50:	74 05                	je     41bf57 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xd7>
  41bf52:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
    if (it->first->equals(key, pMemory)) {
  41bf57:	49 8b 7f 20          	mov    0x20(%r15),%rdi
  41bf5b:	4c 89 e2             	mov    %r12,%rdx
  41bf5e:	4c 89 ee             	mov    %r13,%rsi
  41bf61:	41 ff d6             	callq  *%r14
        if( pi_ != 0 ) pi_->release();
  41bf64:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41bf69:	48 85 ff             	test   %rdi,%rdi
  41bf6c:	74 0e                	je     41bf7c <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xfc>
  41bf6e:	88 04 24             	mov    %al,(%rsp)
  41bf71:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41bf76:	ff d0                	callq  *%rax
  41bf78:	0f b6 04 24          	movzbl (%rsp),%eax
  41bf7c:	84 c0                	test   %al,%al
  41bf7e:	74 98                	je     41bf18 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x98>
      return *it->second;
  41bf80:	49 8b 47 28          	mov    0x28(%r15),%rax

  node& k = convert_to_node(key, pMemory);
  node& v = pMemory->create_node();
  insert_map_pair(k, v);
  return v;
}
  41bf84:	48 83 c4 48          	add    $0x48,%rsp
  41bf88:	5b                   	pop    %rbx
  41bf89:	5d                   	pop    %rbp
  41bf8a:	41 5c                	pop    %r12
  41bf8c:	41 5d                	pop    %r13
  41bf8e:	41 5e                	pop    %r14
  41bf90:	41 5f                	pop    %r15
  41bf92:	c3                   	retq   
  41bf93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41bf98:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
        if( pi_ != 0 ) pi_->add_ref_copy();
  41bf9c:	48 85 ff             	test   %rdi,%rdi
  41bf9f:	0f 84 6d 03 00 00    	je     41c312 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x492>
  41bfa5:	f0 83 47 08 01       	lock addl $0x1,0x8(%rdi)
        if( pi_ != 0 ) pi_->release();
  41bfaa:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41bfb1:	ff ff ff 
  41bfb4:	48 01 d8             	add    %rbx,%rax
  41bfb7:	ff d0                	callq  *%rax
  41bfb9:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41bfbd:	48 8b 55 00          	mov    0x0(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41bfc1:	48 85 c0             	test   %rax,%rax
  41bfc4:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41bfc9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41bfce:	74 05                	je     41bfd5 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x155>
  41bfd0:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
      convert_to_map(pMemory);
  41bfd5:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
  41bfda:	48 b8 60 e9 dd ff ff 	movabs $0xffffffffffdde960,%rax
  41bfe1:	ff ff ff 
  41bfe4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41bfe9:	49 89 df             	mov    %rbx,%r15
  41bfec:	48 01 d8             	add    %rbx,%rax
  41bfef:	4c 89 e6             	mov    %r12,%rsi
  41bff2:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41bff4:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41bff9:	48 85 ff             	test   %rdi,%rdi
  41bffc:	0f 84 c6 fe ff ff    	je     41bec8 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x48>
  41c002:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c009:	ff ff ff 
  41c00c:	48 01 d8             	add    %rbx,%rax
  41c00f:	ff d0                	callq  *%rax
      break;
  41c011:	e9 b2 fe ff ff       	jmpq   41bec8 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x48>
  41c016:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41c01d:	00 00 00 
  41c020:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41c024:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c029:	48 8b 45 08          	mov    0x8(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c02d:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c030:	48 89 04 24          	mov    %rax,(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c034:	74 05                	je     41c03b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x1bb>
  41c036:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
      m_pMemory(new detail::memory_holder),
  41c03b:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41c042:	ff ff ff 
      m_pNode(&m_pMemory->create_node()) {
  41c045:	c6 44 24 20 01       	movb   $0x1,0x20(%rsp)
      m_pMemory(new detail::memory_holder),
  41c04a:	bf 10 00 00 00       	mov    $0x10,%edi
  41c04f:	49 89 c4             	mov    %rax,%r12
  41c052:	49 89 df             	mov    %rbx,%r15
  41c055:	48 01 d8             	add    %rbx,%rax
  41c058:	ff d0                	callq  *%rax
  41c05a:	49 89 c6             	mov    %rax,%r14
  memory_holder() : m_pMemory(new memory) {}
  41c05d:	4c 89 e0             	mov    %r12,%rax
  41c060:	bf 30 00 00 00       	mov    $0x30,%edi
  41c065:	4c 89 64 24 08       	mov    %r12,0x8(%rsp)
  41c06a:	48 01 d8             	add    %rbx,%rax
  41c06d:	ff d0                	callq  *%rax
  41c06f:	49 89 c4             	mov    %rax,%r12
	    _M_node_count(0)
  41c072:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  41c079:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  41c080:	00 
  41c081:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  41c088:	00 
	    this->_M_header._M_left = &this->_M_header;
  41c089:	48 8d 40 08          	lea    0x8(%rax),%rax
    explicit shared_ptr( Y * p ): px( p ), pn() // Y must be complete
  41c08d:	4d 89 26             	mov    %r12,(%r14)
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41c090:	49 c7 46 08 00 00 00 	movq   $0x0,0x8(%r14)
  41c097:	00 
            pi_ = new sp_counted_impl_p<Y>( p );
  41c098:	bf 18 00 00 00       	mov    $0x18,%edi
  41c09d:	49 89 44 24 18       	mov    %rax,0x18(%r12)
	    this->_M_header._M_right = &this->_M_header;
  41c0a2:	49 89 44 24 20       	mov    %rax,0x20(%r12)
  41c0a7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41c0ac:	48 01 d8             	add    %rbx,%rax
  41c0af:	ff d0                	callq  *%rax
        sp_counted_base * tmp = r.pi_;
  41c0b1:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  41c0b5:	48 ba c0 ef ff ff ff 	movabs $0xffffffffffffefc0,%rdx
  41c0bc:	ff ff ff 
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
  41c0bf:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41c0c6:	48 01 da             	add    %rbx,%rdx
  41c0c9:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41c0d0:	4c 89 60 10          	mov    %r12,0x10(%rax)
  41c0d4:	48 89 10             	mov    %rdx,(%rax)
        r.pi_ = pi_;
  41c0d7:	49 89 46 08          	mov    %rax,0x8(%r14)
        if( pi_ != 0 ) pi_->release();
  41c0db:	48 85 ff             	test   %rdi,%rdi
  41c0de:	74 0f                	je     41c0ef <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x26f>
  41c0e0:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c0e7:	ff ff ff 
  41c0ea:	48 01 d8             	add    %rbx,%rax
  41c0ed:	ff d0                	callq  *%rax
            pi_ = new sp_counted_impl_p<Y>( p );
  41c0ef:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41c0f4:	4c 89 74 24 28       	mov    %r14,0x28(%rsp)
  41c0f9:	bf 18 00 00 00       	mov    $0x18,%edi
    BOOST_CONSTEXPR shared_count(): pi_(0) // nothrow
  41c0fe:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41c105:	00 00 
            pi_ = new sp_counted_impl_p<Y>( p );
  41c107:	49 89 df             	mov    %rbx,%r15
  41c10a:	48 01 d8             	add    %rbx,%rax
  41c10d:	ff d0                	callq  *%rax
        sp_counted_base * tmp = r.pi_;
  41c10f:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c114:	48 ba 08 f0 ff ff ff 	movabs $0xfffffffffffff008,%rdx
  41c11b:	ff ff ff 
  41c11e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  41c125:	48 01 da             	add    %rbx,%rdx
  41c128:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  41c12f:	4c 89 70 10          	mov    %r14,0x10(%rax)
  41c133:	48 89 10             	mov    %rdx,(%rax)
        r.pi_ = pi_;
  41c136:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
        if( pi_ != 0 ) pi_->release();
  41c13b:	48 85 ff             	test   %rdi,%rdi
  41c13e:	74 0f                	je     41c14f <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x2cf>
  41c140:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c147:	ff ff ff 
  41c14a:	48 01 d8             	add    %rbx,%rax
  41c14d:	ff d0                	callq  *%rax
  41c14f:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        BOOST_ASSERT( px != 0 );
  41c154:	48 85 c0             	test   %rax,%rax
  41c157:	0f 84 c6 02 00 00    	je     41c423 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x5a3>
  41c15d:	48 8b 38             	mov    (%rax),%rdi
  41c160:	48 85 ff             	test   %rdi,%rdi
  41c163:	0f 84 36 03 00 00    	je     41c49f <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x61f>
  node& create_node() { return m_pMemory->create_node(); }
  41c169:	48 b8 a0 e4 dd ff ff 	movabs $0xffffffffffdde4a0,%rax
  41c170:	ff ff ff 
  41c173:	49 89 df             	mov    %rbx,%r15
  41c176:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41c17b:	48 01 d8             	add    %rbx,%rax
  41c17e:	ff d0                	callq  *%rax
  if (!m_isValid)
  41c180:	80 7c 24 20 00       	cmpb   $0x0,0x20(%rsp)
      m_pNode(&m_pMemory->create_node()) {
  41c185:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  if (!m_isValid)
  41c18a:	0f 84 75 03 00 00    	je     41c505 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x685>
  EnsureNodeExists();
  41c190:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
  41c195:	49 be c0 ff de ff ff 	movabs $0xffffffffffdeffc0,%r14
  41c19c:	ff ff ff 
  41c19f:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41c1a3:	4c 89 e7             	mov    %r12,%rdi
  41c1a6:	ff d0                	callq  *%rax
  m_pNode->set_scalar(rhs);
  41c1a8:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
    m_pRef->set_null();
  }
  void set_scalar(const std::string& scalar) {
    mark_defined();
  41c1ad:	48 b8 50 d9 de ff ff 	movabs $0xffffffffffded950,%rax
  41c1b4:	ff ff ff 
  41c1b7:	48 01 d8             	add    %rbx,%rax
  41c1ba:	4c 89 ff             	mov    %r15,%rdi
  41c1bd:	ff d0                	callq  *%rax
  41c1bf:	49 8b 07             	mov    (%r15),%rax
  41c1c2:	48 85 c0             	test   %rax,%rax
  41c1c5:	0f 84 91 03 00 00    	je     41c55c <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x6dc>
  41c1cb:	48 8b 38             	mov    (%rax),%rdi
  41c1ce:	48 85 ff             	test   %rdi,%rdi
  41c1d1:	0f 84 b1 03 00 00    	je     41c588 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x708>
  void set_scalar(const std::string& scalar) { m_pData->set_scalar(scalar); }
  41c1d7:	48 b8 30 e6 dd ff ff 	movabs $0xffffffffffdde630,%rax
  41c1de:	ff ff ff 
  41c1e1:	4c 89 ee             	mov    %r13,%rsi
  41c1e4:	49 89 df             	mov    %rbx,%r15
  41c1e7:	48 01 d8             	add    %rbx,%rax
  41c1ea:	ff d0                	callq  *%rax

template <typename T>
inline node& node_data::convert_to_node(const T& rhs,
                                        shared_memory_holder pMemory) {
  Node value = convert<T>::encode(rhs);
  value.EnsureNodeExists();
  41c1ec:	4c 89 e7             	mov    %r12,%rdi
  41c1ef:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  41c1f3:	ff d0                	callq  *%rax
  41c1f5:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
        BOOST_ASSERT( px != 0 );
  41c1fa:	48 85 f6             	test   %rsi,%rsi
  41c1fd:	0f 84 b9 03 00 00    	je     41c5bc <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x73c>
        BOOST_ASSERT( px != 0 );
  41c203:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41c208:	48 85 c0             	test   %rax,%rax
  41c20b:	0f 84 12 02 00 00    	je     41c423 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x5a3>
  pMemory->merge(*value.m_pMemory);
  41c211:	48 89 c7             	mov    %rax,%rdi
  41c214:	48 b8 10 e9 dd ff ff 	movabs $0xffffffffffdde910,%rax
  41c21b:	ff ff ff 
  41c21e:	49 89 df             	mov    %rbx,%r15
  41c221:	48 01 d8             	add    %rbx,%rax
  41c224:	ff d0                	callq  *%rax
  41c226:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  return *value.m_pNode;
  41c22b:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  41c230:	48 85 ff             	test   %rdi,%rdi
  41c233:	74 0f                	je     41c244 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x3c4>
  41c235:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c23c:	ff ff ff 
  41c23f:	48 01 d8             	add    %rbx,%rax
  41c242:	ff d0                	callq  *%rax
  41c244:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  41c249:	74 13                	je     41c25e <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x3de>
  41c24b:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c252:	ff ff ff 
  41c255:	48 8b 3c 24          	mov    (%rsp),%rdi
  41c259:	48 01 d8             	add    %rbx,%rax
  41c25c:	ff d0                	callq  *%rax
  41c25e:	48 8b 45 00          	mov    0x0(%rbp),%rax
  41c262:	48 85 c0             	test   %rax,%rax
  41c265:	0f 84 b8 01 00 00    	je     41c423 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x5a3>
  41c26b:	48 8b 38             	mov    (%rax),%rdi
  41c26e:	48 85 ff             	test   %rdi,%rdi
  41c271:	0f 84 28 02 00 00    	je     41c49f <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x61f>
  41c277:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41c27c:	49 89 df             	mov    %rbx,%r15
  41c27f:	48 01 d8             	add    %rbx,%rax
  41c282:	ff d0                	callq  *%rax
  insert_map_pair(k, v);
  41c284:	48 b9 70 e7 dd ff ff 	movabs $0xffffffffffdde770,%rcx
  41c28b:	ff ff ff 
  41c28e:	48 89 04 24          	mov    %rax,(%rsp)
  41c292:	48 89 c2             	mov    %rax,%rdx
  41c295:	4c 89 e6             	mov    %r12,%rsi
  41c298:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41c29d:	48 01 d9             	add    %rbx,%rcx
  41c2a0:	ff d1                	callq  *%rcx
  return v;
  41c2a2:	48 8b 04 24          	mov    (%rsp),%rax
}
  41c2a6:	48 83 c4 48          	add    $0x48,%rsp
  41c2aa:	5b                   	pop    %rbx
  41c2ab:	5d                   	pop    %rbp
  41c2ac:	41 5c                	pop    %r12
  41c2ae:	41 5d                	pop    %r13
  41c2b0:	41 5e                	pop    %r14
  41c2b2:	41 5f                	pop    %r15
  41c2b4:	c3                   	retq   
  41c2b5:	0f 1f 00             	nopl   (%rax)
      throw BadSubscript();
  41c2b8:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41c2bf:	ff ff ff 
  41c2c2:	bf 40 00 00 00       	mov    $0x40,%edi
  41c2c7:	49 89 df             	mov    %rbx,%r15
  41c2ca:	48 01 d8             	add    %rbx,%rax
  41c2cd:	ff d0                	callq  *%rax
  41c2cf:	48 89 c5             	mov    %rax,%rbp
  41c2d2:	48 89 c7             	mov    %rax,%rdi
  41c2d5:	48 b8 60 b1 de ff ff 	movabs $0xffffffffffdeb160,%rax
  41c2dc:	ff ff ff 
  41c2df:	48 01 d8             	add    %rbx,%rax
  41c2e2:	ff d0                	callq  *%rax
  41c2e4:	48 b8 f0 94 de ff ff 	movabs $0xffffffffffde94f0,%rax
  41c2eb:	ff ff ff 
  41c2ee:	48 89 ef             	mov    %rbp,%rdi
  41c2f1:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41c2f5:	48 b8 78 f7 ff ff ff 	movabs $0xfffffffffffff778,%rax
  41c2fc:	ff ff ff 
  41c2ff:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c303:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41c30a:	ff ff ff 
  41c30d:	48 01 d8             	add    %rbx,%rax
  41c310:	ff d0                	callq  *%rax
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c312:	48 8b 45 00          	mov    0x0(%rbp),%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c316:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  41c31d:	00 00 
  41c31f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41c324:	e9 ac fc ff ff       	jmpq   41bfd5 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x155>
        if( pi_ != 0 ) pi_->release();
  41c329:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41c32e:	48 89 c5             	mov    %rax,%rbp
  41c331:	48 85 ff             	test   %rdi,%rdi
  41c334:	74 0f                	je     41c345 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c336:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c33d:	ff ff ff 
  41c340:	48 01 d8             	add    %rbx,%rax
  41c343:	ff d0                	callq  *%rax
  41c345:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41c34c:	ff ff ff 
  41c34f:	48 89 ef             	mov    %rbp,%rdi
  41c352:	49 89 df             	mov    %rbx,%r15
  41c355:	48 01 d8             	add    %rbx,%rax
  41c358:	ff d0                	callq  *%rax
  41c35a:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41c35f:	48 89 c5             	mov    %rax,%rbp
  41c362:	48 85 ff             	test   %rdi,%rdi
  41c365:	74 de                	je     41c345 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c367:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c36e:	ff ff ff 
  41c371:	48 01 d8             	add    %rbx,%rax
  41c374:	ff d0                	callq  *%rax
  41c376:	eb cd                	jmp    41c345 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c378:	48 89 c5             	mov    %rax,%rbp
  41c37b:	48 8b 04 24          	mov    (%rsp),%rax
  41c37f:	48 85 c0             	test   %rax,%rax
  41c382:	74 c1                	je     41c345 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c384:	48 89 c7             	mov    %rax,%rdi
  41c387:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c38e:	ff ff ff 
  41c391:	48 01 d8             	add    %rbx,%rax
  41c394:	ff d0                	callq  *%rax
  41c396:	eb ad                	jmp    41c345 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4c5>
  41c398:	48 89 c5             	mov    %rax,%rbp
      m_pMemory(new detail::memory_holder),
  41c39b:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41c3a2:	ff ff ff 
  41c3a5:	be 10 00 00 00       	mov    $0x10,%esi
  41c3aa:	4c 89 f7             	mov    %r14,%rdi
  41c3ad:	49 89 df             	mov    %rbx,%r15
  41c3b0:	48 01 d8             	add    %rbx,%rax
  41c3b3:	ff d0                	callq  *%rax
  41c3b5:	eb c4                	jmp    41c37b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
        catch(...)
  41c3b7:	48 89 c7             	mov    %rax,%rdi
  41c3ba:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41c3c1:	ff ff ff 
  41c3c4:	49 89 df             	mov    %rbx,%r15
  41c3c7:	48 01 d8             	add    %rbx,%rax
  41c3ca:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41c3cc:	48 b8 40 fe de ff ff 	movabs $0xffffffffffdefe40,%rax
  41c3d3:	ff ff ff 
  41c3d6:	4c 89 e7             	mov    %r12,%rdi
  41c3d9:	48 01 d8             	add    %rbx,%rax
  41c3dc:	ff d0                	callq  *%rax
            throw;
  41c3de:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41c3e5:	ff ff ff 
  41c3e8:	48 01 d8             	add    %rbx,%rax
  41c3eb:	ff d0                	callq  *%rax
        catch(...)
  41c3ed:	48 89 c7             	mov    %rax,%rdi
  41c3f0:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41c3f7:	ff ff ff 
  41c3fa:	49 89 df             	mov    %rbx,%r15
  41c3fd:	48 01 d8             	add    %rbx,%rax
  41c400:	ff d0                	callq  *%rax
            boost::checked_delete( p );
  41c402:	48 b8 60 ff de ff ff 	movabs $0xffffffffffdeff60,%rax
  41c409:	ff ff ff 
  41c40c:	4c 89 f7             	mov    %r14,%rdi
  41c40f:	48 01 d8             	add    %rbx,%rax
  41c412:	ff d0                	callq  *%rax
            throw;
  41c414:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41c41b:	ff ff ff 
  41c41e:	48 01 d8             	add    %rbx,%rax
  41c421:	ff d0                	callq  *%rax
  41c423:	48 b8 8e ec dd ff ff 	movabs $0xffffffffffddec8e,%rax
  41c42a:	ff ff ff 
  41c42d:	48 01 d8             	add    %rbx,%rax
  41c430:	ff d0                	callq  *%rax
  41c432:	48 89 c5             	mov    %rax,%rbp
        catch(...)
  41c435:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  41c43c:	ff ff ff 
  41c43f:	49 89 df             	mov    %rbx,%r15
  41c442:	48 01 d8             	add    %rbx,%rax
  41c445:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c447:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  41c44b:	48 85 ff             	test   %rdi,%rdi
  41c44e:	0f 84 47 ff ff ff    	je     41c39b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x51b>
  41c454:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c45b:	ff ff ff 
  41c45e:	48 01 d8             	add    %rbx,%rax
  41c461:	ff d0                	callq  *%rax
  41c463:	e9 33 ff ff ff       	jmpq   41c39b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x51b>
  41c468:	48 89 c5             	mov    %rax,%rbp
        catch(...)
  41c46b:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  41c472:	ff ff ff 
  41c475:	49 89 df             	mov    %rbx,%r15
  41c478:	48 01 d8             	add    %rbx,%rax
  41c47b:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c47d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c482:	48 85 ff             	test   %rdi,%rdi
  41c485:	0f 84 f0 fe ff ff    	je     41c37b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c48b:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c492:	ff ff ff 
  41c495:	48 01 d8             	add    %rbx,%rax
  41c498:	ff d0                	callq  *%rax
  41c49a:	e9 dc fe ff ff       	jmpq   41c37b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
        BOOST_ASSERT( px != 0 );
  41c49f:	48 b8 a0 86 df ff ff 	movabs $0xffffffffffdf86a0,%rax
  41c4a6:	ff ff ff 
  41c4a9:	ba de 02 00 00       	mov    $0x2de,%edx
  41c4ae:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
        BOOST_ASSERT( px != 0 );
  41c4b2:	48 b8 00 7a df ff ff 	movabs $0xffffffffffdf7a00,%rax
  41c4b9:	ff ff ff 
  41c4bc:	49 89 df             	mov    %rbx,%r15
  41c4bf:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c4c3:	48 b8 a9 7d df ff ff 	movabs $0xffffffffffdf7da9,%rax
  41c4ca:	ff ff ff 
  41c4cd:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41c4d1:	48 b8 f0 e5 dd ff ff 	movabs $0xffffffffffdde5f0,%rax
  41c4d8:	ff ff ff 
  41c4db:	48 01 d8             	add    %rbx,%rax
  41c4de:	ff d0                	callq  *%rax
  41c4e0:	48 89 c5             	mov    %rax,%rbp
  41c4e3:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c4e8:	48 85 ff             	test   %rdi,%rdi
  41c4eb:	0f 84 8a fe ff ff    	je     41c37b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c4f1:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c4f8:	ff ff ff 
  41c4fb:	48 01 d8             	add    %rbx,%rax
  41c4fe:	ff d0                	callq  *%rax
  41c500:	e9 76 fe ff ff       	jmpq   41c37b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
    throw InvalidNode();
  41c505:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41c50c:	ff ff ff 
  41c50f:	bf 40 00 00 00       	mov    $0x40,%edi
  41c514:	48 01 d8             	add    %rbx,%rax
  41c517:	ff d0                	callq  *%rax
  41c519:	49 89 c4             	mov    %rax,%r12
  41c51c:	48 89 c7             	mov    %rax,%rdi
  41c51f:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  41c526:	ff ff ff 
  41c529:	48 01 d8             	add    %rbx,%rax
  41c52c:	ff d0                	callq  *%rax
  41c52e:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  41c535:	ff ff ff 
  41c538:	4c 89 e7             	mov    %r12,%rdi
  41c53b:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41c53f:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41c546:	ff ff ff 
  41c549:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c54d:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41c554:	ff ff ff 
  41c557:	48 01 d8             	add    %rbx,%rax
  41c55a:	ff d0                	callq  *%rax
  41c55c:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  41c563:	ff ff ff 
  41c566:	48 01 d8             	add    %rbx,%rax
  41c569:	ff d0                	callq  *%rax
  41c56b:	48 89 c5             	mov    %rax,%rbp
  41c56e:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  41c575:	ff ff ff 
  41c578:	4c 89 e7             	mov    %r12,%rdi
  41c57b:	49 89 df             	mov    %rbx,%r15
  41c57e:	48 01 d8             	add    %rbx,%rax
  41c581:	ff d0                	callq  *%rax
  41c583:	e9 5b ff ff ff       	jmpq   41c4e3 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x663>
  41c588:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  41c58f:	ff ff ff 
  41c592:	48 01 d8             	add    %rbx,%rax
  41c595:	ff d0                	callq  *%rax
  41c597:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41c59c:	48 89 c5             	mov    %rax,%rbp
  41c59f:	48 85 ff             	test   %rdi,%rdi
  41c5a2:	0f 84 d3 fd ff ff    	je     41c37b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c5a8:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c5af:	ff ff ff 
  41c5b2:	48 01 d8             	add    %rbx,%rax
  41c5b5:	ff d0                	callq  *%rax
  41c5b7:	e9 bf fd ff ff       	jmpq   41c37b <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x4fb>
  41c5bc:	48 b8 00 84 df ff ff 	movabs $0xffffffffffdf8400,%rax
  41c5c3:	ff ff ff 
  41c5c6:	ba d8 02 00 00       	mov    $0x2d8,%edx
  41c5cb:	48 8d 0c 03          	lea    (%rbx,%rax,1),%rcx
  41c5cf:	e9 de fe ff ff       	jmpq   41c4b2 <_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x632>
  41c5d4:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41c5db:	ff ff ff 
  41c5de:	49 89 c4             	mov    %rax,%r12
  41c5e1:	48 89 ef             	mov    %rbp,%rdi
  41c5e4:	49 89 df             	mov    %rbx,%r15
  41c5e7:	48 01 da             	add    %rbx,%rdx
  41c5ea:	ff d2                	callq  *%rdx
  41c5ec:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41c5f3:	ff ff ff 
  41c5f6:	4c 89 e7             	mov    %r12,%rdi
  41c5f9:	48 01 d8             	add    %rbx,%rax
  41c5fc:	ff d0                	callq  *%rax
  41c5fe:	66 90                	xchg   %ax,%ax

000000000041c600 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE>:
    // it, and returns a pointer so that it can be NULL (if there is no such
    // key).
    return static_cast<const node_ref&>(*m_pRef).get(key, pMemory);
  }
  template <typename Key>
  node& get(const Key& key, shared_memory_holder pMemory) {
  41c600:	41 57                	push   %r15
  41c602:	41 56                	push   %r14
  41c604:	49 bb 00 ea 20 00 00 	movabs $0x20ea00,%r11
  41c60b:	00 00 00 
  41c60e:	41 55                	push   %r13
  41c610:	41 54                	push   %r12
  41c612:	49 89 fd             	mov    %rdi,%r13
  41c615:	55                   	push   %rbp
  41c616:	53                   	push   %rbx
  41c617:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41c600 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE>
  41c61e:	48 83 ec 18          	sub    $0x18,%rsp
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c622:	48 8b 6a 08          	mov    0x8(%rdx),%rbp
  41c626:	4c 01 db             	add    %r11,%rbx
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c629:	48 8b 0a             	mov    (%rdx),%rcx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c62c:	48 85 ed             	test   %rbp,%rbp
  41c62f:	0f 84 d3 00 00 00    	je     41c708 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x108>
      { return __atomic_fetch_add(&_M_i, __i, __m); }
  41c635:	48 8d 45 08          	lea    0x8(%rbp),%rax
  41c639:	f0 83 00 01          	lock addl $0x1,(%rax)
  41c63d:	48 8b 17             	mov    (%rdi),%rdx
        BOOST_ASSERT( px != 0 );
  41c640:	48 85 d2             	test   %rdx,%rdx
  41c643:	0f 84 d9 00 00 00    	je     41c722 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x122>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c649:	48 89 0c 24          	mov    %rcx,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c64d:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  41c652:	f0 83 00 01          	lock addl $0x1,(%rax)
  41c656:	48 8b 3a             	mov    (%rdx),%rdi
        BOOST_ASSERT( px != 0 );
  41c659:	48 85 ff             	test   %rdi,%rdi
  41c65c:	0f 84 cf 00 00 00    	je     41c731 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x131>
  node* get(const Key& key, shared_memory_holder pMemory) const {
    return static_cast<const node_data&>(*m_pData).get(key, pMemory);
  }
  template <typename Key>
  node& get(const Key& key, shared_memory_holder pMemory) {
    return m_pData->get(key, pMemory);
  41c662:	48 b8 80 0e df ff ff 	movabs $0xffffffffffdf0e80,%rax
  41c669:	ff ff ff 
  41c66c:	49 89 e6             	mov    %rsp,%r14
  41c66f:	48 89 e2             	mov    %rsp,%rdx
  41c672:	48 01 d8             	add    %rbx,%rax
  41c675:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c677:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c67c:	49 89 c4             	mov    %rax,%r12
  41c67f:	48 85 ff             	test   %rdi,%rdi
  41c682:	74 0f                	je     41c693 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x93>
  41c684:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c68b:	ff ff ff 
  41c68e:	48 01 d8             	add    %rbx,%rax
  41c691:	ff d0                	callq  *%rax
  41c693:	48 85 ed             	test   %rbp,%rbp
  41c696:	74 12                	je     41c6aa <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xaa>
  41c698:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c69f:	ff ff ff 
  41c6a2:	48 89 ef             	mov    %rbp,%rdi
  41c6a5:	48 01 d8             	add    %rbx,%rax
  41c6a8:	ff d0                	callq  *%rax
  41c6aa:	49 8b 04 24          	mov    (%r12),%rax
  41c6ae:	48 85 c0             	test   %rax,%rax
  41c6b1:	74 6f                	je     41c722 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x122>
  41c6b3:	48 8b 00             	mov    (%rax),%rax
  41c6b6:	48 85 c0             	test   %rax,%rax
  41c6b9:	74 76                	je     41c731 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x131>
    if (is_defined())
  41c6bb:	80 38 00             	cmpb   $0x0,(%rax)
  41c6be:	75 30                	jne    41c6f0 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xf0>
	  _M_t._M_insert_unique(std::move(__x));
  41c6c0:	48 b8 90 da de ff ff 	movabs $0xffffffffffdeda90,%rax
  41c6c7:	ff ff ff 
      m_dependencies.insert(&rhs);
  41c6ca:	4c 89 2c 24          	mov    %r13,(%rsp)
  41c6ce:	49 8d 7c 24 10       	lea    0x10(%r12),%rdi
  41c6d3:	4c 89 f6             	mov    %r14,%rsi
  41c6d6:	48 01 d8             	add    %rbx,%rax
  41c6d9:	ff d0                	callq  *%rax
    node& value = m_pRef->get(key, pMemory);
    value.add_dependency(*this);
    return value;
  }
  41c6db:	48 83 c4 18          	add    $0x18,%rsp
  41c6df:	4c 89 e0             	mov    %r12,%rax
  41c6e2:	5b                   	pop    %rbx
  41c6e3:	5d                   	pop    %rbp
  41c6e4:	41 5c                	pop    %r12
  41c6e6:	41 5d                	pop    %r13
  41c6e8:	41 5e                	pop    %r14
  41c6ea:	41 5f                	pop    %r15
  41c6ec:	c3                   	retq   
  41c6ed:	0f 1f 00             	nopl   (%rax)
      rhs.mark_defined();
  41c6f0:	48 b8 50 d9 de ff ff 	movabs $0xffffffffffded950,%rax
  41c6f7:	ff ff ff 
  41c6fa:	4c 89 ef             	mov    %r13,%rdi
  41c6fd:	48 01 d8             	add    %rbx,%rax
  41c700:	ff d0                	callq  *%rax
  41c702:	eb d7                	jmp    41c6db <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0xdb>
  41c704:	0f 1f 40 00          	nopl   0x0(%rax)
  41c708:	48 8b 17             	mov    (%rdi),%rdx
  41c70b:	48 85 d2             	test   %rdx,%rdx
  41c70e:	74 12                	je     41c722 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x122>
    shared_ptr( shared_ptr const & r ) BOOST_SP_NOEXCEPT : px( r.px ), pn( r.pn )
  41c710:	48 89 0c 24          	mov    %rcx,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c714:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  41c71b:	00 00 
  41c71d:	e9 34 ff ff ff       	jmpq   41c656 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x56>
  41c722:	48 b8 e2 eb dd ff ff 	movabs $0xffffffffffddebe2,%rax
  41c729:	ff ff ff 
  41c72c:	48 01 d8             	add    %rbx,%rax
  41c72f:	ff d0                	callq  *%rax
  41c731:	48 b8 36 eb dd ff ff 	movabs $0xffffffffffddeb36,%rax
  41c738:	ff ff ff 
  41c73b:	48 01 d8             	add    %rbx,%rax
  41c73e:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c740:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c745:	49 89 c4             	mov    %rax,%r12
  41c748:	48 85 ff             	test   %rdi,%rdi
  41c74b:	74 0f                	je     41c75c <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x15c>
  41c74d:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c754:	ff ff ff 
  41c757:	48 01 d8             	add    %rbx,%rax
  41c75a:	ff d0                	callq  *%rax
  41c75c:	48 85 ed             	test   %rbp,%rbp
  41c75f:	74 12                	je     41c773 <_ZN4YAML6detail4node3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_RKT_N5boost10shared_ptrINS0_13memory_holderEEE+0x173>
  41c761:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c768:	ff ff ff 
  41c76b:	48 89 ef             	mov    %rbp,%rdi
  41c76e:	48 01 d8             	add    %rbx,%rax
  41c771:	ff d0                	callq  *%rax
  41c773:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41c77a:	ff ff ff 
  41c77d:	4c 89 e7             	mov    %r12,%rdi
  41c780:	49 89 df             	mov    %rbx,%r15
  41c783:	48 01 d8             	add    %rbx,%rax
  41c786:	ff d0                	callq  *%rax
  41c788:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41c78f:	00 

000000000041c790 <_ZN4YAML4NodeixIA11_cEES0_RKT_>:

template <typename Key>
inline Node Node::operator[](const Key& key) {
  41c790:	41 57                	push   %r15
  41c792:	41 56                	push   %r14
  41c794:	49 bb 70 e8 20 00 00 	movabs $0x20e870,%r11
  41c79b:	00 00 00 
  41c79e:	41 55                	push   %r13
  41c7a0:	41 54                	push   %r12
  41c7a2:	55                   	push   %rbp
  41c7a3:	53                   	push   %rbx
  41c7a4:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41c790 <_ZN4YAML4NodeixIA11_cEES0_RKT_>
  41c7ab:	48 83 ec 38          	sub    $0x38,%rsp
  41c7af:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41c7b2:	80 3e 00             	cmpb   $0x0,(%rsi)
  41c7b5:	0f 84 0f 01 00 00    	je     41c8ca <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x13a>
  41c7bb:	48 89 f5             	mov    %rsi,%rbp
    throw InvalidNode();
  EnsureNodeExists();
  41c7be:	48 b8 c0 ff de ff ff 	movabs $0xffffffffffdeffc0,%rax
  41c7c5:	ff ff ff 
  41c7c8:	49 89 fc             	mov    %rdi,%r12
  41c7cb:	48 01 d8             	add    %rbx,%rax
  41c7ce:	49 89 d6             	mov    %rdx,%r14
  41c7d1:	48 89 f7             	mov    %rsi,%rdi
  41c7d4:	ff d0                	callq  *%rax
  41c7d6:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41c7da:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c7de:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c7e2:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c7e5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c7ea:	74 05                	je     41c7f1 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x61>
  41c7ec:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41c7f1:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41c7f6:	48 b8 90 2c de ff ff 	movabs $0xffffffffffde2c90,%rax
  41c7fd:	ff ff ff 
  41c800:	4c 89 f6             	mov    %r14,%rsi
  41c803:	48 01 d8             	add    %rbx,%rax
  41c806:	4c 89 ef             	mov    %r13,%rdi
  41c809:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41c80b:	48 b8 00 16 df ff ff 	movabs $0xffffffffffdf1600,%rax
  41c812:	ff ff ff 
  41c815:	48 89 e2             	mov    %rsp,%rdx
  41c818:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41c81c:	4c 89 ee             	mov    %r13,%rsi
  41c81f:	48 01 d8             	add    %rbx,%rax
  41c822:	ff d0                	callq  *%rax
  41c824:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41c829:	49 83 c5 10          	add    $0x10,%r13
  41c82d:	49 89 c6             	mov    %rax,%r14
  41c830:	4c 39 ef             	cmp    %r13,%rdi
  41c833:	74 12                	je     41c847 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0xb7>
  41c835:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41c83c:	ff ff ff 
  41c83f:	49 89 df             	mov    %rbx,%r15
  41c842:	48 01 d8             	add    %rbx,%rax
  41c845:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c847:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c84c:	48 85 ff             	test   %rdi,%rdi
  41c84f:	74 0f                	je     41c860 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0xd0>
  41c851:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c858:	ff ff ff 
  41c85b:	48 01 d8             	add    %rbx,%rax
  41c85e:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c860:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41c864:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41c868:	48 85 ff             	test   %rdi,%rdi
  41c86b:	74 43                	je     41c8b0 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x120>
  41c86d:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41c871:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41c875:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41c87a:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c87f:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41c884:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41c888:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c88f:	ff ff ff 
  41c892:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41c897:	48 01 d8             	add    %rbx,%rax
  41c89a:	ff d0                	callq  *%rax
  return Node(value, m_pMemory);
}
  41c89c:	48 83 c4 38          	add    $0x38,%rsp
  41c8a0:	4c 89 e0             	mov    %r12,%rax
  41c8a3:	5b                   	pop    %rbx
  41c8a4:	5d                   	pop    %rbp
  41c8a5:	41 5c                	pop    %r12
  41c8a7:	41 5d                	pop    %r13
  41c8a9:	41 5e                	pop    %r14
  41c8ab:	41 5f                	pop    %r15
  41c8ad:	c3                   	retq   
  41c8ae:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41c8b0:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41c8b5:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c8ba:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41c8c1:	00 00 
  41c8c3:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41c8c8:	eb d2                	jmp    41c89c <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41c8ca:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41c8d1:	ff ff ff 
  41c8d4:	bf 40 00 00 00       	mov    $0x40,%edi
  41c8d9:	49 89 df             	mov    %rbx,%r15
  41c8dc:	48 01 d8             	add    %rbx,%rax
  41c8df:	ff d0                	callq  *%rax
  41c8e1:	48 89 c5             	mov    %rax,%rbp
  41c8e4:	48 89 c7             	mov    %rax,%rdi
  41c8e7:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  41c8ee:	ff ff ff 
  41c8f1:	48 01 d8             	add    %rbx,%rax
  41c8f4:	ff d0                	callq  *%rax
  41c8f6:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  41c8fd:	ff ff ff 
  41c900:	48 89 ef             	mov    %rbp,%rdi
  41c903:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41c907:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41c90e:	ff ff ff 
  41c911:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41c915:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41c91c:	ff ff ff 
  41c91f:	48 01 d8             	add    %rbx,%rax
  41c922:	ff d0                	callq  *%rax
  41c924:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41c929:	49 83 c5 10          	add    $0x10,%r13
  41c92d:	48 89 c5             	mov    %rax,%rbp
  41c930:	4c 39 ef             	cmp    %r13,%rdi
  41c933:	74 12                	je     41c947 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x1b7>
  41c935:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41c93c:	ff ff ff 
  41c93f:	49 89 df             	mov    %rbx,%r15
  41c942:	48 01 d8             	add    %rbx,%rax
  41c945:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41c947:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41c94c:	48 85 ff             	test   %rdi,%rdi
  41c94f:	74 0f                	je     41c960 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x1d0>
  41c951:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41c958:	ff ff ff 
  41c95b:	48 01 d8             	add    %rbx,%rax
  41c95e:	ff d0                	callq  *%rax
  41c960:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41c967:	ff ff ff 
  41c96a:	48 89 ef             	mov    %rbp,%rdi
  41c96d:	49 89 df             	mov    %rbx,%r15
  41c970:	48 01 d8             	add    %rbx,%rax
  41c973:	ff d0                	callq  *%rax
  41c975:	48 89 c5             	mov    %rax,%rbp
  41c978:	eb cd                	jmp    41c947 <_ZN4YAML4NodeixIA11_cEES0_RKT_+0x1b7>
  41c97a:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41c981:	ff ff ff 
  41c984:	49 89 c4             	mov    %rax,%r12
  41c987:	48 89 ef             	mov    %rbp,%rdi
  41c98a:	49 89 df             	mov    %rbx,%r15
  41c98d:	48 01 da             	add    %rbx,%rdx
  41c990:	ff d2                	callq  *%rdx
  41c992:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41c999:	ff ff ff 
  41c99c:	4c 89 e7             	mov    %r12,%rdi
  41c99f:	48 01 d8             	add    %rbx,%rax
  41c9a2:	ff d0                	callq  *%rax
  41c9a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41c9ab:	00 00 00 
  41c9ae:	66 90                	xchg   %ax,%ax

000000000041c9b0 <_ZN4YAML4NodeixIA4_cEES0_RKT_>:
inline Node Node::operator[](const Key& key) {
  41c9b0:	41 57                	push   %r15
  41c9b2:	41 56                	push   %r14
  41c9b4:	49 bb 50 e6 20 00 00 	movabs $0x20e650,%r11
  41c9bb:	00 00 00 
  41c9be:	41 55                	push   %r13
  41c9c0:	41 54                	push   %r12
  41c9c2:	55                   	push   %rbp
  41c9c3:	53                   	push   %rbx
  41c9c4:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41c9b0 <_ZN4YAML4NodeixIA4_cEES0_RKT_>
  41c9cb:	48 83 ec 38          	sub    $0x38,%rsp
  41c9cf:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41c9d2:	80 3e 00             	cmpb   $0x0,(%rsi)
  41c9d5:	0f 84 0f 01 00 00    	je     41caea <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x13a>
  41c9db:	48 89 f5             	mov    %rsi,%rbp
  EnsureNodeExists();
  41c9de:	48 b8 c0 ff de ff ff 	movabs $0xffffffffffdeffc0,%rax
  41c9e5:	ff ff ff 
  41c9e8:	49 89 fc             	mov    %rdi,%r12
  41c9eb:	48 01 d8             	add    %rbx,%rax
  41c9ee:	49 89 d6             	mov    %rdx,%r14
  41c9f1:	48 89 f7             	mov    %rsi,%rdi
  41c9f4:	ff d0                	callq  *%rax
  41c9f6:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41c9fa:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41c9fe:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41ca02:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ca05:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41ca0a:	74 05                	je     41ca11 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x61>
  41ca0c:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41ca11:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41ca16:	48 b8 90 2c de ff ff 	movabs $0xffffffffffde2c90,%rax
  41ca1d:	ff ff ff 
  41ca20:	4c 89 f6             	mov    %r14,%rsi
  41ca23:	48 01 d8             	add    %rbx,%rax
  41ca26:	4c 89 ef             	mov    %r13,%rdi
  41ca29:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41ca2b:	48 b8 00 16 df ff ff 	movabs $0xffffffffffdf1600,%rax
  41ca32:	ff ff ff 
  41ca35:	48 89 e2             	mov    %rsp,%rdx
  41ca38:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41ca3c:	4c 89 ee             	mov    %r13,%rsi
  41ca3f:	48 01 d8             	add    %rbx,%rax
  41ca42:	ff d0                	callq  *%rax
  41ca44:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41ca49:	49 83 c5 10          	add    $0x10,%r13
  41ca4d:	49 89 c6             	mov    %rax,%r14
  41ca50:	4c 39 ef             	cmp    %r13,%rdi
  41ca53:	74 12                	je     41ca67 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0xb7>
  41ca55:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ca5c:	ff ff ff 
  41ca5f:	49 89 df             	mov    %rbx,%r15
  41ca62:	48 01 d8             	add    %rbx,%rax
  41ca65:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41ca67:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41ca6c:	48 85 ff             	test   %rdi,%rdi
  41ca6f:	74 0f                	je     41ca80 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0xd0>
  41ca71:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41ca78:	ff ff ff 
  41ca7b:	48 01 d8             	add    %rbx,%rax
  41ca7e:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ca80:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41ca84:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41ca88:	48 85 ff             	test   %rdi,%rdi
  41ca8b:	74 43                	je     41cad0 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x120>
  41ca8d:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41ca91:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41ca95:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41ca9a:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ca9f:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41caa4:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41caa8:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41caaf:	ff ff ff 
  41cab2:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cab7:	48 01 d8             	add    %rbx,%rax
  41caba:	ff d0                	callq  *%rax
}
  41cabc:	48 83 c4 38          	add    $0x38,%rsp
  41cac0:	4c 89 e0             	mov    %r12,%rax
  41cac3:	5b                   	pop    %rbx
  41cac4:	5d                   	pop    %rbp
  41cac5:	41 5c                	pop    %r12
  41cac7:	41 5d                	pop    %r13
  41cac9:	41 5e                	pop    %r14
  41cacb:	41 5f                	pop    %r15
  41cacd:	c3                   	retq   
  41cace:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cad0:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cad5:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cada:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41cae1:	00 00 
  41cae3:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cae8:	eb d2                	jmp    41cabc <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41caea:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41caf1:	ff ff ff 
  41caf4:	bf 40 00 00 00       	mov    $0x40,%edi
  41caf9:	49 89 df             	mov    %rbx,%r15
  41cafc:	48 01 d8             	add    %rbx,%rax
  41caff:	ff d0                	callq  *%rax
  41cb01:	48 89 c5             	mov    %rax,%rbp
  41cb04:	48 89 c7             	mov    %rax,%rdi
  41cb07:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  41cb0e:	ff ff ff 
  41cb11:	48 01 d8             	add    %rbx,%rax
  41cb14:	ff d0                	callq  *%rax
  41cb16:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  41cb1d:	ff ff ff 
  41cb20:	48 89 ef             	mov    %rbp,%rdi
  41cb23:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41cb27:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41cb2e:	ff ff ff 
  41cb31:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41cb35:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41cb3c:	ff ff ff 
  41cb3f:	48 01 d8             	add    %rbx,%rax
  41cb42:	ff d0                	callq  *%rax
  41cb44:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cb49:	49 83 c5 10          	add    $0x10,%r13
  41cb4d:	48 89 c5             	mov    %rax,%rbp
  41cb50:	4c 39 ef             	cmp    %r13,%rdi
  41cb53:	74 12                	je     41cb67 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x1b7>
  41cb55:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41cb5c:	ff ff ff 
  41cb5f:	49 89 df             	mov    %rbx,%r15
  41cb62:	48 01 d8             	add    %rbx,%rax
  41cb65:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cb67:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cb6c:	48 85 ff             	test   %rdi,%rdi
  41cb6f:	74 0f                	je     41cb80 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x1d0>
  41cb71:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41cb78:	ff ff ff 
  41cb7b:	48 01 d8             	add    %rbx,%rax
  41cb7e:	ff d0                	callq  *%rax
  41cb80:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41cb87:	ff ff ff 
  41cb8a:	48 89 ef             	mov    %rbp,%rdi
  41cb8d:	49 89 df             	mov    %rbx,%r15
  41cb90:	48 01 d8             	add    %rbx,%rax
  41cb93:	ff d0                	callq  *%rax
  41cb95:	48 89 c5             	mov    %rax,%rbp
  41cb98:	eb cd                	jmp    41cb67 <_ZN4YAML4NodeixIA4_cEES0_RKT_+0x1b7>
  41cb9a:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41cba1:	ff ff ff 
  41cba4:	49 89 c4             	mov    %rax,%r12
  41cba7:	48 89 ef             	mov    %rbp,%rdi
  41cbaa:	49 89 df             	mov    %rbx,%r15
  41cbad:	48 01 da             	add    %rbx,%rdx
  41cbb0:	ff d2                	callq  *%rdx
  41cbb2:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41cbb9:	ff ff ff 
  41cbbc:	4c 89 e7             	mov    %r12,%rdi
  41cbbf:	48 01 d8             	add    %rbx,%rax
  41cbc2:	ff d0                	callq  *%rax
  41cbc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41cbcb:	00 00 00 
  41cbce:	66 90                	xchg   %ax,%ax

000000000041cbd0 <_ZN4YAML4NodeixIA10_cEES0_RKT_>:
inline Node Node::operator[](const Key& key) {
  41cbd0:	41 57                	push   %r15
  41cbd2:	41 56                	push   %r14
  41cbd4:	49 bb 30 e4 20 00 00 	movabs $0x20e430,%r11
  41cbdb:	00 00 00 
  41cbde:	41 55                	push   %r13
  41cbe0:	41 54                	push   %r12
  41cbe2:	55                   	push   %rbp
  41cbe3:	53                   	push   %rbx
  41cbe4:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41cbd0 <_ZN4YAML4NodeixIA10_cEES0_RKT_>
  41cbeb:	48 83 ec 38          	sub    $0x38,%rsp
  41cbef:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41cbf2:	80 3e 00             	cmpb   $0x0,(%rsi)
  41cbf5:	0f 84 0f 01 00 00    	je     41cd0a <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x13a>
  41cbfb:	48 89 f5             	mov    %rsi,%rbp
  EnsureNodeExists();
  41cbfe:	48 b8 c0 ff de ff ff 	movabs $0xffffffffffdeffc0,%rax
  41cc05:	ff ff ff 
  41cc08:	49 89 fc             	mov    %rdi,%r12
  41cc0b:	48 01 d8             	add    %rbx,%rax
  41cc0e:	49 89 d6             	mov    %rdx,%r14
  41cc11:	48 89 f7             	mov    %rsi,%rdi
  41cc14:	ff d0                	callq  *%rax
  41cc16:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41cc1a:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cc1e:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cc22:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cc25:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cc2a:	74 05                	je     41cc31 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x61>
  41cc2c:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41cc31:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41cc36:	48 b8 90 2c de ff ff 	movabs $0xffffffffffde2c90,%rax
  41cc3d:	ff ff ff 
  41cc40:	4c 89 f6             	mov    %r14,%rsi
  41cc43:	48 01 d8             	add    %rbx,%rax
  41cc46:	4c 89 ef             	mov    %r13,%rdi
  41cc49:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41cc4b:	48 b8 00 16 df ff ff 	movabs $0xffffffffffdf1600,%rax
  41cc52:	ff ff ff 
  41cc55:	48 89 e2             	mov    %rsp,%rdx
  41cc58:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41cc5c:	4c 89 ee             	mov    %r13,%rsi
  41cc5f:	48 01 d8             	add    %rbx,%rax
  41cc62:	ff d0                	callq  *%rax
  41cc64:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cc69:	49 83 c5 10          	add    $0x10,%r13
  41cc6d:	49 89 c6             	mov    %rax,%r14
  41cc70:	4c 39 ef             	cmp    %r13,%rdi
  41cc73:	74 12                	je     41cc87 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0xb7>
  41cc75:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41cc7c:	ff ff ff 
  41cc7f:	49 89 df             	mov    %rbx,%r15
  41cc82:	48 01 d8             	add    %rbx,%rax
  41cc85:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cc87:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cc8c:	48 85 ff             	test   %rdi,%rdi
  41cc8f:	74 0f                	je     41cca0 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0xd0>
  41cc91:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41cc98:	ff ff ff 
  41cc9b:	48 01 d8             	add    %rbx,%rax
  41cc9e:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cca0:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41cca4:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cca8:	48 85 ff             	test   %rdi,%rdi
  41ccab:	74 43                	je     41ccf0 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x120>
  41ccad:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41ccb1:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41ccb5:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41ccba:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ccbf:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41ccc4:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41ccc8:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41cccf:	ff ff ff 
  41ccd2:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41ccd7:	48 01 d8             	add    %rbx,%rax
  41ccda:	ff d0                	callq  *%rax
}
  41ccdc:	48 83 c4 38          	add    $0x38,%rsp
  41cce0:	4c 89 e0             	mov    %r12,%rax
  41cce3:	5b                   	pop    %rbx
  41cce4:	5d                   	pop    %rbp
  41cce5:	41 5c                	pop    %r12
  41cce7:	41 5d                	pop    %r13
  41cce9:	41 5e                	pop    %r14
  41cceb:	41 5f                	pop    %r15
  41cced:	c3                   	retq   
  41ccee:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41ccf0:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41ccf5:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ccfa:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41cd01:	00 00 
  41cd03:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cd08:	eb d2                	jmp    41ccdc <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41cd0a:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41cd11:	ff ff ff 
  41cd14:	bf 40 00 00 00       	mov    $0x40,%edi
  41cd19:	49 89 df             	mov    %rbx,%r15
  41cd1c:	48 01 d8             	add    %rbx,%rax
  41cd1f:	ff d0                	callq  *%rax
  41cd21:	48 89 c5             	mov    %rax,%rbp
  41cd24:	48 89 c7             	mov    %rax,%rdi
  41cd27:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  41cd2e:	ff ff ff 
  41cd31:	48 01 d8             	add    %rbx,%rax
  41cd34:	ff d0                	callq  *%rax
  41cd36:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  41cd3d:	ff ff ff 
  41cd40:	48 89 ef             	mov    %rbp,%rdi
  41cd43:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41cd47:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41cd4e:	ff ff ff 
  41cd51:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41cd55:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41cd5c:	ff ff ff 
  41cd5f:	48 01 d8             	add    %rbx,%rax
  41cd62:	ff d0                	callq  *%rax
  41cd64:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cd69:	49 83 c5 10          	add    $0x10,%r13
  41cd6d:	48 89 c5             	mov    %rax,%rbp
  41cd70:	4c 39 ef             	cmp    %r13,%rdi
  41cd73:	74 12                	je     41cd87 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x1b7>
  41cd75:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41cd7c:	ff ff ff 
  41cd7f:	49 89 df             	mov    %rbx,%r15
  41cd82:	48 01 d8             	add    %rbx,%rax
  41cd85:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cd87:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cd8c:	48 85 ff             	test   %rdi,%rdi
  41cd8f:	74 0f                	je     41cda0 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x1d0>
  41cd91:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41cd98:	ff ff ff 
  41cd9b:	48 01 d8             	add    %rbx,%rax
  41cd9e:	ff d0                	callq  *%rax
  41cda0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41cda7:	ff ff ff 
  41cdaa:	48 89 ef             	mov    %rbp,%rdi
  41cdad:	49 89 df             	mov    %rbx,%r15
  41cdb0:	48 01 d8             	add    %rbx,%rax
  41cdb3:	ff d0                	callq  *%rax
  41cdb5:	48 89 c5             	mov    %rax,%rbp
  41cdb8:	eb cd                	jmp    41cd87 <_ZN4YAML4NodeixIA10_cEES0_RKT_+0x1b7>
  41cdba:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41cdc1:	ff ff ff 
  41cdc4:	49 89 c4             	mov    %rax,%r12
  41cdc7:	48 89 ef             	mov    %rbp,%rdi
  41cdca:	49 89 df             	mov    %rbx,%r15
  41cdcd:	48 01 da             	add    %rbx,%rdx
  41cdd0:	ff d2                	callq  *%rdx
  41cdd2:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41cdd9:	ff ff ff 
  41cddc:	4c 89 e7             	mov    %r12,%rdi
  41cddf:	48 01 d8             	add    %rbx,%rax
  41cde2:	ff d0                	callq  *%rax
  41cde4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41cdeb:	00 00 00 
  41cdee:	66 90                	xchg   %ax,%ax

000000000041cdf0 <_ZN4YAML4NodeixIA7_cEES0_RKT_>:
inline Node Node::operator[](const Key& key) {
  41cdf0:	41 57                	push   %r15
  41cdf2:	41 56                	push   %r14
  41cdf4:	49 bb 10 e2 20 00 00 	movabs $0x20e210,%r11
  41cdfb:	00 00 00 
  41cdfe:	41 55                	push   %r13
  41ce00:	41 54                	push   %r12
  41ce02:	55                   	push   %rbp
  41ce03:	53                   	push   %rbx
  41ce04:	48 8d 1d e5 ff ff ff 	lea    -0x1b(%rip),%rbx        # 41cdf0 <_ZN4YAML4NodeixIA7_cEES0_RKT_>
  41ce0b:	48 83 ec 38          	sub    $0x38,%rsp
  41ce0f:	4c 01 db             	add    %r11,%rbx
  if (!m_isValid)
  41ce12:	80 3e 00             	cmpb   $0x0,(%rsi)
  41ce15:	0f 84 0f 01 00 00    	je     41cf2a <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x13a>
  41ce1b:	48 89 f5             	mov    %rsi,%rbp
  EnsureNodeExists();
  41ce1e:	48 b8 c0 ff de ff ff 	movabs $0xffffffffffdeffc0,%rax
  41ce25:	ff ff ff 
  41ce28:	49 89 fc             	mov    %rdi,%r12
  41ce2b:	48 01 d8             	add    %rbx,%rax
  41ce2e:	49 89 d6             	mov    %rdx,%r14
  41ce31:	48 89 f7             	mov    %rsi,%rdi
  41ce34:	ff d0                	callq  *%rax
  41ce36:	48 8b 45 08          	mov    0x8(%rbp),%rax
  41ce3a:	48 89 04 24          	mov    %rax,(%rsp)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ce3e:	48 8b 45 10          	mov    0x10(%rbp),%rax
        if( pi_ != 0 ) pi_->add_ref_copy();
  41ce42:	48 85 c0             	test   %rax,%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41ce45:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        if( pi_ != 0 ) pi_->add_ref_copy();
  41ce4a:	74 05                	je     41ce51 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x61>
  41ce4c:	f0 83 40 08 01       	lock addl $0x1,0x8(%rax)
  const std::string operator()() const { return t; }
  41ce51:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  41ce56:	48 b8 90 2c de ff ff 	movabs $0xffffffffffde2c90,%rax
  41ce5d:	ff ff ff 
  41ce60:	4c 89 f6             	mov    %r14,%rsi
  41ce63:	48 01 d8             	add    %rbx,%rax
  41ce66:	4c 89 ef             	mov    %r13,%rdi
  41ce69:	ff d0                	callq  *%rax
  detail::node& value = m_pNode->get(detail::to_value(key), m_pMemory);
  41ce6b:	48 b8 00 16 df ff ff 	movabs $0xffffffffffdf1600,%rax
  41ce72:	ff ff ff 
  41ce75:	48 89 e2             	mov    %rsp,%rdx
  41ce78:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  41ce7c:	4c 89 ee             	mov    %r13,%rsi
  41ce7f:	48 01 d8             	add    %rbx,%rax
  41ce82:	ff d0                	callq  *%rax
  41ce84:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41ce89:	49 83 c5 10          	add    $0x10,%r13
  41ce8d:	49 89 c6             	mov    %rax,%r14
  41ce90:	4c 39 ef             	cmp    %r13,%rdi
  41ce93:	74 12                	je     41cea7 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0xb7>
  41ce95:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ce9c:	ff ff ff 
  41ce9f:	49 89 df             	mov    %rbx,%r15
  41cea2:	48 01 d8             	add    %rbx,%rax
  41cea5:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cea7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41ceac:	48 85 ff             	test   %rdi,%rdi
  41ceaf:	74 0f                	je     41cec0 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0xd0>
  41ceb1:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41ceb8:	ff ff ff 
  41cebb:	48 01 d8             	add    %rbx,%rax
  41cebe:	ff d0                	callq  *%rax
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cec0:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  41cec4:	48 8b 55 08          	mov    0x8(%rbp),%rdx
        if( pi_ != 0 ) pi_->add_ref_copy();
  41cec8:	48 85 ff             	test   %rdi,%rdi
  41cecb:	74 43                	je     41cf10 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x120>
  41cecd:	48 8d 47 08          	lea    0x8(%rdi),%rax
  41ced1:	f0 83 00 01          	lock addl $0x1,(%rax)
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41ced5:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41ceda:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cedf:	49 89 7c 24 10       	mov    %rdi,0x10(%r12)
  41cee4:	f0 83 00 01          	lock addl $0x1,(%rax)
        if( pi_ != 0 ) pi_->release();
  41cee8:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41ceef:	ff ff ff 
  41cef2:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cef7:	48 01 d8             	add    %rbx,%rax
  41cefa:	ff d0                	callq  *%rax
}
  41cefc:	48 83 c4 38          	add    $0x38,%rsp
  41cf00:	4c 89 e0             	mov    %r12,%rax
  41cf03:	5b                   	pop    %rbx
  41cf04:	5d                   	pop    %rbp
  41cf05:	41 5c                	pop    %r12
  41cf07:	41 5d                	pop    %r13
  41cf09:	41 5e                	pop    %r14
  41cf0b:	41 5f                	pop    %r15
  41cf0d:	c3                   	retq   
  41cf0e:	66 90                	xchg   %ax,%ax
    : m_isValid(true), m_pMemory(pMemory), m_pNode(&node) {}
  41cf10:	41 c6 04 24 01       	movb   $0x1,(%r12)
  41cf15:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    shared_count(shared_count const & r): pi_(r.pi_) // nothrow
  41cf1a:	49 c7 44 24 10 00 00 	movq   $0x0,0x10(%r12)
  41cf21:	00 00 
  41cf23:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
  41cf28:	eb d2                	jmp    41cefc <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x10c>
    throw InvalidNode();
  41cf2a:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41cf31:	ff ff ff 
  41cf34:	bf 40 00 00 00       	mov    $0x40,%edi
  41cf39:	49 89 df             	mov    %rbx,%r15
  41cf3c:	48 01 d8             	add    %rbx,%rax
  41cf3f:	ff d0                	callq  *%rax
  41cf41:	48 89 c5             	mov    %rax,%rbp
  41cf44:	48 89 c7             	mov    %rax,%rdi
  41cf47:	48 b8 20 af de ff ff 	movabs $0xffffffffffdeaf20,%rax
  41cf4e:	ff ff ff 
  41cf51:	48 01 d8             	add    %rbx,%rax
  41cf54:	ff d0                	callq  *%rax
  41cf56:	48 b8 70 96 de ff ff 	movabs $0xffffffffffde9670,%rax
  41cf5d:	ff ff ff 
  41cf60:	48 89 ef             	mov    %rbp,%rdi
  41cf63:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41cf67:	48 b8 48 f7 ff ff ff 	movabs $0xfffffffffffff748,%rax
  41cf6e:	ff ff ff 
  41cf71:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41cf75:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  41cf7c:	ff ff ff 
  41cf7f:	48 01 d8             	add    %rbx,%rax
  41cf82:	ff d0                	callq  *%rax
  41cf84:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41cf89:	49 83 c5 10          	add    $0x10,%r13
  41cf8d:	48 89 c5             	mov    %rax,%rbp
  41cf90:	4c 39 ef             	cmp    %r13,%rdi
  41cf93:	74 12                	je     41cfa7 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x1b7>
  41cf95:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41cf9c:	ff ff ff 
  41cf9f:	49 89 df             	mov    %rbx,%r15
  41cfa2:	48 01 d8             	add    %rbx,%rax
  41cfa5:	ff d0                	callq  *%rax
        if( pi_ != 0 ) pi_->release();
  41cfa7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41cfac:	48 85 ff             	test   %rdi,%rdi
  41cfaf:	74 0f                	je     41cfc0 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x1d0>
  41cfb1:	48 b8 c0 aa de ff ff 	movabs $0xffffffffffdeaac0,%rax
  41cfb8:	ff ff ff 
  41cfbb:	48 01 d8             	add    %rbx,%rax
  41cfbe:	ff d0                	callq  *%rax
  41cfc0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41cfc7:	ff ff ff 
  41cfca:	48 89 ef             	mov    %rbp,%rdi
  41cfcd:	49 89 df             	mov    %rbx,%r15
  41cfd0:	48 01 d8             	add    %rbx,%rax
  41cfd3:	ff d0                	callq  *%rax
  41cfd5:	48 89 c5             	mov    %rax,%rbp
  41cfd8:	eb cd                	jmp    41cfa7 <_ZN4YAML4NodeixIA7_cEES0_RKT_+0x1b7>
  41cfda:	48 ba 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rdx
  41cfe1:	ff ff ff 
  41cfe4:	49 89 c4             	mov    %rax,%r12
  41cfe7:	48 89 ef             	mov    %rbp,%rdi
  41cfea:	49 89 df             	mov    %rbx,%r15
  41cfed:	48 01 da             	add    %rbx,%rdx
  41cff0:	ff d2                	callq  *%rdx
  41cff2:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41cff9:	ff ff ff 
  41cffc:	4c 89 e7             	mov    %r12,%rdi
  41cfff:	48 01 d8             	add    %rbx,%rax
  41d002:	ff d0                	callq  *%rax
  41d004:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d00b:	00 00 00 
  41d00e:	66 90                	xchg   %ax,%ax

000000000041d010 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>:
  template<typename _Key, typename _Value,
	   typename _Alloc, typename _ExtractKey, typename _Equal,
	   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
	   typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d010:	41 57                	push   %r15
  41d012:	41 56                	push   %r14
  41d014:	49 bb f0 df 20 00 00 	movabs $0x20dff0,%r11
  41d01b:	00 00 00 
  41d01e:	41 55                	push   %r13
  41d020:	41 54                	push   %r12
  41d022:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41d010 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>
  41d029:	55                   	push   %rbp
  41d02a:	53                   	push   %rbx
  41d02b:	48 89 fd             	mov    %rdi,%rbp
  41d02e:	4d 01 dc             	add    %r11,%r12
  41d031:	48 89 f3             	mov    %rsi,%rbx
  41d034:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41d038:	48 83 fe 01          	cmp    $0x1,%rsi
  41d03c:	0f 84 06 01 00 00    	je     41d148 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41d042:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41d049:	ff ff 1f 
  41d04c:	49 89 d5             	mov    %rdx,%r13
  41d04f:	48 39 c6             	cmp    %rax,%rsi
  41d052:	0f 87 04 01 00 00    	ja     41d15c <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d058:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41d05f:	00 
  41d060:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41d067:	ff ff ff 
  41d06a:	4d 89 e7             	mov    %r12,%r15
  41d06d:	4c 01 e0             	add    %r12,%rax
  41d070:	4c 89 f7             	mov    %r14,%rdi
  41d073:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41d075:	48 89 c7             	mov    %rax,%rdi
  41d078:	49 89 c5             	mov    %rax,%r13
  41d07b:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  41d082:	ff ff ff 
  41d085:	4c 89 f2             	mov    %r14,%rdx
  41d088:	31 f6                	xor    %esi,%esi
  41d08a:	4c 01 e0             	add    %r12,%rax
  41d08d:	ff d0                	callq  *%rax
  41d08f:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41d093:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
	       _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __n, std::true_type)
    {
      __bucket_type* __new_buckets = _M_allocate_buckets(__n);
      __node_type* __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
  41d097:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41d09e:	00 
      std::size_t __bbegin_bkt = 0;
      while (__p)
  41d09f:	48 85 c9             	test   %rcx,%rcx
  41d0a2:	74 64                	je     41d108 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
  41d0a4:	45 31 c0             	xor    %r8d,%r8d
	  std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);
	  if (!__new_buckets[__bkt])
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
	      _M_before_begin._M_nxt = __p;
	      __new_buckets[__bkt] = &_M_before_begin;
  41d0a7:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41d0ab:	eb 17                	jmp    41d0c4 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d0ad:	0f 1f 00             	nopl   (%rax)
		__new_buckets[__bbegin_bkt] = __p;
	      __bbegin_bkt = __bkt;
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41d0b0:	48 8b 16             	mov    (%rsi),%rdx
  41d0b3:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41d0b6:	48 8b 00             	mov    (%rax),%rax
  41d0b9:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41d0bc:	48 85 ff             	test   %rdi,%rdi
  41d0bf:	48 89 f9             	mov    %rdi,%rcx
  41d0c2:	74 44                	je     41d108 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41d0c4:	48 8b 41 18          	mov    0x18(%rcx),%rax
  41d0c8:	31 d2                	xor    %edx,%edx
  41d0ca:	48 8b 39             	mov    (%rcx),%rdi
  41d0cd:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41d0d0:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41d0d5:	48 8b 30             	mov    (%rax),%rsi
  41d0d8:	48 85 f6             	test   %rsi,%rsi
  41d0db:	75 d3                	jne    41d0b0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41d0dd:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41d0e1:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41d0e4:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41d0e8:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41d0eb:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41d0ef:	74 4f                	je     41d140 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41d0f1:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41d0f4:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41d0f9:	49 89 d0             	mov    %rdx,%r8
  41d0fc:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41d0ff:	75 c3                	jne    41d0c4 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d101:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41d108:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41d10c:	4c 39 d7             	cmp    %r10,%rdi
  41d10f:	74 12                	je     41d123 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41d111:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d118:	ff ff ff 
  41d11b:	4d 89 e7             	mov    %r12,%r15
  41d11e:	4c 01 e0             	add    %r12,%rax
  41d121:	ff d0                	callq  *%rax
	    }
	  __p = __next;
	}

      _M_deallocate_buckets();
      _M_bucket_count = __n;
  41d123:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41d127:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41d12b:	48 83 c4 08          	add    $0x8,%rsp
  41d12f:	5b                   	pop    %rbx
  41d130:	5d                   	pop    %rbp
  41d131:	41 5c                	pop    %r12
  41d133:	41 5d                	pop    %r13
  41d135:	41 5e                	pop    %r14
  41d137:	41 5f                	pop    %r15
  41d139:	c3                   	retq   
  41d13a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41d140:	49 89 d0             	mov    %rdx,%r8
  41d143:	e9 74 ff ff ff       	jmpq   41d0bc <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41d148:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41d14c:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41d153:	00 
	    return &_M_single_bucket;
  41d154:	4d 89 ea             	mov    %r13,%r10
  41d157:	e9 37 ff ff ff       	jmpq   41d093 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41d15c:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41d163:	ff ff ff 
  41d166:	4d 89 e7             	mov    %r12,%r15
  41d169:	4c 01 e0             	add    %r12,%rax
  41d16c:	ff d0                	callq  *%rax
      __catch(...)
  41d16e:	48 89 c7             	mov    %rax,%rdi
  41d171:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41d178:	ff ff ff 
  41d17b:	4d 89 e7             	mov    %r12,%r15
  41d17e:	4c 01 e0             	add    %r12,%rax
  41d181:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41d183:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41d187:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41d18b:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41d192:	ff ff ff 
  41d195:	4c 01 e0             	add    %r12,%rax
  41d198:	ff d0                	callq  *%rax
      __catch(...)
  41d19a:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41d1a1:	ff ff ff 
  41d1a4:	48 89 c3             	mov    %rax,%rbx
  41d1a7:	4d 89 e7             	mov    %r12,%r15
  41d1aa:	4c 01 e2             	add    %r12,%rdx
  41d1ad:	ff d2                	callq  *%rdx
  41d1af:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41d1b6:	ff ff ff 
  41d1b9:	48 89 df             	mov    %rbx,%rdi
  41d1bc:	4c 01 e0             	add    %r12,%rax
  41d1bf:	ff d0                	callq  *%rax
  41d1c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d1c8:	00 00 00 
  41d1cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d1d0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d1d0:	41 57                	push   %r15
  41d1d2:	41 56                	push   %r14
  41d1d4:	49 bb 30 de 20 00 00 	movabs $0x20de30,%r11
  41d1db:	00 00 00 
  41d1de:	41 55                	push   %r13
  41d1e0:	41 54                	push   %r12
  41d1e2:	49 89 f6             	mov    %rsi,%r14
  41d1e5:	55                   	push   %rbp
  41d1e6:	53                   	push   %rbx
  41d1e7:	48 8d 2d e2 ff ff ff 	lea    -0x1e(%rip),%rbp        # 41d1d0 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE>
  41d1ee:	48 89 fb             	mov    %rdi,%rbx
  41d1f1:	49 89 d5             	mov    %rdx,%r13
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d1f4:	48 83 c7 20          	add    $0x20,%rdi
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d1f8:	48 83 ec 18          	sub    $0x18,%rsp
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  41d1fc:	48 8b 47 08          	mov    0x8(%rdi),%rax
  41d200:	4c 01 dd             	add    %r11,%rbp
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d203:	48 8b 57 f8          	mov    -0x8(%rdi),%rdx
  41d207:	48 8b 77 e8          	mov    -0x18(%rdi),%rsi
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d20b:	49 89 cc             	mov    %rcx,%r12
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d20e:	49 89 ef             	mov    %rbp,%r15
  41d211:	b9 01 00 00 00       	mov    $0x1,%ecx
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
  41d216:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
  41d21b:	48 b8 90 e8 dd ff ff 	movabs $0xffffffffffdde890,%rax
  41d222:	ff ff ff 
  41d225:	48 01 e8             	add    %rbp,%rax
  41d228:	ff d0                	callq  *%rax
	  if (__do_rehash.first)
  41d22a:	84 c0                	test   %al,%al
  41d22c:	74 26                	je     41d254 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0x84>
	      _M_rehash(__do_rehash.second, __saved_state);
  41d22e:	48 b8 10 20 df ff ff 	movabs $0xffffffffffdf2010,%rax
  41d235:	ff ff ff 
  41d238:	48 89 d6             	mov    %rdx,%rsi
  41d23b:	48 89 df             	mov    %rbx,%rdi
  41d23e:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  41d243:	48 01 e8             	add    %rbp,%rax
  41d246:	ff d0                	callq  *%rax
    { return __num % __den; }
  41d248:	4c 89 e8             	mov    %r13,%rax
  41d24b:	31 d2                	xor    %edx,%edx
  41d24d:	48 f7 73 08          	divq   0x8(%rbx)
  41d251:	49 89 d6             	mov    %rdx,%r14
      if (_M_buckets[__bkt])
  41d254:	48 8b 33             	mov    (%rbx),%rsi
      { __n->_M_hash_code = __c; }
  41d257:	4d 89 6c 24 18       	mov    %r13,0x18(%r12)
  41d25c:	4a 8d 0c f6          	lea    (%rsi,%r14,8),%rcx
  41d260:	48 8b 01             	mov    (%rcx),%rax
  41d263:	48 85 c0             	test   %rax,%rax
  41d266:	74 28                	je     41d290 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0xc0>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  41d268:	48 8b 00             	mov    (%rax),%rax
  41d26b:	49 89 04 24          	mov    %rax,(%r12)
	  _M_buckets[__bkt]->_M_nxt = __node;
  41d26f:	48 8b 01             	mov    (%rcx),%rax
  41d272:	4c 89 20             	mov    %r12,(%rax)
	  ++_M_element_count;
  41d275:	48 83 43 18 01       	addq   $0x1,0x18(%rbx)
    }
  41d27a:	48 83 c4 18          	add    $0x18,%rsp
  41d27e:	4c 89 e0             	mov    %r12,%rax
  41d281:	5b                   	pop    %rbx
  41d282:	5d                   	pop    %rbp
  41d283:	41 5c                	pop    %r12
  41d285:	41 5d                	pop    %r13
  41d287:	41 5e                	pop    %r14
  41d289:	41 5f                	pop    %r15
  41d28b:	c3                   	retq   
  41d28c:	0f 1f 40 00          	nopl   0x0(%rax)
	  __node->_M_nxt = _M_before_begin._M_nxt;
  41d290:	48 8b 43 10          	mov    0x10(%rbx),%rax
	  if (__node->_M_nxt)
  41d294:	48 85 c0             	test   %rax,%rax
	  __node->_M_nxt = _M_before_begin._M_nxt;
  41d297:	49 89 04 24          	mov    %rax,(%r12)
	  _M_before_begin._M_nxt = __node;
  41d29b:	4c 89 63 10          	mov    %r12,0x10(%rbx)
	  if (__node->_M_nxt)
  41d29f:	74 12                	je     41d2b3 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0xe3>
    { return __num % __den; }
  41d2a1:	49 8b 04 24          	mov    (%r12),%rax
  41d2a5:	31 d2                	xor    %edx,%edx
  41d2a7:	48 8b 40 18          	mov    0x18(%rax),%rax
  41d2ab:	48 f7 73 08          	divq   0x8(%rbx)
	    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
  41d2af:	4c 89 24 d6          	mov    %r12,(%rsi,%rdx,8)
	  _M_buckets[__bkt] = &_M_before_begin;
  41d2b3:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41d2b7:	48 89 01             	mov    %rax,(%rcx)
  41d2ba:	eb b9                	jmp    41d275 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEmmPNS5_10_Hash_nodeIS3_Lb1EEE+0xa5>
      __catch(...)
  41d2bc:	48 89 c7             	mov    %rax,%rdi
  41d2bf:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41d2c6:	ff ff ff 
  41d2c9:	49 89 ef             	mov    %rbp,%r15
  41d2cc:	48 01 e8             	add    %rbp,%rax
  41d2cf:	ff d0                	callq  *%rax
      { ::operator delete(__p); }
  41d2d1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d2d8:	ff ff ff 
  41d2db:	4c 89 e7             	mov    %r12,%rdi
  41d2de:	48 01 e8             	add    %rbp,%rax
  41d2e1:	ff d0                	callq  *%rax
	  __throw_exception_again;
  41d2e3:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41d2ea:	ff ff ff 
  41d2ed:	48 01 e8             	add    %rbp,%rax
  41d2f0:	ff d0                	callq  *%rax
      __catch(...)
  41d2f2:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41d2f9:	ff ff ff 
  41d2fc:	48 89 c3             	mov    %rax,%rbx
  41d2ff:	49 89 ef             	mov    %rbp,%r15
  41d302:	48 01 ea             	add    %rbp,%rdx
  41d305:	ff d2                	callq  *%rdx
  41d307:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41d30e:	ff ff ff 
  41d311:	48 89 df             	mov    %rbx,%rdi
  41d314:	48 01 e8             	add    %rbp,%rax
  41d317:	ff d0                	callq  *%rax
  41d319:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041d320 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d320:	41 57                	push   %r15
  41d322:	41 56                	push   %r14
  41d324:	49 bb e0 dc 20 00 00 	movabs $0x20dce0,%r11
  41d32b:	00 00 00 
  41d32e:	41 55                	push   %r13
  41d330:	41 54                	push   %r12
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d332:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41d339:	ff ff ff 
  41d33c:	55                   	push   %rbp
  41d33d:	48 8d 2d dc ff ff ff 	lea    -0x24(%rip),%rbp        # 41d320 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>
  41d344:	53                   	push   %rbx
  41d345:	49 89 f4             	mov    %rsi,%r12
  41d348:	48 89 fb             	mov    %rdi,%rbx
  41d34b:	bf 20 00 00 00       	mov    $0x20,%edi
  41d350:	4c 01 dd             	add    %r11,%rbp
  41d353:	48 83 ec 08          	sub    $0x8,%rsp
  41d357:	49 89 ef             	mov    %rbp,%r15
  41d35a:	48 01 e8             	add    %rbp,%rax
  41d35d:	ff d0                	callq  *%rax
	  second(std::forward<_U2>(__p.second)) { }
  41d35f:	49 8b 14 24          	mov    (%r12),%rdx
  41d363:	41 8b 4c 24 08       	mov    0x8(%r12),%ecx
  41d368:	49 89 c5             	mov    %rax,%r13
    _Hash_node_base() noexcept : _M_nxt() { }
  41d36b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  41d372:	bf b9 79 37 9e       	mov    $0x9e3779b9,%edi
  41d377:	48 89 50 08          	mov    %rdx,0x8(%rax)
  41d37b:	89 48 10             	mov    %ecx,0x10(%rax)
  41d37e:	41 8b 44 24 0c       	mov    0xc(%r12),%eax
  41d383:	4c 63 e1             	movslq %ecx,%r12
  41d386:	49 01 fc             	add    %rdi,%r12
  41d389:	41 89 45 14          	mov    %eax,0x14(%r13)
  41d38d:	48 63 c2             	movslq %edx,%rax
  41d390:	48 c1 fa 20          	sar    $0x20,%rdx
  41d394:	48 8d 34 38          	lea    (%rax,%rdi,1),%rsi
  41d398:	48 01 fa             	add    %rdi,%rdx
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  41d39b:	48 89 df             	mov    %rbx,%rdi
  41d39e:	48 89 f0             	mov    %rsi,%rax
  41d3a1:	48 c1 e0 06          	shl    $0x6,%rax
  41d3a5:	48 01 c2             	add    %rax,%rdx
  41d3a8:	48 89 f0             	mov    %rsi,%rax
  41d3ab:	48 c1 e8 02          	shr    $0x2,%rax
  41d3af:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  41d3b2:	31 d2                	xor    %edx,%edx
  41d3b4:	48 31 f0             	xor    %rsi,%rax
  41d3b7:	48 89 c1             	mov    %rax,%rcx
  41d3ba:	48 c1 e1 06          	shl    $0x6,%rcx
  41d3be:	49 01 cc             	add    %rcx,%r12
  41d3c1:	48 89 c1             	mov    %rax,%rcx
  41d3c4:	48 c1 e9 02          	shr    $0x2,%rcx
  41d3c8:	49 01 cc             	add    %rcx,%r12
  41d3cb:	49 31 c4             	xor    %rax,%r12
  41d3ce:	4c 89 e0             	mov    %r12,%rax
  41d3d1:	4c 89 e1             	mov    %r12,%rcx
  41d3d4:	48 f7 73 08          	divq   0x8(%rbx)
  41d3d8:	48 b8 80 0c df ff ff 	movabs $0xffffffffffdf0c80,%rax
  41d3df:	ff ff ff 
  41d3e2:	48 01 e8             	add    %rbp,%rax
  41d3e5:	49 89 d7             	mov    %rdx,%r15
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
  41d3e8:	49 8d 55 08          	lea    0x8(%r13),%rdx
  41d3ec:	4c 89 fe             	mov    %r15,%rsi
  41d3ef:	ff d0                	callq  *%rax
	if (__before_n)
  41d3f1:	48 85 c0             	test   %rax,%rax
  41d3f4:	74 3a                	je     41d430 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  41d3f6:	4c 8b 30             	mov    (%rax),%r14
	if (__node_type* __p = _M_find_node(__bkt, __k, __code))
  41d3f9:	4d 85 f6             	test   %r14,%r14
  41d3fc:	74 32                	je     41d430 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_iEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
      { ::operator delete(__p); }
  41d3fe:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d405:	ff ff ff 
  41d408:	49 89 ef             	mov    %rbp,%r15
  41d40b:	4c 89 ef             	mov    %r13,%rdi
  41d40e:	48 01 e8             	add    %rbp,%rax
  41d411:	ff d0                	callq  *%rax
      }
  41d413:	48 83 c4 08          	add    $0x8,%rsp
  41d417:	4c 89 f0             	mov    %r14,%rax
  41d41a:	31 d2                	xor    %edx,%edx
  41d41c:	5b                   	pop    %rbx
  41d41d:	5d                   	pop    %rbp
  41d41e:	41 5c                	pop    %r12
  41d420:	41 5d                	pop    %r13
  41d422:	41 5e                	pop    %r14
  41d424:	41 5f                	pop    %r15
  41d426:	c3                   	retq   
  41d427:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41d42e:	00 00 
	return std::make_pair(_M_insert_unique_node(__bkt, __code, __node),
  41d430:	48 b8 d0 21 df ff ff 	movabs $0xffffffffffdf21d0,%rax
  41d437:	ff ff ff 
  41d43a:	4c 89 e2             	mov    %r12,%rdx
  41d43d:	4c 89 e9             	mov    %r13,%rcx
  41d440:	4c 89 fe             	mov    %r15,%rsi
  41d443:	48 89 df             	mov    %rbx,%rdi
  41d446:	48 01 e8             	add    %rbp,%rax
  41d449:	ff d0                	callq  *%rax
      }
  41d44b:	48 83 c4 08          	add    $0x8,%rsp
  41d44f:	ba 01 00 00 00       	mov    $0x1,%edx
  41d454:	5b                   	pop    %rbx
  41d455:	5d                   	pop    %rbp
  41d456:	41 5c                	pop    %r12
  41d458:	41 5d                	pop    %r13
  41d45a:	41 5e                	pop    %r14
  41d45c:	41 5f                	pop    %r15
  41d45e:	c3                   	retq   
  41d45f:	90                   	nop

000000000041d460 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d460:	41 57                	push   %r15
  41d462:	41 56                	push   %r14
  41d464:	49 bb a0 db 20 00 00 	movabs $0x20dba0,%r11
  41d46b:	00 00 00 
  41d46e:	41 55                	push   %r13
  41d470:	41 54                	push   %r12
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d472:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41d479:	ff ff ff 
  41d47c:	55                   	push   %rbp
  41d47d:	48 8d 2d dc ff ff ff 	lea    -0x24(%rip),%rbp        # 41d460 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_>
  41d484:	53                   	push   %rbx
  41d485:	49 89 f4             	mov    %rsi,%r12
  41d488:	48 89 fb             	mov    %rdi,%rbx
  41d48b:	bf 20 00 00 00       	mov    $0x20,%edi
  41d490:	4c 01 dd             	add    %r11,%rbp
  41d493:	48 83 ec 08          	sub    $0x8,%rsp
  41d497:	49 89 ef             	mov    %rbp,%r15
  41d49a:	48 01 e8             	add    %rbp,%rax
  41d49d:	ff d0                	callq  *%rax
  41d49f:	49 8b 14 24          	mov    (%r12),%rdx
  41d4a3:	41 8b 4c 24 08       	mov    0x8(%r12),%ecx
  41d4a8:	49 89 c5             	mov    %rax,%r13
    _Hash_node_base() noexcept : _M_nxt() { }
  41d4ab:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  41d4b2:	bf b9 79 37 9e       	mov    $0x9e3779b9,%edi
  41d4b7:	48 89 50 08          	mov    %rdx,0x8(%rax)
  41d4bb:	89 48 10             	mov    %ecx,0x10(%rax)
  41d4be:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  41d4c3:	4c 63 e1             	movslq %ecx,%r12
  41d4c6:	49 01 fc             	add    %rdi,%r12
  41d4c9:	41 89 45 14          	mov    %eax,0x14(%r13)
  41d4cd:	48 63 c2             	movslq %edx,%rax
  41d4d0:	48 c1 fa 20          	sar    $0x20,%rdx
  41d4d4:	48 8d 34 38          	lea    (%rax,%rdi,1),%rsi
  41d4d8:	48 01 fa             	add    %rdi,%rdx
	__node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
  41d4db:	48 89 df             	mov    %rbx,%rdi
  41d4de:	48 89 f0             	mov    %rsi,%rax
  41d4e1:	48 c1 e0 06          	shl    $0x6,%rax
  41d4e5:	48 01 c2             	add    %rax,%rdx
  41d4e8:	48 89 f0             	mov    %rsi,%rax
  41d4eb:	48 c1 e8 02          	shr    $0x2,%rax
  41d4ef:	48 01 d0             	add    %rdx,%rax
    { return __num % __den; }
  41d4f2:	31 d2                	xor    %edx,%edx
  41d4f4:	48 31 f0             	xor    %rsi,%rax
  41d4f7:	48 89 c1             	mov    %rax,%rcx
  41d4fa:	48 c1 e1 06          	shl    $0x6,%rcx
  41d4fe:	49 01 cc             	add    %rcx,%r12
  41d501:	48 89 c1             	mov    %rax,%rcx
  41d504:	48 c1 e9 02          	shr    $0x2,%rcx
  41d508:	49 01 cc             	add    %rcx,%r12
  41d50b:	49 31 c4             	xor    %rax,%r12
  41d50e:	4c 89 e0             	mov    %r12,%rax
  41d511:	4c 89 e1             	mov    %r12,%rcx
  41d514:	48 f7 73 08          	divq   0x8(%rbx)
  41d518:	48 b8 80 0c df ff ff 	movabs $0xffffffffffdf0c80,%rax
  41d51f:	ff ff ff 
  41d522:	48 01 e8             	add    %rbp,%rax
  41d525:	49 89 d7             	mov    %rdx,%r15
  41d528:	49 8d 55 08          	lea    0x8(%r13),%rdx
  41d52c:	4c 89 fe             	mov    %r15,%rsi
  41d52f:	ff d0                	callq  *%rax
	if (__before_n)
  41d531:	48 85 c0             	test   %rax,%rax
  41d534:	74 3a                	je     41d570 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
	  return static_cast<__node_type*>(__before_n->_M_nxt);
  41d536:	4c 8b 30             	mov    (%rax),%r14
	if (__node_type* __p = _M_find_node(__bkt, __k, __code))
  41d539:	4d 85 f6             	test   %r14,%r14
  41d53c:	74 32                	je     41d570 <_ZNSt10_HashtableI5StateSt4pairIKS0_iESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIJS1_IS0_mEEEES1_INS5_14_Node_iteratorIS3_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_+0x110>
      { ::operator delete(__p); }
  41d53e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d545:	ff ff ff 
  41d548:	49 89 ef             	mov    %rbp,%r15
  41d54b:	4c 89 ef             	mov    %r13,%rdi
  41d54e:	48 01 e8             	add    %rbp,%rax
  41d551:	ff d0                	callq  *%rax
      }
  41d553:	48 83 c4 08          	add    $0x8,%rsp
  41d557:	4c 89 f0             	mov    %r14,%rax
  41d55a:	31 d2                	xor    %edx,%edx
  41d55c:	5b                   	pop    %rbx
  41d55d:	5d                   	pop    %rbp
  41d55e:	41 5c                	pop    %r12
  41d560:	41 5d                	pop    %r13
  41d562:	41 5e                	pop    %r14
  41d564:	41 5f                	pop    %r15
  41d566:	c3                   	retq   
  41d567:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41d56e:	00 00 
	return std::make_pair(_M_insert_unique_node(__bkt, __code, __node),
  41d570:	48 b8 d0 21 df ff ff 	movabs $0xffffffffffdf21d0,%rax
  41d577:	ff ff ff 
  41d57a:	4c 89 e2             	mov    %r12,%rdx
  41d57d:	4c 89 e9             	mov    %r13,%rcx
  41d580:	4c 89 fe             	mov    %r15,%rsi
  41d583:	48 89 df             	mov    %rbx,%rdi
  41d586:	48 01 e8             	add    %rbp,%rax
  41d589:	ff d0                	callq  *%rax
      }
  41d58b:	48 83 c4 08          	add    $0x8,%rsp
  41d58f:	ba 01 00 00 00       	mov    $0x1,%edx
  41d594:	5b                   	pop    %rbx
  41d595:	5d                   	pop    %rbp
  41d596:	41 5c                	pop    %r12
  41d598:	41 5d                	pop    %r13
  41d59a:	41 5e                	pop    %r14
  41d59c:	41 5f                	pop    %r15
  41d59e:	c3                   	retq   
  41d59f:	90                   	nop

000000000041d5a0 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d5a0:	41 57                	push   %r15
  41d5a2:	41 56                	push   %r14
  41d5a4:	49 bb 60 da 20 00 00 	movabs $0x20da60,%r11
  41d5ab:	00 00 00 
  41d5ae:	41 55                	push   %r13
  41d5b0:	41 54                	push   %r12
  41d5b2:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41d5a0 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>
  41d5b9:	55                   	push   %rbp
  41d5ba:	53                   	push   %rbx
  41d5bb:	48 89 fd             	mov    %rdi,%rbp
  41d5be:	4d 01 dc             	add    %r11,%r12
  41d5c1:	48 89 f3             	mov    %rsi,%rbx
  41d5c4:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41d5c8:	48 83 fe 01          	cmp    $0x1,%rsi
  41d5cc:	0f 84 06 01 00 00    	je     41d6d8 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41d5d2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41d5d9:	ff ff 1f 
  41d5dc:	49 89 d5             	mov    %rdx,%r13
  41d5df:	48 39 c6             	cmp    %rax,%rsi
  41d5e2:	0f 87 04 01 00 00    	ja     41d6ec <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d5e8:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41d5ef:	00 
  41d5f0:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41d5f7:	ff ff ff 
  41d5fa:	4d 89 e7             	mov    %r12,%r15
  41d5fd:	4c 01 e0             	add    %r12,%rax
  41d600:	4c 89 f7             	mov    %r14,%rdi
  41d603:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41d605:	48 89 c7             	mov    %rax,%rdi
  41d608:	49 89 c5             	mov    %rax,%r13
  41d60b:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  41d612:	ff ff ff 
  41d615:	4c 89 f2             	mov    %r14,%rdx
  41d618:	31 f6                	xor    %esi,%esi
  41d61a:	4c 01 e0             	add    %r12,%rax
  41d61d:	ff d0                	callq  *%rax
  41d61f:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41d623:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
      _M_before_begin._M_nxt = nullptr;
  41d627:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41d62e:	00 
      while (__p)
  41d62f:	48 85 c9             	test   %rcx,%rcx
  41d632:	74 64                	je     41d698 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
  41d634:	45 31 c0             	xor    %r8d,%r8d
	      __new_buckets[__bkt] = &_M_before_begin;
  41d637:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41d63b:	eb 17                	jmp    41d654 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d63d:	0f 1f 00             	nopl   (%rax)
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41d640:	48 8b 16             	mov    (%rsi),%rdx
  41d643:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41d646:	48 8b 00             	mov    (%rax),%rax
  41d649:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41d64c:	48 85 ff             	test   %rdi,%rdi
  41d64f:	48 89 f9             	mov    %rdi,%rcx
  41d652:	74 44                	je     41d698 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41d654:	48 8b 41 18          	mov    0x18(%rcx),%rax
  41d658:	31 d2                	xor    %edx,%edx
  41d65a:	48 8b 39             	mov    (%rcx),%rdi
  41d65d:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41d660:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41d665:	48 8b 30             	mov    (%rax),%rsi
  41d668:	48 85 f6             	test   %rsi,%rsi
  41d66b:	75 d3                	jne    41d640 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41d66d:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41d671:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41d674:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41d678:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41d67b:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41d67f:	74 4f                	je     41d6d0 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41d681:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41d684:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41d689:	49 89 d0             	mov    %rdx,%r8
  41d68c:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41d68f:	75 c3                	jne    41d654 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d691:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41d698:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41d69c:	4c 39 d7             	cmp    %r10,%rdi
  41d69f:	74 12                	je     41d6b3 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41d6a1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d6a8:	ff ff ff 
  41d6ab:	4d 89 e7             	mov    %r12,%r15
  41d6ae:	4c 01 e0             	add    %r12,%rax
  41d6b1:	ff d0                	callq  *%rax
      _M_bucket_count = __n;
  41d6b3:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41d6b7:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41d6bb:	48 83 c4 08          	add    $0x8,%rsp
  41d6bf:	5b                   	pop    %rbx
  41d6c0:	5d                   	pop    %rbp
  41d6c1:	41 5c                	pop    %r12
  41d6c3:	41 5d                	pop    %r13
  41d6c5:	41 5e                	pop    %r14
  41d6c7:	41 5f                	pop    %r15
  41d6c9:	c3                   	retq   
  41d6ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41d6d0:	49 89 d0             	mov    %rdx,%r8
  41d6d3:	e9 74 ff ff ff       	jmpq   41d64c <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41d6d8:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41d6dc:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41d6e3:	00 
	    return &_M_single_bucket;
  41d6e4:	4d 89 ea             	mov    %r13,%r10
  41d6e7:	e9 37 ff ff ff       	jmpq   41d623 <_ZNSt10_HashtableI5StateS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41d6ec:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41d6f3:	ff ff ff 
  41d6f6:	4d 89 e7             	mov    %r12,%r15
  41d6f9:	4c 01 e0             	add    %r12,%rax
  41d6fc:	ff d0                	callq  *%rax
      __catch(...)
  41d6fe:	48 89 c7             	mov    %rax,%rdi
  41d701:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41d708:	ff ff ff 
  41d70b:	4d 89 e7             	mov    %r12,%r15
  41d70e:	4c 01 e0             	add    %r12,%rax
  41d711:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41d713:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41d717:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41d71b:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41d722:	ff ff ff 
  41d725:	4c 01 e0             	add    %r12,%rax
  41d728:	ff d0                	callq  *%rax
      __catch(...)
  41d72a:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41d731:	ff ff ff 
  41d734:	48 89 c3             	mov    %rax,%rbx
  41d737:	4d 89 e7             	mov    %r12,%r15
  41d73a:	4c 01 e2             	add    %r12,%rdx
  41d73d:	ff d2                	callq  *%rdx
  41d73f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41d746:	ff ff ff 
  41d749:	48 89 df             	mov    %rbx,%rdi
  41d74c:	4c 01 e0             	add    %r12,%rax
  41d74f:	ff d0                	callq  *%rax
  41d751:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d758:	00 00 00 
  41d75b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d760 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41d760:	41 57                	push   %r15
  41d762:	41 56                	push   %r14
  41d764:	49 bb a0 d8 20 00 00 	movabs $0x20d8a0,%r11
  41d76b:	00 00 00 
  41d76e:	41 55                	push   %r13
  41d770:	41 54                	push   %r12
  41d772:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41d760 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm>
  41d779:	55                   	push   %rbp
  41d77a:	53                   	push   %rbx
  41d77b:	48 89 fd             	mov    %rdi,%rbp
  41d77e:	4d 01 dc             	add    %r11,%r12
  41d781:	48 89 f3             	mov    %rsi,%rbx
  41d784:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41d788:	48 83 fe 01          	cmp    $0x1,%rsi
  41d78c:	0f 84 06 01 00 00    	je     41d898 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41d792:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41d799:	ff ff 1f 
  41d79c:	49 89 d5             	mov    %rdx,%r13
  41d79f:	48 39 c6             	cmp    %rax,%rsi
  41d7a2:	0f 87 04 01 00 00    	ja     41d8ac <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41d7a8:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41d7af:	00 
  41d7b0:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41d7b7:	ff ff ff 
  41d7ba:	4d 89 e7             	mov    %r12,%r15
  41d7bd:	4c 01 e0             	add    %r12,%rax
  41d7c0:	4c 89 f7             	mov    %r14,%rdi
  41d7c3:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41d7c5:	48 89 c7             	mov    %rax,%rdi
  41d7c8:	49 89 c5             	mov    %rax,%r13
  41d7cb:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  41d7d2:	ff ff ff 
  41d7d5:	4c 89 f2             	mov    %r14,%rdx
  41d7d8:	31 f6                	xor    %esi,%esi
  41d7da:	4c 01 e0             	add    %r12,%rax
  41d7dd:	ff d0                	callq  *%rax
  41d7df:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41d7e3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
      _M_before_begin._M_nxt = nullptr;
  41d7e7:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41d7ee:	00 
      while (__p)
  41d7ef:	48 85 c9             	test   %rcx,%rcx
  41d7f2:	74 64                	je     41d858 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
  41d7f4:	45 31 c0             	xor    %r8d,%r8d
	      __new_buckets[__bkt] = &_M_before_begin;
  41d7f7:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41d7fb:	eb 17                	jmp    41d814 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d7fd:	0f 1f 00             	nopl   (%rax)
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41d800:	48 8b 16             	mov    (%rsi),%rdx
  41d803:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41d806:	48 8b 00             	mov    (%rax),%rax
  41d809:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41d80c:	48 85 ff             	test   %rdi,%rdi
  41d80f:	48 89 f9             	mov    %rdi,%rcx
  41d812:	74 44                	je     41d858 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41d814:	48 8b 41 30          	mov    0x30(%rcx),%rax
  41d818:	31 d2                	xor    %edx,%edx
  41d81a:	48 8b 39             	mov    (%rcx),%rdi
  41d81d:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41d820:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41d825:	48 8b 30             	mov    (%rax),%rsi
  41d828:	48 85 f6             	test   %rsi,%rsi
  41d82b:	75 d3                	jne    41d800 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41d82d:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41d831:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41d834:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41d838:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41d83b:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41d83f:	74 4f                	je     41d890 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41d841:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41d844:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41d849:	49 89 d0             	mov    %rdx,%r8
  41d84c:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41d84f:	75 c3                	jne    41d814 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xb4>
  41d851:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41d858:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41d85c:	4c 39 d7             	cmp    %r10,%rdi
  41d85f:	74 12                	je     41d873 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41d861:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d868:	ff ff ff 
  41d86b:	4d 89 e7             	mov    %r12,%r15
  41d86e:	4c 01 e0             	add    %r12,%rax
  41d871:	ff d0                	callq  *%rax
      _M_bucket_count = __n;
  41d873:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41d877:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41d87b:	48 83 c4 08          	add    $0x8,%rsp
  41d87f:	5b                   	pop    %rbx
  41d880:	5d                   	pop    %rbp
  41d881:	41 5c                	pop    %r12
  41d883:	41 5d                	pop    %r13
  41d885:	41 5e                	pop    %r14
  41d887:	41 5f                	pop    %r15
  41d889:	c3                   	retq   
  41d88a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41d890:	49 89 d0             	mov    %rdx,%r8
  41d893:	e9 74 ff ff ff       	jmpq   41d80c <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41d898:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41d89c:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41d8a3:	00 
	    return &_M_single_bucket;
  41d8a4:	4d 89 ea             	mov    %r13,%r10
  41d8a7:	e9 37 ff ff ff       	jmpq   41d7e3 <_ZNSt10_HashtableI5StateSt4pairIKS0_St5tupleIJS0_6ActioniiEEESaIS6_ENSt8__detail10_Select1stESt8equal_toIS0_ESt4hashIS0_ENS8_18_Mod_range_hashingENS8_20_Default_ranged_hashENS8_20_Prime_rehash_policyENS8_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41d8ac:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41d8b3:	ff ff ff 
  41d8b6:	4d 89 e7             	mov    %r12,%r15
  41d8b9:	4c 01 e0             	add    %r12,%rax
  41d8bc:	ff d0                	callq  *%rax
      __catch(...)
  41d8be:	48 89 c7             	mov    %rax,%rdi
  41d8c1:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41d8c8:	ff ff ff 
  41d8cb:	4d 89 e7             	mov    %r12,%r15
  41d8ce:	4c 01 e0             	add    %r12,%rax
  41d8d1:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41d8d3:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41d8d7:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41d8db:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41d8e2:	ff ff ff 
  41d8e5:	4c 01 e0             	add    %r12,%rax
  41d8e8:	ff d0                	callq  *%rax
      __catch(...)
  41d8ea:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41d8f1:	ff ff ff 
  41d8f4:	48 89 c3             	mov    %rax,%rbx
  41d8f7:	4d 89 e7             	mov    %r12,%r15
  41d8fa:	4c 01 e2             	add    %r12,%rdx
  41d8fd:	ff d2                	callq  *%rdx
  41d8ff:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41d906:	ff ff ff 
  41d909:	48 89 df             	mov    %rbx,%rdi
  41d90c:	4c 01 e0             	add    %r12,%rax
  41d90f:	ff d0                	callq  *%rax
  41d911:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d918:	00 00 00 
  41d91b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d920 <_ZN5boost15program_options12basic_optionIcED1Ev>:
        is specified. The latter is only possible for command line.
        The template parameter specifies the type of char used for storing the
        option's value.
    */
    template<class charT>
    class basic_option {
  41d920:	41 57                	push   %r15
  41d922:	41 55                	push   %r13
  41d924:	49 bb e0 d6 20 00 00 	movabs $0x20d6e0,%r11
  41d92b:	00 00 00 
  41d92e:	41 54                	push   %r12
  41d930:	55                   	push   %rbp
  41d931:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 41d920 <_ZN5boost15program_options12basic_optionIcED1Ev>
  41d938:	53                   	push   %rbx
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41d939:	4c 8b 6f 48          	mov    0x48(%rdi),%r13
  41d93d:	49 89 fc             	mov    %rdi,%r12
  41d940:	48 8b 5f 40          	mov    0x40(%rdi),%rbx
  41d944:	4c 01 dd             	add    %r11,%rbp
	  for (; __first != __last; ++__first)
  41d947:	49 39 dd             	cmp    %rbx,%r13
  41d94a:	74 30                	je     41d97c <_ZN5boost15program_options12basic_optionIcED1Ev+0x5c>
  41d94c:	0f 1f 40 00          	nopl   0x0(%rax)
  41d950:	48 8b 3b             	mov    (%rbx),%rdi
  41d953:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41d957:	48 39 c7             	cmp    %rax,%rdi
  41d95a:	74 12                	je     41d96e <_ZN5boost15program_options12basic_optionIcED1Ev+0x4e>
      { ::operator delete(__p); }
  41d95c:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d963:	ff ff ff 
  41d966:	49 89 ef             	mov    %rbp,%r15
  41d969:	48 01 e8             	add    %rbp,%rax
  41d96c:	ff d0                	callq  *%rax
  41d96e:	48 83 c3 20          	add    $0x20,%rbx
  41d972:	49 39 dd             	cmp    %rbx,%r13
  41d975:	75 d9                	jne    41d950 <_ZN5boost15program_options12basic_optionIcED1Ev+0x30>
  41d977:	49 8b 5c 24 40       	mov    0x40(%r12),%rbx
	if (__p)
  41d97c:	48 85 db             	test   %rbx,%rbx
  41d97f:	74 15                	je     41d996 <_ZN5boost15program_options12basic_optionIcED1Ev+0x76>
  41d981:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d988:	ff ff ff 
  41d98b:	48 89 df             	mov    %rbx,%rdi
  41d98e:	49 89 ef             	mov    %rbp,%r15
  41d991:	48 01 e8             	add    %rbp,%rax
  41d994:	ff d0                	callq  *%rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41d996:	4d 8b 6c 24 30       	mov    0x30(%r12),%r13
  41d99b:	49 8b 5c 24 28       	mov    0x28(%r12),%rbx
  41d9a0:	49 39 dd             	cmp    %rbx,%r13
  41d9a3:	74 2f                	je     41d9d4 <_ZN5boost15program_options12basic_optionIcED1Ev+0xb4>
  41d9a5:	0f 1f 00             	nopl   (%rax)
  41d9a8:	48 8b 3b             	mov    (%rbx),%rdi
  41d9ab:	48 8d 43 10          	lea    0x10(%rbx),%rax
  41d9af:	48 39 c7             	cmp    %rax,%rdi
  41d9b2:	74 12                	je     41d9c6 <_ZN5boost15program_options12basic_optionIcED1Ev+0xa6>
  41d9b4:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d9bb:	ff ff ff 
  41d9be:	49 89 ef             	mov    %rbp,%r15
  41d9c1:	48 01 e8             	add    %rbp,%rax
  41d9c4:	ff d0                	callq  *%rax
  41d9c6:	48 83 c3 20          	add    $0x20,%rbx
  41d9ca:	49 39 dd             	cmp    %rbx,%r13
  41d9cd:	75 d9                	jne    41d9a8 <_ZN5boost15program_options12basic_optionIcED1Ev+0x88>
  41d9cf:	49 8b 5c 24 28       	mov    0x28(%r12),%rbx
	if (__p)
  41d9d4:	48 85 db             	test   %rbx,%rbx
  41d9d7:	74 15                	je     41d9ee <_ZN5boost15program_options12basic_optionIcED1Ev+0xce>
  41d9d9:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41d9e0:	ff ff ff 
  41d9e3:	48 89 df             	mov    %rbx,%rdi
  41d9e6:	49 89 ef             	mov    %rbp,%r15
  41d9e9:	48 01 e8             	add    %rbp,%rax
  41d9ec:	ff d0                	callq  *%rax
  41d9ee:	49 8b 3c 24          	mov    (%r12),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41d9f2:	49 83 c4 10          	add    $0x10,%r12
	if (!_M_is_local())
  41d9f6:	4c 39 e7             	cmp    %r12,%rdi
  41d9f9:	74 1d                	je     41da18 <_ZN5boost15program_options12basic_optionIcED1Ev+0xf8>
  41d9fb:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41da02:	ff ff ff 
  41da05:	5b                   	pop    %rbx
  41da06:	48 01 e8             	add    %rbp,%rax
  41da09:	5d                   	pop    %rbp
  41da0a:	41 5c                	pop    %r12
  41da0c:	41 5d                	pop    %r13
  41da0e:	41 5f                	pop    %r15
  41da10:	ff e0                	jmpq   *%rax
  41da12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41da18:	5b                   	pop    %rbx
  41da19:	5d                   	pop    %rbp
  41da1a:	41 5c                	pop    %r12
  41da1c:	41 5d                	pop    %r13
  41da1e:	41 5f                	pop    %r15
  41da20:	c3                   	retq   
  41da21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41da28:	00 00 00 
  41da2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041da30 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv>:
    basic_command_line_parser<charT>::run()
  41da30:	41 57                	push   %r15
  41da32:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 41da30 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv>
  41da39:	41 56                	push   %r14
  41da3b:	41 55                	push   %r13
  41da3d:	41 54                	push   %r12
  41da3f:	49 bb d0 d5 20 00 00 	movabs $0x20d5d0,%r11
  41da46:	00 00 00 
  41da49:	55                   	push   %rbp
  41da4a:	53                   	push   %rbx
  41da4b:	4c 01 d8             	add    %r11,%rax
  41da4e:	49 89 c6             	mov    %rax,%r14
  41da51:	48 89 f5             	mov    %rsi,%rbp
        parsed_options result(m_desc, detail::cmdline::get_canonical_option_prefix());
  41da54:	49 89 c7             	mov    %rax,%r15
    basic_command_line_parser<charT>::run()
  41da57:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  41da5e:	49 89 fd             	mov    %rdi,%r13
  41da61:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
        parsed_options result(m_desc, detail::cmdline::get_canonical_option_prefix());
  41da66:	48 b8 30 e8 dd ff ff 	movabs $0xffffffffffdde830,%rax
  41da6d:	ff ff ff 
    basic_command_line_parser<charT>::run()
  41da70:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
        parsed_options result(m_desc, detail::cmdline::get_canonical_option_prefix());
  41da75:	4c 01 f0             	add    %r14,%rax
  41da78:	48 89 f7             	mov    %rsi,%rdi
        result.options = detail::cmdline::run();
  41da7b:	48 8d 5c 24 40       	lea    0x40(%rsp),%rbx
        parsed_options result(m_desc, detail::cmdline::get_canonical_option_prefix());
  41da80:	ff d0                	callq  *%rax
  41da82:	48 8b 55 70          	mov    0x70(%rbp),%rdx
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  41da86:	66 0f ef c0          	pxor   %xmm0,%xmm0
        : description(xdescription), m_options_prefix(options_prefix) {}
  41da8a:	89 84 24 a0 00 00 00 	mov    %eax,0xa0(%rsp)
  41da91:	48 b9 80 c2 de ff ff 	movabs $0xffffffffffdec280,%rcx
  41da98:	ff ff ff 
        result.options = detail::cmdline::run();
  41da9b:	48 b8 10 e4 dd ff ff 	movabs $0xffffffffffdde410,%rax
  41daa2:	ff ff ff 
  41daa5:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
  41daac:	00 00 00 00 00 
  41dab1:	48 89 ee             	mov    %rbp,%rsi
  41dab4:	48 89 df             	mov    %rbx,%rdi
  41dab7:	0f 29 84 24 80 00 00 	movaps %xmm0,0x80(%rsp)
  41dabe:	00 
  41dabf:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
  41dac6:	00 
  41dac7:	4c 01 f0             	add    %r14,%rax
  41daca:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  41dacf:	ff d0                	callq  *%rax
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
      {
	vector __tmp(get_allocator());
  41dad1:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  41dad6:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  41dadd:	00 
  41dade:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
  41dae3:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  41daea:	00 
  41daeb:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  41daf0:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  41daf7:	00 
  41daf8:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      __a = _GLIBCXX_MOVE(__b);
  41dafd:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
      __b = _GLIBCXX_MOVE(__tmp);
  41db02:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  41db09:	00 00 
      __a = _GLIBCXX_MOVE(__b);
  41db0b:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  41db12:	00 
  41db13:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
      __b = _GLIBCXX_MOVE(__tmp);
  41db18:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  41db1f:	00 00 
      __a = _GLIBCXX_MOVE(__b);
  41db21:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  41db28:	00 
  41db29:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
      __b = _GLIBCXX_MOVE(__tmp);
  41db2e:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  41db35:	00 00 
      __a = _GLIBCXX_MOVE(__b);
  41db37:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
  41db3e:	00 
  41db3f:	48 b8 80 c2 de ff ff 	movabs $0xffffffffffdec280,%rax
  41db46:	ff ff ff 
  41db49:	4a 8d 2c 30          	lea    (%rax,%r14,1),%rbp
  41db4d:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  41db52:	ff d5                	callq  *%rbp
  41db54:	48 89 df             	mov    %rbx,%rdi
  41db57:	ff d5                	callq  *%rbp
  41db59:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  41db60:	00 
  41db61:	4c 8b b4 24 80 00 00 	mov    0x80(%rsp),%r14
  41db68:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41db69:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
  41db70:	aa aa aa 
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41db73:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
  41db7a:	00 
  41db7b:	49 c7 45 08 00 00 00 	movq   $0x0,0x8(%r13)
  41db82:	00 
  41db83:	49 c7 45 10 00 00 00 	movq   $0x0,0x10(%r13)
  41db8a:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41db8b:	48 89 c3             	mov    %rax,%rbx
  41db8e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41db93:	4c 29 f3             	sub    %r14,%rbx
  41db96:	48 89 d8             	mov    %rbx,%rax
  41db99:	48 c1 f8 05          	sar    $0x5,%rax
  41db9d:	48 0f af c2          	imul   %rdx,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41dba1:	48 85 c0             	test   %rax,%rax
  41dba4:	0f 84 ac 02 00 00    	je     41de56 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x426>
	if (__n > this->max_size())
  41dbaa:	48 ba aa aa aa aa aa 	movabs $0x2aaaaaaaaaaaaaa,%rdx
  41dbb1:	aa aa 02 
  41dbb4:	48 39 d0             	cmp    %rdx,%rax
  41dbb7:	0f 87 a7 02 00 00    	ja     41de64 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x434>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41dbbd:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dbc2:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41dbc9:	ff ff ff 
  41dbcc:	48 89 df             	mov    %rbx,%rdi
  41dbcf:	49 89 cf             	mov    %rcx,%r15
  41dbd2:	48 01 c8             	add    %rcx,%rax
  41dbd5:	ff d0                	callq  *%rax
  41dbd7:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  41dbdc:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  41dbe3:	00 
  41dbe4:	4c 8b b4 24 80 00 00 	mov    0x80(%rsp),%r14
  41dbeb:	00 
  41dbec:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
	this->_M_impl._M_start = this->_M_allocate(__n);
  41dbf1:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41dbf6:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dbfb:	48 01 c3             	add    %rax,%rbx
  41dbfe:	4c 39 74 24 18       	cmp    %r14,0x18(%rsp)
	this->_M_impl._M_start = this->_M_allocate(__n);
  41dc03:	48 89 01             	mov    %rax,(%rcx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  41dc06:	48 89 41 08          	mov    %rax,0x8(%rcx)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dc0a:	48 89 59 10          	mov    %rbx,0x10(%rcx)
  41dc0e:	49 89 c5             	mov    %rax,%r13
  41dc11:	0f 84 d1 01 00 00    	je     41dde8 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x3b8>
          _M_construct(__beg, __end, _Tag());
  41dc17:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dc1c:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  41dc23:	ff ff ff 
  41dc26:	4c 8d 24 08          	lea    (%rax,%rcx,1),%r12
  41dc2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  41dc30:	4d 85 ed             	test   %r13,%r13
  41dc33:	0f 84 97 01 00 00    	je     41ddd0 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x3a0>
  41dc39:	49 8d 45 10          	lea    0x10(%r13),%rax
  41dc3d:	4c 89 ef             	mov    %r13,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41dc40:	49 89 45 00          	mov    %rax,0x0(%r13)
  41dc44:	49 8b 36             	mov    (%r14),%rsi
  41dc47:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41dc4c:	48 89 f2             	mov    %rsi,%rdx
  41dc4f:	49 03 56 08          	add    0x8(%r14),%rdx
          _M_construct(__beg, __end, _Tag());
  41dc53:	41 ff d4             	callq  *%r12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41dc56:	49 8b 5e 30          	mov    0x30(%r14),%rbx
  41dc5a:	49 2b 5e 28          	sub    0x28(%r14),%rbx
  41dc5e:	41 8b 46 20          	mov    0x20(%r14),%eax
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41dc62:	49 c7 45 28 00 00 00 	movq   $0x0,0x28(%r13)
  41dc69:	00 
  41dc6a:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
  41dc71:	00 
  41dc72:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
  41dc79:	00 
  41dc7a:	41 89 45 20          	mov    %eax,0x20(%r13)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41dc7e:	48 89 d8             	mov    %rbx,%rax
  41dc81:	48 c1 f8 05          	sar    $0x5,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41dc85:	48 85 c0             	test   %rax,%rax
  41dc88:	0f 84 b5 01 00 00    	je     41de43 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x413>
	if (__n > this->max_size())
  41dc8e:	48 b9 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rcx
  41dc95:	ff ff 07 
  41dc98:	48 39 c8             	cmp    %rcx,%rax
  41dc9b:	0f 87 e3 03 00 00    	ja     41e084 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x654>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41dca1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dca6:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41dcad:	ff ff ff 
  41dcb0:	48 89 df             	mov    %rbx,%rdi
  41dcb3:	49 89 cf             	mov    %rcx,%r15
  41dcb6:	48 01 c8             	add    %rcx,%rax
  41dcb9:	ff d0                	callq  *%rax
  41dcbb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dcc0:	48 01 c3             	add    %rax,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
  41dcc3:	49 89 45 28          	mov    %rax,0x28(%r13)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  41dcc7:	49 89 45 30          	mov    %rax,0x30(%r13)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dccb:	49 89 5d 38          	mov    %rbx,0x38(%r13)
  41dccf:	4d 8b 7e 30          	mov    0x30(%r14),%r15
  41dcd3:	48 89 c3             	mov    %rax,%rbx
  41dcd6:	49 8b 6e 28          	mov    0x28(%r14),%rbp
  41dcda:	49 39 ef             	cmp    %rbp,%r15
  41dcdd:	74 2b                	je     41dd0a <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x2da>
  41dcdf:	90                   	nop
  41dce0:	48 85 db             	test   %rbx,%rbx
  41dce3:	74 18                	je     41dcfd <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x2cd>
	: allocator_type(__a), _M_p(__dat) { }
  41dce5:	48 8d 43 10          	lea    0x10(%rbx),%rax
          _M_construct(__beg, __end, _Tag());
  41dce9:	48 89 df             	mov    %rbx,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41dcec:	48 89 03             	mov    %rax,(%rbx)
  41dcef:	48 8b 75 00          	mov    0x0(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41dcf3:	48 89 f2             	mov    %rsi,%rdx
  41dcf6:	48 03 55 08          	add    0x8(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  41dcfa:	41 ff d4             	callq  *%r12
  41dcfd:	48 83 c5 20          	add    $0x20,%rbp
  41dd01:	48 83 c3 20          	add    $0x20,%rbx
  41dd05:	49 39 ef             	cmp    %rbp,%r15
  41dd08:	75 d6                	jne    41dce0 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x2b0>
      { this->_M_impl._M_finish =
  41dd0a:	49 89 5d 30          	mov    %rbx,0x30(%r13)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41dd0e:	49 8b 5e 48          	mov    0x48(%r14),%rbx
  41dd12:	49 2b 5e 40          	sub    0x40(%r14),%rbx
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  41dd16:	49 c7 45 40 00 00 00 	movq   $0x0,0x40(%r13)
  41dd1d:	00 
  41dd1e:	49 c7 45 48 00 00 00 	movq   $0x0,0x48(%r13)
  41dd25:	00 
  41dd26:	49 c7 45 50 00 00 00 	movq   $0x0,0x50(%r13)
  41dd2d:	00 
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41dd2e:	48 89 d8             	mov    %rbx,%rax
  41dd31:	48 c1 f8 05          	sar    $0x5,%rax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41dd35:	48 85 c0             	test   %rax,%rax
  41dd38:	0f 84 f2 00 00 00    	je     41de30 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x400>
	if (__n > this->max_size())
  41dd3e:	48 b9 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rcx
  41dd45:	ff ff 07 
  41dd48:	48 39 c8             	cmp    %rcx,%rax
  41dd4b:	0f 87 6b 02 00 00    	ja     41dfbc <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x58c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41dd51:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dd56:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41dd5d:	ff ff ff 
  41dd60:	48 89 df             	mov    %rbx,%rdi
  41dd63:	49 89 cf             	mov    %rcx,%r15
  41dd66:	48 01 c8             	add    %rcx,%rax
  41dd69:	ff d0                	callq  *%rax
  41dd6b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dd70:	48 01 c3             	add    %rax,%rbx
	this->_M_impl._M_start = this->_M_allocate(__n);
  41dd73:	49 89 45 40          	mov    %rax,0x40(%r13)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  41dd77:	49 89 45 48          	mov    %rax,0x48(%r13)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  41dd7b:	49 89 5d 50          	mov    %rbx,0x50(%r13)
  41dd7f:	4d 8b 7e 48          	mov    0x48(%r14),%r15
  41dd83:	48 89 c3             	mov    %rax,%rbx
  41dd86:	49 8b 6e 40          	mov    0x40(%r14),%rbp
  41dd8a:	49 39 ef             	cmp    %rbp,%r15
  41dd8d:	74 2b                	je     41ddba <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x38a>
  41dd8f:	90                   	nop
  41dd90:	48 85 db             	test   %rbx,%rbx
  41dd93:	74 18                	je     41ddad <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x37d>
	: allocator_type(__a), _M_p(__dat) { }
  41dd95:	48 8d 43 10          	lea    0x10(%rbx),%rax
          _M_construct(__beg, __end, _Tag());
  41dd99:	48 89 df             	mov    %rbx,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41dd9c:	48 89 03             	mov    %rax,(%rbx)
  41dd9f:	48 8b 75 00          	mov    0x0(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41dda3:	48 89 f2             	mov    %rsi,%rdx
  41dda6:	48 03 55 08          	add    0x8(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  41ddaa:	41 ff d4             	callq  *%r12
  41ddad:	48 83 c5 20          	add    $0x20,%rbp
  41ddb1:	48 83 c3 20          	add    $0x20,%rbx
  41ddb5:	49 39 ef             	cmp    %rbp,%r15
  41ddb8:	75 d6                	jne    41dd90 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x360>
  41ddba:	41 0f b6 46 58       	movzbl 0x58(%r14),%eax
      { this->_M_impl._M_finish =
  41ddbf:	49 89 5d 48          	mov    %rbx,0x48(%r13)
  41ddc3:	41 88 45 58          	mov    %al,0x58(%r13)
  41ddc7:	41 0f b6 46 59       	movzbl 0x59(%r14),%eax
  41ddcc:	41 88 45 59          	mov    %al,0x59(%r13)
  41ddd0:	49 83 c5 60          	add    $0x60,%r13
  41ddd4:	49 83 c6 60          	add    $0x60,%r14
  41ddd8:	4c 39 74 24 18       	cmp    %r14,0x18(%rsp)
  41dddd:	0f 85 4d fe ff ff    	jne    41dc30 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x200>
  41dde3:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
    class basic_parsed_options {
  41dde8:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
  41ddef:	00 
  41ddf0:	4c 89 69 08          	mov    %r13,0x8(%rcx)
  41ddf4:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  41ddfb:	00 
  41ddfc:	48 89 41 18          	mov    %rax,0x18(%rcx)
  41de00:	8b 84 24 a0 00 00 00 	mov    0xa0(%rsp),%eax
  41de07:	89 41 20             	mov    %eax,0x20(%rcx)
  41de0a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41de0f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41de14:	48 01 c8             	add    %rcx,%rax
  41de17:	ff d0                	callq  *%rax
    }
  41de19:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41de1e:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  41de25:	5b                   	pop    %rbx
  41de26:	5d                   	pop    %rbp
  41de27:	41 5c                	pop    %r12
  41de29:	41 5d                	pop    %r13
  41de2b:	41 5e                	pop    %r14
  41de2d:	41 5f                	pop    %r15
  41de2f:	c3                   	retq   
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41de30:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  41de37:	00 00 
  41de39:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41de3e:	e9 2d ff ff ff       	jmpq   41dd70 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x340>
  41de43:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  41de4a:	00 00 
  41de4c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41de51:	e9 6a fe ff ff       	jmpq   41dcc0 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x290>
  41de56:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  41de5d:	00 00 
  41de5f:	e9 8d fd ff ff       	jmpq   41dbf1 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x1c1>
	  std::__throw_bad_alloc();
  41de64:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41de69:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41de70:	ff ff ff 
  41de73:	49 89 cf             	mov    %rcx,%r15
  41de76:	48 01 c8             	add    %rcx,%rax
  41de79:	ff d0                	callq  *%rax
  41de7b:	48 89 c5             	mov    %rax,%rbp
  41de7e:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  41de83:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
  41de88:	48 8d bc 24 80 00 00 	lea    0x80(%rsp),%rdi
  41de8f:	00 
  41de90:	48 89 d8             	mov    %rbx,%rax
  41de93:	49 89 df             	mov    %rbx,%r15
  41de96:	48 01 c8             	add    %rcx,%rax
  41de99:	ff d0                	callq  *%rax
  41de9b:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41dea2:	ff ff ff 
  41dea5:	48 89 ef             	mov    %rbp,%rdi
  41dea8:	48 01 d8             	add    %rbx,%rax
  41deab:	ff d0                	callq  *%rax
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
	    }
	  __catch(...)
  41dead:	48 89 c7             	mov    %rax,%rdi
  41deb0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41deb5:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  41debc:	ff ff ff 
  41debf:	49 89 c7             	mov    %rax,%r15
  41dec2:	48 01 e8             	add    %rbp,%rax
  41dec5:	ff d0                	callq  *%rax
	  for (; __first != __last; ++__first)
  41dec7:	48 39 5c 24 10       	cmp    %rbx,0x10(%rsp)
  41decc:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  41ded1:	74 2e                	je     41df01 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x4d1>
  41ded3:	49 8b 3c 24          	mov    (%r12),%rdi
	if (!_M_is_local())
  41ded7:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  41dedc:	48 39 c7             	cmp    %rax,%rdi
  41dedf:	74 17                	je     41def8 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x4c8>
      { ::operator delete(__p); }
  41dee1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dee6:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41deed:	ff ff ff 
  41def0:	49 89 cf             	mov    %rcx,%r15
  41def3:	48 01 c8             	add    %rcx,%rax
  41def6:	ff d0                	callq  *%rax
  41def8:	49 83 c4 20          	add    $0x20,%r12
  41defc:	49 39 dc             	cmp    %rbx,%r12
  41deff:	75 d2                	jne    41ded3 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x4a3>
	    {
	      std::_Destroy(__result, __cur);
	      __throw_exception_again;
  41df01:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41df06:	49 bc e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%r12
  41df0d:	ff ff ff 
  41df10:	49 89 c7             	mov    %rax,%r15
  41df13:	4c 01 e0             	add    %r12,%rax
  41df16:	ff d0                	callq  *%rax
  41df18:	49 89 c6             	mov    %rax,%r14
  41df1b:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  41df22:	ff ff ff 
  41df25:	49 bc e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%r12
  41df2c:	ff ff ff 
  41df2f:	48 bb 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rbx
  41df36:	ff ff ff 
  41df39:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41df3e:	48 b8 30 ba de ff ff 	movabs $0xffffffffffdeba30,%rax
  41df45:	ff ff ff 
  41df48:	49 8d 7d 28          	lea    0x28(%r13),%rdi
  41df4c:	48 01 c8             	add    %rcx,%rax
  41df4f:	ff d0                	callq  *%rax
  41df51:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  41df55:	48 3b 7c 24 20       	cmp    0x20(%rsp),%rdi
  41df5a:	74 17                	je     41df73 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x543>
  41df5c:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41df61:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41df68:	ff ff ff 
  41df6b:	49 89 cf             	mov    %rcx,%r15
  41df6e:	48 01 c8             	add    %rcx,%rax
  41df71:	ff d0                	callq  *%rax
  41df73:	4c 89 f0             	mov    %r14,%rax
	  __catch(...)
  41df76:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  41df7b:	48 89 c7             	mov    %rax,%rdi
  41df7e:	4c 01 f5             	add    %r14,%rbp
  41df81:	4d 89 f7             	mov    %r14,%r15
  41df84:	ff d5                	callq  *%rbp
  41df86:	4c 39 6c 24 38       	cmp    %r13,0x38(%rsp)
  41df8b:	48 b8 20 29 df ff ff 	movabs $0xffffffffffdf2920,%rax
  41df92:	ff ff ff 
    { __pointer->~_Tp(); }
  41df95:	4a 8d 2c 30          	lea    (%rax,%r14,1),%rbp
  41df99:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
	  for (; __first != __last; ++__first)
  41df9e:	74 0e                	je     41dfae <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x57e>
    { __pointer->~_Tp(); }
  41dfa0:	4c 89 f7             	mov    %r14,%rdi
	  for (; __first != __last; ++__first)
  41dfa3:	49 83 c6 60          	add    $0x60,%r14
    { __pointer->~_Tp(); }
  41dfa7:	ff d5                	callq  *%rbp
	  for (; __first != __last; ++__first)
  41dfa9:	4d 39 ee             	cmp    %r13,%r14
  41dfac:	75 f2                	jne    41dfa0 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x570>
	      __throw_exception_again;
  41dfae:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41dfb3:	49 89 c7             	mov    %rax,%r15
  41dfb6:	49 01 c4             	add    %rax,%r12
  41dfb9:	41 ff d4             	callq  *%r12
	  std::__throw_bad_alloc();
  41dfbc:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dfc1:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41dfc8:	ff ff ff 
  41dfcb:	49 89 cf             	mov    %rcx,%r15
  41dfce:	48 01 c8             	add    %rcx,%rax
  41dfd1:	ff d0                	callq  *%rax
	  __catch(...)
  41dfd3:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41dfd8:	49 89 c6             	mov    %rax,%r14
  41dfdb:	48 bb 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rbx
  41dfe2:	ff ff ff 
  41dfe5:	48 89 c8             	mov    %rcx,%rax
  41dfe8:	49 89 cf             	mov    %rcx,%r15
  41dfeb:	48 01 d8             	add    %rbx,%rax
  41dfee:	ff d0                	callq  *%rax
		      - this->_M_impl._M_start); }
  41dff0:	49 8b 7d 40          	mov    0x40(%r13),%rdi
	if (__p)
  41dff4:	48 85 ff             	test   %rdi,%rdi
  41dff7:	0f 84 3c ff ff ff    	je     41df39 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x509>
      { ::operator delete(__p); }
  41dffd:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e002:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e009:	ff ff ff 
  41e00c:	49 89 cf             	mov    %rcx,%r15
  41e00f:	48 01 c8             	add    %rcx,%rax
  41e012:	ff d0                	callq  *%rax
  41e014:	e9 20 ff ff ff       	jmpq   41df39 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x509>
  41e019:	48 89 c7             	mov    %rax,%rdi
  41e01c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41e021:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  41e028:	ff ff ff 
  41e02b:	49 89 c7             	mov    %rax,%r15
  41e02e:	48 01 e8             	add    %rbp,%rax
  41e031:	ff d0                	callq  *%rax
  41e033:	48 3b 5c 24 10       	cmp    0x10(%rsp),%rbx
  41e038:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  41e03d:	74 2e                	je     41e06d <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x63d>
  41e03f:	49 8b 3c 24          	mov    (%r12),%rdi
  41e043:	49 8d 44 24 10       	lea    0x10(%r12),%rax
  41e048:	48 39 c7             	cmp    %rax,%rdi
  41e04b:	74 17                	je     41e064 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x634>
  41e04d:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e052:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e059:	ff ff ff 
  41e05c:	49 89 cf             	mov    %rcx,%r15
  41e05f:	48 01 c8             	add    %rcx,%rax
  41e062:	ff d0                	callq  *%rax
  41e064:	49 83 c4 20          	add    $0x20,%r12
  41e068:	4c 39 e3             	cmp    %r12,%rbx
  41e06b:	75 d2                	jne    41e03f <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x60f>
	      __throw_exception_again;
  41e06d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41e072:	49 bc e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%r12
  41e079:	ff ff ff 
  41e07c:	49 89 c7             	mov    %rax,%r15
  41e07f:	4c 01 e0             	add    %r12,%rax
  41e082:	ff d0                	callq  *%rax
	  std::__throw_bad_alloc();
  41e084:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e089:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41e090:	ff ff ff 
  41e093:	49 89 cf             	mov    %rcx,%r15
  41e096:	48 01 c8             	add    %rcx,%rax
  41e099:	ff d0                	callq  *%rax
  41e09b:	49 89 c6             	mov    %rax,%r14
  41e09e:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  41e0a5:	ff ff ff 
  41e0a8:	49 bc e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%r12
  41e0af:	ff ff ff 
  41e0b2:	48 bb 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rbx
  41e0b9:	ff ff ff 
  41e0bc:	e9 90 fe ff ff       	jmpq   41df51 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x521>
	  __catch(...)
  41e0c1:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  41e0c6:	48 89 c5             	mov    %rax,%rbp
  41e0c9:	4c 01 f3             	add    %r14,%rbx
  41e0cc:	4d 89 f7             	mov    %r14,%r15
  41e0cf:	ff d3                	callq  *%rbx
		      - this->_M_impl._M_start); }
  41e0d1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41e0d6:	48 8b 38             	mov    (%rax),%rdi
	if (__p)
  41e0d9:	48 85 ff             	test   %rdi,%rdi
  41e0dc:	0f 84 9c fd ff ff    	je     41de7e <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x44e>
      { ::operator delete(__p); }
  41e0e2:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e0e9:	ff ff ff 
  41e0ec:	4c 01 f0             	add    %r14,%rax
  41e0ef:	ff d0                	callq  *%rax
  41e0f1:	e9 88 fd ff ff       	jmpq   41de7e <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x44e>
  41e0f6:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  41e0fd:	ff ff ff 
  41e100:	49 bc e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%r12
  41e107:	ff ff ff 
  41e10a:	48 bb 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rbx
  41e111:	ff ff ff 
  41e114:	e9 5d fe ff ff       	jmpq   41df76 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x546>
  41e119:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e11e:	49 89 c6             	mov    %rax,%r14
  41e121:	48 bb 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rbx
  41e128:	ff ff ff 
  41e12b:	48 89 c8             	mov    %rcx,%rax
  41e12e:	49 89 cf             	mov    %rcx,%r15
  41e131:	48 01 d8             	add    %rbx,%rax
  41e134:	ff d0                	callq  *%rax
		      - this->_M_impl._M_start); }
  41e136:	49 8b 7d 28          	mov    0x28(%r13),%rdi
	if (__p)
  41e13a:	48 85 ff             	test   %rdi,%rdi
  41e13d:	0f 84 0e fe ff ff    	je     41df51 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x521>
  41e143:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41e148:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e14f:	ff ff ff 
  41e152:	49 89 cf             	mov    %rcx,%r15
  41e155:	48 01 c8             	add    %rcx,%rax
  41e158:	ff d0                	callq  *%rax
  41e15a:	e9 f2 fd ff ff       	jmpq   41df51 <_ZN5boost15program_options25basic_command_line_parserIcE3runEv+0x521>
  41e15f:	90                   	nop

000000000041e160 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  41e160:	41 57                	push   %r15
  41e162:	41 56                	push   %r14
  41e164:	49 bb a0 ce 20 00 00 	movabs $0x20cea0,%r11
  41e16b:	00 00 00 
  41e16e:	41 55                	push   %r13
  41e170:	41 54                	push   %r12
  41e172:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 41e160 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm>
  41e179:	55                   	push   %rbp
  41e17a:	53                   	push   %rbx
  41e17b:	48 89 fd             	mov    %rdi,%rbp
  41e17e:	4d 01 dc             	add    %r11,%r12
  41e181:	48 89 f3             	mov    %rsi,%rbx
  41e184:	48 83 ec 08          	sub    $0x8,%rsp
	if (__builtin_expect(__n == 1, false))
  41e188:	48 83 fe 01          	cmp    $0x1,%rsi
  41e18c:	0f 84 06 01 00 00    	je     41e298 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x138>
	if (__n > this->max_size())
  41e192:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  41e199:	ff ff 1f 
  41e19c:	49 89 d5             	mov    %rdx,%r13
  41e19f:	48 39 c6             	cmp    %rax,%rsi
  41e1a2:	0f 87 04 01 00 00    	ja     41e2ac <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x14c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41e1a8:	4c 8d 34 f5 00 00 00 	lea    0x0(,%rsi,8),%r14
  41e1af:	00 
  41e1b0:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41e1b7:	ff ff ff 
  41e1ba:	4d 89 e7             	mov    %r12,%r15
  41e1bd:	4c 01 e0             	add    %r12,%rax
  41e1c0:	4c 89 f7             	mov    %r14,%rdi
  41e1c3:	ff d0                	callq  *%rax
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
  41e1c5:	48 89 c7             	mov    %rax,%rdi
  41e1c8:	49 89 c5             	mov    %rax,%r13
  41e1cb:	48 b8 40 e5 dd ff ff 	movabs $0xffffffffffdde540,%rax
  41e1d2:	ff ff ff 
  41e1d5:	4c 89 f2             	mov    %r14,%rdx
  41e1d8:	31 f6                	xor    %esi,%esi
  41e1da:	4c 01 e0             	add    %r12,%rax
  41e1dd:	ff d0                	callq  *%rax
  41e1df:	4c 8d 55 30          	lea    0x30(%rbp),%r10
  41e1e3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
      _M_before_begin._M_nxt = nullptr;
  41e1e7:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  41e1ee:	00 
      while (__p)
  41e1ef:	48 85 c9             	test   %rcx,%rcx
  41e1f2:	74 64                	je     41e258 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
  41e1f4:	45 31 c0             	xor    %r8d,%r8d
	      __new_buckets[__bkt] = &_M_before_begin;
  41e1f7:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
  41e1fb:	eb 17                	jmp    41e214 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41e1fd:	0f 1f 00             	nopl   (%rax)
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  41e200:	48 8b 16             	mov    (%rsi),%rdx
  41e203:	48 89 11             	mov    %rdx,(%rcx)
	      __new_buckets[__bkt]->_M_nxt = __p;
  41e206:	48 8b 00             	mov    (%rax),%rax
  41e209:	48 89 08             	mov    %rcx,(%rax)
      while (__p)
  41e20c:	48 85 ff             	test   %rdi,%rdi
  41e20f:	48 89 f9             	mov    %rdi,%rcx
  41e212:	74 44                	je     41e258 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xf8>
    { return __num % __den; }
  41e214:	48 8b 41 10          	mov    0x10(%rcx),%rax
  41e218:	31 d2                	xor    %edx,%edx
  41e21a:	48 8b 39             	mov    (%rcx),%rdi
  41e21d:	48 f7 f3             	div    %rbx
	  if (!__new_buckets[__bkt])
  41e220:	49 8d 44 d5 00       	lea    0x0(%r13,%rdx,8),%rax
  41e225:	48 8b 30             	mov    (%rax),%rsi
  41e228:	48 85 f6             	test   %rsi,%rsi
  41e22b:	75 d3                	jne    41e200 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xa0>
	      __p->_M_nxt = _M_before_begin._M_nxt;
  41e22d:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  41e231:	48 89 31             	mov    %rsi,(%rcx)
	      _M_before_begin._M_nxt = __p;
  41e234:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
	      __new_buckets[__bkt] = &_M_before_begin;
  41e238:	4c 89 08             	mov    %r9,(%rax)
	      if (__p->_M_nxt)
  41e23b:	48 83 39 00          	cmpq   $0x0,(%rcx)
  41e23f:	74 4f                	je     41e290 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x130>
      while (__p)
  41e241:	48 85 ff             	test   %rdi,%rdi
		__new_buckets[__bbegin_bkt] = __p;
  41e244:	4b 89 4c c5 00       	mov    %rcx,0x0(%r13,%r8,8)
	      __bbegin_bkt = __bkt;
  41e249:	49 89 d0             	mov    %rdx,%r8
  41e24c:	48 89 f9             	mov    %rdi,%rcx
      while (__p)
  41e24f:	75 c3                	jne    41e214 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xb4>
  41e251:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  41e258:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (_M_uses_single_bucket(__bkts))
  41e25c:	4c 39 d7             	cmp    %r10,%rdi
  41e25f:	74 12                	je     41e273 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x113>
      { ::operator delete(__p); }
  41e261:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e268:	ff ff ff 
  41e26b:	4d 89 e7             	mov    %r12,%r15
  41e26e:	4c 01 e0             	add    %r12,%rax
  41e271:	ff d0                	callq  *%rax
      _M_bucket_count = __n;
  41e273:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
      _M_buckets = __new_buckets;
  41e277:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    }
  41e27b:	48 83 c4 08          	add    $0x8,%rsp
  41e27f:	5b                   	pop    %rbx
  41e280:	5d                   	pop    %rbp
  41e281:	41 5c                	pop    %r12
  41e283:	41 5d                	pop    %r13
  41e285:	41 5e                	pop    %r14
  41e287:	41 5f                	pop    %r15
  41e289:	c3                   	retq   
  41e28a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	      __bbegin_bkt = __bkt;
  41e290:	49 89 d0             	mov    %rdx,%r8
  41e293:	e9 74 ff ff ff       	jmpq   41e20c <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0xac>
	    return &_M_single_bucket;
  41e298:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
	    _M_single_bucket = nullptr;
  41e29c:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41e2a3:	00 
	    return &_M_single_bucket;
  41e2a4:	4d 89 ea             	mov    %r13,%r10
  41e2a7:	e9 37 ff ff ff       	jmpq   41e1e3 <_ZNSt10_HashtableI8LocationS0_SaIS0_ENSt8__detail9_IdentityESt8equal_toIS0_ESt4hashIS0_ENS2_18_Mod_range_hashingENS2_20_Default_ranged_hashENS2_20_Prime_rehash_policyENS2_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_rehashEmRKm+0x83>
	  std::__throw_bad_alloc();
  41e2ac:	48 b8 90 e4 dd ff ff 	movabs $0xffffffffffdde490,%rax
  41e2b3:	ff ff ff 
  41e2b6:	4d 89 e7             	mov    %r12,%r15
  41e2b9:	4c 01 e0             	add    %r12,%rax
  41e2bc:	ff d0                	callq  *%rax
      __catch(...)
  41e2be:	48 89 c7             	mov    %rax,%rdi
  41e2c1:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  41e2c8:	ff ff ff 
  41e2cb:	4d 89 e7             	mov    %r12,%r15
  41e2ce:	4c 01 e0             	add    %r12,%rax
  41e2d1:	ff d0                	callq  *%rax
	  _M_rehash_policy._M_reset(__state);
  41e2d3:	49 8b 45 00          	mov    0x0(%r13),%rax
    { _M_next_resize = __state; }
  41e2d7:	48 89 45 28          	mov    %rax,0x28(%rbp)
	  __throw_exception_again;
  41e2db:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  41e2e2:	ff ff ff 
  41e2e5:	4c 01 e0             	add    %r12,%rax
  41e2e8:	ff d0                	callq  *%rax
      __catch(...)
  41e2ea:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  41e2f1:	ff ff ff 
  41e2f4:	48 89 c3             	mov    %rax,%rbx
  41e2f7:	4d 89 e7             	mov    %r12,%r15
  41e2fa:	4c 01 e2             	add    %r12,%rdx
  41e2fd:	ff d2                	callq  *%rdx
  41e2ff:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41e306:	ff ff ff 
  41e309:	48 89 df             	mov    %rbx,%rdi
  41e30c:	4c 01 e0             	add    %r12,%rax
  41e30f:	ff d0                	callq  *%rax
  41e311:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41e318:	00 00 00 
  41e31b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041e320 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  41e320:	41 57                	push   %r15
  41e322:	41 56                	push   %r14
  41e324:	49 bb e0 cc 20 00 00 	movabs $0x20cce0,%r11
  41e32b:	00 00 00 
  41e32e:	41 55                	push   %r13
  41e330:	41 54                	push   %r12
  41e332:	55                   	push   %rbp
  41e333:	53                   	push   %rbx
  41e334:	48 89 fd             	mov    %rdi,%rbp
  41e337:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41e320 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_>
  41e33e:	48 83 ec 28          	sub    $0x28,%rsp
  41e342:	4c 8b 37             	mov    (%rdi),%r14
  41e345:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  41e349:	4c 01 db             	add    %r11,%rbx
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41e34c:	48 89 f8             	mov    %rdi,%rax
  41e34f:	4c 29 f0             	sub    %r14,%rax
  41e352:	48 89 c1             	mov    %rax,%rcx
  41e355:	48 c1 f9 05          	sar    $0x5,%rcx
      if (__a < __b)
  41e359:	48 85 c9             	test   %rcx,%rcx
  41e35c:	74 22                	je     41e380 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x60>
  41e35e:	48 01 c9             	add    %rcx,%rcx
  41e361:	72 13                	jb     41e376 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  41e363:	49 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%r8
  41e36a:	ff ff 07 
  41e36d:	4c 39 c1             	cmp    %r8,%rcx
  41e370:	0f 86 b2 01 00 00    	jbe    41e528 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x208>
  41e376:	49 c7 c4 e0 ff ff ff 	mov    $0xffffffffffffffe0,%r12
  41e37d:	eb 07                	jmp    41e386 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x66>
  41e37f:	90                   	nop
  41e380:	41 bc 20 00 00 00    	mov    $0x20,%r12d
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  41e386:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  41e38d:	ff ff ff 
  41e390:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  41e395:	4c 89 e7             	mov    %r12,%rdi
  41e398:	49 89 df             	mov    %rbx,%r15
  41e39b:	48 01 d8             	add    %rbx,%rax
  41e39e:	ff d0                	callq  *%rax
  41e3a0:	49 89 c5             	mov    %rax,%r13
  41e3a3:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  41e3a7:	4a 8d 04 20          	lea    (%rax,%r12,1),%rax
  41e3ab:	49 8d 75 20          	lea    0x20(%r13),%rsi
  41e3af:	4c 8b 75 00          	mov    0x0(%rbp),%r14
  41e3b3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41e3b8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41e3bd:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  41e3c2:	48 89 f8             	mov    %rdi,%rax
  41e3c5:	4c 29 f0             	sub    %r14,%rax
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41e3c8:	4c 01 e8             	add    %r13,%rax
  41e3cb:	74 41                	je     41e40e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0xee>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41e3cd:	48 8d 50 10          	lea    0x10(%rax),%rdx
  41e3d1:	48 8b 0e             	mov    (%rsi),%rcx
  41e3d4:	48 89 10             	mov    %rdx,(%rax)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41e3d7:	48 8d 56 10          	lea    0x10(%rsi),%rdx
	if (__str._M_is_local())
  41e3db:	48 39 d1             	cmp    %rdx,%rcx
  41e3de:	0f 84 2c 01 00 00    	je     41e510 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1f0>
      { _M_dataplus._M_p = __p; }
  41e3e4:	48 89 08             	mov    %rcx,(%rax)
      { _M_allocated_capacity = __capacity; }
  41e3e7:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  41e3eb:	48 89 48 10          	mov    %rcx,0x10(%rax)
      { _M_string_length = __length; }
  41e3ef:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  41e3f3:	c6 46 10 00          	movb   $0x0,0x10(%rsi)
  41e3f7:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  41e3fb:	4c 8b 75 00          	mov    0x0(%rbp),%r14
      { _M_dataplus._M_p = __p; }
  41e3ff:	48 89 16             	mov    %rdx,(%rsi)
      { _M_string_length = __length; }
  41e402:	48 c7 46 08 00 00 00 	movq   $0x0,0x8(%rsi)
  41e409:	00 
  41e40a:	48 89 48 08          	mov    %rcx,0x8(%rax)
	      for (; __first != __last; ++__first, (void)++__cur)
  41e40e:	4c 39 f7             	cmp    %r14,%rdi
  41e411:	0f 84 b4 00 00 00    	je     41e4cb <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1ab>
  41e417:	49 8d 4e 20          	lea    0x20(%r14),%rcx
  41e41b:	49 8d 46 10          	lea    0x10(%r14),%rax
  41e41f:	4c 89 ea             	mov    %r13,%rdx
  41e422:	48 29 cf             	sub    %rcx,%rdi
  41e425:	49 8d 74 3e 30       	lea    0x30(%r14,%rdi,1),%rsi
  41e42a:	eb 32                	jmp    41e45e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x13e>
  41e42c:	0f 1f 40 00          	nopl   0x0(%rax)
      { _M_dataplus._M_p = __p; }
  41e430:	48 89 0a             	mov    %rcx,(%rdx)
	    _M_capacity(__str._M_allocated_capacity);
  41e433:	48 8b 08             	mov    (%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41e436:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  41e43a:	48 8b 48 f8          	mov    -0x8(%rax),%rcx
      { _M_string_length = __length; }
  41e43e:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
      { _M_dataplus._M_p = __p; }
  41e442:	48 89 40 f0          	mov    %rax,-0x10(%rax)
      { _M_string_length = __length; }
  41e446:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
  41e44d:	00 
  41e44e:	c6 00 00             	movb   $0x0,(%rax)
  41e451:	48 83 c0 20          	add    $0x20,%rax
  41e455:	48 83 c2 20          	add    $0x20,%rdx
  41e459:	48 39 f0             	cmp    %rsi,%rax
  41e45c:	74 2a                	je     41e488 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x168>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  41e45e:	48 85 d2             	test   %rdx,%rdx
  41e461:	74 ee                	je     41e451 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x131>
	: allocator_type(__a), _M_p(__dat) { }
  41e463:	48 8d 4a 10          	lea    0x10(%rdx),%rcx
  41e467:	48 89 0a             	mov    %rcx,(%rdx)
  41e46a:	48 8b 48 f0          	mov    -0x10(%rax),%rcx
	if (__str._M_is_local())
  41e46e:	48 39 c1             	cmp    %rax,%rcx
  41e471:	75 bd                	jne    41e430 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x110>
  41e473:	4c 8b 08             	mov    (%rax),%r9
  41e476:	4c 8b 50 08          	mov    0x8(%rax),%r10
  41e47a:	4c 89 4a 10          	mov    %r9,0x10(%rdx)
  41e47e:	4c 89 52 18          	mov    %r10,0x18(%rdx)
  41e482:	eb b6                	jmp    41e43a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x11a>
  41e484:	0f 1f 40 00          	nopl   0x0(%rax)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  41e488:	4c 8b 65 08          	mov    0x8(%rbp),%r12
  41e48c:	4c 8b 75 00          	mov    0x0(%rbp),%r14
	    ++__new_finish;
  41e490:	49 8d 44 3d 40       	lea    0x40(%r13,%rdi,1),%rax
  41e495:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	  for (; __first != __last; ++__first)
  41e49a:	4d 39 f4             	cmp    %r14,%r12
  41e49d:	74 2c                	je     41e4cb <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1ab>
  41e49f:	90                   	nop
  41e4a0:	49 8b 3e             	mov    (%r14),%rdi
	if (!_M_is_local())
  41e4a3:	49 8d 46 10          	lea    0x10(%r14),%rax
  41e4a7:	48 39 c7             	cmp    %rax,%rdi
  41e4aa:	74 12                	je     41e4be <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x19e>
      { ::operator delete(__p); }
  41e4ac:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e4b3:	ff ff ff 
  41e4b6:	49 89 df             	mov    %rbx,%r15
  41e4b9:	48 01 d8             	add    %rbx,%rax
  41e4bc:	ff d0                	callq  *%rax
  41e4be:	49 83 c6 20          	add    $0x20,%r14
  41e4c2:	4d 39 e6             	cmp    %r12,%r14
  41e4c5:	75 d9                	jne    41e4a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x180>
  41e4c7:	4c 8b 75 00          	mov    0x0(%rbp),%r14
	if (__p)
  41e4cb:	4d 85 f6             	test   %r14,%r14
  41e4ce:	74 15                	je     41e4e5 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x1c5>
  41e4d0:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e4d7:	ff ff ff 
  41e4da:	4c 89 f7             	mov    %r14,%rdi
  41e4dd:	49 89 df             	mov    %rbx,%r15
  41e4e0:	48 01 d8             	add    %rbx,%rax
  41e4e3:	ff d0                	callq  *%rax
	this->_M_impl._M_finish = __new_finish;
  41e4e5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	this->_M_impl._M_start = __new_start;
  41e4ea:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
	this->_M_impl._M_finish = __new_finish;
  41e4ee:	48 89 45 08          	mov    %rax,0x8(%rbp)
	this->_M_impl._M_end_of_storage = __new_start + __len;
  41e4f2:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41e4f7:	48 89 45 10          	mov    %rax,0x10(%rbp)
      }
  41e4fb:	48 83 c4 28          	add    $0x28,%rsp
  41e4ff:	5b                   	pop    %rbx
  41e500:	5d                   	pop    %rbp
  41e501:	41 5c                	pop    %r12
  41e503:	41 5d                	pop    %r13
  41e505:	41 5e                	pop    %r14
  41e507:	41 5f                	pop    %r15
  41e509:	c3                   	retq   
  41e50a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  41e510:	4c 8b 4e 10          	mov    0x10(%rsi),%r9
  41e514:	4c 8b 56 18          	mov    0x18(%rsi),%r10
  41e518:	4c 89 48 10          	mov    %r9,0x10(%rax)
  41e51c:	4c 89 50 18          	mov    %r10,0x18(%rax)
  41e520:	e9 ca fe ff ff       	jmpq   41e3ef <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0xcf>
  41e525:	0f 1f 00             	nopl   (%rax)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  41e528:	48 85 c9             	test   %rcx,%rcx
  41e52b:	75 1a                	jne    41e547 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x227>
  41e52d:	48 c7 44 24 08 20 00 	movq   $0x20,0x8(%rsp)
  41e534:	00 00 
  41e536:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  41e53d:	00 00 
  41e53f:	45 31 ed             	xor    %r13d,%r13d
  41e542:	e9 81 fe ff ff       	jmpq   41e3c8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0xa8>
  41e547:	48 c1 e1 05          	shl    $0x5,%rcx
  41e54b:	49 89 cc             	mov    %rcx,%r12
  41e54e:	e9 33 fe ff ff       	jmpq   41e386 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_emplace_back_auxIJS5_EEEvDpOT_+0x66>
  41e553:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41e55a:	00 00 00 
  41e55d:	0f 1f 00             	nopl   (%rax)

000000000041e560 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc>:
    basic_command_line_parser<charT>::
  41e560:	41 57                	push   %r15
  41e562:	41 56                	push   %r14
  41e564:	49 bb a0 ca 20 00 00 	movabs $0x20caa0,%r11
  41e56b:	00 00 00 
  41e56e:	41 55                	push   %r13
  41e570:	41 54                	push   %r12
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e572:	31 c0                	xor    %eax,%eax
    basic_command_line_parser<charT>::
  41e574:	55                   	push   %rbp
  41e575:	53                   	push   %rbx
  41e576:	48 8d 1d e3 ff ff ff 	lea    -0x1d(%rip),%rbx        # 41e560 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc>
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e57d:	48 63 ce             	movslq %esi,%rcx
        m_desc()
  41e580:	4c 8d 62 08          	lea    0x8(%rdx),%r12
    basic_command_line_parser<charT>::
  41e584:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  41e58b:	4c 01 db             	add    %r11,%rbx
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e58e:	85 f6                	test   %esi,%esi
  41e590:	0f 94 c0             	sete   %al
    basic_command_line_parser<charT>::
  41e593:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  41e598:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  41e59f:	00 00 
        to_internal(detail::make_vector<charT, const charT* const*>(argv+1, argv+argc+!argc))),
  41e5a1:	48 c1 e0 03          	shl    $0x3,%rax
  41e5a5:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  41e5ac:	00 00 
  41e5ae:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
  41e5b5:	00 00 
  41e5b7:	48 8d 04 c8          	lea    (%rax,%rcx,8),%rax
        m_desc()
  41e5bb:	48 01 d0             	add    %rdx,%rax
            for(; i != e; ++i)
  41e5be:	4c 39 e0             	cmp    %r12,%rax
        m_desc()
  41e5c1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
            for(; i != e; ++i)
  41e5c6:	0f 84 f9 02 00 00    	je     41e8c5 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x365>
  41e5cc:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  41e5d1:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41e5d6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
          _M_construct(__beg, __end, _Tag());
  41e5db:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  41e5e2:	ff ff ff 
	: allocator_type(__a), _M_p(__dat) { }
  41e5e5:	49 8d 6d 10          	lea    0x10(%r13),%rbp
          _M_construct(__beg, __end, _Tag());
  41e5e9:	4c 8d 34 18          	lea    (%rax,%rbx,1),%r14
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  41e5ed:	48 b8 20 33 df ff ff 	movabs $0xffffffffffdf3320,%rax
  41e5f4:	ff ff ff 
  41e5f7:	48 01 d8             	add    %rbx,%rax
  41e5fa:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41e5ff:	eb 67                	jmp    41e668 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x108>
  41e601:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_dataplus._M_p = __p; }
  41e608:	48 89 10             	mov    %rdx,(%rax)
	    _M_capacity(__str._M_allocated_capacity);
  41e60b:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  41e612:	00 
      { _M_allocated_capacity = __capacity; }
  41e613:	48 89 50 10          	mov    %rdx,0x10(%rax)
  41e617:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
  41e61c:	48 89 ef             	mov    %rbp,%rdi
      { _M_string_length = __length; }
  41e61f:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { _M_dataplus._M_p = __p; }
  41e623:	48 89 6c 24 70       	mov    %rbp,0x70(%rsp)
      { _M_string_length = __length; }
  41e628:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  41e62f:	00 00 
  41e631:	c6 84 24 80 00 00 00 	movb   $0x0,0x80(%rsp)
  41e638:	00 
	    ++this->_M_impl._M_finish;
  41e639:	48 83 c0 20          	add    $0x20,%rax
  41e63d:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
	if (!_M_is_local())
  41e642:	48 39 ef             	cmp    %rbp,%rdi
  41e645:	74 12                	je     41e659 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xf9>
  41e647:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e64e:	ff ff ff 
  41e651:	49 89 df             	mov    %rbx,%r15
  41e654:	48 01 d8             	add    %rbx,%rax
  41e657:	ff d0                	callq  *%rax
  41e659:	49 83 c4 08          	add    $0x8,%r12
  41e65d:	4c 39 64 24 10       	cmp    %r12,0x10(%rsp)
  41e662:	0f 84 b0 00 00 00    	je     41e718 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x1b8>
                result.push_back(*i);
  41e668:	49 8b 34 24          	mov    (%r12),%rsi
	: allocator_type(__a), _M_p(__dat) { }
  41e66c:	48 89 6c 24 70       	mov    %rbp,0x70(%rsp)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
  41e671:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
  41e678:	48 85 f6             	test   %rsi,%rsi
  41e67b:	74 23                	je     41e6a0 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x140>
      { return __builtin_strlen(__s); }
  41e67d:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41e684:	ff ff ff 
  41e687:	48 89 f7             	mov    %rsi,%rdi
  41e68a:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41e68f:	49 89 df             	mov    %rbx,%r15
  41e692:	48 01 d8             	add    %rbx,%rax
  41e695:	ff d0                	callq  *%rax
  41e697:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41e69c:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
          _M_construct(__beg, __end, _Tag());
  41e6a0:	4c 89 ef             	mov    %r13,%rdi
  41e6a3:	41 ff d6             	callq  *%r14
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  41e6a6:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  41e6ab:	48 3b 44 24 60       	cmp    0x60(%rsp),%rax
  41e6b0:	74 46                	je     41e6f8 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x198>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41e6b2:	48 85 c0             	test   %rax,%rax
  41e6b5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e6ba:	0f 84 79 ff ff ff    	je     41e639 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xd9>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41e6c0:	48 8d 50 10          	lea    0x10(%rax),%rdx
  41e6c4:	48 89 10             	mov    %rdx,(%rax)
  41e6c7:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
	if (__str._M_is_local())
  41e6cc:	48 39 ea             	cmp    %rbp,%rdx
  41e6cf:	0f 85 33 ff ff ff    	jne    41e608 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xa8>
  41e6d5:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  41e6dc:	00 
  41e6dd:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  41e6e4:	00 
  41e6e5:	48 89 70 10          	mov    %rsi,0x10(%rax)
  41e6e9:	48 89 78 18          	mov    %rdi,0x18(%rax)
  41e6ed:	e9 25 ff ff ff       	jmpq   41e617 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xb7>
  41e6f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  41e6f8:	4c 89 ee             	mov    %r13,%rsi
  41e6fb:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41e700:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41e705:	ff d0                	callq  *%rax
  41e707:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e70c:	e9 31 ff ff ff       	jmpq   41e642 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0xe2>
  41e711:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41e718:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  41e71d:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  41e722:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41e729:	00 00 
  41e72b:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  41e732:	00 00 
  41e734:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  41e73b:	00 00 
  41e73d:	48 29 f0             	sub    %rsi,%rax
  41e740:	48 c1 f8 05          	sar    $0x5,%rax

        template<class T>
        std::vector<std::string> to_internal(const std::vector<T>& s)
        {
            std::vector<std::string> result;
            for (unsigned i = 0; i < s.size(); ++i)
  41e744:	48 85 c0             	test   %rax,%rax
  41e747:	0f 84 11 02 00 00    	je     41e95e <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3fe>
  41e74d:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
                result.push_back(to_internal(s[i]));            
  41e752:	49 be 10 e7 dd ff ff 	movabs $0xffffffffffdde710,%r14
  41e759:	ff ff ff 
            for (unsigned i = 0; i < s.size(); ++i)
  41e75c:	31 d2                	xor    %edx,%edx
  41e75e:	45 31 e4             	xor    %r12d,%r12d
                result.push_back(to_internal(s[i]));            
  41e761:	49 01 de             	add    %rbx,%r14
  41e764:	49 8d 6d 10          	lea    0x10(%r13),%rbp
  41e768:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41e76d:	48 b8 20 33 df ff ff 	movabs $0xffffffffffdf3320,%rax
  41e774:	ff ff ff 
  41e777:	48 01 d8             	add    %rbx,%rax
  41e77a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41e77f:	eb 76                	jmp    41e7f7 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x297>
  41e781:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
      { _M_dataplus._M_p = __p; }
  41e788:	48 89 10             	mov    %rdx,(%rax)
	    _M_capacity(__str._M_allocated_capacity);
  41e78b:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  41e792:	00 
      { _M_allocated_capacity = __capacity; }
  41e793:	48 89 50 10          	mov    %rdx,0x10(%rax)
  41e797:	48 8b 54 24 78       	mov    0x78(%rsp),%rdx
      { __c1 = __c2; }
  41e79c:	48 89 ef             	mov    %rbp,%rdi
      { _M_string_length = __length; }
  41e79f:	48 89 50 08          	mov    %rdx,0x8(%rax)
      { _M_dataplus._M_p = __p; }
  41e7a3:	48 89 6c 24 70       	mov    %rbp,0x70(%rsp)
      { _M_string_length = __length; }
  41e7a8:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  41e7af:	00 00 
  41e7b1:	c6 84 24 80 00 00 00 	movb   $0x0,0x80(%rsp)
  41e7b8:	00 
	    ++this->_M_impl._M_finish;
  41e7b9:	48 83 c0 20          	add    $0x20,%rax
  41e7bd:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
	if (!_M_is_local())
  41e7c2:	48 39 ef             	cmp    %rbp,%rdi
  41e7c5:	74 12                	je     41e7d9 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x279>
      { ::operator delete(__p); }
  41e7c7:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e7ce:	ff ff ff 
  41e7d1:	49 89 df             	mov    %rbx,%r15
  41e7d4:	48 01 d8             	add    %rbx,%rax
  41e7d7:	ff d0                	callq  *%rax
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41e7d9:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
  41e7de:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
            for (unsigned i = 0; i < s.size(); ++i)
  41e7e3:	41 8d 54 24 01       	lea    0x1(%r12),%edx
  41e7e8:	49 89 d4             	mov    %rdx,%r12
  41e7eb:	48 29 f0             	sub    %rsi,%rax
  41e7ee:	48 c1 f8 05          	sar    $0x5,%rax
  41e7f2:	48 39 c2             	cmp    %rax,%rdx
  41e7f5:	73 79                	jae    41e870 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x310>
      { return *(this->_M_impl._M_start + __n); }
  41e7f7:	48 c1 e2 05          	shl    $0x5,%rdx
                result.push_back(to_internal(s[i]));            
  41e7fb:	4c 89 ef             	mov    %r13,%rdi
  41e7fe:	49 89 df             	mov    %rbx,%r15
  41e801:	48 01 d6             	add    %rdx,%rsi
  41e804:	41 ff d6             	callq  *%r14
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  41e807:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41e80c:	48 3b 44 24 40       	cmp    0x40(%rsp),%rax
  41e811:	74 3d                	je     41e850 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x2f0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  41e813:	48 85 c0             	test   %rax,%rax
  41e816:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e81b:	74 9c                	je     41e7b9 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x259>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41e81d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  41e821:	48 89 10             	mov    %rdx,(%rax)
  41e824:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
	if (__str._M_is_local())
  41e829:	48 39 ea             	cmp    %rbp,%rdx
  41e82c:	0f 85 56 ff ff ff    	jne    41e788 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x228>
  41e832:	48 8b b4 24 80 00 00 	mov    0x80(%rsp),%rsi
  41e839:	00 
  41e83a:	48 8b bc 24 88 00 00 	mov    0x88(%rsp),%rdi
  41e841:	00 
  41e842:	48 89 70 10          	mov    %rsi,0x10(%rax)
  41e846:	48 89 78 18          	mov    %rdi,0x18(%rax)
  41e84a:	e9 48 ff ff ff       	jmpq   41e797 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x237>
  41e84f:	90                   	nop
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  41e850:	4c 89 ee             	mov    %r13,%rsi
  41e853:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41e858:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41e85d:	ff d0                	callq  *%rax
  41e85f:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e864:	e9 59 ff ff ff       	jmpq   41e7c2 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x262>
  41e869:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41e870:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  41e875:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
        m_desc()
  41e87a:	48 b8 e0 e5 dd ff ff 	movabs $0xffffffffffdde5e0,%rax
  41e881:	ff ff ff 
  41e884:	48 89 ee             	mov    %rbp,%rsi
  41e887:	4c 89 f7             	mov    %r14,%rdi
  41e88a:	49 89 df             	mov    %rbx,%r15
  41e88d:	48 01 d8             	add    %rbx,%rax
  41e890:	ff d0                	callq  *%rax
  41e892:	48 b8 30 ba de ff ff 	movabs $0xffffffffffdeba30,%rax
  41e899:	ff ff ff 
  41e89c:	48 89 ef             	mov    %rbp,%rdi
  41e89f:	48 01 c3             	add    %rax,%rbx
  41e8a2:	ff d3                	callq  *%rbx
  41e8a4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41e8a9:	ff d3                	callq  *%rbx
  41e8ab:	49 c7 46 70 00 00 00 	movq   $0x0,0x70(%r14)
  41e8b2:	00 
    {}
  41e8b3:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  41e8ba:	5b                   	pop    %rbx
  41e8bb:	5d                   	pop    %rbp
  41e8bc:	41 5c                	pop    %r12
  41e8be:	41 5d                	pop    %r13
  41e8c0:	41 5e                	pop    %r14
  41e8c2:	41 5f                	pop    %r15
  41e8c4:	c3                   	retq   
  41e8c5:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  41e8ca:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  41e8d1:	00 00 
  41e8d3:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  41e8da:	00 00 
  41e8dc:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  41e8e3:	00 00 
  41e8e5:	49 89 fe             	mov    %rdi,%r14
  41e8e8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41e8ed:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  41e8f2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41e8f7:	48 89 c5             	mov    %rax,%rbp
  41e8fa:	e9 7b ff ff ff       	jmpq   41e87a <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x31a>
  41e8ff:	48 89 c5             	mov    %rax,%rbp
        m_desc()
  41e902:	49 bc 30 ba de ff ff 	movabs $0xffffffffffdeba30,%r12
  41e909:	ff ff ff 
  41e90c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41e911:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  41e915:	ff d0                	callq  *%rax
  41e917:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41e91c:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  41e920:	ff d0                	callq  *%rax
  41e922:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41e929:	ff ff ff 
  41e92c:	48 89 ef             	mov    %rbp,%rdi
  41e92f:	49 89 df             	mov    %rbx,%r15
  41e932:	48 01 d8             	add    %rbx,%rax
  41e935:	ff d0                	callq  *%rax
  41e937:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
  41e93c:	49 83 c5 10          	add    $0x10,%r13
  41e940:	48 89 c5             	mov    %rax,%rbp
  41e943:	4c 39 ef             	cmp    %r13,%rdi
  41e946:	74 ba                	je     41e902 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3a2>
      { ::operator delete(__p); }
  41e948:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e94f:	ff ff ff 
  41e952:	49 89 df             	mov    %rbx,%r15
  41e955:	48 01 d8             	add    %rbx,%rax
  41e958:	ff d0                	callq  *%rax
  41e95a:	eb a6                	jmp    41e902 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3a2>
  41e95c:	eb a1                	jmp    41e8ff <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x39f>
  41e95e:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  41e963:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
  41e968:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41e96d:	48 89 c5             	mov    %rax,%rbp
  41e970:	e9 05 ff ff ff       	jmpq   41e87a <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x31a>
  41e975:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41e97a:	49 83 c5 10          	add    $0x10,%r13
  41e97e:	48 89 c5             	mov    %rax,%rbp
  41e981:	4c 39 ef             	cmp    %r13,%rdi
  41e984:	74 12                	je     41e998 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x438>
  41e986:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41e98d:	ff ff ff 
  41e990:	49 89 df             	mov    %rbx,%r15
  41e993:	48 01 d8             	add    %rbx,%rax
  41e996:	ff d0                	callq  *%rax
  41e998:	48 b8 30 ba de ff ff 	movabs $0xffffffffffdeba30,%rax
  41e99f:	ff ff ff 
  41e9a2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41e9a7:	48 01 d8             	add    %rbx,%rax
  41e9aa:	e9 71 ff ff ff       	jmpq   41e920 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x3c0>
  41e9af:	48 89 c5             	mov    %rax,%rbp
  41e9b2:	eb e4                	jmp    41e998 <_ZN5boost15program_options25basic_command_line_parserIcEC1EiPKPKc+0x438>
  41e9b4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41e9bb:	00 00 00 
  41e9be:	66 90                	xchg   %ax,%ax

000000000041e9c0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
  41e9c0:	41 57                	push   %r15
  41e9c2:	41 55                	push   %r13
  41e9c4:	49 bb 40 c6 20 00 00 	movabs $0x20c640,%r11
  41e9cb:	00 00 00 
  41e9ce:	41 54                	push   %r12
  41e9d0:	55                   	push   %rbp
  41e9d1:	49 89 f4             	mov    %rsi,%r12
  41e9d4:	53                   	push   %rbx
  41e9d5:	48 8d 1d e4 ff ff ff 	lea    -0x1c(%rip),%rbx        # 41e9c0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
      { return __builtin_strlen(__s); }
  41e9dc:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41e9e3:	ff ff ff 
  41e9e6:	48 89 fd             	mov    %rdi,%rbp
  41e9e9:	49 89 d5             	mov    %rdx,%r13
  41e9ec:	48 89 d7             	mov    %rdx,%rdi
  41e9ef:	4c 01 db             	add    %r11,%rbx
  41e9f2:	48 01 d8             	add    %rbx,%rax
  41e9f5:	49 89 df             	mov    %rbx,%r15
  41e9f8:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41e9fa:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
  41ea01:	ff ff 7f 
  41ea04:	49 2b 4c 24 08       	sub    0x8(%r12),%rcx
  41ea09:	48 39 c8             	cmp    %rcx,%rax
  41ea0c:	77 74                	ja     41ea82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_+0xc2>
	return _M_append(__s, __n);
  41ea0e:	48 89 c2             	mov    %rax,%rdx
  41ea11:	48 b8 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rax
  41ea18:	ff ff ff 
  41ea1b:	4c 89 ee             	mov    %r13,%rsi
  41ea1e:	48 01 d8             	add    %rbx,%rax
  41ea21:	4c 89 e7             	mov    %r12,%rdi
  41ea24:	49 89 df             	mov    %rbx,%r15
  41ea27:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ea29:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  41ea2d:	48 89 55 00          	mov    %rdx,0x0(%rbp)
  41ea31:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ea34:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41ea38:	48 39 d1             	cmp    %rdx,%rcx
  41ea3b:	74 33                	je     41ea70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_+0xb0>
      { _M_dataplus._M_p = __p; }
  41ea3d:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
	    _M_capacity(__str._M_allocated_capacity);
  41ea41:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41ea45:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
  41ea49:	48 8b 48 08          	mov    0x8(%rax),%rcx
      { _M_string_length = __length; }
  41ea4d:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
      { _M_dataplus._M_p = __p; }
  41ea51:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41ea54:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41ea5b:	00 
      { __c1 = __c2; }
  41ea5c:	c6 40 10 00          	movb   $0x0,0x10(%rax)
    { return std::move(__lhs.append(__rhs)); }
  41ea60:	48 89 e8             	mov    %rbp,%rax
  41ea63:	5b                   	pop    %rbx
  41ea64:	5d                   	pop    %rbp
  41ea65:	41 5c                	pop    %r12
  41ea67:	41 5d                	pop    %r13
  41ea69:	41 5f                	pop    %r15
  41ea6b:	c3                   	retq   
  41ea6c:	0f 1f 40 00          	nopl   0x0(%rax)
  41ea70:	48 8b 48 10          	mov    0x10(%rax),%rcx
  41ea74:	48 8b 58 18          	mov    0x18(%rax),%rbx
  41ea78:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
  41ea7c:	48 89 5d 18          	mov    %rbx,0x18(%rbp)
  41ea80:	eb c7                	jmp    41ea49 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_+0x89>
	  __throw_length_error(__N(__s));
  41ea82:	48 b8 a1 89 df ff ff 	movabs $0xffffffffffdf89a1,%rax
  41ea89:	ff ff ff 
  41ea8c:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41ea90:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41ea97:	ff ff ff 
  41ea9a:	48 01 d8             	add    %rbx,%rax
  41ea9d:	ff d0                	callq  *%rax
  41ea9f:	90                   	nop

000000000041eaa0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
  41eaa0:	41 57                	push   %r15
  41eaa2:	41 56                	push   %r14
  41eaa4:	49 bb 60 c5 20 00 00 	movabs $0x20c560,%r11
  41eaab:	00 00 00 
  41eaae:	41 55                	push   %r13
  41eab0:	41 54                	push   %r12
      { return __builtin_strlen(__s); }
  41eab2:	48 b8 d0 e4 dd ff ff 	movabs $0xffffffffffdde4d0,%rax
  41eab9:	ff ff ff 
  41eabc:	55                   	push   %rbp
  41eabd:	53                   	push   %rbx
  41eabe:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 41eaa0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
  41eac5:	48 89 fd             	mov    %rdi,%rbp
  41eac8:	49 89 f6             	mov    %rsi,%r14
  41eacb:	48 89 f7             	mov    %rsi,%rdi
  41eace:	4c 01 db             	add    %r11,%rbx
  41ead1:	48 83 ec 18          	sub    $0x18,%rsp
  41ead5:	49 89 d5             	mov    %rdx,%r13
  41ead8:	49 89 df             	mov    %rbx,%r15
  41eadb:	48 01 d8             	add    %rbx,%rax
  41eade:	ff d0                	callq  *%rax
  41eae0:	49 89 c4             	mov    %rax,%r12
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41eae3:	48 8d 45 10          	lea    0x10(%rbp),%rax
      { _M_string_length = __length; }
  41eae7:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
  41eaee:	00 
      { __c1 = __c2; }
  41eaef:	c6 45 10 00          	movb   $0x0,0x10(%rbp)
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
  41eaf3:	4c 89 e6             	mov    %r12,%rsi
  41eaf6:	49 03 75 08          	add    0x8(%r13),%rsi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41eafa:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	: allocator_type(__a), _M_p(__dat) { }
  41eaff:	48 89 45 00          	mov    %rax,0x0(%rbp)
  41eb03:	48 b8 30 e9 dd ff ff 	movabs $0xffffffffffdde930,%rax
  41eb0a:	ff ff ff 
  41eb0d:	48 89 ef             	mov    %rbp,%rdi
  41eb10:	48 01 d8             	add    %rbx,%rax
  41eb13:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41eb15:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  41eb1c:	ff ff 7f 
  41eb1f:	48 2b 45 08          	sub    0x8(%rbp),%rax
  41eb23:	49 39 c4             	cmp    %rax,%r12
  41eb26:	77 3f                	ja     41eb67 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_+0xc7>
	return _M_append(__s, __n);
  41eb28:	4c 89 e2             	mov    %r12,%rdx
  41eb2b:	49 bc 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%r12
  41eb32:	ff ff ff 
  41eb35:	4c 89 f6             	mov    %r14,%rsi
  41eb38:	48 89 ef             	mov    %rbp,%rdi
  41eb3b:	49 89 df             	mov    %rbx,%r15
  41eb3e:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  41eb42:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41eb44:	49 8b 55 08          	mov    0x8(%r13),%rdx
  41eb48:	49 8b 75 00          	mov    0x0(%r13),%rsi
  41eb4c:	48 89 ef             	mov    %rbp,%rdi
  41eb4f:	49 01 dc             	add    %rbx,%r12
  41eb52:	41 ff d4             	callq  *%r12
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }
  41eb55:	48 83 c4 18          	add    $0x18,%rsp
  41eb59:	48 89 e8             	mov    %rbp,%rax
  41eb5c:	5b                   	pop    %rbx
  41eb5d:	5d                   	pop    %rbp
  41eb5e:	41 5c                	pop    %r12
  41eb60:	41 5d                	pop    %r13
  41eb62:	41 5e                	pop    %r14
  41eb64:	41 5f                	pop    %r15
  41eb66:	c3                   	retq   
	  __throw_length_error(__N(__s));
  41eb67:	48 b8 a1 89 df ff ff 	movabs $0xffffffffffdf89a1,%rax
  41eb6e:	ff ff ff 
  41eb71:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41eb75:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41eb7c:	ff ff ff 
  41eb7f:	48 01 d8             	add    %rbx,%rax
  41eb82:	ff d0                	callq  *%rax
  41eb84:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
	if (!_M_is_local())
  41eb88:	48 39 7c 24 08       	cmp    %rdi,0x8(%rsp)
  41eb8d:	49 89 c4             	mov    %rax,%r12
  41eb90:	74 12                	je     41eba4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_+0x104>
  41eb92:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  41eb99:	ff ff ff 
  41eb9c:	49 89 df             	mov    %rbx,%r15
  41eb9f:	48 01 da             	add    %rbx,%rdx
  41eba2:	ff d2                	callq  *%rdx
  41eba4:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41ebab:	ff ff ff 
  41ebae:	4c 89 e7             	mov    %r12,%rdi
  41ebb1:	49 89 df             	mov    %rbx,%r15
  41ebb4:	48 01 d8             	add    %rbx,%rax
  41ebb7:	ff d0                	callq  *%rax
  41ebb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041ebc0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev>:
    typed_value<T, charT>::name() const
  41ebc0:	41 57                	push   %r15
  41ebc2:	41 56                	push   %r14
  41ebc4:	49 bb 40 c4 20 00 00 	movabs $0x20c440,%r11
  41ebcb:	00 00 00 
  41ebce:	41 55                	push   %r13
  41ebd0:	41 54                	push   %r12
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41ebd2:	48 8d 56 18          	lea    0x18(%rsi),%rdx
    typed_value<T, charT>::name() const
  41ebd6:	55                   	push   %rbp
  41ebd7:	53                   	push   %rbx
  41ebd8:	48 8d 1d e1 ff ff ff 	lea    -0x1f(%rip),%rbx        # 41ebc0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev>
  41ebdf:	49 89 fc             	mov    %rdi,%r12
  41ebe2:	48 89 f5             	mov    %rsi,%rbp
  41ebe5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  41ebec:	4c 01 db             	add    %r11,%rbx
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41ebef:	48 83 7e 20 00       	cmpq   $0x0,0x20(%rsi)
  41ebf4:	75 0e                	jne    41ec04 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x44>
  41ebf6:	48 b8 98 ff ff ff ff 	movabs $0xffffffffffffff98,%rax
  41ebfd:	ff ff ff 
  41ec00:	48 8b 14 03          	mov    (%rbx,%rax,1),%rdx
        if (!m_implicit_value.empty() && !m_implicit_value_as_text.empty()) {
  41ec04:	48 83 7d 60 00       	cmpq   $0x0,0x60(%rbp)
  41ec09:	0f 84 61 02 00 00    	je     41ee70 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x2b0>
  41ec0f:	48 83 7d 70 00       	cmpq   $0x0,0x70(%rbp)
  41ec14:	0f 84 56 02 00 00    	je     41ee70 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x2b0>
            std::string msg = "[=" + var + "(=" + m_implicit_value_as_text + ")]";
  41ec1a:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  41ec1f:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41ec24:	49 89 c7             	mov    %rax,%r15
  41ec27:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41ec2c:	48 b8 bd 89 df ff ff 	movabs $0xffffffffffdf89bd,%rax
  41ec33:	ff ff ff 
  41ec36:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41ec3a:	48 b8 a0 3a df ff ff 	movabs $0xffffffffffdf3aa0,%rax
  41ec41:	ff ff ff 
  41ec44:	4c 89 ff             	mov    %r15,%rdi
  41ec47:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41ec4c:	48 01 d8             	add    %rbx,%rax
  41ec4f:	ff d0                	callq  *%rax
  41ec51:	48 b8 ba 89 df ff ff 	movabs $0xffffffffffdf89ba,%rax
  41ec58:	ff ff ff 
  41ec5b:	4c 89 fe             	mov    %r15,%rsi
  41ec5e:	4c 89 ef             	mov    %r13,%rdi
  41ec61:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41ec65:	48 b8 c0 39 df ff ff 	movabs $0xffffffffffdf39c0,%rax
  41ec6c:	ff ff ff 
  41ec6f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41ec74:	48 01 d8             	add    %rbx,%rax
  41ec77:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41ec79:	48 b8 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rax
  41ec80:	ff ff ff 
  41ec83:	48 8b 55 70          	mov    0x70(%rbp),%rdx
  41ec87:	48 8b 75 68          	mov    0x68(%rbp),%rsi
  41ec8b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  41ec90:	4c 89 ef             	mov    %r13,%rdi
  41ec93:	49 89 df             	mov    %rbx,%r15
  41ec96:	48 01 d8             	add    %rbx,%rax
  41ec99:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41ec9b:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41eca2:	00 
  41eca3:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41eca7:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41ecae:	00 
  41ecaf:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ecb2:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41ecb6:	48 39 d1             	cmp    %rdx,%rcx
  41ecb9:	0f 84 89 03 00 00    	je     41f048 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x488>
      { _M_dataplus._M_p = __p; }
  41ecbf:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41ecc6:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41ecc7:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41eccb:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41ecd2:	00 
  41ecd3:	48 8b 48 08          	mov    0x8(%rax),%rcx
  41ecd7:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  41ecdc:	4c 89 f6             	mov    %r14,%rsi
  41ecdf:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
      { _M_string_length = __length; }
  41ece4:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41eceb:	00 
      { _M_dataplus._M_p = __p; }
  41ecec:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41ecef:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41ecf6:	00 
  41ecf7:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41ecfb:	48 b8 b6 89 df ff ff 	movabs $0xffffffffffdf89b6,%rax
  41ed02:	ff ff ff 
  41ed05:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41ed09:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41ed0e:	48 01 d8             	add    %rbx,%rax
  41ed11:	ff d0                	callq  *%rax
  41ed13:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41ed1a:	00 
	if (!_M_is_local())
  41ed1b:	49 8d 46 10          	lea    0x10(%r14),%rax
  41ed1f:	48 39 c7             	cmp    %rax,%rdi
  41ed22:	74 12                	je     41ed36 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x176>
  41ed24:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ed2b:	ff ff ff 
  41ed2e:	49 89 df             	mov    %rbx,%r15
  41ed31:	48 01 d8             	add    %rbx,%rax
  41ed34:	ff d0                	callq  *%rax
  41ed36:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41ed3b:	49 8d 45 10          	lea    0x10(%r13),%rax
  41ed3f:	48 39 c7             	cmp    %rax,%rdi
  41ed42:	74 12                	je     41ed56 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x196>
  41ed44:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ed4b:	ff ff ff 
  41ed4e:	49 89 df             	mov    %rbx,%r15
  41ed51:	48 01 d8             	add    %rbx,%rax
  41ed54:	ff d0                	callq  *%rax
  41ed56:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41ed5b:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41ed60:	48 83 c0 10          	add    $0x10,%rax
  41ed64:	48 39 c7             	cmp    %rax,%rdi
  41ed67:	74 12                	je     41ed7b <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x1bb>
  41ed69:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ed70:	ff ff ff 
  41ed73:	49 89 df             	mov    %rbx,%r15
  41ed76:	48 01 d8             	add    %rbx,%rax
  41ed79:	ff d0                	callq  *%rax
            if (!m_default_value.empty() && !m_default_value_as_text.empty())
  41ed7b:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41ed80:	0f 84 aa 00 00 00    	je     41ee30 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x270>
  41ed86:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41ed8b:	0f 84 9f 00 00 00    	je     41ee30 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x270>
                msg += " (=" + m_default_value_as_text + ")";
  41ed91:	48 b8 b9 89 df ff ff 	movabs $0xffffffffffdf89b9,%rax
  41ed98:	ff ff ff 
  41ed9b:	48 8d 55 40          	lea    0x40(%rbp),%rdx
  41ed9f:	4c 89 ef             	mov    %r13,%rdi
  41eda2:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41eda6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41edab:	48 01 d8             	add    %rbx,%rax
  41edae:	ff d0                	callq  *%rax
  41edb0:	48 b8 b6 7e df ff ff 	movabs $0xffffffffffdf7eb6,%rax
  41edb7:	ff ff ff 
  41edba:	4c 89 ee             	mov    %r13,%rsi
  41edbd:	4c 89 f7             	mov    %r14,%rdi
  41edc0:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41edc4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41edc9:	48 01 d8             	add    %rbx,%rax
  41edcc:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41edce:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41edd3:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  41edda:	00 
  41eddb:	49 89 df             	mov    %rbx,%r15
  41edde:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  41ede5:	00 
  41ede6:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41edeb:	48 01 d8             	add    %rbx,%rax
  41edee:	ff d0                	callq  *%rax
  41edf0:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41edf7:	00 
	if (!_M_is_local())
  41edf8:	49 83 c6 10          	add    $0x10,%r14
  41edfc:	4c 39 f7             	cmp    %r14,%rdi
  41edff:	74 0f                	je     41ee10 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x250>
  41ee01:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ee08:	ff ff ff 
  41ee0b:	48 01 d8             	add    %rbx,%rax
  41ee0e:	ff d0                	callq  *%rax
  41ee10:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41ee15:	49 83 c5 10          	add    $0x10,%r13
  41ee19:	4c 39 ef             	cmp    %r13,%rdi
  41ee1c:	74 12                	je     41ee30 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x270>
  41ee1e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ee25:	ff ff ff 
  41ee28:	49 89 df             	mov    %rbx,%r15
  41ee2b:	48 01 d8             	add    %rbx,%rax
  41ee2e:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ee30:	49 8d 44 24 10       	lea    0x10(%r12),%rax
	if (__str._M_is_local())
  41ee35:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41ee3a:	49 89 04 24          	mov    %rax,(%r12)
  41ee3e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
	if (__str._M_is_local())
  41ee43:	48 83 c2 10          	add    $0x10,%rdx
  41ee47:	48 39 d0             	cmp    %rdx,%rax
  41ee4a:	0f 84 b8 01 00 00    	je     41f008 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x448>
      { _M_dataplus._M_p = __p; }
  41ee50:	49 89 04 24          	mov    %rax,(%r12)
      { _M_allocated_capacity = __capacity; }
  41ee54:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41ee59:	49 89 44 24 10       	mov    %rax,0x10(%r12)
      { _M_string_length = __length; }
  41ee5e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41ee63:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  41ee68:	e9 83 01 00 00       	jmpq   41eff0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x430>
  41ee6d:	0f 1f 00             	nopl   (%rax)
        else if (!m_default_value.empty() && !m_default_value_as_text.empty()) {
  41ee70:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41ee75:	0f 84 4d 01 00 00    	je     41efc8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x408>
  41ee7b:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41ee80:	0f 84 42 01 00 00    	je     41efc8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x408>
	: allocator_type(__a), _M_p(__dat) { }
  41ee86:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41ee8b:	48 8b 32             	mov    (%rdx),%rsi
  41ee8e:	49 8d 45 10          	lea    0x10(%r13),%rax
          _M_construct(__beg, __end, _Tag());
  41ee92:	4c 89 ef             	mov    %r13,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41ee95:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41ee9a:	48 89 f0             	mov    %rsi,%rax
  41ee9d:	48 03 42 08          	add    0x8(%rdx),%rax
  41eea1:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41eea4:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  41eeab:	ff ff ff 
  41eeae:	48 01 d8             	add    %rbx,%rax
  41eeb1:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41eeb3:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  41eeba:	ff ff 7f 
  41eebd:	48 2b 44 24 78       	sub    0x78(%rsp),%rax
  41eec2:	48 83 f8 02          	cmp    $0x2,%rax
  41eec6:	0f 86 99 01 00 00    	jbe    41f065 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4a5>
	return _M_append(__s, __n);
  41eecc:	48 b8 b9 89 df ff ff 	movabs $0xffffffffffdf89b9,%rax
  41eed3:	ff ff ff 
  41eed6:	ba 03 00 00 00       	mov    $0x3,%edx
  41eedb:	4c 89 ef             	mov    %r13,%rdi
  41eede:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41eee2:	48 b8 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rax
  41eee9:	ff ff ff 
  41eeec:	49 89 df             	mov    %rbx,%r15
  41eeef:	49 89 c6             	mov    %rax,%r14
  41eef2:	48 01 d8             	add    %rbx,%rax
  41eef5:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41eef7:	4c 89 f0             	mov    %r14,%rax
  41eefa:	48 8b 55 48          	mov    0x48(%rbp),%rdx
  41eefe:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  41ef02:	4c 89 ef             	mov    %r13,%rdi
  41ef05:	48 01 d8             	add    %rbx,%rax
  41ef08:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41ef0a:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41ef11:	00 
  41ef12:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41ef16:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41ef1d:	00 
  41ef1e:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ef21:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41ef25:	48 39 d1             	cmp    %rdx,%rcx
  41ef28:	0f 84 fa 00 00 00    	je     41f028 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x468>
      { _M_dataplus._M_p = __p; }
  41ef2e:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41ef35:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41ef36:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41ef3a:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41ef41:	00 
  41ef42:	48 8b 48 08          	mov    0x8(%rax),%rcx
            return var + " (=" + m_default_value_as_text + ")";
  41ef46:	4c 89 f6             	mov    %r14,%rsi
  41ef49:	4c 89 e7             	mov    %r12,%rdi
      { _M_string_length = __length; }
  41ef4c:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41ef53:	00 
      { _M_dataplus._M_p = __p; }
  41ef54:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41ef57:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41ef5e:	00 
  41ef5f:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41ef63:	48 b8 b6 7e df ff ff 	movabs $0xffffffffffdf7eb6,%rax
  41ef6a:	ff ff ff 
  41ef6d:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41ef71:	48 b8 c0 39 df ff ff 	movabs $0xffffffffffdf39c0,%rax
  41ef78:	ff ff ff 
  41ef7b:	48 01 d8             	add    %rbx,%rax
  41ef7e:	ff d0                	callq  *%rax
  41ef80:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41ef87:	00 
	if (!_M_is_local())
  41ef88:	49 83 c6 10          	add    $0x10,%r14
  41ef8c:	4c 39 f7             	cmp    %r14,%rdi
  41ef8f:	74 12                	je     41efa3 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x3e3>
  41ef91:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41ef98:	ff ff ff 
  41ef9b:	49 89 df             	mov    %rbx,%r15
  41ef9e:	48 01 d8             	add    %rbx,%rax
  41efa1:	ff d0                	callq  *%rax
  41efa3:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41efa8:	49 83 c5 10          	add    $0x10,%r13
  41efac:	4c 39 ef             	cmp    %r13,%rdi
  41efaf:	74 3f                	je     41eff0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x430>
  41efb1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41efb8:	ff ff ff 
  41efbb:	49 89 df             	mov    %rbx,%r15
  41efbe:	48 01 d8             	add    %rbx,%rax
  41efc1:	ff d0                	callq  *%rax
  41efc3:	eb 2b                	jmp    41eff0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x430>
  41efc5:	0f 1f 00             	nopl   (%rax)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41efc8:	49 8d 44 24 10       	lea    0x10(%r12),%rax
          _M_construct(__beg, __end, _Tag());
  41efcd:	4c 89 e7             	mov    %r12,%rdi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41efd0:	49 89 04 24          	mov    %rax,(%r12)
  41efd4:	48 8b 32             	mov    (%rdx),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41efd7:	48 89 f0             	mov    %rsi,%rax
  41efda:	48 03 42 08          	add    0x8(%rdx),%rax
  41efde:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41efe1:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  41efe8:	ff ff ff 
  41efeb:	48 01 d8             	add    %rbx,%rax
  41efee:	ff d0                	callq  *%rax
    }
  41eff0:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  41eff7:	4c 89 e0             	mov    %r12,%rax
  41effa:	5b                   	pop    %rbx
  41effb:	5d                   	pop    %rbp
  41effc:	41 5c                	pop    %r12
  41effe:	41 5d                	pop    %r13
  41f000:	41 5e                	pop    %r14
  41f002:	41 5f                	pop    %r15
  41f004:	c3                   	retq   
  41f005:	0f 1f 00             	nopl   (%rax)
  41f008:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41f00d:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  41f012:	49 89 44 24 10       	mov    %rax,0x10(%r12)
  41f017:	49 89 54 24 18       	mov    %rdx,0x18(%r12)
  41f01c:	e9 3d fe ff ff       	jmpq   41ee5e <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x29e>
  41f021:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41f028:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f02c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f030:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f037:	00 
  41f038:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f03f:	00 
  41f040:	e9 fd fe ff ff       	jmpq   41ef42 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x382>
  41f045:	0f 1f 00             	nopl   (%rax)
  41f048:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f04c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f050:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f057:	00 
  41f058:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f05f:	00 
  41f060:	e9 6e fc ff ff       	jmpq   41ecd3 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x113>
	  __throw_length_error(__N(__s));
  41f065:	48 b8 a1 89 df ff ff 	movabs $0xffffffffffdf89a1,%rax
  41f06c:	ff ff ff 
  41f06f:	49 89 df             	mov    %rbx,%r15
  41f072:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41f076:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41f07d:	ff ff ff 
  41f080:	48 01 d8             	add    %rbx,%rax
  41f083:	ff d0                	callq  *%rax
  41f085:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
  41f08a:	49 83 c5 10          	add    $0x10,%r13
  41f08e:	48 89 c5             	mov    %rax,%rbp
  41f091:	4c 39 ef             	cmp    %r13,%rdi
  41f094:	74 12                	je     41f0a8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f096:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  41f09d:	ff ff ff 
  41f0a0:	49 89 df             	mov    %rbx,%r15
  41f0a3:	48 01 da             	add    %rbx,%rdx
  41f0a6:	ff d2                	callq  *%rdx
  41f0a8:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41f0af:	ff ff ff 
  41f0b2:	48 89 ef             	mov    %rbp,%rdi
  41f0b5:	49 89 df             	mov    %rbx,%r15
  41f0b8:	48 01 d8             	add    %rbx,%rax
  41f0bb:	ff d0                	callq  *%rax
  41f0bd:	48 89 c5             	mov    %rax,%rbp
  41f0c0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f0c5:	49 83 c5 10          	add    $0x10,%r13
  41f0c9:	4c 39 ef             	cmp    %r13,%rdi
  41f0cc:	74 12                	je     41f0e0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x520>
  41f0ce:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f0d5:	ff ff ff 
  41f0d8:	49 89 df             	mov    %rbx,%r15
  41f0db:	48 01 d8             	add    %rbx,%rax
  41f0de:	ff d0                	callq  *%rax
  41f0e0:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41f0e5:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41f0ea:	48 83 c0 10          	add    $0x10,%rax
  41f0ee:	48 39 c7             	cmp    %rax,%rdi
  41f0f1:	74 b5                	je     41f0a8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f0f3:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f0fa:	ff ff ff 
  41f0fd:	49 89 df             	mov    %rbx,%r15
  41f100:	48 01 d8             	add    %rbx,%rax
  41f103:	ff d0                	callq  *%rax
  41f105:	eb a1                	jmp    41f0a8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f107:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f10e:	00 
  41f10f:	49 83 c6 10          	add    $0x10,%r14
  41f113:	48 89 c5             	mov    %rax,%rbp
  41f116:	4c 39 f7             	cmp    %r14,%rdi
  41f119:	74 12                	je     41f12d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x56d>
  41f11b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f122:	ff ff ff 
  41f125:	49 89 df             	mov    %rbx,%r15
  41f128:	48 01 d8             	add    %rbx,%rax
  41f12b:	ff d0                	callq  *%rax
  41f12d:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f132:	49 83 c5 10          	add    $0x10,%r13
  41f136:	4c 39 ef             	cmp    %r13,%rdi
  41f139:	74 12                	je     41f14d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x58d>
  41f13b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f142:	ff ff ff 
  41f145:	49 89 df             	mov    %rbx,%r15
  41f148:	48 01 d8             	add    %rbx,%rax
  41f14b:	ff d0                	callq  *%rax
  41f14d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41f152:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41f157:	48 83 c0 10          	add    $0x10,%rax
  41f15b:	48 39 c7             	cmp    %rax,%rdi
  41f15e:	75 93                	jne    41f0f3 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x533>
  41f160:	e9 43 ff ff ff       	jmpq   41f0a8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f165:	48 89 c5             	mov    %rax,%rbp
  41f168:	eb c3                	jmp    41f12d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x56d>
  41f16a:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f171:	00 
  41f172:	49 83 c6 10          	add    $0x10,%r14
  41f176:	48 89 c5             	mov    %rax,%rbp
  41f179:	4c 39 f7             	cmp    %r14,%rdi
  41f17c:	74 12                	je     41f190 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x5d0>
  41f17e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f185:	ff ff ff 
  41f188:	49 89 df             	mov    %rbx,%r15
  41f18b:	48 01 d8             	add    %rbx,%rax
  41f18e:	ff d0                	callq  *%rax
  41f190:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f195:	49 83 c5 10          	add    $0x10,%r13
  41f199:	4c 39 ef             	cmp    %r13,%rdi
  41f19c:	0f 85 51 ff ff ff    	jne    41f0f3 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x533>
  41f1a2:	e9 01 ff ff ff       	jmpq   41f0a8 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x4e8>
  41f1a7:	48 89 c5             	mov    %rax,%rbp
  41f1aa:	eb a1                	jmp    41f14d <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x58d>
  41f1ac:	48 89 c5             	mov    %rax,%rbp
  41f1af:	eb df                	jmp    41f190 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x5d0>
  41f1b1:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f1b8:	00 
  41f1b9:	49 83 c6 10          	add    $0x10,%r14
  41f1bd:	48 89 c5             	mov    %rax,%rbp
  41f1c0:	4c 39 f7             	cmp    %r14,%rdi
  41f1c3:	0f 84 f7 fe ff ff    	je     41f0c0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x500>
  41f1c9:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f1d0:	ff ff ff 
  41f1d3:	49 89 df             	mov    %rbx,%r15
  41f1d6:	48 01 d8             	add    %rbx,%rax
  41f1d9:	ff d0                	callq  *%rax
  41f1db:	e9 e0 fe ff ff       	jmpq   41f0c0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x500>
  41f1e0:	48 89 c5             	mov    %rax,%rbp
  41f1e3:	e9 f8 fe ff ff       	jmpq   41f0e0 <_ZNK5boost15program_options11typed_valueIfcE4nameB5cxx11Ev+0x520>
  41f1e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41f1ef:	00 

000000000041f1f0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev>:
    typed_value<T, charT>::name() const
  41f1f0:	41 57                	push   %r15
  41f1f2:	41 56                	push   %r14
  41f1f4:	49 bb 10 be 20 00 00 	movabs $0x20be10,%r11
  41f1fb:	00 00 00 
  41f1fe:	41 55                	push   %r13
  41f200:	41 54                	push   %r12
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41f202:	48 8d 56 18          	lea    0x18(%rsi),%rdx
    typed_value<T, charT>::name() const
  41f206:	55                   	push   %rbp
  41f207:	53                   	push   %rbx
  41f208:	48 8d 1d e1 ff ff ff 	lea    -0x1f(%rip),%rbx        # 41f1f0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev>
  41f20f:	49 89 fc             	mov    %rdi,%r12
  41f212:	48 89 f5             	mov    %rsi,%rbp
  41f215:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  41f21c:	4c 01 db             	add    %r11,%rbx
        std::string const& var = (m_value_name.empty() ? arg : m_value_name);
  41f21f:	48 83 7e 20 00       	cmpq   $0x0,0x20(%rsi)
  41f224:	75 0e                	jne    41f234 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x44>
  41f226:	48 b8 98 ff ff ff ff 	movabs $0xffffffffffffff98,%rax
  41f22d:	ff ff ff 
  41f230:	48 8b 14 03          	mov    (%rbx,%rax,1),%rdx
        if (!m_implicit_value.empty() && !m_implicit_value_as_text.empty()) {
  41f234:	48 83 7d 60 00       	cmpq   $0x0,0x60(%rbp)
  41f239:	0f 84 61 02 00 00    	je     41f4a0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x2b0>
  41f23f:	48 83 7d 70 00       	cmpq   $0x0,0x70(%rbp)
  41f244:	0f 84 56 02 00 00    	je     41f4a0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x2b0>
            std::string msg = "[=" + var + "(=" + m_implicit_value_as_text + ")]";
  41f24a:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
  41f24f:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41f254:	49 89 c7             	mov    %rax,%r15
  41f257:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41f25c:	48 b8 bd 89 df ff ff 	movabs $0xffffffffffdf89bd,%rax
  41f263:	ff ff ff 
  41f266:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f26a:	48 b8 a0 3a df ff ff 	movabs $0xffffffffffdf3aa0,%rax
  41f271:	ff ff ff 
  41f274:	4c 89 ff             	mov    %r15,%rdi
  41f277:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41f27c:	48 01 d8             	add    %rbx,%rax
  41f27f:	ff d0                	callq  *%rax
  41f281:	48 b8 ba 89 df ff ff 	movabs $0xffffffffffdf89ba,%rax
  41f288:	ff ff ff 
  41f28b:	4c 89 fe             	mov    %r15,%rsi
  41f28e:	4c 89 ef             	mov    %r13,%rdi
  41f291:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f295:	48 b8 c0 39 df ff ff 	movabs $0xffffffffffdf39c0,%rax
  41f29c:	ff ff ff 
  41f29f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41f2a4:	48 01 d8             	add    %rbx,%rax
  41f2a7:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f2a9:	48 b8 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rax
  41f2b0:	ff ff ff 
  41f2b3:	48 8b 55 70          	mov    0x70(%rbp),%rdx
  41f2b7:	48 8b 75 68          	mov    0x68(%rbp),%rsi
  41f2bb:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  41f2c0:	4c 89 ef             	mov    %r13,%rdi
  41f2c3:	49 89 df             	mov    %rbx,%r15
  41f2c6:	48 01 d8             	add    %rbx,%rax
  41f2c9:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41f2cb:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41f2d2:	00 
  41f2d3:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41f2d7:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41f2de:	00 
  41f2df:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41f2e2:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41f2e6:	48 39 d1             	cmp    %rdx,%rcx
  41f2e9:	0f 84 89 03 00 00    	je     41f678 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x488>
      { _M_dataplus._M_p = __p; }
  41f2ef:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41f2f6:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41f2f7:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41f2fb:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41f302:	00 
  41f303:	48 8b 48 08          	mov    0x8(%rax),%rcx
  41f307:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  41f30c:	4c 89 f6             	mov    %r14,%rsi
  41f30f:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
      { _M_string_length = __length; }
  41f314:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41f31b:	00 
      { _M_dataplus._M_p = __p; }
  41f31c:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41f31f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41f326:	00 
  41f327:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41f32b:	48 b8 b6 89 df ff ff 	movabs $0xffffffffffdf89b6,%rax
  41f332:	ff ff ff 
  41f335:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f339:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41f33e:	48 01 d8             	add    %rbx,%rax
  41f341:	ff d0                	callq  *%rax
  41f343:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f34a:	00 
	if (!_M_is_local())
  41f34b:	49 8d 46 10          	lea    0x10(%r14),%rax
  41f34f:	48 39 c7             	cmp    %rax,%rdi
  41f352:	74 12                	je     41f366 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x176>
  41f354:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f35b:	ff ff ff 
  41f35e:	49 89 df             	mov    %rbx,%r15
  41f361:	48 01 d8             	add    %rbx,%rax
  41f364:	ff d0                	callq  *%rax
  41f366:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f36b:	49 8d 45 10          	lea    0x10(%r13),%rax
  41f36f:	48 39 c7             	cmp    %rax,%rdi
  41f372:	74 12                	je     41f386 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x196>
  41f374:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f37b:	ff ff ff 
  41f37e:	49 89 df             	mov    %rbx,%r15
  41f381:	48 01 d8             	add    %rbx,%rax
  41f384:	ff d0                	callq  *%rax
  41f386:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41f38b:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41f390:	48 83 c0 10          	add    $0x10,%rax
  41f394:	48 39 c7             	cmp    %rax,%rdi
  41f397:	74 12                	je     41f3ab <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x1bb>
  41f399:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f3a0:	ff ff ff 
  41f3a3:	49 89 df             	mov    %rbx,%r15
  41f3a6:	48 01 d8             	add    %rbx,%rax
  41f3a9:	ff d0                	callq  *%rax
            if (!m_default_value.empty() && !m_default_value_as_text.empty())
  41f3ab:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41f3b0:	0f 84 aa 00 00 00    	je     41f460 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x270>
  41f3b6:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41f3bb:	0f 84 9f 00 00 00    	je     41f460 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x270>
                msg += " (=" + m_default_value_as_text + ")";
  41f3c1:	48 b8 b9 89 df ff ff 	movabs $0xffffffffffdf89b9,%rax
  41f3c8:	ff ff ff 
  41f3cb:	48 8d 55 40          	lea    0x40(%rbp),%rdx
  41f3cf:	4c 89 ef             	mov    %r13,%rdi
  41f3d2:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f3d6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41f3db:	48 01 d8             	add    %rbx,%rax
  41f3de:	ff d0                	callq  *%rax
  41f3e0:	48 b8 b6 7e df ff ff 	movabs $0xffffffffffdf7eb6,%rax
  41f3e7:	ff ff ff 
  41f3ea:	4c 89 ee             	mov    %r13,%rsi
  41f3ed:	4c 89 f7             	mov    %r14,%rdi
  41f3f0:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f3f4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41f3f9:	48 01 d8             	add    %rbx,%rax
  41f3fc:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f3fe:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41f403:	48 8b 94 24 98 00 00 	mov    0x98(%rsp),%rdx
  41f40a:	00 
  41f40b:	49 89 df             	mov    %rbx,%r15
  41f40e:	48 8b b4 24 90 00 00 	mov    0x90(%rsp),%rsi
  41f415:	00 
  41f416:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  41f41b:	48 01 d8             	add    %rbx,%rax
  41f41e:	ff d0                	callq  *%rax
  41f420:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f427:	00 
	if (!_M_is_local())
  41f428:	49 83 c6 10          	add    $0x10,%r14
  41f42c:	4c 39 f7             	cmp    %r14,%rdi
  41f42f:	74 0f                	je     41f440 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x250>
  41f431:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f438:	ff ff ff 
  41f43b:	48 01 d8             	add    %rbx,%rax
  41f43e:	ff d0                	callq  *%rax
  41f440:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f445:	49 83 c5 10          	add    $0x10,%r13
  41f449:	4c 39 ef             	cmp    %r13,%rdi
  41f44c:	74 12                	je     41f460 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x270>
  41f44e:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f455:	ff ff ff 
  41f458:	49 89 df             	mov    %rbx,%r15
  41f45b:	48 01 d8             	add    %rbx,%rax
  41f45e:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f460:	49 8d 44 24 10       	lea    0x10(%r12),%rax
	if (__str._M_is_local())
  41f465:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f46a:	49 89 04 24          	mov    %rax,(%r12)
  41f46e:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
	if (__str._M_is_local())
  41f473:	48 83 c2 10          	add    $0x10,%rdx
  41f477:	48 39 d0             	cmp    %rdx,%rax
  41f47a:	0f 84 b8 01 00 00    	je     41f638 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x448>
      { _M_dataplus._M_p = __p; }
  41f480:	49 89 04 24          	mov    %rax,(%r12)
      { _M_allocated_capacity = __capacity; }
  41f484:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41f489:	49 89 44 24 10       	mov    %rax,0x10(%r12)
      { _M_string_length = __length; }
  41f48e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41f493:	49 89 44 24 08       	mov    %rax,0x8(%r12)
  41f498:	e9 83 01 00 00       	jmpq   41f620 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x430>
  41f49d:	0f 1f 00             	nopl   (%rax)
        else if (!m_default_value.empty() && !m_default_value_as_text.empty()) {
  41f4a0:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
  41f4a5:	0f 84 4d 01 00 00    	je     41f5f8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x408>
  41f4ab:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  41f4b0:	0f 84 42 01 00 00    	je     41f5f8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x408>
	: allocator_type(__a), _M_p(__dat) { }
  41f4b6:	4c 8d 6c 24 70       	lea    0x70(%rsp),%r13
  41f4bb:	48 8b 32             	mov    (%rdx),%rsi
  41f4be:	49 8d 45 10          	lea    0x10(%r13),%rax
          _M_construct(__beg, __end, _Tag());
  41f4c2:	4c 89 ef             	mov    %r13,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  41f4c5:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41f4ca:	48 89 f0             	mov    %rsi,%rax
  41f4cd:	48 03 42 08          	add    0x8(%rdx),%rax
  41f4d1:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41f4d4:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  41f4db:	ff ff ff 
  41f4de:	48 01 d8             	add    %rbx,%rax
  41f4e1:	ff d0                	callq  *%rax
	if (this->max_size() - (this->size() - __n1) < __n2)
  41f4e3:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
  41f4ea:	ff ff 7f 
  41f4ed:	48 2b 44 24 78       	sub    0x78(%rsp),%rax
  41f4f2:	48 83 f8 02          	cmp    $0x2,%rax
  41f4f6:	0f 86 99 01 00 00    	jbe    41f695 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4a5>
	return _M_append(__s, __n);
  41f4fc:	48 b8 b9 89 df ff ff 	movabs $0xffffffffffdf89b9,%rax
  41f503:	ff ff ff 
  41f506:	ba 03 00 00 00       	mov    $0x3,%edx
  41f50b:	4c 89 ef             	mov    %r13,%rdi
  41f50e:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  41f512:	48 b8 50 e4 dd ff ff 	movabs $0xffffffffffdde450,%rax
  41f519:	ff ff ff 
  41f51c:	49 89 df             	mov    %rbx,%r15
  41f51f:	49 89 c6             	mov    %rax,%r14
  41f522:	48 01 d8             	add    %rbx,%rax
  41f525:	ff d0                	callq  *%rax
      { return _M_append(__str._M_data(), __str.size()); }
  41f527:	4c 89 f0             	mov    %r14,%rax
  41f52a:	48 8b 55 48          	mov    0x48(%rbp),%rdx
  41f52e:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  41f532:	4c 89 ef             	mov    %r13,%rdi
  41f535:	48 01 d8             	add    %rbx,%rax
  41f538:	ff d0                	callq  *%rax
	: allocator_type(__a), _M_p(__dat) { }
  41f53a:	4c 8d b4 24 90 00 00 	lea    0x90(%rsp),%r14
  41f541:	00 
  41f542:	49 8d 56 10          	lea    0x10(%r14),%rdx
  41f546:	48 89 94 24 90 00 00 	mov    %rdx,0x90(%rsp)
  41f54d:	00 
  41f54e:	48 8b 08             	mov    (%rax),%rcx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41f551:	48 8d 50 10          	lea    0x10(%rax),%rdx
	if (__str._M_is_local())
  41f555:	48 39 d1             	cmp    %rdx,%rcx
  41f558:	0f 84 fa 00 00 00    	je     41f658 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x468>
      { _M_dataplus._M_p = __p; }
  41f55e:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
  41f565:	00 
	    _M_capacity(__str._M_allocated_capacity);
  41f566:	48 8b 48 10          	mov    0x10(%rax),%rcx
      { _M_allocated_capacity = __capacity; }
  41f56a:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
  41f571:	00 
  41f572:	48 8b 48 08          	mov    0x8(%rax),%rcx
            return var + " (=" + m_default_value_as_text + ")";
  41f576:	4c 89 f6             	mov    %r14,%rsi
  41f579:	4c 89 e7             	mov    %r12,%rdi
      { _M_string_length = __length; }
  41f57c:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
  41f583:	00 
      { _M_dataplus._M_p = __p; }
  41f584:	48 89 10             	mov    %rdx,(%rax)
      { _M_string_length = __length; }
  41f587:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  41f58e:	00 
  41f58f:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  41f593:	48 b8 b6 7e df ff ff 	movabs $0xffffffffffdf7eb6,%rax
  41f59a:	ff ff ff 
  41f59d:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  41f5a1:	48 b8 c0 39 df ff ff 	movabs $0xffffffffffdf39c0,%rax
  41f5a8:	ff ff ff 
  41f5ab:	48 01 d8             	add    %rbx,%rax
  41f5ae:	ff d0                	callq  *%rax
  41f5b0:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f5b7:	00 
	if (!_M_is_local())
  41f5b8:	49 83 c6 10          	add    $0x10,%r14
  41f5bc:	4c 39 f7             	cmp    %r14,%rdi
  41f5bf:	74 12                	je     41f5d3 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x3e3>
  41f5c1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f5c8:	ff ff ff 
  41f5cb:	49 89 df             	mov    %rbx,%r15
  41f5ce:	48 01 d8             	add    %rbx,%rax
  41f5d1:	ff d0                	callq  *%rax
  41f5d3:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f5d8:	49 83 c5 10          	add    $0x10,%r13
  41f5dc:	4c 39 ef             	cmp    %r13,%rdi
  41f5df:	74 3f                	je     41f620 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x430>
  41f5e1:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f5e8:	ff ff ff 
  41f5eb:	49 89 df             	mov    %rbx,%r15
  41f5ee:	48 01 d8             	add    %rbx,%rax
  41f5f1:	ff d0                	callq  *%rax
  41f5f3:	eb 2b                	jmp    41f620 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x430>
  41f5f5:	0f 1f 00             	nopl   (%rax)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f5f8:	49 8d 44 24 10       	lea    0x10(%r12),%rax
          _M_construct(__beg, __end, _Tag());
  41f5fd:	4c 89 e7             	mov    %r12,%rdi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  41f600:	49 89 04 24          	mov    %rax,(%r12)
  41f604:	48 8b 32             	mov    (%rdx),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  41f607:	48 89 f0             	mov    %rsi,%rax
  41f60a:	48 03 42 08          	add    0x8(%rdx),%rax
  41f60e:	48 89 c2             	mov    %rax,%rdx
          _M_construct(__beg, __end, _Tag());
  41f611:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  41f618:	ff ff ff 
  41f61b:	48 01 d8             	add    %rbx,%rax
  41f61e:	ff d0                	callq  *%rax
    }
  41f620:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  41f627:	4c 89 e0             	mov    %r12,%rax
  41f62a:	5b                   	pop    %rbx
  41f62b:	5d                   	pop    %rbp
  41f62c:	41 5c                	pop    %r12
  41f62e:	41 5d                	pop    %r13
  41f630:	41 5e                	pop    %r14
  41f632:	41 5f                	pop    %r15
  41f634:	c3                   	retq   
  41f635:	0f 1f 00             	nopl   (%rax)
  41f638:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41f63d:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
  41f642:	49 89 44 24 10       	mov    %rax,0x10(%r12)
  41f647:	49 89 54 24 18       	mov    %rdx,0x18(%r12)
  41f64c:	e9 3d fe ff ff       	jmpq   41f48e <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x29e>
  41f651:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41f658:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f65c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f660:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f667:	00 
  41f668:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f66f:	00 
  41f670:	e9 fd fe ff ff       	jmpq   41f572 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x382>
  41f675:	0f 1f 00             	nopl   (%rax)
  41f678:	48 8b 70 10          	mov    0x10(%rax),%rsi
  41f67c:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41f680:	48 89 b4 24 a0 00 00 	mov    %rsi,0xa0(%rsp)
  41f687:	00 
  41f688:	48 89 bc 24 a8 00 00 	mov    %rdi,0xa8(%rsp)
  41f68f:	00 
  41f690:	e9 6e fc ff ff       	jmpq   41f303 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x113>
	  __throw_length_error(__N(__s));
  41f695:	48 b8 a1 89 df ff ff 	movabs $0xffffffffffdf89a1,%rax
  41f69c:	ff ff ff 
  41f69f:	49 89 df             	mov    %rbx,%r15
  41f6a2:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  41f6a6:	48 b8 20 e5 dd ff ff 	movabs $0xffffffffffdde520,%rax
  41f6ad:	ff ff ff 
  41f6b0:	48 01 d8             	add    %rbx,%rax
  41f6b3:	ff d0                	callq  *%rax
  41f6b5:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
	if (!_M_is_local())
  41f6ba:	49 83 c5 10          	add    $0x10,%r13
  41f6be:	48 89 c5             	mov    %rax,%rbp
  41f6c1:	4c 39 ef             	cmp    %r13,%rdi
  41f6c4:	74 12                	je     41f6d8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f6c6:	48 ba 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rdx
  41f6cd:	ff ff ff 
  41f6d0:	49 89 df             	mov    %rbx,%r15
  41f6d3:	48 01 da             	add    %rbx,%rdx
  41f6d6:	ff d2                	callq  *%rdx
  41f6d8:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  41f6df:	ff ff ff 
  41f6e2:	48 89 ef             	mov    %rbp,%rdi
  41f6e5:	49 89 df             	mov    %rbx,%r15
  41f6e8:	48 01 d8             	add    %rbx,%rax
  41f6eb:	ff d0                	callq  *%rax
  41f6ed:	48 89 c5             	mov    %rax,%rbp
  41f6f0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f6f5:	49 83 c5 10          	add    $0x10,%r13
  41f6f9:	4c 39 ef             	cmp    %r13,%rdi
  41f6fc:	74 12                	je     41f710 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x520>
  41f6fe:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f705:	ff ff ff 
  41f708:	49 89 df             	mov    %rbx,%r15
  41f70b:	48 01 d8             	add    %rbx,%rax
  41f70e:	ff d0                	callq  *%rax
  41f710:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41f715:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  41f71a:	48 83 c0 10          	add    $0x10,%rax
  41f71e:	48 39 c7             	cmp    %rax,%rdi
  41f721:	74 b5                	je     41f6d8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f723:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f72a:	ff ff ff 
  41f72d:	49 89 df             	mov    %rbx,%r15
  41f730:	48 01 d8             	add    %rbx,%rax
  41f733:	ff d0                	callq  *%rax
  41f735:	eb a1                	jmp    41f6d8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f737:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f73e:	00 
  41f73f:	49 83 c6 10          	add    $0x10,%r14
  41f743:	48 89 c5             	mov    %rax,%rbp
  41f746:	4c 39 f7             	cmp    %r14,%rdi
  41f749:	74 12                	je     41f75d <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x56d>
  41f74b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f752:	ff ff ff 
  41f755:	49 89 df             	mov    %rbx,%r15
  41f758:	48 01 d8             	add    %rbx,%rax
  41f75b:	ff d0                	callq  *%rax
  41f75d:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f762:	49 83 c5 10          	add    $0x10,%r13
  41f766:	4c 39 ef             	cmp    %r13,%rdi
  41f769:	74 12                	je     41f77d <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x58d>
  41f76b:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f772:	ff ff ff 
  41f775:	49 89 df             	mov    %rbx,%r15
  41f778:	48 01 d8             	add    %rbx,%rax
  41f77b:	ff d0                	callq  *%rax
  41f77d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41f782:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41f787:	48 83 c0 10          	add    $0x10,%rax
  41f78b:	48 39 c7             	cmp    %rax,%rdi
  41f78e:	75 93                	jne    41f723 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x533>
  41f790:	e9 43 ff ff ff       	jmpq   41f6d8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f795:	48 89 c5             	mov    %rax,%rbp
  41f798:	eb c3                	jmp    41f75d <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x56d>
  41f79a:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f7a1:	00 
  41f7a2:	49 83 c6 10          	add    $0x10,%r14
  41f7a6:	48 89 c5             	mov    %rax,%rbp
  41f7a9:	4c 39 f7             	cmp    %r14,%rdi
  41f7ac:	74 12                	je     41f7c0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x5d0>
  41f7ae:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f7b5:	ff ff ff 
  41f7b8:	49 89 df             	mov    %rbx,%r15
  41f7bb:	48 01 d8             	add    %rbx,%rax
  41f7be:	ff d0                	callq  *%rax
  41f7c0:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
  41f7c5:	49 83 c5 10          	add    $0x10,%r13
  41f7c9:	4c 39 ef             	cmp    %r13,%rdi
  41f7cc:	0f 85 51 ff ff ff    	jne    41f723 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x533>
  41f7d2:	e9 01 ff ff ff       	jmpq   41f6d8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x4e8>
  41f7d7:	48 89 c5             	mov    %rax,%rbp
  41f7da:	eb a1                	jmp    41f77d <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x58d>
  41f7dc:	48 89 c5             	mov    %rax,%rbp
  41f7df:	eb df                	jmp    41f7c0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x5d0>
  41f7e1:	48 8b bc 24 90 00 00 	mov    0x90(%rsp),%rdi
  41f7e8:	00 
  41f7e9:	49 83 c6 10          	add    $0x10,%r14
  41f7ed:	48 89 c5             	mov    %rax,%rbp
  41f7f0:	4c 39 f7             	cmp    %r14,%rdi
  41f7f3:	0f 84 f7 fe ff ff    	je     41f6f0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x500>
  41f7f9:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f800:	ff ff ff 
  41f803:	49 89 df             	mov    %rbx,%r15
  41f806:	48 01 d8             	add    %rbx,%rax
  41f809:	ff d0                	callq  *%rax
  41f80b:	e9 e0 fe ff ff       	jmpq   41f6f0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x500>
  41f810:	48 89 c5             	mov    %rax,%rbp
  41f813:	e9 f8 fe ff ff       	jmpq   41f710 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE4nameB5cxx11Ev+0x520>
  41f818:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41f81f:	00 

000000000041f820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41f820:	41 57                	push   %r15
  41f822:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 41f820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
  41f829:	41 56                	push   %r14
  41f82b:	41 55                	push   %r13
  41f82d:	41 54                	push   %r12
  41f82f:	49 bb e0 b7 20 00 00 	movabs $0x20b7e0,%r11
  41f836:	00 00 00 
  41f839:	55                   	push   %rbp
  41f83a:	53                   	push   %rbx
  41f83b:	4d 01 df             	add    %r11,%r15
  41f83e:	48 83 ec 18          	sub    $0x18,%rsp
      while (__x != 0)
  41f842:	48 85 f6             	test   %rsi,%rsi
  41f845:	0f 84 c5 00 00 00    	je     41f910 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xf0>
	  _M_erase(_S_right(__x));
  41f84b:	48 ba 20 48 df ff ff 	movabs $0xffffffffffdf4820,%rdx
  41f852:	ff ff ff 
  41f855:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  41f85c:	ff ff ff 
  41f85f:	49 89 fc             	mov    %rdi,%r12
  41f862:	4e 8d 2c 3a          	lea    (%rdx,%r15,1),%r13
  41f866:	48 ba c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rdx
  41f86d:	ff ff ff 
  41f870:	49 89 f6             	mov    %rsi,%r14
  41f873:	49 8d 04 17          	lea    (%r15,%rdx,1),%rax
  41f877:	4c 01 fb             	add    %r15,%rbx
  41f87a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41f87f:	eb 32                	jmp    41f8b3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x93>
  41f881:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            delete content;
  41f888:	49 8b 7e 40          	mov    0x40(%r14),%rdi
  41f88c:	48 85 ff             	test   %rdi,%rdi
  41f88f:	74 06                	je     41f897 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x77>
  41f891:	48 8b 17             	mov    (%rdi),%rdx
  41f894:	ff 52 08             	callq  *0x8(%rdx)
  41f897:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41f89b:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  41f89f:	48 39 d7             	cmp    %rdx,%rdi
  41f8a2:	74 02                	je     41f8a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x86>
  41f8a4:	ff d3                	callq  *%rbx
  41f8a6:	4c 89 f7             	mov    %r14,%rdi
  41f8a9:	49 89 ee             	mov    %rbp,%r14
  41f8ac:	ff d3                	callq  *%rbx
      while (__x != 0)
  41f8ae:	48 85 ed             	test   %rbp,%rbp
  41f8b1:	74 5d                	je     41f910 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xf0>
	  _M_erase(_S_right(__x));
  41f8b3:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41f8b7:	4c 89 e7             	mov    %r12,%rdi
  41f8ba:	41 ff d5             	callq  *%r13
  41f8bd:	49 8b 56 58          	mov    0x58(%r14),%rdx
  41f8c1:	49 8b 6e 10          	mov    0x10(%r14),%rbp
  41f8c5:	48 85 d2             	test   %rdx,%rdx
  41f8c8:	74 be                	je     41f888 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
        if( atomic_decrement( &use_count_ ) == 1 )
  41f8ca:	f0 83 6a 08 01       	lock subl $0x1,0x8(%rdx)
  41f8cf:	75 b7                	jne    41f888 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
            dispose();
  41f8d1:	48 8b 0a             	mov    (%rdx),%rcx
  41f8d4:	48 89 d7             	mov    %rdx,%rdi
  41f8d7:	48 89 14 24          	mov    %rdx,(%rsp)
  41f8db:	ff 51 10             	callq  *0x10(%rcx)
      { return __atomic_fetch_sub(&_M_i, __i, __m); }
  41f8de:	48 8b 14 24          	mov    (%rsp),%rdx
  41f8e2:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  41f8e7:	f0 0f c1 4a 0c       	lock xadd %ecx,0xc(%rdx)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41f8ec:	83 f9 01             	cmp    $0x1,%ecx
  41f8ef:	75 97                	jne    41f888 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
            destroy();
  41f8f1:	48 8b 0a             	mov    (%rdx),%rcx
        delete this;
  41f8f4:	48 89 d7             	mov    %rdx,%rdi
            destroy();
  41f8f7:	48 8b 71 18          	mov    0x18(%rcx),%rsi
  41f8fb:	48 3b 74 24 08       	cmp    0x8(%rsp),%rsi
  41f900:	75 1d                	jne    41f91f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xff>
        delete this;
  41f902:	ff 51 08             	callq  *0x8(%rcx)
  41f905:	eb 81                	jmp    41f888 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
  41f907:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41f90e:	00 00 
    }
  41f910:	48 83 c4 18          	add    $0x18,%rsp
  41f914:	5b                   	pop    %rbx
  41f915:	5d                   	pop    %rbp
  41f916:	41 5c                	pop    %r12
  41f918:	41 5d                	pop    %r13
  41f91a:	41 5e                	pop    %r14
  41f91c:	41 5f                	pop    %r15
  41f91e:	c3                   	retq   
            destroy();
  41f91f:	ff d6                	callq  *%rsi
  41f921:	e9 62 ff ff ff       	jmpq   41f888 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N5boost15program_options14variable_valueEESt10_Select1stISB_ESt4lessIS5_ESaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x68>
  41f926:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41f92d:	00 00 00 

000000000041f930 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41f930:	41 57                	push   %r15
  41f932:	41 56                	push   %r14
  41f934:	4c 8d 3d f5 ff ff ff 	lea    -0xb(%rip),%r15        # 41f930 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
  41f93b:	41 55                	push   %r13
  41f93d:	41 54                	push   %r12
  41f93f:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  41f946:	ff ff ff 
  41f949:	55                   	push   %rbp
  41f94a:	53                   	push   %rbx
  41f94b:	49 bb d0 b6 20 00 00 	movabs $0x20b6d0,%r11
  41f952:	00 00 00 
  41f955:	4d 01 df             	add    %r11,%r15
  41f958:	48 83 ec 58          	sub    $0x58,%rsp
      while (__x != 0)
  41f95c:	48 85 f6             	test   %rsi,%rsi
  41f95f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41f964:	48 b8 30 49 df ff ff 	movabs $0xffffffffffdf4930,%rax
  41f96b:	ff ff ff 
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  41f96e:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
	  _M_erase(_S_right(__x));
  41f973:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
      while (__x != 0)
  41f977:	0f 84 a6 02 00 00    	je     41fc23 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2f3>
  41f97d:	49 89 fe             	mov    %rdi,%r14
  41f980:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  41f985:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f989:	48 85 c0             	test   %rax,%rax
  41f98c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  41f991:	0f 84 4f 02 00 00    	je     41fbe6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2b6>
  41f997:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f99b:	48 85 c0             	test   %rax,%rax
  41f99e:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  41f9a3:	0f 84 fd 01 00 00    	je     41fba6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x276>
  41f9a9:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f9ad:	48 85 c0             	test   %rax,%rax
  41f9b0:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  41f9b5:	0f 84 ab 01 00 00    	je     41fb66 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x236>
  41f9bb:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f9bf:	48 85 c0             	test   %rax,%rax
  41f9c2:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  41f9c7:	0f 84 59 01 00 00    	je     41fb26 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1f6>
  41f9cd:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f9d1:	48 85 c0             	test   %rax,%rax
  41f9d4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41f9d9:	0f 84 07 01 00 00    	je     41fae6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1b6>
  41f9df:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f9e3:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  41f9e8:	48 85 c0             	test   %rax,%rax
  41f9eb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  41f9f0:	4a 8d 2c 3a          	lea    (%rdx,%r15,1),%rbp
  41f9f4:	0f 84 ac 00 00 00    	je     41faa6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x176>
  41f9fa:	48 8b 40 18          	mov    0x18(%rax),%rax
  41f9fe:	48 85 c0             	test   %rax,%rax
  41fa01:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41fa06:	74 6e                	je     41fa76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x146>
  41fa08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41fa0f:	00 
  41fa10:	4c 8b 68 18          	mov    0x18(%rax),%r13
  41fa14:	4d 85 ed             	test   %r13,%r13
  41fa17:	74 36                	je     41fa4f <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x11f>
  41fa19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  41fa20:	4c 89 f7             	mov    %r14,%rdi
  41fa23:	49 8b 75 18          	mov    0x18(%r13),%rsi
  41fa27:	41 ff d4             	callq  *%r12
  41fa2a:	49 8b 7d 20          	mov    0x20(%r13),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fa2e:	49 8d 45 30          	lea    0x30(%r13),%rax
  41fa32:	49 8b 5d 10          	mov    0x10(%r13),%rbx
	if (!_M_is_local())
  41fa36:	48 39 c7             	cmp    %rax,%rdi
  41fa39:	74 02                	je     41fa3d <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x10d>
  41fa3b:	ff d5                	callq  *%rbp
  41fa3d:	4c 89 ef             	mov    %r13,%rdi
  41fa40:	49 89 dd             	mov    %rbx,%r13
  41fa43:	ff d5                	callq  *%rbp
      while (__x != 0)
  41fa45:	48 85 db             	test   %rbx,%rbx
  41fa48:	75 d6                	jne    41fa20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xf0>
  41fa4a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41fa4f:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fa53:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fa57:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fa5b:	48 39 c7             	cmp    %rax,%rdi
  41fa5e:	74 02                	je     41fa62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x132>
  41fa60:	ff d5                	callq  *%rbp
  41fa62:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41fa67:	ff d5                	callq  *%rbp
  41fa69:	48 85 db             	test   %rbx,%rbx
  41fa6c:	48 89 d8             	mov    %rbx,%rax
  41fa6f:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
  41fa74:	75 9a                	jne    41fa10 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xe0>
  41fa76:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41fa7b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fa7f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fa83:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fa87:	48 39 c7             	cmp    %rax,%rdi
  41fa8a:	74 02                	je     41fa8e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x15e>
  41fa8c:	ff d5                	callq  *%rbp
  41fa8e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41fa93:	ff d5                	callq  *%rbp
  41fa95:	48 85 db             	test   %rbx,%rbx
  41fa98:	48 89 d8             	mov    %rbx,%rax
  41fa9b:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  41faa0:	0f 85 54 ff ff ff    	jne    41f9fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xca>
  41faa6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41faab:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41faaf:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fab3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fab7:	48 39 c7             	cmp    %rax,%rdi
  41faba:	74 0a                	je     41fac6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x196>
  41fabc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fac1:	4c 01 f8             	add    %r15,%rax
  41fac4:	ff d0                	callq  *%rax
  41fac6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41facb:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41fad0:	4c 01 f8             	add    %r15,%rax
  41fad3:	ff d0                	callq  *%rax
  41fad5:	48 85 db             	test   %rbx,%rbx
  41fad8:	48 89 d8             	mov    %rbx,%rax
  41fadb:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
  41fae0:	0f 85 f9 fe ff ff    	jne    41f9df <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xaf>
  41fae6:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  41faeb:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41faef:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41faf3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41faf7:	48 39 c7             	cmp    %rax,%rdi
  41fafa:	74 0a                	je     41fb06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x1d6>
  41fafc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fb01:	4c 01 f8             	add    %r15,%rax
  41fb04:	ff d0                	callq  *%rax
  41fb06:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fb0b:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41fb10:	4c 01 f8             	add    %r15,%rax
  41fb13:	ff d0                	callq  *%rax
  41fb15:	48 85 db             	test   %rbx,%rbx
  41fb18:	48 89 d8             	mov    %rbx,%rax
  41fb1b:	48 89 5c 24 28       	mov    %rbx,0x28(%rsp)
  41fb20:	0f 85 a7 fe ff ff    	jne    41f9cd <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x9d>
  41fb26:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  41fb2b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fb2f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fb33:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fb37:	48 39 c7             	cmp    %rax,%rdi
  41fb3a:	74 0a                	je     41fb46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x216>
  41fb3c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fb41:	4c 01 f8             	add    %r15,%rax
  41fb44:	ff d0                	callq  *%rax
  41fb46:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fb4b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41fb50:	4c 01 f8             	add    %r15,%rax
  41fb53:	ff d0                	callq  *%rax
  41fb55:	48 85 db             	test   %rbx,%rbx
  41fb58:	48 89 d8             	mov    %rbx,%rax
  41fb5b:	48 89 5c 24 30       	mov    %rbx,0x30(%rsp)
  41fb60:	0f 85 55 fe ff ff    	jne    41f9bb <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x8b>
  41fb66:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41fb6b:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fb6f:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fb73:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fb77:	48 39 c7             	cmp    %rax,%rdi
  41fb7a:	74 0a                	je     41fb86 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x256>
  41fb7c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fb81:	4c 01 f8             	add    %r15,%rax
  41fb84:	ff d0                	callq  *%rax
  41fb86:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fb8b:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  41fb90:	4c 01 f8             	add    %r15,%rax
  41fb93:	ff d0                	callq  *%rax
  41fb95:	48 85 db             	test   %rbx,%rbx
  41fb98:	48 89 d8             	mov    %rbx,%rax
  41fb9b:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
  41fba0:	0f 85 03 fe ff ff    	jne    41f9a9 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x79>
  41fba6:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  41fbab:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fbaf:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fbb3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fbb7:	48 39 c7             	cmp    %rax,%rdi
  41fbba:	74 0a                	je     41fbc6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x296>
  41fbbc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fbc1:	4c 01 f8             	add    %r15,%rax
  41fbc4:	ff d0                	callq  *%rax
  41fbc6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fbcb:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
  41fbd0:	4c 01 f8             	add    %r15,%rax
  41fbd3:	ff d0                	callq  *%rax
  41fbd5:	48 85 db             	test   %rbx,%rbx
  41fbd8:	48 89 d8             	mov    %rbx,%rax
  41fbdb:	48 89 5c 24 40       	mov    %rbx,0x40(%rsp)
  41fbe0:	0f 85 b1 fd ff ff    	jne    41f997 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x67>
  41fbe6:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  41fbeb:	48 8b 78 20          	mov    0x20(%rax),%rdi
  41fbef:	48 8b 58 10          	mov    0x10(%rax),%rbx
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fbf3:	48 83 c0 30          	add    $0x30,%rax
	if (!_M_is_local())
  41fbf7:	48 39 c7             	cmp    %rax,%rdi
  41fbfa:	74 0a                	je     41fc06 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x2d6>
  41fbfc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fc01:	4c 01 f8             	add    %r15,%rax
  41fc04:	ff d0                	callq  *%rax
  41fc06:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41fc0b:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  41fc10:	4c 01 f8             	add    %r15,%rax
  41fc13:	ff d0                	callq  *%rax
  41fc15:	48 85 db             	test   %rbx,%rbx
  41fc18:	48 89 5c 24 48       	mov    %rbx,0x48(%rsp)
  41fc1d:	0f 85 5d fd ff ff    	jne    41f980 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St9_IdentityIS5_ESt4lessIS5_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x50>
    }
  41fc23:	48 83 c4 58          	add    $0x58,%rsp
  41fc27:	5b                   	pop    %rbx
  41fc28:	5d                   	pop    %rbp
  41fc29:	41 5c                	pop    %r12
  41fc2b:	41 5d                	pop    %r13
  41fc2d:	41 5e                	pop    %r14
  41fc2f:	41 5f                	pop    %r15
  41fc31:	c3                   	retq   
  41fc32:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41fc39:	00 00 00 
  41fc3c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041fc40 <_ZN5boost15program_options13variables_mapD0Ev>:
    /** Concrete variables map which store variables in real map.

        This class is derived from std::map<std::string, variable_value>,
        so you can use all map operators to examine its content.
    */
    class BOOST_PROGRAM_OPTIONS_DECL variables_map : public abstract_variables_map,
  41fc40:	41 57                	push   %r15
  41fc42:	41 56                	push   %r14
  41fc44:	49 bb c0 b3 20 00 00 	movabs $0x20b3c0,%r11
  41fc4b:	00 00 00 
  41fc4e:	41 55                	push   %r13
  41fc50:	41 54                	push   %r12
  41fc52:	48 b8 d0 ff ff ff ff 	movabs $0xffffffffffffffd0,%rax
  41fc59:	ff ff ff 
  41fc5c:	55                   	push   %rbp
  41fc5d:	53                   	push   %rbx
  41fc5e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 41fc40 <_ZN5boost15program_options13variables_mapD0Ev>
  41fc65:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  41fc6c:	ff ff ff 
	  _M_erase(_S_right(__x));
  41fc6f:	48 ba 50 c5 de ff ff 	movabs $0xffffffffffdec550,%rdx
  41fc76:	ff ff ff 
  41fc79:	4c 01 db             	add    %r11,%rbx
  41fc7c:	48 83 ec 28          	sub    $0x28,%rsp
  41fc80:	4c 8b b7 80 00 00 00 	mov    0x80(%rdi),%r14
  41fc87:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  41fc8b:	48 01 dd             	add    %rbx,%rbp
  41fc8e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  41fc93:	4c 8d 2c 1a          	lea    (%rdx,%rbx,1),%r13
  41fc97:	48 83 c0 10          	add    $0x10,%rax
      while (__x != 0)
  41fc9b:	4d 85 f6             	test   %r14,%r14
  41fc9e:	48 89 07             	mov    %rax,(%rdi)
    class map
  41fca1:	48 8d 47 70          	lea    0x70(%rdi),%rax
  41fca5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41fcaa:	74 48                	je     41fcf4 <_ZN5boost15program_options13variables_mapD0Ev+0xb4>
  41fcac:	0f 1f 40 00          	nopl   0x0(%rax)
	  _M_erase(_S_right(__x));
  41fcb0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41fcb5:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41fcb9:	41 ff d5             	callq  *%r13
  41fcbc:	49 8b 7e 40          	mov    0x40(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fcc0:	49 8d 56 50          	lea    0x50(%r14),%rdx
  41fcc4:	4d 8b 66 10          	mov    0x10(%r14),%r12
	if (!_M_is_local())
  41fcc8:	48 39 d7             	cmp    %rdx,%rdi
  41fccb:	74 05                	je     41fcd2 <_ZN5boost15program_options13variables_mapD0Ev+0x92>
  41fccd:	49 89 df             	mov    %rbx,%r15
  41fcd0:	ff d5                	callq  *%rbp
  41fcd2:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fcd6:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  41fcda:	48 39 d7             	cmp    %rdx,%rdi
  41fcdd:	74 05                	je     41fce4 <_ZN5boost15program_options13variables_mapD0Ev+0xa4>
  41fcdf:	49 89 df             	mov    %rbx,%r15
  41fce2:	ff d5                	callq  *%rbp
  41fce4:	4c 89 f7             	mov    %r14,%rdi
  41fce7:	49 89 df             	mov    %rbx,%r15
  41fcea:	4d 89 e6             	mov    %r12,%r14
  41fced:	ff d5                	callq  *%rbp
      while (__x != 0)
  41fcef:	4d 85 e4             	test   %r12,%r12
  41fcf2:	75 bc                	jne    41fcb0 <_ZN5boost15program_options13variables_mapD0Ev+0x70>
    class set
  41fcf4:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41fcf9:	48 8d 48 40          	lea    0x40(%rax),%rcx
  41fcfd:	48 8b 40 50          	mov    0x50(%rax),%rax
  41fd01:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41fd06:	48 85 c0             	test   %rax,%rax
  41fd09:	74 57                	je     41fd62 <_ZN5boost15program_options13variables_mapD0Ev+0x122>
  41fd0b:	48 ba 30 49 df ff ff 	movabs $0xffffffffffdf4930,%rdx
  41fd12:	ff ff ff 
  41fd15:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  41fd1c:	ff ff ff 
  41fd1f:	49 89 c6             	mov    %rax,%r14
	  _M_erase(_S_right(__x));
  41fd22:	4c 8d 2c 1a          	lea    (%rdx,%rbx,1),%r13
  41fd26:	48 01 dd             	add    %rbx,%rbp
  41fd29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41fd30:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41fd35:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41fd39:	41 ff d5             	callq  *%r13
  41fd3c:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fd40:	49 8d 56 30          	lea    0x30(%r14),%rdx
  41fd44:	4d 8b 66 10          	mov    0x10(%r14),%r12
	if (!_M_is_local())
  41fd48:	48 39 d7             	cmp    %rdx,%rdi
  41fd4b:	74 05                	je     41fd52 <_ZN5boost15program_options13variables_mapD0Ev+0x112>
  41fd4d:	49 89 df             	mov    %rbx,%r15
  41fd50:	ff d5                	callq  *%rbp
  41fd52:	4c 89 f7             	mov    %r14,%rdi
  41fd55:	49 89 df             	mov    %rbx,%r15
  41fd58:	4d 89 e6             	mov    %r12,%r14
  41fd5b:	ff d5                	callq  *%rbp
      while (__x != 0)
  41fd5d:	4d 85 e4             	test   %r12,%r12
  41fd60:	75 ce                	jne    41fd30 <_ZN5boost15program_options13variables_mapD0Ev+0xf0>
  41fd62:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41fd67:	48 8d 48 10          	lea    0x10(%rax),%rcx
  41fd6b:	48 8b 40 20          	mov    0x20(%rax),%rax
  41fd6f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  41fd74:	48 85 c0             	test   %rax,%rax
  41fd77:	0f 84 b3 00 00 00    	je     41fe30 <_ZN5boost15program_options13variables_mapD0Ev+0x1f0>
  41fd7d:	48 ba 20 48 df ff ff 	movabs $0xffffffffffdf4820,%rdx
  41fd84:	ff ff ff 
  41fd87:	49 89 c6             	mov    %rax,%r14
  41fd8a:	48 bd 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbp
  41fd91:	ff ff ff 
	  _M_erase(_S_right(__x));
  41fd94:	4c 8d 2c 1a          	lea    (%rdx,%rbx,1),%r13
  41fd98:	48 ba c0 80 de ff ff 	movabs $0xffffffffffde80c0,%rdx
  41fd9f:	ff ff ff 
  41fda2:	48 01 dd             	add    %rbx,%rbp
  41fda5:	48 8d 04 13          	lea    (%rbx,%rdx,1),%rax
  41fda9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  41fdae:	eb 31                	jmp    41fde1 <_ZN5boost15program_options13variables_mapD0Ev+0x1a1>
  41fdb0:	49 8b 7e 40          	mov    0x40(%r14),%rdi
  41fdb4:	48 85 ff             	test   %rdi,%rdi
  41fdb7:	74 06                	je     41fdbf <_ZN5boost15program_options13variables_mapD0Ev+0x17f>
  41fdb9:	48 8b 17             	mov    (%rdi),%rdx
  41fdbc:	ff 52 08             	callq  *0x8(%rdx)
  41fdbf:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fdc3:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  41fdc7:	48 39 d7             	cmp    %rdx,%rdi
  41fdca:	74 05                	je     41fdd1 <_ZN5boost15program_options13variables_mapD0Ev+0x191>
  41fdcc:	49 89 df             	mov    %rbx,%r15
  41fdcf:	ff d5                	callq  *%rbp
  41fdd1:	4c 89 f7             	mov    %r14,%rdi
  41fdd4:	49 89 df             	mov    %rbx,%r15
  41fdd7:	4d 89 e6             	mov    %r12,%r14
  41fdda:	ff d5                	callq  *%rbp
      while (__x != 0)
  41fddc:	4d 85 e4             	test   %r12,%r12
  41fddf:	74 4f                	je     41fe30 <_ZN5boost15program_options13variables_mapD0Ev+0x1f0>
	  _M_erase(_S_right(__x));
  41fde1:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41fde5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41fdea:	41 ff d5             	callq  *%r13
  41fded:	4d 8b 7e 58          	mov    0x58(%r14),%r15
  41fdf1:	4d 8b 66 10          	mov    0x10(%r14),%r12
  41fdf5:	4d 85 ff             	test   %r15,%r15
  41fdf8:	74 b6                	je     41fdb0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
        if( atomic_decrement( &use_count_ ) == 1 )
  41fdfa:	f0 41 83 6f 08 01    	lock subl $0x1,0x8(%r15)
  41fe00:	75 ae                	jne    41fdb0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
            dispose();
  41fe02:	49 8b 17             	mov    (%r15),%rdx
  41fe05:	4c 89 ff             	mov    %r15,%rdi
  41fe08:	ff 52 10             	callq  *0x10(%rdx)
        if( atomic_decrement( &weak_count_ ) == 1 )
  41fe0b:	f0 41 83 6f 0c 01    	lock subl $0x1,0xc(%r15)
  41fe11:	75 9d                	jne    41fdb0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
            destroy();
  41fe13:	49 8b 17             	mov    (%r15),%rdx
        delete this;
  41fe16:	4c 89 ff             	mov    %r15,%rdi
            destroy();
  41fe19:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  41fe1d:	48 3b 4c 24 18       	cmp    0x18(%rsp),%rcx
  41fe22:	75 33                	jne    41fe57 <_ZN5boost15program_options13variables_mapD0Ev+0x217>
        delete this;
  41fe24:	ff 52 08             	callq  *0x8(%rdx)
  41fe27:	eb 87                	jmp    41fdb0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
  41fe29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41fe30:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  41fe35:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  41fe3c:	ff ff ff 
  41fe3f:	48 83 c4 28          	add    $0x28,%rsp
  41fe43:	48 01 d8             	add    %rbx,%rax
  41fe46:	be a0 00 00 00       	mov    $0xa0,%esi
  41fe4b:	5b                   	pop    %rbx
  41fe4c:	5d                   	pop    %rbp
  41fe4d:	41 5c                	pop    %r12
  41fe4f:	41 5d                	pop    %r13
  41fe51:	41 5e                	pop    %r14
  41fe53:	41 5f                	pop    %r15
  41fe55:	ff e0                	jmpq   *%rax
            destroy();
  41fe57:	ff d1                	callq  *%rcx
  41fe59:	e9 52 ff ff ff       	jmpq   41fdb0 <_ZN5boost15program_options13variables_mapD0Ev+0x170>
  41fe5e:	66 90                	xchg   %ax,%ax

000000000041fe60 <_ZN5boost15program_options13variables_mapD1Ev>:
  41fe60:	41 57                	push   %r15
  41fe62:	4c 8d 3d f7 ff ff ff 	lea    -0x9(%rip),%r15        # 41fe60 <_ZN5boost15program_options13variables_mapD1Ev>
  41fe69:	41 56                	push   %r14
  41fe6b:	49 bb a0 b1 20 00 00 	movabs $0x20b1a0,%r11
  41fe72:	00 00 00 
  41fe75:	41 55                	push   %r13
  41fe77:	41 54                	push   %r12
  41fe79:	55                   	push   %rbp
  41fe7a:	53                   	push   %rbx
  41fe7b:	4d 01 df             	add    %r11,%r15
  41fe7e:	48 b8 d0 ff ff ff ff 	movabs $0xffffffffffffffd0,%rax
  41fe85:	ff ff ff 
  41fe88:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  41fe8f:	ff ff ff 
  41fe92:	48 ba 50 c5 de ff ff 	movabs $0xffffffffffdec550,%rdx
  41fe99:	ff ff ff 
  41fe9c:	48 83 ec 18          	sub    $0x18,%rsp
  41fea0:	49 8b 04 07          	mov    (%r15,%rax,1),%rax
  41fea4:	4c 8b b7 80 00 00 00 	mov    0x80(%rdi),%r14
  41feab:	4c 01 fb             	add    %r15,%rbx
  41feae:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  41feb3:	4e 8d 24 3a          	lea    (%rdx,%r15,1),%r12
  41feb7:	4c 8d 6f 70          	lea    0x70(%rdi),%r13
  41febb:	48 83 c0 10          	add    $0x10,%rax
      while (__x != 0)
  41febf:	4d 85 f6             	test   %r14,%r14
  41fec2:	48 89 07             	mov    %rax,(%rdi)
  41fec5:	74 42                	je     41ff09 <_ZN5boost15program_options13variables_mapD1Ev+0xa9>
  41fec7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41fece:	00 00 
	  _M_erase(_S_right(__x));
  41fed0:	4c 89 ef             	mov    %r13,%rdi
  41fed3:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41fed7:	41 ff d4             	callq  *%r12
  41feda:	49 8b 7e 40          	mov    0x40(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fede:	49 8d 56 50          	lea    0x50(%r14),%rdx
  41fee2:	49 8b 6e 10          	mov    0x10(%r14),%rbp
	if (!_M_is_local())
  41fee6:	48 39 d7             	cmp    %rdx,%rdi
  41fee9:	74 02                	je     41feed <_ZN5boost15program_options13variables_mapD1Ev+0x8d>
  41feeb:	ff d3                	callq  *%rbx
  41feed:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41fef1:	49 8d 56 30          	lea    0x30(%r14),%rdx
	if (!_M_is_local())
  41fef5:	48 39 d7             	cmp    %rdx,%rdi
  41fef8:	74 02                	je     41fefc <_ZN5boost15program_options13variables_mapD1Ev+0x9c>
  41fefa:	ff d3                	callq  *%rbx
  41fefc:	4c 89 f7             	mov    %r14,%rdi
  41feff:	49 89 ee             	mov    %rbp,%r14
  41ff02:	ff d3                	callq  *%rbx
      while (__x != 0)
  41ff04:	48 85 ed             	test   %rbp,%rbp
  41ff07:	75 c7                	jne    41fed0 <_ZN5boost15program_options13variables_mapD1Ev+0x70>
  41ff09:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41ff0e:	4c 8d 60 40          	lea    0x40(%rax),%r12
  41ff12:	48 8b 40 50          	mov    0x50(%rax),%rax
  41ff16:	48 85 c0             	test   %rax,%rax
  41ff19:	74 4f                	je     41ff6a <_ZN5boost15program_options13variables_mapD1Ev+0x10a>
  41ff1b:	48 ba 30 49 df ff ff 	movabs $0xffffffffffdf4930,%rdx
  41ff22:	ff ff ff 
  41ff25:	48 bb 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rbx
  41ff2c:	ff ff ff 
  41ff2f:	49 89 c6             	mov    %rax,%r14
	  _M_erase(_S_right(__x));
  41ff32:	4e 8d 2c 3a          	lea    (%rdx,%r15,1),%r13
  41ff36:	4c 01 fb             	add    %r15,%rbx
  41ff39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  41ff40:	4c 89 e7             	mov    %r12,%rdi
  41ff43:	49 8b 76 18          	mov    0x18(%r14),%rsi
  41ff47:	41 ff d5             	callq  *%r13
  41ff4a:	49 8b 7e 20          	mov    0x20(%r14),%rdi
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
  41ff4e:	49 8d 56 30          	lea    0x30(%r14),%rdx
  41ff52:	49 8b 6e 10          	mov    0x10(%r14),%rbp
	if (!_M_is_local())
  41ff56:	48 39 d7             	cmp    %rdx,%rdi
  41ff59:	74 02                	je     41ff5d <_ZN5boost15program_options13variables_mapD1Ev+0xfd>
  41ff5b:	ff d3                	callq  *%rbx
  41ff5d:	4c 89 f7             	mov    %r14,%rdi
  41ff60:	49 89 ee             	mov    %rbp,%r14
  41ff63:	ff d3                	callq  *%rbx
      while (__x != 0)
  41ff65:	48 85 ed             	test   %rbp,%rbp
  41ff68:	75 d6                	jne    41ff40 <_ZN5boost15program_options13variables_mapD1Ev+0xe0>
      { _M_erase(_M_begin()); }
  41ff6a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41ff6f:	48 8b 70 20          	mov    0x20(%rax),%rsi
  41ff73:	48 8d 78 10          	lea    0x10(%rax),%rdi
  41ff77:	48 83 c4 18          	add    $0x18,%rsp
  41ff7b:	48 b8 20 48 df ff ff 	movabs $0xffffffffffdf4820,%rax
  41ff82:	ff ff ff 
  41ff85:	5b                   	pop    %rbx
  41ff86:	4c 01 f8             	add    %r15,%rax
  41ff89:	5d                   	pop    %rbp
  41ff8a:	41 5c                	pop    %r12
  41ff8c:	41 5d                	pop    %r13
  41ff8e:	41 5e                	pop    %r14
  41ff90:	41 5f                	pop    %r15
  41ff92:	ff e0                	jmpq   *%rax
  41ff94:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41ff9b:	00 00 00 
  41ff9e:	66 90                	xchg   %ax,%ax

000000000041ffa0 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_>:
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  41ffa0:	41 57                	push   %r15
  41ffa2:	41 56                	push   %r14
  41ffa4:	49 bb 60 b0 20 00 00 	movabs $0x20b060,%r11
  41ffab:	00 00 00 
  41ffae:	41 55                	push   %r13
  41ffb0:	41 54                	push   %r12
  41ffb2:	49 89 fd             	mov    %rdi,%r13
  41ffb5:	55                   	push   %rbp
  41ffb6:	53                   	push   %rbx
  41ffb7:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 41ffa0 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_>
    throw enable_current_exception(enable_error_info(e));
  41ffbe:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  41ffc5:	ff ff ff 
  41ffc8:	bf 40 00 00 00       	mov    $0x40,%edi
  41ffcd:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  41ffd0:	48 83 ec 48          	sub    $0x48,%rsp
    throw enable_current_exception(enable_error_info(e));
  41ffd4:	49 89 df             	mov    %rbx,%r15
  41ffd7:	48 01 d8             	add    %rbx,%rax
class bad_function_call : public std::runtime_error
  41ffda:	49 89 e4             	mov    %rsp,%r12
  41ffdd:	ff d0                	callq  *%rax
  41ffdf:	4c 89 ee             	mov    %r13,%rsi
  41ffe2:	49 bd 60 e8 dd ff ff 	movabs $0xffffffffffdde860,%r13
  41ffe9:	ff ff ff 
  41ffec:	48 89 c5             	mov    %rax,%rbp
  41ffef:	49 01 dd             	add    %rbx,%r13
  41fff2:	48 89 e7             	mov    %rsp,%rdi
  41fff5:	41 ff d5             	callq  *%r13
                T(x)
  41fff8:	48 b8 d0 f2 ff ff ff 	movabs $0xfffffffffffff2d0,%rax
  41ffff:	ff ff ff 
  420002:	48 89 ef             	mov    %rbp,%rdi
                px_(0)
  420005:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
  42000c:	00 00 
                T(x)
  42000e:	48 01 d8             	add    %rbx,%rax
            throw_line_(-1)
  420011:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
  420018:	00 00 
  42001a:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
  420021:	00 00 
                T(x)
  420023:	48 89 04 24          	mov    %rax,(%rsp)
  420027:	48 83 c0 28          	add    $0x28,%rax
            throw_line_(-1)
  42002b:	c7 44 24 30 ff ff ff 	movl   $0xffffffff,0x30(%rsp)
  420032:	ff 
                T(x)
  420033:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
        clone_base
  420038:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  42003f:	ff ff ff 
  420042:	48 89 e6             	mov    %rsp,%rsi
  420045:	48 01 d8             	add    %rbx,%rax
  420048:	48 89 45 38          	mov    %rax,0x38(%rbp)
  42004c:	41 ff d5             	callq  *%r13
  42004f:	49 bd 08 fa ff ff ff 	movabs $0xfffffffffffffa08,%r13
  420056:	ff ff ff 
                px_(x.px_)
  420059:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  42005e:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  420063:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  420067:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  42006e:	ff ff ff 
                px_(x.px_)
  420071:	48 89 7d 18          	mov    %rdi,0x18(%rbp)
    exception
  420075:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  420078:	48 85 ff             	test   %rdi,%rdi
    exception
  42007b:	48 89 45 10          	mov    %rax,0x10(%rbp)
                if( px_ )
  42007f:	74 06                	je     420087 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_+0xe7>
                    px_->add_ref();
  420081:	48 8b 07             	mov    (%rdi),%rax
  420084:	ff 50 18             	callq  *0x18(%rax)
    exception
  420087:	8b 44 24 30          	mov    0x30(%rsp),%eax
                copy_boost_exception(this,&x);
  42008b:	49 8d 74 24 10       	lea    0x10(%r12),%rsi
  420090:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
    exception
  420094:	66 0f 6f 44 24 20    	movdqa 0x20(%rsp),%xmm0
  42009a:	89 45 30             	mov    %eax,0x30(%rbp)
                T(x)
  42009d:	48 b8 20 f3 ff ff ff 	movabs $0xfffffffffffff320,%rax
  4200a4:	ff ff ff 
  4200a7:	48 01 d8             	add    %rbx,%rax
  4200aa:	48 8d 50 38          	lea    0x38(%rax),%rdx
  4200ae:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4200b2:	48 83 c0 70          	add    $0x70,%rax
  4200b6:	48 89 45 38          	mov    %rax,0x38(%rbp)
                copy_boost_exception(this,&x);
  4200ba:	48 b8 80 a5 de ff ff 	movabs $0xffffffffffdea580,%rax
  4200c1:	ff ff ff 
    exception
  4200c4:	0f 11 45 20          	movups %xmm0,0x20(%rbp)
                T(x)
  4200c8:	48 89 55 10          	mov    %rdx,0x10(%rbp)
                copy_boost_exception(this,&x);
  4200cc:	48 01 d8             	add    %rbx,%rax
  4200cf:	ff d0                	callq  *%rax
  4200d1:	48 b8 40 8e de ff ff 	movabs $0xffffffffffde8e40,%rax
  4200d8:	ff ff ff 
  4200db:	4c 89 e7             	mov    %r12,%rdi
  4200de:	49 89 df             	mov    %rbx,%r15
  4200e1:	48 01 d8             	add    %rbx,%rax
  4200e4:	ff d0                	callq  *%rax
  4200e6:	48 b8 50 9f de ff ff 	movabs $0xffffffffffde9f50,%rax
  4200ed:	ff ff ff 
  4200f0:	48 89 ef             	mov    %rbp,%rdi
  4200f3:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4200f7:	48 b8 78 f1 ff ff ff 	movabs $0xfffffffffffff178,%rax
  4200fe:	ff ff ff 
  420101:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  420105:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  42010c:	ff ff ff 
  42010f:	48 01 d8             	add    %rbx,%rax
  420112:	ff d0                	callq  *%rax
  420114:	49 8d 54 1d 00       	lea    0x0(%r13,%rbx,1),%rdx
  420119:	49 89 c6             	mov    %rax,%r14
  42011c:	48 89 ef             	mov    %rbp,%rdi
  42011f:	4d 89 f5             	mov    %r14,%r13
  420122:	49 89 df             	mov    %rbx,%r15
  420125:	48 89 55 00          	mov    %rdx,0x0(%rbp)
  420129:	48 ba 80 e7 dd ff ff 	movabs $0xffffffffffdde780,%rdx
  420130:	ff ff ff 
  420133:	48 01 da             	add    %rbx,%rdx
  420136:	ff d2                	callq  *%rdx
  420138:	48 b8 40 8e de ff ff 	movabs $0xffffffffffde8e40,%rax
  42013f:	ff ff ff 
  420142:	4c 89 e7             	mov    %r12,%rdi
  420145:	49 89 df             	mov    %rbx,%r15
  420148:	48 01 d8             	add    %rbx,%rax
  42014b:	ff d0                	callq  *%rax
  42014d:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  420154:	ff ff ff 
  420157:	48 89 ef             	mov    %rbp,%rdi
  42015a:	48 01 d8             	add    %rbx,%rax
  42015d:	ff d0                	callq  *%rax
  42015f:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  420166:	ff ff ff 
  420169:	4c 89 ef             	mov    %r13,%rdi
  42016c:	48 01 d8             	add    %rbx,%rax
  42016f:	ff d0                	callq  *%rax
  420171:	49 89 c5             	mov    %rax,%r13
                T(x)
  420174:	48 b8 40 8e de ff ff 	movabs $0xffffffffffde8e40,%rax
  42017b:	ff ff ff 
  42017e:	48 89 ef             	mov    %rbp,%rdi
  420181:	48 01 d8             	add    %rbx,%rax
  420184:	ff d0                	callq  *%rax
  420186:	eb b0                	jmp    420138 <_ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_+0x198>
  420188:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42018f:	00 

0000000000420190 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE>:
    typed_value<T, charT>::notify(const boost::any& value_store) const
  420190:	41 57                	push   %r15
  420192:	41 54                	push   %r12
  420194:	49 bb 70 ae 20 00 00 	movabs $0x20ae70,%r11
  42019b:	00 00 00 
  42019e:	55                   	push   %rbp
  42019f:	53                   	push   %rbx
  4201a0:	48 89 fd             	mov    %rdi,%rbp
  4201a3:	48 8d 1d e6 ff ff ff 	lea    -0x1a(%rip),%rbx        # 420190 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE>
  4201aa:	49 89 f4             	mov    %rsi,%r12
  4201ad:	48 83 ec 08          	sub    $0x8,%rsp
            return content ? content->type() : boost::typeindex::type_id<void>().type_info();
  4201b1:	48 8b 3e             	mov    (%rsi),%rdi
  4201b4:	4c 01 db             	add    %r11,%rbx
  4201b7:	48 85 ff             	test   %rdi,%rdi
  4201ba:	0f 84 a8 00 00 00    	je     420268 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xd8>
  4201c0:	48 8b 07             	mov    (%rdi),%rax
  4201c3:	48 ba 40 82 de ff ff 	movabs $0xffffffffffde8240,%rdx
  4201ca:	ff ff ff 
  4201cd:	48 01 da             	add    %rbx,%rdx
  4201d0:	48 8b 40 10          	mov    0x10(%rax),%rax
  4201d4:	48 39 d0             	cmp    %rdx,%rax
  4201d7:	0f 85 bb 00 00 00    	jne    420298 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x108>
  4201dd:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  4201e4:	ff ff ff 
  4201e7:	48 8b 04 1a          	mov    (%rdx,%rbx,1),%rax
  4201eb:	48 8b 78 08          	mov    0x8(%rax),%rdi
  4201ef:	48 8b 04 1a          	mov    (%rdx,%rbx,1),%rax
  4201f3:	48 8b 70 08          	mov    0x8(%rax),%rsi
	: __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    {
      return ((__name == __arg.__name)
	      || (__name[0] != '*' &&
  4201f7:	48 39 f7             	cmp    %rsi,%rdi
  4201fa:	74 5c                	je     420258 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xc8>
  4201fc:	80 3f 2a             	cmpb   $0x2a,(%rdi)
  4201ff:	74 16                	je     420217 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x87>
		  __builtin_strcmp (__name, __arg.__name) == 0));
  420201:	48 b8 c0 e8 dd ff ff 	movabs $0xffffffffffdde8c0,%rax
  420208:	ff ff ff 
  42020b:	49 89 df             	mov    %rbx,%r15
  42020e:	48 01 d8             	add    %rbx,%rax
  420211:	ff d0                	callq  *%rax
	      || (__name[0] != '*' &&
  420213:	85 c0                	test   %eax,%eax
  420215:	74 41                	je     420258 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xc8>

    template<typename ValueType>
    ValueType * any_cast(any * operand) BOOST_NOEXCEPT
    {
        return operand && operand->type() == boost::typeindex::type_id<ValueType>()
            ? boost::addressof(
  420217:	31 f6                	xor    %esi,%esi
        if (m_store_to) {
  420219:	48 8b 45 10          	mov    0x10(%rbp),%rax
  42021d:	48 85 c0             	test   %rax,%rax
  420220:	74 08                	je     42022a <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x9a>
            *m_store_to = *value;
  420222:	f3 0f 10 06          	movss  (%rsi),%xmm0
  420226:	f3 0f 11 00          	movss  %xmm0,(%rax)
  42022a:	48 8b 85 90 00 00 00 	mov    0x90(%rbp),%rax
      { return (this->empty())? 0 : &dummy::nonnull; }
  420231:	48 85 c0             	test   %rax,%rax
  420234:	74 52                	je     420288 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0xf8>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  420236:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
      return get_vtable()->invoker
  42023a:	48 8d bd 98 00 00 00 	lea    0x98(%rbp),%rdi
               (this->functor BOOST_FUNCTION_COMMA BOOST_FUNCTION_ARGS);
  420241:	48 8b 40 08          	mov    0x8(%rax),%rax
    }
  420245:	48 83 c4 08          	add    $0x8,%rsp
  420249:	5b                   	pop    %rbx
  42024a:	5d                   	pop    %rbp
  42024b:	41 5c                	pop    %r12
  42024d:	41 5f                	pop    %r15
  42024f:	ff e0                	jmpq   *%rax
  420251:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  420258:	49 8b 34 24          	mov    (%r12),%rsi
  42025c:	48 83 c6 08          	add    $0x8,%rsi
  420260:	eb b7                	jmp    420219 <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x89>
  420262:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            return content ? content->type() : boost::typeindex::type_id<void>().type_info();
  420268:	48 b8 a0 ff ff ff ff 	movabs $0xffffffffffffffa0,%rax
  42026f:	ff ff ff 
  420272:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  420279:	ff ff ff 
  42027c:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  420280:	e9 66 ff ff ff       	jmpq   4201eb <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x5b>
  420285:	0f 1f 00             	nopl   (%rax)
  420288:	48 83 c4 08          	add    $0x8,%rsp
  42028c:	5b                   	pop    %rbx
  42028d:	5d                   	pop    %rbp
  42028e:	41 5c                	pop    %r12
  420290:	41 5f                	pop    %r15
  420292:	c3                   	retq   
  420293:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  420298:	ff d0                	callq  *%rax
  42029a:	48 ba b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rdx
  4202a1:	ff ff ff 
  4202a4:	e9 42 ff ff ff       	jmpq   4201eb <_ZNK5boost15program_options11typed_valueIfcE6notifyERKNS_3anyE+0x5b>
  4202a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004202b0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE>:
    typed_value<T, charT>::notify(const boost::any& value_store) const
  4202b0:	41 57                	push   %r15
  4202b2:	41 54                	push   %r12
  4202b4:	49 bb 50 ad 20 00 00 	movabs $0x20ad50,%r11
  4202bb:	00 00 00 
  4202be:	55                   	push   %rbp
  4202bf:	53                   	push   %rbx
  4202c0:	48 89 fd             	mov    %rdi,%rbp
  4202c3:	48 8d 1d e6 ff ff ff 	lea    -0x1a(%rip),%rbx        # 4202b0 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE>
  4202ca:	49 89 f4             	mov    %rsi,%r12
  4202cd:	48 83 ec 08          	sub    $0x8,%rsp
  4202d1:	48 8b 3e             	mov    (%rsi),%rdi
  4202d4:	4c 01 db             	add    %r11,%rbx
  4202d7:	48 85 ff             	test   %rdi,%rdi
  4202da:	0f 84 b0 00 00 00    	je     420390 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xe0>
  4202e0:	48 8b 07             	mov    (%rdi),%rax
  4202e3:	48 ba 40 82 de ff ff 	movabs $0xffffffffffde8240,%rdx
  4202ea:	ff ff ff 
  4202ed:	48 01 da             	add    %rbx,%rdx
  4202f0:	48 8b 40 10          	mov    0x10(%rax),%rax
  4202f4:	48 39 d0             	cmp    %rdx,%rax
  4202f7:	0f 85 bb 00 00 00    	jne    4203b8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x108>
  4202fd:	48 b8 b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rax
  420304:	ff ff ff 
  420307:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  42030b:	48 8b 70 08          	mov    0x8(%rax),%rsi
  42030f:	48 b8 20 91 df ff ff 	movabs $0xffffffffffdf9120,%rax
  420316:	ff ff ff 
  420319:	48 8d 3c 03          	lea    (%rbx,%rax,1),%rdi
  42031d:	48 39 fe             	cmp    %rdi,%rsi
  420320:	74 5e                	je     420380 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xd0>
  420322:	80 3e 2a             	cmpb   $0x2a,(%rsi)
  420325:	74 09                	je     420330 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x80>
		  __builtin_strcmp (__name, __arg.__name) == 0));
  420327:	b9 35 00 00 00       	mov    $0x35,%ecx
	      || (__name[0] != '*' &&
  42032c:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
  42032e:	74 50                	je     420380 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xd0>
            ? boost::addressof(
  420330:	45 31 e4             	xor    %r12d,%r12d
        if (m_store_to) {
  420333:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  420337:	48 85 ff             	test   %rdi,%rdi
  42033a:	74 15                	je     420351 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xa1>
	this->_M_assign(__str);
  42033c:	48 b8 30 e5 dd ff ff 	movabs $0xffffffffffdde530,%rax
  420343:	ff ff ff 
  420346:	4c 89 e6             	mov    %r12,%rsi
  420349:	49 89 df             	mov    %rbx,%r15
  42034c:	48 01 d8             	add    %rbx,%rax
  42034f:	ff d0                	callq  *%rax
  420351:	48 8b 85 90 00 00 00 	mov    0x90(%rbp),%rax
      { return (this->empty())? 0 : &dummy::nonnull; }
  420358:	48 85 c0             	test   %rax,%rax
  42035b:	74 4b                	je     4203a8 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0xf8>
               reinterpret_cast<std::size_t>(vtable) & ~static_cast<std::size_t>(0x01));
  42035d:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
      return get_vtable()->invoker
  420361:	48 8d bd 98 00 00 00 	lea    0x98(%rbp),%rdi
               (this->functor BOOST_FUNCTION_COMMA BOOST_FUNCTION_ARGS);
  420368:	4c 89 e6             	mov    %r12,%rsi
  42036b:	48 8b 40 08          	mov    0x8(%rax),%rax
    }
  42036f:	48 83 c4 08          	add    $0x8,%rsp
  420373:	5b                   	pop    %rbx
  420374:	5d                   	pop    %rbp
  420375:	41 5c                	pop    %r12
  420377:	41 5f                	pop    %r15
  420379:	ff e0                	jmpq   *%rax
  42037b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  420380:	4d 8b 24 24          	mov    (%r12),%r12
  420384:	49 83 c4 08          	add    $0x8,%r12
  420388:	eb a9                	jmp    420333 <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x83>
  42038a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            return content ? content->type() : boost::typeindex::type_id<void>().type_info();
  420390:	48 b8 a0 ff ff ff ff 	movabs $0xffffffffffffffa0,%rax
  420397:	ff ff ff 
  42039a:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  42039e:	e9 68 ff ff ff       	jmpq   42030b <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x5b>
  4203a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4203a8:	48 83 c4 08          	add    $0x8,%rsp
  4203ac:	5b                   	pop    %rbx
  4203ad:	5d                   	pop    %rbp
  4203ae:	41 5c                	pop    %r12
  4203b0:	41 5f                	pop    %r15
  4203b2:	c3                   	retq   
  4203b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4203b8:	ff d0                	callq  *%rax
  4203ba:	e9 4c ff ff ff       	jmpq   42030b <_ZNK5boost15program_options11typed_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcE6notifyERKNS_3anyE+0x5b>
  4203bf:	90                   	nop

00000000004203c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_>:
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
  4203c0:	41 57                	push   %r15
  4203c2:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 4203c0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_>
  4203c9:	41 56                	push   %r14
  4203cb:	41 55                	push   %r13
  4203cd:	41 54                	push   %r12
  4203cf:	49 bb 40 ac 20 00 00 	movabs $0x20ac40,%r11
  4203d6:	00 00 00 
  4203d9:	55                   	push   %rbp
  4203da:	53                   	push   %rbx
  4203db:	4c 01 d8             	add    %r11,%rax
  4203de:	48 89 f3             	mov    %rsi,%rbx
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  4203e1:	49 bd 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%r13
  4203e8:	ff ff ff 
  4203eb:	49 89 c7             	mov    %rax,%r15
  4203ee:	48 83 ec 38          	sub    $0x38,%rsp
  4203f2:	49 89 d4             	mov    %rdx,%r12
          _M_construct(__beg, __end, _Tag());
  4203f5:	49 be 90 2b de ff ff 	movabs $0xffffffffffde2b90,%r14
  4203fc:	ff ff ff 
  4203ff:	48 89 04 24          	mov    %rax,(%rsp)
  420403:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  420408:	4c 01 e8             	add    %r13,%rax
  42040b:	bf 60 00 00 00       	mov    $0x60,%edi
  420410:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  420415:	ff d0                	callq  *%rax
  420417:	48 8b 73 20          	mov    0x20(%rbx),%rsi
  42041b:	4c 8b 3c 24          	mov    (%rsp),%r15
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  42041f:	48 8d 68 30          	lea    0x30(%rax),%rbp
  420423:	48 8d 78 20          	lea    0x20(%rax),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420427:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  42042c:	48 89 68 20          	mov    %rbp,0x20(%rax)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420430:	48 89 f2             	mov    %rsi,%rdx
          _M_construct(__beg, __end, _Tag());
  420433:	4c 89 f8             	mov    %r15,%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420436:	48 03 53 28          	add    0x28(%rbx),%rdx
          _M_construct(__beg, __end, _Tag());
  42043a:	4c 01 f0             	add    %r14,%rax
  42043d:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  42043f:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  420444:	48 8b 73 40          	mov    0x40(%rbx),%rsi
  420448:	48 8d 41 50          	lea    0x50(%rcx),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  42044c:	48 89 f2             	mov    %rsi,%rdx
  42044f:	48 03 53 48          	add    0x48(%rbx),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420453:	48 8d 79 40          	lea    0x40(%rcx),%rdi
  420457:	48 89 41 40          	mov    %rax,0x40(%rcx)
          _M_construct(__beg, __end, _Tag());
  42045b:	4c 89 f8             	mov    %r15,%rax
  42045e:	4c 01 f0             	add    %r14,%rax
  420461:	ff d0                	callq  *%rax
	    if (__x->_M_right)
  420463:	48 8b 73 18          	mov    0x18(%rbx),%rsi
	  __tmp->_M_color = __x->_M_color;
  420467:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  42046c:	8b 03                	mov    (%rbx),%eax
	    if (__x->_M_right)
  42046e:	48 85 f6             	test   %rsi,%rsi
	  __tmp->_M_left = 0;
  420471:	48 c7 41 10 00 00 00 	movq   $0x0,0x10(%rcx)
  420478:	00 
	  __tmp->_M_right = 0;
  420479:	49 89 cf             	mov    %rcx,%r15
	  __tmp->_M_color = __x->_M_color;
  42047c:	89 01                	mov    %eax,(%rcx)
	  __tmp->_M_right = 0;
  42047e:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
  420485:	00 
	__top->_M_parent = __p;
  420486:	4c 89 61 08          	mov    %r12,0x8(%rcx)
	    if (__x->_M_right)
  42048a:	74 24                	je     4204b0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0xf0>
	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
  42048c:	4c 8b 04 24          	mov    (%rsp),%r8
  420490:	48 b8 c0 53 df ff ff 	movabs $0xffffffffffdf53c0,%rax
  420497:	ff ff ff 
  42049a:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  42049f:	4c 89 fa             	mov    %r15,%rdx
  4204a2:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4204a7:	4c 01 c0             	add    %r8,%rax
  4204aa:	ff d0                	callq  *%rax
  4204ac:	49 89 47 18          	mov    %rax,0x18(%r15)
	    while (__x != 0)
  4204b0:	48 8b 6b 10          	mov    0x10(%rbx),%rbp
  4204b4:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
  4204b9:	48 85 ed             	test   %rbp,%rbp
  4204bc:	0f 84 bc 00 00 00    	je     42057e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x1be>
  4204c2:	48 8b 0c 24          	mov    (%rsp),%rcx
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  4204c6:	48 b8 c0 53 df ff ff 	movabs $0xffffffffffdf53c0,%rax
  4204cd:	ff ff ff 
  4204d0:	49 01 cd             	add    %rcx,%r13
  4204d3:	48 01 c8             	add    %rcx,%rax
  4204d6:	49 01 ce             	add    %rcx,%r14
  4204d9:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  4204de:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4204e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4204e8:	bf 60 00 00 00       	mov    $0x60,%edi
  4204ed:	4c 8b 3c 24          	mov    (%rsp),%r15
  4204f1:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4204f6:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4204f8:	4c 8d 68 30          	lea    0x30(%rax),%r13
  4204fc:	48 89 c3             	mov    %rax,%rbx
  4204ff:	48 8d 78 20          	lea    0x20(%rax),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420503:	4c 89 68 20          	mov    %r13,0x20(%rax)
  420507:	48 8b 75 20          	mov    0x20(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  42050b:	48 89 f2             	mov    %rsi,%rdx
  42050e:	48 03 55 28          	add    0x28(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420512:	41 ff d6             	callq  *%r14
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420515:	48 8d 43 50          	lea    0x50(%rbx),%rax
  420519:	48 8d 7b 40          	lea    0x40(%rbx),%rdi
  42051d:	48 89 43 40          	mov    %rax,0x40(%rbx)
  420521:	48 8b 75 40          	mov    0x40(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420525:	48 89 f2             	mov    %rsi,%rdx
  420528:	48 03 55 48          	add    0x48(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  42052c:	41 ff d6             	callq  *%r14
	  __tmp->_M_color = __x->_M_color;
  42052f:	8b 45 00             	mov    0x0(%rbp),%eax
	  __tmp->_M_right = 0;
  420532:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  420539:	00 
		if (__x->_M_right)
  42053a:	48 8b 75 18          	mov    0x18(%rbp),%rsi
	  __tmp->_M_left = 0;
  42053e:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  420545:	00 
	  __tmp->_M_color = __x->_M_color;
  420546:	89 03                	mov    %eax,(%rbx)
		__p->_M_left = __y;
  420548:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
		if (__x->_M_right)
  42054d:	48 85 f6             	test   %rsi,%rsi
		__y->_M_parent = __p;
  420550:	4c 89 63 08          	mov    %r12,0x8(%rbx)
		if (__x->_M_right)
  420554:	74 18                	je     42056e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x1ae>
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  420556:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  42055b:	48 89 da             	mov    %rbx,%rdx
  42055e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  420563:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  420568:	ff d0                	callq  *%rax
  42056a:	48 89 43 18          	mov    %rax,0x18(%rbx)
  42056e:	48 8b 6d 10          	mov    0x10(%rbp),%rbp
  420572:	49 89 dc             	mov    %rbx,%r12
	    while (__x != 0)
  420575:	48 85 ed             	test   %rbp,%rbp
  420578:	0f 85 6a ff ff ff    	jne    4204e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x128>
      }
  42057e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  420583:	48 83 c4 38          	add    $0x38,%rsp
  420587:	5b                   	pop    %rbx
  420588:	5d                   	pop    %rbp
  420589:	41 5c                	pop    %r12
  42058b:	41 5d                	pop    %r13
  42058d:	41 5e                	pop    %r14
  42058f:	41 5f                	pop    %r15
  420591:	c3                   	retq   
  420592:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420599:	ff ff ff 
	  __catch(...)
  42059c:	48 8b 1c 24          	mov    (%rsp),%rbx
  4205a0:	48 89 c7             	mov    %rax,%rdi
  4205a3:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  4205aa:	ff ff ff 
  4205ad:	49 89 df             	mov    %rbx,%r15
  4205b0:	48 01 d8             	add    %rbx,%rax
      { ::operator delete(__p); }
  4205b3:	49 01 dc             	add    %rbx,%r12
  4205b6:	ff d0                	callq  *%rax
  4205b8:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  4205bd:	41 ff d4             	callq  *%r12
	      __throw_exception_again;
  4205c0:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  4205c7:	ff ff ff 
  4205ca:	48 01 d8             	add    %rbx,%rax
  4205cd:	ff d0                	callq  *%rax
  4205cf:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  4205d3:	48 89 c5             	mov    %rax,%rbp
  4205d6:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  4205dd:	ff ff ff 
	if (!_M_is_local())
  4205e0:	49 39 fd             	cmp    %rdi,%r13
  4205e3:	74 0c                	je     4205f1 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x231>
  4205e5:	48 8b 04 24          	mov    (%rsp),%rax
  4205e9:	49 89 c7             	mov    %rax,%r15
  4205ec:	4c 01 e0             	add    %r12,%rax
  4205ef:	ff d0                	callq  *%rax
  4205f1:	48 89 e8             	mov    %rbp,%rax
	  __catch(...)
  4205f4:	4c 8b 34 24          	mov    (%rsp),%r14
  4205f8:	48 89 c7             	mov    %rax,%rdi
  4205fb:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  420602:	ff ff ff 
  420605:	4c 89 f0             	mov    %r14,%rax
  420608:	4d 89 f7             	mov    %r14,%r15
  42060b:	4d 01 f4             	add    %r14,%r12
  42060e:	48 01 e8             	add    %rbp,%rax
  420611:	ff d0                	callq  *%rax
  420613:	48 89 df             	mov    %rbx,%rdi
	      __throw_exception_again;
  420616:	48 bb e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rbx
  42061d:	ff ff ff 
  420620:	41 ff d4             	callq  *%r12
  420623:	4c 89 f0             	mov    %r14,%rax
  420626:	48 01 d8             	add    %rbx,%rax
  420629:	ff d0                	callq  *%rax
  42062b:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  420632:	ff ff ff 
  420635:	48 bb e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rbx
  42063c:	ff ff ff 
  42063f:	49 bc 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%r12
  420646:	ff ff ff 
	__catch(...)
  420649:	4c 8b 34 24          	mov    (%rsp),%r14
  42064d:	48 89 c7             	mov    %rax,%rdi
  420650:	4d 89 f7             	mov    %r14,%r15
  420653:	4c 01 f5             	add    %r14,%rbp
	    __throw_exception_again;
  420656:	4c 01 f3             	add    %r14,%rbx
	__catch(...)
  420659:	ff d5                	callq  *%rbp
	    _M_erase(__top);
  42065b:	48 b8 50 c5 de ff ff 	movabs $0xffffffffffdec550,%rax
  420662:	ff ff ff 
  420665:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  42066a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  42066f:	4c 01 f0             	add    %r14,%rax
  420672:	ff d0                	callq  *%rax
	    __throw_exception_again;
  420674:	ff d3                	callq  *%rbx
  420676:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  42067d:	ff ff ff 
  420680:	e9 6f ff ff ff       	jmpq   4205f4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x234>
  420685:	48 89 c3             	mov    %rax,%rbx
  420688:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  42068d:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420694:	ff ff ff 
  420697:	48 8b 78 20          	mov    0x20(%rax),%rdi
  42069b:	48 39 fd             	cmp    %rdi,%rbp
  42069e:	74 0c                	je     4206ac <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x2ec>
  4206a0:	48 8b 04 24          	mov    (%rsp),%rax
  4206a4:	49 89 c7             	mov    %rax,%r15
  4206a7:	4c 01 e0             	add    %r12,%rax
  4206aa:	ff d0                	callq  *%rax
  4206ac:	48 89 d8             	mov    %rbx,%rax
  4206af:	e9 e8 fe ff ff       	jmpq   42059c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x1dc>
  4206b4:	49 89 c5             	mov    %rax,%r13
	  __catch(...)
  4206b7:	48 8b 04 24          	mov    (%rsp),%rax
  4206bb:	49 bc 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%r12
  4206c2:	ff ff ff 
  4206c5:	49 89 c7             	mov    %rax,%r15
  4206c8:	4c 01 e0             	add    %r12,%rax
  4206cb:	ff d0                	callq  *%rax
  4206cd:	4c 89 e8             	mov    %r13,%rax
  4206d0:	e9 74 ff ff ff       	jmpq   420649 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x289>
  4206d5:	4c 8b 34 24          	mov    (%rsp),%r14
  4206d9:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  4206e0:	ff ff ff 
  4206e3:	48 89 c3             	mov    %rax,%rbx
  4206e6:	4d 89 f7             	mov    %r14,%r15
  4206e9:	4c 01 f2             	add    %r14,%rdx
  4206ec:	ff d2                	callq  *%rdx
  4206ee:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  4206f5:	ff ff ff 
  4206f8:	48 89 df             	mov    %rbx,%rdi
  4206fb:	4c 01 f0             	add    %r14,%rax
  4206fe:	ff d0                	callq  *%rax
	__catch(...)
  420700:	4c 8b 34 24          	mov    (%rsp),%r14
  420704:	48 89 c3             	mov    %rax,%rbx
  420707:	4d 89 f7             	mov    %r14,%r15
  42070a:	4d 01 f4             	add    %r14,%r12
  42070d:	41 ff d4             	callq  *%r12
  420710:	eb dc                	jmp    4206ee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE7_M_copyINSE_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS8_EPKSI_PSt18_Rb_tree_node_baseRT_+0x32e>
  420712:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  420719:	00 00 00 
  42071c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000420720 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_>:
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
  420720:	41 57                	push   %r15
  420722:	48 8d 05 f7 ff ff ff 	lea    -0x9(%rip),%rax        # 420720 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_>
  420729:	41 56                	push   %r14
  42072b:	41 55                	push   %r13
  42072d:	41 54                	push   %r12
  42072f:	49 bb e0 a8 20 00 00 	movabs $0x20a8e0,%r11
  420736:	00 00 00 
  420739:	55                   	push   %rbp
  42073a:	53                   	push   %rbx
  42073b:	4c 01 d8             	add    %r11,%rax
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  42073e:	49 bd 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%r13
  420745:	ff ff ff 
  420748:	48 89 f3             	mov    %rsi,%rbx
  42074b:	49 89 c7             	mov    %rax,%r15
  42074e:	48 83 ec 48          	sub    $0x48,%rsp
  420752:	49 89 d4             	mov    %rdx,%r12
  420755:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42075a:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  42075f:	4c 01 e8             	add    %r13,%rax
  420762:	bf 80 00 00 00       	mov    $0x80,%edi
  420767:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  42076c:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  42076e:	48 8d 68 30          	lea    0x30(%rax),%rbp
  420772:	48 8b 73 20          	mov    0x20(%rbx),%rsi
  420776:	49 89 c6             	mov    %rax,%r14
  420779:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  42077e:	48 8d 78 20          	lea    0x20(%rax),%rdi
          _M_construct(__beg, __end, _Tag());
  420782:	49 bf 90 2b de ff ff 	movabs $0xffffffffffde2b90,%r15
  420789:	ff ff ff 
	: allocator_type(__a), _M_p(__dat) { }
  42078c:	48 89 68 20          	mov    %rbp,0x20(%rax)
          _M_construct(__beg, __end, _Tag());
  420790:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420795:	48 89 f2             	mov    %rsi,%rdx
  420798:	48 03 53 28          	add    0x28(%rbx),%rdx
          _M_construct(__beg, __end, _Tag());
  42079c:	4c 01 f8             	add    %r15,%rax
  42079f:	ff d0                	callq  *%rax
  4207a1:	48 8b 73 40          	mov    0x40(%rbx),%rsi
  4207a5:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4207aa:	4c 89 f0             	mov    %r14,%rax
  4207ad:	49 8d 7e 40          	lea    0x40(%r14),%rdi
  4207b1:	4d 8d 76 50          	lea    0x50(%r14),%r14
	: allocator_type(__a), _M_p(__dat) { }
  4207b5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  4207ba:	48 89 f2             	mov    %rsi,%rdx
  4207bd:	48 03 53 48          	add    0x48(%rbx),%rdx
	: allocator_type(__a), _M_p(__dat) { }
  4207c1:	4c 89 70 40          	mov    %r14,0x40(%rax)
          _M_construct(__beg, __end, _Tag());
  4207c5:	4b 8d 04 07          	lea    (%r15,%r8,1),%rax
  4207c9:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4207cb:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  4207d0:	48 8b 73 60          	mov    0x60(%rbx),%rsi
          _M_construct(__beg, __end, _Tag());
  4207d4:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4207d9:	48 89 c8             	mov    %rcx,%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  4207dc:	48 89 f2             	mov    %rsi,%rdx
  4207df:	48 03 53 68          	add    0x68(%rbx),%rdx
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4207e3:	48 83 c0 70          	add    $0x70,%rax
  4207e7:	48 8d 79 60          	lea    0x60(%rcx),%rdi
  4207eb:	48 89 41 60          	mov    %rax,0x60(%rcx)
          _M_construct(__beg, __end, _Tag());
  4207ef:	4b 8d 04 07          	lea    (%r15,%r8,1),%rax
  4207f3:	ff d0                	callq  *%rax
	    if (__x->_M_right)
  4207f5:	48 8b 73 18          	mov    0x18(%rbx),%rsi
	  __tmp->_M_color = __x->_M_color;
  4207f9:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
  4207fe:	8b 03                	mov    (%rbx),%eax
	    if (__x->_M_right)
  420800:	48 85 f6             	test   %rsi,%rsi
	  __tmp->_M_left = 0;
  420803:	49 c7 46 10 00 00 00 	movq   $0x0,0x10(%r14)
  42080a:	00 
	  __tmp->_M_right = 0;
  42080b:	49 c7 46 18 00 00 00 	movq   $0x0,0x18(%r14)
  420812:	00 
	  __tmp->_M_color = __x->_M_color;
  420813:	41 89 06             	mov    %eax,(%r14)
	__top->_M_parent = __p;
  420816:	4d 89 66 08          	mov    %r12,0x8(%r14)
	    if (__x->_M_right)
  42081a:	74 25                	je     420841 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x121>
	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
  42081c:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  420821:	48 b8 20 57 df ff ff 	movabs $0xffffffffffdf5720,%rax
  420828:	ff ff ff 
  42082b:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  420830:	4c 89 f2             	mov    %r14,%rdx
  420833:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  420838:	4c 01 c8             	add    %r9,%rax
  42083b:	ff d0                	callq  *%rax
  42083d:	49 89 46 18          	mov    %rax,0x18(%r14)
	    while (__x != 0)
  420841:	48 8b 6b 10          	mov    0x10(%rbx),%rbp
  420845:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
  42084a:	48 85 ed             	test   %rbp,%rbp
  42084d:	0f 84 e3 00 00 00    	je     420936 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x216>
  420853:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  420858:	48 b8 20 57 df ff ff 	movabs $0xffffffffffdf5720,%rax
  42085f:	ff ff ff 
  420862:	49 01 cd             	add    %rcx,%r13
  420865:	48 01 c8             	add    %rcx,%rax
  420868:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  42086d:	4d 8d 2c 0f          	lea    (%r15,%rcx,1),%r13
  420871:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  420876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42087d:	00 00 00 
  420880:	bf 80 00 00 00       	mov    $0x80,%edi
  420885:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
  42088a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  42088f:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420891:	4c 8d 70 30          	lea    0x30(%rax),%r14
  420895:	48 89 c3             	mov    %rax,%rbx
  420898:	48 8d 78 20          	lea    0x20(%rax),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  42089c:	4c 89 70 20          	mov    %r14,0x20(%rax)
  4208a0:	48 8b 75 20          	mov    0x20(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  4208a4:	48 89 f2             	mov    %rsi,%rdx
  4208a7:	48 03 55 28          	add    0x28(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  4208ab:	41 ff d5             	callq  *%r13
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4208ae:	48 8d 43 50          	lea    0x50(%rbx),%rax
  4208b2:	48 8d 7b 40          	lea    0x40(%rbx),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  4208b6:	48 89 43 40          	mov    %rax,0x40(%rbx)
  4208ba:	48 8b 75 40          	mov    0x40(%rbp),%rsi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4208be:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  4208c3:	48 89 f2             	mov    %rsi,%rdx
  4208c6:	48 03 55 48          	add    0x48(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  4208ca:	41 ff d5             	callq  *%r13
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  4208cd:	48 8d 43 70          	lea    0x70(%rbx),%rax
  4208d1:	48 8d 7b 60          	lea    0x60(%rbx),%rdi
  4208d5:	48 89 43 60          	mov    %rax,0x60(%rbx)
  4208d9:	48 8b 75 60          	mov    0x60(%rbp),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  4208dd:	48 89 f2             	mov    %rsi,%rdx
  4208e0:	48 03 55 68          	add    0x68(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  4208e4:	41 ff d5             	callq  *%r13
	  __tmp->_M_color = __x->_M_color;
  4208e7:	8b 45 00             	mov    0x0(%rbp),%eax
	  __tmp->_M_right = 0;
  4208ea:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  4208f1:	00 
		if (__x->_M_right)
  4208f2:	48 8b 75 18          	mov    0x18(%rbp),%rsi
	  __tmp->_M_left = 0;
  4208f6:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  4208fd:	00 
	  __tmp->_M_color = __x->_M_color;
  4208fe:	89 03                	mov    %eax,(%rbx)
		__p->_M_left = __y;
  420900:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
		if (__x->_M_right)
  420905:	48 85 f6             	test   %rsi,%rsi
		__y->_M_parent = __p;
  420908:	4c 89 63 08          	mov    %r12,0x8(%rbx)
		if (__x->_M_right)
  42090c:	74 18                	je     420926 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x206>
		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
  42090e:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  420913:	48 89 da             	mov    %rbx,%rdx
  420916:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  42091b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
  420920:	ff d0                	callq  *%rax
  420922:	48 89 43 18          	mov    %rax,0x18(%rbx)
  420926:	48 8b 6d 10          	mov    0x10(%rbp),%rbp
  42092a:	49 89 dc             	mov    %rbx,%r12
	    while (__x != 0)
  42092d:	48 85 ed             	test   %rbp,%rbp
  420930:	0f 85 4a ff ff ff    	jne    420880 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x160>
      }
  420936:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  42093b:	48 83 c4 48          	add    $0x48,%rsp
  42093f:	5b                   	pop    %rbx
  420940:	5d                   	pop    %rbp
  420941:	41 5c                	pop    %r12
  420943:	41 5d                	pop    %r13
  420945:	41 5e                	pop    %r14
  420947:	41 5f                	pop    %r15
  420949:	c3                   	retq   
  42094a:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420951:	ff ff ff 
	  __catch(...)
  420954:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  420959:	48 89 c7             	mov    %rax,%rdi
  42095c:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  420963:	ff ff ff 
  420966:	49 89 df             	mov    %rbx,%r15
  420969:	48 01 d8             	add    %rbx,%rax
      { ::operator delete(__p); }
  42096c:	49 01 dc             	add    %rbx,%r12
  42096f:	ff d0                	callq  *%rax
  420971:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  420976:	41 ff d4             	callq  *%r12
	      __throw_exception_again;
  420979:	48 b8 e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rax
  420980:	ff ff ff 
  420983:	48 01 d8             	add    %rbx,%rax
  420986:	ff d0                	callq  *%rax
  420988:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
	if (!_M_is_local())
  42098c:	48 39 7c 24 18       	cmp    %rdi,0x18(%rsp)
  420991:	48 89 c5             	mov    %rax,%rbp
  420994:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  42099b:	ff ff ff 
  42099e:	74 0d                	je     4209ad <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x28d>
  4209a0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4209a5:	49 89 c7             	mov    %rax,%r15
  4209a8:	4c 01 e0             	add    %r12,%rax
  4209ab:	ff d0                	callq  *%rax
  4209ad:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
  4209b1:	49 39 fe             	cmp    %rdi,%r14
  4209b4:	74 0d                	je     4209c3 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x2a3>
  4209b6:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4209bb:	49 89 c7             	mov    %rax,%r15
  4209be:	4c 01 e0             	add    %r12,%rax
  4209c1:	ff d0                	callq  *%rax
  4209c3:	48 89 e8             	mov    %rbp,%rax
	  __catch(...)
  4209c6:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  4209cb:	48 89 c7             	mov    %rax,%rdi
  4209ce:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  4209d5:	ff ff ff 
  4209d8:	4c 89 f0             	mov    %r14,%rax
  4209db:	4d 89 f7             	mov    %r14,%r15
  4209de:	4d 01 f4             	add    %r14,%r12
  4209e1:	48 01 e8             	add    %rbp,%rax
  4209e4:	ff d0                	callq  *%rax
  4209e6:	48 89 df             	mov    %rbx,%rdi
	      __throw_exception_again;
  4209e9:	48 bb e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rbx
  4209f0:	ff ff ff 
  4209f3:	41 ff d4             	callq  *%r12
  4209f6:	4c 89 f0             	mov    %r14,%rax
  4209f9:	48 01 d8             	add    %rbx,%rax
  4209fc:	ff d0                	callq  *%rax
  4209fe:	48 89 c5             	mov    %rax,%rbp
  420a01:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420a08:	ff ff ff 
  420a0b:	eb a0                	jmp    4209ad <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x28d>
	  __catch(...)
  420a0d:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  420a12:	48 ba 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rdx
  420a19:	ff ff ff 
  420a1c:	48 89 c3             	mov    %rax,%rbx
  420a1f:	4d 89 f7             	mov    %r14,%r15
  420a22:	4c 01 f2             	add    %r14,%rdx
  420a25:	ff d2                	callq  *%rdx
  420a27:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  420a2e:	ff ff ff 
  420a31:	48 89 df             	mov    %rbx,%rdi
  420a34:	4c 01 f0             	add    %r14,%rax
  420a37:	ff d0                	callq  *%rax
  420a39:	49 89 c5             	mov    %rax,%r13
  420a3c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420a41:	49 bc 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%r12
  420a48:	ff ff ff 
  420a4b:	49 89 c7             	mov    %rax,%r15
  420a4e:	4c 01 e0             	add    %r12,%rax
  420a51:	ff d0                	callq  *%rax
  420a53:	4c 89 e8             	mov    %r13,%rax
	__catch(...)
  420a56:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  420a5b:	48 89 c7             	mov    %rax,%rdi
  420a5e:	4d 89 f7             	mov    %r14,%r15
  420a61:	4c 01 f5             	add    %r14,%rbp
	    __throw_exception_again;
  420a64:	4c 01 f3             	add    %r14,%rbx
	__catch(...)
  420a67:	ff d5                	callq  *%rbp
	    _M_erase(__top);
  420a69:	48 b8 f0 c5 de ff ff 	movabs $0xffffffffffdec5f0,%rax
  420a70:	ff ff ff 
  420a73:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  420a78:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  420a7d:	4c 01 f0             	add    %r14,%rax
  420a80:	ff d0                	callq  *%rax
	    __throw_exception_again;
  420a82:	ff d3                	callq  *%rbx
  420a84:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420a8b:	ff ff ff 
  420a8e:	e9 33 ff ff ff       	jmpq   4209c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x2a6>
  420a93:	48 89 c3             	mov    %rax,%rbx
  420a96:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  420a9b:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420aa2:	ff ff ff 
  420aa5:	48 8b 78 40          	mov    0x40(%rax),%rdi
  420aa9:	49 39 fe             	cmp    %rdi,%r14
  420aac:	74 12                	je     420ac0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x3a0>
  420aae:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420ab3:	49 89 c7             	mov    %rax,%r15
  420ab6:	4c 01 e0             	add    %r12,%rax
  420ab9:	ff d0                	callq  *%rax
  420abb:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  420ac0:	48 8b 78 20          	mov    0x20(%rax),%rdi
  420ac4:	48 39 fd             	cmp    %rdi,%rbp
  420ac7:	74 0d                	je     420ad6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x3b6>
  420ac9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  420ace:	49 89 c7             	mov    %rax,%r15
  420ad1:	4c 01 e0             	add    %r12,%rax
  420ad4:	ff d0                	callq  *%rax
  420ad6:	48 89 d8             	mov    %rbx,%rax
  420ad9:	e9 76 fe ff ff       	jmpq   420954 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x234>
  420ade:	48 89 c3             	mov    %rax,%rbx
  420ae1:	49 bc 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%r12
  420ae8:	ff ff ff 
  420aeb:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  420af0:	eb ce                	jmp    420ac0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x3a0>
  420af2:	48 bd b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rbp
  420af9:	ff ff ff 
  420afc:	48 bb e0 e8 dd ff ff 	movabs $0xffffffffffdde8e0,%rbx
  420b03:	ff ff ff 
  420b06:	49 bc 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%r12
  420b0d:	ff ff ff 
  420b10:	e9 41 ff ff ff       	jmpq   420a56 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x336>
	__catch(...)
  420b15:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  420b1a:	48 89 c3             	mov    %rax,%rbx
  420b1d:	4d 89 f7             	mov    %r14,%r15
  420b20:	4d 01 f4             	add    %r14,%r12
  420b23:	41 ff d4             	callq  *%r12
  420b26:	e9 fc fe ff ff       	jmpq   420a27 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S6_IS5_S5_EESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_M_copyINSF_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSJ_PSt18_Rb_tree_node_baseRT_+0x307>
  420b2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000420b30 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_>:
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420b30:	41 57                	push   %r15
  420b32:	41 56                	push   %r14
  420b34:	49 bb d0 a4 20 00 00 	movabs $0x20a4d0,%r11
  420b3b:	00 00 00 
  420b3e:	41 55                	push   %r13
  420b40:	41 54                	push   %r12
  420b42:	4c 8d 25 e7 ff ff ff 	lea    -0x19(%rip),%r12        # 420b30 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_>
  420b49:	55                   	push   %rbp
  420b4a:	53                   	push   %rbx
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420b4b:	48 b8 d0 e9 dd ff ff 	movabs $0xffffffffffdde9d0,%rax
  420b52:	ff ff ff 
  420b55:	4d 01 dc             	add    %r11,%r12
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420b58:	48 89 fb             	mov    %rdi,%rbx
  420b5b:	48 89 f5             	mov    %rsi,%rbp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420b5e:	4c 01 e0             	add    %r12,%rax
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420b61:	48 83 ec 28          	sub    $0x28,%rsp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420b65:	4d 89 e7             	mov    %r12,%r15
  420b68:	ff d0                	callq  *%rax
    class BOOST_PROGRAM_OPTIONS_DECL error_with_option_name : public error {
  420b6a:	48 b8 c0 ff ff ff ff 	movabs $0xffffffffffffffc0,%rax
  420b71:	ff ff ff 
	    this->_M_header._M_left = &this->_M_header;
  420b74:	48 8d 53 20          	lea    0x20(%rbx),%rdx
      : _M_t(__x._M_t) { }
  420b78:	4c 8d 6b 18          	lea    0x18(%rbx),%r13
  420b7c:	49 8b 04 04          	mov    (%r12,%rax,1),%rax
  420b80:	48 83 c0 10          	add    $0x10,%rax
  420b84:	48 89 03             	mov    %rax,(%rbx)
  420b87:	8b 45 10             	mov    0x10(%rbp),%eax
	    _M_header(), _M_node_count(0)
  420b8a:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  420b91:	00 
	    this->_M_header._M_left = &this->_M_header;
  420b92:	48 89 53 30          	mov    %rdx,0x30(%rbx)
	    this->_M_header._M_right = &this->_M_header;
  420b96:	48 89 53 38          	mov    %rdx,0x38(%rbx)
  420b9a:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  420b9e:	89 43 10             	mov    %eax,0x10(%rbx)
	    _M_header(), _M_node_count(0)
  420ba1:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  420ba8:	48 c7 43 40 00 00 00 	movq   $0x0,0x40(%rbx)
  420baf:	00 
	if (__x._M_root() != 0)
  420bb0:	48 85 f6             	test   %rsi,%rsi
  420bb3:	74 5b                	je     420c10 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xe0>
	return _M_copy(__x, __p, __an);
  420bb5:	48 b8 c0 53 df ff ff 	movabs $0xffffffffffdf53c0,%rax
  420bbc:	ff ff ff 
	  : _M_t(__t) { }
  420bbf:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
	return _M_copy(__x, __p, __an);
  420bc4:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
  420bc9:	4c 89 ef             	mov    %r13,%rdi
  420bcc:	4c 01 e0             	add    %r12,%rax
  420bcf:	ff d0                	callq  *%rax
	    _M_root() = _M_copy(__x._M_begin(), _M_end());
  420bd1:	48 89 43 28          	mov    %rax,0x28(%rbx)
  420bd5:	48 89 c1             	mov    %rax,%rcx
  420bd8:	eb 09                	jmp    420be3 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xb3>
  420bda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      while (__x->_M_left != 0) __x = __x->_M_left;
  420be0:	48 89 d1             	mov    %rdx,%rcx
  420be3:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  420be7:	48 85 d2             	test   %rdx,%rdx
  420bea:	75 f4                	jne    420be0 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xb0>
	    _M_leftmost() = _S_minimum(_M_root());
  420bec:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
  420bf0:	eb 09                	jmp    420bfb <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xcb>
  420bf2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      while (__x->_M_right != 0) __x = __x->_M_right;
  420bf8:	48 89 d0             	mov    %rdx,%rax
  420bfb:	48 8b 50 18          	mov    0x18(%rax),%rdx
  420bff:	48 85 d2             	test   %rdx,%rdx
  420c02:	75 f4                	jne    420bf8 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0xc8>
	    _M_rightmost() = _S_maximum(_M_root());
  420c04:	48 89 43 38          	mov    %rax,0x38(%rbx)
	    _M_impl._M_node_count = __x._M_impl._M_node_count;
  420c08:	48 8b 45 40          	mov    0x40(%rbp),%rax
  420c0c:	48 89 43 40          	mov    %rax,0x40(%rbx)
	    this->_M_header._M_left = &this->_M_header;
  420c10:	48 8d 53 50          	lea    0x50(%rbx),%rdx
	    _M_header(), _M_node_count(0)
  420c14:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  420c1b:	00 
  420c1c:	4c 8d 73 48          	lea    0x48(%rbx),%r14
  420c20:	c7 43 50 00 00 00 00 	movl   $0x0,0x50(%rbx)
  420c27:	48 c7 43 70 00 00 00 	movq   $0x0,0x70(%rbx)
  420c2e:	00 
	    this->_M_header._M_left = &this->_M_header;
  420c2f:	48 89 53 60          	mov    %rdx,0x60(%rbx)
	    this->_M_header._M_right = &this->_M_header;
  420c33:	48 89 53 68          	mov    %rdx,0x68(%rbx)
  420c37:	48 8b 75 58          	mov    0x58(%rbp),%rsi
	if (__x._M_root() != 0)
  420c3b:	48 85 f6             	test   %rsi,%rsi
  420c3e:	74 58                	je     420c98 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x168>
	return _M_copy(__x, __p, __an);
  420c40:	48 b8 20 57 df ff ff 	movabs $0xffffffffffdf5720,%rax
  420c47:	ff ff ff 
	  : _M_t(__t) { }
  420c4a:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
	return _M_copy(__x, __p, __an);
  420c4f:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
  420c54:	4c 89 f7             	mov    %r14,%rdi
  420c57:	4c 01 e0             	add    %r12,%rax
  420c5a:	ff d0                	callq  *%rax
	    _M_root() = _M_copy(__x._M_begin(), _M_end());
  420c5c:	48 89 43 58          	mov    %rax,0x58(%rbx)
  420c60:	48 89 c1             	mov    %rax,%rcx
  420c63:	eb 06                	jmp    420c6b <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x13b>
  420c65:	0f 1f 00             	nopl   (%rax)
      while (__x->_M_left != 0) __x = __x->_M_left;
  420c68:	48 89 d1             	mov    %rdx,%rcx
  420c6b:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  420c6f:	48 85 d2             	test   %rdx,%rdx
  420c72:	75 f4                	jne    420c68 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x138>
	    _M_leftmost() = _S_minimum(_M_root());
  420c74:	48 89 4b 60          	mov    %rcx,0x60(%rbx)
  420c78:	eb 09                	jmp    420c83 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x153>
  420c7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
      while (__x->_M_right != 0) __x = __x->_M_right;
  420c80:	48 89 d0             	mov    %rdx,%rax
  420c83:	48 8b 50 18          	mov    0x18(%rax),%rdx
  420c87:	48 85 d2             	test   %rdx,%rdx
  420c8a:	75 f4                	jne    420c80 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x150>
	    _M_rightmost() = _S_maximum(_M_root());
  420c8c:	48 89 43 68          	mov    %rax,0x68(%rbx)
	    _M_impl._M_node_count = __x._M_impl._M_node_count;
  420c90:	48 8b 45 70          	mov    0x70(%rbp),%rax
  420c94:	48 89 43 70          	mov    %rax,0x70(%rbx)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420c98:	48 8d 83 88 00 00 00 	lea    0x88(%rbx),%rax
          _M_construct(__beg, __end, _Tag());
  420c9f:	49 bf 90 2b de ff ff 	movabs $0xffffffffffde2b90,%r15
  420ca6:	ff ff ff 
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420ca9:	48 8d 7b 78          	lea    0x78(%rbx),%rdi
	: allocator_type(__a), _M_p(__dat) { }
  420cad:	48 89 43 78          	mov    %rax,0x78(%rbx)
  420cb1:	48 8b 75 78          	mov    0x78(%rbp),%rsi
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420cb5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
          _M_construct(__beg, __end, _Tag());
  420cba:	4b 8d 04 27          	lea    (%r15,%r12,1),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420cbe:	48 89 f2             	mov    %rsi,%rdx
  420cc1:	48 03 95 80 00 00 00 	add    0x80(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420cc8:	ff d0                	callq  *%rax
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
  420cca:	48 8d 83 a8 00 00 00 	lea    0xa8(%rbx),%rax
  420cd1:	48 8d bb 98 00 00 00 	lea    0x98(%rbx),%rdi
  420cd8:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  420cdf:	48 8b b5 98 00 00 00 	mov    0x98(%rbp),%rsi
          _M_construct(__beg, __end, _Tag());
  420ce6:	4b 8d 04 27          	lea    (%r15,%r12,1),%rax
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  420cea:	48 89 f2             	mov    %rsi,%rdx
  420ced:	48 03 95 a0 00 00 00 	add    0xa0(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  420cf4:	ff d0                	callq  *%rax
  420cf6:	48 83 c4 28          	add    $0x28,%rsp
  420cfa:	5b                   	pop    %rbx
  420cfb:	5d                   	pop    %rbp
  420cfc:	41 5c                	pop    %r12
  420cfe:	41 5d                	pop    %r13
  420d00:	41 5e                	pop    %r14
  420d02:	41 5f                	pop    %r15
  420d04:	c3                   	retq   
  420d05:	48 89 c5             	mov    %rax,%rbp
    class BOOST_PROGRAM_OPTIONS_DECL error : public std::logic_error {
  420d08:	48 b8 20 f9 ff ff ff 	movabs $0xfffffffffffff920,%rax
  420d0f:	ff ff ff 
  420d12:	48 89 df             	mov    %rbx,%rdi
  420d15:	4d 89 e7             	mov    %r12,%r15
  420d18:	4c 01 e0             	add    %r12,%rax
  420d1b:	48 89 03             	mov    %rax,(%rbx)
  420d1e:	48 b8 40 ea dd ff ff 	movabs $0xffffffffffddea40,%rax
  420d25:	ff ff ff 
  420d28:	4c 01 e0             	add    %r12,%rax
  420d2b:	ff d0                	callq  *%rax
  420d2d:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  420d34:	ff ff ff 
  420d37:	48 89 ef             	mov    %rbp,%rdi
  420d3a:	4c 01 e0             	add    %r12,%rax
  420d3d:	ff d0                	callq  *%rax
  420d3f:	48 8b 7b 78          	mov    0x78(%rbx),%rdi
	if (!_M_is_local())
  420d43:	48 39 7c 24 08       	cmp    %rdi,0x8(%rsp)
  420d48:	48 89 c5             	mov    %rax,%rbp
  420d4b:	74 12                	je     420d5f <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x22f>
  420d4d:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  420d54:	ff ff ff 
  420d57:	4d 89 e7             	mov    %r12,%r15
  420d5a:	4c 01 e0             	add    %r12,%rax
  420d5d:	ff d0                	callq  *%rax
      { _M_erase(_M_begin()); }
  420d5f:	48 b8 f0 c5 de ff ff 	movabs $0xffffffffffdec5f0,%rax
  420d66:	ff ff ff 
  420d69:	48 8b 73 58          	mov    0x58(%rbx),%rsi
  420d6d:	4c 89 f7             	mov    %r14,%rdi
  420d70:	4c 01 e0             	add    %r12,%rax
  420d73:	ff d0                	callq  *%rax
  420d75:	48 b8 50 c5 de ff ff 	movabs $0xffffffffffdec550,%rax
  420d7c:	ff ff ff 
  420d7f:	48 8b 73 28          	mov    0x28(%rbx),%rsi
  420d83:	4c 89 ef             	mov    %r13,%rdi
  420d86:	4c 01 e0             	add    %r12,%rax
  420d89:	ff d0                	callq  *%rax
  420d8b:	e9 78 ff ff ff       	jmpq   420d08 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x1d8>
  420d90:	48 89 c5             	mov    %rax,%rbp
  420d93:	eb ca                	jmp    420d5f <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x22f>
  420d95:	48 89 c5             	mov    %rax,%rbp
  420d98:	eb db                	jmp    420d75 <_ZN5boost15program_options22error_with_option_nameC1ERKS1_+0x245>
  420d9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000420da0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv>:
            rethrow() const
  420da0:	41 57                	push   %r15
  420da2:	41 55                	push   %r13
  420da4:	49 bb 60 a2 20 00 00 	movabs $0x20a260,%r11
  420dab:	00 00 00 
  420dae:	41 54                	push   %r12
  420db0:	55                   	push   %rbp
                throw*this;
  420db1:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  420db8:	ff ff ff 
            rethrow() const
  420dbb:	53                   	push   %rbx
  420dbc:	48 8d 1d dd ff ff ff 	lea    -0x23(%rip),%rbx        # 420da0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv>
  420dc3:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  420dc6:	bf f0 00 00 00       	mov    $0xf0,%edi
  420dcb:	4c 01 db             	add    %r11,%rbx
  420dce:	49 89 df             	mov    %rbx,%r15
  420dd1:	48 01 d8             	add    %rbx,%rax
  420dd4:	ff d0                	callq  *%rax
  420dd6:	48 89 c5             	mov    %rax,%rbp
        clone_base
  420dd9:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  420de0:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  420de3:	4c 89 e6             	mov    %r12,%rsi
  420de6:	48 01 d8             	add    %rbx,%rax
  420de9:	48 89 ef             	mov    %rbp,%rdi
  420dec:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  420df3:	48 b8 30 5b df ff ff 	movabs $0xffffffffffdf5b30,%rax
  420dfa:	ff ff ff 
  420dfd:	48 01 d8             	add    %rbx,%rax
  420e00:	ff d0                	callq  *%rax
  420e02:	49 bd 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%r13
  420e09:	ff ff ff 
                px_(x.px_)
  420e0c:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  420e13:	00 
  420e14:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  420e19:	48 89 45 00          	mov    %rax,0x0(%rbp)
  420e1d:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  420e24:	00 
  420e25:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  420e2c:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    exception
  420e32:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  420e39:	ff ff ff 
  420e3c:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  420e3f:	48 85 ff             	test   %rdi,%rdi
    exception
  420e42:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  420e49:	74 06                	je     420e51 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv+0xb1>
                    px_->add_ref();
  420e4b:	48 8b 07             	mov    (%rdi),%rax
  420e4e:	ff 50 18             	callq  *0x18(%rax)
    exception
  420e51:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  420e58:	00 
                throw*this;
  420e59:	48 89 ef             	mov    %rbp,%rdi
  420e5c:	49 89 df             	mov    %rbx,%r15
    exception
  420e5f:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  420e66:	00 00 00 
  420e69:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
        clone_impl:
  420e6f:	48 b8 30 f5 ff ff ff 	movabs $0xfffffffffffff530,%rax
  420e76:	ff ff ff 
  420e79:	48 01 d8             	add    %rbx,%rax
  420e7c:	48 8d 50 48          	lea    0x48(%rax),%rdx
  420e80:	48 89 45 00          	mov    %rax,0x0(%rbp)
  420e84:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  420e88:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                throw*this;
  420e8f:	48 b8 b0 cb de ff ff 	movabs $0xffffffffffdecbb0,%rax
  420e96:	ff ff ff 
        clone_impl:
  420e99:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                throw*this;
  420ea0:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  420ea4:	48 b8 58 f2 ff ff ff 	movabs $0xfffffffffffff258,%rax
  420eab:	ff ff ff 
  420eae:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  420eb2:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  420eb9:	ff ff ff 
    exception
  420ebc:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                throw*this;
  420ec3:	48 01 d8             	add    %rbx,%rax
  420ec6:	ff d0                	callq  *%rax
  420ec8:	49 89 c4             	mov    %rax,%r12
  420ecb:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  420ed2:	ff ff ff 
  420ed5:	48 89 ef             	mov    %rbp,%rdi
  420ed8:	49 89 df             	mov    %rbx,%r15
  420edb:	48 01 d8             	add    %rbx,%rax
  420ede:	ff d0                	callq  *%rax
  420ee0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  420ee7:	ff ff ff 
  420eea:	4c 89 e7             	mov    %r12,%rdi
  420eed:	48 01 d8             	add    %rbx,%rax
  420ef0:	ff d0                	callq  *%rax
  420ef2:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  420ef5:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  420efa:	48 89 ef             	mov    %rbp,%rdi
  420efd:	48 89 45 00          	mov    %rax,0x0(%rbp)
  420f01:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  420f08:	ff ff ff 
  420f0b:	48 01 d8             	add    %rbx,%rax
  420f0e:	ff d0                	callq  *%rax
  420f10:	eb b9                	jmp    420ecb <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv+0x12b>
  420f12:	0f 1f 40 00          	nopl   0x0(%rax)
  420f16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  420f1d:	00 00 00 

0000000000420f20 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv>:
            rethrow() const
  420f20:	4c 8b 17             	mov    (%rdi),%r10
  420f23:	49 03 7a e0          	add    -0x20(%r10),%rdi
  420f27:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 420f27 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE7rethrowEv+0x7>
  420f2e:	49 ba d9 a0 20 00 00 	movabs $0x20a0d9,%r10
  420f35:	00 00 00 
  420f38:	4d 01 d3             	add    %r10,%r11
  420f3b:	49 ba a0 5d df ff ff 	movabs $0xffffffffffdf5da0,%r10
  420f42:	ff ff ff 
  420f45:	4d 01 da             	add    %r11,%r10
  420f48:	41 ff e2             	jmpq   *%r10
  420f4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000420f50 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv>:
  420f50:	41 57                	push   %r15
  420f52:	41 54                	push   %r12
  420f54:	49 bb b0 a0 20 00 00 	movabs $0x20a0b0,%r11
  420f5b:	00 00 00 
  420f5e:	55                   	push   %rbp
  420f5f:	53                   	push   %rbx
  420f60:	48 8d 1d e9 ff ff ff 	lea    -0x17(%rip),%rbx        # 420f50 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv>
                throw*this;
  420f67:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  420f6e:	ff ff ff 
            rethrow() const
  420f71:	49 89 fc             	mov    %rdi,%r12
                throw*this;
  420f74:	bf f0 00 00 00       	mov    $0xf0,%edi
  420f79:	4c 01 db             	add    %r11,%rbx
            rethrow() const
  420f7c:	48 83 ec 08          	sub    $0x8,%rsp
                throw*this;
  420f80:	49 89 df             	mov    %rbx,%r15
  420f83:	48 01 d8             	add    %rbx,%rax
  420f86:	ff d0                	callq  *%rax
  420f88:	48 89 c5             	mov    %rax,%rbp
        clone_base
  420f8b:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  420f92:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  420f95:	4c 89 e6             	mov    %r12,%rsi
  420f98:	48 01 d8             	add    %rbx,%rax
  420f9b:	48 89 ef             	mov    %rbp,%rdi
  420f9e:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  420fa5:	48 b8 30 5b df ff ff 	movabs $0xffffffffffdf5b30,%rax
  420fac:	ff ff ff 
  420faf:	48 01 d8             	add    %rbx,%rax
  420fb2:	ff d0                	callq  *%rax
  420fb4:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  420fbb:	00 
                px_(x.px_)
  420fbc:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  420fc3:	00 
  420fc4:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  420fca:	48 b8 80 f9 ff ff ff 	movabs $0xfffffffffffff980,%rax
  420fd1:	ff ff ff 
  420fd4:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  420fdb:	48 01 d8             	add    %rbx,%rax
  420fde:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  420fe2:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  420fe9:	ff ff ff 
  420fec:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  420fef:	48 85 ff             	test   %rdi,%rdi
    exception
  420ff2:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  420ff9:	74 06                	je     421001 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv+0xb1>
                    px_->add_ref();
  420ffb:	48 8b 07             	mov    (%rdi),%rax
  420ffe:	ff 50 18             	callq  *0x18(%rax)
    exception
  421001:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  421008:	00 
                throw*this;
  421009:	48 89 ef             	mov    %rbp,%rdi
  42100c:	49 89 df             	mov    %rbx,%r15
    exception
  42100f:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  421016:	00 00 00 
  421019:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
        clone_impl:
  42101f:	48 b8 20 f4 ff ff ff 	movabs $0xfffffffffffff420,%rax
  421026:	ff ff ff 
  421029:	48 01 d8             	add    %rbx,%rax
  42102c:	48 8d 50 48          	lea    0x48(%rax),%rdx
  421030:	48 89 45 00          	mov    %rax,0x0(%rbp)
  421034:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  421038:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                throw*this;
  42103f:	48 b8 a0 cc de ff ff 	movabs $0xffffffffffdecca0,%rax
  421046:	ff ff ff 
        clone_impl:
  421049:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                throw*this;
  421050:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  421054:	48 b8 e8 f1 ff ff ff 	movabs $0xfffffffffffff1e8,%rax
  42105b:	ff ff ff 
  42105e:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  421062:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  421069:	ff ff ff 
    exception
  42106c:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                throw*this;
  421073:	48 01 d8             	add    %rbx,%rax
  421076:	ff d0                	callq  *%rax
  421078:	49 89 c4             	mov    %rax,%r12
  42107b:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  421082:	ff ff ff 
  421085:	48 89 ef             	mov    %rbp,%rdi
  421088:	49 89 df             	mov    %rbx,%r15
  42108b:	48 01 d8             	add    %rbx,%rax
  42108e:	ff d0                	callq  *%rax
  421090:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  421097:	ff ff ff 
  42109a:	4c 89 e7             	mov    %r12,%rdi
  42109d:	48 01 d8             	add    %rbx,%rax
  4210a0:	ff d0                	callq  *%rax
  4210a2:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  4210a5:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4210ac:	ff ff ff 
  4210af:	48 89 ef             	mov    %rbp,%rdi
  4210b2:	48 01 d8             	add    %rbx,%rax
  4210b5:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4210b9:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  4210c0:	ff ff ff 
  4210c3:	48 01 d8             	add    %rbx,%rax
  4210c6:	ff d0                	callq  *%rax
  4210c8:	eb b1                	jmp    42107b <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv+0x12b>
  4210ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004210d0 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv>:
            rethrow() const
  4210d0:	4c 8b 17             	mov    (%rdi),%r10
  4210d3:	49 03 7a e0          	add    -0x20(%r10),%rdi
  4210d7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4210d7 <_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE7rethrowEv+0x7>
  4210de:	49 ba 29 9f 20 00 00 	movabs $0x209f29,%r10
  4210e5:	00 00 00 
  4210e8:	4d 01 d3             	add    %r10,%r11
  4210eb:	49 ba 50 5f df ff ff 	movabs $0xffffffffffdf5f50,%r10
  4210f2:	ff ff ff 
  4210f5:	4d 01 da             	add    %r11,%r10
  4210f8:	41 ff e2             	jmpq   *%r10
  4210fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000421100 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv>:
            clone() const
  421100:	41 57                	push   %r15
  421102:	41 54                	push   %r12
  421104:	49 bb 00 9f 20 00 00 	movabs $0x209f00,%r11
  42110b:	00 00 00 
  42110e:	55                   	push   %rbp
  42110f:	48 8d 2d ea ff ff ff 	lea    -0x16(%rip),%rbp        # 421100 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv>
  421116:	53                   	push   %rbx
                return new clone_impl(*this,clone_tag());
  421117:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  42111e:	ff ff ff 
            clone() const
  421121:	49 89 fc             	mov    %rdi,%r12
                return new clone_impl(*this,clone_tag());
  421124:	bf f0 00 00 00       	mov    $0xf0,%edi
  421129:	4c 01 dd             	add    %r11,%rbp
            clone() const
  42112c:	48 83 ec 08          	sub    $0x8,%rsp
                return new clone_impl(*this,clone_tag());
  421130:	49 89 ef             	mov    %rbp,%r15
  421133:	48 01 e8             	add    %rbp,%rax
  421136:	ff d0                	callq  *%rax
  421138:	48 89 c3             	mov    %rax,%rbx
        clone_base
  42113b:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421142:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  421145:	4c 89 e6             	mov    %r12,%rsi
  421148:	48 01 e8             	add    %rbp,%rax
  42114b:	48 89 df             	mov    %rbx,%rdi
  42114e:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
  421155:	48 b8 30 5b df ff ff 	movabs $0xffffffffffdf5b30,%rax
  42115c:	ff ff ff 
  42115f:	48 01 e8             	add    %rbp,%rax
  421162:	ff d0                	callq  *%rax
  421164:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  42116b:	00 
                px_(x.px_)
  42116c:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  421173:	00 
  421174:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  42117a:	48 b8 80 f9 ff ff ff 	movabs $0xfffffffffffff980,%rax
  421181:	ff ff ff 
  421184:	48 89 bb c8 00 00 00 	mov    %rdi,0xc8(%rbx)
  42118b:	48 01 e8             	add    %rbp,%rax
  42118e:	48 89 03             	mov    %rax,(%rbx)
    exception
  421191:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  421198:	ff ff ff 
  42119b:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  42119e:	48 85 ff             	test   %rdi,%rdi
    exception
  4211a1:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
                if( px_ )
  4211a8:	74 06                	je     4211b0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0xb0>
                    px_->add_ref();
  4211aa:	48 8b 07             	mov    (%rdi),%rax
  4211ad:	ff 50 18             	callq  *0x18(%rax)
    exception
  4211b0:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  4211b7:	00 
                copy_boost_exception(this,&x);
  4211b8:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  4211bf:	00 
  4211c0:	48 8d bb c0 00 00 00 	lea    0xc0(%rbx),%rdi
    exception
  4211c7:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  4211ce:	00 00 00 
  4211d1:	89 83 e0 00 00 00    	mov    %eax,0xe0(%rbx)
                T(x)
  4211d7:	48 b8 20 f4 ff ff ff 	movabs $0xfffffffffffff420,%rax
  4211de:	ff ff ff 
  4211e1:	48 01 e8             	add    %rbp,%rax
  4211e4:	48 8d 50 48          	lea    0x48(%rax),%rdx
  4211e8:	48 89 03             	mov    %rax,(%rbx)
  4211eb:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  4211ef:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
                copy_boost_exception(this,&x);
  4211f6:	48 b8 80 a5 de ff ff 	movabs $0xffffffffffdea580,%rax
  4211fd:	ff ff ff 
    exception
  421200:	0f 11 83 d0 00 00 00 	movups %xmm0,0xd0(%rbx)
                T(x)
  421207:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
                copy_boost_exception(this,&x);
  42120e:	48 01 e8             	add    %rbp,%rax
  421211:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  421213:	48 8b 03             	mov    (%rbx),%rax
  421216:	48 03 58 e8          	add    -0x18(%rax),%rbx
                }
  42121a:	48 83 c4 08          	add    $0x8,%rsp
                return new clone_impl(*this,clone_tag());
  42121e:	48 89 d8             	mov    %rbx,%rax
                }
  421221:	5b                   	pop    %rbx
  421222:	5d                   	pop    %rbp
  421223:	41 5c                	pop    %r12
  421225:	41 5f                	pop    %r15
  421227:	c3                   	retq   
  421228:	49 89 c4             	mov    %rax,%r12
                return new clone_impl(*this,clone_tag());
  42122b:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  421232:	ff ff ff 
  421235:	48 89 df             	mov    %rbx,%rdi
  421238:	be f0 00 00 00       	mov    $0xf0,%esi
  42123d:	48 01 e8             	add    %rbp,%rax
  421240:	49 89 ef             	mov    %rbp,%r15
  421243:	ff d0                	callq  *%rax
  421245:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  42124c:	ff ff ff 
  42124f:	4c 89 e7             	mov    %r12,%rdi
  421252:	48 01 e8             	add    %rbp,%rax
  421255:	ff d0                	callq  *%rax
  421257:	49 89 c4             	mov    %rax,%r12
                T(x)
  42125a:	48 b8 40 ca de ff ff 	movabs $0xffffffffffdeca40,%rax
  421261:	ff ff ff 
  421264:	48 89 df             	mov    %rbx,%rdi
  421267:	48 01 e8             	add    %rbp,%rax
  42126a:	ff d0                	callq  *%rax
  42126c:	eb bd                	jmp    42122b <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0x12b>
  42126e:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  421271:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  421278:	ff ff ff 
  42127b:	48 89 df             	mov    %rbx,%rdi
  42127e:	48 01 e8             	add    %rbp,%rax
  421281:	48 89 03             	mov    %rax,(%rbx)
  421284:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  42128b:	ff ff ff 
  42128e:	48 01 e8             	add    %rbp,%rax
  421291:	ff d0                	callq  *%rax
  421293:	eb 96                	jmp    42122b <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0x12b>
  421295:	90                   	nop
  421296:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42129d:	00 00 00 

00000000004212a0 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv>:
            clone() const
  4212a0:	4c 8b 17             	mov    (%rdi),%r10
  4212a3:	49 03 7a e8          	add    -0x18(%r10),%rdi
  4212a7:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 4212a7 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20invalid_option_valueEEEE5cloneEv+0x7>
  4212ae:	49 ba 59 9d 20 00 00 	movabs $0x209d59,%r10
  4212b5:	00 00 00 
  4212b8:	4d 01 d3             	add    %r10,%r11
  4212bb:	49 ba 00 61 df ff ff 	movabs $0xffffffffffdf6100,%r10
  4212c2:	ff ff ff 
  4212c5:	4d 01 da             	add    %r11,%r10
  4212c8:	41 ff e2             	jmpq   *%r10
  4212cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004212d0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv>:
  4212d0:	41 57                	push   %r15
  4212d2:	41 55                	push   %r13
  4212d4:	49 bb 30 9d 20 00 00 	movabs $0x209d30,%r11
  4212db:	00 00 00 
  4212de:	41 54                	push   %r12
  4212e0:	55                   	push   %rbp
  4212e1:	48 8d 2d e8 ff ff ff 	lea    -0x18(%rip),%rbp        # 4212d0 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv>
                return new clone_impl(*this,clone_tag());
  4212e8:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  4212ef:	ff ff ff 
            clone() const
  4212f2:	53                   	push   %rbx
  4212f3:	49 89 fc             	mov    %rdi,%r12
  4212f6:	4c 01 dd             	add    %r11,%rbp
                return new clone_impl(*this,clone_tag());
  4212f9:	bf f0 00 00 00       	mov    $0xf0,%edi
  4212fe:	49 89 ef             	mov    %rbp,%r15
  421301:	48 01 e8             	add    %rbp,%rax
  421304:	ff d0                	callq  *%rax
  421306:	48 89 c3             	mov    %rax,%rbx
        clone_base
  421309:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421310:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  421313:	4c 89 e6             	mov    %r12,%rsi
  421316:	48 01 e8             	add    %rbp,%rax
  421319:	48 89 df             	mov    %rbx,%rdi
  42131c:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
  421323:	48 b8 30 5b df ff ff 	movabs $0xffffffffffdf5b30,%rax
  42132a:	ff ff ff 
  42132d:	48 01 e8             	add    %rbp,%rax
  421330:	ff d0                	callq  *%rax
  421332:	49 bd 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%r13
  421339:	ff ff ff 
                px_(x.px_)
  42133c:	49 8b bc 24 c8 00 00 	mov    0xc8(%r12),%rdi
  421343:	00 
  421344:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  421349:	48 89 03             	mov    %rax,(%rbx)
  42134c:	41 8b 84 24 b8 00 00 	mov    0xb8(%r12),%eax
  421353:	00 
  421354:	48 89 bb c8 00 00 00 	mov    %rdi,0xc8(%rbx)
  42135b:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
    exception
  421361:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  421368:	ff ff ff 
  42136b:	48 01 e8             	add    %rbp,%rax
                if( px_ )
  42136e:	48 85 ff             	test   %rdi,%rdi
    exception
  421371:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
                if( px_ )
  421378:	74 06                	je     421380 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0xb0>
                    px_->add_ref();
  42137a:	48 8b 07             	mov    (%rdi),%rax
  42137d:	ff 50 18             	callq  *0x18(%rax)
    exception
  421380:	41 8b 84 24 e0 00 00 	mov    0xe0(%r12),%eax
  421387:	00 
                copy_boost_exception(this,&x);
  421388:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  42138f:	00 
  421390:	48 8d bb c0 00 00 00 	lea    0xc0(%rbx),%rdi
    exception
  421397:	f3 41 0f 6f 84 24 d0 	movdqu 0xd0(%r12),%xmm0
  42139e:	00 00 00 
  4213a1:	89 83 e0 00 00 00    	mov    %eax,0xe0(%rbx)
                T(x)
  4213a7:	48 b8 30 f5 ff ff ff 	movabs $0xfffffffffffff530,%rax
  4213ae:	ff ff ff 
  4213b1:	48 01 e8             	add    %rbp,%rax
  4213b4:	48 8d 50 48          	lea    0x48(%rax),%rdx
  4213b8:	48 89 03             	mov    %rax,(%rbx)
  4213bb:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  4213bf:	48 89 83 e8 00 00 00 	mov    %rax,0xe8(%rbx)
                copy_boost_exception(this,&x);
  4213c6:	48 b8 80 a5 de ff ff 	movabs $0xffffffffffdea580,%rax
  4213cd:	ff ff ff 
    exception
  4213d0:	0f 11 83 d0 00 00 00 	movups %xmm0,0xd0(%rbx)
                T(x)
  4213d7:	48 89 93 c0 00 00 00 	mov    %rdx,0xc0(%rbx)
                copy_boost_exception(this,&x);
  4213de:	48 01 e8             	add    %rbp,%rax
  4213e1:	ff d0                	callq  *%rax
                return new clone_impl(*this,clone_tag());
  4213e3:	48 8b 03             	mov    (%rbx),%rax
  4213e6:	48 03 58 e8          	add    -0x18(%rax),%rbx
  4213ea:	48 89 d8             	mov    %rbx,%rax
                }
  4213ed:	5b                   	pop    %rbx
  4213ee:	5d                   	pop    %rbp
  4213ef:	41 5c                	pop    %r12
  4213f1:	41 5d                	pop    %r13
  4213f3:	41 5f                	pop    %r15
  4213f5:	c3                   	retq   
  4213f6:	49 89 c4             	mov    %rax,%r12
                return new clone_impl(*this,clone_tag());
  4213f9:	48 b8 50 e7 dd ff ff 	movabs $0xffffffffffdde750,%rax
  421400:	ff ff ff 
  421403:	48 89 df             	mov    %rbx,%rdi
  421406:	be f0 00 00 00       	mov    $0xf0,%esi
  42140b:	48 01 e8             	add    %rbp,%rax
  42140e:	49 89 ef             	mov    %rbp,%r15
  421411:	ff d0                	callq  *%rax
  421413:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  42141a:	ff ff ff 
  42141d:	4c 89 e7             	mov    %r12,%rdi
  421420:	48 01 e8             	add    %rbp,%rax
  421423:	ff d0                	callq  *%rax
  421425:	49 89 c4             	mov    %rax,%r12
                T(x)
  421428:	48 b8 f0 c8 de ff ff 	movabs $0xffffffffffdec8f0,%rax
  42142f:	ff ff ff 
  421432:	48 89 df             	mov    %rbx,%rdi
  421435:	48 01 e8             	add    %rbp,%rax
  421438:	ff d0                	callq  *%rax
  42143a:	eb bd                	jmp    4213f9 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0x129>
  42143c:	49 89 c4             	mov    %rax,%r12
        ~validation_error() throw() {}
  42143f:	49 8d 44 2d 00       	lea    0x0(%r13,%rbp,1),%rax
  421444:	48 89 df             	mov    %rbx,%rdi
  421447:	48 89 03             	mov    %rax,(%rbx)
  42144a:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  421451:	ff ff ff 
  421454:	48 01 e8             	add    %rbp,%rax
  421457:	ff d0                	callq  *%rax
  421459:	eb 9e                	jmp    4213f9 <_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0x129>
  42145b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000421460 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv>:
            clone() const
  421460:	4c 8b 17             	mov    (%rdi),%r10
  421463:	49 03 7a e8          	add    -0x18(%r10),%rdi
  421467:	4c 8d 1d f9 ff ff ff 	lea    -0x7(%rip),%r11        # 421467 <_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEE5cloneEv+0x7>
  42146e:	49 ba 99 9b 20 00 00 	movabs $0x209b99,%r10
  421475:	00 00 00 
  421478:	4d 01 d3             	add    %r10,%r11
  42147b:	49 ba d0 62 df ff ff 	movabs $0xffffffffffdf62d0,%r10
  421482:	ff ff ff 
  421485:	4d 01 da             	add    %r11,%r10
  421488:	41 ff e2             	jmpq   *%r10
  42148b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000421490 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_>:
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  421490:	41 57                	push   %r15
  421492:	41 56                	push   %r14
  421494:	49 bb 70 9b 20 00 00 	movabs $0x209b70,%r11
  42149b:	00 00 00 
  42149e:	41 55                	push   %r13
  4214a0:	41 54                	push   %r12
  4214a2:	49 89 fd             	mov    %rdi,%r13
  4214a5:	55                   	push   %rbp
  4214a6:	53                   	push   %rbx
  4214a7:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 421490 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_>
    throw enable_current_exception(enable_error_info(e));
  4214ae:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  4214b5:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  4214b8:	49 be 30 5b df ff ff 	movabs $0xffffffffffdf5b30,%r14
  4214bf:	ff ff ff 
  4214c2:	bf f0 00 00 00       	mov    $0xf0,%edi
  4214c7:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  4214ca:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    throw enable_current_exception(enable_error_info(e));
  4214d1:	49 89 df             	mov    %rbx,%r15
  4214d4:	48 01 d8             	add    %rbx,%rax
  4214d7:	49 89 e4             	mov    %rsp,%r12
  4214da:	ff d0                	callq  *%rax
  4214dc:	4c 89 ee             	mov    %r13,%rsi
  4214df:	48 89 c5             	mov    %rax,%rbp
  4214e2:	48 89 e7             	mov    %rsp,%rdi
  4214e5:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  4214e9:	ff d0                	callq  *%rax
  4214eb:	41 8b 85 b8 00 00 00 	mov    0xb8(%r13),%eax
                px_(0)
  4214f2:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  4214f9:	00 00 00 00 00 
  4214fe:	48 89 e6             	mov    %rsp,%rsi
            throw_line_(-1)
  421501:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  421508:	00 00 00 00 00 
  42150d:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
  421514:	00 00 00 00 00 
  421519:	48 89 ef             	mov    %rbp,%rdi
  42151c:	c7 84 24 e0 00 00 00 	movl   $0xffffffff,0xe0(%rsp)
  421523:	ff ff ff ff 
  421527:	89 84 24 b8 00 00 00 	mov    %eax,0xb8(%rsp)
                T(x)
  42152e:	48 b8 c0 f3 ff ff ff 	movabs $0xfffffffffffff3c0,%rax
  421535:	ff ff ff 
  421538:	48 01 d8             	add    %rbx,%rax
  42153b:	48 89 04 24          	mov    %rax,(%rsp)
  42153f:	48 83 c0 38          	add    $0x38,%rax
  421543:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  42154a:	00 
        clone_base
  42154b:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  421552:	ff ff ff 
  421555:	48 01 d8             	add    %rbx,%rax
  421558:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  42155f:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  421563:	ff d0                	callq  *%rax
  421565:	8b 84 24 b8 00 00 00 	mov    0xb8(%rsp),%eax
                px_(x.px_)
  42156c:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  421573:	00 
  421574:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    class BOOST_PROGRAM_OPTIONS_DECL invalid_option_value 
  42157a:	48 b8 80 f9 ff ff ff 	movabs $0xfffffffffffff980,%rax
  421581:	ff ff ff 
  421584:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  42158b:	48 01 d8             	add    %rbx,%rax
  42158e:	48 89 45 00          	mov    %rax,0x0(%rbp)
    exception
  421592:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  421599:	ff ff ff 
  42159c:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  42159f:	48 85 ff             	test   %rdi,%rdi
    exception
  4215a2:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  4215a9:	74 06                	je     4215b1 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x121>
                    px_->add_ref();
  4215ab:	48 8b 07             	mov    (%rdi),%rax
  4215ae:	ff 50 18             	callq  *0x18(%rax)
    exception
  4215b1:	8b 84 24 e0 00 00 00 	mov    0xe0(%rsp),%eax
                copy_boost_exception(this,&x);
  4215b8:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  4215bf:	00 
  4215c0:	48 8d bd c0 00 00 00 	lea    0xc0(%rbp),%rdi
    exception
  4215c7:	66 0f 6f 84 24 d0 00 	movdqa 0xd0(%rsp),%xmm0
  4215ce:	00 00 
  4215d0:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
                T(x)
  4215d6:	48 b8 20 f4 ff ff ff 	movabs $0xfffffffffffff420,%rax
  4215dd:	ff ff ff 
  4215e0:	48 01 d8             	add    %rbx,%rax
  4215e3:	48 8d 50 48          	lea    0x48(%rax),%rdx
  4215e7:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4215eb:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  4215ef:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                copy_boost_exception(this,&x);
  4215f6:	48 b8 80 a5 de ff ff 	movabs $0xffffffffffdea580,%rax
  4215fd:	ff ff ff 
    exception
  421600:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                T(x)
  421607:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                copy_boost_exception(this,&x);
  42160e:	48 01 d8             	add    %rbx,%rax
  421611:	ff d0                	callq  *%rax
  421613:	48 b8 40 ca de ff ff 	movabs $0xffffffffffdeca40,%rax
  42161a:	ff ff ff 
  42161d:	4c 89 e7             	mov    %r12,%rdi
  421620:	49 89 df             	mov    %rbx,%r15
  421623:	48 01 d8             	add    %rbx,%rax
  421626:	ff d0                	callq  *%rax
  421628:	48 b8 a0 cc de ff ff 	movabs $0xffffffffffdecca0,%rax
  42162f:	ff ff ff 
  421632:	48 89 ef             	mov    %rbp,%rdi
  421635:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  421639:	48 b8 e8 f1 ff ff ff 	movabs $0xfffffffffffff1e8,%rax
  421640:	ff ff ff 
  421643:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  421647:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  42164e:	ff ff ff 
  421651:	48 01 d8             	add    %rbx,%rax
  421654:	ff d0                	callq  *%rax
  421656:	49 89 c5             	mov    %rax,%r13
  421659:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  421660:	ff ff ff 
  421663:	48 89 ef             	mov    %rbp,%rdi
  421666:	49 89 df             	mov    %rbx,%r15
  421669:	48 01 d8             	add    %rbx,%rax
  42166c:	ff d0                	callq  *%rax
  42166e:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  421675:	ff ff ff 
  421678:	4c 89 ef             	mov    %r13,%rdi
  42167b:	48 01 d8             	add    %rbx,%rax
  42167e:	ff d0                	callq  *%rax
  421680:	49 89 c5             	mov    %rax,%r13
                T(x)
  421683:	48 b8 40 ca de ff ff 	movabs $0xffffffffffdeca40,%rax
  42168a:	ff ff ff 
  42168d:	48 89 ef             	mov    %rbp,%rdi
  421690:	48 01 d8             	add    %rbx,%rax
  421693:	ff d0                	callq  *%rax
  421695:	48 b8 40 ca de ff ff 	movabs $0xffffffffffdeca40,%rax
  42169c:	ff ff ff 
  42169f:	4c 89 e7             	mov    %r12,%rdi
  4216a2:	48 01 d8             	add    %rbx,%rax
  4216a5:	ff d0                	callq  *%rax
  4216a7:	eb b0                	jmp    421659 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x1c9>
  4216a9:	49 89 c5             	mov    %rax,%r13
        ~validation_error() throw() {}
  4216ac:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4216b3:	ff ff ff 
  4216b6:	48 89 ef             	mov    %rbp,%rdi
  4216b9:	48 01 d8             	add    %rbx,%rax
  4216bc:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4216c0:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  4216c7:	ff ff ff 
  4216ca:	48 01 d8             	add    %rbx,%rax
  4216cd:	ff d0                	callq  *%rax
  4216cf:	eb c4                	jmp    421695 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x205>
  4216d1:	49 89 c5             	mov    %rax,%r13
  4216d4:	eb bf                	jmp    421695 <_ZN5boost15throw_exceptionINS_15program_options20invalid_option_valueEEEvRKT_+0x205>
  4216d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4216dd:	00 00 00 

00000000004216e0 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_>:
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  4216e0:	41 57                	push   %r15
  4216e2:	41 56                	push   %r14
  4216e4:	49 bb 20 99 20 00 00 	movabs $0x209920,%r11
  4216eb:	00 00 00 
  4216ee:	41 55                	push   %r13
  4216f0:	41 54                	push   %r12
  4216f2:	49 89 fd             	mov    %rdi,%r13
  4216f5:	55                   	push   %rbp
  4216f6:	53                   	push   %rbx
  4216f7:	48 8d 1d e2 ff ff ff 	lea    -0x1e(%rip),%rbx        # 4216e0 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_>
    throw enable_current_exception(enable_error_info(e));
  4216fe:	48 b8 00 e5 dd ff ff 	movabs $0xffffffffffdde500,%rax
  421705:	ff ff ff 
    class BOOST_PROGRAM_OPTIONS_DECL validation_error : public error_with_option_name {
  421708:	49 be 30 5b df ff ff 	movabs $0xffffffffffdf5b30,%r14
  42170f:	ff ff ff 
  421712:	bf f0 00 00 00       	mov    $0xf0,%edi
  421717:	4c 01 db             	add    %r11,%rbx
template<class E> BOOST_NORETURN inline void throw_exception( E const & e )
  42171a:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
    throw enable_current_exception(enable_error_info(e));
  421721:	49 89 df             	mov    %rbx,%r15
  421724:	48 01 d8             	add    %rbx,%rax
  421727:	49 89 e4             	mov    %rsp,%r12
  42172a:	ff d0                	callq  *%rax
  42172c:	4c 89 ee             	mov    %r13,%rsi
  42172f:	48 89 c5             	mov    %rax,%rbp
  421732:	48 89 e7             	mov    %rsp,%rdi
  421735:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  421739:	ff d0                	callq  *%rax
  42173b:	41 8b 85 b8 00 00 00 	mov    0xb8(%r13),%eax
                px_(0)
  421742:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
  421749:	00 00 00 00 00 
  42174e:	48 89 e6             	mov    %rsp,%rsi
            throw_line_(-1)
  421751:	48 c7 84 24 d0 00 00 	movq   $0x0,0xd0(%rsp)
  421758:	00 00 00 00 00 
  42175d:	48 c7 84 24 d8 00 00 	movq   $0x0,0xd8(%rsp)
  421764:	00 00 00 00 00 
  421769:	48 89 ef             	mov    %rbp,%rdi
  42176c:	c7 84 24 e0 00 00 00 	movl   $0xffffffff,0xe0(%rsp)
  421773:	ff ff ff ff 
  421777:	89 84 24 b8 00 00 00 	mov    %eax,0xb8(%rsp)
                T(x)
  42177e:	48 b8 d0 f4 ff ff ff 	movabs $0xfffffffffffff4d0,%rax
  421785:	ff ff ff 
  421788:	48 01 d8             	add    %rbx,%rax
  42178b:	48 89 04 24          	mov    %rax,(%rsp)
  42178f:	48 83 c0 38          	add    $0x38,%rax
  421793:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
  42179a:	00 
        clone_base
  42179b:	48 b8 d8 f9 ff ff ff 	movabs $0xfffffffffffff9d8,%rax
  4217a2:	ff ff ff 
  4217a5:	48 01 d8             	add    %rbx,%rax
  4217a8:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
  4217af:	49 8d 04 1e          	lea    (%r14,%rbx,1),%rax
  4217b3:	ff d0                	callq  *%rax
  4217b5:	49 bd 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%r13
  4217bc:	ff ff ff 
                px_(x.px_)
  4217bf:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
  4217c6:	00 
  4217c7:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  4217cc:	48 89 45 00          	mov    %rax,0x0(%rbp)
  4217d0:	8b 84 24 b8 00 00 00 	mov    0xb8(%rsp),%eax
  4217d7:	48 89 bd c8 00 00 00 	mov    %rdi,0xc8(%rbp)
  4217de:	89 85 b8 00 00 00    	mov    %eax,0xb8(%rbp)
    exception
  4217e4:	48 b8 b8 f9 ff ff ff 	movabs $0xfffffffffffff9b8,%rax
  4217eb:	ff ff ff 
  4217ee:	48 01 d8             	add    %rbx,%rax
                if( px_ )
  4217f1:	48 85 ff             	test   %rdi,%rdi
    exception
  4217f4:	48 89 85 c0 00 00 00 	mov    %rax,0xc0(%rbp)
                if( px_ )
  4217fb:	74 06                	je     421803 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x123>
                    px_->add_ref();
  4217fd:	48 8b 07             	mov    (%rdi),%rax
  421800:	ff 50 18             	callq  *0x18(%rax)
    exception
  421803:	8b 84 24 e0 00 00 00 	mov    0xe0(%rsp),%eax
                copy_boost_exception(this,&x);
  42180a:	49 8d b4 24 c0 00 00 	lea    0xc0(%r12),%rsi
  421811:	00 
  421812:	48 8d bd c0 00 00 00 	lea    0xc0(%rbp),%rdi
    exception
  421819:	66 0f 6f 84 24 d0 00 	movdqa 0xd0(%rsp),%xmm0
  421820:	00 00 
  421822:	89 85 e0 00 00 00    	mov    %eax,0xe0(%rbp)
                T(x)
  421828:	48 b8 30 f5 ff ff ff 	movabs $0xfffffffffffff530,%rax
  42182f:	ff ff ff 
  421832:	48 01 d8             	add    %rbx,%rax
  421835:	48 8d 50 48          	lea    0x48(%rax),%rdx
  421839:	48 89 45 00          	mov    %rax,0x0(%rbp)
  42183d:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  421841:	48 89 85 e8 00 00 00 	mov    %rax,0xe8(%rbp)
                copy_boost_exception(this,&x);
  421848:	48 b8 80 a5 de ff ff 	movabs $0xffffffffffdea580,%rax
  42184f:	ff ff ff 
    exception
  421852:	0f 11 85 d0 00 00 00 	movups %xmm0,0xd0(%rbp)
                T(x)
  421859:	48 89 95 c0 00 00 00 	mov    %rdx,0xc0(%rbp)
                copy_boost_exception(this,&x);
  421860:	48 01 d8             	add    %rbx,%rax
  421863:	ff d0                	callq  *%rax
  421865:	48 b8 f0 c8 de ff ff 	movabs $0xffffffffffdec8f0,%rax
  42186c:	ff ff ff 
  42186f:	4c 89 e7             	mov    %r12,%rdi
  421872:	49 89 df             	mov    %rbx,%r15
  421875:	48 01 d8             	add    %rbx,%rax
  421878:	ff d0                	callq  *%rax
  42187a:	48 b8 b0 cb de ff ff 	movabs $0xffffffffffdecbb0,%rax
  421881:	ff ff ff 
  421884:	48 89 ef             	mov    %rbp,%rdi
  421887:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  42188b:	48 b8 58 f2 ff ff ff 	movabs $0xfffffffffffff258,%rax
  421892:	ff ff ff 
  421895:	48 8d 34 03          	lea    (%rbx,%rax,1),%rsi
  421899:	48 b8 f0 e9 dd ff ff 	movabs $0xffffffffffdde9f0,%rax
  4218a0:	ff ff ff 
  4218a3:	48 01 d8             	add    %rbx,%rax
  4218a6:	ff d0                	callq  *%rax
  4218a8:	49 89 c5             	mov    %rax,%r13
  4218ab:	48 b8 60 e6 dd ff ff 	movabs $0xffffffffffdde660,%rax
  4218b2:	ff ff ff 
  4218b5:	48 89 ef             	mov    %rbp,%rdi
  4218b8:	49 89 df             	mov    %rbx,%r15
  4218bb:	48 01 d8             	add    %rbx,%rax
  4218be:	ff d0                	callq  *%rax
  4218c0:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  4218c7:	ff ff ff 
  4218ca:	4c 89 ef             	mov    %r13,%rdi
  4218cd:	48 01 d8             	add    %rbx,%rax
  4218d0:	ff d0                	callq  *%rax
  4218d2:	49 89 c5             	mov    %rax,%r13
                T(x)
  4218d5:	48 b8 f0 c8 de ff ff 	movabs $0xffffffffffdec8f0,%rax
  4218dc:	ff ff ff 
  4218df:	48 89 ef             	mov    %rbp,%rdi
  4218e2:	48 01 d8             	add    %rbx,%rax
  4218e5:	ff d0                	callq  *%rax
  4218e7:	48 b8 f0 c8 de ff ff 	movabs $0xffffffffffdec8f0,%rax
  4218ee:	ff ff ff 
  4218f1:	4c 89 e7             	mov    %r12,%rdi
  4218f4:	48 01 d8             	add    %rbx,%rax
  4218f7:	ff d0                	callq  *%rax
  4218f9:	eb b0                	jmp    4218ab <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x1cb>
  4218fb:	49 89 c6             	mov    %rax,%r14
        ~validation_error() throw() {}
  4218fe:	49 8d 44 1d 00       	lea    0x0(%r13,%rbx,1),%rax
  421903:	48 89 ef             	mov    %rbp,%rdi
  421906:	4d 89 f5             	mov    %r14,%r13
  421909:	48 89 45 00          	mov    %rax,0x0(%rbp)
  42190d:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  421914:	ff ff ff 
  421917:	48 01 d8             	add    %rbx,%rax
  42191a:	ff d0                	callq  *%rax
  42191c:	eb c9                	jmp    4218e7 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x207>
  42191e:	49 89 c5             	mov    %rax,%r13
  421921:	eb c4                	jmp    4218e7 <_ZN5boost15throw_exceptionINS_15program_options16validation_errorEEEvRKT_+0x207>
  421923:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42192a:	00 00 00 
  42192d:	0f 1f 00             	nopl   (%rax)

0000000000421930 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb>:
        const std::basic_string<charT>& get_single_string(
  421930:	41 57                	push   %r15
  421932:	41 56                	push   %r14
  421934:	49 bb d0 96 20 00 00 	movabs $0x2096d0,%r11
  42193b:	00 00 00 
  42193e:	41 55                	push   %r13
  421940:	41 54                	push   %r12
            static std::basic_string<charT> empty;
  421942:	49 bc 60 69 4c 9a 01 	movabs $0x19a4c6960,%r12
  421949:	00 00 00 
        const std::basic_string<charT>& get_single_string(
  42194c:	55                   	push   %rbp
  42194d:	53                   	push   %rbx
  42194e:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 421930 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb>
  421955:	48 89 fd             	mov    %rdi,%rbp
  421958:	41 89 f5             	mov    %esi,%r13d
  42195b:	4c 01 db             	add    %r11,%rbx
  42195e:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
            static std::basic_string<charT> empty;
  421965:	42 0f b6 04 23       	movzbl (%rbx,%r12,1),%eax
  42196a:	84 c0                	test   %al,%al
  42196c:	74 4a                	je     4219b8 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x88>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  42196e:	48 8b 45 00          	mov    0x0(%rbp),%rax
  421972:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  421976:	48 29 c2             	sub    %rax,%rdx
  421979:	48 c1 fa 05          	sar    $0x5,%rdx
            if (v.size() > 1)
  42197d:	48 83 fa 01          	cmp    $0x1,%rdx
  421981:	0f 87 bc 00 00 00    	ja     421a43 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x113>
            else if (v.size() == 1)
  421987:	74 16                	je     42199f <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x6f>
            else if (!allow_empty)
  421989:	45 84 ed             	test   %r13b,%r13b
  42198c:	0f 84 97 01 00 00    	je     421b29 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1f9>
            return empty;
  421992:	48 b8 80 69 4c 9a 01 	movabs $0x19a4c6980,%rax
  421999:	00 00 00 
  42199c:	48 01 d8             	add    %rbx,%rax
        }
  42199f:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  4219a6:	5b                   	pop    %rbx
  4219a7:	5d                   	pop    %rbp
  4219a8:	41 5c                	pop    %r12
  4219aa:	41 5d                	pop    %r13
  4219ac:	41 5e                	pop    %r14
  4219ae:	41 5f                	pop    %r15
  4219b0:	c3                   	retq   
  4219b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            static std::basic_string<charT> empty;
  4219b8:	48 b8 60 ea dd ff ff 	movabs $0xffffffffffddea60,%rax
  4219bf:	ff ff ff 
  4219c2:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
  4219c6:	49 89 df             	mov    %rbx,%r15
  4219c9:	48 01 d8             	add    %rbx,%rax
  4219cc:	ff d0                	callq  *%rax
  4219ce:	85 c0                	test   %eax,%eax
  4219d0:	74 9c                	je     42196e <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x3e>
	: allocator_type(__a), _M_p(__dat) { }
  4219d2:	48 b8 90 69 4c 9a 01 	movabs $0x19a4c6990,%rax
  4219d9:	00 00 00 
  4219dc:	49 be 80 69 4c 9a 01 	movabs $0x19a4c6980,%r14
  4219e3:	00 00 00 
  4219e6:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
  4219ea:	48 01 d8             	add    %rbx,%rax
      { _M_string_length = __length; }
  4219ed:	4a c7 44 33 08 00 00 	movq   $0x0,0x8(%rbx,%r14,1)
  4219f4:	00 00 
  4219f6:	42 c6 44 33 10 00    	movb   $0x0,0x10(%rbx,%r14,1)
	: allocator_type(__a), _M_p(__dat) { }
  4219fc:	4a 89 04 33          	mov    %rax,(%rbx,%r14,1)
  421a00:	48 b8 d0 e5 dd ff ff 	movabs $0xffffffffffdde5d0,%rax
  421a07:	ff ff ff 
  421a0a:	48 01 d8             	add    %rbx,%rax
  421a0d:	ff d0                	callq  *%rax
  421a0f:	48 b8 d0 03 00 00 00 	movabs $0x3d0,%rax
  421a16:	00 00 00 
  421a19:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421a1d:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  421a21:	48 b8 88 ff ff ff ff 	movabs $0xffffffffffffff88,%rax
  421a28:	ff ff ff 
  421a2b:	48 8b 3c 03          	mov    (%rbx,%rax,1),%rdi
  421a2f:	48 b8 e0 e6 dd ff ff 	movabs $0xffffffffffdde6e0,%rax
  421a36:	ff ff ff 
  421a39:	48 01 d8             	add    %rbx,%rax
  421a3c:	ff d0                	callq  *%rax
  421a3e:	e9 2b ff ff ff       	jmpq   42196e <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x3e>
                boost::throw_exception(validation_error(validation_error::multiple_values_not_allowed));
  421a43:	48 8d 6c 24 20       	lea    0x20(%rsp),%rbp
  421a48:	49 be 82 7d df ff ff 	movabs $0xffffffffffdf7d82,%r14
  421a4f:	ff ff ff 
  421a52:	48 b8 90 2c de ff ff 	movabs $0xffffffffffde2c90,%rax
  421a59:	ff ff ff 
  421a5c:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421a60:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  421a64:	49 89 e4             	mov    %rsp,%r12
  421a67:	48 89 ef             	mov    %rbp,%rdi
  421a6a:	41 ff d5             	callq  *%r13
  421a6d:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421a71:	48 89 e7             	mov    %rsp,%rdi
  421a74:	41 ff d5             	callq  *%r13
  421a77:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
  421a7c:	48 b8 90 a4 de ff ff 	movabs $0xffffffffffdea490,%rax
  421a83:	ff ff ff 
  421a86:	45 31 c0             	xor    %r8d,%r8d
  421a89:	48 89 e9             	mov    %rbp,%rcx
  421a8c:	48 89 e2             	mov    %rsp,%rdx
  421a8f:	be 1e 00 00 00       	mov    $0x1e,%esi
  421a94:	4c 89 f7             	mov    %r14,%rdi
  421a97:	48 01 d8             	add    %rbx,%rax
  421a9a:	ff d0                	callq  *%rax
  421a9c:	48 b8 e0 66 df ff ff 	movabs $0xffffffffffdf66e0,%rax
  421aa3:	ff ff ff 
  421aa6:	4c 89 f7             	mov    %r14,%rdi
  421aa9:	48 01 d8             	add    %rbx,%rax
  421aac:	ff d0                	callq  *%rax
  421aae:	49 89 c5             	mov    %rax,%r13
  421ab1:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  421ab8:	ff ff ff 
  421abb:	4c 89 f7             	mov    %r14,%rdi
  421abe:	48 01 d8             	add    %rbx,%rax
  421ac1:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  421ac6:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  421acd:	ff ff ff 
  421ad0:	48 01 d8             	add    %rbx,%rax
  421ad3:	ff d0                	callq  *%rax
  421ad5:	48 8b 3c 24          	mov    (%rsp),%rdi
	if (!_M_is_local())
  421ad9:	49 83 c4 10          	add    $0x10,%r12
  421add:	4c 39 e7             	cmp    %r12,%rdi
  421ae0:	74 12                	je     421af4 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1c4>
  421ae2:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  421ae9:	ff ff ff 
  421aec:	49 89 df             	mov    %rbx,%r15
  421aef:	48 01 d8             	add    %rbx,%rax
  421af2:	ff d0                	callq  *%rax
  421af4:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  421af9:	48 83 c5 10          	add    $0x10,%rbp
  421afd:	48 39 ef             	cmp    %rbp,%rdi
  421b00:	74 12                	je     421b14 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1e4>
  421b02:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  421b09:	ff ff ff 
  421b0c:	49 89 df             	mov    %rbx,%r15
  421b0f:	48 01 d8             	add    %rbx,%rax
  421b12:	ff d0                	callq  *%rax
  421b14:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  421b1b:	ff ff ff 
  421b1e:	4c 89 ef             	mov    %r13,%rdi
  421b21:	49 89 df             	mov    %rbx,%r15
  421b24:	48 01 d8             	add    %rbx,%rax
  421b27:	ff d0                	callq  *%rax
                boost::throw_exception(validation_error(validation_error::at_least_one_value_required));
  421b29:	48 8d 6c 24 20       	lea    0x20(%rsp),%rbp
  421b2e:	49 be 82 7d df ff ff 	movabs $0xffffffffffdf7d82,%r14
  421b35:	ff ff ff 
  421b38:	48 b8 90 2c de ff ff 	movabs $0xffffffffffde2c90,%rax
  421b3f:	ff ff ff 
  421b42:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421b46:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  421b4a:	49 89 e4             	mov    %rsp,%r12
  421b4d:	48 89 ef             	mov    %rbp,%rdi
  421b50:	41 ff d5             	callq  *%r13
  421b53:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
  421b57:	48 89 e7             	mov    %rsp,%rdi
  421b5a:	41 ff d5             	callq  *%r13
  421b5d:	4c 8d 74 24 40       	lea    0x40(%rsp),%r14
  421b62:	48 b8 90 a4 de ff ff 	movabs $0xffffffffffdea490,%rax
  421b69:	ff ff ff 
  421b6c:	45 31 c0             	xor    %r8d,%r8d
  421b6f:	48 89 e9             	mov    %rbp,%rcx
  421b72:	48 89 e2             	mov    %rsp,%rdx
  421b75:	be 1f 00 00 00       	mov    $0x1f,%esi
  421b7a:	4c 89 f7             	mov    %r14,%rdi
  421b7d:	48 01 d8             	add    %rbx,%rax
  421b80:	ff d0                	callq  *%rax
  421b82:	48 b8 e0 66 df ff ff 	movabs $0xffffffffffdf66e0,%rax
  421b89:	ff ff ff 
  421b8c:	4c 89 f7             	mov    %r14,%rdi
  421b8f:	48 01 d8             	add    %rbx,%rax
  421b92:	ff d0                	callq  *%rax
  421b94:	e9 15 ff ff ff       	jmpq   421aae <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x17e>
  421b99:	49 89 c5             	mov    %rax,%r13
  421b9c:	e9 34 ff ff ff       	jmpq   421ad5 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1a5>
  421ba1:	49 89 c5             	mov    %rax,%r13
  421ba4:	e9 4b ff ff ff       	jmpq   421af4 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x1c4>
  421ba9:	eb ee                	jmp    421b99 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x269>
  421bab:	eb f4                	jmp    421ba1 <_ZN5boost15program_options10validators17get_single_stringIcEERKNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEERKSt6vectorIS9_SaIS9_EEb+0x271>
  421bad:	0f 1f 00             	nopl   (%rax)

0000000000421bb0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l>:
    void validate(boost::any& v, 
  421bb0:	41 57                	push   %r15
  421bb2:	41 56                	push   %r14
  421bb4:	49 bb 50 94 20 00 00 	movabs $0x209450,%r11
  421bbb:	00 00 00 
  421bbe:	41 55                	push   %r13
  421bc0:	41 54                	push   %r12
        validators::check_first_occurrence(v);
  421bc2:	48 b8 a0 e9 dd ff ff 	movabs $0xffffffffffdde9a0,%rax
  421bc9:	ff ff ff 
    void validate(boost::any& v, 
  421bcc:	55                   	push   %rbp
  421bcd:	53                   	push   %rbx
  421bce:	48 8d 1d db ff ff ff 	lea    -0x25(%rip),%rbx        # 421bb0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l>
  421bd5:	48 89 f5             	mov    %rsi,%rbp
  421bd8:	49 89 fd             	mov    %rdi,%r13
  421bdb:	48 81 ec 98 02 00 00 	sub    $0x298,%rsp
  421be2:	4c 01 db             	add    %r11,%rbx
        validators::check_first_occurrence(v);
  421be5:	48 01 d8             	add    %rbx,%rax
  421be8:	49 89 df             	mov    %rbx,%r15
  421beb:	ff d0                	callq  *%rax
        std::basic_string<charT> s(validators::get_single_string(xs));
  421bed:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  421bf0:	48 8d 6c 24 50       	lea    0x50(%rsp),%rbp
  421bf5:	48 b8 30 69 df ff ff 	movabs $0xffffffffffdf6930,%rax
  421bfc:	ff ff ff 
  421bff:	31 f6                	xor    %esi,%esi
  421c01:	48 01 d8             	add    %rbx,%rax
  421c04:	ff d0                	callq  *%rax
  421c06:	48 8d 55 10          	lea    0x10(%rbp),%rdx
          _M_construct(__beg, __end, _Tag());
  421c0a:	48 89 ef             	mov    %rbp,%rdi
	: allocator_type(__a), _M_p(__dat) { }
  421c0d:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
  421c12:	48 8b 30             	mov    (%rax),%rsi
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
  421c15:	48 89 f2             	mov    %rsi,%rdx
  421c18:	48 03 50 08          	add    0x8(%rax),%rdx
          _M_construct(__beg, __end, _Tag());
  421c1c:	48 b8 90 2b de ff ff 	movabs $0xffffffffffde2b90,%rax
  421c23:	ff ff ff 
  421c26:	48 01 d8             	add    %rbx,%rax
  421c29:	ff d0                	callq  *%rax
  421c2b:	4c 8b 74 24 50       	mov    0x50(%rsp),%r14
namespace boost 
{
    template <typename Target, typename Source>
    inline Target lexical_cast(const Source &arg)
    {
        Target result = Target();
  421c30:	48 b8 0c 93 df ff ff 	movabs $0xffffffffffdf930c,%rax
  421c37:	ff ff ff 
  421c3a:	f3 0f 10 04 03       	movss  (%rbx,%rax,1),%xmm0
  421c3f:	f3 0f 11 44 24 2c    	movss  %xmm0,0x2c(%rsp)
/************************************ OPERATORS << ( ... ) ********************************/
        public:
            template<class Alloc>
            bool operator<<(std::basic_string<CharT,Traits,Alloc> const& str) BOOST_NOEXCEPT {
                start = str.data();
                finish = start + str.length();
  421c45:	4d 89 f4             	mov    %r14,%r12
  421c48:	4c 03 64 24 58       	add    0x58(%rsp),%r12
            , const CharT* lc_NAN, const CharT* lc_nan
            , const CharT* lc_INFINITY, const CharT* lc_infinity
            , const CharT opening_brace, const CharT closing_brace) BOOST_NOEXCEPT
        {
            using namespace std;
            if (begin == end) return false;
  421c4d:	4d 39 e6             	cmp    %r12,%r14
  421c50:	0f 84 8a 00 00 00    	je     421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
            const CharT minus = lcast_char_constants<CharT>::minus;
            const CharT plus = lcast_char_constants<CharT>::plus;
            const int inifinity_size = 8; // == sizeof("infinity") - 1

            /* Parsing +/- */
            bool const has_minus = (*begin == minus);
  421c56:	41 0f b6 0e          	movzbl (%r14),%ecx
            if (has_minus || *begin == plus) {
                ++ begin;
            }

            if (end - begin < 3) return false;
  421c5a:	4c 89 e2             	mov    %r12,%rdx
            if (has_minus || *begin == plus) {
  421c5d:	8d 41 d5             	lea    -0x2b(%rcx),%eax
  421c60:	83 e0 fd             	and    $0xfffffffd,%eax
                ++ begin;
  421c63:	3c 01                	cmp    $0x1,%al
  421c65:	4c 89 f0             	mov    %r14,%rax
  421c68:	48 83 d0 00          	adc    $0x0,%rax
            if (end - begin < 3) return false;
  421c6c:	48 29 c2             	sub    %rax,%rdx
  421c6f:	48 83 fa 02          	cmp    $0x2,%rdx
  421c73:	7e 6b                	jle    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                if ( val[i] != lcase[i] && val[i] != ucase[i] ) return false;
  421c75:	0f b6 30             	movzbl (%rax),%esi
  421c78:	40 80 fe 6e          	cmp    $0x6e,%sil
  421c7c:	74 0a                	je     421c88 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0xd8>
  421c7e:	40 80 fe 4e          	cmp    $0x4e,%sil
  421c82:	0f 85 f8 02 00 00    	jne    421f80 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3d0>
  421c88:	0f b6 78 01          	movzbl 0x1(%rax),%edi
  421c8c:	40 80 ff 61          	cmp    $0x61,%dil
  421c90:	74 0a                	je     421c9c <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0xec>
  421c92:	40 80 ff 41          	cmp    $0x41,%dil
  421c96:	0f 85 e4 02 00 00    	jne    421f80 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3d0>
  421c9c:	0f b6 78 02          	movzbl 0x2(%rax),%edi
  421ca0:	40 80 ff 6e          	cmp    $0x6e,%dil
  421ca4:	74 0a                	je     421cb0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x100>
  421ca6:	40 80 ff 4e          	cmp    $0x4e,%dil
  421caa:	0f 85 d0 02 00 00    	jne    421f80 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3d0>
            if (lc_iequal(begin, lc_nan, lc_NAN, 3)) {
                begin += 3;
  421cb0:	48 8d 50 03          	lea    0x3(%rax),%rdx
                if (end != begin) {
  421cb4:	49 39 d4             	cmp    %rdx,%r12
  421cb7:	0f 84 3b 04 00 00    	je     4220f8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x548>
                    /* It is 'nan(...)' or some bad input*/
                    
                    if (end - begin < 2) return false; // bad input
  421cbd:	4c 89 e6             	mov    %r12,%rsi
  421cc0:	48 29 d6             	sub    %rdx,%rsi
  421cc3:	48 83 fe 01          	cmp    $0x1,%rsi
  421cc7:	7e 17                	jle    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                    -- end;
                    if (*begin != opening_brace || *end != closing_brace) return false; // bad input
  421cc9:	80 78 03 28          	cmpb   $0x28,0x3(%rax)
  421ccd:	75 11                	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421ccf:	41 80 7c 24 ff 29    	cmpb   $0x29,-0x1(%r12)
  421cd5:	0f 84 1d 04 00 00    	je     4220f8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x548>
  421cdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
      _M_buf_locale(locale())
  421ce0:	48 b8 90 ff ff ff ff 	movabs $0xffffffffffffff90,%rax
  421ce7:	ff ff ff 
  421cea:	48 8d bc 24 a8 00 00 	lea    0xa8(%rsp),%rdi
  421cf1:	00 
  421cf2:	49 89 df             	mov    %rbx,%r15
  421cf5:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  421cfa:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  421cfe:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
  421d05:	00 00 
  421d07:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
  421d0e:	00 00 00 00 00 
  421d13:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
  421d1a:	00 00 00 00 00 
  421d1f:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
  421d26:	00 00 00 00 00 
  421d2b:	48 83 c0 10          	add    $0x10,%rax
  421d2f:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
  421d36:	00 00 00 00 00 
  421d3b:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
  421d42:	00 00 00 00 00 
  421d47:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  421d4c:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
  421d51:	48 89 04 24          	mov    %rax,(%rsp)
  421d55:	48 b8 d0 ea dd ff ff 	movabs $0xffffffffffddead0,%rax
  421d5c:	ff ff ff 
  421d5f:	48 01 d8             	add    %rbx,%rax
  421d62:	ff d0                	callq  *%rax
	_M_in_beg = __gbeg;
  421d64:	4c 89 74 24 78       	mov    %r14,0x78(%rsp)
	_M_in_cur = __gnext;
  421d69:	4c 89 b4 24 80 00 00 	mov    %r14,0x80(%rsp)
  421d70:	00 
	_M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
  421d71:	4c 8d b4 24 70 01 00 	lea    0x170(%rsp),%r14
  421d78:	00 
        class basic_unlockedbuf : public basic_pointerbuf<CharT, BufferType> {
  421d79:	48 b8 e0 f5 ff ff ff 	movabs $0xfffffffffffff5e0,%rax
  421d80:	ff ff ff 
	_M_in_end = __gend;
  421d83:	4c 89 a4 24 88 00 00 	mov    %r12,0x88(%rsp)
  421d8a:	00 
  421d8b:	49 8d 56 10          	lea    0x10(%r14),%rdx
  421d8f:	48 01 d8             	add    %rbx,%rax
  421d92:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  421d97:	48 b8 40 e4 dd ff ff 	movabs $0xffffffffffdde440,%rax
  421d9e:	ff ff ff 
  421da1:	48 89 d7             	mov    %rdx,%rdi
  421da4:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  421da9:	48 01 d8             	add    %rbx,%rax
  421dac:	ff d0                	callq  *%rax
      : _M_gcount(streamsize(0))
  421dae:	48 b9 c8 ff ff ff ff 	movabs $0xffffffffffffffc8,%rcx
  421db5:	ff ff ff 
      { this->init(__sb); }
  421db8:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  421dbd:	48 c7 84 24 58 02 00 	movq   $0x0,0x258(%rsp)
  421dc4:	00 00 00 00 00 
      : _M_gcount(streamsize(0))
  421dc9:	48 8b 04 19          	mov    (%rcx,%rbx,1),%rax
  421dcd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  421dd2:	c6 84 24 60 02 00 00 	movb   $0x0,0x260(%rsp)
  421dd9:	00 
  421dda:	c6 84 24 61 02 00 00 	movb   $0x0,0x261(%rsp)
  421de1:	00 
  421de2:	48 c7 84 24 68 02 00 	movq   $0x0,0x268(%rsp)
  421de9:	00 00 00 00 00 
  421dee:	48 c7 84 24 70 02 00 	movq   $0x0,0x270(%rsp)
  421df5:	00 00 00 00 00 
      { this->init(__sb); }
  421dfa:	48 89 d7             	mov    %rdx,%rdi
      : _M_gcount(streamsize(0))
  421dfd:	48 8d 48 18          	lea    0x18(%rax),%rcx
  421e01:	48 83 c0 40          	add    $0x40,%rax
  421e05:	48 c7 84 24 78 02 00 	movq   $0x0,0x278(%rsp)
  421e0c:	00 00 00 00 00 
  421e11:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  421e18:	00 
      { this->init(__sb); }
  421e19:	48 b8 a0 e8 dd ff ff 	movabs $0xffffffffffdde8a0,%rax
  421e20:	ff ff ff 
  421e23:	48 c7 84 24 80 02 00 	movq   $0x0,0x280(%rsp)
  421e2a:	00 00 00 00 00 
      : _M_gcount(streamsize(0))
  421e2f:	48 89 8c 24 70 01 00 	mov    %rcx,0x170(%rsp)
  421e36:	00 
  421e37:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  421e3e:	00 00 00 00 00 
      { this->init(__sb); }
  421e43:	48 01 d8             	add    %rbx,%rax
  421e46:	48 8b 34 24          	mov    (%rsp),%rsi
  421e4a:	ff d0                	callq  *%rax
        this->clear(_M_streambuf_state);
  421e4c:	48 b8 e0 e9 dd ff ff 	movabs $0xffffffffffdde9e0,%rax
  421e53:	ff ff ff 
        _M_exception = __except;
  421e56:	c7 84 24 9c 01 00 00 	movl   $0x1,0x19c(%rsp)
  421e5d:	01 00 00 00 
        this->clear(_M_streambuf_state);
  421e61:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  421e65:	8b b4 24 a0 01 00 00 	mov    0x1a0(%rsp),%esi
  421e6c:	49 89 df             	mov    %rbx,%r15
  421e6f:	48 01 d8             	add    %rbx,%rax
  421e72:	ff d0                	callq  *%rax
       *  These functions use the stream's current locale (specifically, the
       *  @c num_get facet) to parse the input data.
      */
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }
  421e74:	48 b8 c0 ea dd ff ff 	movabs $0xffffffffffddeac0,%rax
  421e7b:	ff ff ff 
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
  421e7e:	81 a4 24 98 01 00 00 	andl   $0xffffefff,0x198(%rsp)
  421e85:	ff ef ff ff 
    */
    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
  421e89:	48 c7 84 24 88 01 00 	movq   $0x9,0x188(%rsp)
  421e90:	00 09 00 00 00 
  421e95:	48 8d 74 24 2c       	lea    0x2c(%rsp),%rsi
  421e9a:	4c 89 f7             	mov    %r14,%rdi
  421e9d:	48 01 d8             	add    %rbx,%rax
  421ea0:	ff d0                	callq  *%rax
#endif
                stream.unsetf(std::ios::skipws);
                lcast_set_precision(stream, static_cast<InputStreamable*>(0));

                return (stream >> output) 
                    && (stream.get() == Traits::eof());
  421ea2:	48 8b 10             	mov    (%rax),%rdx
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
  421ea5:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  421ea9:	f6 44 10 20 05       	testb  $0x5,0x20(%rax,%rdx,1)
  421eae:	0f 84 6c 02 00 00    	je     422120 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x570>
      { _M_gcount = streamsize(0); }
  421eb4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
      ~basic_ios() { }
  421eb9:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  421ebd:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  421ec4:	00 00 00 00 00 
  421ec9:	49 89 df             	mov    %rbx,%r15
  421ecc:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  421ed0:	48 83 c0 18          	add    $0x18,%rax
  421ed4:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  421edb:	00 
  421edc:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  421ee3:	ff ff ff 
  421ee6:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  421eea:	48 83 c0 10          	add    $0x10,%rax
  421eee:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  421ef5:	00 
  421ef6:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  421efd:	ff ff ff 
  421f00:	48 01 d8             	add    %rbx,%rax
  421f03:	ff d0                	callq  *%rax
      { }
  421f05:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  421f0a:	48 8b 3c 24          	mov    (%rsp),%rdi
  421f0e:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  421f12:	48 83 c7 38          	add    $0x38,%rdi
  421f16:	48 83 c0 10          	add    $0x10,%rax
  421f1a:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  421f1f:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  421f26:	ff ff ff 
  421f29:	48 01 d8             	add    %rbx,%rax
  421f2c:	ff d0                	callq  *%rax
            : source(&source_type_arg), target(&target_type_arg)
  421f2e:	48 b8 68 ef ff ff ff 	movabs $0xffffffffffffef68,%rax
  421f35:	ff ff ff 
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  421f38:	4c 8d 64 24 30       	lea    0x30(%rsp),%r12
            : source(&source_type_arg), target(&target_type_arg)
  421f3d:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  421f41:	48 b8 60 f8 ff ff ff 	movabs $0xfffffffffffff860,%rax
  421f48:	ff ff ff 
  421f4b:	48 01 d8             	add    %rbx,%rax
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  421f4e:	4c 89 e7             	mov    %r12,%rdi
            : source(&source_type_arg), target(&target_type_arg)
  421f51:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  421f56:	48 b8 b8 ff ff ff ff 	movabs $0xffffffffffffffb8,%rax
  421f5d:	ff ff ff 
  421f60:	4c 89 6c 24 30       	mov    %r13,0x30(%rsp)
  421f65:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  421f69:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
            boost::throw_exception(bad_lexical_cast(typeid(S), typeid(T)));
  421f6e:	48 b8 f0 0c df ff ff 	movabs $0xffffffffffdf0cf0,%rax
  421f75:	ff ff ff 
  421f78:	48 01 d8             	add    %rbx,%rax
  421f7b:	ff d0                	callq  *%rax
  421f7d:	0f 1f 00             	nopl   (%rax)
            } else if (
                ( /* 'INF' or 'inf' */
                  end - begin == 3      // 3 == sizeof('inf') - 1
                  && lc_iequal(begin, lc_infinity, lc_INFINITY, 3)
                )
                ||
  421f80:	48 83 fa 03          	cmp    $0x3,%rdx
  421f84:	0f 84 2e 01 00 00    	je     4220b8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x508>
  421f8a:	48 83 fa 08          	cmp    $0x8,%rdx
  421f8e:	0f 85 4c fd ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                if ( val[i] != lcase[i] && val[i] != ucase[i] ) return false;
  421f94:	40 80 fe 69          	cmp    $0x69,%sil
  421f98:	74 0a                	je     421fa4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x3f4>
  421f9a:	40 80 fe 49          	cmp    $0x49,%sil
  421f9e:	0f 85 3c fd ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421fa4:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  421fa8:	80 fa 6e             	cmp    $0x6e,%dl
  421fab:	74 09                	je     421fb6 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x406>
  421fad:	80 fa 4e             	cmp    $0x4e,%dl
  421fb0:	0f 85 2a fd ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421fb6:	0f b6 50 02          	movzbl 0x2(%rax),%edx
  421fba:	80 fa 66             	cmp    $0x66,%dl
  421fbd:	74 09                	je     421fc8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x418>
  421fbf:	80 fa 46             	cmp    $0x46,%dl
  421fc2:	0f 85 18 fd ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421fc8:	0f b6 50 03          	movzbl 0x3(%rax),%edx
  421fcc:	80 fa 69             	cmp    $0x69,%dl
  421fcf:	74 09                	je     421fda <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x42a>
  421fd1:	80 fa 49             	cmp    $0x49,%dl
  421fd4:	0f 85 06 fd ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421fda:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  421fde:	80 fa 6e             	cmp    $0x6e,%dl
  421fe1:	74 09                	je     421fec <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x43c>
  421fe3:	80 fa 4e             	cmp    $0x4e,%dl
  421fe6:	0f 85 f4 fc ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421fec:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  421ff0:	80 fa 69             	cmp    $0x69,%dl
  421ff3:	74 09                	je     421ffe <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x44e>
  421ff5:	80 fa 49             	cmp    $0x49,%dl
  421ff8:	0f 85 e2 fc ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  421ffe:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  422002:	80 fa 74             	cmp    $0x74,%dl
  422005:	74 09                	je     422010 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x460>
  422007:	80 fa 54             	cmp    $0x54,%dl
  42200a:	0f 85 d0 fc ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  422010:	0f b6 40 07          	movzbl 0x7(%rax),%eax
  422014:	3c 79                	cmp    $0x79,%al
  422016:	74 08                	je     422020 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x470>
  422018:	3c 59                	cmp    $0x59,%al
  42201a:	0f 85 c0 fc ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
                  end - begin == inifinity_size
                  && lc_iequal(begin, lc_infinity, lc_INFINITY, inifinity_size)
                )
             )
            {
                if( !has_minus ) value = std::numeric_limits<T>::infinity();
  422020:	80 f9 2d             	cmp    $0x2d,%cl
  422023:	0f 84 bf 01 00 00    	je     4221e8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x638>
  422029:	48 b8 08 93 df ff ff 	movabs $0xffffffffffdf9308,%rax
  422030:	ff ff ff 
  422033:	f3 0f 10 1c 03       	movss  (%rbx,%rax,1),%xmm3
  422038:	f3 0f 11 1c 24       	movss  %xmm3,(%rsp)
          : content(new holder< typename decay<ValueType>::type >(static_cast<ValueType&&>(value)))
  42203d:	48 b8 40 e7 dd ff ff 	movabs $0xffffffffffdde740,%rax
  422044:	ff ff ff 
  422047:	bf 10 00 00 00       	mov    $0x10,%edi
  42204c:	49 89 df             	mov    %rbx,%r15
  42204f:	48 01 d8             	add    %rbx,%rax
  422052:	ff d0                	callq  *%rax
  422054:	49 8b 7d 00          	mov    0x0(%r13),%rdi
              : held(static_cast< ValueType&& >(value))
  422058:	48 ba 90 ef ff ff ff 	movabs $0xffffffffffffef90,%rdx
  42205f:	ff ff ff 
      __b = _GLIBCXX_MOVE(__tmp);
  422062:	49 89 45 00          	mov    %rax,0x0(%r13)
  422066:	48 01 da             	add    %rbx,%rdx
  422069:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
  42206e:	48 89 10             	mov    %rdx,(%rax)
  422071:	f3 0f 11 48 08       	movss  %xmm1,0x8(%rax)
            delete content;
  422076:	48 85 ff             	test   %rdi,%rdi
  422079:	74 06                	je     422081 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x4d1>
  42207b:	48 8b 07             	mov    (%rdi),%rax
  42207e:	ff 50 08             	callq  *0x8(%rax)
  422081:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
	if (!_M_is_local())
  422086:	48 83 c5 10          	add    $0x10,%rbp
  42208a:	48 39 ef             	cmp    %rbp,%rdi
  42208d:	74 12                	je     4220a1 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x4f1>
  42208f:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  422096:	ff ff ff 
  422099:	49 89 df             	mov    %rbx,%r15
  42209c:	48 01 d8             	add    %rbx,%rax
  42209f:	ff d0                	callq  *%rax
    }
  4220a1:	48 81 c4 98 02 00 00 	add    $0x298,%rsp
  4220a8:	5b                   	pop    %rbx
  4220a9:	5d                   	pop    %rbp
  4220aa:	41 5c                	pop    %r12
  4220ac:	41 5d                	pop    %r13
  4220ae:	41 5e                	pop    %r14
  4220b0:	41 5f                	pop    %r15
  4220b2:	c3                   	retq   
  4220b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                if ( val[i] != lcase[i] && val[i] != ucase[i] ) return false;
  4220b8:	40 80 fe 69          	cmp    $0x69,%sil
  4220bc:	74 0a                	je     4220c8 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x518>
  4220be:	40 80 fe 49          	cmp    $0x49,%sil
  4220c2:	0f 85 18 fc ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  4220c8:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  4220cc:	80 fa 6e             	cmp    $0x6e,%dl
  4220cf:	74 09                	je     4220da <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x52a>
  4220d1:	80 fa 4e             	cmp    $0x4e,%dl
  4220d4:	0f 85 06 fc ff ff    	jne    421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  4220da:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  4220de:	3c 66                	cmp    $0x66,%al
  4220e0:	0f 84 3a ff ff ff    	je     422020 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x470>
  4220e6:	3c 46                	cmp    $0x46,%al
  4220e8:	0f 84 32 ff ff ff    	je     422020 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x470>
  4220ee:	e9 ed fb ff ff       	jmpq   421ce0 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x130>
  4220f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                if( !has_minus ) value = std::numeric_limits<T>::quiet_NaN();
  4220f8:	80 f9 2d             	cmp    $0x2d,%cl
  4220fb:	0f 84 7f 01 00 00    	je     422280 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x6d0>
  422101:	48 b8 fc 92 df ff ff 	movabs $0xffffffffffdf92fc,%rax
  422108:	ff ff ff 
  42210b:	f3 0f 10 2c 03       	movss  (%rbx,%rax,1),%xmm5
  422110:	f3 0f 11 2c 24       	movss  %xmm5,(%rsp)
  422115:	e9 23 ff ff ff       	jmpq   42203d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  42211a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  422120:	48 b8 00 e8 dd ff ff 	movabs $0xffffffffffdde800,%rax
  422127:	ff ff ff 
  42212a:	4c 89 f7             	mov    %r14,%rdi
  42212d:	48 01 d8             	add    %rbx,%rax
  422130:	ff d0                	callq  *%rax
  422132:	83 f8 ff             	cmp    $0xffffffff,%eax
  422135:	0f 85 79 fd ff ff    	jne    421eb4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x304>
  42213b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  422140:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  422144:	49 89 df             	mov    %rbx,%r15
  422147:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  42214e:	00 00 00 00 00 
  422153:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  422157:	48 83 c0 18          	add    $0x18,%rax
  42215b:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  422162:	00 
  422163:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  42216a:	ff ff ff 
  42216d:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  422171:	48 83 c0 10          	add    $0x10,%rax
  422175:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  42217c:	00 
  42217d:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  422184:	ff ff ff 
  422187:	48 01 d8             	add    %rbx,%rax
  42218a:	ff d0                	callq  *%rax
  42218c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  422191:	48 8b 3c 24          	mov    (%rsp),%rdi
  422195:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  422199:	48 83 c7 38          	add    $0x38,%rdi
  42219d:	48 83 c0 10          	add    $0x10,%rax
  4221a1:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  4221a6:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  4221ad:	ff ff ff 
  4221b0:	48 01 d8             	add    %rbx,%rax
  4221b3:	ff d0                	callq  *%rax
  4221b5:	41 0f b6 44 24 ff    	movzbl -0x1(%r12),%eax
                if ( return_value &&
                     (
                        Traits::eq(*(finish-1), lowercase_e)                   // 1.0e
                        || Traits::eq(*(finish-1), capital_e)                  // 1.0E
                        || Traits::eq(*(finish-1), minus)                      // 1.0e- or 1.0E-
                        || Traits::eq(*(finish-1), plus)                       // 1.0e+ or 1.0E+
  4221bb:	8d 50 d5             	lea    -0x2b(%rax),%edx
                    return false;

                o_interpreter_type out(i_interpreter.cbegin(), i_interpreter.cend());

                // Disabling ADL, by directly specifying operators.
                if(!(out.operator >>(result)))
  4221be:	81 e2 fd 00 00 00    	and    $0xfd,%edx
  4221c4:	0f 84 64 fd ff ff    	je     421f2e <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x37e>
                        || Traits::eq(*(finish-1), capital_e)                  // 1.0E
  4221ca:	83 e0 df             	and    $0xffffffdf,%eax
  4221cd:	3c 45                	cmp    $0x45,%al
  4221cf:	0f 84 59 fd ff ff    	je     421f2e <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x37e>
  4221d5:	f3 0f 10 54 24 2c    	movss  0x2c(%rsp),%xmm2
  4221db:	f3 0f 11 14 24       	movss  %xmm2,(%rsp)
  4221e0:	e9 58 fe ff ff       	jmpq   42203d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  4221e5:	0f 1f 00             	nopl   (%rax)
                if( !has_minus ) value = std::numeric_limits<T>::infinity();
  4221e8:	48 b8 00 93 df ff ff 	movabs $0xffffffffffdf9300,%rax
  4221ef:	ff ff ff 
  4221f2:	f3 0f 10 24 03       	movss  (%rbx,%rax,1),%xmm4
  4221f7:	f3 0f 11 24 24       	movss  %xmm4,(%rsp)
  4221fc:	e9 3c fe ff ff       	jmpq   42203d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  422201:	49 89 d6             	mov    %rdx,%r14
        {}
  422204:	48 ba 40 e9 dd ff ff 	movabs $0xffffffffffdde940,%rdx
  42220b:	ff ff ff 
  42220e:	48 89 04 24          	mov    %rax,(%rsp)
  422212:	48 01 da             	add    %rbx,%rdx
  422215:	4c 89 6c 24 30       	mov    %r13,0x30(%rsp)
  42221a:	4c 89 e7             	mov    %r12,%rdi
  42221d:	49 89 df             	mov    %rbx,%r15
  422220:	ff d2                	callq  *%rdx
  422222:	48 8b 04 24          	mov    (%rsp),%rax
  422226:	4c 89 f2             	mov    %r14,%rdx
  422229:	48 83 ea 01          	sub    $0x1,%rdx
  42222d:	49 89 c4             	mov    %rax,%r12
  422230:	0f 85 9f 00 00 00    	jne    4222d5 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x725>
        catch(const bad_lexical_cast&) {
  422236:	48 89 c7             	mov    %rax,%rdi
            boost::throw_exception(invalid_option_value(s));
  422239:	4c 8d ac 24 b0 00 00 	lea    0xb0(%rsp),%r13
  422240:	00 
        catch(const bad_lexical_cast&) {
  422241:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  422248:	ff ff ff 
  42224b:	49 89 df             	mov    %rbx,%r15
  42224e:	48 01 d8             	add    %rbx,%rax
  422251:	ff d0                	callq  *%rax
            boost::throw_exception(invalid_option_value(s));
  422253:	48 b8 90 e5 dd ff ff 	movabs $0xffffffffffdde590,%rax
  42225a:	ff ff ff 
  42225d:	48 89 ee             	mov    %rbp,%rsi
  422260:	4c 89 ef             	mov    %r13,%rdi
  422263:	48 01 d8             	add    %rbx,%rax
  422266:	ff d0                	callq  *%rax
  422268:	48 b8 90 64 df ff ff 	movabs $0xffffffffffdf6490,%rax
  42226f:	ff ff ff 
  422272:	4c 89 ef             	mov    %r13,%rdi
  422275:	48 01 d8             	add    %rbx,%rax
  422278:	ff d0                	callq  *%rax
  42227a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                if( !has_minus ) value = std::numeric_limits<T>::quiet_NaN();
  422280:	48 b8 04 93 df ff ff 	movabs $0xffffffffffdf9304,%rax
  422287:	ff ff ff 
  42228a:	f3 0f 10 34 03       	movss  (%rbx,%rax,1),%xmm6
  42228f:	f3 0f 11 34 24       	movss  %xmm6,(%rsp)
  422294:	e9 a4 fd ff ff       	jmpq   42203d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x48d>
  422299:	49 89 c4             	mov    %rax,%r12
  42229c:	48 b8 48 f9 ff ff ff 	movabs $0xfffffffffffff948,%rax
  4222a3:	ff ff ff 
  4222a6:	4c 89 ef             	mov    %r13,%rdi
  4222a9:	48 01 d8             	add    %rbx,%rax
  4222ac:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
  4222b3:	00 
  4222b4:	48 b8 a0 c6 de ff ff 	movabs $0xffffffffffdec6a0,%rax
  4222bb:	ff ff ff 
  4222be:	48 01 d8             	add    %rbx,%rax
  4222c1:	ff d0                	callq  *%rax
        catch(const bad_lexical_cast&) {
  4222c3:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  4222ca:	ff ff ff 
  4222cd:	49 89 df             	mov    %rbx,%r15
  4222d0:	48 01 d8             	add    %rbx,%rax
  4222d3:	ff d0                	callq  *%rax
  4222d5:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
  4222da:	48 83 c5 10          	add    $0x10,%rbp
  4222de:	48 39 ef             	cmp    %rbp,%rdi
  4222e1:	74 12                	je     4222f5 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x745>
  4222e3:	48 b8 20 e7 dd ff ff 	movabs $0xffffffffffdde720,%rax
  4222ea:	ff ff ff 
  4222ed:	49 89 df             	mov    %rbx,%r15
  4222f0:	48 01 d8             	add    %rbx,%rax
  4222f3:	ff d0                	callq  *%rax
  4222f5:	48 b8 30 ea dd ff ff 	movabs $0xffffffffffddea30,%rax
  4222fc:	ff ff ff 
  4222ff:	4c 89 e7             	mov    %r12,%rdi
  422302:	49 89 df             	mov    %rbx,%r15
  422305:	48 01 d8             	add    %rbx,%rax
  422308:	ff d0                	callq  *%rax
  42230a:	49 89 c4             	mov    %rax,%r12
  42230d:	eb b4                	jmp    4222c3 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x713>
  42230f:	e9 15 ff ff ff       	jmpq   422229 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x679>
  422314:	48 83 fa 02          	cmp    $0x2,%rdx
  422318:	0f 85 96 00 00 00    	jne    4223b4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x804>
                } catch (const ::std::ios_base::failure& /*f*/) {
  42231e:	48 89 c7             	mov    %rax,%rdi
  422321:	48 b8 b0 e4 dd ff ff 	movabs $0xffffffffffdde4b0,%rax
  422328:	ff ff ff 
  42232b:	49 89 df             	mov    %rbx,%r15
  42232e:	48 01 d8             	add    %rbx,%rax
  422331:	ff d0                	callq  *%rax
  422333:	48 b8 90 e9 dd ff ff 	movabs $0xffffffffffdde990,%rax
  42233a:	ff ff ff 
  42233d:	48 01 d8             	add    %rbx,%rax
  422340:	ff d0                	callq  *%rax
  422342:	e9 6d fb ff ff       	jmpq   421eb4 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x304>
  422347:	49 89 c4             	mov    %rax,%r12
  42234a:	49 89 d5             	mov    %rdx,%r13
  42234d:	48 b8 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rax
  422354:	ff ff ff 
  422357:	49 8d 7e 10          	lea    0x10(%r14),%rdi
  42235b:	49 89 df             	mov    %rbx,%r15
  42235e:	48 8b 04 03          	mov    (%rbx,%rax,1),%rax
  422362:	48 83 c0 10          	add    $0x10,%rax
  422366:	48 89 84 24 80 01 00 	mov    %rax,0x180(%rsp)
  42236d:	00 
  42236e:	48 b8 70 e4 dd ff ff 	movabs $0xffffffffffdde470,%rax
  422375:	ff ff ff 
  422378:	48 01 d8             	add    %rbx,%rax
  42237b:	ff d0                	callq  *%rax
  42237d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  422382:	48 8b 3c 24          	mov    (%rsp),%rdi
  422386:	49 89 df             	mov    %rbx,%r15
  422389:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  42238d:	48 83 c7 38          	add    $0x38,%rdi
  422391:	48 83 c0 10          	add    $0x10,%rax
  422395:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  42239a:	48 b8 d0 e8 dd ff ff 	movabs $0xffffffffffdde8d0,%rax
  4223a1:	ff ff ff 
  4223a4:	48 01 d8             	add    %rbx,%rax
  4223a7:	ff d0                	callq  *%rax
  4223a9:	4c 89 e0             	mov    %r12,%rax
  4223ac:	4c 89 ea             	mov    %r13,%rdx
  4223af:	e9 75 fe ff ff       	jmpq   422229 <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x679>
  4223b4:	49 89 c4             	mov    %rax,%r12
  4223b7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4223bc:	49 89 d5             	mov    %rdx,%r13
  4223bf:	48 c7 84 24 78 01 00 	movq   $0x0,0x178(%rsp)
  4223c6:	00 00 00 00 00 
  4223cb:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
  4223cf:	48 83 c0 18          	add    $0x18,%rax
  4223d3:	48 89 84 24 70 01 00 	mov    %rax,0x170(%rsp)
  4223da:	00 
  4223db:	e9 6d ff ff ff       	jmpq   42234d <_ZN5boost15program_options8validateIfcEEvRNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIT0_St11char_traitsIS7_ESaIS7_EEESaISB_EEPT_l+0x79d>

00000000004223e0 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE>:
    typed_value<T, charT>::
  4223e0:	48 8d 05 f9 ff ff ff 	lea    -0x7(%rip),%rax        # 4223e0 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE>
  4223e7:	49 bb 20 8c 20 00 00 	movabs $0x208c20,%r11
  4223ee:	00 00 00 
  4223f1:	48 89 f9             	mov    %rdi,%rcx
  4223f4:	48 89 f7             	mov    %rsi,%rdi
  4223f7:	48 89 d6             	mov    %rdx,%rsi
        if (new_tokens.empty() && !m_implicit_value.empty())
  4223fa:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  4223fe:	4c 01 d8             	add    %r11,%rax
  422401:	48 39 16             	cmp    %rdx,(%rsi)
  422404:	74 1a                	je     422420 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE+0x40>
            validate(value_store, new_tokens, (T*)0, 0);
  422406:	49 b8 b0 6b df ff ff 	movabs $0xffffffffffdf6bb0,%r8
  42240d:	ff ff ff 
  422410:	31 c9                	xor    %ecx,%ecx
  422412:	31 d2                	xor    %edx,%edx
  422414:	4c 01 c0             	add    %r8,%rax
  422417:	ff e0                	jmpq   *%rax
  422419:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if (new_tokens.empty() && !m_implicit_value.empty())
  422420:	48 83 79 60 00       	cmpq   $0x0,0x60(%rcx)
  422425:	74 df                	je     422406 <_ZNK5boost15program_options11typed_valueIfcE6xparseERNS_3anyERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EE+0x26>
            value_store = m_implicit_value;
  422427:	48 ba c0 a9 de ff ff 	movabs $0xffffffffffdea9c0,%rdx
  42242e:	ff ff ff 
  422431:	48 8d 71 60          	lea    0x60(%rcx),%rsi
  422435:	48 01 d0             	add    %rdx,%rax
  422438:	ff e0                	jmpq   *%rax
  42243a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000422440 <_ZL19abort_unimplementedPKc>:
}

/* Unimplemented functions below. Programs rarely use these, so rather than
 * implementing the library in full, we do these on demand */

static void abort_unimplemented(const char* fn) {
  422440:	53                   	push   %rbx
				   __bos (__s), __fmt, __va_arg_pack ());
  422441:	4c 8d 05 c8 1e 00 00 	lea    0x1ec8(%rip),%r8        # 424310 <_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEEE+0x90>
  422448:	49 89 f9             	mov    %rdi,%r9
  42244b:	b9 00 04 00 00       	mov    $0x400,%ecx
  422450:	ba 01 00 00 00       	mov    $0x1,%edx
  422455:	be 00 04 00 00       	mov    $0x400,%esi
  42245a:	48 81 ec 10 04 00 00 	sub    $0x410,%rsp
  422461:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  422468:	00 00 
  42246a:	48 89 84 24 08 04 00 	mov    %rax,0x408(%rsp)
  422471:	00 
  422472:	31 c0                	xor    %eax,%eax
  422474:	48 89 e7             	mov    %rsp,%rdi
  422477:	e8 34 71 fe ff       	callq  4095b0 <__snprintf_chk@plt>
    COMPILER_BARRIER();
}

static inline void sim_magic_op_1(uint64_t op, uint64_t arg0) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  42247c:	b9 05 04 00 00       	mov    $0x405,%ecx
  422481:	48 89 e7             	mov    %rsp,%rdi
  422484:	48 87 c9             	xchg   %rcx,%rcx
    char buf[1024];
    snprintf(buf, sizeof(buf), "Aborting: sim-alloc function unimplemented: %s", fn);
    sim_magic_op_1(MAGIC_OP_WRITE_STD_OUT, reinterpret_cast<uint64_t>(&buf[0]));
    std::abort();
  422487:	e8 c4 70 fe ff       	callq  409550 <abort@plt>
  42248c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000422490 <malloc>:
void* malloc(size_t size) {
  422490:	48 83 ec 18          	sub    $0x18,%rsp
  422494:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42249b:	00 00 
  42249d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4224a2:	31 c0                	xor    %eax,%eax
    if (size > 0) {
  4224a4:	48 85 ff             	test   %rdi,%rdi
  4224a7:	74 27                	je     4224d0 <malloc+0x40>
  4224a9:	48 89 fe             	mov    %rdi,%rsi
    COMPILER_BARRIER();
}

static inline void sim_magic_op_2(uint64_t op, uint64_t arg0, uint64_t arg1) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  4224ac:	b9 00 20 00 00       	mov    $0x2000,%ecx
        sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), size);
  4224b1:	48 89 e7             	mov    %rsp,%rdi
  4224b4:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  4224b7:	48 8b 04 24          	mov    (%rsp),%rax
}
  4224bb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  4224c0:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  4224c7:	00 00 
  4224c9:	75 09                	jne    4224d4 <malloc+0x44>
  4224cb:	48 83 c4 18          	add    $0x18,%rsp
  4224cf:	c3                   	retq   
        return nullptr;
  4224d0:	31 c0                	xor    %eax,%eax
  4224d2:	eb e7                	jmp    4224bb <malloc+0x2b>
}
  4224d4:	e8 b7 72 fe ff       	callq  409790 <__stack_chk_fail@plt>
  4224d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004224e0 <calloc>:
void* calloc(size_t nmemb, size_t size) {
  4224e0:	48 83 ec 18          	sub    $0x18,%rsp
  4224e4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4224eb:	00 00 
  4224ed:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4224f2:	31 c0                	xor    %eax,%eax
    const size_t total = nmemb * size;
  4224f4:	48 0f af f7          	imul   %rdi,%rsi
  4224f8:	b9 00 20 00 00       	mov    $0x2000,%ecx
    sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), total);
  4224fd:	48 89 e7             	mov    %rsp,%rdi
  422500:	48 87 c9             	xchg   %rcx,%rcx
    {
      __warn_memset_zero_len ();
      return __dest;
    }
#endif
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
  422503:	48 8b 3c 24          	mov    (%rsp),%rdi
  422507:	48 89 f2             	mov    %rsi,%rdx
  42250a:	31 f6                	xor    %esi,%esi
  42250c:	e8 2f 70 fe ff       	callq  409540 <memset@plt>
}
  422511:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  422516:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  42251d:	00 00 
  42251f:	48 8b 04 24          	mov    (%rsp),%rax
  422523:	75 05                	jne    42252a <calloc+0x4a>
  422525:	48 83 c4 18          	add    $0x18,%rsp
  422529:	c3                   	retq   
  42252a:	e8 61 72 fe ff       	callq  409790 <__stack_chk_fail@plt>
  42252f:	90                   	nop

0000000000422530 <realloc>:
void* realloc(void* ptr, size_t size) {
  422530:	53                   	push   %rbx
  422531:	48 89 f0             	mov    %rsi,%rax
  422534:	48 83 ec 10          	sub    $0x10,%rsp
  422538:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  42253f:	00 00 
  422541:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  422546:	31 d2                	xor    %edx,%edx
    if (!ptr) {
  422548:	48 85 ff             	test   %rdi,%rdi
  42254b:	74 73                	je     4225c0 <realloc+0x90>
    } else if (size == 0) {
  42254d:	48 85 f6             	test   %rsi,%rsi
  422550:	48 89 fb             	mov    %rdi,%rbx
  422553:	0f 84 87 00 00 00    	je     4225e0 <realloc+0xb0>
  422559:	b9 04 20 00 00       	mov    $0x2004,%ecx
    sim_magic_op_2(MAGIC_OP_MALLOC_USABLE_SIZE, reinterpret_cast<uint64_t>(&usableSize), reinterpret_cast<uint64_t>(ptr));
  42255e:	48 89 e7             	mov    %rsp,%rdi
  422561:	48 89 de             	mov    %rbx,%rsi
  422564:	48 87 c9             	xchg   %rcx,%rcx
    return usableSize;
  422567:	48 8b 14 24          	mov    (%rsp),%rdx
  42256b:	49 89 d8             	mov    %rbx,%r8
        if (oldSize >= size) {
  42256e:	48 39 d0             	cmp    %rdx,%rax
  422571:	77 1d                	ja     422590 <realloc+0x60>
}
  422573:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  422578:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  42257f:	00 00 
  422581:	4c 89 c0             	mov    %r8,%rax
  422584:	75 72                	jne    4225f8 <realloc+0xc8>
  422586:	48 83 c4 10          	add    $0x10,%rsp
  42258a:	5b                   	pop    %rbx
  42258b:	c3                   	retq   
  42258c:	0f 1f 40 00          	nopl   0x0(%rax)
  422590:	b9 00 20 00 00       	mov    $0x2000,%ecx
  422595:	48 89 c6             	mov    %rax,%rsi
  422598:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  42259b:	4c 8b 04 24          	mov    (%rsp),%r8
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  42259f:	48 89 de             	mov    %rbx,%rsi
  4225a2:	4c 89 c7             	mov    %r8,%rdi
  4225a5:	e8 06 71 fe ff       	callq  4096b0 <memcpy@plt>
  4225aa:	49 89 c0             	mov    %rax,%r8
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4225ad:	b9 03 20 00 00       	mov    $0x2003,%ecx
  4225b2:	48 89 df             	mov    %rbx,%rdi
  4225b5:	48 87 c9             	xchg   %rcx,%rcx
            return newPtr;
  4225b8:	eb b9                	jmp    422573 <realloc+0x43>
  4225ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    if (size > 0) {
  4225c0:	48 85 f6             	test   %rsi,%rsi
  4225c3:	74 2b                	je     4225f0 <realloc+0xc0>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  4225c5:	b9 00 20 00 00       	mov    $0x2000,%ecx
        sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), size);
  4225ca:	48 89 e7             	mov    %rsp,%rdi
  4225cd:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  4225d0:	4c 8b 04 24          	mov    (%rsp),%r8
  4225d4:	eb 9d                	jmp    422573 <realloc+0x43>
  4225d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4225dd:	00 00 00 
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  4225e0:	b9 03 20 00 00       	mov    $0x2003,%ecx
  4225e5:	48 87 c9             	xchg   %rcx,%rcx
        return nullptr;
  4225e8:	45 31 c0             	xor    %r8d,%r8d
  4225eb:	eb 86                	jmp    422573 <realloc+0x43>
  4225ed:	0f 1f 00             	nopl   (%rax)
        return nullptr;
  4225f0:	45 31 c0             	xor    %r8d,%r8d
  4225f3:	e9 7b ff ff ff       	jmpq   422573 <realloc+0x43>
}
  4225f8:	e8 93 71 fe ff       	callq  409790 <__stack_chk_fail@plt>
  4225fd:	0f 1f 00             	nopl   (%rax)

0000000000422600 <free>:
    if (ptr) sim_magic_op_1(MAGIC_OP_FREE, reinterpret_cast<uint64_t>(ptr));
  422600:	48 85 ff             	test   %rdi,%rdi
  422603:	74 08                	je     42260d <free+0xd>
  422605:	b9 03 20 00 00       	mov    $0x2003,%ecx
  42260a:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  42260d:	f3 c3                	repz retq 
  42260f:	90                   	nop

0000000000422610 <_Z5cfreePv>:
  422610:	48 85 ff             	test   %rdi,%rdi
  422613:	74 08                	je     42261d <_Z5cfreePv+0xd>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0));
  422615:	b9 03 20 00 00       	mov    $0x2003,%ecx
  42261a:	48 87 c9             	xchg   %rcx,%rcx
    COMPILER_BARRIER();
  42261d:	f3 c3                	repz retq 
  42261f:	90                   	nop

0000000000422620 <posix_memalign>:
int posix_memalign(void **memptr, size_t alignment, size_t size) {
  422620:	48 83 ec 18          	sub    $0x18,%rsp
  422624:	49 89 f8             	mov    %rdi,%r8
  422627:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42262e:	00 00 
  422630:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422635:	31 c0                	xor    %eax,%eax
    if (size == 0) {
  422637:	48 85 d2             	test   %rdx,%rdx
  42263a:	74 54                	je     422690 <posix_memalign+0x70>
    } else if (!alignment || (alignment & (alignment - 1))
  42263c:	48 85 f6             	test   %rsi,%rsi
        return EINVAL;
  42263f:	b8 16 00 00 00       	mov    $0x16,%eax
    } else if (!alignment || (alignment & (alignment - 1))
  422644:	75 1a                	jne    422660 <posix_memalign+0x40>
}
  422646:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  42264b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  422652:	00 00 
  422654:	75 4a                	jne    4226a0 <posix_memalign+0x80>
  422656:	48 83 c4 18          	add    $0x18,%rsp
  42265a:	c3                   	retq   
  42265b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    } else if (!alignment || (alignment & (alignment - 1))
  422660:	48 8d 4e ff          	lea    -0x1(%rsi),%rcx
               || (alignment % sizeof(void*))) {
  422664:	48 83 c9 07          	or     $0x7,%rcx
  422668:	48 85 f1             	test   %rsi,%rcx
  42266b:	75 d9                	jne    422646 <posix_memalign+0x26>
    COMPILER_BARRIER();
}

static inline void sim_magic_op_3(uint64_t op, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
    COMPILER_BARRIER();
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1), "d"(arg2));
  42266d:	b9 01 20 00 00       	mov    $0x2001,%ecx
        sim_magic_op_3(MAGIC_OP_POSIX_MEMALIGN,
  422672:	48 89 e7             	mov    %rsp,%rdi
  422675:	48 87 c9             	xchg   %rcx,%rcx
        if (ptr == nullptr) return ENOMEM;
  422678:	48 8b 04 24          	mov    (%rsp),%rax
  42267c:	48 85 c0             	test   %rax,%rax
  42267f:	74 18                	je     422699 <posix_memalign+0x79>
        *memptr = ptr;
  422681:	49 89 00             	mov    %rax,(%r8)
    return 0;
  422684:	31 c0                	xor    %eax,%eax
  422686:	eb be                	jmp    422646 <posix_memalign+0x26>
  422688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42268f:	00 
        *memptr = nullptr;
  422690:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  422697:	eb ad                	jmp    422646 <posix_memalign+0x26>
        if (ptr == nullptr) return ENOMEM;
  422699:	b8 0c 00 00 00       	mov    $0xc,%eax
  42269e:	eb a6                	jmp    422646 <posix_memalign+0x26>
}
  4226a0:	e8 eb 70 fe ff       	callq  409790 <__stack_chk_fail@plt>
  4226a5:	90                   	nop
  4226a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4226ad:	00 00 00 

00000000004226b0 <aligned_alloc>:
  4226b0:	48 83 ec 18          	sub    $0x18,%rsp
  4226b4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4226bb:	00 00 
  4226bd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4226c2:	31 c0                	xor    %eax,%eax
  4226c4:	48 85 f6             	test   %rsi,%rsi
  4226c7:	74 08                	je     4226d1 <aligned_alloc+0x21>
  4226c9:	48 85 ff             	test   %rdi,%rdi
  4226cc:	49 89 f8             	mov    %rdi,%r8
  4226cf:	75 1f                	jne    4226f0 <aligned_alloc+0x40>
  4226d1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  4226d6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4226dd:	00 00 
  4226df:	75 33                	jne    422714 <aligned_alloc+0x64>
  4226e1:	48 83 c4 18          	add    $0x18,%rsp
  4226e5:	c3                   	retq   
  4226e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4226ed:	00 00 00 
  4226f0:	48 8d 4f ff          	lea    -0x1(%rdi),%rcx
  4226f4:	48 83 c9 07          	or     $0x7,%rcx
  4226f8:	48 85 f9             	test   %rdi,%rcx
  4226fb:	75 d4                	jne    4226d1 <aligned_alloc+0x21>
  4226fd:	48 89 f2             	mov    %rsi,%rdx
  422700:	b9 01 20 00 00       	mov    $0x2001,%ecx
  422705:	48 89 e7             	mov    %rsp,%rdi
  422708:	4c 89 c6             	mov    %r8,%rsi
  42270b:	48 87 c9             	xchg   %rcx,%rcx
  42270e:	48 8b 04 24          	mov    (%rsp),%rax
  422712:	eb bd                	jmp    4226d1 <aligned_alloc+0x21>
  422714:	e8 77 70 fe ff       	callq  409790 <__stack_chk_fail@plt>
  422719:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000422720 <memalign>:
void* memalign(size_t alignment, size_t size) {
  422720:	48 83 ec 18          	sub    $0x18,%rsp
  422724:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42272b:	00 00 
  42272d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422732:	31 c0                	xor    %eax,%eax
    if (size == 0) {
  422734:	48 85 f6             	test   %rsi,%rsi
  422737:	74 08                	je     422741 <memalign+0x21>
    } else if (!alignment || (alignment & (alignment - 1))
  422739:	48 85 ff             	test   %rdi,%rdi
  42273c:	49 89 f8             	mov    %rdi,%r8
  42273f:	75 1f                	jne    422760 <memalign+0x40>
}
  422741:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  422746:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42274d:	00 00 
  42274f:	75 33                	jne    422784 <memalign+0x64>
  422751:	48 83 c4 18          	add    $0x18,%rsp
  422755:	c3                   	retq   
  422756:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42275d:	00 00 00 
    } else if (!alignment || (alignment & (alignment - 1))
  422760:	48 8d 4f ff          	lea    -0x1(%rdi),%rcx
               || (alignment % sizeof(void*))) {
  422764:	48 83 c9 07          	or     $0x7,%rcx
  422768:	48 85 f9             	test   %rdi,%rcx
  42276b:	75 d4                	jne    422741 <memalign+0x21>
  42276d:	48 89 f2             	mov    %rsi,%rdx
  422770:	b9 01 20 00 00       	mov    $0x2001,%ecx
        sim_magic_op_3(MAGIC_OP_POSIX_MEMALIGN,
  422775:	48 89 e7             	mov    %rsp,%rdi
  422778:	4c 89 c6             	mov    %r8,%rsi
  42277b:	48 87 c9             	xchg   %rcx,%rcx
        if (ptr == nullptr) return ENOMEM;
  42277e:	48 8b 04 24          	mov    (%rsp),%rax
  422782:	eb bd                	jmp    422741 <memalign+0x21>
}
  422784:	e8 07 70 fe ff       	callq  409790 <__stack_chk_fail@plt>
  422789:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000422790 <strdup>:
char* strdup(const char* src) {
  422790:	53                   	push   %rbx
  422791:	48 89 fb             	mov    %rdi,%rbx
  422794:	48 83 ec 10          	sub    $0x10,%rsp
  422798:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42279f:	00 00 
  4227a1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4227a6:	31 c0                	xor    %eax,%eax
    size_t len = strlen(src);
  4227a8:	e8 23 6d fe ff       	callq  4094d0 <strlen@plt>
  4227ad:	31 c9                	xor    %ecx,%ecx
    if (size > 0) {
  4227af:	48 85 c0             	test   %rax,%rax
  4227b2:	74 12                	je     4227c6 <strdup+0x36>
    __asm__ __volatile__("xchg %%rcx, %%rcx;" : : "c"(op), "D"(arg0), "S"(arg1));
  4227b4:	b9 00 20 00 00       	mov    $0x2000,%ecx
        sim_magic_op_2(MAGIC_OP_ALLOC, reinterpret_cast<uint64_t>(&ptr), size);
  4227b9:	48 89 e7             	mov    %rsp,%rdi
  4227bc:	48 89 c6             	mov    %rax,%rsi
  4227bf:	48 87 c9             	xchg   %rcx,%rcx
        return ptr;
  4227c2:	48 8b 0c 24          	mov    (%rsp),%rcx
  4227c6:	48 89 c2             	mov    %rax,%rdx
  4227c9:	48 89 de             	mov    %rbx,%rsi
  4227cc:	48 89 cf             	mov    %rcx,%rdi
  4227cf:	e8 dc 6e fe ff       	callq  4096b0 <memcpy@plt>
}
  4227d4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  4227d9:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  4227e0:	00 00 
  4227e2:	75 06                	jne    4227ea <strdup+0x5a>
  4227e4:	48 83 c4 10          	add    $0x10,%rsp
  4227e8:	5b                   	pop    %rbx
  4227e9:	c3                   	retq   
  4227ea:	e8 a1 6f fe ff       	callq  409790 <__stack_chk_fail@plt>
  4227ef:	90                   	nop

00000000004227f0 <malloc_usable_size>:
size_t malloc_usable_size(void* ptr) {
  4227f0:	48 83 ec 18          	sub    $0x18,%rsp
  4227f4:	48 89 fe             	mov    %rdi,%rsi
  4227f7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4227fe:	00 00 
  422800:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  422805:	31 c0                	xor    %eax,%eax
  422807:	b9 04 20 00 00       	mov    $0x2004,%ecx
    sim_magic_op_2(MAGIC_OP_MALLOC_USABLE_SIZE, reinterpret_cast<uint64_t>(&usableSize), reinterpret_cast<uint64_t>(ptr));
  42280c:	48 89 e7             	mov    %rsp,%rdi
  42280f:	48 87 c9             	xchg   %rcx,%rcx
}
  422812:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  422817:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  42281e:	00 00 
  422820:	48 8b 04 24          	mov    (%rsp),%rax
  422824:	75 05                	jne    42282b <malloc_usable_size+0x3b>
  422826:	48 83 c4 18          	add    $0x18,%rsp
  42282a:	c3                   	retq   
  42282b:	e8 60 6f fe ff       	callq  409790 <__stack_chk_fail@plt>

0000000000422830 <valloc>:
}

void* valloc(size_t size) {
    abort_unimplemented(__FUNCTION__);
  422830:	48 8d 3d 79 1b 00 00 	lea    0x1b79(%rip),%rdi        # 4243b0 <_ZZ6vallocE12__FUNCTION__>
void* valloc(size_t size) {
  422837:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42283b:	e8 00 fc ff ff       	callq  422440 <_ZL19abort_unimplementedPKc>

0000000000422840 <pvalloc>:
    return nullptr;
}

void* pvalloc(size_t size) {
    abort_unimplemented(__FUNCTION__);
  422840:	48 8d 3d 61 1b 00 00 	lea    0x1b61(%rip),%rdi        # 4243a8 <_ZZ7pvallocE12__FUNCTION__>
void* pvalloc(size_t size) {
  422847:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42284b:	e8 f0 fb ff ff       	callq  422440 <_ZL19abort_unimplementedPKc>

0000000000422850 <_Z16malloc_get_statev>:
    return nullptr;
}

void* malloc_get_state(void) {
    abort_unimplemented(__FUNCTION__);
  422850:	48 8d 3d 39 1b 00 00 	lea    0x1b39(%rip),%rdi        # 424390 <_ZZ16malloc_get_statevE12__FUNCTION__>
void* malloc_get_state(void) {
  422857:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42285b:	e8 e0 fb ff ff       	callq  422440 <_ZL19abort_unimplementedPKc>

0000000000422860 <_Z16malloc_set_statePv>:
    return nullptr;
}

int malloc_set_state(void*) {
    abort_unimplemented(__FUNCTION__);
  422860:	48 8d 3d 09 1b 00 00 	lea    0x1b09(%rip),%rdi        # 424370 <_ZZ16malloc_set_statePvE12__FUNCTION__>
int malloc_set_state(void*) {
  422867:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42286b:	e8 d0 fb ff ff       	callq  422440 <_ZL19abort_unimplementedPKc>

0000000000422870 <malloc_info>:
    return -1;
}

int malloc_info(int, FILE*) {
    abort_unimplemented(__FUNCTION__);
  422870:	48 8d 3d e9 1a 00 00 	lea    0x1ae9(%rip),%rdi        # 424360 <_ZZ11malloc_infoE12__FUNCTION__>
int malloc_info(int, FILE*) {
  422877:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42287b:	e8 c0 fb ff ff       	callq  422440 <_ZL19abort_unimplementedPKc>

0000000000422880 <malloc_stats>:
    return -1;
}

void malloc_stats(void) {
    abort_unimplemented(__FUNCTION__);
  422880:	48 8d 3d c9 1a 00 00 	lea    0x1ac9(%rip),%rdi        # 424350 <_ZZ12malloc_statsE12__FUNCTION__>
void malloc_stats(void) {
  422887:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42288b:	e8 b0 fb ff ff       	callq  422440 <_ZL19abort_unimplementedPKc>

0000000000422890 <malloc_trim>:
}

int malloc_trim(size_t) {
    abort_unimplemented(__FUNCTION__);
  422890:	48 8d 3d a9 1a 00 00 	lea    0x1aa9(%rip),%rdi        # 424340 <_ZZ11malloc_trimE12__FUNCTION__>
int malloc_trim(size_t) {
  422897:	48 83 ec 08          	sub    $0x8,%rsp
    abort_unimplemented(__FUNCTION__);
  42289b:	e8 a0 fb ff ff       	callq  422440 <_ZL19abort_unimplementedPKc>

00000000004228a0 <__libc_csu_init>:
  4228a0:	41 57                	push   %r15
  4228a2:	41 56                	push   %r14
  4228a4:	49 89 d7             	mov    %rdx,%r15
  4228a7:	41 55                	push   %r13
  4228a9:	41 54                	push   %r12
  4228ab:	4c 8d 25 56 76 20 00 	lea    0x207656(%rip),%r12        # 629f08 <__frame_dummy_init_array_entry>
  4228b2:	55                   	push   %rbp
  4228b3:	48 8d 2d 5e 76 20 00 	lea    0x20765e(%rip),%rbp        # 629f18 <__init_array_end>
  4228ba:	53                   	push   %rbx
  4228bb:	41 89 fd             	mov    %edi,%r13d
  4228be:	49 89 f6             	mov    %rsi,%r14
  4228c1:	4c 29 e5             	sub    %r12,%rbp
  4228c4:	48 83 ec 08          	sub    $0x8,%rsp
  4228c8:	48 c1 fd 03          	sar    $0x3,%rbp
  4228cc:	e8 7f 6a fe ff       	callq  409350 <_init>
  4228d1:	48 85 ed             	test   %rbp,%rbp
  4228d4:	74 20                	je     4228f6 <__libc_csu_init+0x56>
  4228d6:	31 db                	xor    %ebx,%ebx
  4228d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4228df:	00 
  4228e0:	4c 89 fa             	mov    %r15,%rdx
  4228e3:	4c 89 f6             	mov    %r14,%rsi
  4228e6:	44 89 ef             	mov    %r13d,%edi
  4228e9:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  4228ed:	48 83 c3 01          	add    $0x1,%rbx
  4228f1:	48 39 dd             	cmp    %rbx,%rbp
  4228f4:	75 ea                	jne    4228e0 <__libc_csu_init+0x40>
  4228f6:	48 83 c4 08          	add    $0x8,%rsp
  4228fa:	5b                   	pop    %rbx
  4228fb:	5d                   	pop    %rbp
  4228fc:	41 5c                	pop    %r12
  4228fe:	41 5d                	pop    %r13
  422900:	41 5e                	pop    %r14
  422902:	41 5f                	pop    %r15
  422904:	c3                   	retq   
  422905:	90                   	nop
  422906:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42290d:	00 00 00 

0000000000422910 <__libc_csu_fini>:
  422910:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000422914 <_fini>:
  422914:	48 83 ec 08          	sub    $0x8,%rsp
  422918:	48 83 c4 08          	add    $0x8,%rsp
  42291c:	c3                   	retq   
